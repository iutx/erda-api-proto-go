// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mysql.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MySQLAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MySQLAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MySQLAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MySQLAccountMultiError, or
// nil if none found.
func (m *MySQLAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *MySQLAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for InstanceId

	// no validation rules for Creator

	if all {
		switch v := interface{}(m.GetCreateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MySQLAccountValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MySQLAccountValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MySQLAccountValidationError{
				field:  "CreateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return MySQLAccountMultiError(errors)
	}

	return nil
}

// MySQLAccountMultiError is an error wrapping multiple validation errors
// returned by MySQLAccount.ValidateAll() if the designated constraints aren't met.
type MySQLAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MySQLAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MySQLAccountMultiError) AllErrors() []error { return m }

// MySQLAccountValidationError is the validation error returned by
// MySQLAccount.Validate if the designated constraints aren't met.
type MySQLAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MySQLAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MySQLAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MySQLAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MySQLAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MySQLAccountValidationError) ErrorName() string { return "MySQLAccountValidationError" }

// Error satisfies the builtin error interface
func (e MySQLAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMySQLAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MySQLAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MySQLAccountValidationError{}

// Validate checks the field values on ListMySQLAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMySQLAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMySQLAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMySQLAccountRequestMultiError, or nil if none found.
func (m *ListMySQLAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMySQLAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return ListMySQLAccountRequestMultiError(errors)
	}

	return nil
}

// ListMySQLAccountRequestMultiError is an error wrapping multiple validation
// errors returned by ListMySQLAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMySQLAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMySQLAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMySQLAccountRequestMultiError) AllErrors() []error { return m }

// ListMySQLAccountRequestValidationError is the validation error returned by
// ListMySQLAccountRequest.Validate if the designated constraints aren't met.
type ListMySQLAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMySQLAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMySQLAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMySQLAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMySQLAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMySQLAccountRequestValidationError) ErrorName() string {
	return "ListMySQLAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMySQLAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMySQLAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMySQLAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMySQLAccountRequestValidationError{}

// Validate checks the field values on ListMySQLAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMySQLAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMySQLAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMySQLAccountResponseMultiError, or nil if none found.
func (m *ListMySQLAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMySQLAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMySQLAccountResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMySQLAccountResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMySQLAccountResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMySQLAccountResponseMultiError(errors)
	}

	return nil
}

// ListMySQLAccountResponseMultiError is an error wrapping multiple validation
// errors returned by ListMySQLAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMySQLAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMySQLAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMySQLAccountResponseMultiError) AllErrors() []error { return m }

// ListMySQLAccountResponseValidationError is the validation error returned by
// ListMySQLAccountResponse.Validate if the designated constraints aren't met.
type ListMySQLAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMySQLAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMySQLAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMySQLAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMySQLAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMySQLAccountResponseValidationError) ErrorName() string {
	return "ListMySQLAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMySQLAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMySQLAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMySQLAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMySQLAccountResponseValidationError{}

// Validate checks the field values on GenerateMySQLAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateMySQLAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateMySQLAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateMySQLAccountRequestMultiError, or nil if none found.
func (m *GenerateMySQLAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateMySQLAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for UserID

	if len(errors) > 0 {
		return GenerateMySQLAccountRequestMultiError(errors)
	}

	return nil
}

// GenerateMySQLAccountRequestMultiError is an error wrapping multiple
// validation errors returned by GenerateMySQLAccountRequest.ValidateAll() if
// the designated constraints aren't met.
type GenerateMySQLAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateMySQLAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateMySQLAccountRequestMultiError) AllErrors() []error { return m }

// GenerateMySQLAccountRequestValidationError is the validation error returned
// by GenerateMySQLAccountRequest.Validate if the designated constraints
// aren't met.
type GenerateMySQLAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateMySQLAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateMySQLAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateMySQLAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateMySQLAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateMySQLAccountRequestValidationError) ErrorName() string {
	return "GenerateMySQLAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateMySQLAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateMySQLAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateMySQLAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateMySQLAccountRequestValidationError{}

// Validate checks the field values on GenerateMySQLAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateMySQLAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateMySQLAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateMySQLAccountResponseMultiError, or nil if none found.
func (m *GenerateMySQLAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateMySQLAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateMySQLAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateMySQLAccountResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateMySQLAccountResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateMySQLAccountResponseMultiError(errors)
	}

	return nil
}

// GenerateMySQLAccountResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateMySQLAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type GenerateMySQLAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateMySQLAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateMySQLAccountResponseMultiError) AllErrors() []error { return m }

// GenerateMySQLAccountResponseValidationError is the validation error returned
// by GenerateMySQLAccountResponse.Validate if the designated constraints
// aren't met.
type GenerateMySQLAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateMySQLAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateMySQLAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateMySQLAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateMySQLAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateMySQLAccountResponseValidationError) ErrorName() string {
	return "GenerateMySQLAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateMySQLAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateMySQLAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateMySQLAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateMySQLAccountResponseValidationError{}

// Validate checks the field values on DeleteMySQLAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMySQLAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMySQLAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMySQLAccountRequestMultiError, or nil if none found.
func (m *DeleteMySQLAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMySQLAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMySQLAccountRequestMultiError(errors)
	}

	return nil
}

// DeleteMySQLAccountRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMySQLAccountRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteMySQLAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMySQLAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMySQLAccountRequestMultiError) AllErrors() []error { return m }

// DeleteMySQLAccountRequestValidationError is the validation error returned by
// DeleteMySQLAccountRequest.Validate if the designated constraints aren't met.
type DeleteMySQLAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMySQLAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMySQLAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMySQLAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMySQLAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMySQLAccountRequestValidationError) ErrorName() string {
	return "DeleteMySQLAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMySQLAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMySQLAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMySQLAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMySQLAccountRequestValidationError{}

// Validate checks the field values on DeleteMySQLAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMySQLAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMySQLAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMySQLAccountResponseMultiError, or nil if none found.
func (m *DeleteMySQLAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMySQLAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMySQLAccountResponseMultiError(errors)
	}

	return nil
}

// DeleteMySQLAccountResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteMySQLAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteMySQLAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMySQLAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMySQLAccountResponseMultiError) AllErrors() []error { return m }

// DeleteMySQLAccountResponseValidationError is the validation error returned
// by DeleteMySQLAccountResponse.Validate if the designated constraints aren't met.
type DeleteMySQLAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMySQLAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMySQLAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMySQLAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMySQLAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMySQLAccountResponseValidationError) ErrorName() string {
	return "DeleteMySQLAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMySQLAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMySQLAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMySQLAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMySQLAccountResponseValidationError{}

// Validate checks the field values on Attachment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Attachment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attachment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttachmentMultiError, or
// nil if none found.
func (m *Attachment) ValidateAll() error {
	return m.validate(true)
}

func (m *Attachment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for InstanceId

	// no validation rules for AppId

	// no validation rules for Workspace

	// no validation rules for RuntimeId

	// no validation rules for RuntimeName

	// no validation rules for AccountId

	// no validation rules for PreAccountId

	// no validation rules for AccountState

	// no validation rules for Configs

	if len(errors) > 0 {
		return AttachmentMultiError(errors)
	}

	return nil
}

// AttachmentMultiError is an error wrapping multiple validation errors
// returned by Attachment.ValidateAll() if the designated constraints aren't met.
type AttachmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachmentMultiError) AllErrors() []error { return m }

// AttachmentValidationError is the validation error returned by
// Attachment.Validate if the designated constraints aren't met.
type AttachmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachmentValidationError) ErrorName() string { return "AttachmentValidationError" }

// Error satisfies the builtin error interface
func (e AttachmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachmentValidationError{}

// Validate checks the field values on ListAttachmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttachmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttachmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttachmentRequestMultiError, or nil if none found.
func (m *ListAttachmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttachmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return ListAttachmentRequestMultiError(errors)
	}

	return nil
}

// ListAttachmentRequestMultiError is an error wrapping multiple validation
// errors returned by ListAttachmentRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAttachmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttachmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttachmentRequestMultiError) AllErrors() []error { return m }

// ListAttachmentRequestValidationError is the validation error returned by
// ListAttachmentRequest.Validate if the designated constraints aren't met.
type ListAttachmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttachmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttachmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttachmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttachmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttachmentRequestValidationError) ErrorName() string {
	return "ListAttachmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttachmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttachmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttachmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttachmentRequestValidationError{}

// Validate checks the field values on ListAttachmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttachmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttachmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttachmentResponseMultiError, or nil if none found.
func (m *ListAttachmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttachmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAttachmentResponseValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAttachmentResponseValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAttachmentResponseValidationError{
					field:  fmt.Sprintf("Attachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAttachmentResponseMultiError(errors)
	}

	return nil
}

// ListAttachmentResponseMultiError is an error wrapping multiple validation
// errors returned by ListAttachmentResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAttachmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttachmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttachmentResponseMultiError) AllErrors() []error { return m }

// ListAttachmentResponseValidationError is the validation error returned by
// ListAttachmentResponse.Validate if the designated constraints aren't met.
type ListAttachmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttachmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttachmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttachmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttachmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttachmentResponseValidationError) ErrorName() string {
	return "ListAttachmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttachmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttachmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttachmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttachmentResponseValidationError{}

// Validate checks the field values on UpdateAttachmentAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAttachmentAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAttachmentAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAttachmentAccountRequestMultiError, or nil if none found.
func (m *UpdateAttachmentAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAttachmentAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Id

	// no validation rules for AccountId

	if len(errors) > 0 {
		return UpdateAttachmentAccountRequestMultiError(errors)
	}

	return nil
}

// UpdateAttachmentAccountRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAttachmentAccountRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateAttachmentAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAttachmentAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAttachmentAccountRequestMultiError) AllErrors() []error { return m }

// UpdateAttachmentAccountRequestValidationError is the validation error
// returned by UpdateAttachmentAccountRequest.Validate if the designated
// constraints aren't met.
type UpdateAttachmentAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAttachmentAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAttachmentAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAttachmentAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAttachmentAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAttachmentAccountRequestValidationError) ErrorName() string {
	return "UpdateAttachmentAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAttachmentAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAttachmentAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAttachmentAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAttachmentAccountRequestValidationError{}

// Validate checks the field values on UpdateAttachmentAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAttachmentAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAttachmentAccountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAttachmentAccountResponseMultiError, or nil if none found.
func (m *UpdateAttachmentAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAttachmentAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAttachmentAccountResponseMultiError(errors)
	}

	return nil
}

// UpdateAttachmentAccountResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAttachmentAccountResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateAttachmentAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAttachmentAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAttachmentAccountResponseMultiError) AllErrors() []error { return m }

// UpdateAttachmentAccountResponseValidationError is the validation error
// returned by UpdateAttachmentAccountResponse.Validate if the designated
// constraints aren't met.
type UpdateAttachmentAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAttachmentAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAttachmentAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAttachmentAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAttachmentAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAttachmentAccountResponseValidationError) ErrorName() string {
	return "UpdateAttachmentAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAttachmentAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAttachmentAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAttachmentAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAttachmentAccountResponseValidationError{}
