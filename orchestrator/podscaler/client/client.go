// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: podscaler.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/orchestrator/podscaler/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// PodScalerService podscaler.proto
	PodScalerService() pb.PodScalerServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		podScalerService: pb.NewPodScalerServiceClient(cc),
	}
}

type serviceClients struct {
	podScalerService pb.PodScalerServiceClient
}

func (c *serviceClients) PodScalerService() pb.PodScalerServiceClient {
	return c.podScalerService
}

type podScalerServiceWrapper struct {
	client pb.PodScalerServiceClient
	opts   []grpc1.CallOption
}

func (s *podScalerServiceWrapper) CreateRuntimeHPARules(ctx context.Context, req *pb.HPARuleCreateRequest) (*pb.CommonResponse, error) {
	return s.client.CreateRuntimeHPARules(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *podScalerServiceWrapper) ListRuntimeHPARules(ctx context.Context, req *pb.ListRequest) (*pb.ErdaRuntimeHPARules, error) {
	return s.client.ListRuntimeHPARules(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *podScalerServiceWrapper) UpdateRuntimeHPARules(ctx context.Context, req *pb.ErdaRuntimeHPARules) (*pb.CommonResponse, error) {
	return s.client.UpdateRuntimeHPARules(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *podScalerServiceWrapper) DeleteHPARulesByIds(ctx context.Context, req *pb.DeleteRuntimePARulesRequest) (*pb.CommonResponse, error) {
	return s.client.DeleteHPARulesByIds(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *podScalerServiceWrapper) ApplyOrCancelHPARulesByIds(ctx context.Context, req *pb.ApplyOrCancelPARulesRequest) (*pb.CommonResponse, error) {
	return s.client.ApplyOrCancelHPARulesByIds(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *podScalerServiceWrapper) GetRuntimeBaseInfo(ctx context.Context, req *pb.ListRequest) (*pb.RuntimeServiceBaseInfos, error) {
	return s.client.GetRuntimeBaseInfo(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *podScalerServiceWrapper) ListRuntimeHPAEvents(ctx context.Context, req *pb.ListRequest) (*pb.ErdaRuntimeHPAEvents, error) {
	return s.client.ListRuntimeHPAEvents(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *podScalerServiceWrapper) CreateRuntimeVPARules(ctx context.Context, req *pb.VPARuleCreateRequest) (*pb.CommonResponse, error) {
	return s.client.CreateRuntimeVPARules(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *podScalerServiceWrapper) ListRuntimeVPARules(ctx context.Context, req *pb.ListRequest) (*pb.ErdaRuntimeVPARules, error) {
	return s.client.ListRuntimeVPARules(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *podScalerServiceWrapper) UpdateRuntimeVPARules(ctx context.Context, req *pb.ErdaRuntimeVPARules) (*pb.CommonResponse, error) {
	return s.client.UpdateRuntimeVPARules(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *podScalerServiceWrapper) DeleteVPARulesByIds(ctx context.Context, req *pb.DeleteRuntimePARulesRequest) (*pb.CommonResponse, error) {
	return s.client.DeleteVPARulesByIds(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *podScalerServiceWrapper) ApplyOrCancelVPARulesByIds(ctx context.Context, req *pb.ApplyOrCancelPARulesRequest) (*pb.CommonResponse, error) {
	return s.client.ApplyOrCancelVPARulesByIds(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *podScalerServiceWrapper) ListRuntimeVPARecommendations(ctx context.Context, req *pb.ListRequest) (*pb.ErdaRuntimeVPARecommendations, error) {
	return s.client.ListRuntimeVPARecommendations(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *podScalerServiceWrapper) HPScaleManual(ctx context.Context, req *pb.ManualHPRequest) (*pb.HPManualResponse, error) {
	return s.client.HPScaleManual(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
