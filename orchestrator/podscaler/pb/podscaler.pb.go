// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: podscaler.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RuntimeServiceBaseInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeID uint64 `protobuf:"varint,1,opt,name=runtimeID,json=runtimeId,proto3" json:"runtimeID,omitempty"`
	//RuntimeInfo runtimeInfo = 1 [json_name = "runtimeInfo"] ;
	ServiceBaseInfos []*ServiceBaseInfo `protobuf:"bytes,2,rep,name=serviceBaseInfos,proto3" json:"serviceBaseInfos,omitempty"`
}

func (x *RuntimeServiceBaseInfos) Reset() {
	*x = RuntimeServiceBaseInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeServiceBaseInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeServiceBaseInfos) ProtoMessage() {}

func (x *RuntimeServiceBaseInfos) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeServiceBaseInfos.ProtoReflect.Descriptor instead.
func (*RuntimeServiceBaseInfos) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{0}
}

func (x *RuntimeServiceBaseInfos) GetRuntimeID() uint64 {
	if x != nil {
		return x.RuntimeID
	}
	return 0
}

func (x *RuntimeServiceBaseInfos) GetServiceBaseInfos() []*ServiceBaseInfo {
	if x != nil {
		return x.ServiceBaseInfos
	}
	return nil
}

type ServiceBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string       `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Deployments *Deployments `protobuf:"bytes,2,opt,name=deployments,proto3" json:"deployments,omitempty"`
	Resources   *Resources   `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *ServiceBaseInfo) Reset() {
	*x = ServiceBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceBaseInfo) ProtoMessage() {}

func (x *ServiceBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceBaseInfo.ProtoReflect.Descriptor instead.
func (*ServiceBaseInfo) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceBaseInfo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ServiceBaseInfo) GetDeployments() *Deployments {
	if x != nil {
		return x.Deployments
	}
	return nil
}

func (x *ServiceBaseInfo) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type HPARuleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeID uint64                     `protobuf:"varint,1,opt,name=runtimeID,json=runtimeId,proto3" json:"runtimeID,omitempty"`
	Services  []*RuntimeServiceHPAConfig `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *HPARuleCreateRequest) Reset() {
	*x = HPARuleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HPARuleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPARuleCreateRequest) ProtoMessage() {}

func (x *HPARuleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPARuleCreateRequest.ProtoReflect.Descriptor instead.
func (*HPARuleCreateRequest) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{2}
}

func (x *HPARuleCreateRequest) GetRuntimeID() uint64 {
	if x != nil {
		return x.RuntimeID
	}
	return 0
}

func (x *HPARuleCreateRequest) GetServices() []*RuntimeServiceHPAConfig {
	if x != nil {
		return x.Services
	}
	return nil
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeId string `protobuf:"bytes,1,opt,name=runtimeId,proto3" json:"runtimeId,omitempty"`
	Services  string `protobuf:"bytes,2,opt,name=services,proto3" json:"services,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{3}
}

func (x *ListRequest) GetRuntimeId() string {
	if x != nil {
		return x.RuntimeId
	}
	return ""
}

func (x *ListRequest) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

type DeleteRuntimePARulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeID uint64 `protobuf:"varint,1,opt,name=runtimeID,json=runtimeId,proto3" json:"runtimeID,omitempty"`
	//RuntimeInfo runtimeInfo = 1 [json_name = "runtimeInfo"] ;
	//UserInfo userInfo = 2 [json_name = "userInfo"] ;
	Rules []string `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *DeleteRuntimePARulesRequest) Reset() {
	*x = DeleteRuntimePARulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRuntimePARulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRuntimePARulesRequest) ProtoMessage() {}

func (x *DeleteRuntimePARulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRuntimePARulesRequest.ProtoReflect.Descriptor instead.
func (*DeleteRuntimePARulesRequest) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRuntimePARulesRequest) GetRuntimeID() uint64 {
	if x != nil {
		return x.RuntimeID
	}
	return 0
}

func (x *DeleteRuntimePARulesRequest) GetRules() []string {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ApplyOrCancelPARulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeID uint64 `protobuf:"varint,1,opt,name=runtimeID,json=runtimeId,proto3" json:"runtimeID,omitempty"`
	//RuntimeInfo runtimeInfo = 1 [json_name = "runtimeInfo"] ;
	//UserInfo userInfo = 2 [json_name = "userInfo"] ;
	RuleAction []*RuleAction `protobuf:"bytes,2,rep,name=ruleAction,json=actions,proto3" json:"ruleAction,omitempty"`
}

func (x *ApplyOrCancelPARulesRequest) Reset() {
	*x = ApplyOrCancelPARulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyOrCancelPARulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyOrCancelPARulesRequest) ProtoMessage() {}

func (x *ApplyOrCancelPARulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyOrCancelPARulesRequest.ProtoReflect.Descriptor instead.
func (*ApplyOrCancelPARulesRequest) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{5}
}

func (x *ApplyOrCancelPARulesRequest) GetRuntimeID() uint64 {
	if x != nil {
		return x.RuntimeID
	}
	return 0
}

func (x *ApplyOrCancelPARulesRequest) GetRuleAction() []*RuleAction {
	if x != nil {
		return x.RuleAction
	}
	return nil
}

type RuleAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId string `protobuf:"bytes,1,opt,name=ruleId,proto3" json:"ruleId,omitempty"`
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *RuleAction) Reset() {
	*x = RuleAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleAction) ProtoMessage() {}

func (x *RuleAction) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleAction.ProtoReflect.Descriptor instead.
func (*RuleAction) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{6}
}

func (x *RuleAction) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *RuleAction) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type CommonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommonResponse) Reset() {
	*x = CommonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResponse) ProtoMessage() {}

func (x *CommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResponse.ProtoReflect.Descriptor instead.
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{7}
}

type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string     `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Ctx  *anypb.Any `protobuf:"bytes,3,opt,name=ctx,proto3" json:"ctx,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{8}
}

func (x *ErrorResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ErrorResponse) GetCtx() *anypb.Any {
	if x != nil {
		return x.Ctx
	}
	return nil
}

type ScaleTargetRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// +optional
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	EnvSourceContainerName string `protobuf:"bytes,4,opt,name=envSourceContainerName,proto3" json:"envSourceContainerName,omitempty"`
}

func (x *ScaleTargetRef) Reset() {
	*x = ScaleTargetRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleTargetRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleTargetRef) ProtoMessage() {}

func (x *ScaleTargetRef) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleTargetRef.ProtoReflect.Descriptor instead.
func (*ScaleTargetRef) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{9}
}

func (x *ScaleTargetRef) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ScaleTargetRef) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ScaleTargetRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScaleTargetRef) GetEnvSourceContainerName() string {
	if x != nil {
		return x.EnvSourceContainerName
	}
	return ""
}

type HPAAdvanced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RestoreToOriginalReplicaCount bool                           `protobuf:"varint,1,opt,name=restoreToOriginalReplicaCount,proto3" json:"restoreToOriginalReplicaCount,omitempty"`
	HorizontalPodAutoscalerConfig *HorizontalPodAutoscalerConfig `protobuf:"bytes,2,opt,name=horizontalPodAutoscalerConfig,proto3" json:"horizontalPodAutoscalerConfig,omitempty"`
}

func (x *HPAAdvanced) Reset() {
	*x = HPAAdvanced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HPAAdvanced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPAAdvanced) ProtoMessage() {}

func (x *HPAAdvanced) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPAAdvanced.ProtoReflect.Descriptor instead.
func (*HPAAdvanced) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{10}
}

func (x *HPAAdvanced) GetRestoreToOriginalReplicaCount() bool {
	if x != nil {
		return x.RestoreToOriginalReplicaCount
	}
	return false
}

func (x *HPAAdvanced) GetHorizontalPodAutoscalerConfig() *HorizontalPodAutoscalerConfig {
	if x != nil {
		return x.HorizontalPodAutoscalerConfig
	}
	return nil
}

type HorizontalPodAutoscalerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Behavior *HorizontalPodAutoscalerBehavior `protobuf:"bytes,1,opt,name=behavior,proto3" json:"behavior,omitempty"`
}

func (x *HorizontalPodAutoscalerConfig) Reset() {
	*x = HorizontalPodAutoscalerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodAutoscalerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodAutoscalerConfig) ProtoMessage() {}

func (x *HorizontalPodAutoscalerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodAutoscalerConfig.ProtoReflect.Descriptor instead.
func (*HorizontalPodAutoscalerConfig) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{11}
}

func (x *HorizontalPodAutoscalerConfig) GetBehavior() *HorizontalPodAutoscalerBehavior {
	if x != nil {
		return x.Behavior
	}
	return nil
}

type HorizontalPodAutoscalerBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScaleUp   *HPAScalingRules `protobuf:"bytes,1,opt,name=scaleUp,proto3" json:"scaleUp,omitempty"`
	ScaleDown *HPAScalingRules `protobuf:"bytes,2,opt,name=scaleDown,proto3" json:"scaleDown,omitempty"`
}

func (x *HorizontalPodAutoscalerBehavior) Reset() {
	*x = HorizontalPodAutoscalerBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodAutoscalerBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodAutoscalerBehavior) ProtoMessage() {}

func (x *HorizontalPodAutoscalerBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodAutoscalerBehavior.ProtoReflect.Descriptor instead.
func (*HorizontalPodAutoscalerBehavior) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{12}
}

func (x *HorizontalPodAutoscalerBehavior) GetScaleUp() *HPAScalingRules {
	if x != nil {
		return x.ScaleUp
	}
	return nil
}

func (x *HorizontalPodAutoscalerBehavior) GetScaleDown() *HPAScalingRules {
	if x != nil {
		return x.ScaleDown
	}
	return nil
}

type HPAScalingRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StabilizationWindowSeconds int32               `protobuf:"varint,1,opt,name=stabilizationWindowSeconds,proto3" json:"stabilizationWindowSeconds,omitempty"`
	SelectPolicy               string              `protobuf:"bytes,2,opt,name=selectPolicy,proto3" json:"selectPolicy,omitempty"`
	Policies                   []*HPAScalingPolicy `protobuf:"bytes,3,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *HPAScalingRules) Reset() {
	*x = HPAScalingRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HPAScalingRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPAScalingRules) ProtoMessage() {}

func (x *HPAScalingRules) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPAScalingRules.ProtoReflect.Descriptor instead.
func (*HPAScalingRules) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{13}
}

func (x *HPAScalingRules) GetStabilizationWindowSeconds() int32 {
	if x != nil {
		return x.StabilizationWindowSeconds
	}
	return 0
}

func (x *HPAScalingRules) GetSelectPolicy() string {
	if x != nil {
		return x.SelectPolicy
	}
	return ""
}

func (x *HPAScalingRules) GetPolicies() []*HPAScalingPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type HPAScalingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value         int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	PeriodSeconds int32  `protobuf:"varint,3,opt,name=periodSeconds,proto3" json:"periodSeconds,omitempty"`
}

func (x *HPAScalingPolicy) Reset() {
	*x = HPAScalingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HPAScalingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPAScalingPolicy) ProtoMessage() {}

func (x *HPAScalingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPAScalingPolicy.ProtoReflect.Descriptor instead.
func (*HPAScalingPolicy) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{14}
}

func (x *HPAScalingPolicy) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HPAScalingPolicy) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *HPAScalingPolicy) GetPeriodSeconds() int32 {
	if x != nil {
		return x.PeriodSeconds
	}
	return 0
}

type FallBack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureThreshold int32 `protobuf:"varint,1,opt,name=failureThreshold,proto3" json:"failureThreshold,omitempty"`
	Replicas         int32 `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *FallBack) Reset() {
	*x = FallBack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallBack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallBack) ProtoMessage() {}

func (x *FallBack) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallBack.ProtoReflect.Descriptor instead.
func (*FallBack) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{15}
}

func (x *FallBack) GetFailureThreshold() int32 {
	if x != nil {
		return x.FailureThreshold
	}
	return 0
}

func (x *FallBack) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

type ScaledObjectAuthRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Kind of the resource being referred to. Defaults to TriggerAuthentication.
	// +optional
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ScaledObjectAuthRef) Reset() {
	*x = ScaledObjectAuthRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaledObjectAuthRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaledObjectAuthRef) ProtoMessage() {}

func (x *ScaledObjectAuthRef) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaledObjectAuthRef.ProtoReflect.Descriptor instead.
func (*ScaledObjectAuthRef) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{16}
}

func (x *ScaledObjectAuthRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScaledObjectAuthRef) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type ScaleTriggers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// +optional
	Name     string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// +optional
	AuthenticationRef *ScaledObjectAuthRef `protobuf:"bytes,4,opt,name=authenticationRef,proto3" json:"authenticationRef,omitempty"`
	// +optional
	MetricType string `protobuf:"bytes,5,opt,name=metricType,proto3" json:"metricType,omitempty"`
}

func (x *ScaleTriggers) Reset() {
	*x = ScaleTriggers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleTriggers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleTriggers) ProtoMessage() {}

func (x *ScaleTriggers) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleTriggers.ProtoReflect.Descriptor instead.
func (*ScaleTriggers) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{17}
}

func (x *ScaleTriggers) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ScaleTriggers) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScaleTriggers) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ScaleTriggers) GetAuthenticationRef() *ScaledObjectAuthRef {
	if x != nil {
		return x.AuthenticationRef
	}
	return nil
}

func (x *ScaleTriggers) GetMetricType() string {
	if x != nil {
		return x.MetricType
	}
	return ""
}

type ScaledConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleName        string           `protobuf:"bytes,1,opt,name=ruleName,proto3" json:"ruleName,omitempty"`
	RuleID          string           `protobuf:"bytes,2,opt,name=ruleID,json=ruleId,proto3" json:"ruleID,omitempty"`
	RuntimeID       uint64           `protobuf:"varint,3,opt,name=runtimeID,json=runtimeId,proto3" json:"runtimeID,omitempty"`
	ApplicationID   uint64           `protobuf:"varint,4,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
	OrgID           uint64           `protobuf:"varint,5,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	ServiceName     string           `protobuf:"bytes,6,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	RuleNameSpace   string           `protobuf:"bytes,7,opt,name=ruleNameSpace,proto3" json:"ruleNameSpace,omitempty"`
	ScaleTargetRef  *ScaleTargetRef  `protobuf:"bytes,8,opt,name=scaleTargetRef,proto3" json:"scaleTargetRef,omitempty"`
	PollingInterval int32            `protobuf:"varint,9,opt,name=pollingInterval,proto3" json:"pollingInterval,omitempty"`
	CooldownPeriod  int32            `protobuf:"varint,10,opt,name=cooldownPeriod,proto3" json:"cooldownPeriod,omitempty"`
	MinReplicaCount int32            `protobuf:"varint,11,opt,name=minReplicaCount,proto3" json:"minReplicaCount,omitempty"`
	MaxReplicaCount int32            `protobuf:"varint,12,opt,name=maxReplicaCount,proto3" json:"maxReplicaCount,omitempty"`
	Advanced        *HPAAdvanced     `protobuf:"bytes,13,opt,name=advanced,proto3" json:"advanced,omitempty"`
	Triggers        []*ScaleTriggers `protobuf:"bytes,14,rep,name=triggers,proto3" json:"triggers,omitempty"`
	Fallback        *FallBack        `protobuf:"bytes,15,opt,name=fallback,proto3" json:"fallback,omitempty"`
}

func (x *ScaledConfig) Reset() {
	*x = ScaledConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaledConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaledConfig) ProtoMessage() {}

func (x *ScaledConfig) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaledConfig.ProtoReflect.Descriptor instead.
func (*ScaledConfig) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{18}
}

func (x *ScaledConfig) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *ScaledConfig) GetRuleID() string {
	if x != nil {
		return x.RuleID
	}
	return ""
}

func (x *ScaledConfig) GetRuntimeID() uint64 {
	if x != nil {
		return x.RuntimeID
	}
	return 0
}

func (x *ScaledConfig) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *ScaledConfig) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ScaledConfig) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ScaledConfig) GetRuleNameSpace() string {
	if x != nil {
		return x.RuleNameSpace
	}
	return ""
}

func (x *ScaledConfig) GetScaleTargetRef() *ScaleTargetRef {
	if x != nil {
		return x.ScaleTargetRef
	}
	return nil
}

func (x *ScaledConfig) GetPollingInterval() int32 {
	if x != nil {
		return x.PollingInterval
	}
	return 0
}

func (x *ScaledConfig) GetCooldownPeriod() int32 {
	if x != nil {
		return x.CooldownPeriod
	}
	return 0
}

func (x *ScaledConfig) GetMinReplicaCount() int32 {
	if x != nil {
		return x.MinReplicaCount
	}
	return 0
}

func (x *ScaledConfig) GetMaxReplicaCount() int32 {
	if x != nil {
		return x.MaxReplicaCount
	}
	return 0
}

func (x *ScaledConfig) GetAdvanced() *HPAAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *ScaledConfig) GetTriggers() []*ScaleTriggers {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *ScaledConfig) GetFallback() *FallBack {
	if x != nil {
		return x.Fallback
	}
	return nil
}

type RuntimeServiceHPAConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       string        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Type         string        `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ServiceName  string        `protobuf:"bytes,3,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	RuleName     string        `protobuf:"bytes,4,opt,name=ruleName,proto3" json:"ruleName,omitempty"`
	Deployments  *Deployments  `protobuf:"bytes,5,opt,name=deployments,proto3" json:"deployments,omitempty"`
	Resources    *Resources    `protobuf:"bytes,6,opt,name=resources,proto3" json:"resources,omitempty"`
	ScaledConfig *ScaledConfig `protobuf:"bytes,7,opt,name=scaledConfig,proto3" json:"scaledConfig,omitempty"`
}

func (x *RuntimeServiceHPAConfig) Reset() {
	*x = RuntimeServiceHPAConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeServiceHPAConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeServiceHPAConfig) ProtoMessage() {}

func (x *RuntimeServiceHPAConfig) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeServiceHPAConfig.ProtoReflect.Descriptor instead.
func (*RuntimeServiceHPAConfig) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{19}
}

func (x *RuntimeServiceHPAConfig) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RuntimeServiceHPAConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RuntimeServiceHPAConfig) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RuntimeServiceHPAConfig) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *RuntimeServiceHPAConfig) GetDeployments() *Deployments {
	if x != nil {
		return x.Deployments
	}
	return nil
}

func (x *RuntimeServiceHPAConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *RuntimeServiceHPAConfig) GetScaledConfig() *ScaledConfig {
	if x != nil {
		return x.ScaledConfig
	}
	return nil
}

type ErdaRuntimeHPARules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//RuntimeInfo runtimeInfo = 1 [json_name = "runtimeInfo"] ;
	RuntimeID uint64                `protobuf:"varint,1,opt,name=runtimeID,json=runtimeId,proto3" json:"runtimeID,omitempty"`
	Rules     []*ErdaRuntimeHPARule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ErdaRuntimeHPARules) Reset() {
	*x = ErdaRuntimeHPARules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErdaRuntimeHPARules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErdaRuntimeHPARules) ProtoMessage() {}

func (x *ErdaRuntimeHPARules) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErdaRuntimeHPARules.ProtoReflect.Descriptor instead.
func (*ErdaRuntimeHPARules) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{20}
}

func (x *ErdaRuntimeHPARules) GetRuntimeID() uint64 {
	if x != nil {
		return x.RuntimeID
	}
	return 0
}

func (x *ErdaRuntimeHPARules) GetRules() []*ErdaRuntimeHPARule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ErdaRuntimeHPARule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleID       string                 `protobuf:"bytes,1,opt,name=ruleID,json=ruleId,proto3" json:"ruleID,omitempty"`
	CreateAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	ServiceName  string                 `protobuf:"bytes,4,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	RuleName     string                 `protobuf:"bytes,5,opt,name=ruleName,proto3" json:"ruleName,omitempty"`
	UserInfo     *UserInfo              `protobuf:"bytes,6,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	ScaledConfig *ScaledConfig          `protobuf:"bytes,7,opt,name=scaledConfig,proto3" json:"scaledConfig,omitempty"`
	IsApplied    string                 `protobuf:"bytes,8,opt,name=isApplied,proto3" json:"isApplied,omitempty"`
}

func (x *ErdaRuntimeHPARule) Reset() {
	*x = ErdaRuntimeHPARule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErdaRuntimeHPARule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErdaRuntimeHPARule) ProtoMessage() {}

func (x *ErdaRuntimeHPARule) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErdaRuntimeHPARule.ProtoReflect.Descriptor instead.
func (*ErdaRuntimeHPARule) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{21}
}

func (x *ErdaRuntimeHPARule) GetRuleID() string {
	if x != nil {
		return x.RuleID
	}
	return ""
}

func (x *ErdaRuntimeHPARule) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *ErdaRuntimeHPARule) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

func (x *ErdaRuntimeHPARule) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ErdaRuntimeHPARule) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *ErdaRuntimeHPARule) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ErdaRuntimeHPARule) GetScaledConfig() *ScaledConfig {
	if x != nil {
		return x.ScaledConfig
	}
	return nil
}

func (x *ErdaRuntimeHPARule) GetIsApplied() string {
	if x != nil {
		return x.IsApplied
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       uint64 `protobuf:"varint,1,opt,name=userID,json=userId,proto3" json:"userID,omitempty"`
	UserName     string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	UserNickName string `protobuf:"bytes,3,opt,name=userNickName,json=nickName,proto3" json:"userNickName,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{22}
}

func (x *UserInfo) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfo) GetUserNickName() string {
	if x != nil {
		return x.UserNickName
	}
	return ""
}

type RuntimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID           uint64 `protobuf:"varint,1,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	OrgName         string `protobuf:"bytes,2,opt,name=orgName,proto3" json:"orgName,omitempty"`
	ProjectID       uint64 `protobuf:"varint,3,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	ProjectName     string `protobuf:"bytes,4,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ApplicationID   uint64 `protobuf:"varint,5,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
	ApplicationName string `protobuf:"bytes,6,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	Workspace       string `protobuf:"bytes,7,opt,name=workspace,proto3" json:"workspace,omitempty"`
	RuntimeID       uint64 `protobuf:"varint,8,opt,name=runtimeID,json=runtimeId,proto3" json:"runtimeID,omitempty"`
	RuntimeName     string `protobuf:"bytes,9,opt,name=runtimeName,proto3" json:"runtimeName,omitempty"`
	ClusterID       uint64 `protobuf:"varint,10,opt,name=clusterID,json=clusterId,proto3" json:"clusterID,omitempty"`
	ClusterName     string `protobuf:"bytes,11,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ClusterType     string `protobuf:"bytes,12,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
}

func (x *RuntimeInfo) Reset() {
	*x = RuntimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeInfo) ProtoMessage() {}

func (x *RuntimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeInfo.ProtoReflect.Descriptor instead.
func (*RuntimeInfo) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{23}
}

func (x *RuntimeInfo) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *RuntimeInfo) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *RuntimeInfo) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *RuntimeInfo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *RuntimeInfo) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *RuntimeInfo) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *RuntimeInfo) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *RuntimeInfo) GetRuntimeID() uint64 {
	if x != nil {
		return x.RuntimeID
	}
	return 0
}

func (x *RuntimeInfo) GetRuntimeName() string {
	if x != nil {
		return x.RuntimeName
	}
	return ""
}

func (x *RuntimeInfo) GetClusterID() uint64 {
	if x != nil {
		return x.ClusterID
	}
	return 0
}

func (x *RuntimeInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RuntimeInfo) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

type BatchManualHPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	// 除了 BatchHPScaleManualScaleRandom 接口外的 4 个接口，都使用 ids (runtime 的 id 列表)
	Ids []uint64 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// BatchHPScaleManualScaleRandom 接口都使用
	RuntimeRecords []*RuntimeScaleRecord `protobuf:"bytes,3,rep,name=runtimeRecords,proto3" json:"runtimeRecords,omitempty"`
}

func (x *BatchManualHPRequest) Reset() {
	*x = BatchManualHPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchManualHPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchManualHPRequest) ProtoMessage() {}

func (x *BatchManualHPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchManualHPRequest.ProtoReflect.Descriptor instead.
func (*BatchManualHPRequest) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{24}
}

func (x *BatchManualHPRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *BatchManualHPRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *BatchManualHPRequest) GetRuntimeRecords() []*RuntimeScaleRecord {
	if x != nil {
		return x.RuntimeRecords
	}
	return nil
}

type RuntimeScaleRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId uint64      `protobuf:"varint,1,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	Workspace     string      `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Name          string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	RuntimeId     uint64      `protobuf:"varint,4,opt,name=runtimeId,proto3" json:"runtimeId,omitempty"`
	Payload       *PreDiceDTO `protobuf:"bytes,5,opt,name=payload,json=payLoad,proto3" json:"payload,omitempty"`
	ErrorMsg      string      `protobuf:"bytes,6,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (x *RuntimeScaleRecord) Reset() {
	*x = RuntimeScaleRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeScaleRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeScaleRecord) ProtoMessage() {}

func (x *RuntimeScaleRecord) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeScaleRecord.ProtoReflect.Descriptor instead.
func (*RuntimeScaleRecord) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{25}
}

func (x *RuntimeScaleRecord) GetApplicationId() uint64 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

func (x *RuntimeScaleRecord) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *RuntimeScaleRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuntimeScaleRecord) GetRuntimeId() uint64 {
	if x != nil {
		return x.RuntimeId
	}
	return 0
}

func (x *RuntimeScaleRecord) GetPayload() *PreDiceDTO {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RuntimeScaleRecord) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type PreDiceDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Envs     map[string]string                    `protobuf:"bytes,2,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Services map[string]*RuntimeInspectServiceDTO `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PreDiceDTO) Reset() {
	*x = PreDiceDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreDiceDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreDiceDTO) ProtoMessage() {}

func (x *PreDiceDTO) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreDiceDTO.ProtoReflect.Descriptor instead.
func (*PreDiceDTO) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{26}
}

func (x *PreDiceDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PreDiceDTO) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *PreDiceDTO) GetServices() map[string]*RuntimeInspectServiceDTO {
	if x != nil {
		return x.Services
	}
	return nil
}

type ManualHPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string                               `protobuf:"bytes,1,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	Workspace     string                               `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	RuntimeName   string                               `protobuf:"bytes,3,opt,name=runtimeName,proto3" json:"runtimeName,omitempty"`
	Name          string                               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Envs          map[string]string                    `protobuf:"bytes,5,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Services      map[string]*RuntimeInspectServiceDTO `protobuf:"bytes,6,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ManualHPRequest) Reset() {
	*x = ManualHPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualHPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualHPRequest) ProtoMessage() {}

func (x *ManualHPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualHPRequest.ProtoReflect.Descriptor instead.
func (*ManualHPRequest) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{27}
}

func (x *ManualHPRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ManualHPRequest) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *ManualHPRequest) GetRuntimeName() string {
	if x != nil {
		return x.RuntimeName
	}
	return ""
}

func (x *ManualHPRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ManualHPRequest) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *ManualHPRequest) GetServices() map[string]*RuntimeInspectServiceDTO {
	if x != nil {
		return x.Services
	}
	return nil
}

type RuntimeInspectServiceDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            string            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AutoscalerEnabled string            `protobuf:"bytes,2,opt,name=autoscalerEnabled,proto3" json:"autoscalerEnabled,omitempty"`
	Type              string            `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Deployments       *Deployments      `protobuf:"bytes,4,opt,name=deployments,proto3" json:"deployments,omitempty"`
	Resources         *Resources        `protobuf:"bytes,5,opt,name=resources,proto3" json:"resources,omitempty"`
	Envs              map[string]string `protobuf:"bytes,6,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Addrs             []string          `protobuf:"bytes,7,rep,name=addrs,proto3" json:"addrs,omitempty"`
	Expose            []string          `protobuf:"bytes,8,rep,name=expose,proto3" json:"expose,omitempty"`
	Errors            []*ErrorResponse  `protobuf:"bytes,9,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *RuntimeInspectServiceDTO) Reset() {
	*x = RuntimeInspectServiceDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeInspectServiceDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeInspectServiceDTO) ProtoMessage() {}

func (x *RuntimeInspectServiceDTO) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeInspectServiceDTO.ProtoReflect.Descriptor instead.
func (*RuntimeInspectServiceDTO) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{28}
}

func (x *RuntimeInspectServiceDTO) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RuntimeInspectServiceDTO) GetAutoscalerEnabled() string {
	if x != nil {
		return x.AutoscalerEnabled
	}
	return ""
}

func (x *RuntimeInspectServiceDTO) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RuntimeInspectServiceDTO) GetDeployments() *Deployments {
	if x != nil {
		return x.Deployments
	}
	return nil
}

func (x *RuntimeInspectServiceDTO) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *RuntimeInspectServiceDTO) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *RuntimeInspectServiceDTO) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *RuntimeInspectServiceDTO) GetExpose() []string {
	if x != nil {
		return x.Expose
	}
	return nil
}

func (x *RuntimeInspectServiceDTO) GetErrors() []*ErrorResponse {
	if x != nil {
		return x.Errors
	}
	return nil
}

type HPManualResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Envs     map[string]string                    `protobuf:"bytes,2,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Services map[string]*RuntimeInspectServiceDTO `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HPManualResponse) Reset() {
	*x = HPManualResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HPManualResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPManualResponse) ProtoMessage() {}

func (x *HPManualResponse) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPManualResponse.ProtoReflect.Descriptor instead.
func (*HPManualResponse) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{29}
}

func (x *HPManualResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HPManualResponse) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *HPManualResponse) GetServices() map[string]*RuntimeInspectServiceDTO {
	if x != nil {
		return x.Services
	}
	return nil
}

type BatchManualResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total           int32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Success         int32                 `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Failed          int32                 `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	ReDeployed      []*RuntimeDeployDTO   `protobuf:"bytes,4,rep,name=reDeployed,proto3" json:"reDeployed,omitempty"`
	ReDeployedIds   []uint64              `protobuf:"varint,5,rep,packed,name=reDeployedIds,proto3" json:"reDeployedIds,omitempty"`
	UnReDeployed    []*RuntimeDTO         `protobuf:"bytes,6,rep,name=unReDeployed,json=reDeployedFailed,proto3" json:"unReDeployed,omitempty"`
	UnReDeployedIds []uint64              `protobuf:"varint,7,rep,packed,name=unReDeployedIds,json=reDeployedFailedIds,proto3" json:"unReDeployedIds,omitempty"`
	Deleted         []*RuntimeDTO         `protobuf:"bytes,8,rep,name=deleted,proto3" json:"deleted,omitempty"`
	DeletedIds      []uint64              `protobuf:"varint,9,rep,packed,name=deletedIds,proto3" json:"deletedIds,omitempty"`
	UnDeleted       []*RuntimeDTO         `protobuf:"bytes,10,rep,name=unDeleted,json=deletedFailed,proto3" json:"unDeleted,omitempty"`
	UnDeletedIds    []uint64              `protobuf:"varint,11,rep,packed,name=unDeletedIds,json=deletedFailedIds,proto3" json:"unDeletedIds,omitempty"`
	SuccessedScales []*PreDiceDTO         `protobuf:"bytes,12,rep,name=successedScales,json=successedRuntimeScales,proto3" json:"successedScales,omitempty"`
	SuccessedIds    []uint64              `protobuf:"varint,13,rep,packed,name=successedIds,proto3" json:"successedIds,omitempty"`
	FailedScales    []*RuntimeScaleRecord `protobuf:"bytes,14,rep,name=failedScales,json=failedRuntimeScales,proto3" json:"failedScales,omitempty"`
	FailedIds       []uint64              `protobuf:"varint,15,rep,packed,name=failedIds,proto3" json:"failedIds,omitempty"`
	ErrMsg          []string              `protobuf:"bytes,16,rep,name=errMsg,json=errorMsgs,proto3" json:"errMsg,omitempty"`
}

func (x *BatchManualResponse) Reset() {
	*x = BatchManualResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchManualResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchManualResponse) ProtoMessage() {}

func (x *BatchManualResponse) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchManualResponse.ProtoReflect.Descriptor instead.
func (*BatchManualResponse) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{30}
}

func (x *BatchManualResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BatchManualResponse) GetSuccess() int32 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *BatchManualResponse) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *BatchManualResponse) GetReDeployed() []*RuntimeDeployDTO {
	if x != nil {
		return x.ReDeployed
	}
	return nil
}

func (x *BatchManualResponse) GetReDeployedIds() []uint64 {
	if x != nil {
		return x.ReDeployedIds
	}
	return nil
}

func (x *BatchManualResponse) GetUnReDeployed() []*RuntimeDTO {
	if x != nil {
		return x.UnReDeployed
	}
	return nil
}

func (x *BatchManualResponse) GetUnReDeployedIds() []uint64 {
	if x != nil {
		return x.UnReDeployedIds
	}
	return nil
}

func (x *BatchManualResponse) GetDeleted() []*RuntimeDTO {
	if x != nil {
		return x.Deleted
	}
	return nil
}

func (x *BatchManualResponse) GetDeletedIds() []uint64 {
	if x != nil {
		return x.DeletedIds
	}
	return nil
}

func (x *BatchManualResponse) GetUnDeleted() []*RuntimeDTO {
	if x != nil {
		return x.UnDeleted
	}
	return nil
}

func (x *BatchManualResponse) GetUnDeletedIds() []uint64 {
	if x != nil {
		return x.UnDeletedIds
	}
	return nil
}

func (x *BatchManualResponse) GetSuccessedScales() []*PreDiceDTO {
	if x != nil {
		return x.SuccessedScales
	}
	return nil
}

func (x *BatchManualResponse) GetSuccessedIds() []uint64 {
	if x != nil {
		return x.SuccessedIds
	}
	return nil
}

func (x *BatchManualResponse) GetFailedScales() []*RuntimeScaleRecord {
	if x != nil {
		return x.FailedScales
	}
	return nil
}

func (x *BatchManualResponse) GetFailedIds() []uint64 {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

func (x *BatchManualResponse) GetErrMsg() []string {
	if x != nil {
		return x.ErrMsg
	}
	return nil
}

type RuntimeDeployDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID      uint64   `protobuf:"varint,1,opt,name=pipelineID,json=pipelineId,proto3" json:"pipelineID,omitempty"`
	Workspace       string   `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	ClusterName     string   `protobuf:"bytes,3,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ApplicationID   uint64   `protobuf:"varint,4,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
	ApplicationName string   `protobuf:"bytes,5,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	ProjectID       uint64   `protobuf:"varint,6,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	ProjectName     string   `protobuf:"bytes,7,opt,name=projectName,proto3" json:"projectName,omitempty"`
	OrgID           uint64   `protobuf:"varint,8,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	OrgName         string   `protobuf:"bytes,9,opt,name=orgName,proto3" json:"orgName,omitempty"`
	ServicesNames   []string `protobuf:"bytes,10,rep,name=servicesNames,proto3" json:"servicesNames,omitempty"`
}

func (x *RuntimeDeployDTO) Reset() {
	*x = RuntimeDeployDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeDeployDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeDeployDTO) ProtoMessage() {}

func (x *RuntimeDeployDTO) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeDeployDTO.ProtoReflect.Descriptor instead.
func (*RuntimeDeployDTO) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{31}
}

func (x *RuntimeDeployDTO) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *RuntimeDeployDTO) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *RuntimeDeployDTO) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RuntimeDeployDTO) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *RuntimeDeployDTO) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *RuntimeDeployDTO) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *RuntimeDeployDTO) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *RuntimeDeployDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *RuntimeDeployDTO) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *RuntimeDeployDTO) GetServicesNames() []string {
	if x != nil {
		return x.ServicesNames
	}
	return nil
}

type RuntimeDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GitBranch       string           `protobuf:"bytes,3,opt,name=gitBranch,proto3" json:"gitBranch,omitempty"`
	Workspace       string           `protobuf:"bytes,4,opt,name=workspace,proto3" json:"workspace,omitempty"`
	ClusterName     string           `protobuf:"bytes,5,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ClusterId       uint64           `protobuf:"varint,6,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Status          string           `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	ApplicationID   uint64           `protobuf:"varint,8,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
	ApplicationName string           `protobuf:"bytes,9,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	ProjectID       uint64           `protobuf:"varint,10,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	ProjectName     string           `protobuf:"bytes,11,opt,name=projectName,proto3" json:"projectName,omitempty"`
	OrgID           uint64           `protobuf:"varint,12,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	Errors          []*ErrorResponse `protobuf:"bytes,13,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *RuntimeDTO) Reset() {
	*x = RuntimeDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeDTO) ProtoMessage() {}

func (x *RuntimeDTO) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeDTO.ProtoReflect.Descriptor instead.
func (*RuntimeDTO) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{32}
}

func (x *RuntimeDTO) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RuntimeDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuntimeDTO) GetGitBranch() string {
	if x != nil {
		return x.GitBranch
	}
	return ""
}

func (x *RuntimeDTO) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *RuntimeDTO) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RuntimeDTO) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *RuntimeDTO) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RuntimeDTO) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *RuntimeDTO) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *RuntimeDTO) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *RuntimeDTO) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *RuntimeDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *RuntimeDTO) GetErrors() []*ErrorResponse {
	if x != nil {
		return x.Errors
	}
	return nil
}

type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu  float64 `protobuf:"fixed64,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Mem  int64   `protobuf:"varint,2,opt,name=mem,proto3" json:"mem,omitempty"`
	Disk int64   `protobuf:"varint,3,opt,name=disk,proto3" json:"disk,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{33}
}

func (x *Resources) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Resources) GetMem() int64 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *Resources) GetDisk() int64 {
	if x != nil {
		return x.Disk
	}
	return 0
}

type Deployments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas uint64 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *Deployments) Reset() {
	*x = Deployments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployments) ProtoMessage() {}

func (x *Deployments) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployments.ProtoReflect.Descriptor instead.
func (*Deployments) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{34}
}

func (x *Deployments) GetReplicas() uint64 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

type ErdaRuntimeHPAEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*ErdaRuntimeHPAEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ErdaRuntimeHPAEvents) Reset() {
	*x = ErdaRuntimeHPAEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErdaRuntimeHPAEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErdaRuntimeHPAEvents) ProtoMessage() {}

func (x *ErdaRuntimeHPAEvents) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErdaRuntimeHPAEvents.ProtoReflect.Descriptor instead.
func (*ErdaRuntimeHPAEvents) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{35}
}

func (x *ErdaRuntimeHPAEvents) GetEvents() []*ErdaRuntimeHPAEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type ErdaRuntimeHPAEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string          `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	RuleId      string          `protobuf:"bytes,2,opt,name=ruleId,proto3" json:"ruleId,omitempty"`
	Event       *HPAEventDetail `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *ErdaRuntimeHPAEvent) Reset() {
	*x = ErdaRuntimeHPAEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErdaRuntimeHPAEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErdaRuntimeHPAEvent) ProtoMessage() {}

func (x *ErdaRuntimeHPAEvent) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErdaRuntimeHPAEvent.ProtoReflect.Descriptor instead.
func (*ErdaRuntimeHPAEvent) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{36}
}

func (x *ErdaRuntimeHPAEvent) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ErdaRuntimeHPAEvent) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *ErdaRuntimeHPAEvent) GetEvent() *HPAEventDetail {
	if x != nil {
		return x.Event
	}
	return nil
}

type HPAEventDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=createAt,proto3" json:"createAt,omitempty"`
	Type         string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Reason       string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	EventMessage string                 `protobuf:"bytes,4,opt,name=eventMessage,json=message,proto3" json:"eventMessage,omitempty"`
}

func (x *HPAEventDetail) Reset() {
	*x = HPAEventDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HPAEventDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPAEventDetail) ProtoMessage() {}

func (x *HPAEventDetail) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPAEventDetail.ProtoReflect.Descriptor instead.
func (*HPAEventDetail) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{37}
}

func (x *HPAEventDetail) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *HPAEventDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HPAEventDetail) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *HPAEventDetail) GetEventMessage() string {
	if x != nil {
		return x.EventMessage
	}
	return ""
}

type VPARuleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeID uint64                     `protobuf:"varint,1,opt,name=runtimeID,json=runtimeId,proto3" json:"runtimeID,omitempty"`
	Services  []*RuntimeServiceVPAConfig `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *VPARuleCreateRequest) Reset() {
	*x = VPARuleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPARuleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPARuleCreateRequest) ProtoMessage() {}

func (x *VPARuleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPARuleCreateRequest.ProtoReflect.Descriptor instead.
func (*VPARuleCreateRequest) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{38}
}

func (x *VPARuleCreateRequest) GetRuntimeID() uint64 {
	if x != nil {
		return x.RuntimeID
	}
	return 0
}

func (x *VPARuleCreateRequest) GetServices() []*RuntimeServiceVPAConfig {
	if x != nil {
		return x.Services
	}
	return nil
}

type RuntimeServiceVPAConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleID         string          `protobuf:"bytes,1,opt,name=ruleID,json=ruleId,proto3" json:"ruleID,omitempty"`
	RuleName       string          `protobuf:"bytes,2,opt,name=ruleName,proto3" json:"ruleName,omitempty"`
	RuntimeID      uint64          `protobuf:"varint,3,opt,name=runtimeID,json=runtimeId,proto3" json:"runtimeID,omitempty"`
	ApplicationID  uint64          `protobuf:"varint,4,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
	ProjectID      uint64          `protobuf:"varint,5,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	OrgID          uint64          `protobuf:"varint,6,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	ServiceName    string          `protobuf:"bytes,7,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ScaleTargetRef *ScaleTargetRef `protobuf:"bytes,8,opt,name=scaleTargetRef,proto3" json:"scaleTargetRef,omitempty"`
	RuleNameSpace  string          `protobuf:"bytes,9,opt,name=ruleNameSpace,proto3" json:"ruleNameSpace,omitempty"`
	UpdateMode     string          `protobuf:"bytes,10,opt,name=updateMode,proto3" json:"updateMode,omitempty"`
	Deployments    *Deployments    `protobuf:"bytes,11,opt,name=deployments,proto3" json:"deployments,omitempty"`
	Resources      *Resources      `protobuf:"bytes,12,opt,name=resources,proto3" json:"resources,omitempty"`
	MaxResources   *Resources      `protobuf:"bytes,13,opt,name=maxResources,proto3" json:"maxResources,omitempty"`
}

func (x *RuntimeServiceVPAConfig) Reset() {
	*x = RuntimeServiceVPAConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeServiceVPAConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeServiceVPAConfig) ProtoMessage() {}

func (x *RuntimeServiceVPAConfig) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeServiceVPAConfig.ProtoReflect.Descriptor instead.
func (*RuntimeServiceVPAConfig) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{39}
}

func (x *RuntimeServiceVPAConfig) GetRuleID() string {
	if x != nil {
		return x.RuleID
	}
	return ""
}

func (x *RuntimeServiceVPAConfig) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *RuntimeServiceVPAConfig) GetRuntimeID() uint64 {
	if x != nil {
		return x.RuntimeID
	}
	return 0
}

func (x *RuntimeServiceVPAConfig) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *RuntimeServiceVPAConfig) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *RuntimeServiceVPAConfig) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *RuntimeServiceVPAConfig) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RuntimeServiceVPAConfig) GetScaleTargetRef() *ScaleTargetRef {
	if x != nil {
		return x.ScaleTargetRef
	}
	return nil
}

func (x *RuntimeServiceVPAConfig) GetRuleNameSpace() string {
	if x != nil {
		return x.RuleNameSpace
	}
	return ""
}

func (x *RuntimeServiceVPAConfig) GetUpdateMode() string {
	if x != nil {
		return x.UpdateMode
	}
	return ""
}

func (x *RuntimeServiceVPAConfig) GetDeployments() *Deployments {
	if x != nil {
		return x.Deployments
	}
	return nil
}

func (x *RuntimeServiceVPAConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *RuntimeServiceVPAConfig) GetMaxResources() *Resources {
	if x != nil {
		return x.MaxResources
	}
	return nil
}

type ErdaRuntimeVPARules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeID uint64                `protobuf:"varint,1,opt,name=runtimeID,json=runtimeId,proto3" json:"runtimeID,omitempty"`
	Rules     []*ErdaRuntimeVPARule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ErdaRuntimeVPARules) Reset() {
	*x = ErdaRuntimeVPARules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErdaRuntimeVPARules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErdaRuntimeVPARules) ProtoMessage() {}

func (x *ErdaRuntimeVPARules) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErdaRuntimeVPARules.ProtoReflect.Descriptor instead.
func (*ErdaRuntimeVPARules) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{40}
}

func (x *ErdaRuntimeVPARules) GetRuntimeID() uint64 {
	if x != nil {
		return x.RuntimeID
	}
	return 0
}

func (x *ErdaRuntimeVPARules) GetRules() []*ErdaRuntimeVPARule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ErdaRuntimeVPARule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateAt    *timestamppb.Timestamp   `protobuf:"bytes,1,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt    *timestamppb.Timestamp   `protobuf:"bytes,2,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	ServiceName string                   `protobuf:"bytes,3,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	UserInfo    *UserInfo                `protobuf:"bytes,4,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	Rule        *RuntimeServiceVPAConfig `protobuf:"bytes,5,opt,name=rule,proto3" json:"rule,omitempty"`
	IsApplied   string                   `protobuf:"bytes,6,opt,name=isApplied,proto3" json:"isApplied,omitempty"`
}

func (x *ErdaRuntimeVPARule) Reset() {
	*x = ErdaRuntimeVPARule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErdaRuntimeVPARule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErdaRuntimeVPARule) ProtoMessage() {}

func (x *ErdaRuntimeVPARule) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErdaRuntimeVPARule.ProtoReflect.Descriptor instead.
func (*ErdaRuntimeVPARule) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{41}
}

func (x *ErdaRuntimeVPARule) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *ErdaRuntimeVPARule) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

func (x *ErdaRuntimeVPARule) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ErdaRuntimeVPARule) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ErdaRuntimeVPARule) GetRule() *RuntimeServiceVPAConfig {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *ErdaRuntimeVPARule) GetIsApplied() string {
	if x != nil {
		return x.IsApplied
	}
	return ""
}

type ErdaRuntimeVPARecommendations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//RuntimeInfo runtimeInfo = 1 [json_name = "runtimeInfo"] ;
	RuntimeID              uint64                       `protobuf:"varint,1,opt,name=runtimeID,json=runtimeId,proto3" json:"runtimeID,omitempty"`
	ServiceRecommendations []*ErdaServiceRecommendation `protobuf:"bytes,2,rep,name=serviceRecommendations,proto3" json:"serviceRecommendations,omitempty"`
}

func (x *ErdaRuntimeVPARecommendations) Reset() {
	*x = ErdaRuntimeVPARecommendations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErdaRuntimeVPARecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErdaRuntimeVPARecommendations) ProtoMessage() {}

func (x *ErdaRuntimeVPARecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErdaRuntimeVPARecommendations.ProtoReflect.Descriptor instead.
func (*ErdaRuntimeVPARecommendations) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{42}
}

func (x *ErdaRuntimeVPARecommendations) GetRuntimeID() uint64 {
	if x != nil {
		return x.RuntimeID
	}
	return 0
}

func (x *ErdaRuntimeVPARecommendations) GetServiceRecommendations() []*ErdaServiceRecommendation {
	if x != nil {
		return x.ServiceRecommendations
	}
	return nil
}

type ErdaServiceRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateAt                *timestamppb.Timestamp      `protobuf:"bytes,2,opt,name=createAt,proto3" json:"createAt,omitempty"`
	ServiceName             string                      `protobuf:"bytes,3,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	RuleID                  string                      `protobuf:"bytes,4,opt,name=ruleID,json=ruleId,proto3" json:"ruleID,omitempty"`
	RuleName                string                      `protobuf:"bytes,5,opt,name=ruleName,proto3" json:"ruleName,omitempty"`
	ContainerRecommendation *VPAContainerRecommendation `protobuf:"bytes,6,opt,name=containerRecommendation,proto3" json:"containerRecommendation,omitempty"`
}

func (x *ErdaServiceRecommendation) Reset() {
	*x = ErdaServiceRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErdaServiceRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErdaServiceRecommendation) ProtoMessage() {}

func (x *ErdaServiceRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErdaServiceRecommendation.ProtoReflect.Descriptor instead.
func (*ErdaServiceRecommendation) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{43}
}

func (x *ErdaServiceRecommendation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ErdaServiceRecommendation) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *ErdaServiceRecommendation) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ErdaServiceRecommendation) GetRuleID() string {
	if x != nil {
		return x.RuleID
	}
	return ""
}

func (x *ErdaServiceRecommendation) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *ErdaServiceRecommendation) GetContainerRecommendation() *VPAContainerRecommendation {
	if x != nil {
		return x.ContainerRecommendation
	}
	return nil
}

type VPAContainerRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerName  string     `protobuf:"bytes,1,opt,name=containerName,proto3" json:"containerName,omitempty"`
	LowerBound     *Resources `protobuf:"bytes,2,opt,name=lowerBound,proto3" json:"lowerBound,omitempty"`
	UpperBound     *Resources `protobuf:"bytes,3,opt,name=upperBound,proto3" json:"upperBound,omitempty"`
	Target         *Resources `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	UncappedTarget *Resources `protobuf:"bytes,5,opt,name=uncappedTarget,proto3" json:"uncappedTarget,omitempty"`
}

func (x *VPAContainerRecommendation) Reset() {
	*x = VPAContainerRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_podscaler_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPAContainerRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPAContainerRecommendation) ProtoMessage() {}

func (x *VPAContainerRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_podscaler_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPAContainerRecommendation.ProtoReflect.Descriptor instead.
func (*VPAContainerRecommendation) Descriptor() ([]byte, []int) {
	return file_podscaler_proto_rawDescGZIP(), []int{44}
}

func (x *VPAContainerRecommendation) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *VPAContainerRecommendation) GetLowerBound() *Resources {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *VPAContainerRecommendation) GetUpperBound() *Resources {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

func (x *VPAContainerRecommendation) GetTarget() *Resources {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *VPAContainerRecommendation) GetUncappedTarget() *Resources {
	if x != nil {
		return x.UncappedTarget
	}
	return nil
}

var File_podscaler_proto protoreflect.FileDescriptor

var file_podscaler_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1b, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91,
	0x01, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x48,
	0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x50, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x50, 0x41, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x1b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x41, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x81, 0x01, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x0a, 0x72, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x65, 0x6e, 0x76, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65,
	0x6e, 0x76, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x48, 0x50, 0x41, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x54, 0x6f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x1d,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x1d, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x79,
	0x0a, 0x1d, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x58, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e,
	0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52,
	0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0xb5, 0x01, 0x0a, 0x1f, 0x48, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x46, 0x0a,
	0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x50, 0x41,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x55, 0x70, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x22, 0xc0, 0x01, 0x0a, 0x0f, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x73, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x10, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x52, 0x0a, 0x08, 0x46, 0x61, 0x6c, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x3d, 0x0a, 0x13,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xca, 0x02, 0x0a, 0x0d,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x11, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x66, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x05, 0x0a, 0x0c, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x53, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x50, 0x41, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x12, 0x46, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x08,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xe4, 0x02, 0x0a, 0x17,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x50,
	0x41, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f,
	0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x7a, 0x0a, 0x13, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x48, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x48, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x8a,
	0x03, 0x0a, 0x12, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x50,
	0x41, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d,
	0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0x5e, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8d, 0x03, 0x0a, 0x0b,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x14,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x57,
	0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x44, 0x69, 0x63, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x22, 0xe7, 0x02, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x44, 0x69, 0x63, 0x65, 0x44,
	0x54, 0x4f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x44, 0x69, 0x63, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e,
	0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x51, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x65, 0x44, 0x69, 0x63, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x0d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x54, 0x4f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x03,
	0x0a, 0x0f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x65,
	0x6e, 0x76, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f,
	0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x56, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f,
	0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a,
	0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x54,
	0x4f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x04, 0x0a,
	0x18, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x44, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64,
	0x64, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x37, 0x0a, 0x09,
	0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x02, 0x0a, 0x10, 0x48, 0x50, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b,
	0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x50, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x57, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x50, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xba, 0x06, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x44, 0x54, 0x4f, 0x52, 0x0a, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x49, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x75, 0x6e, 0x52, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x10, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x0f, 0x75, 0x6e, 0x52, 0x65, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x13, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x54, 0x4f, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x75, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x49, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x04, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x58, 0x0a, 0x0f, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x44, 0x69, 0x63, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x16, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x49, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x5a, 0x0a, 0x0c, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49,
	0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x22, 0xd8,
	0x02, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x44, 0x54, 0x4f, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xae, 0x03, 0x0a, 0x0a, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x43, 0x0a, 0x09, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x69, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x22,
	0x29, 0x0a, 0x0b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x60, 0x0a, 0x14, 0x45, 0x72,
	0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x50, 0x41, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x50, 0x41, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x92, 0x01, 0x0a,
	0x13, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x50, 0x41, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x50, 0x41, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x48, 0x50, 0x41, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x56, 0x50, 0x41, 0x52,
	0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x50,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x50, 0x41,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x22, 0xe0, 0x04, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x50, 0x41, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x52,
	0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x44, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x13, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x56, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x56, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0xd1, 0x02, 0x0a, 0x12, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56,
	0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x36,
	0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f,
	0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x50, 0x41, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x1d, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x56, 0x50, 0x41, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x6e, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x2e, 0x45, 0x72, 0x64, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xac, 0x02, 0x0a, 0x19, 0x45, 0x72, 0x64, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x71, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x56,
	0x50, 0x41, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xe2, 0x02, 0x0a, 0x1a, 0x56, 0x50, 0x41, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x46, 0x0a, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x0e, 0x75, 0x6e, 0x63, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0e, 0x75, 0x6e, 0x63, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x32, 0xbf, 0x18, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc3, 0x01, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x50,
	0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f,
	0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x68, 0x70, 0x61, 0x3a, 0x01, 0x2a, 0xfa,
	0x81, 0xf9, 0x1b, 0x1e, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x68,
	0x70, 0x61, 0x12, 0xe7, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x48, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68,
	0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x50,
	0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x12, 0x46,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x68, 0x70, 0x61, 0x3f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x3d, 0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x7d, 0x26, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3d, 0x7b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x7d, 0x3a, 0x01, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x1e, 0x0a, 0x1c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x68, 0x70, 0x61, 0x12, 0xc2, 0x01, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x50,
	0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x48, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x1a, 0x1c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x68, 0x70, 0x61, 0x3a, 0x01, 0x2a, 0xfa, 0x81,
	0xf9, 0x1b, 0x1e, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x68, 0x70,
	0x61, 0x12, 0xc8, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x50, 0x41, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f,
	0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x2f, 0x68, 0x70, 0x61, 0x3a, 0x01, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x1e, 0x0a, 0x1c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x68, 0x70, 0x61, 0x12, 0xe9, 0x01, 0x0a,
	0x1a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x50,
	0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x38, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f,
	0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x2f, 0x68, 0x70, 0x61, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x2b, 0x0a, 0x29, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x68, 0x70, 0x61, 0x2d, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xcc, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f,
	0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x2f,
	0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0xfa, 0x81,
	0xf9, 0x1b, 0x24, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x7b, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x7d, 0x12, 0xf6, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x50, 0x41, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x48, 0x50, 0x41, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x80, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x12, 0x4c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2f, 0x68, 0x70, 0x61, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x3f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x64, 0x3d, 0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x7d,
	0x26, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3d, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x7d, 0x3a, 0x01, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x24, 0x0a, 0x22, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x68, 0x70, 0x61, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0xc3, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x56, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x56, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x70, 0x61,
	0x3a, 0x01, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x1e, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x2f, 0x76, 0x70, 0x61, 0x12, 0xe7, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x28,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x56, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4b, 0x12, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x70, 0x61,
	0x3f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x3d, 0x7b, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x7d, 0x26, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3d,
	0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x7d, 0x3a, 0x01, 0x2a, 0xfa, 0x81, 0xf9,
	0x1b, 0x1e, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x70, 0x61,
	0x12, 0xc2, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x56, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x56, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x2b, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x1a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x70, 0x61, 0x3a,
	0x01, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x1e, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x2f, 0x76, 0x70, 0x61, 0x12, 0xc8, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x38, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x70, 0x61, 0x3a, 0x01, 0x2a, 0xfa, 0x81, 0xf9,
	0x1b, 0x1e, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x70, 0x61,
	0x12, 0xe9, 0x01, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x56, 0x50, 0x41, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12,
	0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x4f, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x41, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f,
	0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x70, 0x61, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0xfa, 0x81, 0xf9, 0x1b,
	0x2b, 0x0a, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x70, 0x61, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9c, 0x02, 0x0a,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x50, 0x41, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6f, 0x64,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x56, 0x50, 0x41, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b, 0x12, 0x56, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x70, 0x61, 0x2d, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x3d, 0x7b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64,
	0x7d, 0x26, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3d, 0x7b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x7d, 0x3a, 0x01, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x2e, 0x0a, 0x2c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2f, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x70, 0x61, 0x2d, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xd0, 0x01, 0x0a, 0x0d,
	0x48, 0x50, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x2c, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x48, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x50, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x1a, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2d, 0x70, 0x72, 0x65, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x3a, 0x01, 0x2a, 0xfa,
	0x81, 0xf9, 0x1b, 0x2a, 0x0a, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2d, 0x70, 0x72, 0x65, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x1a, 0x19,
	0xc2, 0xc4, 0xcb, 0x1c, 0x14, 0x22, 0x0c, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d,
	0x67, 0x6f, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x70, 0x6f, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_podscaler_proto_rawDescOnce sync.Once
	file_podscaler_proto_rawDescData = file_podscaler_proto_rawDesc
)

func file_podscaler_proto_rawDescGZIP() []byte {
	file_podscaler_proto_rawDescOnce.Do(func() {
		file_podscaler_proto_rawDescData = protoimpl.X.CompressGZIP(file_podscaler_proto_rawDescData)
	})
	return file_podscaler_proto_rawDescData
}

var file_podscaler_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_podscaler_proto_goTypes = []interface{}{
	(*RuntimeServiceBaseInfos)(nil),         // 0: erda.orchestrator.podscaler.RuntimeServiceBaseInfos
	(*ServiceBaseInfo)(nil),                 // 1: erda.orchestrator.podscaler.ServiceBaseInfo
	(*HPARuleCreateRequest)(nil),            // 2: erda.orchestrator.podscaler.HPARuleCreateRequest
	(*ListRequest)(nil),                     // 3: erda.orchestrator.podscaler.ListRequest
	(*DeleteRuntimePARulesRequest)(nil),     // 4: erda.orchestrator.podscaler.DeleteRuntimePARulesRequest
	(*ApplyOrCancelPARulesRequest)(nil),     // 5: erda.orchestrator.podscaler.ApplyOrCancelPARulesRequest
	(*RuleAction)(nil),                      // 6: erda.orchestrator.podscaler.RuleAction
	(*CommonResponse)(nil),                  // 7: erda.orchestrator.podscaler.CommonResponse
	(*ErrorResponse)(nil),                   // 8: erda.orchestrator.podscaler.ErrorResponse
	(*ScaleTargetRef)(nil),                  // 9: erda.orchestrator.podscaler.ScaleTargetRef
	(*HPAAdvanced)(nil),                     // 10: erda.orchestrator.podscaler.HPAAdvanced
	(*HorizontalPodAutoscalerConfig)(nil),   // 11: erda.orchestrator.podscaler.HorizontalPodAutoscalerConfig
	(*HorizontalPodAutoscalerBehavior)(nil), // 12: erda.orchestrator.podscaler.HorizontalPodAutoscalerBehavior
	(*HPAScalingRules)(nil),                 // 13: erda.orchestrator.podscaler.HPAScalingRules
	(*HPAScalingPolicy)(nil),                // 14: erda.orchestrator.podscaler.HPAScalingPolicy
	(*FallBack)(nil),                        // 15: erda.orchestrator.podscaler.FallBack
	(*ScaledObjectAuthRef)(nil),             // 16: erda.orchestrator.podscaler.ScaledObjectAuthRef
	(*ScaleTriggers)(nil),                   // 17: erda.orchestrator.podscaler.ScaleTriggers
	(*ScaledConfig)(nil),                    // 18: erda.orchestrator.podscaler.ScaledConfig
	(*RuntimeServiceHPAConfig)(nil),         // 19: erda.orchestrator.podscaler.RuntimeServiceHPAConfig
	(*ErdaRuntimeHPARules)(nil),             // 20: erda.orchestrator.podscaler.ErdaRuntimeHPARules
	(*ErdaRuntimeHPARule)(nil),              // 21: erda.orchestrator.podscaler.ErdaRuntimeHPARule
	(*UserInfo)(nil),                        // 22: erda.orchestrator.podscaler.UserInfo
	(*RuntimeInfo)(nil),                     // 23: erda.orchestrator.podscaler.RuntimeInfo
	(*BatchManualHPRequest)(nil),            // 24: erda.orchestrator.podscaler.BatchManualHPRequest
	(*RuntimeScaleRecord)(nil),              // 25: erda.orchestrator.podscaler.RuntimeScaleRecord
	(*PreDiceDTO)(nil),                      // 26: erda.orchestrator.podscaler.PreDiceDTO
	(*ManualHPRequest)(nil),                 // 27: erda.orchestrator.podscaler.ManualHPRequest
	(*RuntimeInspectServiceDTO)(nil),        // 28: erda.orchestrator.podscaler.RuntimeInspectServiceDTO
	(*HPManualResponse)(nil),                // 29: erda.orchestrator.podscaler.HPManualResponse
	(*BatchManualResponse)(nil),             // 30: erda.orchestrator.podscaler.BatchManualResponse
	(*RuntimeDeployDTO)(nil),                // 31: erda.orchestrator.podscaler.RuntimeDeployDTO
	(*RuntimeDTO)(nil),                      // 32: erda.orchestrator.podscaler.RuntimeDTO
	(*Resources)(nil),                       // 33: erda.orchestrator.podscaler.Resources
	(*Deployments)(nil),                     // 34: erda.orchestrator.podscaler.Deployments
	(*ErdaRuntimeHPAEvents)(nil),            // 35: erda.orchestrator.podscaler.ErdaRuntimeHPAEvents
	(*ErdaRuntimeHPAEvent)(nil),             // 36: erda.orchestrator.podscaler.ErdaRuntimeHPAEvent
	(*HPAEventDetail)(nil),                  // 37: erda.orchestrator.podscaler.HPAEventDetail
	(*VPARuleCreateRequest)(nil),            // 38: erda.orchestrator.podscaler.VPARuleCreateRequest
	(*RuntimeServiceVPAConfig)(nil),         // 39: erda.orchestrator.podscaler.RuntimeServiceVPAConfig
	(*ErdaRuntimeVPARules)(nil),             // 40: erda.orchestrator.podscaler.ErdaRuntimeVPARules
	(*ErdaRuntimeVPARule)(nil),              // 41: erda.orchestrator.podscaler.ErdaRuntimeVPARule
	(*ErdaRuntimeVPARecommendations)(nil),   // 42: erda.orchestrator.podscaler.ErdaRuntimeVPARecommendations
	(*ErdaServiceRecommendation)(nil),       // 43: erda.orchestrator.podscaler.ErdaServiceRecommendation
	(*VPAContainerRecommendation)(nil),      // 44: erda.orchestrator.podscaler.VPAContainerRecommendation
	nil,                                     // 45: erda.orchestrator.podscaler.ScaleTriggers.MetadataEntry
	nil,                                     // 46: erda.orchestrator.podscaler.PreDiceDTO.EnvsEntry
	nil,                                     // 47: erda.orchestrator.podscaler.PreDiceDTO.ServicesEntry
	nil,                                     // 48: erda.orchestrator.podscaler.ManualHPRequest.EnvsEntry
	nil,                                     // 49: erda.orchestrator.podscaler.ManualHPRequest.ServicesEntry
	nil,                                     // 50: erda.orchestrator.podscaler.RuntimeInspectServiceDTO.EnvsEntry
	nil,                                     // 51: erda.orchestrator.podscaler.HPManualResponse.EnvsEntry
	nil,                                     // 52: erda.orchestrator.podscaler.HPManualResponse.ServicesEntry
	(*anypb.Any)(nil),                       // 53: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),           // 54: google.protobuf.Timestamp
}
var file_podscaler_proto_depIdxs = []int32{
	1,  // 0: erda.orchestrator.podscaler.RuntimeServiceBaseInfos.serviceBaseInfos:type_name -> erda.orchestrator.podscaler.ServiceBaseInfo
	34, // 1: erda.orchestrator.podscaler.ServiceBaseInfo.deployments:type_name -> erda.orchestrator.podscaler.Deployments
	33, // 2: erda.orchestrator.podscaler.ServiceBaseInfo.resources:type_name -> erda.orchestrator.podscaler.Resources
	19, // 3: erda.orchestrator.podscaler.HPARuleCreateRequest.services:type_name -> erda.orchestrator.podscaler.RuntimeServiceHPAConfig
	6,  // 4: erda.orchestrator.podscaler.ApplyOrCancelPARulesRequest.ruleAction:type_name -> erda.orchestrator.podscaler.RuleAction
	53, // 5: erda.orchestrator.podscaler.ErrorResponse.ctx:type_name -> google.protobuf.Any
	11, // 6: erda.orchestrator.podscaler.HPAAdvanced.horizontalPodAutoscalerConfig:type_name -> erda.orchestrator.podscaler.HorizontalPodAutoscalerConfig
	12, // 7: erda.orchestrator.podscaler.HorizontalPodAutoscalerConfig.behavior:type_name -> erda.orchestrator.podscaler.HorizontalPodAutoscalerBehavior
	13, // 8: erda.orchestrator.podscaler.HorizontalPodAutoscalerBehavior.scaleUp:type_name -> erda.orchestrator.podscaler.HPAScalingRules
	13, // 9: erda.orchestrator.podscaler.HorizontalPodAutoscalerBehavior.scaleDown:type_name -> erda.orchestrator.podscaler.HPAScalingRules
	14, // 10: erda.orchestrator.podscaler.HPAScalingRules.policies:type_name -> erda.orchestrator.podscaler.HPAScalingPolicy
	45, // 11: erda.orchestrator.podscaler.ScaleTriggers.metadata:type_name -> erda.orchestrator.podscaler.ScaleTriggers.MetadataEntry
	16, // 12: erda.orchestrator.podscaler.ScaleTriggers.authenticationRef:type_name -> erda.orchestrator.podscaler.ScaledObjectAuthRef
	9,  // 13: erda.orchestrator.podscaler.ScaledConfig.scaleTargetRef:type_name -> erda.orchestrator.podscaler.ScaleTargetRef
	10, // 14: erda.orchestrator.podscaler.ScaledConfig.advanced:type_name -> erda.orchestrator.podscaler.HPAAdvanced
	17, // 15: erda.orchestrator.podscaler.ScaledConfig.triggers:type_name -> erda.orchestrator.podscaler.ScaleTriggers
	15, // 16: erda.orchestrator.podscaler.ScaledConfig.fallback:type_name -> erda.orchestrator.podscaler.FallBack
	34, // 17: erda.orchestrator.podscaler.RuntimeServiceHPAConfig.deployments:type_name -> erda.orchestrator.podscaler.Deployments
	33, // 18: erda.orchestrator.podscaler.RuntimeServiceHPAConfig.resources:type_name -> erda.orchestrator.podscaler.Resources
	18, // 19: erda.orchestrator.podscaler.RuntimeServiceHPAConfig.scaledConfig:type_name -> erda.orchestrator.podscaler.ScaledConfig
	21, // 20: erda.orchestrator.podscaler.ErdaRuntimeHPARules.rules:type_name -> erda.orchestrator.podscaler.ErdaRuntimeHPARule
	54, // 21: erda.orchestrator.podscaler.ErdaRuntimeHPARule.createAt:type_name -> google.protobuf.Timestamp
	54, // 22: erda.orchestrator.podscaler.ErdaRuntimeHPARule.updateAt:type_name -> google.protobuf.Timestamp
	22, // 23: erda.orchestrator.podscaler.ErdaRuntimeHPARule.userInfo:type_name -> erda.orchestrator.podscaler.UserInfo
	18, // 24: erda.orchestrator.podscaler.ErdaRuntimeHPARule.scaledConfig:type_name -> erda.orchestrator.podscaler.ScaledConfig
	25, // 25: erda.orchestrator.podscaler.BatchManualHPRequest.runtimeRecords:type_name -> erda.orchestrator.podscaler.RuntimeScaleRecord
	26, // 26: erda.orchestrator.podscaler.RuntimeScaleRecord.payload:type_name -> erda.orchestrator.podscaler.PreDiceDTO
	46, // 27: erda.orchestrator.podscaler.PreDiceDTO.envs:type_name -> erda.orchestrator.podscaler.PreDiceDTO.EnvsEntry
	47, // 28: erda.orchestrator.podscaler.PreDiceDTO.services:type_name -> erda.orchestrator.podscaler.PreDiceDTO.ServicesEntry
	48, // 29: erda.orchestrator.podscaler.ManualHPRequest.envs:type_name -> erda.orchestrator.podscaler.ManualHPRequest.EnvsEntry
	49, // 30: erda.orchestrator.podscaler.ManualHPRequest.services:type_name -> erda.orchestrator.podscaler.ManualHPRequest.ServicesEntry
	34, // 31: erda.orchestrator.podscaler.RuntimeInspectServiceDTO.deployments:type_name -> erda.orchestrator.podscaler.Deployments
	33, // 32: erda.orchestrator.podscaler.RuntimeInspectServiceDTO.resources:type_name -> erda.orchestrator.podscaler.Resources
	50, // 33: erda.orchestrator.podscaler.RuntimeInspectServiceDTO.envs:type_name -> erda.orchestrator.podscaler.RuntimeInspectServiceDTO.EnvsEntry
	8,  // 34: erda.orchestrator.podscaler.RuntimeInspectServiceDTO.errors:type_name -> erda.orchestrator.podscaler.ErrorResponse
	51, // 35: erda.orchestrator.podscaler.HPManualResponse.envs:type_name -> erda.orchestrator.podscaler.HPManualResponse.EnvsEntry
	52, // 36: erda.orchestrator.podscaler.HPManualResponse.services:type_name -> erda.orchestrator.podscaler.HPManualResponse.ServicesEntry
	31, // 37: erda.orchestrator.podscaler.BatchManualResponse.reDeployed:type_name -> erda.orchestrator.podscaler.RuntimeDeployDTO
	32, // 38: erda.orchestrator.podscaler.BatchManualResponse.unReDeployed:type_name -> erda.orchestrator.podscaler.RuntimeDTO
	32, // 39: erda.orchestrator.podscaler.BatchManualResponse.deleted:type_name -> erda.orchestrator.podscaler.RuntimeDTO
	32, // 40: erda.orchestrator.podscaler.BatchManualResponse.unDeleted:type_name -> erda.orchestrator.podscaler.RuntimeDTO
	26, // 41: erda.orchestrator.podscaler.BatchManualResponse.successedScales:type_name -> erda.orchestrator.podscaler.PreDiceDTO
	25, // 42: erda.orchestrator.podscaler.BatchManualResponse.failedScales:type_name -> erda.orchestrator.podscaler.RuntimeScaleRecord
	8,  // 43: erda.orchestrator.podscaler.RuntimeDTO.errors:type_name -> erda.orchestrator.podscaler.ErrorResponse
	36, // 44: erda.orchestrator.podscaler.ErdaRuntimeHPAEvents.events:type_name -> erda.orchestrator.podscaler.ErdaRuntimeHPAEvent
	37, // 45: erda.orchestrator.podscaler.ErdaRuntimeHPAEvent.event:type_name -> erda.orchestrator.podscaler.HPAEventDetail
	54, // 46: erda.orchestrator.podscaler.HPAEventDetail.createAt:type_name -> google.protobuf.Timestamp
	39, // 47: erda.orchestrator.podscaler.VPARuleCreateRequest.services:type_name -> erda.orchestrator.podscaler.RuntimeServiceVPAConfig
	9,  // 48: erda.orchestrator.podscaler.RuntimeServiceVPAConfig.scaleTargetRef:type_name -> erda.orchestrator.podscaler.ScaleTargetRef
	34, // 49: erda.orchestrator.podscaler.RuntimeServiceVPAConfig.deployments:type_name -> erda.orchestrator.podscaler.Deployments
	33, // 50: erda.orchestrator.podscaler.RuntimeServiceVPAConfig.resources:type_name -> erda.orchestrator.podscaler.Resources
	33, // 51: erda.orchestrator.podscaler.RuntimeServiceVPAConfig.maxResources:type_name -> erda.orchestrator.podscaler.Resources
	41, // 52: erda.orchestrator.podscaler.ErdaRuntimeVPARules.rules:type_name -> erda.orchestrator.podscaler.ErdaRuntimeVPARule
	54, // 53: erda.orchestrator.podscaler.ErdaRuntimeVPARule.createAt:type_name -> google.protobuf.Timestamp
	54, // 54: erda.orchestrator.podscaler.ErdaRuntimeVPARule.updateAt:type_name -> google.protobuf.Timestamp
	22, // 55: erda.orchestrator.podscaler.ErdaRuntimeVPARule.userInfo:type_name -> erda.orchestrator.podscaler.UserInfo
	39, // 56: erda.orchestrator.podscaler.ErdaRuntimeVPARule.rule:type_name -> erda.orchestrator.podscaler.RuntimeServiceVPAConfig
	43, // 57: erda.orchestrator.podscaler.ErdaRuntimeVPARecommendations.serviceRecommendations:type_name -> erda.orchestrator.podscaler.ErdaServiceRecommendation
	54, // 58: erda.orchestrator.podscaler.ErdaServiceRecommendation.createAt:type_name -> google.protobuf.Timestamp
	44, // 59: erda.orchestrator.podscaler.ErdaServiceRecommendation.containerRecommendation:type_name -> erda.orchestrator.podscaler.VPAContainerRecommendation
	33, // 60: erda.orchestrator.podscaler.VPAContainerRecommendation.lowerBound:type_name -> erda.orchestrator.podscaler.Resources
	33, // 61: erda.orchestrator.podscaler.VPAContainerRecommendation.upperBound:type_name -> erda.orchestrator.podscaler.Resources
	33, // 62: erda.orchestrator.podscaler.VPAContainerRecommendation.target:type_name -> erda.orchestrator.podscaler.Resources
	33, // 63: erda.orchestrator.podscaler.VPAContainerRecommendation.uncappedTarget:type_name -> erda.orchestrator.podscaler.Resources
	28, // 64: erda.orchestrator.podscaler.PreDiceDTO.ServicesEntry.value:type_name -> erda.orchestrator.podscaler.RuntimeInspectServiceDTO
	28, // 65: erda.orchestrator.podscaler.ManualHPRequest.ServicesEntry.value:type_name -> erda.orchestrator.podscaler.RuntimeInspectServiceDTO
	28, // 66: erda.orchestrator.podscaler.HPManualResponse.ServicesEntry.value:type_name -> erda.orchestrator.podscaler.RuntimeInspectServiceDTO
	2,  // 67: erda.orchestrator.podscaler.PodScalerService.CreateRuntimeHPARules:input_type -> erda.orchestrator.podscaler.HPARuleCreateRequest
	3,  // 68: erda.orchestrator.podscaler.PodScalerService.ListRuntimeHPARules:input_type -> erda.orchestrator.podscaler.ListRequest
	20, // 69: erda.orchestrator.podscaler.PodScalerService.UpdateRuntimeHPARules:input_type -> erda.orchestrator.podscaler.ErdaRuntimeHPARules
	4,  // 70: erda.orchestrator.podscaler.PodScalerService.DeleteHPARulesByIds:input_type -> erda.orchestrator.podscaler.DeleteRuntimePARulesRequest
	5,  // 71: erda.orchestrator.podscaler.PodScalerService.ApplyOrCancelHPARulesByIds:input_type -> erda.orchestrator.podscaler.ApplyOrCancelPARulesRequest
	3,  // 72: erda.orchestrator.podscaler.PodScalerService.GetRuntimeBaseInfo:input_type -> erda.orchestrator.podscaler.ListRequest
	3,  // 73: erda.orchestrator.podscaler.PodScalerService.ListRuntimeHPAEvents:input_type -> erda.orchestrator.podscaler.ListRequest
	38, // 74: erda.orchestrator.podscaler.PodScalerService.CreateRuntimeVPARules:input_type -> erda.orchestrator.podscaler.VPARuleCreateRequest
	3,  // 75: erda.orchestrator.podscaler.PodScalerService.ListRuntimeVPARules:input_type -> erda.orchestrator.podscaler.ListRequest
	40, // 76: erda.orchestrator.podscaler.PodScalerService.UpdateRuntimeVPARules:input_type -> erda.orchestrator.podscaler.ErdaRuntimeVPARules
	4,  // 77: erda.orchestrator.podscaler.PodScalerService.DeleteVPARulesByIds:input_type -> erda.orchestrator.podscaler.DeleteRuntimePARulesRequest
	5,  // 78: erda.orchestrator.podscaler.PodScalerService.ApplyOrCancelVPARulesByIds:input_type -> erda.orchestrator.podscaler.ApplyOrCancelPARulesRequest
	3,  // 79: erda.orchestrator.podscaler.PodScalerService.ListRuntimeVPARecommendations:input_type -> erda.orchestrator.podscaler.ListRequest
	27, // 80: erda.orchestrator.podscaler.PodScalerService.HPScaleManual:input_type -> erda.orchestrator.podscaler.ManualHPRequest
	7,  // 81: erda.orchestrator.podscaler.PodScalerService.CreateRuntimeHPARules:output_type -> erda.orchestrator.podscaler.CommonResponse
	20, // 82: erda.orchestrator.podscaler.PodScalerService.ListRuntimeHPARules:output_type -> erda.orchestrator.podscaler.ErdaRuntimeHPARules
	7,  // 83: erda.orchestrator.podscaler.PodScalerService.UpdateRuntimeHPARules:output_type -> erda.orchestrator.podscaler.CommonResponse
	7,  // 84: erda.orchestrator.podscaler.PodScalerService.DeleteHPARulesByIds:output_type -> erda.orchestrator.podscaler.CommonResponse
	7,  // 85: erda.orchestrator.podscaler.PodScalerService.ApplyOrCancelHPARulesByIds:output_type -> erda.orchestrator.podscaler.CommonResponse
	0,  // 86: erda.orchestrator.podscaler.PodScalerService.GetRuntimeBaseInfo:output_type -> erda.orchestrator.podscaler.RuntimeServiceBaseInfos
	35, // 87: erda.orchestrator.podscaler.PodScalerService.ListRuntimeHPAEvents:output_type -> erda.orchestrator.podscaler.ErdaRuntimeHPAEvents
	7,  // 88: erda.orchestrator.podscaler.PodScalerService.CreateRuntimeVPARules:output_type -> erda.orchestrator.podscaler.CommonResponse
	40, // 89: erda.orchestrator.podscaler.PodScalerService.ListRuntimeVPARules:output_type -> erda.orchestrator.podscaler.ErdaRuntimeVPARules
	7,  // 90: erda.orchestrator.podscaler.PodScalerService.UpdateRuntimeVPARules:output_type -> erda.orchestrator.podscaler.CommonResponse
	7,  // 91: erda.orchestrator.podscaler.PodScalerService.DeleteVPARulesByIds:output_type -> erda.orchestrator.podscaler.CommonResponse
	7,  // 92: erda.orchestrator.podscaler.PodScalerService.ApplyOrCancelVPARulesByIds:output_type -> erda.orchestrator.podscaler.CommonResponse
	42, // 93: erda.orchestrator.podscaler.PodScalerService.ListRuntimeVPARecommendations:output_type -> erda.orchestrator.podscaler.ErdaRuntimeVPARecommendations
	29, // 94: erda.orchestrator.podscaler.PodScalerService.HPScaleManual:output_type -> erda.orchestrator.podscaler.HPManualResponse
	81, // [81:95] is the sub-list for method output_type
	67, // [67:81] is the sub-list for method input_type
	67, // [67:67] is the sub-list for extension type_name
	67, // [67:67] is the sub-list for extension extendee
	0,  // [0:67] is the sub-list for field type_name
}

func init() { file_podscaler_proto_init() }
func file_podscaler_proto_init() {
	if File_podscaler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_podscaler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeServiceBaseInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HPARuleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRuntimePARulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyOrCancelPARulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleTargetRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HPAAdvanced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodAutoscalerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodAutoscalerBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HPAScalingRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HPAScalingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallBack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaledObjectAuthRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleTriggers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaledConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeServiceHPAConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErdaRuntimeHPARules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErdaRuntimeHPARule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchManualHPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeScaleRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreDiceDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualHPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeInspectServiceDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HPManualResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchManualResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeDeployDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErdaRuntimeHPAEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErdaRuntimeHPAEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HPAEventDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPARuleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeServiceVPAConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErdaRuntimeVPARules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErdaRuntimeVPARule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErdaRuntimeVPARecommendations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErdaServiceRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_podscaler_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPAContainerRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_podscaler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_podscaler_proto_goTypes,
		DependencyIndexes: file_podscaler_proto_depIdxs,
		MessageInfos:      file_podscaler_proto_msgTypes,
	}.Build()
	File_podscaler_proto = out.File
	file_podscaler_proto_rawDesc = nil
	file_podscaler_proto_goTypes = nil
	file_podscaler_proto_depIdxs = nil
}
