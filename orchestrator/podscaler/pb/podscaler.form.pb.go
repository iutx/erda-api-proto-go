// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: podscaler.proto

package pb

import (
	base64 "encoding/base64"
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*RuntimeServiceBaseInfos)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ServiceBaseInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*HPARuleCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteRuntimePARulesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ApplyOrCancelPARulesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuleAction)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CommonResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ErrorResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ScaleTargetRef)(nil)
var _ urlenc.URLValuesUnmarshaler = (*HPAAdvanced)(nil)
var _ urlenc.URLValuesUnmarshaler = (*HorizontalPodAutoscalerConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*HorizontalPodAutoscalerBehavior)(nil)
var _ urlenc.URLValuesUnmarshaler = (*HPAScalingRules)(nil)
var _ urlenc.URLValuesUnmarshaler = (*HPAScalingPolicy)(nil)
var _ urlenc.URLValuesUnmarshaler = (*FallBack)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ScaledObjectAuthRef)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ScaleTriggers)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ScaledConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeServiceHPAConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ErdaRuntimeHPARules)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ErdaRuntimeHPARule)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BatchManualHPRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeScaleRecord)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PreDiceDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ManualHPRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeInspectServiceDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*HPManualResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BatchManualResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeDeployDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Resources)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Deployments)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ErdaRuntimeHPAEvents)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ErdaRuntimeHPAEvent)(nil)
var _ urlenc.URLValuesUnmarshaler = (*HPAEventDetail)(nil)
var _ urlenc.URLValuesUnmarshaler = (*VPARuleCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeServiceVPAConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ErdaRuntimeVPARules)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ErdaRuntimeVPARule)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ErdaRuntimeVPARecommendations)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ErdaServiceRecommendation)(nil)
var _ urlenc.URLValuesUnmarshaler = (*VPAContainerRecommendation)(nil)

// RuntimeServiceBaseInfos implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeServiceBaseInfos) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			}
		}
	}
	return nil
}

// ServiceBaseInfo implement urlenc.URLValuesUnmarshaler.
func (m *ServiceBaseInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "serviceName":
				m.ServiceName = vals[0]
			case "deployments":
				if m.Deployments == nil {
					m.Deployments = &Deployments{}
				}
			case "deployments.replicas":
				if m.Deployments == nil {
					m.Deployments = &Deployments{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Deployments.Replicas = val
			case "resources":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
			case "resources.cpu":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Resources.Cpu = val
			case "resources.mem":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Resources.Mem = val
			case "resources.disk":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Resources.Disk = val
			}
		}
	}
	return nil
}

// HPARuleCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *HPARuleCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			}
		}
	}
	return nil
}

// ListRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeId":
				m.RuntimeId = vals[0]
			case "services":
				m.Services = vals[0]
			}
		}
	}
	return nil
}

// DeleteRuntimePARulesRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteRuntimePARulesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			case "rules":
				m.Rules = vals
			}
		}
	}
	return nil
}

// ApplyOrCancelPARulesRequest implement urlenc.URLValuesUnmarshaler.
func (m *ApplyOrCancelPARulesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			}
		}
	}
	return nil
}

// RuleAction implement urlenc.URLValuesUnmarshaler.
func (m *RuleAction) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ruleId":
				m.RuleId = vals[0]
			case "action":
				m.Action = vals[0]
			}
		}
	}
	return nil
}

// CommonResponse implement urlenc.URLValuesUnmarshaler.
func (m *CommonResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ErrorResponse implement urlenc.URLValuesUnmarshaler.
func (m *ErrorResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "code":
				m.Code = vals[0]
			case "msg":
				m.Msg = vals[0]
			case "ctx":
				if m.Ctx == nil {
					m.Ctx = &anypb.Any{}
				}
			case "ctx.type_url":
				if m.Ctx == nil {
					m.Ctx = &anypb.Any{}
				}
				m.Ctx.TypeUrl = vals[0]
			case "ctx.value":
				if m.Ctx == nil {
					m.Ctx = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.Ctx.Value = val
			}
		}
	}
	return nil
}

// ScaleTargetRef implement urlenc.URLValuesUnmarshaler.
func (m *ScaleTargetRef) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "apiVersion":
				m.ApiVersion = vals[0]
			case "kind":
				m.Kind = vals[0]
			case "name":
				m.Name = vals[0]
			case "envSourceContainerName":
				m.EnvSourceContainerName = vals[0]
			}
		}
	}
	return nil
}

// HPAAdvanced implement urlenc.URLValuesUnmarshaler.
func (m *HPAAdvanced) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "restoreToOriginalReplicaCount":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.RestoreToOriginalReplicaCount = val
			case "horizontalPodAutoscalerConfig":
				if m.HorizontalPodAutoscalerConfig == nil {
					m.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
			case "horizontalPodAutoscalerConfig.behavior":
				if m.HorizontalPodAutoscalerConfig == nil {
					m.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
			case "horizontalPodAutoscalerConfig.behavior.scaleUp":
				if m.HorizontalPodAutoscalerConfig == nil {
					m.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.HorizontalPodAutoscalerConfig.Behavior.ScaleUp == nil {
					m.HorizontalPodAutoscalerConfig.Behavior.ScaleUp = &HPAScalingRules{}
				}
			case "horizontalPodAutoscalerConfig.behavior.scaleUp.stabilizationWindowSeconds":
				if m.HorizontalPodAutoscalerConfig == nil {
					m.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.HorizontalPodAutoscalerConfig.Behavior.ScaleUp == nil {
					m.HorizontalPodAutoscalerConfig.Behavior.ScaleUp = &HPAScalingRules{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.HorizontalPodAutoscalerConfig.Behavior.ScaleUp.StabilizationWindowSeconds = int32(val)
			case "horizontalPodAutoscalerConfig.behavior.scaleUp.selectPolicy":
				if m.HorizontalPodAutoscalerConfig == nil {
					m.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.HorizontalPodAutoscalerConfig.Behavior.ScaleUp == nil {
					m.HorizontalPodAutoscalerConfig.Behavior.ScaleUp = &HPAScalingRules{}
				}
				m.HorizontalPodAutoscalerConfig.Behavior.ScaleUp.SelectPolicy = vals[0]
			case "horizontalPodAutoscalerConfig.behavior.scaleDown":
				if m.HorizontalPodAutoscalerConfig == nil {
					m.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.HorizontalPodAutoscalerConfig.Behavior.ScaleDown == nil {
					m.HorizontalPodAutoscalerConfig.Behavior.ScaleDown = &HPAScalingRules{}
				}
			case "horizontalPodAutoscalerConfig.behavior.scaleDown.stabilizationWindowSeconds":
				if m.HorizontalPodAutoscalerConfig == nil {
					m.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.HorizontalPodAutoscalerConfig.Behavior.ScaleDown == nil {
					m.HorizontalPodAutoscalerConfig.Behavior.ScaleDown = &HPAScalingRules{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.HorizontalPodAutoscalerConfig.Behavior.ScaleDown.StabilizationWindowSeconds = int32(val)
			case "horizontalPodAutoscalerConfig.behavior.scaleDown.selectPolicy":
				if m.HorizontalPodAutoscalerConfig == nil {
					m.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.HorizontalPodAutoscalerConfig.Behavior.ScaleDown == nil {
					m.HorizontalPodAutoscalerConfig.Behavior.ScaleDown = &HPAScalingRules{}
				}
				m.HorizontalPodAutoscalerConfig.Behavior.ScaleDown.SelectPolicy = vals[0]
			}
		}
	}
	return nil
}

// HorizontalPodAutoscalerConfig implement urlenc.URLValuesUnmarshaler.
func (m *HorizontalPodAutoscalerConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "behavior":
				if m.Behavior == nil {
					m.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
			case "behavior.scaleUp":
				if m.Behavior == nil {
					m.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.Behavior.ScaleUp == nil {
					m.Behavior.ScaleUp = &HPAScalingRules{}
				}
			case "behavior.scaleUp.stabilizationWindowSeconds":
				if m.Behavior == nil {
					m.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.Behavior.ScaleUp == nil {
					m.Behavior.ScaleUp = &HPAScalingRules{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Behavior.ScaleUp.StabilizationWindowSeconds = int32(val)
			case "behavior.scaleUp.selectPolicy":
				if m.Behavior == nil {
					m.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.Behavior.ScaleUp == nil {
					m.Behavior.ScaleUp = &HPAScalingRules{}
				}
				m.Behavior.ScaleUp.SelectPolicy = vals[0]
			case "behavior.scaleDown":
				if m.Behavior == nil {
					m.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.Behavior.ScaleDown == nil {
					m.Behavior.ScaleDown = &HPAScalingRules{}
				}
			case "behavior.scaleDown.stabilizationWindowSeconds":
				if m.Behavior == nil {
					m.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.Behavior.ScaleDown == nil {
					m.Behavior.ScaleDown = &HPAScalingRules{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Behavior.ScaleDown.StabilizationWindowSeconds = int32(val)
			case "behavior.scaleDown.selectPolicy":
				if m.Behavior == nil {
					m.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.Behavior.ScaleDown == nil {
					m.Behavior.ScaleDown = &HPAScalingRules{}
				}
				m.Behavior.ScaleDown.SelectPolicy = vals[0]
			}
		}
	}
	return nil
}

// HorizontalPodAutoscalerBehavior implement urlenc.URLValuesUnmarshaler.
func (m *HorizontalPodAutoscalerBehavior) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scaleUp":
				if m.ScaleUp == nil {
					m.ScaleUp = &HPAScalingRules{}
				}
			case "scaleUp.stabilizationWindowSeconds":
				if m.ScaleUp == nil {
					m.ScaleUp = &HPAScalingRules{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaleUp.StabilizationWindowSeconds = int32(val)
			case "scaleUp.selectPolicy":
				if m.ScaleUp == nil {
					m.ScaleUp = &HPAScalingRules{}
				}
				m.ScaleUp.SelectPolicy = vals[0]
			case "scaleDown":
				if m.ScaleDown == nil {
					m.ScaleDown = &HPAScalingRules{}
				}
			case "scaleDown.stabilizationWindowSeconds":
				if m.ScaleDown == nil {
					m.ScaleDown = &HPAScalingRules{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaleDown.StabilizationWindowSeconds = int32(val)
			case "scaleDown.selectPolicy":
				if m.ScaleDown == nil {
					m.ScaleDown = &HPAScalingRules{}
				}
				m.ScaleDown.SelectPolicy = vals[0]
			}
		}
	}
	return nil
}

// HPAScalingRules implement urlenc.URLValuesUnmarshaler.
func (m *HPAScalingRules) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "stabilizationWindowSeconds":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.StabilizationWindowSeconds = int32(val)
			case "selectPolicy":
				m.SelectPolicy = vals[0]
			}
		}
	}
	return nil
}

// HPAScalingPolicy implement urlenc.URLValuesUnmarshaler.
func (m *HPAScalingPolicy) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "type":
				m.Type = vals[0]
			case "value":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Value = int32(val)
			case "periodSeconds":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PeriodSeconds = int32(val)
			}
		}
	}
	return nil
}

// FallBack implement urlenc.URLValuesUnmarshaler.
func (m *FallBack) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "failureThreshold":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.FailureThreshold = int32(val)
			case "replicas":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Replicas = int32(val)
			}
		}
	}
	return nil
}

// ScaledObjectAuthRef implement urlenc.URLValuesUnmarshaler.
func (m *ScaledObjectAuthRef) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "kind":
				m.Kind = vals[0]
			}
		}
	}
	return nil
}

// ScaleTriggers implement urlenc.URLValuesUnmarshaler.
func (m *ScaleTriggers) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "type":
				m.Type = vals[0]
			case "name":
				m.Name = vals[0]
			case "authenticationRef":
				if m.AuthenticationRef == nil {
					m.AuthenticationRef = &ScaledObjectAuthRef{}
				}
			case "authenticationRef.name":
				if m.AuthenticationRef == nil {
					m.AuthenticationRef = &ScaledObjectAuthRef{}
				}
				m.AuthenticationRef.Name = vals[0]
			case "authenticationRef.kind":
				if m.AuthenticationRef == nil {
					m.AuthenticationRef = &ScaledObjectAuthRef{}
				}
				m.AuthenticationRef.Kind = vals[0]
			case "metricType":
				m.MetricType = vals[0]
			}
		}
	}
	return nil
}

// ScaledConfig implement urlenc.URLValuesUnmarshaler.
func (m *ScaledConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ruleName":
				m.RuleName = vals[0]
			case "ruleID":
				m.RuleID = vals[0]
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			case "applicationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationID = val
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "serviceName":
				m.ServiceName = vals[0]
			case "ruleNameSpace":
				m.RuleNameSpace = vals[0]
			case "scaleTargetRef":
				if m.ScaleTargetRef == nil {
					m.ScaleTargetRef = &ScaleTargetRef{}
				}
			case "scaleTargetRef.apiVersion":
				if m.ScaleTargetRef == nil {
					m.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaleTargetRef.ApiVersion = vals[0]
			case "scaleTargetRef.kind":
				if m.ScaleTargetRef == nil {
					m.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaleTargetRef.Kind = vals[0]
			case "scaleTargetRef.name":
				if m.ScaleTargetRef == nil {
					m.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaleTargetRef.Name = vals[0]
			case "scaleTargetRef.envSourceContainerName":
				if m.ScaleTargetRef == nil {
					m.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaleTargetRef.EnvSourceContainerName = vals[0]
			case "pollingInterval":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.PollingInterval = int32(val)
			case "cooldownPeriod":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CooldownPeriod = int32(val)
			case "minReplicaCount":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.MinReplicaCount = int32(val)
			case "maxReplicaCount":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.MaxReplicaCount = int32(val)
			case "advanced":
				if m.Advanced == nil {
					m.Advanced = &HPAAdvanced{}
				}
			case "advanced.restoreToOriginalReplicaCount":
				if m.Advanced == nil {
					m.Advanced = &HPAAdvanced{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Advanced.RestoreToOriginalReplicaCount = val
			case "advanced.horizontalPodAutoscalerConfig":
				if m.Advanced == nil {
					m.Advanced = &HPAAdvanced{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
			case "advanced.horizontalPodAutoscalerConfig.behavior":
				if m.Advanced == nil {
					m.Advanced = &HPAAdvanced{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
			case "advanced.horizontalPodAutoscalerConfig.behavior.scaleUp":
				if m.Advanced == nil {
					m.Advanced = &HPAAdvanced{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp == nil {
					m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp = &HPAScalingRules{}
				}
			case "advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.stabilizationWindowSeconds":
				if m.Advanced == nil {
					m.Advanced = &HPAAdvanced{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp == nil {
					m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp = &HPAScalingRules{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp.StabilizationWindowSeconds = int32(val)
			case "advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.selectPolicy":
				if m.Advanced == nil {
					m.Advanced = &HPAAdvanced{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp == nil {
					m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp = &HPAScalingRules{}
				}
				m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp.SelectPolicy = vals[0]
			case "advanced.horizontalPodAutoscalerConfig.behavior.scaleDown":
				if m.Advanced == nil {
					m.Advanced = &HPAAdvanced{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown == nil {
					m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown = &HPAScalingRules{}
				}
			case "advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.stabilizationWindowSeconds":
				if m.Advanced == nil {
					m.Advanced = &HPAAdvanced{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown == nil {
					m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown = &HPAScalingRules{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown.StabilizationWindowSeconds = int32(val)
			case "advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.selectPolicy":
				if m.Advanced == nil {
					m.Advanced = &HPAAdvanced{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown == nil {
					m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown = &HPAScalingRules{}
				}
				m.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown.SelectPolicy = vals[0]
			case "fallback":
				if m.Fallback == nil {
					m.Fallback = &FallBack{}
				}
			case "fallback.failureThreshold":
				if m.Fallback == nil {
					m.Fallback = &FallBack{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Fallback.FailureThreshold = int32(val)
			case "fallback.replicas":
				if m.Fallback == nil {
					m.Fallback = &FallBack{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Fallback.Replicas = int32(val)
			}
		}
	}
	return nil
}

// RuntimeServiceHPAConfig implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeServiceHPAConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "status":
				m.Status = vals[0]
			case "type":
				m.Type = vals[0]
			case "serviceName":
				m.ServiceName = vals[0]
			case "ruleName":
				m.RuleName = vals[0]
			case "deployments":
				if m.Deployments == nil {
					m.Deployments = &Deployments{}
				}
			case "deployments.replicas":
				if m.Deployments == nil {
					m.Deployments = &Deployments{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Deployments.Replicas = val
			case "resources":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
			case "resources.cpu":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Resources.Cpu = val
			case "resources.mem":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Resources.Mem = val
			case "resources.disk":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Resources.Disk = val
			case "scaledConfig":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
			case "scaledConfig.ruleName":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				m.ScaledConfig.RuleName = vals[0]
			case "scaledConfig.ruleID":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				m.ScaledConfig.RuleID = vals[0]
			case "scaledConfig.runtimeID":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ScaledConfig.RuntimeID = val
			case "scaledConfig.applicationID":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ScaledConfig.ApplicationID = val
			case "scaledConfig.orgID":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ScaledConfig.OrgID = val
			case "scaledConfig.serviceName":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				m.ScaledConfig.ServiceName = vals[0]
			case "scaledConfig.ruleNameSpace":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				m.ScaledConfig.RuleNameSpace = vals[0]
			case "scaledConfig.scaleTargetRef":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.ScaleTargetRef == nil {
					m.ScaledConfig.ScaleTargetRef = &ScaleTargetRef{}
				}
			case "scaledConfig.scaleTargetRef.apiVersion":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.ScaleTargetRef == nil {
					m.ScaledConfig.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaledConfig.ScaleTargetRef.ApiVersion = vals[0]
			case "scaledConfig.scaleTargetRef.kind":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.ScaleTargetRef == nil {
					m.ScaledConfig.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaledConfig.ScaleTargetRef.Kind = vals[0]
			case "scaledConfig.scaleTargetRef.name":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.ScaleTargetRef == nil {
					m.ScaledConfig.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaledConfig.ScaleTargetRef.Name = vals[0]
			case "scaledConfig.scaleTargetRef.envSourceContainerName":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.ScaleTargetRef == nil {
					m.ScaledConfig.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaledConfig.ScaleTargetRef.EnvSourceContainerName = vals[0]
			case "scaledConfig.pollingInterval":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.PollingInterval = int32(val)
			case "scaledConfig.cooldownPeriod":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.CooldownPeriod = int32(val)
			case "scaledConfig.minReplicaCount":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.MinReplicaCount = int32(val)
			case "scaledConfig.maxReplicaCount":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.MaxReplicaCount = int32(val)
			case "scaledConfig.advanced":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
			case "scaledConfig.advanced.restoreToOriginalReplicaCount":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.ScaledConfig.Advanced.RestoreToOriginalReplicaCount = val
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp = &HPAScalingRules{}
				}
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.stabilizationWindowSeconds":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp = &HPAScalingRules{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp.StabilizationWindowSeconds = int32(val)
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.selectPolicy":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp = &HPAScalingRules{}
				}
				m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp.SelectPolicy = vals[0]
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown = &HPAScalingRules{}
				}
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.stabilizationWindowSeconds":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown = &HPAScalingRules{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown.StabilizationWindowSeconds = int32(val)
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.selectPolicy":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown = &HPAScalingRules{}
				}
				m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown.SelectPolicy = vals[0]
			case "scaledConfig.fallback":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Fallback == nil {
					m.ScaledConfig.Fallback = &FallBack{}
				}
			case "scaledConfig.fallback.failureThreshold":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Fallback == nil {
					m.ScaledConfig.Fallback = &FallBack{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.Fallback.FailureThreshold = int32(val)
			case "scaledConfig.fallback.replicas":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Fallback == nil {
					m.ScaledConfig.Fallback = &FallBack{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.Fallback.Replicas = int32(val)
			}
		}
	}
	return nil
}

// ErdaRuntimeHPARules implement urlenc.URLValuesUnmarshaler.
func (m *ErdaRuntimeHPARules) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			}
		}
	}
	return nil
}

// ErdaRuntimeHPARule implement urlenc.URLValuesUnmarshaler.
func (m *ErdaRuntimeHPARule) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ruleID":
				m.RuleID = vals[0]
			case "createAt":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
			case "createAt.seconds":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreateAt.Seconds = val
			case "createAt.nanos":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreateAt.Nanos = int32(val)
			case "updateAt":
				if m.UpdateAt == nil {
					m.UpdateAt = &timestamppb.Timestamp{}
				}
			case "updateAt.seconds":
				if m.UpdateAt == nil {
					m.UpdateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdateAt.Seconds = val
			case "updateAt.nanos":
				if m.UpdateAt == nil {
					m.UpdateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdateAt.Nanos = int32(val)
			case "serviceName":
				m.ServiceName = vals[0]
			case "ruleName":
				m.RuleName = vals[0]
			case "userInfo":
				if m.UserInfo == nil {
					m.UserInfo = &UserInfo{}
				}
			case "userInfo.userID":
				if m.UserInfo == nil {
					m.UserInfo = &UserInfo{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UserInfo.UserID = val
			case "userInfo.userName":
				if m.UserInfo == nil {
					m.UserInfo = &UserInfo{}
				}
				m.UserInfo.UserName = vals[0]
			case "userInfo.userNickName":
				if m.UserInfo == nil {
					m.UserInfo = &UserInfo{}
				}
				m.UserInfo.UserNickName = vals[0]
			case "scaledConfig":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
			case "scaledConfig.ruleName":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				m.ScaledConfig.RuleName = vals[0]
			case "scaledConfig.ruleID":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				m.ScaledConfig.RuleID = vals[0]
			case "scaledConfig.runtimeID":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ScaledConfig.RuntimeID = val
			case "scaledConfig.applicationID":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ScaledConfig.ApplicationID = val
			case "scaledConfig.orgID":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ScaledConfig.OrgID = val
			case "scaledConfig.serviceName":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				m.ScaledConfig.ServiceName = vals[0]
			case "scaledConfig.ruleNameSpace":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				m.ScaledConfig.RuleNameSpace = vals[0]
			case "scaledConfig.scaleTargetRef":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.ScaleTargetRef == nil {
					m.ScaledConfig.ScaleTargetRef = &ScaleTargetRef{}
				}
			case "scaledConfig.scaleTargetRef.apiVersion":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.ScaleTargetRef == nil {
					m.ScaledConfig.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaledConfig.ScaleTargetRef.ApiVersion = vals[0]
			case "scaledConfig.scaleTargetRef.kind":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.ScaleTargetRef == nil {
					m.ScaledConfig.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaledConfig.ScaleTargetRef.Kind = vals[0]
			case "scaledConfig.scaleTargetRef.name":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.ScaleTargetRef == nil {
					m.ScaledConfig.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaledConfig.ScaleTargetRef.Name = vals[0]
			case "scaledConfig.scaleTargetRef.envSourceContainerName":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.ScaleTargetRef == nil {
					m.ScaledConfig.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaledConfig.ScaleTargetRef.EnvSourceContainerName = vals[0]
			case "scaledConfig.pollingInterval":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.PollingInterval = int32(val)
			case "scaledConfig.cooldownPeriod":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.CooldownPeriod = int32(val)
			case "scaledConfig.minReplicaCount":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.MinReplicaCount = int32(val)
			case "scaledConfig.maxReplicaCount":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.MaxReplicaCount = int32(val)
			case "scaledConfig.advanced":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
			case "scaledConfig.advanced.restoreToOriginalReplicaCount":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.ScaledConfig.Advanced.RestoreToOriginalReplicaCount = val
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp = &HPAScalingRules{}
				}
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.stabilizationWindowSeconds":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp = &HPAScalingRules{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp.StabilizationWindowSeconds = int32(val)
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior.scaleUp.selectPolicy":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp = &HPAScalingRules{}
				}
				m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleUp.SelectPolicy = vals[0]
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown = &HPAScalingRules{}
				}
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.stabilizationWindowSeconds":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown = &HPAScalingRules{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown.StabilizationWindowSeconds = int32(val)
			case "scaledConfig.advanced.horizontalPodAutoscalerConfig.behavior.scaleDown.selectPolicy":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Advanced == nil {
					m.ScaledConfig.Advanced = &HPAAdvanced{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig = &HorizontalPodAutoscalerConfig{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior = &HorizontalPodAutoscalerBehavior{}
				}
				if m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown == nil {
					m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown = &HPAScalingRules{}
				}
				m.ScaledConfig.Advanced.HorizontalPodAutoscalerConfig.Behavior.ScaleDown.SelectPolicy = vals[0]
			case "scaledConfig.fallback":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Fallback == nil {
					m.ScaledConfig.Fallback = &FallBack{}
				}
			case "scaledConfig.fallback.failureThreshold":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Fallback == nil {
					m.ScaledConfig.Fallback = &FallBack{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.Fallback.FailureThreshold = int32(val)
			case "scaledConfig.fallback.replicas":
				if m.ScaledConfig == nil {
					m.ScaledConfig = &ScaledConfig{}
				}
				if m.ScaledConfig.Fallback == nil {
					m.ScaledConfig.Fallback = &FallBack{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ScaledConfig.Fallback.Replicas = int32(val)
			case "isApplied":
				m.IsApplied = vals[0]
			}
		}
	}
	return nil
}

// UserInfo implement urlenc.URLValuesUnmarshaler.
func (m *UserInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "userID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UserID = val
			case "userName":
				m.UserName = vals[0]
			case "userNickName":
				m.UserNickName = vals[0]
			}
		}
	}
	return nil
}

// RuntimeInfo implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "orgName":
				m.OrgName = vals[0]
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "projectName":
				m.ProjectName = vals[0]
			case "applicationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationID = val
			case "applicationName":
				m.ApplicationName = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			case "runtimeName":
				m.RuntimeName = vals[0]
			case "clusterID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ClusterID = val
			case "clusterName":
				m.ClusterName = vals[0]
			case "clusterType":
				m.ClusterType = vals[0]
			}
		}
	}
	return nil
}

// BatchManualHPRequest implement urlenc.URLValuesUnmarshaler.
func (m *BatchManualHPRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "action":
				m.Action = vals[0]
			case "ids":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.Ids = list
			}
		}
	}
	return nil
}

// RuntimeScaleRecord implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeScaleRecord) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "applicationId":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationId = val
			case "workspace":
				m.Workspace = vals[0]
			case "name":
				m.Name = vals[0]
			case "runtimeId":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeId = val
			case "payload":
				if m.Payload == nil {
					m.Payload = &PreDiceDTO{}
				}
			case "payload.name":
				if m.Payload == nil {
					m.Payload = &PreDiceDTO{}
				}
				m.Payload.Name = vals[0]
			case "errorMsg":
				m.ErrorMsg = vals[0]
			}
		}
	}
	return nil
}

// PreDiceDTO implement urlenc.URLValuesUnmarshaler.
func (m *PreDiceDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			}
		}
	}
	return nil
}

// ManualHPRequest implement urlenc.URLValuesUnmarshaler.
func (m *ManualHPRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "applicationId":
				m.ApplicationId = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			case "runtimeName":
				m.RuntimeName = vals[0]
			case "name":
				m.Name = vals[0]
			}
		}
	}
	return nil
}

// RuntimeInspectServiceDTO implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeInspectServiceDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "status":
				m.Status = vals[0]
			case "autoscalerEnabled":
				m.AutoscalerEnabled = vals[0]
			case "type":
				m.Type = vals[0]
			case "deployments":
				if m.Deployments == nil {
					m.Deployments = &Deployments{}
				}
			case "deployments.replicas":
				if m.Deployments == nil {
					m.Deployments = &Deployments{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Deployments.Replicas = val
			case "resources":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
			case "resources.cpu":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Resources.Cpu = val
			case "resources.mem":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Resources.Mem = val
			case "resources.disk":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Resources.Disk = val
			case "addrs":
				m.Addrs = vals
			case "expose":
				m.Expose = vals
			}
		}
	}
	return nil
}

// HPManualResponse implement urlenc.URLValuesUnmarshaler.
func (m *HPManualResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			}
		}
	}
	return nil
}

// BatchManualResponse implement urlenc.URLValuesUnmarshaler.
func (m *BatchManualResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Total = int32(val)
			case "success":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Success = int32(val)
			case "failed":
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Failed = int32(val)
			case "reDeployedIds":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.ReDeployedIds = list
			case "unReDeployedIds":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.UnReDeployedIds = list
			case "deletedIds":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.DeletedIds = list
			case "unDeletedIds":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.UnDeletedIds = list
			case "successedIds":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.SuccessedIds = list
			case "failedIds":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.FailedIds = list
			case "errMsg":
				m.ErrMsg = vals
			}
		}
	}
	return nil
}

// RuntimeDeployDTO implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeDeployDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineID = val
			case "workspace":
				m.Workspace = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "applicationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationID = val
			case "applicationName":
				m.ApplicationName = vals[0]
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "projectName":
				m.ProjectName = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "orgName":
				m.OrgName = vals[0]
			case "servicesNames":
				m.ServicesNames = vals
			}
		}
	}
	return nil
}

// RuntimeDTO implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "name":
				m.Name = vals[0]
			case "gitBranch":
				m.GitBranch = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "clusterId":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ClusterId = val
			case "status":
				m.Status = vals[0]
			case "applicationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationID = val
			case "applicationName":
				m.ApplicationName = vals[0]
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "projectName":
				m.ProjectName = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			}
		}
	}
	return nil
}

// Resources implement urlenc.URLValuesUnmarshaler.
func (m *Resources) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cpu":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Cpu = val
			case "mem":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Mem = val
			case "disk":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Disk = val
			}
		}
	}
	return nil
}

// Deployments implement urlenc.URLValuesUnmarshaler.
func (m *Deployments) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "replicas":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Replicas = val
			}
		}
	}
	return nil
}

// ErdaRuntimeHPAEvents implement urlenc.URLValuesUnmarshaler.
func (m *ErdaRuntimeHPAEvents) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ErdaRuntimeHPAEvent implement urlenc.URLValuesUnmarshaler.
func (m *ErdaRuntimeHPAEvent) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "serviceName":
				m.ServiceName = vals[0]
			case "ruleId":
				m.RuleId = vals[0]
			case "event":
				if m.Event == nil {
					m.Event = &HPAEventDetail{}
				}
			case "event.createAt":
				if m.Event == nil {
					m.Event = &HPAEventDetail{}
				}
				if m.Event.CreateAt == nil {
					m.Event.CreateAt = &timestamppb.Timestamp{}
				}
			case "event.createAt.seconds":
				if m.Event == nil {
					m.Event = &HPAEventDetail{}
				}
				if m.Event.CreateAt == nil {
					m.Event.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Event.CreateAt.Seconds = val
			case "event.createAt.nanos":
				if m.Event == nil {
					m.Event = &HPAEventDetail{}
				}
				if m.Event.CreateAt == nil {
					m.Event.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.Event.CreateAt.Nanos = int32(val)
			case "event.type":
				if m.Event == nil {
					m.Event = &HPAEventDetail{}
				}
				m.Event.Type = vals[0]
			case "event.reason":
				if m.Event == nil {
					m.Event = &HPAEventDetail{}
				}
				m.Event.Reason = vals[0]
			case "event.eventMessage":
				if m.Event == nil {
					m.Event = &HPAEventDetail{}
				}
				m.Event.EventMessage = vals[0]
			}
		}
	}
	return nil
}

// HPAEventDetail implement urlenc.URLValuesUnmarshaler.
func (m *HPAEventDetail) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "createAt":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
			case "createAt.seconds":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreateAt.Seconds = val
			case "createAt.nanos":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreateAt.Nanos = int32(val)
			case "type":
				m.Type = vals[0]
			case "reason":
				m.Reason = vals[0]
			case "eventMessage":
				m.EventMessage = vals[0]
			}
		}
	}
	return nil
}

// VPARuleCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *VPARuleCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			}
		}
	}
	return nil
}

// RuntimeServiceVPAConfig implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeServiceVPAConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ruleID":
				m.RuleID = vals[0]
			case "ruleName":
				m.RuleName = vals[0]
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			case "applicationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationID = val
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "serviceName":
				m.ServiceName = vals[0]
			case "scaleTargetRef":
				if m.ScaleTargetRef == nil {
					m.ScaleTargetRef = &ScaleTargetRef{}
				}
			case "scaleTargetRef.apiVersion":
				if m.ScaleTargetRef == nil {
					m.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaleTargetRef.ApiVersion = vals[0]
			case "scaleTargetRef.kind":
				if m.ScaleTargetRef == nil {
					m.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaleTargetRef.Kind = vals[0]
			case "scaleTargetRef.name":
				if m.ScaleTargetRef == nil {
					m.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaleTargetRef.Name = vals[0]
			case "scaleTargetRef.envSourceContainerName":
				if m.ScaleTargetRef == nil {
					m.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.ScaleTargetRef.EnvSourceContainerName = vals[0]
			case "ruleNameSpace":
				m.RuleNameSpace = vals[0]
			case "updateMode":
				m.UpdateMode = vals[0]
			case "deployments":
				if m.Deployments == nil {
					m.Deployments = &Deployments{}
				}
			case "deployments.replicas":
				if m.Deployments == nil {
					m.Deployments = &Deployments{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Deployments.Replicas = val
			case "resources":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
			case "resources.cpu":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Resources.Cpu = val
			case "resources.mem":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Resources.Mem = val
			case "resources.disk":
				if m.Resources == nil {
					m.Resources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Resources.Disk = val
			case "maxResources":
				if m.MaxResources == nil {
					m.MaxResources = &Resources{}
				}
			case "maxResources.cpu":
				if m.MaxResources == nil {
					m.MaxResources = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.MaxResources.Cpu = val
			case "maxResources.mem":
				if m.MaxResources == nil {
					m.MaxResources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MaxResources.Mem = val
			case "maxResources.disk":
				if m.MaxResources == nil {
					m.MaxResources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MaxResources.Disk = val
			}
		}
	}
	return nil
}

// ErdaRuntimeVPARules implement urlenc.URLValuesUnmarshaler.
func (m *ErdaRuntimeVPARules) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			}
		}
	}
	return nil
}

// ErdaRuntimeVPARule implement urlenc.URLValuesUnmarshaler.
func (m *ErdaRuntimeVPARule) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "createAt":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
			case "createAt.seconds":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreateAt.Seconds = val
			case "createAt.nanos":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreateAt.Nanos = int32(val)
			case "updateAt":
				if m.UpdateAt == nil {
					m.UpdateAt = &timestamppb.Timestamp{}
				}
			case "updateAt.seconds":
				if m.UpdateAt == nil {
					m.UpdateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdateAt.Seconds = val
			case "updateAt.nanos":
				if m.UpdateAt == nil {
					m.UpdateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdateAt.Nanos = int32(val)
			case "serviceName":
				m.ServiceName = vals[0]
			case "userInfo":
				if m.UserInfo == nil {
					m.UserInfo = &UserInfo{}
				}
			case "userInfo.userID":
				if m.UserInfo == nil {
					m.UserInfo = &UserInfo{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UserInfo.UserID = val
			case "userInfo.userName":
				if m.UserInfo == nil {
					m.UserInfo = &UserInfo{}
				}
				m.UserInfo.UserName = vals[0]
			case "userInfo.userNickName":
				if m.UserInfo == nil {
					m.UserInfo = &UserInfo{}
				}
				m.UserInfo.UserNickName = vals[0]
			case "rule":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
			case "rule.ruleID":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				m.Rule.RuleID = vals[0]
			case "rule.ruleName":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				m.Rule.RuleName = vals[0]
			case "rule.runtimeID":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Rule.RuntimeID = val
			case "rule.applicationID":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Rule.ApplicationID = val
			case "rule.projectID":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Rule.ProjectID = val
			case "rule.orgID":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Rule.OrgID = val
			case "rule.serviceName":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				m.Rule.ServiceName = vals[0]
			case "rule.scaleTargetRef":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.ScaleTargetRef == nil {
					m.Rule.ScaleTargetRef = &ScaleTargetRef{}
				}
			case "rule.scaleTargetRef.apiVersion":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.ScaleTargetRef == nil {
					m.Rule.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.Rule.ScaleTargetRef.ApiVersion = vals[0]
			case "rule.scaleTargetRef.kind":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.ScaleTargetRef == nil {
					m.Rule.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.Rule.ScaleTargetRef.Kind = vals[0]
			case "rule.scaleTargetRef.name":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.ScaleTargetRef == nil {
					m.Rule.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.Rule.ScaleTargetRef.Name = vals[0]
			case "rule.scaleTargetRef.envSourceContainerName":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.ScaleTargetRef == nil {
					m.Rule.ScaleTargetRef = &ScaleTargetRef{}
				}
				m.Rule.ScaleTargetRef.EnvSourceContainerName = vals[0]
			case "rule.ruleNameSpace":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				m.Rule.RuleNameSpace = vals[0]
			case "rule.updateMode":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				m.Rule.UpdateMode = vals[0]
			case "rule.deployments":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.Deployments == nil {
					m.Rule.Deployments = &Deployments{}
				}
			case "rule.deployments.replicas":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.Deployments == nil {
					m.Rule.Deployments = &Deployments{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Rule.Deployments.Replicas = val
			case "rule.resources":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.Resources == nil {
					m.Rule.Resources = &Resources{}
				}
			case "rule.resources.cpu":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.Resources == nil {
					m.Rule.Resources = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Rule.Resources.Cpu = val
			case "rule.resources.mem":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.Resources == nil {
					m.Rule.Resources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Rule.Resources.Mem = val
			case "rule.resources.disk":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.Resources == nil {
					m.Rule.Resources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Rule.Resources.Disk = val
			case "rule.maxResources":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.MaxResources == nil {
					m.Rule.MaxResources = &Resources{}
				}
			case "rule.maxResources.cpu":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.MaxResources == nil {
					m.Rule.MaxResources = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Rule.MaxResources.Cpu = val
			case "rule.maxResources.mem":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.MaxResources == nil {
					m.Rule.MaxResources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Rule.MaxResources.Mem = val
			case "rule.maxResources.disk":
				if m.Rule == nil {
					m.Rule = &RuntimeServiceVPAConfig{}
				}
				if m.Rule.MaxResources == nil {
					m.Rule.MaxResources = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Rule.MaxResources.Disk = val
			case "isApplied":
				m.IsApplied = vals[0]
			}
		}
	}
	return nil
}

// ErdaRuntimeVPARecommendations implement urlenc.URLValuesUnmarshaler.
func (m *ErdaRuntimeVPARecommendations) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			}
		}
	}
	return nil
}

// ErdaServiceRecommendation implement urlenc.URLValuesUnmarshaler.
func (m *ErdaServiceRecommendation) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "createAt":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
			case "createAt.seconds":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreateAt.Seconds = val
			case "createAt.nanos":
				if m.CreateAt == nil {
					m.CreateAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreateAt.Nanos = int32(val)
			case "serviceName":
				m.ServiceName = vals[0]
			case "ruleID":
				m.RuleID = vals[0]
			case "ruleName":
				m.RuleName = vals[0]
			case "containerRecommendation":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
			case "containerRecommendation.containerName":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				m.ContainerRecommendation.ContainerName = vals[0]
			case "containerRecommendation.lowerBound":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.LowerBound == nil {
					m.ContainerRecommendation.LowerBound = &Resources{}
				}
			case "containerRecommendation.lowerBound.cpu":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.LowerBound == nil {
					m.ContainerRecommendation.LowerBound = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.ContainerRecommendation.LowerBound.Cpu = val
			case "containerRecommendation.lowerBound.mem":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.LowerBound == nil {
					m.ContainerRecommendation.LowerBound = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ContainerRecommendation.LowerBound.Mem = val
			case "containerRecommendation.lowerBound.disk":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.LowerBound == nil {
					m.ContainerRecommendation.LowerBound = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ContainerRecommendation.LowerBound.Disk = val
			case "containerRecommendation.upperBound":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.UpperBound == nil {
					m.ContainerRecommendation.UpperBound = &Resources{}
				}
			case "containerRecommendation.upperBound.cpu":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.UpperBound == nil {
					m.ContainerRecommendation.UpperBound = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.ContainerRecommendation.UpperBound.Cpu = val
			case "containerRecommendation.upperBound.mem":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.UpperBound == nil {
					m.ContainerRecommendation.UpperBound = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ContainerRecommendation.UpperBound.Mem = val
			case "containerRecommendation.upperBound.disk":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.UpperBound == nil {
					m.ContainerRecommendation.UpperBound = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ContainerRecommendation.UpperBound.Disk = val
			case "containerRecommendation.target":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.Target == nil {
					m.ContainerRecommendation.Target = &Resources{}
				}
			case "containerRecommendation.target.cpu":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.Target == nil {
					m.ContainerRecommendation.Target = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.ContainerRecommendation.Target.Cpu = val
			case "containerRecommendation.target.mem":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.Target == nil {
					m.ContainerRecommendation.Target = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ContainerRecommendation.Target.Mem = val
			case "containerRecommendation.target.disk":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.Target == nil {
					m.ContainerRecommendation.Target = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ContainerRecommendation.Target.Disk = val
			case "containerRecommendation.uncappedTarget":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.UncappedTarget == nil {
					m.ContainerRecommendation.UncappedTarget = &Resources{}
				}
			case "containerRecommendation.uncappedTarget.cpu":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.UncappedTarget == nil {
					m.ContainerRecommendation.UncappedTarget = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.ContainerRecommendation.UncappedTarget.Cpu = val
			case "containerRecommendation.uncappedTarget.mem":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.UncappedTarget == nil {
					m.ContainerRecommendation.UncappedTarget = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ContainerRecommendation.UncappedTarget.Mem = val
			case "containerRecommendation.uncappedTarget.disk":
				if m.ContainerRecommendation == nil {
					m.ContainerRecommendation = &VPAContainerRecommendation{}
				}
				if m.ContainerRecommendation.UncappedTarget == nil {
					m.ContainerRecommendation.UncappedTarget = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ContainerRecommendation.UncappedTarget.Disk = val
			}
		}
	}
	return nil
}

// VPAContainerRecommendation implement urlenc.URLValuesUnmarshaler.
func (m *VPAContainerRecommendation) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "containerName":
				m.ContainerName = vals[0]
			case "lowerBound":
				if m.LowerBound == nil {
					m.LowerBound = &Resources{}
				}
			case "lowerBound.cpu":
				if m.LowerBound == nil {
					m.LowerBound = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.LowerBound.Cpu = val
			case "lowerBound.mem":
				if m.LowerBound == nil {
					m.LowerBound = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.LowerBound.Mem = val
			case "lowerBound.disk":
				if m.LowerBound == nil {
					m.LowerBound = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.LowerBound.Disk = val
			case "upperBound":
				if m.UpperBound == nil {
					m.UpperBound = &Resources{}
				}
			case "upperBound.cpu":
				if m.UpperBound == nil {
					m.UpperBound = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.UpperBound.Cpu = val
			case "upperBound.mem":
				if m.UpperBound == nil {
					m.UpperBound = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpperBound.Mem = val
			case "upperBound.disk":
				if m.UpperBound == nil {
					m.UpperBound = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpperBound.Disk = val
			case "target":
				if m.Target == nil {
					m.Target = &Resources{}
				}
			case "target.cpu":
				if m.Target == nil {
					m.Target = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Target.Cpu = val
			case "target.mem":
				if m.Target == nil {
					m.Target = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Target.Mem = val
			case "target.disk":
				if m.Target == nil {
					m.Target = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Target.Disk = val
			case "uncappedTarget":
				if m.UncappedTarget == nil {
					m.UncappedTarget = &Resources{}
				}
			case "uncappedTarget.cpu":
				if m.UncappedTarget == nil {
					m.UncappedTarget = &Resources{}
				}
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.UncappedTarget.Cpu = val
			case "uncappedTarget.mem":
				if m.UncappedTarget == nil {
					m.UncappedTarget = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UncappedTarget.Mem = val
			case "uncappedTarget.disk":
				if m.UncappedTarget == nil {
					m.UncappedTarget = &Resources{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UncappedTarget.Disk = val
			}
		}
	}
	return nil
}
