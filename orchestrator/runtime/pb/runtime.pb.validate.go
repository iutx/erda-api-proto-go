// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: runtime.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRuntimeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRuntimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRuntimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRuntimeRequestMultiError, or nil if none found.
func (m *GetRuntimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRuntimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NameOrID

	// no validation rules for AppID

	// no validation rules for Workspace

	if len(errors) > 0 {
		return GetRuntimeRequestMultiError(errors)
	}

	return nil
}

// GetRuntimeRequestMultiError is an error wrapping multiple validation errors
// returned by GetRuntimeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRuntimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRuntimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRuntimeRequestMultiError) AllErrors() []error { return m }

// GetRuntimeRequestValidationError is the validation error returned by
// GetRuntimeRequest.Validate if the designated constraints aren't met.
type GetRuntimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRuntimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRuntimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRuntimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRuntimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRuntimeRequestValidationError) ErrorName() string {
	return "GetRuntimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRuntimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRuntimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRuntimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRuntimeRequestValidationError{}

// Validate checks the field values on Resources with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resources) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resources with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourcesMultiError, or nil
// if none found.
func (m *Resources) ValidateAll() error {
	return m.validate(true)
}

func (m *Resources) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cpu

	// no validation rules for Mem

	// no validation rules for Disk

	if len(errors) > 0 {
		return ResourcesMultiError(errors)
	}

	return nil
}

// ResourcesMultiError is an error wrapping multiple validation errors returned
// by Resources.ValidateAll() if the designated constraints aren't met.
type ResourcesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcesMultiError) AllErrors() []error { return m }

// ResourcesValidationError is the validation error returned by
// Resources.Validate if the designated constraints aren't met.
type ResourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcesValidationError) ErrorName() string { return "ResourcesValidationError" }

// Error satisfies the builtin error interface
func (e ResourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcesValidationError{}

// Validate checks the field values on Deployments with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Deployments) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Deployments with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeploymentsMultiError, or
// nil if none found.
func (m *Deployments) ValidateAll() error {
	return m.validate(true)
}

func (m *Deployments) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Replicas

	if len(errors) > 0 {
		return DeploymentsMultiError(errors)
	}

	return nil
}

// DeploymentsMultiError is an error wrapping multiple validation errors
// returned by Deployments.ValidateAll() if the designated constraints aren't met.
type DeploymentsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentsMultiError) AllErrors() []error { return m }

// DeploymentsValidationError is the validation error returned by
// Deployments.Validate if the designated constraints aren't met.
type DeploymentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentsValidationError) ErrorName() string { return "DeploymentsValidationError" }

// Error satisfies the builtin error interface
func (e DeploymentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentsValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetDeployments()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "Deployments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "Deployments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployments()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "Deployments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Envs

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Type

	// no validation rules for HpaEnabled

	// no validation rules for VpaEnabled

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on StatusMap with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusMap with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusMapMultiError, or nil
// if none found.
func (m *StatusMap) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	// no validation rules for Reason

	if len(errors) > 0 {
		return StatusMapMultiError(errors)
	}

	return nil
}

// StatusMapMultiError is an error wrapping multiple validation errors returned
// by StatusMap.ValidateAll() if the designated constraints aren't met.
type StatusMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusMapMultiError) AllErrors() []error { return m }

// StatusMapValidationError is the validation error returned by
// StatusMap.Validate if the designated constraints aren't met.
type StatusMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusMapValidationError) ErrorName() string { return "StatusMapValidationError" }

// Error satisfies the builtin error interface
func (e StatusMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusMapValidationError{}

// Validate checks the field values on Extra with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Extra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Extra with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ExtraMultiError, or nil if none found.
func (m *Extra) ValidateAll() error {
	return m.validate(true)
}

func (m *Extra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationID

	// no validation rules for BuildID

	// no validation rules for Workspace

	if len(errors) > 0 {
		return ExtraMultiError(errors)
	}

	return nil
}

// ExtraMultiError is an error wrapping multiple validation errors returned by
// Extra.ValidateAll() if the designated constraints aren't met.
type ExtraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtraMultiError) AllErrors() []error { return m }

// ExtraValidationError is the validation error returned by Extra.Validate if
// the designated constraints aren't met.
type ExtraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtraValidationError) ErrorName() string { return "ExtraValidationError" }

// Error satisfies the builtin error interface
func (e ExtraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtraValidationError{}

// Validate checks the field values on ErrorResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorResponseMultiError, or
// nil if none found.
func (m *ErrorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Ctx

	if len(errors) > 0 {
		return ErrorResponseMultiError(errors)
	}

	return nil
}

// ErrorResponseMultiError is an error wrapping multiple validation errors
// returned by ErrorResponse.ValidateAll() if the designated constraints
// aren't met.
type ErrorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorResponseMultiError) AllErrors() []error { return m }

// ErrorResponseValidationError is the validation error returned by
// ErrorResponse.Validate if the designated constraints aren't met.
type ErrorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorResponseValidationError) ErrorName() string { return "ErrorResponseValidationError" }

// Error satisfies the builtin error interface
func (e ErrorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorResponseValidationError{}

// Validate checks the field values on RuntimeInspect with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuntimeInspect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuntimeInspect with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuntimeInspectMultiError,
// or nil if none found.
func (m *RuntimeInspect) ValidateAll() error {
	return m.validate(true)
}

func (m *RuntimeInspect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ServiceGroupName

	// no validation rules for ServiceGroupNamespace

	// no validation rules for Source

	// no validation rules for Status

	// no validation rules for DeployStatus

	// no validation rules for DeleteStatus

	// no validation rules for ReleaseID

	// no validation rules for ClusterID

	// no validation rules for ClusterName

	// no validation rules for ClusterType

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeInspectValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeInspectValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeInspectValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeInspectValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeInspectValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeInspectValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProjectID

	// no validation rules for ApplicationName

	{
		sorted_keys := make([]string, len(m.GetServices()))
		i := 0
		for key := range m.GetServices() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetServices()[key]
			_ = val

			// no validation rules for Services[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RuntimeInspectValidationError{
							field:  fmt.Sprintf("Services[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RuntimeInspectValidationError{
							field:  fmt.Sprintf("Services[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RuntimeInspectValidationError{
						field:  fmt.Sprintf("Services[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetLastMessage()))
		i := 0
		for key := range m.GetLastMessage() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLastMessage()[key]
			_ = val

			// no validation rules for LastMessage[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RuntimeInspectValidationError{
							field:  fmt.Sprintf("LastMessage[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RuntimeInspectValidationError{
							field:  fmt.Sprintf("LastMessage[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RuntimeInspectValidationError{
						field:  fmt.Sprintf("LastMessage[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeInspectValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeInspectValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeInspectValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeInspectValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeInspectValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeInspectValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeInspectValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeInspectValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeInspectValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuntimeInspectValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuntimeInspectValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuntimeInspectValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RuntimeInspectMultiError(errors)
	}

	return nil
}

// RuntimeInspectMultiError is an error wrapping multiple validation errors
// returned by RuntimeInspect.ValidateAll() if the designated constraints
// aren't met.
type RuntimeInspectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeInspectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeInspectMultiError) AllErrors() []error { return m }

// RuntimeInspectValidationError is the validation error returned by
// RuntimeInspect.Validate if the designated constraints aren't met.
type RuntimeInspectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeInspectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeInspectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeInspectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeInspectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeInspectValidationError) ErrorName() string { return "RuntimeInspectValidationError" }

// Error satisfies the builtin error interface
func (e RuntimeInspectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeInspect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeInspectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeInspectValidationError{}

// Validate checks the field values on DelRuntimeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelRuntimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelRuntimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelRuntimeRequestMultiError, or nil if none found.
func (m *DelRuntimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DelRuntimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DelRuntimeRequestMultiError(errors)
	}

	return nil
}

// DelRuntimeRequestMultiError is an error wrapping multiple validation errors
// returned by DelRuntimeRequest.ValidateAll() if the designated constraints
// aren't met.
type DelRuntimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelRuntimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelRuntimeRequestMultiError) AllErrors() []error { return m }

// DelRuntimeRequestValidationError is the validation error returned by
// DelRuntimeRequest.Validate if the designated constraints aren't met.
type DelRuntimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelRuntimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelRuntimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelRuntimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelRuntimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelRuntimeRequestValidationError) ErrorName() string {
	return "DelRuntimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DelRuntimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelRuntimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelRuntimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelRuntimeRequestValidationError{}

// Validate checks the field values on Runtime with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Runtime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Runtime with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RuntimeMultiError, or nil if none found.
func (m *Runtime) ValidateAll() error {
	return m.validate(true)
}

func (m *Runtime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for GitBranch

	// no validation rules for Workspace

	// no validation rules for ClusterName

	// no validation rules for ClusterID

	// no validation rules for Status

	// no validation rules for ApplicationID

	// no validation rules for ApplicationName

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for OrgID

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuntimeValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuntimeValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuntimeValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RuntimeMultiError(errors)
	}

	return nil
}

// RuntimeMultiError is an error wrapping multiple validation errors returned
// by Runtime.ValidateAll() if the designated constraints aren't met.
type RuntimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeMultiError) AllErrors() []error { return m }

// RuntimeValidationError is the validation error returned by Runtime.Validate
// if the designated constraints aren't met.
type RuntimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeValidationError) ErrorName() string { return "RuntimeValidationError" }

// Error satisfies the builtin error interface
func (e RuntimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeValidationError{}

// Validate checks the field values on CheckRuntimeExistReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckRuntimeExistReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRuntimeExistReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckRuntimeExistReqMultiError, or nil if none found.
func (m *CheckRuntimeExistReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRuntimeExistReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CheckRuntimeExistReqMultiError(errors)
	}

	return nil
}

// CheckRuntimeExistReqMultiError is an error wrapping multiple validation
// errors returned by CheckRuntimeExistReq.ValidateAll() if the designated
// constraints aren't met.
type CheckRuntimeExistReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckRuntimeExistReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckRuntimeExistReqMultiError) AllErrors() []error { return m }

// CheckRuntimeExistReqValidationError is the validation error returned by
// CheckRuntimeExistReq.Validate if the designated constraints aren't met.
type CheckRuntimeExistReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRuntimeExistReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRuntimeExistReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRuntimeExistReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRuntimeExistReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRuntimeExistReqValidationError) ErrorName() string {
	return "CheckRuntimeExistReqValidationError"
}

// Error satisfies the builtin error interface
func (e CheckRuntimeExistReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRuntimeExistReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRuntimeExistReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRuntimeExistReqValidationError{}

// Validate checks the field values on CheckRuntimeExistResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckRuntimeExistResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRuntimeExistResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckRuntimeExistRespMultiError, or nil if none found.
func (m *CheckRuntimeExistResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRuntimeExistResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return CheckRuntimeExistRespMultiError(errors)
	}

	return nil
}

// CheckRuntimeExistRespMultiError is an error wrapping multiple validation
// errors returned by CheckRuntimeExistResp.ValidateAll() if the designated
// constraints aren't met.
type CheckRuntimeExistRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckRuntimeExistRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckRuntimeExistRespMultiError) AllErrors() []error { return m }

// CheckRuntimeExistRespValidationError is the validation error returned by
// CheckRuntimeExistResp.Validate if the designated constraints aren't met.
type CheckRuntimeExistRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRuntimeExistRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRuntimeExistRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRuntimeExistRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRuntimeExistRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRuntimeExistRespValidationError) ErrorName() string {
	return "CheckRuntimeExistRespValidationError"
}

// Error satisfies the builtin error interface
func (e CheckRuntimeExistRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRuntimeExistResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRuntimeExistRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRuntimeExistRespValidationError{}
