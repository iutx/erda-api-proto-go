// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: filemanager.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListFilesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFilesRequestMultiError, or nil if none found.
func (m *ListFilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetContainerID()) < 1 {
		err := ListFilesRequestValidationError{
			field:  "ContainerID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHostIP()) < 1 {
		err := ListFilesRequestValidationError{
			field:  "HostIP",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := ListFilesRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Path

	if len(errors) > 0 {
		return ListFilesRequestMultiError(errors)
	}

	return nil
}

// ListFilesRequestMultiError is an error wrapping multiple validation errors
// returned by ListFilesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListFilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFilesRequestMultiError) AllErrors() []error { return m }

// ListFilesRequestValidationError is the validation error returned by
// ListFilesRequest.Validate if the designated constraints aren't met.
type ListFilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFilesRequestValidationError) ErrorName() string { return "ListFilesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListFilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFilesRequestValidationError{}

// Validate checks the field values on ListFilesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFilesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFilesResponseMultiError, or nil if none found.
func (m *ListFilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFilesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFilesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFilesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListFilesResponseMultiError(errors)
	}

	return nil
}

// ListFilesResponseMultiError is an error wrapping multiple validation errors
// returned by ListFilesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListFilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFilesResponseMultiError) AllErrors() []error { return m }

// ListFilesResponseValidationError is the validation error returned by
// ListFilesResponse.Validate if the designated constraints aren't met.
type ListFilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFilesResponseValidationError) ErrorName() string {
	return "ListFilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFilesResponseValidationError{}

// Validate checks the field values on FileDirectory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileDirectory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileDirectory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileDirectoryMultiError, or
// nil if none found.
func (m *FileDirectory) ValidateAll() error {
	return m.validate(true)
}

func (m *FileDirectory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Directory

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileDirectoryValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileDirectoryValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileDirectoryValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FileDirectoryMultiError(errors)
	}

	return nil
}

// FileDirectoryMultiError is an error wrapping multiple validation errors
// returned by FileDirectory.ValidateAll() if the designated constraints
// aren't met.
type FileDirectoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileDirectoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileDirectoryMultiError) AllErrors() []error { return m }

// FileDirectoryValidationError is the validation error returned by
// FileDirectory.Validate if the designated constraints aren't met.
type FileDirectoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileDirectoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileDirectoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileDirectoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileDirectoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileDirectoryValidationError) ErrorName() string { return "FileDirectoryValidationError" }

// Error satisfies the builtin error interface
func (e FileDirectoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileDirectory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileDirectoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileDirectoryValidationError{}

// Validate checks the field values on FileInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileInfoMultiError, or nil
// if none found.
func (m *FileInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FileInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Mode

	// no validation rules for Size

	// no validation rules for HardLinks

	// no validation rules for ModTime

	// no validation rules for User

	// no validation rules for UserGroup

	// no validation rules for IsDir

	if len(errors) > 0 {
		return FileInfoMultiError(errors)
	}

	return nil
}

// FileInfoMultiError is an error wrapping multiple validation errors returned
// by FileInfo.ValidateAll() if the designated constraints aren't met.
type FileInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileInfoMultiError) AllErrors() []error { return m }

// FileInfoValidationError is the validation error returned by
// FileInfo.Validate if the designated constraints aren't met.
type FileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileInfoValidationError) ErrorName() string { return "FileInfoValidationError" }

// Error satisfies the builtin error interface
func (e FileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileInfoValidationError{}

// Validate checks the field values on ReadFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadFileRequestMultiError, or nil if none found.
func (m *ReadFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetContainerID()) < 1 {
		err := ReadFileRequestValidationError{
			field:  "ContainerID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHostIP()) < 1 {
		err := ReadFileRequestValidationError{
			field:  "HostIP",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := ReadFileRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPath()) < 1 {
		err := ReadFileRequestValidationError{
			field:  "Path",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadFileRequestMultiError(errors)
	}

	return nil
}

// ReadFileRequestMultiError is an error wrapping multiple validation errors
// returned by ReadFileRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadFileRequestMultiError) AllErrors() []error { return m }

// ReadFileRequestValidationError is the validation error returned by
// ReadFileRequest.Validate if the designated constraints aren't met.
type ReadFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadFileRequestValidationError) ErrorName() string { return "ReadFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadFileRequestValidationError{}

// Validate checks the field values on ReadFileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadFileResponseMultiError, or nil if none found.
func (m *ReadFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadFileResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadFileResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadFileResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadFileResponseMultiError(errors)
	}

	return nil
}

// ReadFileResponseMultiError is an error wrapping multiple validation errors
// returned by ReadFileResponse.ValidateAll() if the designated constraints
// aren't met.
type ReadFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadFileResponseMultiError) AllErrors() []error { return m }

// ReadFileResponseValidationError is the validation error returned by
// ReadFileResponse.Validate if the designated constraints aren't met.
type ReadFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadFileResponseValidationError) ErrorName() string { return "ReadFileResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReadFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadFileResponseValidationError{}

// Validate checks the field values on FileData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileDataMultiError, or nil
// if none found.
func (m *FileData) ValidateAll() error {
	return m.validate(true)
}

func (m *FileData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Mode

	// no validation rules for Encoding

	// no validation rules for Content

	// no validation rules for Size

	if len(errors) > 0 {
		return FileDataMultiError(errors)
	}

	return nil
}

// FileDataMultiError is an error wrapping multiple validation errors returned
// by FileData.ValidateAll() if the designated constraints aren't met.
type FileDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileDataMultiError) AllErrors() []error { return m }

// FileDataValidationError is the validation error returned by
// FileData.Validate if the designated constraints aren't met.
type FileDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileDataValidationError) ErrorName() string { return "FileDataValidationError" }

// Error satisfies the builtin error interface
func (e FileDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileDataValidationError{}

// Validate checks the field values on WriteFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WriteFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteFileRequestMultiError, or nil if none found.
func (m *WriteFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetContainerID()) < 1 {
		err := WriteFileRequestValidationError{
			field:  "ContainerID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHostIP()) < 1 {
		err := WriteFileRequestValidationError{
			field:  "HostIP",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := WriteFileRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Path

	// no validation rules for Encoding

	// no validation rules for Content

	// no validation rules for Action

	if len(errors) > 0 {
		return WriteFileRequestMultiError(errors)
	}

	return nil
}

// WriteFileRequestMultiError is an error wrapping multiple validation errors
// returned by WriteFileRequest.ValidateAll() if the designated constraints
// aren't met.
type WriteFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteFileRequestMultiError) AllErrors() []error { return m }

// WriteFileRequestValidationError is the validation error returned by
// WriteFileRequest.Validate if the designated constraints aren't met.
type WriteFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteFileRequestValidationError) ErrorName() string { return "WriteFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e WriteFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteFileRequestValidationError{}

// Validate checks the field values on WriteFileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WriteFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteFileResponseMultiError, or nil if none found.
func (m *WriteFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return WriteFileResponseMultiError(errors)
	}

	return nil
}

// WriteFileResponseMultiError is an error wrapping multiple validation errors
// returned by WriteFileResponse.ValidateAll() if the designated constraints
// aren't met.
type WriteFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteFileResponseMultiError) AllErrors() []error { return m }

// WriteFileResponseValidationError is the validation error returned by
// WriteFileResponse.Validate if the designated constraints aren't met.
type WriteFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteFileResponseValidationError) ErrorName() string {
	return "WriteFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WriteFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteFileResponseValidationError{}

// Validate checks the field values on MakeDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MakeDirectoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MakeDirectoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MakeDirectoryRequestMultiError, or nil if none found.
func (m *MakeDirectoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MakeDirectoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetContainerID()) < 1 {
		err := MakeDirectoryRequestValidationError{
			field:  "ContainerID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHostIP()) < 1 {
		err := MakeDirectoryRequestValidationError{
			field:  "HostIP",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := MakeDirectoryRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for All

	// no validation rules for Path

	if len(errors) > 0 {
		return MakeDirectoryRequestMultiError(errors)
	}

	return nil
}

// MakeDirectoryRequestMultiError is an error wrapping multiple validation
// errors returned by MakeDirectoryRequest.ValidateAll() if the designated
// constraints aren't met.
type MakeDirectoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MakeDirectoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MakeDirectoryRequestMultiError) AllErrors() []error { return m }

// MakeDirectoryRequestValidationError is the validation error returned by
// MakeDirectoryRequest.Validate if the designated constraints aren't met.
type MakeDirectoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MakeDirectoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MakeDirectoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MakeDirectoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MakeDirectoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MakeDirectoryRequestValidationError) ErrorName() string {
	return "MakeDirectoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MakeDirectoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMakeDirectoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MakeDirectoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MakeDirectoryRequestValidationError{}

// Validate checks the field values on MakeDirectoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MakeDirectoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MakeDirectoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MakeDirectoryResponseMultiError, or nil if none found.
func (m *MakeDirectoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MakeDirectoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return MakeDirectoryResponseMultiError(errors)
	}

	return nil
}

// MakeDirectoryResponseMultiError is an error wrapping multiple validation
// errors returned by MakeDirectoryResponse.ValidateAll() if the designated
// constraints aren't met.
type MakeDirectoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MakeDirectoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MakeDirectoryResponseMultiError) AllErrors() []error { return m }

// MakeDirectoryResponseValidationError is the validation error returned by
// MakeDirectoryResponse.Validate if the designated constraints aren't met.
type MakeDirectoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MakeDirectoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MakeDirectoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MakeDirectoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MakeDirectoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MakeDirectoryResponseValidationError) ErrorName() string {
	return "MakeDirectoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MakeDirectoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMakeDirectoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MakeDirectoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MakeDirectoryResponseValidationError{}

// Validate checks the field values on MoveFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MoveFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MoveFileRequestMultiError, or nil if none found.
func (m *MoveFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetContainerID()) < 1 {
		err := MoveFileRequestValidationError{
			field:  "ContainerID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHostIP()) < 1 {
		err := MoveFileRequestValidationError{
			field:  "HostIP",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := MoveFileRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Source

	// no validation rules for Destination

	if len(errors) > 0 {
		return MoveFileRequestMultiError(errors)
	}

	return nil
}

// MoveFileRequestMultiError is an error wrapping multiple validation errors
// returned by MoveFileRequest.ValidateAll() if the designated constraints
// aren't met.
type MoveFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveFileRequestMultiError) AllErrors() []error { return m }

// MoveFileRequestValidationError is the validation error returned by
// MoveFileRequest.Validate if the designated constraints aren't met.
type MoveFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveFileRequestValidationError) ErrorName() string { return "MoveFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e MoveFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveFileRequestValidationError{}

// Validate checks the field values on MoveFileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MoveFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MoveFileResponseMultiError, or nil if none found.
func (m *MoveFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return MoveFileResponseMultiError(errors)
	}

	return nil
}

// MoveFileResponseMultiError is an error wrapping multiple validation errors
// returned by MoveFileResponse.ValidateAll() if the designated constraints
// aren't met.
type MoveFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveFileResponseMultiError) AllErrors() []error { return m }

// MoveFileResponseValidationError is the validation error returned by
// MoveFileResponse.Validate if the designated constraints aren't met.
type MoveFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveFileResponseValidationError) ErrorName() string { return "MoveFileResponseValidationError" }

// Error satisfies the builtin error interface
func (e MoveFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveFileResponseValidationError{}

// Validate checks the field values on DeleteFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileRequestMultiError, or nil if none found.
func (m *DeleteFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetContainerID()) < 1 {
		err := DeleteFileRequestValidationError{
			field:  "ContainerID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHostIP()) < 1 {
		err := DeleteFileRequestValidationError{
			field:  "HostIP",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := DeleteFileRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Path

	if len(errors) > 0 {
		return DeleteFileRequestMultiError(errors)
	}

	return nil
}

// DeleteFileRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFileRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileRequestMultiError) AllErrors() []error { return m }

// DeleteFileRequestValidationError is the validation error returned by
// DeleteFileRequest.Validate if the designated constraints aren't met.
type DeleteFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileRequestValidationError) ErrorName() string {
	return "DeleteFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileRequestValidationError{}

// Validate checks the field values on DeleteFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileResponseMultiError, or nil if none found.
func (m *DeleteFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteFileResponseMultiError(errors)
	}

	return nil
}

// DeleteFileResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteFileResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileResponseMultiError) AllErrors() []error { return m }

// DeleteFileResponseValidationError is the validation error returned by
// DeleteFileResponse.Validate if the designated constraints aren't met.
type DeleteFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileResponseValidationError) ErrorName() string {
	return "DeleteFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileResponseValidationError{}
