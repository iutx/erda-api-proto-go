// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: template.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PipelineTemplateCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplateCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineTemplateCreateRequestMultiError, or nil if none found.
func (m *PipelineTemplateCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for LogoUrl

	// no validation rules for Desc

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	// no validation rules for Spec

	// no validation rules for Version

	// no validation rules for Readme

	// no validation rules for DefaultVersion

	if len(errors) > 0 {
		return PipelineTemplateCreateRequestMultiError(errors)
	}

	return nil
}

// PipelineTemplateCreateRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineTemplateCreateRequest.ValidateAll()
// if the designated constraints aren't met.
type PipelineTemplateCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateCreateRequestMultiError) AllErrors() []error { return m }

// PipelineTemplateCreateRequestValidationError is the validation error
// returned by PipelineTemplateCreateRequest.Validate if the designated
// constraints aren't met.
type PipelineTemplateCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateCreateRequestValidationError) ErrorName() string {
	return "PipelineTemplateCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateCreateRequestValidationError{}

// Validate checks the field values on PipelineTemplateCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplateCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineTemplateCreateResponseMultiError, or nil if none found.
func (m *PipelineTemplateCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTemplateCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTemplateCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTemplateCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineTemplateCreateResponseMultiError(errors)
	}

	return nil
}

// PipelineTemplateCreateResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineTemplateCreateResponse.ValidateAll()
// if the designated constraints aren't met.
type PipelineTemplateCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateCreateResponseMultiError) AllErrors() []error { return m }

// PipelineTemplateCreateResponseValidationError is the validation error
// returned by PipelineTemplateCreateResponse.Validate if the designated
// constraints aren't met.
type PipelineTemplateCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateCreateResponseValidationError) ErrorName() string {
	return "PipelineTemplateCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateCreateResponseValidationError{}

// Validate checks the field values on PipelineTemplateApplyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplateApplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateApplyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTemplateApplyRequestMultiError, or nil if none found.
func (m *PipelineTemplateApplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateApplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Spec

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	if len(errors) > 0 {
		return PipelineTemplateApplyRequestMultiError(errors)
	}

	return nil
}

// PipelineTemplateApplyRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineTemplateApplyRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineTemplateApplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateApplyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateApplyRequestMultiError) AllErrors() []error { return m }

// PipelineTemplateApplyRequestValidationError is the validation error returned
// by PipelineTemplateApplyRequest.Validate if the designated constraints
// aren't met.
type PipelineTemplateApplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateApplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateApplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateApplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateApplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateApplyRequestValidationError) ErrorName() string {
	return "PipelineTemplateApplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateApplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateApplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateApplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateApplyRequestValidationError{}

// Validate checks the field values on PipelineTemplateQueryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplateQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateQueryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTemplateQueryRequestMultiError, or nil if none found.
func (m *PipelineTemplateQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Name

	if len(errors) > 0 {
		return PipelineTemplateQueryRequestMultiError(errors)
	}

	return nil
}

// PipelineTemplateQueryRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineTemplateQueryRequest.ValidateAll() if
// the designated constraints aren't met.
type PipelineTemplateQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateQueryRequestMultiError) AllErrors() []error { return m }

// PipelineTemplateQueryRequestValidationError is the validation error returned
// by PipelineTemplateQueryRequest.Validate if the designated constraints
// aren't met.
type PipelineTemplateQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateQueryRequestValidationError) ErrorName() string {
	return "PipelineTemplateQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateQueryRequestValidationError{}

// Validate checks the field values on PipelineTemplateQueryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplateQueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateQueryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineTemplateQueryResponseMultiError, or nil if none found.
func (m *PipelineTemplateQueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateQueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTemplateQueryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTemplateQueryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTemplateQueryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineTemplateQueryResponseMultiError(errors)
	}

	return nil
}

// PipelineTemplateQueryResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineTemplateQueryResponse.ValidateAll()
// if the designated constraints aren't met.
type PipelineTemplateQueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateQueryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateQueryResponseMultiError) AllErrors() []error { return m }

// PipelineTemplateQueryResponseValidationError is the validation error
// returned by PipelineTemplateQueryResponse.Validate if the designated
// constraints aren't met.
type PipelineTemplateQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateQueryResponseValidationError) ErrorName() string {
	return "PipelineTemplateQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateQueryResponseValidationError{}

// Validate checks the field values on PipelineTemplateQueryResponseData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PipelineTemplateQueryResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateQueryResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineTemplateQueryResponseDataMultiError, or nil if none found.
func (m *PipelineTemplateQueryResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateQueryResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineTemplateQueryResponseDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineTemplateQueryResponseDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineTemplateQueryResponseDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return PipelineTemplateQueryResponseDataMultiError(errors)
	}

	return nil
}

// PipelineTemplateQueryResponseDataMultiError is an error wrapping multiple
// validation errors returned by
// PipelineTemplateQueryResponseData.ValidateAll() if the designated
// constraints aren't met.
type PipelineTemplateQueryResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateQueryResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateQueryResponseDataMultiError) AllErrors() []error { return m }

// PipelineTemplateQueryResponseDataValidationError is the validation error
// returned by PipelineTemplateQueryResponseData.Validate if the designated
// constraints aren't met.
type PipelineTemplateQueryResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateQueryResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateQueryResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateQueryResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateQueryResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateQueryResponseDataValidationError) ErrorName() string {
	return "PipelineTemplateQueryResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateQueryResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateQueryResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateQueryResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateQueryResponseDataValidationError{}

// Validate checks the field values on PipelineTemplateVersionGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PipelineTemplateVersionGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateVersionGetRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineTemplateVersionGetRequestMultiError, or nil if none found.
func (m *PipelineTemplateVersionGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateVersionGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	// no validation rules for Name

	// no validation rules for Version

	if len(errors) > 0 {
		return PipelineTemplateVersionGetRequestMultiError(errors)
	}

	return nil
}

// PipelineTemplateVersionGetRequestMultiError is an error wrapping multiple
// validation errors returned by
// PipelineTemplateVersionGetRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineTemplateVersionGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateVersionGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateVersionGetRequestMultiError) AllErrors() []error { return m }

// PipelineTemplateVersionGetRequestValidationError is the validation error
// returned by PipelineTemplateVersionGetRequest.Validate if the designated
// constraints aren't met.
type PipelineTemplateVersionGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateVersionGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateVersionGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateVersionGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateVersionGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateVersionGetRequestValidationError) ErrorName() string {
	return "PipelineTemplateVersionGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateVersionGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateVersionGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateVersionGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateVersionGetRequestValidationError{}

// Validate checks the field values on PipelineTemplateVersionGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PipelineTemplateVersionGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateVersionGetResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineTemplateVersionGetResponseMultiError, or nil if none found.
func (m *PipelineTemplateVersionGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateVersionGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTemplateVersionGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTemplateVersionGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTemplateVersionGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineTemplateVersionGetResponseMultiError(errors)
	}

	return nil
}

// PipelineTemplateVersionGetResponseMultiError is an error wrapping multiple
// validation errors returned by
// PipelineTemplateVersionGetResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineTemplateVersionGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateVersionGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateVersionGetResponseMultiError) AllErrors() []error { return m }

// PipelineTemplateVersionGetResponseValidationError is the validation error
// returned by PipelineTemplateVersionGetResponse.Validate if the designated
// constraints aren't met.
type PipelineTemplateVersionGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateVersionGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateVersionGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateVersionGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateVersionGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateVersionGetResponseValidationError) ErrorName() string {
	return "PipelineTemplateVersionGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateVersionGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateVersionGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateVersionGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateVersionGetResponseValidationError{}

// Validate checks the field values on PipelineTemplateVersionQueryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PipelineTemplateVersionQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateVersionQueryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineTemplateVersionQueryRequestMultiError, or nil if none found.
func (m *PipelineTemplateVersionQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateVersionQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	// no validation rules for Name

	if len(errors) > 0 {
		return PipelineTemplateVersionQueryRequestMultiError(errors)
	}

	return nil
}

// PipelineTemplateVersionQueryRequestMultiError is an error wrapping multiple
// validation errors returned by
// PipelineTemplateVersionQueryRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineTemplateVersionQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateVersionQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateVersionQueryRequestMultiError) AllErrors() []error { return m }

// PipelineTemplateVersionQueryRequestValidationError is the validation error
// returned by PipelineTemplateVersionQueryRequest.Validate if the designated
// constraints aren't met.
type PipelineTemplateVersionQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateVersionQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateVersionQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateVersionQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateVersionQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateVersionQueryRequestValidationError) ErrorName() string {
	return "PipelineTemplateVersionQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateVersionQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateVersionQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateVersionQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateVersionQueryRequestValidationError{}

// Validate checks the field values on PipelineTemplateVersionQueryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PipelineTemplateVersionQueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateVersionQueryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineTemplateVersionQueryResponseMultiError, or nil if none found.
func (m *PipelineTemplateVersionQueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateVersionQueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineTemplateVersionQueryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineTemplateVersionQueryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineTemplateVersionQueryResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineTemplateVersionQueryResponseMultiError(errors)
	}

	return nil
}

// PipelineTemplateVersionQueryResponseMultiError is an error wrapping multiple
// validation errors returned by
// PipelineTemplateVersionQueryResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineTemplateVersionQueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateVersionQueryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateVersionQueryResponseMultiError) AllErrors() []error { return m }

// PipelineTemplateVersionQueryResponseValidationError is the validation error
// returned by PipelineTemplateVersionQueryResponse.Validate if the designated
// constraints aren't met.
type PipelineTemplateVersionQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateVersionQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateVersionQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateVersionQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateVersionQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateVersionQueryResponseValidationError) ErrorName() string {
	return "PipelineTemplateVersionQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateVersionQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateVersionQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateVersionQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateVersionQueryResponseValidationError{}

// Validate checks the field values on PipelineTemplateRenderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplateRenderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateRenderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineTemplateRenderRequestMultiError, or nil if none found.
func (m *PipelineTemplateRenderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateRenderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	// no validation rules for Name

	// no validation rules for Version

	{
		sorted_keys := make([]string, len(m.GetParams()))
		i := 0
		for key := range m.GetParams() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetParams()[key]
			_ = val

			// no validation rules for Params[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PipelineTemplateRenderRequestValidationError{
							field:  fmt.Sprintf("Params[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PipelineTemplateRenderRequestValidationError{
							field:  fmt.Sprintf("Params[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PipelineTemplateRenderRequestValidationError{
						field:  fmt.Sprintf("Params[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Alias

	// no validation rules for TemplateVersion

	if len(errors) > 0 {
		return PipelineTemplateRenderRequestMultiError(errors)
	}

	return nil
}

// PipelineTemplateRenderRequestMultiError is an error wrapping multiple
// validation errors returned by PipelineTemplateRenderRequest.ValidateAll()
// if the designated constraints aren't met.
type PipelineTemplateRenderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateRenderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateRenderRequestMultiError) AllErrors() []error { return m }

// PipelineTemplateRenderRequestValidationError is the validation error
// returned by PipelineTemplateRenderRequest.Validate if the designated
// constraints aren't met.
type PipelineTemplateRenderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateRenderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateRenderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateRenderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateRenderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateRenderRequestValidationError) ErrorName() string {
	return "PipelineTemplateRenderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateRenderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateRenderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateRenderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateRenderRequestValidationError{}

// Validate checks the field values on PipelineTemplateRenderSpecRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PipelineTemplateRenderSpecRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateRenderSpecRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PipelineTemplateRenderSpecRequestMultiError, or nil if none found.
func (m *PipelineTemplateRenderSpecRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateRenderSpecRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTemplateRenderSpecRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTemplateRenderSpecRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTemplateRenderSpecRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Alias

	// no validation rules for TemplateVersion

	{
		sorted_keys := make([]string, len(m.GetParams()))
		i := 0
		for key := range m.GetParams() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetParams()[key]
			_ = val

			// no validation rules for Params[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PipelineTemplateRenderSpecRequestValidationError{
							field:  fmt.Sprintf("Params[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PipelineTemplateRenderSpecRequestValidationError{
							field:  fmt.Sprintf("Params[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PipelineTemplateRenderSpecRequestValidationError{
						field:  fmt.Sprintf("Params[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PipelineTemplateRenderSpecRequestMultiError(errors)
	}

	return nil
}

// PipelineTemplateRenderSpecRequestMultiError is an error wrapping multiple
// validation errors returned by
// PipelineTemplateRenderSpecRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineTemplateRenderSpecRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateRenderSpecRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateRenderSpecRequestMultiError) AllErrors() []error { return m }

// PipelineTemplateRenderSpecRequestValidationError is the validation error
// returned by PipelineTemplateRenderSpecRequest.Validate if the designated
// constraints aren't met.
type PipelineTemplateRenderSpecRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateRenderSpecRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateRenderSpecRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateRenderSpecRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateRenderSpecRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateRenderSpecRequestValidationError) ErrorName() string {
	return "PipelineTemplateRenderSpecRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateRenderSpecRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateRenderSpecRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateRenderSpecRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateRenderSpecRequestValidationError{}

// Validate checks the field values on PipelineTemplateRenderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplateRenderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateRenderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineTemplateRenderResponseMultiError, or nil if none found.
func (m *PipelineTemplateRenderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateRenderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTemplateRenderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTemplateRenderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTemplateRenderResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineTemplateRenderResponseMultiError(errors)
	}

	return nil
}

// PipelineTemplateRenderResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineTemplateRenderResponse.ValidateAll()
// if the designated constraints aren't met.
type PipelineTemplateRenderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateRenderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateRenderResponseMultiError) AllErrors() []error { return m }

// PipelineTemplateRenderResponseValidationError is the validation error
// returned by PipelineTemplateRenderResponse.Validate if the designated
// constraints aren't met.
type PipelineTemplateRenderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateRenderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateRenderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateRenderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateRenderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateRenderResponseValidationError) ErrorName() string {
	return "PipelineTemplateRenderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateRenderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateRenderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateRenderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateRenderResponseValidationError{}

// Validate checks the field values on PipelineTemplateSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplateSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateSearchResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PipelineTemplateSearchResponseMultiError, or nil if none found.
func (m *PipelineTemplateSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PipelineTemplateSearchResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PipelineTemplateSearchResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PipelineTemplateSearchResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PipelineTemplateSearchResponseMultiError(errors)
	}

	return nil
}

// PipelineTemplateSearchResponseMultiError is an error wrapping multiple
// validation errors returned by PipelineTemplateSearchResponse.ValidateAll()
// if the designated constraints aren't met.
type PipelineTemplateSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateSearchResponseMultiError) AllErrors() []error { return m }

// PipelineTemplateSearchResponseValidationError is the validation error
// returned by PipelineTemplateSearchResponse.Validate if the designated
// constraints aren't met.
type PipelineTemplateSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateSearchResponseValidationError) ErrorName() string {
	return "PipelineTemplateSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateSearchResponseValidationError{}

// Validate checks the field values on PipelineTemplateRender with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplateRender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateRender with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTemplateRenderMultiError, or nil if none found.
func (m *PipelineTemplateRender) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateRender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineYaml

	if all {
		switch v := interface{}(m.GetVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTemplateRenderValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTemplateRenderValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTemplateRenderValidationError{
				field:  "Version",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineTemplateRenderValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineTemplateRenderValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineTemplateRenderValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineTemplateRenderMultiError(errors)
	}

	return nil
}

// PipelineTemplateRenderMultiError is an error wrapping multiple validation
// errors returned by PipelineTemplateRender.ValidateAll() if the designated
// constraints aren't met.
type PipelineTemplateRenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateRenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateRenderMultiError) AllErrors() []error { return m }

// PipelineTemplateRenderValidationError is the validation error returned by
// PipelineTemplateRender.Validate if the designated constraints aren't met.
type PipelineTemplateRenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateRenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateRenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateRenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateRenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateRenderValidationError) ErrorName() string {
	return "PipelineTemplateRenderValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateRenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateRender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateRenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateRenderValidationError{}

// Validate checks the field values on SnippetFormatOutputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SnippetFormatOutputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SnippetFormatOutputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SnippetFormatOutputsMultiError, or nil if none found.
func (m *SnippetFormatOutputs) ValidateAll() error {
	return m.validate(true)
}

func (m *SnippetFormatOutputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreOutputName

	// no validation rules for AfterOutputName

	if len(errors) > 0 {
		return SnippetFormatOutputsMultiError(errors)
	}

	return nil
}

// SnippetFormatOutputsMultiError is an error wrapping multiple validation
// errors returned by SnippetFormatOutputs.ValidateAll() if the designated
// constraints aren't met.
type SnippetFormatOutputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnippetFormatOutputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnippetFormatOutputsMultiError) AllErrors() []error { return m }

// SnippetFormatOutputsValidationError is the validation error returned by
// SnippetFormatOutputs.Validate if the designated constraints aren't met.
type SnippetFormatOutputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnippetFormatOutputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnippetFormatOutputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnippetFormatOutputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnippetFormatOutputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnippetFormatOutputsValidationError) ErrorName() string {
	return "SnippetFormatOutputsValidationError"
}

// Error satisfies the builtin error interface
func (e SnippetFormatOutputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnippetFormatOutputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnippetFormatOutputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnippetFormatOutputsValidationError{}

// Validate checks the field values on PipelineTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTemplateMultiError, or nil if none found.
func (m *PipelineTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for LogoUrl

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTemplateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTemplateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTemplateValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTemplateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTemplateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTemplateValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return PipelineTemplateMultiError(errors)
	}

	return nil
}

// PipelineTemplateMultiError is an error wrapping multiple validation errors
// returned by PipelineTemplate.ValidateAll() if the designated constraints
// aren't met.
type PipelineTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateMultiError) AllErrors() []error { return m }

// PipelineTemplateValidationError is the validation error returned by
// PipelineTemplate.Validate if the designated constraints aren't met.
type PipelineTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateValidationError) ErrorName() string { return "PipelineTemplateValidationError" }

// Error satisfies the builtin error interface
func (e PipelineTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateValidationError{}

// Validate checks the field values on PipelineTemplateVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplateVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateVersion with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTemplateVersionMultiError, or nil if none found.
func (m *PipelineTemplateVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TemplateId

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Spec

	// no validation rules for Readme

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTemplateVersionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTemplateVersionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTemplateVersionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineTemplateVersionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineTemplateVersionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineTemplateVersionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineTemplateVersionMultiError(errors)
	}

	return nil
}

// PipelineTemplateVersionMultiError is an error wrapping multiple validation
// errors returned by PipelineTemplateVersion.ValidateAll() if the designated
// constraints aren't met.
type PipelineTemplateVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateVersionMultiError) AllErrors() []error { return m }

// PipelineTemplateVersionValidationError is the validation error returned by
// PipelineTemplateVersion.Validate if the designated constraints aren't met.
type PipelineTemplateVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateVersionValidationError) ErrorName() string {
	return "PipelineTemplateVersionValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateVersionValidationError{}

// Validate checks the field values on PipelineTemplateSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplateSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTemplateSpecMultiError, or nil if none found.
func (m *PipelineTemplateSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Desc

	// no validation rules for LogoUrl

	for idx, item := range m.GetParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineTemplateSpecValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineTemplateSpecValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineTemplateSpecValidationError{
					field:  fmt.Sprintf("Params[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineTemplateSpecValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineTemplateSpecValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineTemplateSpecValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Template

	// no validation rules for DefaultVersion

	if len(errors) > 0 {
		return PipelineTemplateSpecMultiError(errors)
	}

	return nil
}

// PipelineTemplateSpecMultiError is an error wrapping multiple validation
// errors returned by PipelineTemplateSpec.ValidateAll() if the designated
// constraints aren't met.
type PipelineTemplateSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateSpecMultiError) AllErrors() []error { return m }

// PipelineTemplateSpecValidationError is the validation error returned by
// PipelineTemplateSpec.Validate if the designated constraints aren't met.
type PipelineTemplateSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateSpecValidationError) ErrorName() string {
	return "PipelineTemplateSpecValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateSpecValidationError{}

// Validate checks the field values on PipelineTemplateSpecOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTemplateSpecOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTemplateSpecOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTemplateSpecOutputMultiError, or nil if none found.
func (m *PipelineTemplateSpecOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTemplateSpecOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for Ref

	if len(errors) > 0 {
		return PipelineTemplateSpecOutputMultiError(errors)
	}

	return nil
}

// PipelineTemplateSpecOutputMultiError is an error wrapping multiple
// validation errors returned by PipelineTemplateSpecOutput.ValidateAll() if
// the designated constraints aren't met.
type PipelineTemplateSpecOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTemplateSpecOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTemplateSpecOutputMultiError) AllErrors() []error { return m }

// PipelineTemplateSpecOutputValidationError is the validation error returned
// by PipelineTemplateSpecOutput.Validate if the designated constraints aren't met.
type PipelineTemplateSpecOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTemplateSpecOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTemplateSpecOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTemplateSpecOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTemplateSpecOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTemplateSpecOutputValidationError) ErrorName() string {
	return "PipelineTemplateSpecOutputValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTemplateSpecOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTemplateSpecOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTemplateSpecOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTemplateSpecOutputValidationError{}

// Validate checks the field values on QuerySnippetYmlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuerySnippetYmlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySnippetYmlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuerySnippetYmlRequestMultiError, or nil if none found.
func (m *QuerySnippetYmlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySnippetYmlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for Name

	// no validation rules for Labels

	if len(errors) > 0 {
		return QuerySnippetYmlRequestMultiError(errors)
	}

	return nil
}

// QuerySnippetYmlRequestMultiError is an error wrapping multiple validation
// errors returned by QuerySnippetYmlRequest.ValidateAll() if the designated
// constraints aren't met.
type QuerySnippetYmlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySnippetYmlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySnippetYmlRequestMultiError) AllErrors() []error { return m }

// QuerySnippetYmlRequestValidationError is the validation error returned by
// QuerySnippetYmlRequest.Validate if the designated constraints aren't met.
type QuerySnippetYmlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySnippetYmlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySnippetYmlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySnippetYmlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySnippetYmlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySnippetYmlRequestValidationError) ErrorName() string {
	return "QuerySnippetYmlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuerySnippetYmlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySnippetYmlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySnippetYmlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySnippetYmlRequestValidationError{}

// Validate checks the field values on QuerySnippetYmlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuerySnippetYmlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySnippetYmlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuerySnippetYmlResponseMultiError, or nil if none found.
func (m *QuerySnippetYmlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySnippetYmlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return QuerySnippetYmlResponseMultiError(errors)
	}

	return nil
}

// QuerySnippetYmlResponseMultiError is an error wrapping multiple validation
// errors returned by QuerySnippetYmlResponse.ValidateAll() if the designated
// constraints aren't met.
type QuerySnippetYmlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySnippetYmlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySnippetYmlResponseMultiError) AllErrors() []error { return m }

// QuerySnippetYmlResponseValidationError is the validation error returned by
// QuerySnippetYmlResponse.Validate if the designated constraints aren't met.
type QuerySnippetYmlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySnippetYmlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySnippetYmlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySnippetYmlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySnippetYmlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySnippetYmlResponseValidationError) ErrorName() string {
	return "QuerySnippetYmlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QuerySnippetYmlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySnippetYmlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySnippetYmlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySnippetYmlResponseValidationError{}

// Validate checks the field values on PipelineParam with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipelineParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineParam with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineParamMultiError, or
// nil if none found.
func (m *PipelineParam) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Required

	if all {
		switch v := interface{}(m.GetDefault()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineParamValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineParamValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineParamValidationError{
				field:  "Default",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Desc

	// no validation rules for Type

	if len(errors) > 0 {
		return PipelineParamMultiError(errors)
	}

	return nil
}

// PipelineParamMultiError is an error wrapping multiple validation errors
// returned by PipelineParam.ValidateAll() if the designated constraints
// aren't met.
type PipelineParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineParamMultiError) AllErrors() []error { return m }

// PipelineParamValidationError is the validation error returned by
// PipelineParam.Validate if the designated constraints aren't met.
type PipelineParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineParamValidationError) ErrorName() string { return "PipelineParamValidationError" }

// Error satisfies the builtin error interface
func (e PipelineParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineParamValidationError{}

// Validate checks the field values on PipelineOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipelineOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineOutput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineOutputMultiError,
// or nil if none found.
func (m *PipelineOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for Ref

	if len(errors) > 0 {
		return PipelineOutputMultiError(errors)
	}

	return nil
}

// PipelineOutputMultiError is an error wrapping multiple validation errors
// returned by PipelineOutput.ValidateAll() if the designated constraints
// aren't met.
type PipelineOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineOutputMultiError) AllErrors() []error { return m }

// PipelineOutputValidationError is the validation error returned by
// PipelineOutput.Validate if the designated constraints aren't met.
type PipelineOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineOutputValidationError) ErrorName() string { return "PipelineOutputValidationError" }

// Error satisfies the builtin error interface
func (e PipelineOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineOutputValidationError{}
