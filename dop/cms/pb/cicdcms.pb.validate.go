// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cicdcms.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CICDCmsUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CICDCmsUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CICDCmsUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CICDCmsUpdateRequestMultiError, or nil if none found.
func (m *CICDCmsUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CICDCmsUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Batch

	// no validation rules for NamespaceName

	// no validation rules for AppID

	// no validation rules for Encrypt

	for idx, item := range m.GetConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CICDCmsUpdateRequestValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CICDCmsUpdateRequestValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CICDCmsUpdateRequestValidationError{
					field:  fmt.Sprintf("Configs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CICDCmsUpdateRequestMultiError(errors)
	}

	return nil
}

// CICDCmsUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by CICDCmsUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type CICDCmsUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CICDCmsUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CICDCmsUpdateRequestMultiError) AllErrors() []error { return m }

// CICDCmsUpdateRequestValidationError is the validation error returned by
// CICDCmsUpdateRequest.Validate if the designated constraints aren't met.
type CICDCmsUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CICDCmsUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CICDCmsUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CICDCmsUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CICDCmsUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CICDCmsUpdateRequestValidationError) ErrorName() string {
	return "CICDCmsUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CICDCmsUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCICDCmsUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CICDCmsUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CICDCmsUpdateRequestValidationError{}

// Validate checks the field values on CICDCmsUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CICDCmsUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CICDCmsUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CICDCmsUpdateResponseMultiError, or nil if none found.
func (m *CICDCmsUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CICDCmsUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CICDCmsUpdateResponseMultiError(errors)
	}

	return nil
}

// CICDCmsUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by CICDCmsUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type CICDCmsUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CICDCmsUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CICDCmsUpdateResponseMultiError) AllErrors() []error { return m }

// CICDCmsUpdateResponseValidationError is the validation error returned by
// CICDCmsUpdateResponse.Validate if the designated constraints aren't met.
type CICDCmsUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CICDCmsUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CICDCmsUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CICDCmsUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CICDCmsUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CICDCmsUpdateResponseValidationError) ErrorName() string {
	return "CICDCmsUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CICDCmsUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCICDCmsUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CICDCmsUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CICDCmsUpdateResponseValidationError{}

// Validate checks the field values on CICDCmsCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CICDCmsCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CICDCmsCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CICDCmsCreateRequestMultiError, or nil if none found.
func (m *CICDCmsCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CICDCmsCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Batch

	// no validation rules for NamespaceName

	// no validation rules for AppID

	// no validation rules for Encrypt

	for idx, item := range m.GetConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CICDCmsCreateRequestValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CICDCmsCreateRequestValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CICDCmsCreateRequestValidationError{
					field:  fmt.Sprintf("Configs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CICDCmsCreateRequestMultiError(errors)
	}

	return nil
}

// CICDCmsCreateRequestMultiError is an error wrapping multiple validation
// errors returned by CICDCmsCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type CICDCmsCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CICDCmsCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CICDCmsCreateRequestMultiError) AllErrors() []error { return m }

// CICDCmsCreateRequestValidationError is the validation error returned by
// CICDCmsCreateRequest.Validate if the designated constraints aren't met.
type CICDCmsCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CICDCmsCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CICDCmsCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CICDCmsCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CICDCmsCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CICDCmsCreateRequestValidationError) ErrorName() string {
	return "CICDCmsCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CICDCmsCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCICDCmsCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CICDCmsCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CICDCmsCreateRequestValidationError{}

// Validate checks the field values on CICDCmsCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CICDCmsCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CICDCmsCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CICDCmsCreateResponseMultiError, or nil if none found.
func (m *CICDCmsCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CICDCmsCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CICDCmsCreateResponseMultiError(errors)
	}

	return nil
}

// CICDCmsCreateResponseMultiError is an error wrapping multiple validation
// errors returned by CICDCmsCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type CICDCmsCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CICDCmsCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CICDCmsCreateResponseMultiError) AllErrors() []error { return m }

// CICDCmsCreateResponseValidationError is the validation error returned by
// CICDCmsCreateResponse.Validate if the designated constraints aren't met.
type CICDCmsCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CICDCmsCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CICDCmsCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CICDCmsCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CICDCmsCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CICDCmsCreateResponseValidationError) ErrorName() string {
	return "CICDCmsCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CICDCmsCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCICDCmsCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CICDCmsCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CICDCmsCreateResponseValidationError{}

// Validate checks the field values on CICDCmsDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CICDCmsDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CICDCmsDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CICDCmsDeleteRequestMultiError, or nil if none found.
func (m *CICDCmsDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CICDCmsDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for NamespaceName

	// no validation rules for Key

	if len(errors) > 0 {
		return CICDCmsDeleteRequestMultiError(errors)
	}

	return nil
}

// CICDCmsDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by CICDCmsDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type CICDCmsDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CICDCmsDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CICDCmsDeleteRequestMultiError) AllErrors() []error { return m }

// CICDCmsDeleteRequestValidationError is the validation error returned by
// CICDCmsDeleteRequest.Validate if the designated constraints aren't met.
type CICDCmsDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CICDCmsDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CICDCmsDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CICDCmsDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CICDCmsDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CICDCmsDeleteRequestValidationError) ErrorName() string {
	return "CICDCmsDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CICDCmsDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCICDCmsDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CICDCmsDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CICDCmsDeleteRequestValidationError{}

// Validate checks the field values on CICDCmsDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CICDCmsDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CICDCmsDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CICDCmsDeleteResponseMultiError, or nil if none found.
func (m *CICDCmsDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CICDCmsDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CICDCmsDeleteResponseMultiError(errors)
	}

	return nil
}

// CICDCmsDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by CICDCmsDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type CICDCmsDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CICDCmsDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CICDCmsDeleteResponseMultiError) AllErrors() []error { return m }

// CICDCmsDeleteResponseValidationError is the validation error returned by
// CICDCmsDeleteResponse.Validate if the designated constraints aren't met.
type CICDCmsDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CICDCmsDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CICDCmsDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CICDCmsDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CICDCmsDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CICDCmsDeleteResponseValidationError) ErrorName() string {
	return "CICDCmsDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CICDCmsDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCICDCmsDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CICDCmsDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CICDCmsDeleteResponseValidationError{}

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Comment

	// no validation rules for Encrypt

	// no validation rules for Key

	// no validation rules for Type

	// no validation rules for Value

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}
