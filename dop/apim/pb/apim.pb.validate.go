// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: apim.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateExportRecordsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateExportRecordsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExportRecordsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExportRecordsReqMultiError, or nil if none found.
func (m *CreateExportRecordsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExportRecordsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VersionID

	// no validation rules for SpecProtocol

	if len(errors) > 0 {
		return CreateExportRecordsReqMultiError(errors)
	}

	return nil
}

// CreateExportRecordsReqMultiError is an error wrapping multiple validation
// errors returned by CreateExportRecordsReq.ValidateAll() if the designated
// constraints aren't met.
type CreateExportRecordsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExportRecordsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExportRecordsReqMultiError) AllErrors() []error { return m }

// CreateExportRecordsReqValidationError is the validation error returned by
// CreateExportRecordsReq.Validate if the designated constraints aren't met.
type CreateExportRecordsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExportRecordsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExportRecordsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExportRecordsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExportRecordsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExportRecordsReqValidationError) ErrorName() string {
	return "CreateExportRecordsReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExportRecordsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExportRecordsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExportRecordsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExportRecordsReqValidationError{}

// Validate checks the field values on CreateExportRecordsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateExportRecordsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExportRecordsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExportRecordsRespMultiError, or nil if none found.
func (m *CreateExportRecordsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExportRecordsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateExportRecordsRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateExportRecordsRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateExportRecordsRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateExportRecordsRespMultiError(errors)
	}

	return nil
}

// CreateExportRecordsRespMultiError is an error wrapping multiple validation
// errors returned by CreateExportRecordsResp.ValidateAll() if the designated
// constraints aren't met.
type CreateExportRecordsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExportRecordsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExportRecordsRespMultiError) AllErrors() []error { return m }

// CreateExportRecordsRespValidationError is the validation error returned by
// CreateExportRecordsResp.Validate if the designated constraints aren't met.
type CreateExportRecordsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExportRecordsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExportRecordsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExportRecordsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExportRecordsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExportRecordsRespValidationError) ErrorName() string {
	return "CreateExportRecordsRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExportRecordsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExportRecordsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExportRecordsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExportRecordsRespValidationError{}

// Validate checks the field values on ExportRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExportRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExportRecordMultiError, or
// nil if none found.
func (m *ExportRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportRecordValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportRecordValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportRecordValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportRecordValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportRecordValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportRecordValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrgID

	// no validation rules for OrgName

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportRecordValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportRecordValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportRecordValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatorID

	// no validation rules for UpdaterID

	// no validation rules for AssetID

	// no validation rules for AssetName

	// no validation rules for VersionID

	// no validation rules for SwaggerVersion

	// no validation rules for Major

	// no validation rules for Minor

	// no validation rules for Patch

	// no validation rules for SpecProtocol

	// no validation rules for Valid

	if len(errors) > 0 {
		return ExportRecordMultiError(errors)
	}

	return nil
}

// ExportRecordMultiError is an error wrapping multiple validation errors
// returned by ExportRecord.ValidateAll() if the designated constraints aren't met.
type ExportRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportRecordMultiError) AllErrors() []error { return m }

// ExportRecordValidationError is the validation error returned by
// ExportRecord.Validate if the designated constraints aren't met.
type ExportRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportRecordValidationError) ErrorName() string { return "ExportRecordValidationError" }

// Error satisfies the builtin error interface
func (e ExportRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportRecordValidationError{}

// Validate checks the field values on ListExportRecordsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListExportRecordsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListExportRecordsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListExportRecordsReqMultiError, or nil if none found.
func (m *ListExportRecordsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListExportRecordsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for OrderBy

	if len(errors) > 0 {
		return ListExportRecordsReqMultiError(errors)
	}

	return nil
}

// ListExportRecordsReqMultiError is an error wrapping multiple validation
// errors returned by ListExportRecordsReq.ValidateAll() if the designated
// constraints aren't met.
type ListExportRecordsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListExportRecordsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListExportRecordsReqMultiError) AllErrors() []error { return m }

// ListExportRecordsReqValidationError is the validation error returned by
// ListExportRecordsReq.Validate if the designated constraints aren't met.
type ListExportRecordsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExportRecordsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExportRecordsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExportRecordsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExportRecordsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExportRecordsReqValidationError) ErrorName() string {
	return "ListExportRecordsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListExportRecordsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExportRecordsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExportRecordsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExportRecordsReqValidationError{}

// Validate checks the field values on ListExportRecordsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListExportRecordsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListExportRecordsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListExportRecordsRespMultiError, or nil if none found.
func (m *ListExportRecordsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListExportRecordsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListExportRecordsRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListExportRecordsRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListExportRecordsRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListExportRecordsRespMultiError(errors)
	}

	return nil
}

// ListExportRecordsRespMultiError is an error wrapping multiple validation
// errors returned by ListExportRecordsResp.ValidateAll() if the designated
// constraints aren't met.
type ListExportRecordsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListExportRecordsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListExportRecordsRespMultiError) AllErrors() []error { return m }

// ListExportRecordsRespValidationError is the validation error returned by
// ListExportRecordsResp.Validate if the designated constraints aren't met.
type ListExportRecordsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExportRecordsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExportRecordsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExportRecordsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExportRecordsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExportRecordsRespValidationError) ErrorName() string {
	return "ListExportRecordsRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListExportRecordsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExportRecordsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExportRecordsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExportRecordsRespValidationError{}

// Validate checks the field values on ListExportRecordsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListExportRecordsData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListExportRecordsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListExportRecordsDataMultiError, or nil if none found.
func (m *ListExportRecordsData) ValidateAll() error {
	return m.validate(true)
}

func (m *ListExportRecordsData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListExportRecordsDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListExportRecordsDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListExportRecordsDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListExportRecordsDataMultiError(errors)
	}

	return nil
}

// ListExportRecordsDataMultiError is an error wrapping multiple validation
// errors returned by ListExportRecordsData.ValidateAll() if the designated
// constraints aren't met.
type ListExportRecordsDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListExportRecordsDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListExportRecordsDataMultiError) AllErrors() []error { return m }

// ListExportRecordsDataValidationError is the validation error returned by
// ListExportRecordsData.Validate if the designated constraints aren't met.
type ListExportRecordsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExportRecordsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExportRecordsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExportRecordsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExportRecordsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExportRecordsDataValidationError) ErrorName() string {
	return "ListExportRecordsDataValidationError"
}

// Error satisfies the builtin error interface
func (e ListExportRecordsDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExportRecordsData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExportRecordsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExportRecordsDataValidationError{}

// Validate checks the field values on DeleteExportRecordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteExportRecordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteExportRecordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteExportRecordReqMultiError, or nil if none found.
func (m *DeleteExportRecordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteExportRecordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteExportRecordReqMultiError(errors)
	}

	return nil
}

// DeleteExportRecordReqMultiError is an error wrapping multiple validation
// errors returned by DeleteExportRecordReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteExportRecordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteExportRecordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteExportRecordReqMultiError) AllErrors() []error { return m }

// DeleteExportRecordReqValidationError is the validation error returned by
// DeleteExportRecordReq.Validate if the designated constraints aren't met.
type DeleteExportRecordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteExportRecordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteExportRecordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteExportRecordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteExportRecordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteExportRecordReqValidationError) ErrorName() string {
	return "DeleteExportRecordReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteExportRecordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteExportRecordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteExportRecordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteExportRecordReqValidationError{}

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}
