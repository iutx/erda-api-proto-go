// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: rule.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/dop/rule/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// RuleService rule.proto
	RuleService() pb.RuleServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		ruleService: pb.NewRuleServiceClient(cc),
	}
}

type serviceClients struct {
	ruleService pb.RuleServiceClient
}

func (c *serviceClients) RuleService() pb.RuleServiceClient {
	return c.ruleService
}

type ruleServiceWrapper struct {
	client pb.RuleServiceClient
	opts   []grpc1.CallOption
}

func (s *ruleServiceWrapper) Fire(ctx context.Context, req *pb.FireRequest) (*pb.FireResponse, error) {
	return s.client.Fire(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *ruleServiceWrapper) CreateRule(ctx context.Context, req *pb.CreateRuleRequest) (*pb.CreateRuleResponse, error) {
	return s.client.CreateRule(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *ruleServiceWrapper) GetRule(ctx context.Context, req *pb.GetRuleRequest) (*pb.GetRuleResponse, error) {
	return s.client.GetRule(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *ruleServiceWrapper) UpdateRule(ctx context.Context, req *pb.UpdateRuleRequest) (*pb.UpdateRuleResponse, error) {
	return s.client.UpdateRule(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *ruleServiceWrapper) ListRules(ctx context.Context, req *pb.ListRulesRequest) (*pb.ListRulesResponse, error) {
	return s.client.ListRules(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *ruleServiceWrapper) DeleteRule(ctx context.Context, req *pb.DeleteRuleRequest) (*pb.DeleteRuleResponse, error) {
	return s.client.DeleteRule(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *ruleServiceWrapper) ListRuleExecHistory(ctx context.Context, req *pb.ListRuleExecHistoryRequest) (*pb.ListRuleExecHistoryResponse, error) {
	return s.client.ListRuleExecHistory(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
