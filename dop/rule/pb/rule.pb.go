// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: rule.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope     string                     `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID   string                     `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	EventType string                     `protobuf:"bytes,3,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Env       map[string]*structpb.Value `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FireRequest) Reset() {
	*x = FireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireRequest) ProtoMessage() {}

func (x *FireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireRequest.ProtoReflect.Descriptor instead.
func (*FireRequest) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{0}
}

func (x *FireRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *FireRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *FireRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *FireRequest) GetEnv() map[string]*structpb.Value {
	if x != nil {
		return x.Env
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   *string                    `protobuf:"bytes,2,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Env    map[string]*structpb.Value `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Params map[string]*structpb.Value `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Config) GetEnv() map[string]*structpb.Value {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Config) GetParams() map[string]*structpb.Value {
	if x != nil {
		return x.Params
	}
	return nil
}

type FireResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output []bool `protobuf:"varint,1,rep,packed,name=output,proto3" json:"output,omitempty"`
}

func (x *FireResponse) Reset() {
	*x = FireResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FireResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FireResponse) ProtoMessage() {}

func (x *FireResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FireResponse.ProtoReflect.Descriptor instead.
func (*FireResponse) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{2}
}

func (x *FireResponse) GetOutput() []bool {
	if x != nil {
		return x.Output
	}
	return nil
}

type CreateRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope     string        `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID   string        `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	EventType string        `protobuf:"bytes,3,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Code      *string       `protobuf:"bytes,4,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Name      string        `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Params    *ActionParams `protobuf:"bytes,6,opt,name=params,proto3" json:"params,omitempty"`
	Enabled   bool          `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *CreateRuleRequest) Reset() {
	*x = CreateRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRuleRequest) ProtoMessage() {}

func (x *CreateRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateRuleRequest) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRuleRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *CreateRuleRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *CreateRuleRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *CreateRuleRequest) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *CreateRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRuleRequest) GetParams() *ActionParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CreateRuleRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type CreateRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateRuleResponse) Reset() {
	*x = CreateRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRuleResponse) ProtoMessage() {}

func (x *CreateRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateRuleResponse) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{4}
}

type GetRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRuleRequest) Reset() {
	*x = GetRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleRequest) ProtoMessage() {}

func (x *GetRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleRequest.ProtoReflect.Descriptor instead.
func (*GetRuleRequest) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{5}
}

func (x *GetRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *Rule    `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	UserIDs []string `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *GetRuleResponse) Reset() {
	*x = GetRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleResponse) ProtoMessage() {}

func (x *GetRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleResponse.ProtoReflect.Descriptor instead.
func (*GetRuleResponse) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{6}
}

func (x *GetRuleResponse) GetData() *Rule {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetRuleResponse) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Scope     string                 `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID   string                 `protobuf:"bytes,4,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	EventType string                 `protobuf:"bytes,5,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Code      string                 `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Params    *ActionParams          `protobuf:"bytes,7,opt,name=params,proto3" json:"params,omitempty"`
	Enabled   bool                   `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Actor     string                 `protobuf:"bytes,9,opt,name=actor,proto3" json:"actor,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{7}
}

func (x *Rule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rule) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Rule) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *Rule) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *Rule) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Rule) GetParams() *ActionParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Rule) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Rule) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *Rule) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Rule) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ActionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*ActionNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ActionParams) Reset() {
	*x = ActionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionParams) ProtoMessage() {}

func (x *ActionParams) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionParams.ProtoReflect.Descriptor instead.
func (*ActionParams) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{8}
}

func (x *ActionParams) GetNodes() []*ActionNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ActionNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DingTalk *DingTalkConfig `protobuf:"bytes,1,opt,name=dingTalk,proto3" json:"dingTalk,omitempty"`
	Snippet  string          `protobuf:"bytes,2,opt,name=snippet,proto3" json:"snippet,omitempty"`
	Type     string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ActionNode) Reset() {
	*x = ActionNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionNode) ProtoMessage() {}

func (x *ActionNode) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionNode.ProtoReflect.Descriptor instead.
func (*ActionNode) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{9}
}

func (x *ActionNode) GetDingTalk() *DingTalkConfig {
	if x != nil {
		return x.DingTalk
	}
	return nil
}

func (x *ActionNode) GetSnippet() string {
	if x != nil {
		return x.Snippet
	}
	return ""
}

func (x *ActionNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DingTalkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Webhook   string `protobuf:"bytes,1,opt,name=webhook,proto3" json:"webhook,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *DingTalkConfig) Reset() {
	*x = DingTalkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DingTalkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DingTalkConfig) ProtoMessage() {}

func (x *DingTalkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DingTalkConfig.ProtoReflect.Descriptor instead.
func (*DingTalkConfig) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{10}
}

func (x *DingTalkConfig) GetWebhook() string {
	if x != nil {
		return x.Webhook
	}
	return ""
}

func (x *DingTalkConfig) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type UpdateRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Scope     string        `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID   string        `protobuf:"bytes,3,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	Code      string        `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	EventType string        `protobuf:"bytes,5,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Enabled   *bool         `protobuf:"varint,6,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Name      string        `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Params    *ActionParams `protobuf:"bytes,8,opt,name=params,proto3" json:"params,omitempty"`
	Actor     string        `protobuf:"bytes,9,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *UpdateRuleRequest) Reset() {
	*x = UpdateRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRuleRequest) ProtoMessage() {}

func (x *UpdateRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateRuleRequest) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRuleRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UpdateRuleRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *UpdateRuleRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateRuleRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *UpdateRuleRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *UpdateRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRuleRequest) GetParams() *ActionParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *UpdateRuleRequest) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

type UpdateRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRuleResponse) Reset() {
	*x = UpdateRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRuleResponse) ProtoMessage() {}

func (x *UpdateRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRuleResponse.ProtoReflect.Descriptor instead.
func (*UpdateRuleResponse) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{12}
}

type ListRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope     string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID   string `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	EventType string `protobuf:"bytes,3,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Enabled   *bool  `protobuf:"varint,4,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Name      string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Actor     string `protobuf:"bytes,6,opt,name=actor,proto3" json:"actor,omitempty"`
	PageNo    int64  `protobuf:"varint,7,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize  int64  `protobuf:"varint,8,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ListRulesRequest) Reset() {
	*x = ListRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRulesRequest) ProtoMessage() {}

func (x *ListRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRulesRequest.ProtoReflect.Descriptor instead.
func (*ListRulesRequest) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{13}
}

func (x *ListRulesRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ListRulesRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *ListRulesRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *ListRulesRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ListRulesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListRulesRequest) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *ListRulesRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListRulesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *ListRulesResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	UserIDs []string               `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *ListRulesResponse) Reset() {
	*x = ListRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRulesResponse) ProtoMessage() {}

func (x *ListRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRulesResponse.ProtoReflect.Descriptor instead.
func (*ListRulesResponse) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{14}
}

func (x *ListRulesResponse) GetData() *ListRulesResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListRulesResponse) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type ListRulesResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Rule `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListRulesResponseData) Reset() {
	*x = ListRulesResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRulesResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRulesResponseData) ProtoMessage() {}

func (x *ListRulesResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRulesResponseData.ProtoReflect.Descriptor instead.
func (*ListRulesResponseData) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{15}
}

func (x *ListRulesResponseData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListRulesResponseData) GetList() []*Rule {
	if x != nil {
		return x.List
	}
	return nil
}

type DeleteRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRuleRequest) Reset() {
	*x = DeleteRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRuleRequest) ProtoMessage() {}

func (x *DeleteRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteRuleRequest) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRuleResponse) Reset() {
	*x = DeleteRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRuleResponse) ProtoMessage() {}

func (x *DeleteRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteRuleResponse) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{17}
}

type ListRuleExecHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope     string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID   string `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	EventType string `protobuf:"bytes,3,opt,name=eventType,proto3" json:"eventType,omitempty"`
	PageNo    int64  `protobuf:"varint,4,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize  int64  `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	RuleID    string `protobuf:"bytes,6,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
	Succeed   *bool  `protobuf:"varint,7,opt,name=succeed,proto3,oneof" json:"succeed,omitempty"`
}

func (x *ListRuleExecHistoryRequest) Reset() {
	*x = ListRuleExecHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRuleExecHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleExecHistoryRequest) ProtoMessage() {}

func (x *ListRuleExecHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleExecHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListRuleExecHistoryRequest) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{18}
}

func (x *ListRuleExecHistoryRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ListRuleExecHistoryRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *ListRuleExecHistoryRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *ListRuleExecHistoryRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListRuleExecHistoryRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRuleExecHistoryRequest) GetRuleID() string {
	if x != nil {
		return x.RuleID
	}
	return ""
}

func (x *ListRuleExecHistoryRequest) GetSucceed() bool {
	if x != nil && x.Succeed != nil {
		return *x.Succeed
	}
	return false
}

type ListRuleExecHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *ListRuleExecHistoryResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	UserIDs []string                         `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *ListRuleExecHistoryResponse) Reset() {
	*x = ListRuleExecHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRuleExecHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleExecHistoryResponse) ProtoMessage() {}

func (x *ListRuleExecHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleExecHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListRuleExecHistoryResponse) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{19}
}

func (x *ListRuleExecHistoryResponse) GetData() *ListRuleExecHistoryResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListRuleExecHistoryResponse) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type ListRuleExecHistoryResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*RuleExecHistory `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListRuleExecHistoryResponseData) Reset() {
	*x = ListRuleExecHistoryResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRuleExecHistoryResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleExecHistoryResponseData) ProtoMessage() {}

func (x *ListRuleExecHistoryResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleExecHistoryResponseData.ProtoReflect.Descriptor instead.
func (*ListRuleExecHistoryResponseData) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{20}
}

func (x *ListRuleExecHistoryResponseData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListRuleExecHistoryResponseData) GetList() []*RuleExecHistory {
	if x != nil {
		return x.List
	}
	return nil
}

type RuleExecHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Scope        string                 `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID      string                 `protobuf:"bytes,4,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	RuleID       string                 `protobuf:"bytes,5,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
	Code         string                 `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Env          *structpb.Value        `protobuf:"bytes,7,opt,name=env,proto3" json:"env,omitempty"`
	Succeed      bool                   `protobuf:"varint,8,opt,name=succeed,proto3" json:"succeed,omitempty"`
	ActionOutput string                 `protobuf:"bytes,9,opt,name=actionOutput,proto3" json:"actionOutput,omitempty"`
	Actor        string                 `protobuf:"bytes,10,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *RuleExecHistory) Reset() {
	*x = RuleExecHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rule_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleExecHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleExecHistory) ProtoMessage() {}

func (x *RuleExecHistory) ProtoReflect() protoreflect.Message {
	mi := &file_rule_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleExecHistory.ProtoReflect.Descriptor instead.
func (*RuleExecHistory) Descriptor() ([]byte, []int) {
	return file_rule_proto_rawDescGZIP(), []int{21}
}

func (x *RuleExecHistory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RuleExecHistory) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RuleExecHistory) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *RuleExecHistory) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *RuleExecHistory) GetRuleID() string {
	if x != nil {
		return x.RuleID
	}
	return ""
}

func (x *RuleExecHistory) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RuleExecHistory) GetEnv() *structpb.Value {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *RuleExecHistory) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *RuleExecHistory) GetActionOutput() string {
	if x != nil {
		return x.ActionOutput
	}
	return ""
}

func (x *RuleExecHistory) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

var File_rule_proto protoreflect.FileDescriptor

var file_rule_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2,
	0x01, 0x0a, 0x0b, 0x46, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x03,
	0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x1a, 0x4e, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xba, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x4e, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x26, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22,
	0xe5, 0x02, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3f, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x6c, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x48, 0x0a, 0x0e, 0x44, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xe9, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x67, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x56, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72,
	0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x23,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x44, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x22, 0x7b, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x6b, 0x0a, 0x1f, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x0f, 0x52, 0x75, 0x6c, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0xd3, 0x07, 0x0a, 0x0b, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x7e, 0x0a, 0x04, 0x46, 0x69, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72,
	0x75, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x72,
	0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x19, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x12,
	0x76, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x22, 0x0a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x0c, 0x0a, 0x0a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x11, 0x0a,
	0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x80, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x1a, 0x0f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9,
	0x1b, 0x11, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x73, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x0c, 0x0a, 0x0a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x2a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x11, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc5, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72,
	0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x65, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x65, 0x78, 0x65, 0x63,
	0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0xfa, 0x81, 0xf9, 0x1b, 0x26, 0x0a, 0x24, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x65, 0x78, 0x65, 0x63, 0x2d, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x1a, 0x10, 0xc2, 0xc4, 0xcb, 0x1c, 0x0b, 0x22, 0x03, 0x64, 0x6f, 0x70, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x64,
	0x6f, 0x70, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_rule_proto_rawDescOnce sync.Once
	file_rule_proto_rawDescData = file_rule_proto_rawDesc
)

func file_rule_proto_rawDescGZIP() []byte {
	file_rule_proto_rawDescOnce.Do(func() {
		file_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_rule_proto_rawDescData)
	})
	return file_rule_proto_rawDescData
}

var file_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_rule_proto_goTypes = []interface{}{
	(*FireRequest)(nil),                     // 0: erda.dop.rule.FireRequest
	(*Config)(nil),                          // 1: erda.dop.rule.Config
	(*FireResponse)(nil),                    // 2: erda.dop.rule.FireResponse
	(*CreateRuleRequest)(nil),               // 3: erda.dop.rule.CreateRuleRequest
	(*CreateRuleResponse)(nil),              // 4: erda.dop.rule.CreateRuleResponse
	(*GetRuleRequest)(nil),                  // 5: erda.dop.rule.GetRuleRequest
	(*GetRuleResponse)(nil),                 // 6: erda.dop.rule.GetRuleResponse
	(*Rule)(nil),                            // 7: erda.dop.rule.Rule
	(*ActionParams)(nil),                    // 8: erda.dop.rule.ActionParams
	(*ActionNode)(nil),                      // 9: erda.dop.rule.ActionNode
	(*DingTalkConfig)(nil),                  // 10: erda.dop.rule.DingTalkConfig
	(*UpdateRuleRequest)(nil),               // 11: erda.dop.rule.UpdateRuleRequest
	(*UpdateRuleResponse)(nil),              // 12: erda.dop.rule.UpdateRuleResponse
	(*ListRulesRequest)(nil),                // 13: erda.dop.rule.ListRulesRequest
	(*ListRulesResponse)(nil),               // 14: erda.dop.rule.ListRulesResponse
	(*ListRulesResponseData)(nil),           // 15: erda.dop.rule.ListRulesResponseData
	(*DeleteRuleRequest)(nil),               // 16: erda.dop.rule.DeleteRuleRequest
	(*DeleteRuleResponse)(nil),              // 17: erda.dop.rule.DeleteRuleResponse
	(*ListRuleExecHistoryRequest)(nil),      // 18: erda.dop.rule.ListRuleExecHistoryRequest
	(*ListRuleExecHistoryResponse)(nil),     // 19: erda.dop.rule.ListRuleExecHistoryResponse
	(*ListRuleExecHistoryResponseData)(nil), // 20: erda.dop.rule.ListRuleExecHistoryResponseData
	(*RuleExecHistory)(nil),                 // 21: erda.dop.rule.RuleExecHistory
	nil,                                     // 22: erda.dop.rule.FireRequest.EnvEntry
	nil,                                     // 23: erda.dop.rule.Config.EnvEntry
	nil,                                     // 24: erda.dop.rule.Config.ParamsEntry
	(*timestamppb.Timestamp)(nil),           // 25: google.protobuf.Timestamp
	(*structpb.Value)(nil),                  // 26: google.protobuf.Value
}
var file_rule_proto_depIdxs = []int32{
	22, // 0: erda.dop.rule.FireRequest.env:type_name -> erda.dop.rule.FireRequest.EnvEntry
	23, // 1: erda.dop.rule.Config.env:type_name -> erda.dop.rule.Config.EnvEntry
	24, // 2: erda.dop.rule.Config.params:type_name -> erda.dop.rule.Config.ParamsEntry
	8,  // 3: erda.dop.rule.CreateRuleRequest.params:type_name -> erda.dop.rule.ActionParams
	7,  // 4: erda.dop.rule.GetRuleResponse.data:type_name -> erda.dop.rule.Rule
	8,  // 5: erda.dop.rule.Rule.params:type_name -> erda.dop.rule.ActionParams
	25, // 6: erda.dop.rule.Rule.createdAt:type_name -> google.protobuf.Timestamp
	25, // 7: erda.dop.rule.Rule.updatedAt:type_name -> google.protobuf.Timestamp
	9,  // 8: erda.dop.rule.ActionParams.nodes:type_name -> erda.dop.rule.ActionNode
	10, // 9: erda.dop.rule.ActionNode.dingTalk:type_name -> erda.dop.rule.DingTalkConfig
	8,  // 10: erda.dop.rule.UpdateRuleRequest.params:type_name -> erda.dop.rule.ActionParams
	15, // 11: erda.dop.rule.ListRulesResponse.data:type_name -> erda.dop.rule.ListRulesResponseData
	7,  // 12: erda.dop.rule.ListRulesResponseData.list:type_name -> erda.dop.rule.Rule
	20, // 13: erda.dop.rule.ListRuleExecHistoryResponse.data:type_name -> erda.dop.rule.ListRuleExecHistoryResponseData
	21, // 14: erda.dop.rule.ListRuleExecHistoryResponseData.list:type_name -> erda.dop.rule.RuleExecHistory
	25, // 15: erda.dop.rule.RuleExecHistory.createdAt:type_name -> google.protobuf.Timestamp
	26, // 16: erda.dop.rule.RuleExecHistory.env:type_name -> google.protobuf.Value
	26, // 17: erda.dop.rule.FireRequest.EnvEntry.value:type_name -> google.protobuf.Value
	26, // 18: erda.dop.rule.Config.EnvEntry.value:type_name -> google.protobuf.Value
	26, // 19: erda.dop.rule.Config.ParamsEntry.value:type_name -> google.protobuf.Value
	0,  // 20: erda.dop.rule.RuleService.Fire:input_type -> erda.dop.rule.FireRequest
	3,  // 21: erda.dop.rule.RuleService.CreateRule:input_type -> erda.dop.rule.CreateRuleRequest
	5,  // 22: erda.dop.rule.RuleService.GetRule:input_type -> erda.dop.rule.GetRuleRequest
	11, // 23: erda.dop.rule.RuleService.UpdateRule:input_type -> erda.dop.rule.UpdateRuleRequest
	13, // 24: erda.dop.rule.RuleService.ListRules:input_type -> erda.dop.rule.ListRulesRequest
	16, // 25: erda.dop.rule.RuleService.DeleteRule:input_type -> erda.dop.rule.DeleteRuleRequest
	18, // 26: erda.dop.rule.RuleService.ListRuleExecHistory:input_type -> erda.dop.rule.ListRuleExecHistoryRequest
	2,  // 27: erda.dop.rule.RuleService.Fire:output_type -> erda.dop.rule.FireResponse
	4,  // 28: erda.dop.rule.RuleService.CreateRule:output_type -> erda.dop.rule.CreateRuleResponse
	6,  // 29: erda.dop.rule.RuleService.GetRule:output_type -> erda.dop.rule.GetRuleResponse
	12, // 30: erda.dop.rule.RuleService.UpdateRule:output_type -> erda.dop.rule.UpdateRuleResponse
	14, // 31: erda.dop.rule.RuleService.ListRules:output_type -> erda.dop.rule.ListRulesResponse
	17, // 32: erda.dop.rule.RuleService.DeleteRule:output_type -> erda.dop.rule.DeleteRuleResponse
	19, // 33: erda.dop.rule.RuleService.ListRuleExecHistory:output_type -> erda.dop.rule.ListRuleExecHistoryResponse
	27, // [27:34] is the sub-list for method output_type
	20, // [20:27] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_rule_proto_init() }
func file_rule_proto_init() {
	if File_rule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FireResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DingTalkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRulesResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRuleExecHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRuleExecHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRuleExecHistoryResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rule_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleExecHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rule_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_rule_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_rule_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_rule_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_rule_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rule_proto_goTypes,
		DependencyIndexes: file_rule_proto_depIdxs,
		MessageInfos:      file_rule_proto_msgTypes,
	}.Build()
	File_rule_proto = out.File
	file_rule_proto_rawDesc = nil
	file_rule_proto_goTypes = nil
	file_rule_proto_depIdxs = nil
}
