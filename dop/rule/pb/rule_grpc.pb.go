// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: rule.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// RuleServiceClient is the client API for RuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleServiceClient interface {
	Fire(ctx context.Context, in *FireRequest, opts ...grpc.CallOption) (*FireResponse, error)
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error)
	GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*GetRuleResponse, error)
	UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error)
	ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error)
	DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error)
	ListRuleExecHistory(ctx context.Context, in *ListRuleExecHistoryRequest, opts ...grpc.CallOption) (*ListRuleExecHistoryResponse, error)
}

type ruleServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewRuleServiceClient(cc grpc1.ClientConnInterface) RuleServiceClient {
	return &ruleServiceClient{cc}
}

func (c *ruleServiceClient) Fire(ctx context.Context, in *FireRequest, opts ...grpc.CallOption) (*FireResponse, error) {
	out := new(FireResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.rule.RuleService/Fire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error) {
	out := new(CreateRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.rule.RuleService/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*GetRuleResponse, error) {
	out := new(GetRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.rule.RuleService/GetRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error) {
	out := new(UpdateRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.rule.RuleService/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error) {
	out := new(ListRulesResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.rule.RuleService/ListRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error) {
	out := new(DeleteRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.rule.RuleService/DeleteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) ListRuleExecHistory(ctx context.Context, in *ListRuleExecHistoryRequest, opts ...grpc.CallOption) (*ListRuleExecHistoryResponse, error) {
	out := new(ListRuleExecHistoryResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.rule.RuleService/ListRuleExecHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleServiceServer is the server API for RuleService service.
// All implementations should embed UnimplementedRuleServiceServer
// for forward compatibility
type RuleServiceServer interface {
	Fire(context.Context, *FireRequest) (*FireResponse, error)
	CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error)
	GetRule(context.Context, *GetRuleRequest) (*GetRuleResponse, error)
	UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error)
	ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error)
	DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error)
	ListRuleExecHistory(context.Context, *ListRuleExecHistoryRequest) (*ListRuleExecHistoryResponse, error)
}

// UnimplementedRuleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRuleServiceServer struct {
}

func (*UnimplementedRuleServiceServer) Fire(context.Context, *FireRequest) (*FireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fire not implemented")
}
func (*UnimplementedRuleServiceServer) CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (*UnimplementedRuleServiceServer) GetRule(context.Context, *GetRuleRequest) (*GetRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (*UnimplementedRuleServiceServer) UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (*UnimplementedRuleServiceServer) ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}
func (*UnimplementedRuleServiceServer) DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (*UnimplementedRuleServiceServer) ListRuleExecHistory(context.Context, *ListRuleExecHistoryRequest) (*ListRuleExecHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuleExecHistory not implemented")
}

func RegisterRuleServiceServer(s grpc1.ServiceRegistrar, srv RuleServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_RuleService_serviceDesc(srv, opts...), srv)
}

var _RuleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.dop.rule.RuleService",
	HandlerType: (*RuleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "rule.proto",
}

func _get_RuleService_serviceDesc(srv RuleServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_RuleService_Fire_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Fire(ctx, req.(*FireRequest))
	}
	var _RuleService_Fire_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuleService_Fire_info = transport.NewServiceInfo("erda.dop.rule.RuleService", "Fire", srv)
		_RuleService_Fire_Handler = h.Interceptor(_RuleService_Fire_Handler)
	}

	_RuleService_CreateRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateRule(ctx, req.(*CreateRuleRequest))
	}
	var _RuleService_CreateRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuleService_CreateRule_info = transport.NewServiceInfo("erda.dop.rule.RuleService", "CreateRule", srv)
		_RuleService_CreateRule_Handler = h.Interceptor(_RuleService_CreateRule_Handler)
	}

	_RuleService_GetRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetRule(ctx, req.(*GetRuleRequest))
	}
	var _RuleService_GetRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuleService_GetRule_info = transport.NewServiceInfo("erda.dop.rule.RuleService", "GetRule", srv)
		_RuleService_GetRule_Handler = h.Interceptor(_RuleService_GetRule_Handler)
	}

	_RuleService_UpdateRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateRule(ctx, req.(*UpdateRuleRequest))
	}
	var _RuleService_UpdateRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuleService_UpdateRule_info = transport.NewServiceInfo("erda.dop.rule.RuleService", "UpdateRule", srv)
		_RuleService_UpdateRule_Handler = h.Interceptor(_RuleService_UpdateRule_Handler)
	}

	_RuleService_ListRules_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListRules(ctx, req.(*ListRulesRequest))
	}
	var _RuleService_ListRules_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuleService_ListRules_info = transport.NewServiceInfo("erda.dop.rule.RuleService", "ListRules", srv)
		_RuleService_ListRules_Handler = h.Interceptor(_RuleService_ListRules_Handler)
	}

	_RuleService_DeleteRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteRule(ctx, req.(*DeleteRuleRequest))
	}
	var _RuleService_DeleteRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuleService_DeleteRule_info = transport.NewServiceInfo("erda.dop.rule.RuleService", "DeleteRule", srv)
		_RuleService_DeleteRule_Handler = h.Interceptor(_RuleService_DeleteRule_Handler)
	}

	_RuleService_ListRuleExecHistory_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListRuleExecHistory(ctx, req.(*ListRuleExecHistoryRequest))
	}
	var _RuleService_ListRuleExecHistory_info transport.ServiceInfo
	if h.Interceptor != nil {
		_RuleService_ListRuleExecHistory_info = transport.NewServiceInfo("erda.dop.rule.RuleService", "ListRuleExecHistory", srv)
		_RuleService_ListRuleExecHistory_Handler = h.Interceptor(_RuleService_ListRuleExecHistory_Handler)
	}

	var serviceDesc = _RuleService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "Fire",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(FireRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuleServiceServer).Fire(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuleService_Fire_info)
				}
				if interceptor == nil {
					return _RuleService_Fire_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.rule.RuleService/Fire",
				}
				return interceptor(ctx, in, info, _RuleService_Fire_Handler)
			},
		},
		{
			MethodName: "CreateRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuleServiceServer).CreateRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuleService_CreateRule_info)
				}
				if interceptor == nil {
					return _RuleService_CreateRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.rule.RuleService/CreateRule",
				}
				return interceptor(ctx, in, info, _RuleService_CreateRule_Handler)
			},
		},
		{
			MethodName: "GetRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuleServiceServer).GetRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuleService_GetRule_info)
				}
				if interceptor == nil {
					return _RuleService_GetRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.rule.RuleService/GetRule",
				}
				return interceptor(ctx, in, info, _RuleService_GetRule_Handler)
			},
		},
		{
			MethodName: "UpdateRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuleServiceServer).UpdateRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuleService_UpdateRule_info)
				}
				if interceptor == nil {
					return _RuleService_UpdateRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.rule.RuleService/UpdateRule",
				}
				return interceptor(ctx, in, info, _RuleService_UpdateRule_Handler)
			},
		},
		{
			MethodName: "ListRules",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListRulesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuleServiceServer).ListRules(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuleService_ListRules_info)
				}
				if interceptor == nil {
					return _RuleService_ListRules_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.rule.RuleService/ListRules",
				}
				return interceptor(ctx, in, info, _RuleService_ListRules_Handler)
			},
		},
		{
			MethodName: "DeleteRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuleServiceServer).DeleteRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuleService_DeleteRule_info)
				}
				if interceptor == nil {
					return _RuleService_DeleteRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.rule.RuleService/DeleteRule",
				}
				return interceptor(ctx, in, info, _RuleService_DeleteRule_Handler)
			},
		},
		{
			MethodName: "ListRuleExecHistory",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListRuleExecHistoryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(RuleServiceServer).ListRuleExecHistory(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _RuleService_ListRuleExecHistory_info)
				}
				if interceptor == nil {
					return _RuleService_ListRuleExecHistory_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.rule.RuleService/ListRuleExecHistory",
				}
				return interceptor(ctx, in, info, _RuleService_ListRuleExecHistory_Handler)
			},
		},
	}
	return &serviceDesc
}
