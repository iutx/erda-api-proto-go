// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rule.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FireRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FireRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FireRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FireRequestMultiError, or
// nil if none found.
func (m *FireRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FireRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for EventType

	{
		sorted_keys := make([]string, len(m.GetEnv()))
		i := 0
		for key := range m.GetEnv() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEnv()[key]
			_ = val

			// no validation rules for Env[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, FireRequestValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, FireRequestValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return FireRequestValidationError{
						field:  fmt.Sprintf("Env[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return FireRequestMultiError(errors)
	}

	return nil
}

// FireRequestMultiError is an error wrapping multiple validation errors
// returned by FireRequest.ValidateAll() if the designated constraints aren't met.
type FireRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FireRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FireRequestMultiError) AllErrors() []error { return m }

// FireRequestValidationError is the validation error returned by
// FireRequest.Validate if the designated constraints aren't met.
type FireRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FireRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FireRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FireRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FireRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FireRequestValidationError) ErrorName() string { return "FireRequestValidationError" }

// Error satisfies the builtin error interface
func (e FireRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFireRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FireRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FireRequestValidationError{}

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetEnv()))
		i := 0
		for key := range m.GetEnv() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEnv()[key]
			_ = val

			// no validation rules for Env[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ConfigValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ConfigValidationError{
							field:  fmt.Sprintf("Env[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ConfigValidationError{
						field:  fmt.Sprintf("Env[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetParams()))
		i := 0
		for key := range m.GetParams() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetParams()[key]
			_ = val

			// no validation rules for Params[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ConfigValidationError{
							field:  fmt.Sprintf("Params[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ConfigValidationError{
							field:  fmt.Sprintf("Params[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ConfigValidationError{
						field:  fmt.Sprintf("Params[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if m.Code != nil {
		// no validation rules for Code
	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on FireResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FireResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FireResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FireResponseMultiError, or
// nil if none found.
func (m *FireResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FireResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FireResponseMultiError(errors)
	}

	return nil
}

// FireResponseMultiError is an error wrapping multiple validation errors
// returned by FireResponse.ValidateAll() if the designated constraints aren't met.
type FireResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FireResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FireResponseMultiError) AllErrors() []error { return m }

// FireResponseValidationError is the validation error returned by
// FireResponse.Validate if the designated constraints aren't met.
type FireResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FireResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FireResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FireResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FireResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FireResponseValidationError) ErrorName() string { return "FireResponseValidationError" }

// Error satisfies the builtin error interface
func (e FireResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFireResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FireResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FireResponseValidationError{}

// Validate checks the field values on CreateRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRuleRequestMultiError, or nil if none found.
func (m *CreateRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for EventType

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRuleRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRuleRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRuleRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Enabled

	if m.Code != nil {
		// no validation rules for Code
	}

	if len(errors) > 0 {
		return CreateRuleRequestMultiError(errors)
	}

	return nil
}

// CreateRuleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRuleRequestMultiError) AllErrors() []error { return m }

// CreateRuleRequestValidationError is the validation error returned by
// CreateRuleRequest.Validate if the designated constraints aren't met.
type CreateRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRuleRequestValidationError) ErrorName() string {
	return "CreateRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRuleRequestValidationError{}

// Validate checks the field values on CreateRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRuleResponseMultiError, or nil if none found.
func (m *CreateRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRuleResponseMultiError(errors)
	}

	return nil
}

// CreateRuleResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRuleResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRuleResponseMultiError) AllErrors() []error { return m }

// CreateRuleResponseValidationError is the validation error returned by
// CreateRuleResponse.Validate if the designated constraints aren't met.
type CreateRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRuleResponseValidationError) ErrorName() string {
	return "CreateRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRuleResponseValidationError{}

// Validate checks the field values on GetRuleRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRuleRequestMultiError,
// or nil if none found.
func (m *GetRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRuleRequestMultiError(errors)
	}

	return nil
}

// GetRuleRequestMultiError is an error wrapping multiple validation errors
// returned by GetRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRuleRequestMultiError) AllErrors() []error { return m }

// GetRuleRequestValidationError is the validation error returned by
// GetRuleRequest.Validate if the designated constraints aren't met.
type GetRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRuleRequestValidationError) ErrorName() string { return "GetRuleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRuleRequestValidationError{}

// Validate checks the field values on GetRuleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRuleResponseMultiError, or nil if none found.
func (m *GetRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRuleResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRuleResponseMultiError(errors)
	}

	return nil
}

// GetRuleResponseMultiError is an error wrapping multiple validation errors
// returned by GetRuleResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRuleResponseMultiError) AllErrors() []error { return m }

// GetRuleResponseValidationError is the validation error returned by
// GetRuleResponse.Validate if the designated constraints aren't met.
type GetRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRuleResponseValidationError) ErrorName() string { return "GetRuleResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRuleResponseValidationError{}

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Rule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rule with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RuleMultiError, or nil if none found.
func (m *Rule) ValidateAll() error {
	return m.validate(true)
}

func (m *Rule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for EventType

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Enabled

	// no validation rules for Actor

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RuleMultiError(errors)
	}

	return nil
}

// RuleMultiError is an error wrapping multiple validation errors returned by
// Rule.ValidateAll() if the designated constraints aren't met.
type RuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleMultiError) AllErrors() []error { return m }

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

// Validate checks the field values on ActionParams with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActionParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActionParamsMultiError, or
// nil if none found.
func (m *ActionParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionParamsValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionParamsValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionParamsValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ActionParamsMultiError(errors)
	}

	return nil
}

// ActionParamsMultiError is an error wrapping multiple validation errors
// returned by ActionParams.ValidateAll() if the designated constraints aren't met.
type ActionParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionParamsMultiError) AllErrors() []error { return m }

// ActionParamsValidationError is the validation error returned by
// ActionParams.Validate if the designated constraints aren't met.
type ActionParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionParamsValidationError) ErrorName() string { return "ActionParamsValidationError" }

// Error satisfies the builtin error interface
func (e ActionParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionParamsValidationError{}

// Validate checks the field values on ActionNode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActionNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionNode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActionNodeMultiError, or
// nil if none found.
func (m *ActionNode) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDingTalk()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActionNodeValidationError{
					field:  "DingTalk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActionNodeValidationError{
					field:  "DingTalk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDingTalk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActionNodeValidationError{
				field:  "DingTalk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Snippet

	// no validation rules for Type

	if len(errors) > 0 {
		return ActionNodeMultiError(errors)
	}

	return nil
}

// ActionNodeMultiError is an error wrapping multiple validation errors
// returned by ActionNode.ValidateAll() if the designated constraints aren't met.
type ActionNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionNodeMultiError) AllErrors() []error { return m }

// ActionNodeValidationError is the validation error returned by
// ActionNode.Validate if the designated constraints aren't met.
type ActionNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionNodeValidationError) ErrorName() string { return "ActionNodeValidationError" }

// Error satisfies the builtin error interface
func (e ActionNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionNodeValidationError{}

// Validate checks the field values on DingTalkConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DingTalkConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DingTalkConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DingTalkConfigMultiError,
// or nil if none found.
func (m *DingTalkConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *DingTalkConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Webhook

	// no validation rules for Signature

	if len(errors) > 0 {
		return DingTalkConfigMultiError(errors)
	}

	return nil
}

// DingTalkConfigMultiError is an error wrapping multiple validation errors
// returned by DingTalkConfig.ValidateAll() if the designated constraints
// aren't met.
type DingTalkConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DingTalkConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DingTalkConfigMultiError) AllErrors() []error { return m }

// DingTalkConfigValidationError is the validation error returned by
// DingTalkConfig.Validate if the designated constraints aren't met.
type DingTalkConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DingTalkConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DingTalkConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DingTalkConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DingTalkConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DingTalkConfigValidationError) ErrorName() string { return "DingTalkConfigValidationError" }

// Error satisfies the builtin error interface
func (e DingTalkConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDingTalkConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DingTalkConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DingTalkConfigValidationError{}

// Validate checks the field values on UpdateRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRuleRequestMultiError, or nil if none found.
func (m *UpdateRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for Code

	// no validation rules for EventType

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRuleRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRuleRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRuleRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Actor

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return UpdateRuleRequestMultiError(errors)
	}

	return nil
}

// UpdateRuleRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRuleRequestMultiError) AllErrors() []error { return m }

// UpdateRuleRequestValidationError is the validation error returned by
// UpdateRuleRequest.Validate if the designated constraints aren't met.
type UpdateRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleRequestValidationError) ErrorName() string {
	return "UpdateRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleRequestValidationError{}

// Validate checks the field values on UpdateRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRuleResponseMultiError, or nil if none found.
func (m *UpdateRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRuleResponseMultiError(errors)
	}

	return nil
}

// UpdateRuleResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateRuleResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRuleResponseMultiError) AllErrors() []error { return m }

// UpdateRuleResponseValidationError is the validation error returned by
// UpdateRuleResponse.Validate if the designated constraints aren't met.
type UpdateRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleResponseValidationError) ErrorName() string {
	return "UpdateRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleResponseValidationError{}

// Validate checks the field values on ListRulesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRulesRequestMultiError, or nil if none found.
func (m *ListRulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for EventType

	// no validation rules for Name

	// no validation rules for Actor

	// no validation rules for PageNo

	// no validation rules for PageSize

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return ListRulesRequestMultiError(errors)
	}

	return nil
}

// ListRulesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRulesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRulesRequestMultiError) AllErrors() []error { return m }

// ListRulesRequestValidationError is the validation error returned by
// ListRulesRequest.Validate if the designated constraints aren't met.
type ListRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesRequestValidationError) ErrorName() string { return "ListRulesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesRequestValidationError{}

// Validate checks the field values on ListRulesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRulesResponseMultiError, or nil if none found.
func (m *ListRulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRulesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRulesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRulesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListRulesResponseMultiError(errors)
	}

	return nil
}

// ListRulesResponseMultiError is an error wrapping multiple validation errors
// returned by ListRulesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRulesResponseMultiError) AllErrors() []error { return m }

// ListRulesResponseValidationError is the validation error returned by
// ListRulesResponse.Validate if the designated constraints aren't met.
type ListRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesResponseValidationError) ErrorName() string {
	return "ListRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesResponseValidationError{}

// Validate checks the field values on ListRulesResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRulesResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRulesResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRulesResponseDataMultiError, or nil if none found.
func (m *ListRulesResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRulesResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRulesResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRulesResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRulesResponseDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRulesResponseDataMultiError(errors)
	}

	return nil
}

// ListRulesResponseDataMultiError is an error wrapping multiple validation
// errors returned by ListRulesResponseData.ValidateAll() if the designated
// constraints aren't met.
type ListRulesResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRulesResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRulesResponseDataMultiError) AllErrors() []error { return m }

// ListRulesResponseDataValidationError is the validation error returned by
// ListRulesResponseData.Validate if the designated constraints aren't met.
type ListRulesResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesResponseDataValidationError) ErrorName() string {
	return "ListRulesResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e ListRulesResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesResponseDataValidationError{}

// Validate checks the field values on DeleteRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRuleRequestMultiError, or nil if none found.
func (m *DeleteRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRuleRequestMultiError(errors)
	}

	return nil
}

// DeleteRuleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRuleRequestMultiError) AllErrors() []error { return m }

// DeleteRuleRequestValidationError is the validation error returned by
// DeleteRuleRequest.Validate if the designated constraints aren't met.
type DeleteRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRuleRequestValidationError) ErrorName() string {
	return "DeleteRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRuleRequestValidationError{}

// Validate checks the field values on DeleteRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRuleResponseMultiError, or nil if none found.
func (m *DeleteRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRuleResponseMultiError(errors)
	}

	return nil
}

// DeleteRuleResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRuleResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRuleResponseMultiError) AllErrors() []error { return m }

// DeleteRuleResponseValidationError is the validation error returned by
// DeleteRuleResponse.Validate if the designated constraints aren't met.
type DeleteRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRuleResponseValidationError) ErrorName() string {
	return "DeleteRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRuleResponseValidationError{}

// Validate checks the field values on ListRuleExecHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRuleExecHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRuleExecHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRuleExecHistoryRequestMultiError, or nil if none found.
func (m *ListRuleExecHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRuleExecHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for EventType

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for RuleID

	if m.Succeed != nil {
		// no validation rules for Succeed
	}

	if len(errors) > 0 {
		return ListRuleExecHistoryRequestMultiError(errors)
	}

	return nil
}

// ListRuleExecHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by ListRuleExecHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type ListRuleExecHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRuleExecHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRuleExecHistoryRequestMultiError) AllErrors() []error { return m }

// ListRuleExecHistoryRequestValidationError is the validation error returned
// by ListRuleExecHistoryRequest.Validate if the designated constraints aren't met.
type ListRuleExecHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRuleExecHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRuleExecHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRuleExecHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRuleExecHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRuleExecHistoryRequestValidationError) ErrorName() string {
	return "ListRuleExecHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRuleExecHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRuleExecHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRuleExecHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRuleExecHistoryRequestValidationError{}

// Validate checks the field values on ListRuleExecHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRuleExecHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRuleExecHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRuleExecHistoryResponseMultiError, or nil if none found.
func (m *ListRuleExecHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRuleExecHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRuleExecHistoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRuleExecHistoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRuleExecHistoryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListRuleExecHistoryResponseMultiError(errors)
	}

	return nil
}

// ListRuleExecHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by ListRuleExecHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type ListRuleExecHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRuleExecHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRuleExecHistoryResponseMultiError) AllErrors() []error { return m }

// ListRuleExecHistoryResponseValidationError is the validation error returned
// by ListRuleExecHistoryResponse.Validate if the designated constraints
// aren't met.
type ListRuleExecHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRuleExecHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRuleExecHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRuleExecHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRuleExecHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRuleExecHistoryResponseValidationError) ErrorName() string {
	return "ListRuleExecHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRuleExecHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRuleExecHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRuleExecHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRuleExecHistoryResponseValidationError{}

// Validate checks the field values on ListRuleExecHistoryResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRuleExecHistoryResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRuleExecHistoryResponseData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListRuleExecHistoryResponseDataMultiError, or nil if none found.
func (m *ListRuleExecHistoryResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRuleExecHistoryResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRuleExecHistoryResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRuleExecHistoryResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRuleExecHistoryResponseDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRuleExecHistoryResponseDataMultiError(errors)
	}

	return nil
}

// ListRuleExecHistoryResponseDataMultiError is an error wrapping multiple
// validation errors returned by ListRuleExecHistoryResponseData.ValidateAll()
// if the designated constraints aren't met.
type ListRuleExecHistoryResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRuleExecHistoryResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRuleExecHistoryResponseDataMultiError) AllErrors() []error { return m }

// ListRuleExecHistoryResponseDataValidationError is the validation error
// returned by ListRuleExecHistoryResponseData.Validate if the designated
// constraints aren't met.
type ListRuleExecHistoryResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRuleExecHistoryResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRuleExecHistoryResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRuleExecHistoryResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRuleExecHistoryResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRuleExecHistoryResponseDataValidationError) ErrorName() string {
	return "ListRuleExecHistoryResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e ListRuleExecHistoryResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRuleExecHistoryResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRuleExecHistoryResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRuleExecHistoryResponseDataValidationError{}

// Validate checks the field values on RuleExecHistory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RuleExecHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuleExecHistory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RuleExecHistoryMultiError, or nil if none found.
func (m *RuleExecHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *RuleExecHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleExecHistoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleExecHistoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleExecHistoryValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for RuleID

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetEnv()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleExecHistoryValidationError{
					field:  "Env",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleExecHistoryValidationError{
					field:  "Env",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnv()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleExecHistoryValidationError{
				field:  "Env",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Succeed

	// no validation rules for ActionOutput

	// no validation rules for Actor

	if len(errors) > 0 {
		return RuleExecHistoryMultiError(errors)
	}

	return nil
}

// RuleExecHistoryMultiError is an error wrapping multiple validation errors
// returned by RuleExecHistory.ValidateAll() if the designated constraints
// aren't met.
type RuleExecHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleExecHistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleExecHistoryMultiError) AllErrors() []error { return m }

// RuleExecHistoryValidationError is the validation error returned by
// RuleExecHistory.Validate if the designated constraints aren't met.
type RuleExecHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleExecHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleExecHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleExecHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleExecHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleExecHistoryValidationError) ErrorName() string { return "RuleExecHistoryValidationError" }

// Error satisfies the builtin error interface
func (e RuleExecHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleExecHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleExecHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleExecHistoryValidationError{}
