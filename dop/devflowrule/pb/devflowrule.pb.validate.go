// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: devflowrule.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDevFlowRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDevFlowRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDevFlowRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDevFlowRuleRequestMultiError, or nil if none found.
func (m *CreateDevFlowRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDevFlowRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for UserID

	if len(errors) > 0 {
		return CreateDevFlowRuleRequestMultiError(errors)
	}

	return nil
}

// CreateDevFlowRuleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDevFlowRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDevFlowRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDevFlowRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDevFlowRuleRequestMultiError) AllErrors() []error { return m }

// CreateDevFlowRuleRequestValidationError is the validation error returned by
// CreateDevFlowRuleRequest.Validate if the designated constraints aren't met.
type CreateDevFlowRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDevFlowRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDevFlowRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDevFlowRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDevFlowRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDevFlowRuleRequestValidationError) ErrorName() string {
	return "CreateDevFlowRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDevFlowRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDevFlowRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDevFlowRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDevFlowRuleRequestValidationError{}

// Validate checks the field values on CreateDevFlowRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDevFlowRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDevFlowRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDevFlowRuleResponseMultiError, or nil if none found.
func (m *CreateDevFlowRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDevFlowRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDevFlowRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDevFlowRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDevFlowRuleResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDevFlowRuleResponseMultiError(errors)
	}

	return nil
}

// CreateDevFlowRuleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDevFlowRuleResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateDevFlowRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDevFlowRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDevFlowRuleResponseMultiError) AllErrors() []error { return m }

// CreateDevFlowRuleResponseValidationError is the validation error returned by
// CreateDevFlowRuleResponse.Validate if the designated constraints aren't met.
type CreateDevFlowRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDevFlowRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDevFlowRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDevFlowRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDevFlowRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDevFlowRuleResponseValidationError) ErrorName() string {
	return "CreateDevFlowRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDevFlowRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDevFlowRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDevFlowRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDevFlowRuleResponseValidationError{}

// Validate checks the field values on DeleteDevFlowRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDevFlowRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDevFlowRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDevFlowRuleRequestMultiError, or nil if none found.
func (m *DeleteDevFlowRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDevFlowRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for UserID

	if len(errors) > 0 {
		return DeleteDevFlowRuleRequestMultiError(errors)
	}

	return nil
}

// DeleteDevFlowRuleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDevFlowRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDevFlowRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDevFlowRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDevFlowRuleRequestMultiError) AllErrors() []error { return m }

// DeleteDevFlowRuleRequestValidationError is the validation error returned by
// DeleteDevFlowRuleRequest.Validate if the designated constraints aren't met.
type DeleteDevFlowRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDevFlowRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDevFlowRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDevFlowRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDevFlowRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDevFlowRuleRequestValidationError) ErrorName() string {
	return "DeleteDevFlowRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDevFlowRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDevFlowRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDevFlowRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDevFlowRuleRequestValidationError{}

// Validate checks the field values on DeleteDevFlowRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDevFlowRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDevFlowRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDevFlowRuleResponseMultiError, or nil if none found.
func (m *DeleteDevFlowRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDevFlowRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDevFlowRuleResponseMultiError(errors)
	}

	return nil
}

// DeleteDevFlowRuleResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDevFlowRuleResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteDevFlowRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDevFlowRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDevFlowRuleResponseMultiError) AllErrors() []error { return m }

// DeleteDevFlowRuleResponseValidationError is the validation error returned by
// DeleteDevFlowRuleResponse.Validate if the designated constraints aren't met.
type DeleteDevFlowRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDevFlowRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDevFlowRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDevFlowRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDevFlowRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDevFlowRuleResponseValidationError) ErrorName() string {
	return "DeleteDevFlowRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDevFlowRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDevFlowRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDevFlowRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDevFlowRuleResponseValidationError{}

// Validate checks the field values on UpdateDevFlowRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDevFlowRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDevFlowRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDevFlowRuleRequestMultiError, or nil if none found.
func (m *UpdateDevFlowRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDevFlowRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	for idx, item := range m.GetFlows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDevFlowRuleRequestValidationError{
						field:  fmt.Sprintf("Flows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDevFlowRuleRequestValidationError{
						field:  fmt.Sprintf("Flows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDevFlowRuleRequestValidationError{
					field:  fmt.Sprintf("Flows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBranchPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDevFlowRuleRequestValidationError{
						field:  fmt.Sprintf("BranchPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDevFlowRuleRequestValidationError{
						field:  fmt.Sprintf("BranchPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDevFlowRuleRequestValidationError{
					field:  fmt.Sprintf("BranchPolicies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDevFlowRuleRequestMultiError(errors)
	}

	return nil
}

// UpdateDevFlowRuleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDevFlowRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDevFlowRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDevFlowRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDevFlowRuleRequestMultiError) AllErrors() []error { return m }

// UpdateDevFlowRuleRequestValidationError is the validation error returned by
// UpdateDevFlowRuleRequest.Validate if the designated constraints aren't met.
type UpdateDevFlowRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDevFlowRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDevFlowRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDevFlowRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDevFlowRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDevFlowRuleRequestValidationError) ErrorName() string {
	return "UpdateDevFlowRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDevFlowRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDevFlowRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDevFlowRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDevFlowRuleRequestValidationError{}

// Validate checks the field values on UpdateDevFlowRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDevFlowRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDevFlowRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDevFlowRuleResponseMultiError, or nil if none found.
func (m *UpdateDevFlowRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDevFlowRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDevFlowRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDevFlowRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDevFlowRuleResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDevFlowRuleResponseMultiError(errors)
	}

	return nil
}

// UpdateDevFlowRuleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDevFlowRuleResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateDevFlowRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDevFlowRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDevFlowRuleResponseMultiError) AllErrors() []error { return m }

// UpdateDevFlowRuleResponseValidationError is the validation error returned by
// UpdateDevFlowRuleResponse.Validate if the designated constraints aren't met.
type UpdateDevFlowRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDevFlowRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDevFlowRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDevFlowRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDevFlowRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDevFlowRuleResponseValidationError) ErrorName() string {
	return "UpdateDevFlowRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDevFlowRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDevFlowRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDevFlowRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDevFlowRuleResponseValidationError{}

// Validate checks the field values on GetDevFlowRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDevFlowRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDevFlowRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDevFlowRuleRequestMultiError, or nil if none found.
func (m *GetDevFlowRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDevFlowRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return GetDevFlowRuleRequestMultiError(errors)
	}

	return nil
}

// GetDevFlowRuleRequestMultiError is an error wrapping multiple validation
// errors returned by GetDevFlowRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDevFlowRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDevFlowRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDevFlowRuleRequestMultiError) AllErrors() []error { return m }

// GetDevFlowRuleRequestValidationError is the validation error returned by
// GetDevFlowRuleRequest.Validate if the designated constraints aren't met.
type GetDevFlowRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDevFlowRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDevFlowRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDevFlowRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDevFlowRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDevFlowRuleRequestValidationError) ErrorName() string {
	return "GetDevFlowRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDevFlowRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDevFlowRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDevFlowRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDevFlowRuleRequestValidationError{}

// Validate checks the field values on GetDevFlowRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDevFlowRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDevFlowRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDevFlowRuleResponseMultiError, or nil if none found.
func (m *GetDevFlowRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDevFlowRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDevFlowRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDevFlowRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDevFlowRuleResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDevFlowRuleResponseMultiError(errors)
	}

	return nil
}

// GetDevFlowRuleResponseMultiError is an error wrapping multiple validation
// errors returned by GetDevFlowRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDevFlowRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDevFlowRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDevFlowRuleResponseMultiError) AllErrors() []error { return m }

// GetDevFlowRuleResponseValidationError is the validation error returned by
// GetDevFlowRuleResponse.Validate if the designated constraints aren't met.
type GetDevFlowRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDevFlowRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDevFlowRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDevFlowRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDevFlowRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDevFlowRuleResponseValidationError) ErrorName() string {
	return "GetDevFlowRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDevFlowRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDevFlowRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDevFlowRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDevFlowRuleResponseValidationError{}

// Validate checks the field values on DevFlowRule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DevFlowRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevFlowRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DevFlowRuleMultiError, or
// nil if none found.
func (m *DevFlowRule) ValidateAll() error {
	return m.validate(true)
}

func (m *DevFlowRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	for idx, item := range m.GetFlows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DevFlowRuleValidationError{
						field:  fmt.Sprintf("Flows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DevFlowRuleValidationError{
						field:  fmt.Sprintf("Flows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DevFlowRuleValidationError{
					field:  fmt.Sprintf("Flows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OrgID

	// no validation rules for OrgName

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DevFlowRuleValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DevFlowRuleValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DevFlowRuleValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DevFlowRuleValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DevFlowRuleValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DevFlowRuleValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Creator

	// no validation rules for Updater

	for idx, item := range m.GetBranchPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DevFlowRuleValidationError{
						field:  fmt.Sprintf("BranchPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DevFlowRuleValidationError{
						field:  fmt.Sprintf("BranchPolicies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DevFlowRuleValidationError{
					field:  fmt.Sprintf("BranchPolicies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DevFlowRuleMultiError(errors)
	}

	return nil
}

// DevFlowRuleMultiError is an error wrapping multiple validation errors
// returned by DevFlowRule.ValidateAll() if the designated constraints aren't met.
type DevFlowRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevFlowRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevFlowRuleMultiError) AllErrors() []error { return m }

// DevFlowRuleValidationError is the validation error returned by
// DevFlowRule.Validate if the designated constraints aren't met.
type DevFlowRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevFlowRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevFlowRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevFlowRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevFlowRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevFlowRuleValidationError) ErrorName() string { return "DevFlowRuleValidationError" }

// Error satisfies the builtin error interface
func (e DevFlowRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevFlowRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevFlowRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevFlowRuleValidationError{}

// Validate checks the field values on FlowWithBranchPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FlowWithBranchPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlowWithBranchPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlowWithBranchPolicyMultiError, or nil if none found.
func (m *FlowWithBranchPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *FlowWithBranchPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFlow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlowWithBranchPolicyValidationError{
					field:  "Flow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlowWithBranchPolicyValidationError{
					field:  "Flow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFlow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlowWithBranchPolicyValidationError{
				field:  "Flow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBranchPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlowWithBranchPolicyValidationError{
					field:  "BranchPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlowWithBranchPolicyValidationError{
					field:  "BranchPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBranchPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlowWithBranchPolicyValidationError{
				field:  "BranchPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FlowWithBranchPolicyMultiError(errors)
	}

	return nil
}

// FlowWithBranchPolicyMultiError is an error wrapping multiple validation
// errors returned by FlowWithBranchPolicy.ValidateAll() if the designated
// constraints aren't met.
type FlowWithBranchPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlowWithBranchPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlowWithBranchPolicyMultiError) AllErrors() []error { return m }

// FlowWithBranchPolicyValidationError is the validation error returned by
// FlowWithBranchPolicy.Validate if the designated constraints aren't met.
type FlowWithBranchPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlowWithBranchPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlowWithBranchPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlowWithBranchPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlowWithBranchPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlowWithBranchPolicyValidationError) ErrorName() string {
	return "FlowWithBranchPolicyValidationError"
}

// Error satisfies the builtin error interface
func (e FlowWithBranchPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlowWithBranchPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlowWithBranchPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlowWithBranchPolicyValidationError{}

// Validate checks the field values on Flow with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Flow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Flow with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FlowMultiError, or nil if none found.
func (m *Flow) ValidateAll() error {
	return m.validate(true)
}

func (m *Flow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for TargetBranch

	// no validation rules for Artifact

	// no validation rules for Environment

	if len(errors) > 0 {
		return FlowMultiError(errors)
	}

	return nil
}

// FlowMultiError is an error wrapping multiple validation errors returned by
// Flow.ValidateAll() if the designated constraints aren't met.
type FlowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlowMultiError) AllErrors() []error { return m }

// FlowValidationError is the validation error returned by Flow.Validate if the
// designated constraints aren't met.
type FlowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlowValidationError) ErrorName() string { return "FlowValidationError" }

// Error satisfies the builtin error interface
func (e FlowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlowValidationError{}

// Validate checks the field values on BranchPolicy with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BranchPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BranchPolicy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BranchPolicyMultiError, or
// nil if none found.
func (m *BranchPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *BranchPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Branch

	// no validation rules for BranchType

	if all {
		switch v := interface{}(m.GetPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BranchPolicyValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BranchPolicyValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BranchPolicyValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BranchPolicyMultiError(errors)
	}

	return nil
}

// BranchPolicyMultiError is an error wrapping multiple validation errors
// returned by BranchPolicy.ValidateAll() if the designated constraints aren't met.
type BranchPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BranchPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BranchPolicyMultiError) AllErrors() []error { return m }

// BranchPolicyValidationError is the validation error returned by
// BranchPolicy.Validate if the designated constraints aren't met.
type BranchPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BranchPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BranchPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BranchPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BranchPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BranchPolicyValidationError) ErrorName() string { return "BranchPolicyValidationError" }

// Error satisfies the builtin error interface
func (e BranchPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBranchPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BranchPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BranchPolicyValidationError{}

// Validate checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Policy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PolicyMultiError, or nil if none found.
func (m *Policy) ValidateAll() error {
	return m.validate(true)
}

func (m *Policy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SourceBranch

	// no validation rules for CurrentBranch

	// no validation rules for TempBranch

	if all {
		switch v := interface{}(m.GetTargetBranch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyValidationError{
					field:  "TargetBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyValidationError{
					field:  "TargetBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetBranch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyValidationError{
				field:  "TargetBranch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyMultiError(errors)
	}

	return nil
}

// PolicyMultiError is an error wrapping multiple validation errors returned by
// Policy.ValidateAll() if the designated constraints aren't met.
type PolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyMultiError) AllErrors() []error { return m }

// PolicyValidationError is the validation error returned by Policy.Validate if
// the designated constraints aren't met.
type PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyValidationError) ErrorName() string { return "PolicyValidationError" }

// Error satisfies the builtin error interface
func (e PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyValidationError{}

// Validate checks the field values on TargetBranch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TargetBranch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetBranch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TargetBranchMultiError, or
// nil if none found.
func (m *TargetBranch) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetBranch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MergeRequest

	// no validation rules for CherryPick

	if len(errors) > 0 {
		return TargetBranchMultiError(errors)
	}

	return nil
}

// TargetBranchMultiError is an error wrapping multiple validation errors
// returned by TargetBranch.ValidateAll() if the designated constraints aren't met.
type TargetBranchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetBranchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetBranchMultiError) AllErrors() []error { return m }

// TargetBranchValidationError is the validation error returned by
// TargetBranch.Validate if the designated constraints aren't met.
type TargetBranchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetBranchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetBranchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetBranchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetBranchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetBranchValidationError) ErrorName() string { return "TargetBranchValidationError" }

// Error satisfies the builtin error interface
func (e TargetBranchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetBranch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetBranchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetBranchValidationError{}
