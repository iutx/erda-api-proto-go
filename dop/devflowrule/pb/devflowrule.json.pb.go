// Code generated by protoc-gen-go-json. DO NOT EDIT.
// Source: devflowrule.proto

package pb

import (
	bytes "bytes"
	json "encoding/json"

	jsonpb "github.com/erda-project/erda-infra/pkg/transport/http/encoding/jsonpb"
	protojson "google.golang.org/protobuf/encoding/protojson"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "encoding/json" package it is being compiled against.
var _ json.Marshaler = (*CreateDevFlowRuleRequest)(nil)
var _ json.Unmarshaler = (*CreateDevFlowRuleRequest)(nil)
var _ json.Marshaler = (*CreateDevFlowRuleResponse)(nil)
var _ json.Unmarshaler = (*CreateDevFlowRuleResponse)(nil)
var _ json.Marshaler = (*DeleteDevFlowRuleRequest)(nil)
var _ json.Unmarshaler = (*DeleteDevFlowRuleRequest)(nil)
var _ json.Marshaler = (*DeleteDevFlowRuleResponse)(nil)
var _ json.Unmarshaler = (*DeleteDevFlowRuleResponse)(nil)
var _ json.Marshaler = (*UpdateDevFlowRuleRequest)(nil)
var _ json.Unmarshaler = (*UpdateDevFlowRuleRequest)(nil)
var _ json.Marshaler = (*UpdateDevFlowRuleResponse)(nil)
var _ json.Unmarshaler = (*UpdateDevFlowRuleResponse)(nil)
var _ json.Marshaler = (*GetDevFlowRuleRequest)(nil)
var _ json.Unmarshaler = (*GetDevFlowRuleRequest)(nil)
var _ json.Marshaler = (*GetDevFlowRuleResponse)(nil)
var _ json.Unmarshaler = (*GetDevFlowRuleResponse)(nil)
var _ json.Marshaler = (*DevFlowRule)(nil)
var _ json.Unmarshaler = (*DevFlowRule)(nil)
var _ json.Marshaler = (*FlowWithBranchPolicy)(nil)
var _ json.Unmarshaler = (*FlowWithBranchPolicy)(nil)
var _ json.Marshaler = (*Flow)(nil)
var _ json.Unmarshaler = (*Flow)(nil)
var _ json.Marshaler = (*BranchPolicy)(nil)
var _ json.Unmarshaler = (*BranchPolicy)(nil)
var _ json.Marshaler = (*Policy)(nil)
var _ json.Unmarshaler = (*Policy)(nil)
var _ json.Marshaler = (*TargetBranch)(nil)
var _ json.Unmarshaler = (*TargetBranch)(nil)

// CreateDevFlowRuleRequest implement json.Marshaler.
func (m *CreateDevFlowRuleRequest) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// CreateDevFlowRuleRequest implement json.Marshaler.
func (m *CreateDevFlowRuleRequest) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// CreateDevFlowRuleResponse implement json.Marshaler.
func (m *CreateDevFlowRuleResponse) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// CreateDevFlowRuleResponse implement json.Marshaler.
func (m *CreateDevFlowRuleResponse) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// DeleteDevFlowRuleRequest implement json.Marshaler.
func (m *DeleteDevFlowRuleRequest) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// DeleteDevFlowRuleRequest implement json.Marshaler.
func (m *DeleteDevFlowRuleRequest) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// DeleteDevFlowRuleResponse implement json.Marshaler.
func (m *DeleteDevFlowRuleResponse) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// DeleteDevFlowRuleResponse implement json.Marshaler.
func (m *DeleteDevFlowRuleResponse) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// UpdateDevFlowRuleRequest implement json.Marshaler.
func (m *UpdateDevFlowRuleRequest) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// UpdateDevFlowRuleRequest implement json.Marshaler.
func (m *UpdateDevFlowRuleRequest) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// UpdateDevFlowRuleResponse implement json.Marshaler.
func (m *UpdateDevFlowRuleResponse) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// UpdateDevFlowRuleResponse implement json.Marshaler.
func (m *UpdateDevFlowRuleResponse) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// GetDevFlowRuleRequest implement json.Marshaler.
func (m *GetDevFlowRuleRequest) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// GetDevFlowRuleRequest implement json.Marshaler.
func (m *GetDevFlowRuleRequest) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// GetDevFlowRuleResponse implement json.Marshaler.
func (m *GetDevFlowRuleResponse) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// GetDevFlowRuleResponse implement json.Marshaler.
func (m *GetDevFlowRuleResponse) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// DevFlowRule implement json.Marshaler.
func (m *DevFlowRule) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// DevFlowRule implement json.Marshaler.
func (m *DevFlowRule) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// FlowWithBranchPolicy implement json.Marshaler.
func (m *FlowWithBranchPolicy) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// FlowWithBranchPolicy implement json.Marshaler.
func (m *FlowWithBranchPolicy) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// Flow implement json.Marshaler.
func (m *Flow) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// Flow implement json.Marshaler.
func (m *Flow) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// BranchPolicy implement json.Marshaler.
func (m *BranchPolicy) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// BranchPolicy implement json.Marshaler.
func (m *BranchPolicy) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// Policy implement json.Marshaler.
func (m *Policy) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// Policy implement json.Marshaler.
func (m *Policy) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}

// TargetBranch implement json.Marshaler.
func (m *TargetBranch) MarshalJSON() ([]byte, error) {
	buf := &bytes.Buffer{}
	err := (&jsonpb.Marshaler{
		OrigName:     false,
		EnumsAsInts:  false,
		EmitDefaults: true,
	}).Marshal(buf, m)
	return buf.Bytes(), err
}

// TargetBranch implement json.Marshaler.
func (m *TargetBranch) UnmarshalJSON(b []byte) error {
	return (&protojson.UnmarshalOptions{
		DiscardUnknown: true,
	}).Unmarshal(b, m)
}
