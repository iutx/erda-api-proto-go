// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: contribution.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PersonalContribution with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PersonalContribution) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PersonalContribution with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PersonalContributionMultiError, or nil if none found.
func (m *PersonalContribution) ValidateAll() error {
	return m.validate(true)
}

func (m *PersonalContribution) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PersonalContributionValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PersonalContributionValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersonalContributionValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIndicators()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PersonalContributionValidationError{
					field:  "Indicators",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PersonalContributionValidationError{
					field:  "Indicators",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndicators()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersonalContributionValidationError{
				field:  "Indicators",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PersonalContributionMultiError(errors)
	}

	return nil
}

// PersonalContributionMultiError is an error wrapping multiple validation
// errors returned by PersonalContribution.ValidateAll() if the designated
// constraints aren't met.
type PersonalContributionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersonalContributionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersonalContributionMultiError) AllErrors() []error { return m }

// PersonalContributionValidationError is the validation error returned by
// PersonalContribution.Validate if the designated constraints aren't met.
type PersonalContributionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonalContributionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonalContributionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonalContributionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonalContributionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonalContributionValidationError) ErrorName() string {
	return "PersonalContributionValidationError"
}

// Error satisfies the builtin error interface
func (e PersonalContributionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersonalContribution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonalContributionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonalContributionValidationError{}

// Validate checks the field values on Contribution with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Contribution) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Contribution with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContributionMultiError, or
// nil if none found.
func (m *Contribution) ValidateAll() error {
	return m.validate(true)
}

func (m *Contribution) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Events

	// no validation rules for Commits

	// no validation rules for Cases

	if len(errors) > 0 {
		return ContributionMultiError(errors)
	}

	return nil
}

// ContributionMultiError is an error wrapping multiple validation errors
// returned by Contribution.ValidateAll() if the designated constraints aren't met.
type ContributionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContributionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContributionMultiError) AllErrors() []error { return m }

// ContributionValidationError is the validation error returned by
// Contribution.Validate if the designated constraints aren't met.
type ContributionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContributionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContributionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContributionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContributionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContributionValidationError) ErrorName() string { return "ContributionValidationError" }

// Error satisfies the builtin error interface
func (e ContributionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContribution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContributionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContributionValidationError{}

// Validate checks the field values on Indicator with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Indicator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Indicator with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndicatorMultiError, or nil
// if none found.
func (m *Indicator) ValidateAll() error {
	return m.validate(true)
}

func (m *Indicator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndicatorValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndicatorValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndicatorValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IndicatorMultiError(errors)
	}

	return nil
}

// IndicatorMultiError is an error wrapping multiple validation errors returned
// by Indicator.ValidateAll() if the designated constraints aren't met.
type IndicatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicatorMultiError) AllErrors() []error { return m }

// IndicatorValidationError is the validation error returned by
// Indicator.Validate if the designated constraints aren't met.
type IndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicatorValidationError) ErrorName() string { return "IndicatorValidationError" }

// Error satisfies the builtin error interface
func (e IndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicatorValidationError{}

// Validate checks the field values on IndicatorData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndicatorData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndicatorData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndicatorDataMultiError, or
// nil if none found.
func (m *IndicatorData) ValidateAll() error {
	return m.validate(true)
}

func (m *IndicatorData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IndicatorDataMultiError(errors)
	}

	return nil
}

// IndicatorDataMultiError is an error wrapping multiple validation errors
// returned by IndicatorData.ValidateAll() if the designated constraints
// aren't met.
type IndicatorDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndicatorDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndicatorDataMultiError) AllErrors() []error { return m }

// IndicatorDataValidationError is the validation error returned by
// IndicatorData.Validate if the designated constraints aren't met.
type IndicatorDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicatorDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicatorDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicatorDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicatorDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicatorDataValidationError) ErrorName() string { return "IndicatorDataValidationError" }

// Error satisfies the builtin error interface
func (e IndicatorDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicatorData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicatorDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicatorDataValidationError{}

// Validate checks the field values on UserRank with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserRank) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRank with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserRankMultiError, or nil
// if none found.
func (m *UserRank) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRank) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Rank

	// no validation rules for Value

	if len(errors) > 0 {
		return UserRankMultiError(errors)
	}

	return nil
}

// UserRankMultiError is an error wrapping multiple validation errors returned
// by UserRank.ValidateAll() if the designated constraints aren't met.
type UserRankMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRankMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRankMultiError) AllErrors() []error { return m }

// UserRankValidationError is the validation error returned by
// UserRank.Validate if the designated constraints aren't met.
type UserRankValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRankValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRankValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRankValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRankValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRankValidationError) ErrorName() string { return "UserRankValidationError" }

// Error satisfies the builtin error interface
func (e UserRankValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRank.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRankValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRankValidationError{}

// Validate checks the field values on GetPersonalContributionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPersonalContributionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPersonalContributionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPersonalContributionRequestMultiError, or nil if none found.
func (m *GetPersonalContributionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPersonalContributionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetPersonalContributionRequestMultiError(errors)
	}

	return nil
}

// GetPersonalContributionRequestMultiError is an error wrapping multiple
// validation errors returned by GetPersonalContributionRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPersonalContributionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPersonalContributionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPersonalContributionRequestMultiError) AllErrors() []error { return m }

// GetPersonalContributionRequestValidationError is the validation error
// returned by GetPersonalContributionRequest.Validate if the designated
// constraints aren't met.
type GetPersonalContributionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPersonalContributionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPersonalContributionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPersonalContributionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPersonalContributionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPersonalContributionRequestValidationError) ErrorName() string {
	return "GetPersonalContributionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPersonalContributionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPersonalContributionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPersonalContributionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPersonalContributionRequestValidationError{}

// Validate checks the field values on GetPersonalContributionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPersonalContributionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPersonalContributionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPersonalContributionResponseMultiError, or nil if none found.
func (m *GetPersonalContributionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPersonalContributionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPersonalContributionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPersonalContributionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPersonalContributionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPersonalContributionResponseMultiError(errors)
	}

	return nil
}

// GetPersonalContributionResponseMultiError is an error wrapping multiple
// validation errors returned by GetPersonalContributionResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPersonalContributionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPersonalContributionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPersonalContributionResponseMultiError) AllErrors() []error { return m }

// GetPersonalContributionResponseValidationError is the validation error
// returned by GetPersonalContributionResponse.Validate if the designated
// constraints aren't met.
type GetPersonalContributionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPersonalContributionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPersonalContributionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPersonalContributionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPersonalContributionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPersonalContributionResponseValidationError) ErrorName() string {
	return "GetPersonalContributionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPersonalContributionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPersonalContributionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPersonalContributionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPersonalContributionResponseValidationError{}

// Validate checks the field values on GetActiveRankRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActiveRankRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActiveRankRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActiveRankRequestMultiError, or nil if none found.
func (m *GetActiveRankRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActiveRankRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if len(errors) > 0 {
		return GetActiveRankRequestMultiError(errors)
	}

	return nil
}

// GetActiveRankRequestMultiError is an error wrapping multiple validation
// errors returned by GetActiveRankRequest.ValidateAll() if the designated
// constraints aren't met.
type GetActiveRankRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActiveRankRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActiveRankRequestMultiError) AllErrors() []error { return m }

// GetActiveRankRequestValidationError is the validation error returned by
// GetActiveRankRequest.Validate if the designated constraints aren't met.
type GetActiveRankRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActiveRankRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActiveRankRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActiveRankRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActiveRankRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActiveRankRequestValidationError) ErrorName() string {
	return "GetActiveRankRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActiveRankRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActiveRankRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActiveRankRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActiveRankRequestValidationError{}

// Validate checks the field values on GetActiveRankRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActiveRankRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActiveRankRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActiveRankRequestResponseMultiError, or nil if none found.
func (m *GetActiveRankRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActiveRankRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetActiveRankRequestResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetActiveRankRequestResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetActiveRankRequestResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetActiveRankRequestResponseMultiError(errors)
	}

	return nil
}

// GetActiveRankRequestResponseMultiError is an error wrapping multiple
// validation errors returned by GetActiveRankRequestResponse.ValidateAll() if
// the designated constraints aren't met.
type GetActiveRankRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActiveRankRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActiveRankRequestResponseMultiError) AllErrors() []error { return m }

// GetActiveRankRequestResponseValidationError is the validation error returned
// by GetActiveRankRequestResponse.Validate if the designated constraints
// aren't met.
type GetActiveRankRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActiveRankRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActiveRankRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActiveRankRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActiveRankRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActiveRankRequestResponseValidationError) ErrorName() string {
	return "GetActiveRankRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActiveRankRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActiveRankRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActiveRankRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActiveRankRequestResponseValidationError{}
