// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stream.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommentIssueStreamCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentIssueStreamCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentIssueStreamCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CommentIssueStreamCreateRequestMultiError, or nil if none found.
func (m *CommentIssueStreamCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentIssueStreamCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IssueID

	// no validation rules for Type

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetMrInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentIssueStreamCreateRequestValidationError{
					field:  "MrInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentIssueStreamCreateRequestValidationError{
					field:  "MrInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMrInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentIssueStreamCreateRequestValidationError{
				field:  "MrInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserID

	if len(errors) > 0 {
		return CommentIssueStreamCreateRequestMultiError(errors)
	}

	return nil
}

// CommentIssueStreamCreateRequestMultiError is an error wrapping multiple
// validation errors returned by CommentIssueStreamCreateRequest.ValidateAll()
// if the designated constraints aren't met.
type CommentIssueStreamCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentIssueStreamCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentIssueStreamCreateRequestMultiError) AllErrors() []error { return m }

// CommentIssueStreamCreateRequestValidationError is the validation error
// returned by CommentIssueStreamCreateRequest.Validate if the designated
// constraints aren't met.
type CommentIssueStreamCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentIssueStreamCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentIssueStreamCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentIssueStreamCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentIssueStreamCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentIssueStreamCreateRequestValidationError) ErrorName() string {
	return "CommentIssueStreamCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommentIssueStreamCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentIssueStreamCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentIssueStreamCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentIssueStreamCreateRequestValidationError{}

// Validate checks the field values on MRCommentInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MRCommentInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MRCommentInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MRCommentInfoMultiError, or
// nil if none found.
func (m *MRCommentInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MRCommentInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for MrID

	// no validation rules for MrTitle

	if len(errors) > 0 {
		return MRCommentInfoMultiError(errors)
	}

	return nil
}

// MRCommentInfoMultiError is an error wrapping multiple validation errors
// returned by MRCommentInfo.ValidateAll() if the designated constraints
// aren't met.
type MRCommentInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MRCommentInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MRCommentInfoMultiError) AllErrors() []error { return m }

// MRCommentInfoValidationError is the validation error returned by
// MRCommentInfo.Validate if the designated constraints aren't met.
type MRCommentInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MRCommentInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MRCommentInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MRCommentInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MRCommentInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MRCommentInfoValidationError) ErrorName() string { return "MRCommentInfoValidationError" }

// Error satisfies the builtin error interface
func (e MRCommentInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMRCommentInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MRCommentInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MRCommentInfoValidationError{}

// Validate checks the field values on CommentIssueStreamBatchCreateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CommentIssueStreamBatchCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentIssueStreamBatchCreateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CommentIssueStreamBatchCreateRequestMultiError, or nil if none found.
func (m *CommentIssueStreamBatchCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentIssueStreamBatchCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIssueStreams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommentIssueStreamBatchCreateRequestValidationError{
						field:  fmt.Sprintf("IssueStreams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommentIssueStreamBatchCreateRequestValidationError{
						field:  fmt.Sprintf("IssueStreams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommentIssueStreamBatchCreateRequestValidationError{
					field:  fmt.Sprintf("IssueStreams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CommentIssueStreamBatchCreateRequestMultiError(errors)
	}

	return nil
}

// CommentIssueStreamBatchCreateRequestMultiError is an error wrapping multiple
// validation errors returned by
// CommentIssueStreamBatchCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type CommentIssueStreamBatchCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentIssueStreamBatchCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentIssueStreamBatchCreateRequestMultiError) AllErrors() []error { return m }

// CommentIssueStreamBatchCreateRequestValidationError is the validation error
// returned by CommentIssueStreamBatchCreateRequest.Validate if the designated
// constraints aren't met.
type CommentIssueStreamBatchCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentIssueStreamBatchCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentIssueStreamBatchCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentIssueStreamBatchCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentIssueStreamBatchCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentIssueStreamBatchCreateRequestValidationError) ErrorName() string {
	return "CommentIssueStreamBatchCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommentIssueStreamBatchCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentIssueStreamBatchCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentIssueStreamBatchCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentIssueStreamBatchCreateRequestValidationError{}

// Validate checks the field values on CommentIssueStreamBatchCreateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CommentIssueStreamBatchCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentIssueStreamBatchCreateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CommentIssueStreamBatchCreateResponseMultiError, or nil if none found.
func (m *CommentIssueStreamBatchCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentIssueStreamBatchCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CommentIssueStreamBatchCreateResponseMultiError(errors)
	}

	return nil
}

// CommentIssueStreamBatchCreateResponseMultiError is an error wrapping
// multiple validation errors returned by
// CommentIssueStreamBatchCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type CommentIssueStreamBatchCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentIssueStreamBatchCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentIssueStreamBatchCreateResponseMultiError) AllErrors() []error { return m }

// CommentIssueStreamBatchCreateResponseValidationError is the validation error
// returned by CommentIssueStreamBatchCreateResponse.Validate if the
// designated constraints aren't met.
type CommentIssueStreamBatchCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentIssueStreamBatchCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentIssueStreamBatchCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentIssueStreamBatchCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentIssueStreamBatchCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentIssueStreamBatchCreateResponseValidationError) ErrorName() string {
	return "CommentIssueStreamBatchCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommentIssueStreamBatchCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentIssueStreamBatchCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentIssueStreamBatchCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentIssueStreamBatchCreateResponseValidationError{}

// Validate checks the field values on IssueStreamCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueStreamCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueStreamCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueStreamCreateRequestMultiError, or nil if none found.
func (m *IssueStreamCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueStreamCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IssueID

	// no validation rules for Type

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetMrInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssueStreamCreateRequestValidationError{
					field:  "MrInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssueStreamCreateRequestValidationError{
					field:  "MrInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMrInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssueStreamCreateRequestValidationError{
				field:  "MrInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentityInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssueStreamCreateRequestValidationError{
					field:  "IdentityInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssueStreamCreateRequestValidationError{
					field:  "IdentityInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentityInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssueStreamCreateRequestValidationError{
				field:  "IdentityInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	if len(errors) > 0 {
		return IssueStreamCreateRequestMultiError(errors)
	}

	return nil
}

// IssueStreamCreateRequestMultiError is an error wrapping multiple validation
// errors returned by IssueStreamCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type IssueStreamCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueStreamCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueStreamCreateRequestMultiError) AllErrors() []error { return m }

// IssueStreamCreateRequestValidationError is the validation error returned by
// IssueStreamCreateRequest.Validate if the designated constraints aren't met.
type IssueStreamCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueStreamCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueStreamCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueStreamCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueStreamCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueStreamCreateRequestValidationError) ErrorName() string {
	return "IssueStreamCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IssueStreamCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueStreamCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueStreamCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueStreamCreateRequestValidationError{}

// Validate checks the field values on IssueStreamCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueStreamCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueStreamCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueStreamCreateResponseMultiError, or nil if none found.
func (m *IssueStreamCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueStreamCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return IssueStreamCreateResponseMultiError(errors)
	}

	return nil
}

// IssueStreamCreateResponseMultiError is an error wrapping multiple validation
// errors returned by IssueStreamCreateResponse.ValidateAll() if the
// designated constraints aren't met.
type IssueStreamCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueStreamCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueStreamCreateResponseMultiError) AllErrors() []error { return m }

// IssueStreamCreateResponseValidationError is the validation error returned by
// IssueStreamCreateResponse.Validate if the designated constraints aren't met.
type IssueStreamCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueStreamCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueStreamCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueStreamCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueStreamCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueStreamCreateResponseValidationError) ErrorName() string {
	return "IssueStreamCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IssueStreamCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueStreamCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueStreamCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueStreamCreateResponseValidationError{}

// Validate checks the field values on PagingIssueStreamsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PagingIssueStreamsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingIssueStreamsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagingIssueStreamsRequestMultiError, or nil if none found.
func (m *PagingIssueStreamsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingIssueStreamsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IssueID

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Id

	if len(errors) > 0 {
		return PagingIssueStreamsRequestMultiError(errors)
	}

	return nil
}

// PagingIssueStreamsRequestMultiError is an error wrapping multiple validation
// errors returned by PagingIssueStreamsRequest.ValidateAll() if the
// designated constraints aren't met.
type PagingIssueStreamsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingIssueStreamsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingIssueStreamsRequestMultiError) AllErrors() []error { return m }

// PagingIssueStreamsRequestValidationError is the validation error returned by
// PagingIssueStreamsRequest.Validate if the designated constraints aren't met.
type PagingIssueStreamsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingIssueStreamsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingIssueStreamsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingIssueStreamsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingIssueStreamsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingIssueStreamsRequestValidationError) ErrorName() string {
	return "PagingIssueStreamsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PagingIssueStreamsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingIssueStreamsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingIssueStreamsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingIssueStreamsRequestValidationError{}

// Validate checks the field values on PagingIssueStreamsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PagingIssueStreamsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingIssueStreamsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagingIssueStreamsResponseMultiError, or nil if none found.
func (m *PagingIssueStreamsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingIssueStreamsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PagingIssueStreamsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PagingIssueStreamsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PagingIssueStreamsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PagingIssueStreamsResponseMultiError(errors)
	}

	return nil
}

// PagingIssueStreamsResponseMultiError is an error wrapping multiple
// validation errors returned by PagingIssueStreamsResponse.ValidateAll() if
// the designated constraints aren't met.
type PagingIssueStreamsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingIssueStreamsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingIssueStreamsResponseMultiError) AllErrors() []error { return m }

// PagingIssueStreamsResponseValidationError is the validation error returned
// by PagingIssueStreamsResponse.Validate if the designated constraints aren't met.
type PagingIssueStreamsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingIssueStreamsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingIssueStreamsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingIssueStreamsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingIssueStreamsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingIssueStreamsResponseValidationError) ErrorName() string {
	return "PagingIssueStreamsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PagingIssueStreamsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingIssueStreamsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingIssueStreamsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingIssueStreamsResponseValidationError{}

// Validate checks the field values on IssueStreamPagingResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueStreamPagingResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueStreamPagingResponseData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IssueStreamPagingResponseDataMultiError, or nil if none found.
func (m *IssueStreamPagingResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueStreamPagingResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IssueStreamPagingResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IssueStreamPagingResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IssueStreamPagingResponseDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IssueStreamPagingResponseDataMultiError(errors)
	}

	return nil
}

// IssueStreamPagingResponseDataMultiError is an error wrapping multiple
// validation errors returned by IssueStreamPagingResponseData.ValidateAll()
// if the designated constraints aren't met.
type IssueStreamPagingResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueStreamPagingResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueStreamPagingResponseDataMultiError) AllErrors() []error { return m }

// IssueStreamPagingResponseDataValidationError is the validation error
// returned by IssueStreamPagingResponseData.Validate if the designated
// constraints aren't met.
type IssueStreamPagingResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueStreamPagingResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueStreamPagingResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueStreamPagingResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueStreamPagingResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueStreamPagingResponseDataValidationError) ErrorName() string {
	return "IssueStreamPagingResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e IssueStreamPagingResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueStreamPagingResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueStreamPagingResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueStreamPagingResponseDataValidationError{}

// Validate checks the field values on IssueStream with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IssueStream) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueStream with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IssueStreamMultiError, or
// nil if none found.
func (m *IssueStream) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueStream) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IssueID

	// no validation rules for Operator

	// no validation rules for StreamType

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetMrInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssueStreamValidationError{
					field:  "MrInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssueStreamValidationError{
					field:  "MrInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMrInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssueStreamValidationError{
				field:  "MrInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssueStreamValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssueStreamValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssueStreamValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssueStreamValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssueStreamValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssueStreamValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IssueStreamMultiError(errors)
	}

	return nil
}

// IssueStreamMultiError is an error wrapping multiple validation errors
// returned by IssueStream.ValidateAll() if the designated constraints aren't met.
type IssueStreamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueStreamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueStreamMultiError) AllErrors() []error { return m }

// IssueStreamValidationError is the validation error returned by
// IssueStream.Validate if the designated constraints aren't met.
type IssueStreamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueStreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueStreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueStreamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueStreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueStreamValidationError) ErrorName() string { return "IssueStreamValidationError" }

// Error satisfies the builtin error interface
func (e IssueStreamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueStream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueStreamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueStreamValidationError{}
