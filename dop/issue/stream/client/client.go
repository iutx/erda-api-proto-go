// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: stream.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/dop/issue/stream/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// CommentIssueStreamService stream.proto
	CommentIssueStreamService() pb.CommentIssueStreamServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		commentIssueStreamService: pb.NewCommentIssueStreamServiceClient(cc),
	}
}

type serviceClients struct {
	commentIssueStreamService pb.CommentIssueStreamServiceClient
}

func (c *serviceClients) CommentIssueStreamService() pb.CommentIssueStreamServiceClient {
	return c.commentIssueStreamService
}

type commentIssueStreamServiceWrapper struct {
	client pb.CommentIssueStreamServiceClient
	opts   []grpc1.CallOption
}

func (s *commentIssueStreamServiceWrapper) BatchCreateIssueStream(ctx context.Context, req *pb.CommentIssueStreamBatchCreateRequest) (*pb.CommentIssueStreamBatchCreateResponse, error) {
	return s.client.BatchCreateIssueStream(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *commentIssueStreamServiceWrapper) CreateIssueStream(ctx context.Context, req *pb.IssueStreamCreateRequest) (*pb.IssueStreamCreateResponse, error) {
	return s.client.CreateIssueStream(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *commentIssueStreamServiceWrapper) PagingIssueStreams(ctx context.Context, req *pb.PagingIssueStreamsRequest) (*pb.PagingIssueStreamsResponse, error) {
	return s.client.PagingIssueStreams(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
