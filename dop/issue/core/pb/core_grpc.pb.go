// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: core.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// IssueCoreServiceClient is the client API for IssueCoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IssueCoreServiceClient interface {
	CreateIssue(ctx context.Context, in *IssueCreateRequest, opts ...grpc.CallOption) (*IssueCreateResponse, error)
	PagingIssue(ctx context.Context, in *PagingIssueRequest, opts ...grpc.CallOption) (*PagingIssueResponse, error)
	GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*GetIssueResponse, error)
	UpdateIssue(ctx context.Context, in *UpdateIssueRequest, opts ...grpc.CallOption) (*UpdateIssueResponse, error)
	DeleteIssue(ctx context.Context, in *DeleteIssueRequest, opts ...grpc.CallOption) (*DeleteIssueResponse, error)
	BatchUpdateIssue(ctx context.Context, in *BatchUpdateIssueRequest, opts ...grpc.CallOption) (*BatchUpdateIssueResponse, error)
	UpdateIssueType(ctx context.Context, in *UpdateIssueTypeRequest, opts ...grpc.CallOption) (*UpdateIssueTypeResponse, error)
	SubscribeIssue(ctx context.Context, in *SubscribeIssueRequest, opts ...grpc.CallOption) (*SubscribeIssueResponse, error)
	UnsubscribeIssue(ctx context.Context, in *UnsubscribeIssueRequest, opts ...grpc.CallOption) (*UnsubscribeIssueResponse, error)
	BatchUpdateIssueSubscriber(ctx context.Context, in *BatchUpdateIssueSubscriberRequest, opts ...grpc.CallOption) (*BatchUpdateIssueSubscriberResponse, error)
	CreateIssueProperty(ctx context.Context, in *CreateIssuePropertyRequest, opts ...grpc.CallOption) (*CreateIssuePropertyResponse, error)
	DeleteIssueProperty(ctx context.Context, in *DeleteIssuePropertyRequest, opts ...grpc.CallOption) (*DeleteIssuePropertyResponse, error)
	UpdateIssueProperty(ctx context.Context, in *UpdateIssuePropertyRequest, opts ...grpc.CallOption) (*UpdateIssuePropertyResponse, error)
	GetIssueProperty(ctx context.Context, in *GetIssuePropertyRequest, opts ...grpc.CallOption) (*GetIssuePropertyResponse, error)
	UpdateIssuePropertiesIndex(ctx context.Context, in *UpdateIssuePropertiesIndexRequest, opts ...grpc.CallOption) (*UpdateIssuePropertiesIndexResponse, error)
	GetIssuePropertyUpdateTime(ctx context.Context, in *GetIssuePropertyUpdateTimeRequest, opts ...grpc.CallOption) (*GetIssuePropertyUpdateTimeResponse, error)
	CreateIssuePropertyInstance(ctx context.Context, in *CreateIssuePropertyInstanceRequest, opts ...grpc.CallOption) (*CreateIssuePropertyInstanceResponse, error)
	GetIssuePropertyInstance(ctx context.Context, in *GetIssuePropertyInstanceRequest, opts ...grpc.CallOption) (*GetIssuePropertyInstanceResponse, error)
	GetIssueStage(ctx context.Context, in *IssueStageRequest, opts ...grpc.CallOption) (*GetIssueStageResponse, error)
	UpdateIssueStage(ctx context.Context, in *IssueStageRequest, opts ...grpc.CallOption) (*UpdateIssueStageResponse, error)
	AddIssueRelation(ctx context.Context, in *AddIssueRelationRequest, opts ...grpc.CallOption) (*AddIssueRelationResponse, error)
	DeleteIssueRelation(ctx context.Context, in *DeleteIssueRelationRequest, opts ...grpc.CallOption) (*DeleteIssueRelationResponse, error)
	GetIssueRelations(ctx context.Context, in *GetIssueRelationsRequest, opts ...grpc.CallOption) (*GetIssueRelationsResponse, error)
	CreateIssueState(ctx context.Context, in *CreateIssueStateRequest, opts ...grpc.CallOption) (*CreateIssueStateResponse, error)
	DeleteIssueState(ctx context.Context, in *DeleteIssueStateRequest, opts ...grpc.CallOption) (*DeleteIssueStateResponse, error)
	UpdateIssueStateRelation(ctx context.Context, in *UpdateIssueStateRelationRequest, opts ...grpc.CallOption) (*UpdateIssueStateRelationResponse, error)
	GetIssueStates(ctx context.Context, in *GetIssueStatesRequest, opts ...grpc.CallOption) (*GetIssueStatesResponse, error)
	GetIssueStateRelation(ctx context.Context, in *GetIssueStateRelationRequest, opts ...grpc.CallOption) (*GetIssueStateRelationResponse, error)
	ExportExcelIssue(ctx context.Context, in *ExportExcelIssueRequest, opts ...grpc.CallOption) (*ExportExcelIssueResponse, error)
	ImportExcelIssue(ctx context.Context, in *ImportExcelIssueRequest, opts ...grpc.CallOption) (*ImportExcelIssueResponse, error)
}

type issueCoreServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewIssueCoreServiceClient(cc grpc1.ClientConnInterface) IssueCoreServiceClient {
	return &issueCoreServiceClient{cc}
}

func (c *issueCoreServiceClient) CreateIssue(ctx context.Context, in *IssueCreateRequest, opts ...grpc.CallOption) (*IssueCreateResponse, error) {
	out := new(IssueCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/CreateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) PagingIssue(ctx context.Context, in *PagingIssueRequest, opts ...grpc.CallOption) (*PagingIssueResponse, error) {
	out := new(PagingIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/PagingIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*GetIssueResponse, error) {
	out := new(GetIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) UpdateIssue(ctx context.Context, in *UpdateIssueRequest, opts ...grpc.CallOption) (*UpdateIssueResponse, error) {
	out := new(UpdateIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/UpdateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) DeleteIssue(ctx context.Context, in *DeleteIssueRequest, opts ...grpc.CallOption) (*DeleteIssueResponse, error) {
	out := new(DeleteIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/DeleteIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) BatchUpdateIssue(ctx context.Context, in *BatchUpdateIssueRequest, opts ...grpc.CallOption) (*BatchUpdateIssueResponse, error) {
	out := new(BatchUpdateIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/BatchUpdateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) UpdateIssueType(ctx context.Context, in *UpdateIssueTypeRequest, opts ...grpc.CallOption) (*UpdateIssueTypeResponse, error) {
	out := new(UpdateIssueTypeResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/UpdateIssueType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) SubscribeIssue(ctx context.Context, in *SubscribeIssueRequest, opts ...grpc.CallOption) (*SubscribeIssueResponse, error) {
	out := new(SubscribeIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/SubscribeIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) UnsubscribeIssue(ctx context.Context, in *UnsubscribeIssueRequest, opts ...grpc.CallOption) (*UnsubscribeIssueResponse, error) {
	out := new(UnsubscribeIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/UnsubscribeIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) BatchUpdateIssueSubscriber(ctx context.Context, in *BatchUpdateIssueSubscriberRequest, opts ...grpc.CallOption) (*BatchUpdateIssueSubscriberResponse, error) {
	out := new(BatchUpdateIssueSubscriberResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/BatchUpdateIssueSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) CreateIssueProperty(ctx context.Context, in *CreateIssuePropertyRequest, opts ...grpc.CallOption) (*CreateIssuePropertyResponse, error) {
	out := new(CreateIssuePropertyResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/CreateIssueProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) DeleteIssueProperty(ctx context.Context, in *DeleteIssuePropertyRequest, opts ...grpc.CallOption) (*DeleteIssuePropertyResponse, error) {
	out := new(DeleteIssuePropertyResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/DeleteIssueProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) UpdateIssueProperty(ctx context.Context, in *UpdateIssuePropertyRequest, opts ...grpc.CallOption) (*UpdateIssuePropertyResponse, error) {
	out := new(UpdateIssuePropertyResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/UpdateIssueProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) GetIssueProperty(ctx context.Context, in *GetIssuePropertyRequest, opts ...grpc.CallOption) (*GetIssuePropertyResponse, error) {
	out := new(GetIssuePropertyResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/GetIssueProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) UpdateIssuePropertiesIndex(ctx context.Context, in *UpdateIssuePropertiesIndexRequest, opts ...grpc.CallOption) (*UpdateIssuePropertiesIndexResponse, error) {
	out := new(UpdateIssuePropertiesIndexResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/UpdateIssuePropertiesIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) GetIssuePropertyUpdateTime(ctx context.Context, in *GetIssuePropertyUpdateTimeRequest, opts ...grpc.CallOption) (*GetIssuePropertyUpdateTimeResponse, error) {
	out := new(GetIssuePropertyUpdateTimeResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/GetIssuePropertyUpdateTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) CreateIssuePropertyInstance(ctx context.Context, in *CreateIssuePropertyInstanceRequest, opts ...grpc.CallOption) (*CreateIssuePropertyInstanceResponse, error) {
	out := new(CreateIssuePropertyInstanceResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/CreateIssuePropertyInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) GetIssuePropertyInstance(ctx context.Context, in *GetIssuePropertyInstanceRequest, opts ...grpc.CallOption) (*GetIssuePropertyInstanceResponse, error) {
	out := new(GetIssuePropertyInstanceResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/GetIssuePropertyInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) GetIssueStage(ctx context.Context, in *IssueStageRequest, opts ...grpc.CallOption) (*GetIssueStageResponse, error) {
	out := new(GetIssueStageResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/GetIssueStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) UpdateIssueStage(ctx context.Context, in *IssueStageRequest, opts ...grpc.CallOption) (*UpdateIssueStageResponse, error) {
	out := new(UpdateIssueStageResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/UpdateIssueStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) AddIssueRelation(ctx context.Context, in *AddIssueRelationRequest, opts ...grpc.CallOption) (*AddIssueRelationResponse, error) {
	out := new(AddIssueRelationResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/AddIssueRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) DeleteIssueRelation(ctx context.Context, in *DeleteIssueRelationRequest, opts ...grpc.CallOption) (*DeleteIssueRelationResponse, error) {
	out := new(DeleteIssueRelationResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/DeleteIssueRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) GetIssueRelations(ctx context.Context, in *GetIssueRelationsRequest, opts ...grpc.CallOption) (*GetIssueRelationsResponse, error) {
	out := new(GetIssueRelationsResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/GetIssueRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) CreateIssueState(ctx context.Context, in *CreateIssueStateRequest, opts ...grpc.CallOption) (*CreateIssueStateResponse, error) {
	out := new(CreateIssueStateResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/CreateIssueState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) DeleteIssueState(ctx context.Context, in *DeleteIssueStateRequest, opts ...grpc.CallOption) (*DeleteIssueStateResponse, error) {
	out := new(DeleteIssueStateResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/DeleteIssueState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) UpdateIssueStateRelation(ctx context.Context, in *UpdateIssueStateRelationRequest, opts ...grpc.CallOption) (*UpdateIssueStateRelationResponse, error) {
	out := new(UpdateIssueStateRelationResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/UpdateIssueStateRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) GetIssueStates(ctx context.Context, in *GetIssueStatesRequest, opts ...grpc.CallOption) (*GetIssueStatesResponse, error) {
	out := new(GetIssueStatesResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/GetIssueStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) GetIssueStateRelation(ctx context.Context, in *GetIssueStateRelationRequest, opts ...grpc.CallOption) (*GetIssueStateRelationResponse, error) {
	out := new(GetIssueStateRelationResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/GetIssueStateRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) ExportExcelIssue(ctx context.Context, in *ExportExcelIssueRequest, opts ...grpc.CallOption) (*ExportExcelIssueResponse, error) {
	out := new(ExportExcelIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/ExportExcelIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCoreServiceClient) ImportExcelIssue(ctx context.Context, in *ImportExcelIssueRequest, opts ...grpc.CallOption) (*ImportExcelIssueResponse, error) {
	out := new(ImportExcelIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.issue.core.IssueCoreService/ImportExcelIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssueCoreServiceServer is the server API for IssueCoreService service.
// All implementations should embed UnimplementedIssueCoreServiceServer
// for forward compatibility
type IssueCoreServiceServer interface {
	CreateIssue(context.Context, *IssueCreateRequest) (*IssueCreateResponse, error)
	PagingIssue(context.Context, *PagingIssueRequest) (*PagingIssueResponse, error)
	GetIssue(context.Context, *GetIssueRequest) (*GetIssueResponse, error)
	UpdateIssue(context.Context, *UpdateIssueRequest) (*UpdateIssueResponse, error)
	DeleteIssue(context.Context, *DeleteIssueRequest) (*DeleteIssueResponse, error)
	BatchUpdateIssue(context.Context, *BatchUpdateIssueRequest) (*BatchUpdateIssueResponse, error)
	UpdateIssueType(context.Context, *UpdateIssueTypeRequest) (*UpdateIssueTypeResponse, error)
	SubscribeIssue(context.Context, *SubscribeIssueRequest) (*SubscribeIssueResponse, error)
	UnsubscribeIssue(context.Context, *UnsubscribeIssueRequest) (*UnsubscribeIssueResponse, error)
	BatchUpdateIssueSubscriber(context.Context, *BatchUpdateIssueSubscriberRequest) (*BatchUpdateIssueSubscriberResponse, error)
	CreateIssueProperty(context.Context, *CreateIssuePropertyRequest) (*CreateIssuePropertyResponse, error)
	DeleteIssueProperty(context.Context, *DeleteIssuePropertyRequest) (*DeleteIssuePropertyResponse, error)
	UpdateIssueProperty(context.Context, *UpdateIssuePropertyRequest) (*UpdateIssuePropertyResponse, error)
	GetIssueProperty(context.Context, *GetIssuePropertyRequest) (*GetIssuePropertyResponse, error)
	UpdateIssuePropertiesIndex(context.Context, *UpdateIssuePropertiesIndexRequest) (*UpdateIssuePropertiesIndexResponse, error)
	GetIssuePropertyUpdateTime(context.Context, *GetIssuePropertyUpdateTimeRequest) (*GetIssuePropertyUpdateTimeResponse, error)
	CreateIssuePropertyInstance(context.Context, *CreateIssuePropertyInstanceRequest) (*CreateIssuePropertyInstanceResponse, error)
	GetIssuePropertyInstance(context.Context, *GetIssuePropertyInstanceRequest) (*GetIssuePropertyInstanceResponse, error)
	GetIssueStage(context.Context, *IssueStageRequest) (*GetIssueStageResponse, error)
	UpdateIssueStage(context.Context, *IssueStageRequest) (*UpdateIssueStageResponse, error)
	AddIssueRelation(context.Context, *AddIssueRelationRequest) (*AddIssueRelationResponse, error)
	DeleteIssueRelation(context.Context, *DeleteIssueRelationRequest) (*DeleteIssueRelationResponse, error)
	GetIssueRelations(context.Context, *GetIssueRelationsRequest) (*GetIssueRelationsResponse, error)
	CreateIssueState(context.Context, *CreateIssueStateRequest) (*CreateIssueStateResponse, error)
	DeleteIssueState(context.Context, *DeleteIssueStateRequest) (*DeleteIssueStateResponse, error)
	UpdateIssueStateRelation(context.Context, *UpdateIssueStateRelationRequest) (*UpdateIssueStateRelationResponse, error)
	GetIssueStates(context.Context, *GetIssueStatesRequest) (*GetIssueStatesResponse, error)
	GetIssueStateRelation(context.Context, *GetIssueStateRelationRequest) (*GetIssueStateRelationResponse, error)
	ExportExcelIssue(context.Context, *ExportExcelIssueRequest) (*ExportExcelIssueResponse, error)
	ImportExcelIssue(context.Context, *ImportExcelIssueRequest) (*ImportExcelIssueResponse, error)
}

// UnimplementedIssueCoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIssueCoreServiceServer struct {
}

func (*UnimplementedIssueCoreServiceServer) CreateIssue(context.Context, *IssueCreateRequest) (*IssueCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssue not implemented")
}
func (*UnimplementedIssueCoreServiceServer) PagingIssue(context.Context, *PagingIssueRequest) (*PagingIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingIssue not implemented")
}
func (*UnimplementedIssueCoreServiceServer) GetIssue(context.Context, *GetIssueRequest) (*GetIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssue not implemented")
}
func (*UnimplementedIssueCoreServiceServer) UpdateIssue(context.Context, *UpdateIssueRequest) (*UpdateIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssue not implemented")
}
func (*UnimplementedIssueCoreServiceServer) DeleteIssue(context.Context, *DeleteIssueRequest) (*DeleteIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIssue not implemented")
}
func (*UnimplementedIssueCoreServiceServer) BatchUpdateIssue(context.Context, *BatchUpdateIssueRequest) (*BatchUpdateIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateIssue not implemented")
}
func (*UnimplementedIssueCoreServiceServer) UpdateIssueType(context.Context, *UpdateIssueTypeRequest) (*UpdateIssueTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssueType not implemented")
}
func (*UnimplementedIssueCoreServiceServer) SubscribeIssue(context.Context, *SubscribeIssueRequest) (*SubscribeIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeIssue not implemented")
}
func (*UnimplementedIssueCoreServiceServer) UnsubscribeIssue(context.Context, *UnsubscribeIssueRequest) (*UnsubscribeIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeIssue not implemented")
}
func (*UnimplementedIssueCoreServiceServer) BatchUpdateIssueSubscriber(context.Context, *BatchUpdateIssueSubscriberRequest) (*BatchUpdateIssueSubscriberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateIssueSubscriber not implemented")
}
func (*UnimplementedIssueCoreServiceServer) CreateIssueProperty(context.Context, *CreateIssuePropertyRequest) (*CreateIssuePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssueProperty not implemented")
}
func (*UnimplementedIssueCoreServiceServer) DeleteIssueProperty(context.Context, *DeleteIssuePropertyRequest) (*DeleteIssuePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIssueProperty not implemented")
}
func (*UnimplementedIssueCoreServiceServer) UpdateIssueProperty(context.Context, *UpdateIssuePropertyRequest) (*UpdateIssuePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssueProperty not implemented")
}
func (*UnimplementedIssueCoreServiceServer) GetIssueProperty(context.Context, *GetIssuePropertyRequest) (*GetIssuePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssueProperty not implemented")
}
func (*UnimplementedIssueCoreServiceServer) UpdateIssuePropertiesIndex(context.Context, *UpdateIssuePropertiesIndexRequest) (*UpdateIssuePropertiesIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssuePropertiesIndex not implemented")
}
func (*UnimplementedIssueCoreServiceServer) GetIssuePropertyUpdateTime(context.Context, *GetIssuePropertyUpdateTimeRequest) (*GetIssuePropertyUpdateTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuePropertyUpdateTime not implemented")
}
func (*UnimplementedIssueCoreServiceServer) CreateIssuePropertyInstance(context.Context, *CreateIssuePropertyInstanceRequest) (*CreateIssuePropertyInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssuePropertyInstance not implemented")
}
func (*UnimplementedIssueCoreServiceServer) GetIssuePropertyInstance(context.Context, *GetIssuePropertyInstanceRequest) (*GetIssuePropertyInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuePropertyInstance not implemented")
}
func (*UnimplementedIssueCoreServiceServer) GetIssueStage(context.Context, *IssueStageRequest) (*GetIssueStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssueStage not implemented")
}
func (*UnimplementedIssueCoreServiceServer) UpdateIssueStage(context.Context, *IssueStageRequest) (*UpdateIssueStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssueStage not implemented")
}
func (*UnimplementedIssueCoreServiceServer) AddIssueRelation(context.Context, *AddIssueRelationRequest) (*AddIssueRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIssueRelation not implemented")
}
func (*UnimplementedIssueCoreServiceServer) DeleteIssueRelation(context.Context, *DeleteIssueRelationRequest) (*DeleteIssueRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIssueRelation not implemented")
}
func (*UnimplementedIssueCoreServiceServer) GetIssueRelations(context.Context, *GetIssueRelationsRequest) (*GetIssueRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssueRelations not implemented")
}
func (*UnimplementedIssueCoreServiceServer) CreateIssueState(context.Context, *CreateIssueStateRequest) (*CreateIssueStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssueState not implemented")
}
func (*UnimplementedIssueCoreServiceServer) DeleteIssueState(context.Context, *DeleteIssueStateRequest) (*DeleteIssueStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIssueState not implemented")
}
func (*UnimplementedIssueCoreServiceServer) UpdateIssueStateRelation(context.Context, *UpdateIssueStateRelationRequest) (*UpdateIssueStateRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssueStateRelation not implemented")
}
func (*UnimplementedIssueCoreServiceServer) GetIssueStates(context.Context, *GetIssueStatesRequest) (*GetIssueStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssueStates not implemented")
}
func (*UnimplementedIssueCoreServiceServer) GetIssueStateRelation(context.Context, *GetIssueStateRelationRequest) (*GetIssueStateRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssueStateRelation not implemented")
}
func (*UnimplementedIssueCoreServiceServer) ExportExcelIssue(context.Context, *ExportExcelIssueRequest) (*ExportExcelIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportExcelIssue not implemented")
}
func (*UnimplementedIssueCoreServiceServer) ImportExcelIssue(context.Context, *ImportExcelIssueRequest) (*ImportExcelIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportExcelIssue not implemented")
}

func RegisterIssueCoreServiceServer(s grpc1.ServiceRegistrar, srv IssueCoreServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_IssueCoreService_serviceDesc(srv, opts...), srv)
}

var _IssueCoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.dop.issue.core.IssueCoreService",
	HandlerType: (*IssueCoreServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "core.proto",
}

func _get_IssueCoreService_serviceDesc(srv IssueCoreServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_IssueCoreService_CreateIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateIssue(ctx, req.(*IssueCreateRequest))
	}
	var _IssueCoreService_CreateIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_CreateIssue_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "CreateIssue", srv)
		_IssueCoreService_CreateIssue_Handler = h.Interceptor(_IssueCoreService_CreateIssue_Handler)
	}

	_IssueCoreService_PagingIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PagingIssue(ctx, req.(*PagingIssueRequest))
	}
	var _IssueCoreService_PagingIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_PagingIssue_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "PagingIssue", srv)
		_IssueCoreService_PagingIssue_Handler = h.Interceptor(_IssueCoreService_PagingIssue_Handler)
	}

	_IssueCoreService_GetIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetIssue(ctx, req.(*GetIssueRequest))
	}
	var _IssueCoreService_GetIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_GetIssue_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "GetIssue", srv)
		_IssueCoreService_GetIssue_Handler = h.Interceptor(_IssueCoreService_GetIssue_Handler)
	}

	_IssueCoreService_UpdateIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateIssue(ctx, req.(*UpdateIssueRequest))
	}
	var _IssueCoreService_UpdateIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_UpdateIssue_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "UpdateIssue", srv)
		_IssueCoreService_UpdateIssue_Handler = h.Interceptor(_IssueCoreService_UpdateIssue_Handler)
	}

	_IssueCoreService_DeleteIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteIssue(ctx, req.(*DeleteIssueRequest))
	}
	var _IssueCoreService_DeleteIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_DeleteIssue_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "DeleteIssue", srv)
		_IssueCoreService_DeleteIssue_Handler = h.Interceptor(_IssueCoreService_DeleteIssue_Handler)
	}

	_IssueCoreService_BatchUpdateIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.BatchUpdateIssue(ctx, req.(*BatchUpdateIssueRequest))
	}
	var _IssueCoreService_BatchUpdateIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_BatchUpdateIssue_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "BatchUpdateIssue", srv)
		_IssueCoreService_BatchUpdateIssue_Handler = h.Interceptor(_IssueCoreService_BatchUpdateIssue_Handler)
	}

	_IssueCoreService_UpdateIssueType_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateIssueType(ctx, req.(*UpdateIssueTypeRequest))
	}
	var _IssueCoreService_UpdateIssueType_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_UpdateIssueType_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "UpdateIssueType", srv)
		_IssueCoreService_UpdateIssueType_Handler = h.Interceptor(_IssueCoreService_UpdateIssueType_Handler)
	}

	_IssueCoreService_SubscribeIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SubscribeIssue(ctx, req.(*SubscribeIssueRequest))
	}
	var _IssueCoreService_SubscribeIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_SubscribeIssue_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "SubscribeIssue", srv)
		_IssueCoreService_SubscribeIssue_Handler = h.Interceptor(_IssueCoreService_SubscribeIssue_Handler)
	}

	_IssueCoreService_UnsubscribeIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UnsubscribeIssue(ctx, req.(*UnsubscribeIssueRequest))
	}
	var _IssueCoreService_UnsubscribeIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_UnsubscribeIssue_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "UnsubscribeIssue", srv)
		_IssueCoreService_UnsubscribeIssue_Handler = h.Interceptor(_IssueCoreService_UnsubscribeIssue_Handler)
	}

	_IssueCoreService_BatchUpdateIssueSubscriber_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.BatchUpdateIssueSubscriber(ctx, req.(*BatchUpdateIssueSubscriberRequest))
	}
	var _IssueCoreService_BatchUpdateIssueSubscriber_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_BatchUpdateIssueSubscriber_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "BatchUpdateIssueSubscriber", srv)
		_IssueCoreService_BatchUpdateIssueSubscriber_Handler = h.Interceptor(_IssueCoreService_BatchUpdateIssueSubscriber_Handler)
	}

	_IssueCoreService_CreateIssueProperty_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateIssueProperty(ctx, req.(*CreateIssuePropertyRequest))
	}
	var _IssueCoreService_CreateIssueProperty_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_CreateIssueProperty_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "CreateIssueProperty", srv)
		_IssueCoreService_CreateIssueProperty_Handler = h.Interceptor(_IssueCoreService_CreateIssueProperty_Handler)
	}

	_IssueCoreService_DeleteIssueProperty_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteIssueProperty(ctx, req.(*DeleteIssuePropertyRequest))
	}
	var _IssueCoreService_DeleteIssueProperty_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_DeleteIssueProperty_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "DeleteIssueProperty", srv)
		_IssueCoreService_DeleteIssueProperty_Handler = h.Interceptor(_IssueCoreService_DeleteIssueProperty_Handler)
	}

	_IssueCoreService_UpdateIssueProperty_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateIssueProperty(ctx, req.(*UpdateIssuePropertyRequest))
	}
	var _IssueCoreService_UpdateIssueProperty_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_UpdateIssueProperty_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "UpdateIssueProperty", srv)
		_IssueCoreService_UpdateIssueProperty_Handler = h.Interceptor(_IssueCoreService_UpdateIssueProperty_Handler)
	}

	_IssueCoreService_GetIssueProperty_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetIssueProperty(ctx, req.(*GetIssuePropertyRequest))
	}
	var _IssueCoreService_GetIssueProperty_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_GetIssueProperty_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "GetIssueProperty", srv)
		_IssueCoreService_GetIssueProperty_Handler = h.Interceptor(_IssueCoreService_GetIssueProperty_Handler)
	}

	_IssueCoreService_UpdateIssuePropertiesIndex_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateIssuePropertiesIndex(ctx, req.(*UpdateIssuePropertiesIndexRequest))
	}
	var _IssueCoreService_UpdateIssuePropertiesIndex_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_UpdateIssuePropertiesIndex_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "UpdateIssuePropertiesIndex", srv)
		_IssueCoreService_UpdateIssuePropertiesIndex_Handler = h.Interceptor(_IssueCoreService_UpdateIssuePropertiesIndex_Handler)
	}

	_IssueCoreService_GetIssuePropertyUpdateTime_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetIssuePropertyUpdateTime(ctx, req.(*GetIssuePropertyUpdateTimeRequest))
	}
	var _IssueCoreService_GetIssuePropertyUpdateTime_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_GetIssuePropertyUpdateTime_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "GetIssuePropertyUpdateTime", srv)
		_IssueCoreService_GetIssuePropertyUpdateTime_Handler = h.Interceptor(_IssueCoreService_GetIssuePropertyUpdateTime_Handler)
	}

	_IssueCoreService_CreateIssuePropertyInstance_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateIssuePropertyInstance(ctx, req.(*CreateIssuePropertyInstanceRequest))
	}
	var _IssueCoreService_CreateIssuePropertyInstance_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_CreateIssuePropertyInstance_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "CreateIssuePropertyInstance", srv)
		_IssueCoreService_CreateIssuePropertyInstance_Handler = h.Interceptor(_IssueCoreService_CreateIssuePropertyInstance_Handler)
	}

	_IssueCoreService_GetIssuePropertyInstance_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetIssuePropertyInstance(ctx, req.(*GetIssuePropertyInstanceRequest))
	}
	var _IssueCoreService_GetIssuePropertyInstance_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_GetIssuePropertyInstance_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "GetIssuePropertyInstance", srv)
		_IssueCoreService_GetIssuePropertyInstance_Handler = h.Interceptor(_IssueCoreService_GetIssuePropertyInstance_Handler)
	}

	_IssueCoreService_GetIssueStage_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetIssueStage(ctx, req.(*IssueStageRequest))
	}
	var _IssueCoreService_GetIssueStage_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_GetIssueStage_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "GetIssueStage", srv)
		_IssueCoreService_GetIssueStage_Handler = h.Interceptor(_IssueCoreService_GetIssueStage_Handler)
	}

	_IssueCoreService_UpdateIssueStage_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateIssueStage(ctx, req.(*IssueStageRequest))
	}
	var _IssueCoreService_UpdateIssueStage_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_UpdateIssueStage_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "UpdateIssueStage", srv)
		_IssueCoreService_UpdateIssueStage_Handler = h.Interceptor(_IssueCoreService_UpdateIssueStage_Handler)
	}

	_IssueCoreService_AddIssueRelation_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.AddIssueRelation(ctx, req.(*AddIssueRelationRequest))
	}
	var _IssueCoreService_AddIssueRelation_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_AddIssueRelation_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "AddIssueRelation", srv)
		_IssueCoreService_AddIssueRelation_Handler = h.Interceptor(_IssueCoreService_AddIssueRelation_Handler)
	}

	_IssueCoreService_DeleteIssueRelation_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteIssueRelation(ctx, req.(*DeleteIssueRelationRequest))
	}
	var _IssueCoreService_DeleteIssueRelation_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_DeleteIssueRelation_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "DeleteIssueRelation", srv)
		_IssueCoreService_DeleteIssueRelation_Handler = h.Interceptor(_IssueCoreService_DeleteIssueRelation_Handler)
	}

	_IssueCoreService_GetIssueRelations_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetIssueRelations(ctx, req.(*GetIssueRelationsRequest))
	}
	var _IssueCoreService_GetIssueRelations_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_GetIssueRelations_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "GetIssueRelations", srv)
		_IssueCoreService_GetIssueRelations_Handler = h.Interceptor(_IssueCoreService_GetIssueRelations_Handler)
	}

	_IssueCoreService_CreateIssueState_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateIssueState(ctx, req.(*CreateIssueStateRequest))
	}
	var _IssueCoreService_CreateIssueState_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_CreateIssueState_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "CreateIssueState", srv)
		_IssueCoreService_CreateIssueState_Handler = h.Interceptor(_IssueCoreService_CreateIssueState_Handler)
	}

	_IssueCoreService_DeleteIssueState_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteIssueState(ctx, req.(*DeleteIssueStateRequest))
	}
	var _IssueCoreService_DeleteIssueState_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_DeleteIssueState_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "DeleteIssueState", srv)
		_IssueCoreService_DeleteIssueState_Handler = h.Interceptor(_IssueCoreService_DeleteIssueState_Handler)
	}

	_IssueCoreService_UpdateIssueStateRelation_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateIssueStateRelation(ctx, req.(*UpdateIssueStateRelationRequest))
	}
	var _IssueCoreService_UpdateIssueStateRelation_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_UpdateIssueStateRelation_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "UpdateIssueStateRelation", srv)
		_IssueCoreService_UpdateIssueStateRelation_Handler = h.Interceptor(_IssueCoreService_UpdateIssueStateRelation_Handler)
	}

	_IssueCoreService_GetIssueStates_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetIssueStates(ctx, req.(*GetIssueStatesRequest))
	}
	var _IssueCoreService_GetIssueStates_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_GetIssueStates_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "GetIssueStates", srv)
		_IssueCoreService_GetIssueStates_Handler = h.Interceptor(_IssueCoreService_GetIssueStates_Handler)
	}

	_IssueCoreService_GetIssueStateRelation_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetIssueStateRelation(ctx, req.(*GetIssueStateRelationRequest))
	}
	var _IssueCoreService_GetIssueStateRelation_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_GetIssueStateRelation_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "GetIssueStateRelation", srv)
		_IssueCoreService_GetIssueStateRelation_Handler = h.Interceptor(_IssueCoreService_GetIssueStateRelation_Handler)
	}

	_IssueCoreService_ExportExcelIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ExportExcelIssue(ctx, req.(*ExportExcelIssueRequest))
	}
	var _IssueCoreService_ExportExcelIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_ExportExcelIssue_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "ExportExcelIssue", srv)
		_IssueCoreService_ExportExcelIssue_Handler = h.Interceptor(_IssueCoreService_ExportExcelIssue_Handler)
	}

	_IssueCoreService_ImportExcelIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ImportExcelIssue(ctx, req.(*ImportExcelIssueRequest))
	}
	var _IssueCoreService_ImportExcelIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_IssueCoreService_ImportExcelIssue_info = transport.NewServiceInfo("erda.dop.issue.core.IssueCoreService", "ImportExcelIssue", srv)
		_IssueCoreService_ImportExcelIssue_Handler = h.Interceptor(_IssueCoreService_ImportExcelIssue_Handler)
	}

	var serviceDesc = _IssueCoreService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreateIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(IssueCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).CreateIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_CreateIssue_info)
				}
				if interceptor == nil {
					return _IssueCoreService_CreateIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/CreateIssue",
				}
				return interceptor(ctx, in, info, _IssueCoreService_CreateIssue_Handler)
			},
		},
		{
			MethodName: "PagingIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PagingIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).PagingIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_PagingIssue_info)
				}
				if interceptor == nil {
					return _IssueCoreService_PagingIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/PagingIssue",
				}
				return interceptor(ctx, in, info, _IssueCoreService_PagingIssue_Handler)
			},
		},
		{
			MethodName: "GetIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).GetIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_GetIssue_info)
				}
				if interceptor == nil {
					return _IssueCoreService_GetIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/GetIssue",
				}
				return interceptor(ctx, in, info, _IssueCoreService_GetIssue_Handler)
			},
		},
		{
			MethodName: "UpdateIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).UpdateIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_UpdateIssue_info)
				}
				if interceptor == nil {
					return _IssueCoreService_UpdateIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/UpdateIssue",
				}
				return interceptor(ctx, in, info, _IssueCoreService_UpdateIssue_Handler)
			},
		},
		{
			MethodName: "DeleteIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).DeleteIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_DeleteIssue_info)
				}
				if interceptor == nil {
					return _IssueCoreService_DeleteIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/DeleteIssue",
				}
				return interceptor(ctx, in, info, _IssueCoreService_DeleteIssue_Handler)
			},
		},
		{
			MethodName: "BatchUpdateIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(BatchUpdateIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).BatchUpdateIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_BatchUpdateIssue_info)
				}
				if interceptor == nil {
					return _IssueCoreService_BatchUpdateIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/BatchUpdateIssue",
				}
				return interceptor(ctx, in, info, _IssueCoreService_BatchUpdateIssue_Handler)
			},
		},
		{
			MethodName: "UpdateIssueType",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateIssueTypeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).UpdateIssueType(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_UpdateIssueType_info)
				}
				if interceptor == nil {
					return _IssueCoreService_UpdateIssueType_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/UpdateIssueType",
				}
				return interceptor(ctx, in, info, _IssueCoreService_UpdateIssueType_Handler)
			},
		},
		{
			MethodName: "SubscribeIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SubscribeIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).SubscribeIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_SubscribeIssue_info)
				}
				if interceptor == nil {
					return _IssueCoreService_SubscribeIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/SubscribeIssue",
				}
				return interceptor(ctx, in, info, _IssueCoreService_SubscribeIssue_Handler)
			},
		},
		{
			MethodName: "UnsubscribeIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnsubscribeIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).UnsubscribeIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_UnsubscribeIssue_info)
				}
				if interceptor == nil {
					return _IssueCoreService_UnsubscribeIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/UnsubscribeIssue",
				}
				return interceptor(ctx, in, info, _IssueCoreService_UnsubscribeIssue_Handler)
			},
		},
		{
			MethodName: "BatchUpdateIssueSubscriber",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(BatchUpdateIssueSubscriberRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).BatchUpdateIssueSubscriber(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_BatchUpdateIssueSubscriber_info)
				}
				if interceptor == nil {
					return _IssueCoreService_BatchUpdateIssueSubscriber_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/BatchUpdateIssueSubscriber",
				}
				return interceptor(ctx, in, info, _IssueCoreService_BatchUpdateIssueSubscriber_Handler)
			},
		},
		{
			MethodName: "CreateIssueProperty",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateIssuePropertyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).CreateIssueProperty(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_CreateIssueProperty_info)
				}
				if interceptor == nil {
					return _IssueCoreService_CreateIssueProperty_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/CreateIssueProperty",
				}
				return interceptor(ctx, in, info, _IssueCoreService_CreateIssueProperty_Handler)
			},
		},
		{
			MethodName: "DeleteIssueProperty",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteIssuePropertyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).DeleteIssueProperty(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_DeleteIssueProperty_info)
				}
				if interceptor == nil {
					return _IssueCoreService_DeleteIssueProperty_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/DeleteIssueProperty",
				}
				return interceptor(ctx, in, info, _IssueCoreService_DeleteIssueProperty_Handler)
			},
		},
		{
			MethodName: "UpdateIssueProperty",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateIssuePropertyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).UpdateIssueProperty(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_UpdateIssueProperty_info)
				}
				if interceptor == nil {
					return _IssueCoreService_UpdateIssueProperty_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/UpdateIssueProperty",
				}
				return interceptor(ctx, in, info, _IssueCoreService_UpdateIssueProperty_Handler)
			},
		},
		{
			MethodName: "GetIssueProperty",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetIssuePropertyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).GetIssueProperty(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_GetIssueProperty_info)
				}
				if interceptor == nil {
					return _IssueCoreService_GetIssueProperty_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/GetIssueProperty",
				}
				return interceptor(ctx, in, info, _IssueCoreService_GetIssueProperty_Handler)
			},
		},
		{
			MethodName: "UpdateIssuePropertiesIndex",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateIssuePropertiesIndexRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).UpdateIssuePropertiesIndex(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_UpdateIssuePropertiesIndex_info)
				}
				if interceptor == nil {
					return _IssueCoreService_UpdateIssuePropertiesIndex_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/UpdateIssuePropertiesIndex",
				}
				return interceptor(ctx, in, info, _IssueCoreService_UpdateIssuePropertiesIndex_Handler)
			},
		},
		{
			MethodName: "GetIssuePropertyUpdateTime",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetIssuePropertyUpdateTimeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).GetIssuePropertyUpdateTime(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_GetIssuePropertyUpdateTime_info)
				}
				if interceptor == nil {
					return _IssueCoreService_GetIssuePropertyUpdateTime_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/GetIssuePropertyUpdateTime",
				}
				return interceptor(ctx, in, info, _IssueCoreService_GetIssuePropertyUpdateTime_Handler)
			},
		},
		{
			MethodName: "CreateIssuePropertyInstance",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateIssuePropertyInstanceRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).CreateIssuePropertyInstance(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_CreateIssuePropertyInstance_info)
				}
				if interceptor == nil {
					return _IssueCoreService_CreateIssuePropertyInstance_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/CreateIssuePropertyInstance",
				}
				return interceptor(ctx, in, info, _IssueCoreService_CreateIssuePropertyInstance_Handler)
			},
		},
		{
			MethodName: "GetIssuePropertyInstance",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetIssuePropertyInstanceRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).GetIssuePropertyInstance(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_GetIssuePropertyInstance_info)
				}
				if interceptor == nil {
					return _IssueCoreService_GetIssuePropertyInstance_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/GetIssuePropertyInstance",
				}
				return interceptor(ctx, in, info, _IssueCoreService_GetIssuePropertyInstance_Handler)
			},
		},
		{
			MethodName: "GetIssueStage",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(IssueStageRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).GetIssueStage(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_GetIssueStage_info)
				}
				if interceptor == nil {
					return _IssueCoreService_GetIssueStage_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/GetIssueStage",
				}
				return interceptor(ctx, in, info, _IssueCoreService_GetIssueStage_Handler)
			},
		},
		{
			MethodName: "UpdateIssueStage",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(IssueStageRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).UpdateIssueStage(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_UpdateIssueStage_info)
				}
				if interceptor == nil {
					return _IssueCoreService_UpdateIssueStage_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/UpdateIssueStage",
				}
				return interceptor(ctx, in, info, _IssueCoreService_UpdateIssueStage_Handler)
			},
		},
		{
			MethodName: "AddIssueRelation",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AddIssueRelationRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).AddIssueRelation(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_AddIssueRelation_info)
				}
				if interceptor == nil {
					return _IssueCoreService_AddIssueRelation_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/AddIssueRelation",
				}
				return interceptor(ctx, in, info, _IssueCoreService_AddIssueRelation_Handler)
			},
		},
		{
			MethodName: "DeleteIssueRelation",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteIssueRelationRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).DeleteIssueRelation(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_DeleteIssueRelation_info)
				}
				if interceptor == nil {
					return _IssueCoreService_DeleteIssueRelation_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/DeleteIssueRelation",
				}
				return interceptor(ctx, in, info, _IssueCoreService_DeleteIssueRelation_Handler)
			},
		},
		{
			MethodName: "GetIssueRelations",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetIssueRelationsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).GetIssueRelations(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_GetIssueRelations_info)
				}
				if interceptor == nil {
					return _IssueCoreService_GetIssueRelations_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/GetIssueRelations",
				}
				return interceptor(ctx, in, info, _IssueCoreService_GetIssueRelations_Handler)
			},
		},
		{
			MethodName: "CreateIssueState",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateIssueStateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).CreateIssueState(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_CreateIssueState_info)
				}
				if interceptor == nil {
					return _IssueCoreService_CreateIssueState_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/CreateIssueState",
				}
				return interceptor(ctx, in, info, _IssueCoreService_CreateIssueState_Handler)
			},
		},
		{
			MethodName: "DeleteIssueState",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteIssueStateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).DeleteIssueState(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_DeleteIssueState_info)
				}
				if interceptor == nil {
					return _IssueCoreService_DeleteIssueState_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/DeleteIssueState",
				}
				return interceptor(ctx, in, info, _IssueCoreService_DeleteIssueState_Handler)
			},
		},
		{
			MethodName: "UpdateIssueStateRelation",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateIssueStateRelationRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).UpdateIssueStateRelation(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_UpdateIssueStateRelation_info)
				}
				if interceptor == nil {
					return _IssueCoreService_UpdateIssueStateRelation_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/UpdateIssueStateRelation",
				}
				return interceptor(ctx, in, info, _IssueCoreService_UpdateIssueStateRelation_Handler)
			},
		},
		{
			MethodName: "GetIssueStates",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetIssueStatesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).GetIssueStates(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_GetIssueStates_info)
				}
				if interceptor == nil {
					return _IssueCoreService_GetIssueStates_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/GetIssueStates",
				}
				return interceptor(ctx, in, info, _IssueCoreService_GetIssueStates_Handler)
			},
		},
		{
			MethodName: "GetIssueStateRelation",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetIssueStateRelationRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).GetIssueStateRelation(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_GetIssueStateRelation_info)
				}
				if interceptor == nil {
					return _IssueCoreService_GetIssueStateRelation_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/GetIssueStateRelation",
				}
				return interceptor(ctx, in, info, _IssueCoreService_GetIssueStateRelation_Handler)
			},
		},
		{
			MethodName: "ExportExcelIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ExportExcelIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).ExportExcelIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_ExportExcelIssue_info)
				}
				if interceptor == nil {
					return _IssueCoreService_ExportExcelIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/ExportExcelIssue",
				}
				return interceptor(ctx, in, info, _IssueCoreService_ExportExcelIssue_Handler)
			},
		},
		{
			MethodName: "ImportExcelIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ImportExcelIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(IssueCoreServiceServer).ImportExcelIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _IssueCoreService_ImportExcelIssue_info)
				}
				if interceptor == nil {
					return _IssueCoreService_ImportExcelIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.issue.core.IssueCoreService/ImportExcelIssue",
				}
				return interceptor(ctx, in, info, _IssueCoreService_ImportExcelIssue_Handler)
			},
		},
	}
	return &serviceDesc
}
