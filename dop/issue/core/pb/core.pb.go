// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: core.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	pb "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScopeTypeEnum_ScopeType int32

const (
	ScopeTypeEnum_sys       ScopeTypeEnum_ScopeType = 0
	ScopeTypeEnum_org       ScopeTypeEnum_ScopeType = 1
	ScopeTypeEnum_project   ScopeTypeEnum_ScopeType = 2
	ScopeTypeEnum_app       ScopeTypeEnum_ScopeType = 3
	ScopeTypeEnum_publisher ScopeTypeEnum_ScopeType = 4
)

// Enum value maps for ScopeTypeEnum_ScopeType.
var (
	ScopeTypeEnum_ScopeType_name = map[int32]string{
		0: "sys",
		1: "org",
		2: "project",
		3: "app",
		4: "publisher",
	}
	ScopeTypeEnum_ScopeType_value = map[string]int32{
		"sys":       0,
		"org":       1,
		"project":   2,
		"app":       3,
		"publisher": 4,
	}
)

func (x ScopeTypeEnum_ScopeType) Enum() *ScopeTypeEnum_ScopeType {
	p := new(ScopeTypeEnum_ScopeType)
	*p = x
	return p
}

func (x ScopeTypeEnum_ScopeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScopeTypeEnum_ScopeType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[0].Descriptor()
}

func (ScopeTypeEnum_ScopeType) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[0]
}

func (x ScopeTypeEnum_ScopeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScopeTypeEnum_ScopeType.Descriptor instead.
func (ScopeTypeEnum_ScopeType) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{42, 0}
}

type IssueTypeEnum_Type int32

const (
	IssueTypeEnum_REQUIREMENT IssueTypeEnum_Type = 0
	IssueTypeEnum_TASK        IssueTypeEnum_Type = 1
	IssueTypeEnum_BUG         IssueTypeEnum_Type = 2
	IssueTypeEnum_TICKET      IssueTypeEnum_Type = 3
	IssueTypeEnum_EPIC        IssueTypeEnum_Type = 4
)

// Enum value maps for IssueTypeEnum_Type.
var (
	IssueTypeEnum_Type_name = map[int32]string{
		0: "REQUIREMENT",
		1: "TASK",
		2: "BUG",
		3: "TICKET",
		4: "EPIC",
	}
	IssueTypeEnum_Type_value = map[string]int32{
		"REQUIREMENT": 0,
		"TASK":        1,
		"BUG":         2,
		"TICKET":      3,
		"EPIC":        4,
	}
)

func (x IssueTypeEnum_Type) Enum() *IssueTypeEnum_Type {
	p := new(IssueTypeEnum_Type)
	*p = x
	return p
}

func (x IssueTypeEnum_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueTypeEnum_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[1].Descriptor()
}

func (IssueTypeEnum_Type) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[1]
}

func (x IssueTypeEnum_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueTypeEnum_Type.Descriptor instead.
func (IssueTypeEnum_Type) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{43, 0}
}

type IssuePriorityEnum_Priority int32

const (
	IssuePriorityEnum_NORMAL IssuePriorityEnum_Priority = 0
	IssuePriorityEnum_URGENT IssuePriorityEnum_Priority = 1
	IssuePriorityEnum_HIGH   IssuePriorityEnum_Priority = 2
	IssuePriorityEnum_LOW    IssuePriorityEnum_Priority = 3
)

// Enum value maps for IssuePriorityEnum_Priority.
var (
	IssuePriorityEnum_Priority_name = map[int32]string{
		0: "NORMAL",
		1: "URGENT",
		2: "HIGH",
		3: "LOW",
	}
	IssuePriorityEnum_Priority_value = map[string]int32{
		"NORMAL": 0,
		"URGENT": 1,
		"HIGH":   2,
		"LOW":    3,
	}
)

func (x IssuePriorityEnum_Priority) Enum() *IssuePriorityEnum_Priority {
	p := new(IssuePriorityEnum_Priority)
	*p = x
	return p
}

func (x IssuePriorityEnum_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssuePriorityEnum_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[2].Descriptor()
}

func (IssuePriorityEnum_Priority) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[2]
}

func (x IssuePriorityEnum_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssuePriorityEnum_Priority.Descriptor instead.
func (IssuePriorityEnum_Priority) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{44, 0}
}

type IssueComplexityEnum_Complextity int32

const (
	IssueComplexityEnum_NORMAL IssueComplexityEnum_Complextity = 0
	IssueComplexityEnum_HARD   IssueComplexityEnum_Complextity = 1
	IssueComplexityEnum_EASY   IssueComplexityEnum_Complextity = 2
)

// Enum value maps for IssueComplexityEnum_Complextity.
var (
	IssueComplexityEnum_Complextity_name = map[int32]string{
		0: "NORMAL",
		1: "HARD",
		2: "EASY",
	}
	IssueComplexityEnum_Complextity_value = map[string]int32{
		"NORMAL": 0,
		"HARD":   1,
		"EASY":   2,
	}
)

func (x IssueComplexityEnum_Complextity) Enum() *IssueComplexityEnum_Complextity {
	p := new(IssueComplexityEnum_Complextity)
	*p = x
	return p
}

func (x IssueComplexityEnum_Complextity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueComplexityEnum_Complextity) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[3].Descriptor()
}

func (IssueComplexityEnum_Complextity) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[3]
}

func (x IssueComplexityEnum_Complextity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueComplexityEnum_Complextity.Descriptor instead.
func (IssueComplexityEnum_Complextity) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{45, 0}
}

type IssueSeverityEnum_Severity int32

const (
	IssueSeverityEnum_NORMAL  IssueSeverityEnum_Severity = 0
	IssueSeverityEnum_FATAL   IssueSeverityEnum_Severity = 1
	IssueSeverityEnum_SERIOUS IssueSeverityEnum_Severity = 2
	IssueSeverityEnum_SLIGHT  IssueSeverityEnum_Severity = 3
	IssueSeverityEnum_SUGGEST IssueSeverityEnum_Severity = 4
)

// Enum value maps for IssueSeverityEnum_Severity.
var (
	IssueSeverityEnum_Severity_name = map[int32]string{
		0: "NORMAL",
		1: "FATAL",
		2: "SERIOUS",
		3: "SLIGHT",
		4: "SUGGEST",
	}
	IssueSeverityEnum_Severity_value = map[string]int32{
		"NORMAL":  0,
		"FATAL":   1,
		"SERIOUS": 2,
		"SLIGHT":  3,
		"SUGGEST": 4,
	}
)

func (x IssueSeverityEnum_Severity) Enum() *IssueSeverityEnum_Severity {
	p := new(IssueSeverityEnum_Severity)
	*p = x
	return p
}

func (x IssueSeverityEnum_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueSeverityEnum_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[4].Descriptor()
}

func (IssueSeverityEnum_Severity) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[4]
}

func (x IssueSeverityEnum_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueSeverityEnum_Severity.Descriptor instead.
func (IssueSeverityEnum_Severity) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{46, 0}
}

type IssueStateBelongEnum_StateBelong int32

const (
	IssueStateBelongEnum_OPEN     IssueStateBelongEnum_StateBelong = 0
	IssueStateBelongEnum_WORKING  IssueStateBelongEnum_StateBelong = 1
	IssueStateBelongEnum_DONE     IssueStateBelongEnum_StateBelong = 2
	IssueStateBelongEnum_WONTFIX  IssueStateBelongEnum_StateBelong = 3
	IssueStateBelongEnum_REOPEN   IssueStateBelongEnum_StateBelong = 4
	IssueStateBelongEnum_RESOLVED IssueStateBelongEnum_StateBelong = 5
	IssueStateBelongEnum_CLOSED   IssueStateBelongEnum_StateBelong = 6
)

// Enum value maps for IssueStateBelongEnum_StateBelong.
var (
	IssueStateBelongEnum_StateBelong_name = map[int32]string{
		0: "OPEN",
		1: "WORKING",
		2: "DONE",
		3: "WONTFIX",
		4: "REOPEN",
		5: "RESOLVED",
		6: "CLOSED",
	}
	IssueStateBelongEnum_StateBelong_value = map[string]int32{
		"OPEN":     0,
		"WORKING":  1,
		"DONE":     2,
		"WONTFIX":  3,
		"REOPEN":   4,
		"RESOLVED": 5,
		"CLOSED":   6,
	}
)

func (x IssueStateBelongEnum_StateBelong) Enum() *IssueStateBelongEnum_StateBelong {
	p := new(IssueStateBelongEnum_StateBelong)
	*p = x
	return p
}

func (x IssueStateBelongEnum_StateBelong) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueStateBelongEnum_StateBelong) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[5].Descriptor()
}

func (IssueStateBelongEnum_StateBelong) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[5]
}

func (x IssueStateBelongEnum_StateBelong) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueStateBelongEnum_StateBelong.Descriptor instead.
func (IssueStateBelongEnum_StateBelong) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{47, 0}
}

type ProjectLabelTypeEnum_ProjectLabelType int32

const (
	ProjectLabelTypeEnum_issue   ProjectLabelTypeEnum_ProjectLabelType = 0
	ProjectLabelTypeEnum_release ProjectLabelTypeEnum_ProjectLabelType = 1
)

// Enum value maps for ProjectLabelTypeEnum_ProjectLabelType.
var (
	ProjectLabelTypeEnum_ProjectLabelType_name = map[int32]string{
		0: "issue",
		1: "release",
	}
	ProjectLabelTypeEnum_ProjectLabelType_value = map[string]int32{
		"issue":   0,
		"release": 1,
	}
)

func (x ProjectLabelTypeEnum_ProjectLabelType) Enum() *ProjectLabelTypeEnum_ProjectLabelType {
	p := new(ProjectLabelTypeEnum_ProjectLabelType)
	*p = x
	return p
}

func (x ProjectLabelTypeEnum_ProjectLabelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectLabelTypeEnum_ProjectLabelType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[6].Descriptor()
}

func (ProjectLabelTypeEnum_ProjectLabelType) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[6]
}

func (x ProjectLabelTypeEnum_ProjectLabelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectLabelTypeEnum_ProjectLabelType.Descriptor instead.
func (ProjectLabelTypeEnum_ProjectLabelType) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{48, 0}
}

type TestCasePriorityEnum_TestCasePriority int32

const (
	TestCasePriorityEnum_P0 TestCasePriorityEnum_TestCasePriority = 0
	TestCasePriorityEnum_P1 TestCasePriorityEnum_TestCasePriority = 1
	TestCasePriorityEnum_P2 TestCasePriorityEnum_TestCasePriority = 2
	TestCasePriorityEnum_P3 TestCasePriorityEnum_TestCasePriority = 3
)

// Enum value maps for TestCasePriorityEnum_TestCasePriority.
var (
	TestCasePriorityEnum_TestCasePriority_name = map[int32]string{
		0: "P0",
		1: "P1",
		2: "P2",
		3: "P3",
	}
	TestCasePriorityEnum_TestCasePriority_value = map[string]int32{
		"P0": 0,
		"P1": 1,
		"P2": 2,
		"P3": 3,
	}
)

func (x TestCasePriorityEnum_TestCasePriority) Enum() *TestCasePriorityEnum_TestCasePriority {
	p := new(TestCasePriorityEnum_TestCasePriority)
	*p = x
	return p
}

func (x TestCasePriorityEnum_TestCasePriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestCasePriorityEnum_TestCasePriority) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[7].Descriptor()
}

func (TestCasePriorityEnum_TestCasePriority) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[7]
}

func (x TestCasePriorityEnum_TestCasePriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestCasePriorityEnum_TestCasePriority.Descriptor instead.
func (TestCasePriorityEnum_TestCasePriority) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{56, 0}
}

type PropertyTypeEnum_PropertyType int32

const (
	PropertyTypeEnum_Text        PropertyTypeEnum_PropertyType = 0
	PropertyTypeEnum_Number      PropertyTypeEnum_PropertyType = 1
	PropertyTypeEnum_Select      PropertyTypeEnum_PropertyType = 2
	PropertyTypeEnum_MultiSelect PropertyTypeEnum_PropertyType = 3
	PropertyTypeEnum_Date        PropertyTypeEnum_PropertyType = 4
	PropertyTypeEnum_Person      PropertyTypeEnum_PropertyType = 5
	PropertyTypeEnum_CheckBox    PropertyTypeEnum_PropertyType = 6
	PropertyTypeEnum_URL         PropertyTypeEnum_PropertyType = 7
	PropertyTypeEnum_Email       PropertyTypeEnum_PropertyType = 8
	PropertyTypeEnum_Phone       PropertyTypeEnum_PropertyType = 9
)

// Enum value maps for PropertyTypeEnum_PropertyType.
var (
	PropertyTypeEnum_PropertyType_name = map[int32]string{
		0: "Text",
		1: "Number",
		2: "Select",
		3: "MultiSelect",
		4: "Date",
		5: "Person",
		6: "CheckBox",
		7: "URL",
		8: "Email",
		9: "Phone",
	}
	PropertyTypeEnum_PropertyType_value = map[string]int32{
		"Text":        0,
		"Number":      1,
		"Select":      2,
		"MultiSelect": 3,
		"Date":        4,
		"Person":      5,
		"CheckBox":    6,
		"URL":         7,
		"Email":       8,
		"Phone":       9,
	}
)

func (x PropertyTypeEnum_PropertyType) Enum() *PropertyTypeEnum_PropertyType {
	p := new(PropertyTypeEnum_PropertyType)
	*p = x
	return p
}

func (x PropertyTypeEnum_PropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyTypeEnum_PropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[8].Descriptor()
}

func (PropertyTypeEnum_PropertyType) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[8]
}

func (x PropertyTypeEnum_PropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropertyTypeEnum_PropertyType.Descriptor instead.
func (PropertyTypeEnum_PropertyType) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{57, 0}
}

type PropertyIssueTypeEnum_PropertyIssueType int32

const (
	PropertyIssueTypeEnum_REQUIREMENT PropertyIssueTypeEnum_PropertyIssueType = 0
	PropertyIssueTypeEnum_TASK        PropertyIssueTypeEnum_PropertyIssueType = 1
	PropertyIssueTypeEnum_BUG         PropertyIssueTypeEnum_PropertyIssueType = 2
	PropertyIssueTypeEnum_EPIC        PropertyIssueTypeEnum_PropertyIssueType = 3
	PropertyIssueTypeEnum_COMMON      PropertyIssueTypeEnum_PropertyIssueType = 4
)

// Enum value maps for PropertyIssueTypeEnum_PropertyIssueType.
var (
	PropertyIssueTypeEnum_PropertyIssueType_name = map[int32]string{
		0: "REQUIREMENT",
		1: "TASK",
		2: "BUG",
		3: "EPIC",
		4: "COMMON",
	}
	PropertyIssueTypeEnum_PropertyIssueType_value = map[string]int32{
		"REQUIREMENT": 0,
		"TASK":        1,
		"BUG":         2,
		"EPIC":        3,
		"COMMON":      4,
	}
)

func (x PropertyIssueTypeEnum_PropertyIssueType) Enum() *PropertyIssueTypeEnum_PropertyIssueType {
	p := new(PropertyIssueTypeEnum_PropertyIssueType)
	*p = x
	return p
}

func (x PropertyIssueTypeEnum_PropertyIssueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyIssueTypeEnum_PropertyIssueType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[9].Descriptor()
}

func (PropertyIssueTypeEnum_PropertyIssueType) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[9]
}

func (x PropertyIssueTypeEnum_PropertyIssueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropertyIssueTypeEnum_PropertyIssueType.Descriptor instead.
func (PropertyIssueTypeEnum_PropertyIssueType) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{58, 0}
}

type IssueCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanStartedAt      *timestamppb.Timestamp          `protobuf:"bytes,1,opt,name=planStartedAt,proto3" json:"planStartedAt,omitempty"`
	PlanFinishedAt     *timestamppb.Timestamp          `protobuf:"bytes,2,opt,name=planFinishedAt,proto3" json:"planFinishedAt,omitempty"`
	ProjectID          uint64                          `protobuf:"varint,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IterationID        int64                           `protobuf:"varint,4,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	AppID              *uint64                         `protobuf:"varint,5,opt,name=appID,proto3,oneof" json:"appID,omitempty"`
	TestPlanCaseRelIDs []uint64                        `protobuf:"varint,6,rep,packed,name=testPlanCaseRelIDs,proto3" json:"testPlanCaseRelIDs,omitempty"`
	Type               IssueTypeEnum_Type              `protobuf:"varint,7,opt,name=type,proto3,enum=erda.dop.issue.core.IssueTypeEnum_Type" json:"type,omitempty"`
	Title              string                          `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Content            string                          `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty"`
	Priority           IssuePriorityEnum_Priority      `protobuf:"varint,10,opt,name=priority,proto3,enum=erda.dop.issue.core.IssuePriorityEnum_Priority" json:"priority,omitempty"`
	Complexity         IssueComplexityEnum_Complextity `protobuf:"varint,11,opt,name=complexity,proto3,enum=erda.dop.issue.core.IssueComplexityEnum_Complextity" json:"complexity,omitempty"`
	Severity           IssueSeverityEnum_Severity      `protobuf:"varint,12,opt,name=severity,proto3,enum=erda.dop.issue.core.IssueSeverityEnum_Severity" json:"severity,omitempty"`
	Assignee           string                          `protobuf:"bytes,13,opt,name=assignee,proto3" json:"assignee,omitempty"`
	Creator            string                          `protobuf:"bytes,14,opt,name=creator,proto3" json:"creator,omitempty"`
	Labels             []string                        `protobuf:"bytes,15,rep,name=labels,proto3" json:"labels,omitempty"`
	Source             string                          `protobuf:"bytes,16,opt,name=source,proto3" json:"source,omitempty"`
	IssueManHour       *IssueManHour                   `protobuf:"bytes,17,opt,name=issueManHour,proto3" json:"issueManHour,omitempty"`
	TaskType           string                          `protobuf:"bytes,18,opt,name=taskType,proto3" json:"taskType,omitempty"`
	BugStage           string                          `protobuf:"bytes,19,opt,name=bugStage,proto3" json:"bugStage,omitempty"`
	Subscribers        []string                        `protobuf:"bytes,20,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
	IdentityInfo       *pb.IdentityInfo                `protobuf:"bytes,21,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
	External           bool                            `protobuf:"varint,22,opt,name=external,json=-,proto3" json:"external,omitempty"`
	Owner              string                          `protobuf:"bytes,23,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *IssueCreateRequest) Reset() {
	*x = IssueCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCreateRequest) ProtoMessage() {}

func (x *IssueCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCreateRequest.ProtoReflect.Descriptor instead.
func (*IssueCreateRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{0}
}

func (x *IssueCreateRequest) GetPlanStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlanStartedAt
	}
	return nil
}

func (x *IssueCreateRequest) GetPlanFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlanFinishedAt
	}
	return nil
}

func (x *IssueCreateRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *IssueCreateRequest) GetIterationID() int64 {
	if x != nil {
		return x.IterationID
	}
	return 0
}

func (x *IssueCreateRequest) GetAppID() uint64 {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return 0
}

func (x *IssueCreateRequest) GetTestPlanCaseRelIDs() []uint64 {
	if x != nil {
		return x.TestPlanCaseRelIDs
	}
	return nil
}

func (x *IssueCreateRequest) GetType() IssueTypeEnum_Type {
	if x != nil {
		return x.Type
	}
	return IssueTypeEnum_REQUIREMENT
}

func (x *IssueCreateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *IssueCreateRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *IssueCreateRequest) GetPriority() IssuePriorityEnum_Priority {
	if x != nil {
		return x.Priority
	}
	return IssuePriorityEnum_NORMAL
}

func (x *IssueCreateRequest) GetComplexity() IssueComplexityEnum_Complextity {
	if x != nil {
		return x.Complexity
	}
	return IssueComplexityEnum_NORMAL
}

func (x *IssueCreateRequest) GetSeverity() IssueSeverityEnum_Severity {
	if x != nil {
		return x.Severity
	}
	return IssueSeverityEnum_NORMAL
}

func (x *IssueCreateRequest) GetAssignee() string {
	if x != nil {
		return x.Assignee
	}
	return ""
}

func (x *IssueCreateRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *IssueCreateRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *IssueCreateRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *IssueCreateRequest) GetIssueManHour() *IssueManHour {
	if x != nil {
		return x.IssueManHour
	}
	return nil
}

func (x *IssueCreateRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *IssueCreateRequest) GetBugStage() string {
	if x != nil {
		return x.BugStage
	}
	return ""
}

func (x *IssueCreateRequest) GetSubscribers() []string {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

func (x *IssueCreateRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

func (x *IssueCreateRequest) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

func (x *IssueCreateRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type IssueCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *IssueCreateResponse) Reset() {
	*x = IssueCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCreateResponse) ProtoMessage() {}

func (x *IssueCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCreateResponse.ProtoReflect.Descriptor instead.
func (*IssueCreateResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{1}
}

func (x *IssueCreateResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type GetIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetIssueRequest) Reset() {
	*x = GetIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssueRequest) ProtoMessage() {}

func (x *GetIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssueRequest.ProtoReflect.Descriptor instead.
func (*GetIssueRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{2}
}

func (x *GetIssueRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *Issue   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	UserIDs []string `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *GetIssueResponse) Reset() {
	*x = GetIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssueResponse) ProtoMessage() {}

func (x *GetIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssueResponse.ProtoReflect.Descriptor instead.
func (*GetIssueResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3}
}

func (x *GetIssueResponse) GetData() *Issue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetIssueResponse) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type UpdateIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                    *string          `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Content                  *string          `protobuf:"bytes,3,opt,name=content,proto3,oneof" json:"content,omitempty"`
	Priority                 *string          `protobuf:"bytes,4,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Complexity               *string          `protobuf:"bytes,5,opt,name=complexity,proto3,oneof" json:"complexity,omitempty"`
	Severity                 *string          `protobuf:"bytes,6,opt,name=severity,proto3,oneof" json:"severity,omitempty"`
	PlanStartedAt            *string          `protobuf:"bytes,7,opt,name=planStartedAt,proto3,oneof" json:"planStartedAt,omitempty"`
	PlanFinishedAt           *string          `protobuf:"bytes,8,opt,name=planFinishedAt,proto3,oneof" json:"planFinishedAt,omitempty"`
	Assignee                 *string          `protobuf:"bytes,9,opt,name=assignee,proto3,oneof" json:"assignee,omitempty"`
	IterationID              *int64           `protobuf:"varint,10,opt,name=iterationID,proto3,oneof" json:"iterationID,omitempty"`
	Source                   *string          `protobuf:"bytes,11,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Labels                   []string         `protobuf:"bytes,12,rep,name=labels,proto3" json:"labels,omitempty"`
	RelatedIssues            []int64          `protobuf:"varint,13,rep,packed,name=relatedIssues,proto3" json:"relatedIssues,omitempty"`
	TaskType                 *string          `protobuf:"bytes,14,opt,name=taskType,proto3,oneof" json:"taskType,omitempty"`
	BugStage                 *string          `protobuf:"bytes,15,opt,name=bugStage,proto3,oneof" json:"bugStage,omitempty"`
	Owner                    *string          `protobuf:"bytes,16,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	WithChildrenIteration    bool             `protobuf:"varint,17,opt,name=withChildrenIteration,proto3" json:"withChildrenIteration,omitempty"`
	IssueManHour             *IssueManHour    `protobuf:"bytes,18,opt,name=issueManHour,proto3" json:"issueManHour,omitempty"`
	TestPlanCaseRelIDs       []uint64         `protobuf:"varint,19,rep,packed,name=testPlanCaseRelIDs,proto3" json:"testPlanCaseRelIDs,omitempty"`
	RemoveTestPlanCaseRelIDs bool             `protobuf:"varint,20,opt,name=removeTestPlanCaseRelIDs,proto3" json:"removeTestPlanCaseRelIDs,omitempty"`
	State                    *int64           `protobuf:"varint,21,opt,name=state,proto3,oneof" json:"state,omitempty"`
	IdentityInfo             *pb.IdentityInfo `protobuf:"bytes,22,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *UpdateIssueRequest) Reset() {
	*x = UpdateIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssueRequest) ProtoMessage() {}

func (x *UpdateIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssueRequest.ProtoReflect.Descriptor instead.
func (*UpdateIssueRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateIssueRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateIssueRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateIssueRequest) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *UpdateIssueRequest) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *UpdateIssueRequest) GetComplexity() string {
	if x != nil && x.Complexity != nil {
		return *x.Complexity
	}
	return ""
}

func (x *UpdateIssueRequest) GetSeverity() string {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return ""
}

func (x *UpdateIssueRequest) GetPlanStartedAt() string {
	if x != nil && x.PlanStartedAt != nil {
		return *x.PlanStartedAt
	}
	return ""
}

func (x *UpdateIssueRequest) GetPlanFinishedAt() string {
	if x != nil && x.PlanFinishedAt != nil {
		return *x.PlanFinishedAt
	}
	return ""
}

func (x *UpdateIssueRequest) GetAssignee() string {
	if x != nil && x.Assignee != nil {
		return *x.Assignee
	}
	return ""
}

func (x *UpdateIssueRequest) GetIterationID() int64 {
	if x != nil && x.IterationID != nil {
		return *x.IterationID
	}
	return 0
}

func (x *UpdateIssueRequest) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *UpdateIssueRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateIssueRequest) GetRelatedIssues() []int64 {
	if x != nil {
		return x.RelatedIssues
	}
	return nil
}

func (x *UpdateIssueRequest) GetTaskType() string {
	if x != nil && x.TaskType != nil {
		return *x.TaskType
	}
	return ""
}

func (x *UpdateIssueRequest) GetBugStage() string {
	if x != nil && x.BugStage != nil {
		return *x.BugStage
	}
	return ""
}

func (x *UpdateIssueRequest) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *UpdateIssueRequest) GetWithChildrenIteration() bool {
	if x != nil {
		return x.WithChildrenIteration
	}
	return false
}

func (x *UpdateIssueRequest) GetIssueManHour() *IssueManHour {
	if x != nil {
		return x.IssueManHour
	}
	return nil
}

func (x *UpdateIssueRequest) GetTestPlanCaseRelIDs() []uint64 {
	if x != nil {
		return x.TestPlanCaseRelIDs
	}
	return nil
}

func (x *UpdateIssueRequest) GetRemoveTestPlanCaseRelIDs() bool {
	if x != nil {
		return x.RemoveTestPlanCaseRelIDs
	}
	return false
}

func (x *UpdateIssueRequest) GetState() int64 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *UpdateIssueRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type UpdateIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateIssueResponse) Reset() {
	*x = UpdateIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssueResponse) ProtoMessage() {}

func (x *UpdateIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssueResponse.ProtoReflect.Descriptor instead.
func (*UpdateIssueResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateIssueResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type DeleteIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteIssueRequest) Reset() {
	*x = DeleteIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIssueRequest) ProtoMessage() {}

func (x *DeleteIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIssueRequest.ProtoReflect.Descriptor instead.
func (*DeleteIssueRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteIssueRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Issue `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteIssueResponse) Reset() {
	*x = DeleteIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIssueResponse) ProtoMessage() {}

func (x *DeleteIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIssueResponse.ProtoReflect.Descriptor instead.
func (*DeleteIssueResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteIssueResponse) GetData() *Issue {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchUpdateIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All                 bool               `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	Mine                bool               `protobuf:"varint,2,opt,name=mine,proto3" json:"mine,omitempty"`
	Ids                 []uint64           `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Assignee            string             `protobuf:"bytes,4,opt,name=assignee,proto3" json:"assignee,omitempty"`
	State               int64              `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	NewIterationID      int64              `protobuf:"varint,6,opt,name=newIterationID,proto3" json:"newIterationID,omitempty"`
	TaskType            string             `protobuf:"bytes,7,opt,name=taskType,proto3" json:"taskType,omitempty"`
	BugStage            string             `protobuf:"bytes,8,opt,name=bugStage,proto3" json:"bugStage,omitempty"`
	Owner               string             `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	CurrentIterationID  int64              `protobuf:"varint,10,opt,name=currentIterationID,proto3" json:"currentIterationID,omitempty"`
	CurrentIterationIDs []int64            `protobuf:"varint,11,rep,packed,name=currentIterationIDs,proto3" json:"currentIterationIDs,omitempty"`
	Type                IssueTypeEnum_Type `protobuf:"varint,12,opt,name=type,proto3,enum=erda.dop.issue.core.IssueTypeEnum_Type" json:"type,omitempty"`
	ProjectID           uint64             `protobuf:"varint,13,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IdentityInfo        *pb.IdentityInfo   `protobuf:"bytes,14,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *BatchUpdateIssueRequest) Reset() {
	*x = BatchUpdateIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateIssueRequest) ProtoMessage() {}

func (x *BatchUpdateIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateIssueRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateIssueRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{8}
}

func (x *BatchUpdateIssueRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *BatchUpdateIssueRequest) GetMine() bool {
	if x != nil {
		return x.Mine
	}
	return false
}

func (x *BatchUpdateIssueRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *BatchUpdateIssueRequest) GetAssignee() string {
	if x != nil {
		return x.Assignee
	}
	return ""
}

func (x *BatchUpdateIssueRequest) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *BatchUpdateIssueRequest) GetNewIterationID() int64 {
	if x != nil {
		return x.NewIterationID
	}
	return 0
}

func (x *BatchUpdateIssueRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *BatchUpdateIssueRequest) GetBugStage() string {
	if x != nil {
		return x.BugStage
	}
	return ""
}

func (x *BatchUpdateIssueRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *BatchUpdateIssueRequest) GetCurrentIterationID() int64 {
	if x != nil {
		return x.CurrentIterationID
	}
	return 0
}

func (x *BatchUpdateIssueRequest) GetCurrentIterationIDs() []int64 {
	if x != nil {
		return x.CurrentIterationIDs
	}
	return nil
}

func (x *BatchUpdateIssueRequest) GetType() IssueTypeEnum_Type {
	if x != nil {
		return x.Type
	}
	return IssueTypeEnum_REQUIREMENT
}

func (x *BatchUpdateIssueRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *BatchUpdateIssueRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type BatchUpdateIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchUpdateIssueResponse) Reset() {
	*x = BatchUpdateIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateIssueResponse) ProtoMessage() {}

func (x *BatchUpdateIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateIssueResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateIssueResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{9}
}

type UpdateIssueTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID    uint64             `protobuf:"varint,1,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	Id           int64              `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Type         IssueTypeEnum_Type `protobuf:"varint,3,opt,name=type,proto3,enum=erda.dop.issue.core.IssueTypeEnum_Type" json:"type,omitempty"`
	IdentityInfo *pb.IdentityInfo   `protobuf:"bytes,4,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *UpdateIssueTypeRequest) Reset() {
	*x = UpdateIssueTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIssueTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssueTypeRequest) ProtoMessage() {}

func (x *UpdateIssueTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssueTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateIssueTypeRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateIssueTypeRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *UpdateIssueTypeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateIssueTypeRequest) GetType() IssueTypeEnum_Type {
	if x != nil {
		return x.Type
	}
	return IssueTypeEnum_REQUIREMENT
}

func (x *UpdateIssueTypeRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type UpdateIssueTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateIssueTypeResponse) Reset() {
	*x = UpdateIssueTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIssueTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssueTypeResponse) ProtoMessage() {}

func (x *UpdateIssueTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssueTypeResponse.ProtoReflect.Descriptor instead.
func (*UpdateIssueTypeResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateIssueTypeResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type IssueStageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID        int64            `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	IssueType    string           `protobuf:"bytes,2,opt,name=issueType,proto3" json:"issueType,omitempty"`
	List         []*IssueStage    `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	IdentityInfo *pb.IdentityInfo `protobuf:"bytes,4,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *IssueStageRequest) Reset() {
	*x = IssueStageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueStageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueStageRequest) ProtoMessage() {}

func (x *IssueStageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueStageRequest.ProtoReflect.Descriptor instead.
func (*IssueStageRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{12}
}

func (x *IssueStageRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *IssueStageRequest) GetIssueType() string {
	if x != nil {
		return x.IssueType
	}
	return ""
}

func (x *IssueStageRequest) GetList() []*IssueStage {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *IssueStageRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type GetIssueStageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*IssueStage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetIssueStageResponse) Reset() {
	*x = GetIssueStageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssueStageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssueStageResponse) ProtoMessage() {}

func (x *GetIssueStageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssueStageResponse.ProtoReflect.Descriptor instead.
func (*GetIssueStageResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{13}
}

func (x *GetIssueStageResponse) GetData() []*IssueStage {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateIssueStageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateIssueStageResponse) Reset() {
	*x = UpdateIssueStageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIssueStageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssueStageResponse) ProtoMessage() {}

func (x *UpdateIssueStageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssueStageResponse.ProtoReflect.Descriptor instead.
func (*UpdateIssueStageResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{14}
}

type CreateIssuePropertyInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID        int64                    `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ProjectID    int64                    `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IssueID      int64                    `protobuf:"varint,3,opt,name=issueID,proto3" json:"issueID,omitempty"`
	Property     []*IssuePropertyInstance `protobuf:"bytes,4,rep,name=property,proto3" json:"property,omitempty"`
	IdentityInfo *pb.IdentityInfo         `protobuf:"bytes,5,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *CreateIssuePropertyInstanceRequest) Reset() {
	*x = CreateIssuePropertyInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIssuePropertyInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuePropertyInstanceRequest) ProtoMessage() {}

func (x *CreateIssuePropertyInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuePropertyInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateIssuePropertyInstanceRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{15}
}

func (x *CreateIssuePropertyInstanceRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CreateIssuePropertyInstanceRequest) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *CreateIssuePropertyInstanceRequest) GetIssueID() int64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *CreateIssuePropertyInstanceRequest) GetProperty() []*IssuePropertyInstance {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *CreateIssuePropertyInstanceRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type CreateIssuePropertyInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateIssuePropertyInstanceResponse) Reset() {
	*x = CreateIssuePropertyInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIssuePropertyInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuePropertyInstanceResponse) ProtoMessage() {}

func (x *CreateIssuePropertyInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuePropertyInstanceResponse.ProtoReflect.Descriptor instead.
func (*CreateIssuePropertyInstanceResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{16}
}

func (x *CreateIssuePropertyInstanceResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type GetIssuePropertyInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID             int64            `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	IssueID           int64            `protobuf:"varint,2,opt,name=issueID,proto3" json:"issueID,omitempty"`
	PropertyIssueType string           `protobuf:"bytes,3,opt,name=propertyIssueType,proto3" json:"propertyIssueType,omitempty"`
	IdentityInfo      *pb.IdentityInfo `protobuf:"bytes,4,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *GetIssuePropertyInstanceRequest) Reset() {
	*x = GetIssuePropertyInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssuePropertyInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuePropertyInstanceRequest) ProtoMessage() {}

func (x *GetIssuePropertyInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuePropertyInstanceRequest.ProtoReflect.Descriptor instead.
func (*GetIssuePropertyInstanceRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{17}
}

func (x *GetIssuePropertyInstanceRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *GetIssuePropertyInstanceRequest) GetIssueID() int64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *GetIssuePropertyInstanceRequest) GetPropertyIssueType() string {
	if x != nil {
		return x.PropertyIssueType
	}
	return ""
}

func (x *GetIssuePropertyInstanceRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type GetIssuePropertyInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *IssueAndPropertyAndValue `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetIssuePropertyInstanceResponse) Reset() {
	*x = GetIssuePropertyInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssuePropertyInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuePropertyInstanceResponse) ProtoMessage() {}

func (x *GetIssuePropertyInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuePropertyInstanceResponse.ProtoReflect.Descriptor instead.
func (*GetIssuePropertyInstanceResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{18}
}

func (x *GetIssuePropertyInstanceResponse) GetData() *IssueAndPropertyAndValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateIssuePropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeID           int64                                   `protobuf:"varint,1,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	ScopeType         ScopeTypeEnum_ScopeType                 `protobuf:"varint,2,opt,name=scopeType,proto3,enum=erda.dop.issue.core.ScopeTypeEnum_ScopeType" json:"scopeType,omitempty"`
	OrgID             int64                                   `protobuf:"varint,3,opt,name=orgID,proto3" json:"orgID,omitempty"`
	PropertyName      string                                  `protobuf:"bytes,4,opt,name=propertyName,proto3" json:"propertyName,omitempty"`
	DisplayName       string                                  `protobuf:"bytes,5,opt,name=displayName,proto3" json:"displayName,omitempty"`
	PropertyType      PropertyTypeEnum_PropertyType           `protobuf:"varint,6,opt,name=propertyType,proto3,enum=erda.dop.issue.core.PropertyTypeEnum_PropertyType" json:"propertyType,omitempty"`
	Required          bool                                    `protobuf:"varint,7,opt,name=required,proto3" json:"required,omitempty"`
	PropertyIssueType PropertyIssueTypeEnum_PropertyIssueType `protobuf:"varint,8,opt,name=propertyIssueType,proto3,enum=erda.dop.issue.core.PropertyIssueTypeEnum_PropertyIssueType" json:"propertyIssueType,omitempty"`
	EnumeratedValues  []*Enumerate                            `protobuf:"bytes,9,rep,name=enumeratedValues,proto3" json:"enumeratedValues,omitempty"`
	Relation          int64                                   `protobuf:"varint,10,opt,name=relation,proto3" json:"relation,omitempty"`
	IdentityInfo      *pb.IdentityInfo                        `protobuf:"bytes,11,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *CreateIssuePropertyRequest) Reset() {
	*x = CreateIssuePropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIssuePropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuePropertyRequest) ProtoMessage() {}

func (x *CreateIssuePropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuePropertyRequest.ProtoReflect.Descriptor instead.
func (*CreateIssuePropertyRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{19}
}

func (x *CreateIssuePropertyRequest) GetScopeID() int64 {
	if x != nil {
		return x.ScopeID
	}
	return 0
}

func (x *CreateIssuePropertyRequest) GetScopeType() ScopeTypeEnum_ScopeType {
	if x != nil {
		return x.ScopeType
	}
	return ScopeTypeEnum_sys
}

func (x *CreateIssuePropertyRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CreateIssuePropertyRequest) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *CreateIssuePropertyRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateIssuePropertyRequest) GetPropertyType() PropertyTypeEnum_PropertyType {
	if x != nil {
		return x.PropertyType
	}
	return PropertyTypeEnum_Text
}

func (x *CreateIssuePropertyRequest) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *CreateIssuePropertyRequest) GetPropertyIssueType() PropertyIssueTypeEnum_PropertyIssueType {
	if x != nil {
		return x.PropertyIssueType
	}
	return PropertyIssueTypeEnum_REQUIREMENT
}

func (x *CreateIssuePropertyRequest) GetEnumeratedValues() []*Enumerate {
	if x != nil {
		return x.EnumeratedValues
	}
	return nil
}

func (x *CreateIssuePropertyRequest) GetRelation() int64 {
	if x != nil {
		return x.Relation
	}
	return 0
}

func (x *CreateIssuePropertyRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type CreateIssuePropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *IssuePropertyIndex `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateIssuePropertyResponse) Reset() {
	*x = CreateIssuePropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIssuePropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssuePropertyResponse) ProtoMessage() {}

func (x *CreateIssuePropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssuePropertyResponse.ProtoReflect.Descriptor instead.
func (*CreateIssuePropertyResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{20}
}

func (x *CreateIssuePropertyResponse) GetData() *IssuePropertyIndex {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteIssuePropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID        int64            `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	PropertyID   int64            `protobuf:"varint,2,opt,name=propertyID,proto3" json:"propertyID,omitempty"`
	IdentityInfo *pb.IdentityInfo `protobuf:"bytes,3,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *DeleteIssuePropertyRequest) Reset() {
	*x = DeleteIssuePropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIssuePropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIssuePropertyRequest) ProtoMessage() {}

func (x *DeleteIssuePropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIssuePropertyRequest.ProtoReflect.Descriptor instead.
func (*DeleteIssuePropertyRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteIssuePropertyRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *DeleteIssuePropertyRequest) GetPropertyID() int64 {
	if x != nil {
		return x.PropertyID
	}
	return 0
}

func (x *DeleteIssuePropertyRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type DeleteIssuePropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *IssuePropertyIndex `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteIssuePropertyResponse) Reset() {
	*x = DeleteIssuePropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIssuePropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIssuePropertyResponse) ProtoMessage() {}

func (x *DeleteIssuePropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIssuePropertyResponse.ProtoReflect.Descriptor instead.
func (*DeleteIssuePropertyResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteIssuePropertyResponse) GetData() *IssuePropertyIndex {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateIssuePropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyID        int64                                   `protobuf:"varint,1,opt,name=propertyID,proto3" json:"propertyID,omitempty"`
	ScopeID           int64                                   `protobuf:"varint,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	ScopeType         ScopeTypeEnum_ScopeType                 `protobuf:"varint,3,opt,name=scopeType,proto3,enum=erda.dop.issue.core.ScopeTypeEnum_ScopeType" json:"scopeType,omitempty"`
	OrgID             int64                                   `protobuf:"varint,4,opt,name=orgID,proto3" json:"orgID,omitempty"`
	PropertyName      string                                  `protobuf:"bytes,5,opt,name=propertyName,proto3" json:"propertyName,omitempty"`
	DisplayName       string                                  `protobuf:"bytes,6,opt,name=displayName,proto3" json:"displayName,omitempty"`
	PropertyType      PropertyTypeEnum_PropertyType           `protobuf:"varint,7,opt,name=propertyType,proto3,enum=erda.dop.issue.core.PropertyTypeEnum_PropertyType" json:"propertyType,omitempty"`
	Required          bool                                    `protobuf:"varint,8,opt,name=required,proto3" json:"required,omitempty"`
	PropertyIssueType PropertyIssueTypeEnum_PropertyIssueType `protobuf:"varint,9,opt,name=propertyIssueType,proto3,enum=erda.dop.issue.core.PropertyIssueTypeEnum_PropertyIssueType" json:"propertyIssueType,omitempty"`
	Relation          int64                                   `protobuf:"varint,10,opt,name=relation,proto3" json:"relation,omitempty"`
	Index             int64                                   `protobuf:"varint,11,opt,name=index,proto3" json:"index,omitempty"`
	EnumeratedValues  []*Enumerate                            `protobuf:"bytes,12,rep,name=enumeratedValues,proto3" json:"enumeratedValues,omitempty"`
	Values            []int64                                 `protobuf:"varint,13,rep,packed,name=values,proto3" json:"values,omitempty"`
	RelatedIssue      []string                                `protobuf:"bytes,14,rep,name=relatedIssue,proto3" json:"relatedIssue,omitempty"`
	IdentityInfo      *pb.IdentityInfo                        `protobuf:"bytes,15,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *UpdateIssuePropertyRequest) Reset() {
	*x = UpdateIssuePropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIssuePropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssuePropertyRequest) ProtoMessage() {}

func (x *UpdateIssuePropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssuePropertyRequest.ProtoReflect.Descriptor instead.
func (*UpdateIssuePropertyRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateIssuePropertyRequest) GetPropertyID() int64 {
	if x != nil {
		return x.PropertyID
	}
	return 0
}

func (x *UpdateIssuePropertyRequest) GetScopeID() int64 {
	if x != nil {
		return x.ScopeID
	}
	return 0
}

func (x *UpdateIssuePropertyRequest) GetScopeType() ScopeTypeEnum_ScopeType {
	if x != nil {
		return x.ScopeType
	}
	return ScopeTypeEnum_sys
}

func (x *UpdateIssuePropertyRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *UpdateIssuePropertyRequest) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *UpdateIssuePropertyRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UpdateIssuePropertyRequest) GetPropertyType() PropertyTypeEnum_PropertyType {
	if x != nil {
		return x.PropertyType
	}
	return PropertyTypeEnum_Text
}

func (x *UpdateIssuePropertyRequest) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *UpdateIssuePropertyRequest) GetPropertyIssueType() PropertyIssueTypeEnum_PropertyIssueType {
	if x != nil {
		return x.PropertyIssueType
	}
	return PropertyIssueTypeEnum_REQUIREMENT
}

func (x *UpdateIssuePropertyRequest) GetRelation() int64 {
	if x != nil {
		return x.Relation
	}
	return 0
}

func (x *UpdateIssuePropertyRequest) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *UpdateIssuePropertyRequest) GetEnumeratedValues() []*Enumerate {
	if x != nil {
		return x.EnumeratedValues
	}
	return nil
}

func (x *UpdateIssuePropertyRequest) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *UpdateIssuePropertyRequest) GetRelatedIssue() []string {
	if x != nil {
		return x.RelatedIssue
	}
	return nil
}

func (x *UpdateIssuePropertyRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type UpdateIssuePropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *IssuePropertyIndex `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateIssuePropertyResponse) Reset() {
	*x = UpdateIssuePropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIssuePropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssuePropertyResponse) ProtoMessage() {}

func (x *UpdateIssuePropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssuePropertyResponse.ProtoReflect.Descriptor instead.
func (*UpdateIssuePropertyResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateIssuePropertyResponse) GetData() *IssuePropertyIndex {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetIssuePropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID             int64            `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	PropertyIssueType string           `protobuf:"bytes,2,opt,name=propertyIssueType,proto3" json:"propertyIssueType,omitempty"`
	PropertyName      string           `protobuf:"bytes,3,opt,name=propertyName,proto3" json:"propertyName,omitempty"`
	IdentityInfo      *pb.IdentityInfo `protobuf:"bytes,4,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *GetIssuePropertyRequest) Reset() {
	*x = GetIssuePropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssuePropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuePropertyRequest) ProtoMessage() {}

func (x *GetIssuePropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuePropertyRequest.ProtoReflect.Descriptor instead.
func (*GetIssuePropertyRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{25}
}

func (x *GetIssuePropertyRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *GetIssuePropertyRequest) GetPropertyIssueType() string {
	if x != nil {
		return x.PropertyIssueType
	}
	return ""
}

func (x *GetIssuePropertyRequest) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *GetIssuePropertyRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type GetIssuePropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*IssuePropertyIndex `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetIssuePropertyResponse) Reset() {
	*x = GetIssuePropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssuePropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuePropertyResponse) ProtoMessage() {}

func (x *GetIssuePropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuePropertyResponse.ProtoReflect.Descriptor instead.
func (*GetIssuePropertyResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{26}
}

func (x *GetIssuePropertyResponse) GetData() []*IssuePropertyIndex {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateIssuePropertiesIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID        int64                 `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Data         []*IssuePropertyIndex `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	IdentityInfo *pb.IdentityInfo      `protobuf:"bytes,3,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *UpdateIssuePropertiesIndexRequest) Reset() {
	*x = UpdateIssuePropertiesIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIssuePropertiesIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssuePropertiesIndexRequest) ProtoMessage() {}

func (x *UpdateIssuePropertiesIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssuePropertiesIndexRequest.ProtoReflect.Descriptor instead.
func (*UpdateIssuePropertiesIndexRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateIssuePropertiesIndexRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *UpdateIssuePropertiesIndexRequest) GetData() []*IssuePropertyIndex {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateIssuePropertiesIndexRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type UpdateIssuePropertiesIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*IssuePropertyIndex `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateIssuePropertiesIndexResponse) Reset() {
	*x = UpdateIssuePropertiesIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIssuePropertiesIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssuePropertiesIndexResponse) ProtoMessage() {}

func (x *UpdateIssuePropertiesIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssuePropertiesIndexResponse.ProtoReflect.Descriptor instead.
func (*UpdateIssuePropertiesIndexResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateIssuePropertiesIndexResponse) GetData() []*IssuePropertyIndex {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetIssuePropertyUpdateTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID int64 `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
}

func (x *GetIssuePropertyUpdateTimeRequest) Reset() {
	*x = GetIssuePropertyUpdateTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssuePropertyUpdateTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuePropertyUpdateTimeRequest) ProtoMessage() {}

func (x *GetIssuePropertyUpdateTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuePropertyUpdateTimeRequest.ProtoReflect.Descriptor instead.
func (*GetIssuePropertyUpdateTimeRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{29}
}

func (x *GetIssuePropertyUpdateTimeRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

type GetIssuePropertyUpdateTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *IssuePropertyUpdateTimes `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetIssuePropertyUpdateTimeResponse) Reset() {
	*x = GetIssuePropertyUpdateTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssuePropertyUpdateTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuePropertyUpdateTimeResponse) ProtoMessage() {}

func (x *GetIssuePropertyUpdateTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuePropertyUpdateTimeResponse.ProtoReflect.Descriptor instead.
func (*GetIssuePropertyUpdateTimeResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{30}
}

func (x *GetIssuePropertyUpdateTimeResponse) GetData() *IssuePropertyUpdateTimes {
	if x != nil {
		return x.Data
	}
	return nil
}

type SubscribeIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubscribeIssueRequest) Reset() {
	*x = SubscribeIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeIssueRequest) ProtoMessage() {}

func (x *SubscribeIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeIssueRequest.ProtoReflect.Descriptor instead.
func (*SubscribeIssueRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{31}
}

func (x *SubscribeIssueRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SubscribeIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SubscribeIssueResponse) Reset() {
	*x = SubscribeIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeIssueResponse) ProtoMessage() {}

func (x *SubscribeIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeIssueResponse.ProtoReflect.Descriptor instead.
func (*SubscribeIssueResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{32}
}

func (x *SubscribeIssueResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type UnsubscribeIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UnsubscribeIssueRequest) Reset() {
	*x = UnsubscribeIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeIssueRequest) ProtoMessage() {}

func (x *UnsubscribeIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeIssueRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeIssueRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{33}
}

func (x *UnsubscribeIssueRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UnsubscribeIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UnsubscribeIssueResponse) Reset() {
	*x = UnsubscribeIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeIssueResponse) ProtoMessage() {}

func (x *UnsubscribeIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeIssueResponse.ProtoReflect.Descriptor instead.
func (*UnsubscribeIssueResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{34}
}

func (x *UnsubscribeIssueResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type BatchUpdateIssueSubscriberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscribers         []string         `protobuf:"bytes,1,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
	IssueID             int64            `protobuf:"varint,2,opt,name=issueID,json=-,proto3" json:"issueID,omitempty"`
	IdentityInfo        *pb.IdentityInfo `protobuf:"bytes,3,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
	Id                  string           `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	IsIncrementalUpdate bool             `protobuf:"varint,5,opt,name=isIncrementalUpdate,proto3" json:"isIncrementalUpdate,omitempty"`
}

func (x *BatchUpdateIssueSubscriberRequest) Reset() {
	*x = BatchUpdateIssueSubscriberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateIssueSubscriberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateIssueSubscriberRequest) ProtoMessage() {}

func (x *BatchUpdateIssueSubscriberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateIssueSubscriberRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateIssueSubscriberRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{35}
}

func (x *BatchUpdateIssueSubscriberRequest) GetSubscribers() []string {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

func (x *BatchUpdateIssueSubscriberRequest) GetIssueID() int64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *BatchUpdateIssueSubscriberRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

func (x *BatchUpdateIssueSubscriberRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchUpdateIssueSubscriberRequest) GetIsIncrementalUpdate() bool {
	if x != nil {
		return x.IsIncrementalUpdate
	}
	return false
}

type BatchUpdateIssueSubscriberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BatchUpdateIssueSubscriberResponse) Reset() {
	*x = BatchUpdateIssueSubscriberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateIssueSubscriberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateIssueSubscriberResponse) ProtoMessage() {}

func (x *BatchUpdateIssueSubscriberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateIssueSubscriberResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateIssueSubscriberResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{36}
}

func (x *BatchUpdateIssueSubscriberResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt         *timestamppb.Timestamp          `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt         *timestamppb.Timestamp          `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	PlanStartedAt     *timestamppb.Timestamp          `protobuf:"bytes,4,opt,name=planStartedAt,proto3" json:"planStartedAt,omitempty"`
	PlanFinishedAt    *timestamppb.Timestamp          `protobuf:"bytes,5,opt,name=planFinishedAt,proto3" json:"planFinishedAt,omitempty"`
	ProjectID         uint64                          `protobuf:"varint,6,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IterationID       int64                           `protobuf:"varint,7,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	AppID             uint64                          `protobuf:"varint,8,opt,name=appID,proto3" json:"appID,omitempty"`
	RequirementID     int64                           `protobuf:"varint,9,opt,name=requirementID,proto3" json:"requirementID,omitempty"`
	RequirementTitle  string                          `protobuf:"bytes,10,opt,name=requirementTitle,proto3" json:"requirementTitle,omitempty"`
	Title             string                          `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	Content           string                          `protobuf:"bytes,12,opt,name=content,proto3" json:"content,omitempty"`
	State             int64                           `protobuf:"varint,13,opt,name=state,proto3" json:"state,omitempty"`
	Priority          IssuePriorityEnum_Priority      `protobuf:"varint,14,opt,name=priority,proto3,enum=erda.dop.issue.core.IssuePriorityEnum_Priority" json:"priority,omitempty"`
	Complexity        IssueComplexityEnum_Complextity `protobuf:"varint,15,opt,name=complexity,proto3,enum=erda.dop.issue.core.IssueComplexityEnum_Complextity" json:"complexity,omitempty"`
	Severity          IssueSeverityEnum_Severity      `protobuf:"varint,16,opt,name=severity,proto3,enum=erda.dop.issue.core.IssueSeverityEnum_Severity" json:"severity,omitempty"`
	Assignee          string                          `protobuf:"bytes,17,opt,name=assignee,proto3" json:"assignee,omitempty"`
	Creator           string                          `protobuf:"bytes,18,opt,name=creator,proto3" json:"creator,omitempty"`
	IssueButton       []*IssueStateButton             `protobuf:"bytes,19,rep,name=issueButton,proto3" json:"issueButton,omitempty"`
	IssueSummary      *IssueSummary                   `protobuf:"bytes,20,opt,name=issueSummary,proto3" json:"issueSummary,omitempty"`
	Labels            []string                        `protobuf:"bytes,21,rep,name=labels,proto3" json:"labels,omitempty"`
	LabelDetails      []*ProjectLabel                 `protobuf:"bytes,22,rep,name=labelDetails,proto3" json:"labelDetails,omitempty"`
	IssueManHour      *IssueManHour                   `protobuf:"bytes,23,opt,name=issueManHour,proto3" json:"issueManHour,omitempty"`
	Source            string                          `protobuf:"bytes,24,opt,name=source,proto3" json:"source,omitempty"`
	TaskType          string                          `protobuf:"bytes,25,opt,name=taskType,proto3" json:"taskType,omitempty"`
	BugStage          string                          `protobuf:"bytes,26,opt,name=bugStage,proto3" json:"bugStage,omitempty"`
	Owner             string                          `protobuf:"bytes,27,opt,name=owner,proto3" json:"owner,omitempty"`
	Subscribers       []string                        `protobuf:"bytes,28,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
	FinishTime        *timestamppb.Timestamp          `protobuf:"bytes,29,opt,name=finishTime,proto3" json:"finishTime,omitempty"`
	TestPlanCaseRels  []*TestPlanCaseRel              `protobuf:"bytes,30,rep,name=testPlanCaseRels,proto3" json:"testPlanCaseRels,omitempty"`
	RelatedIssueIDs   []uint64                        `protobuf:"varint,31,rep,packed,name=relatedIssueIDs,proto3" json:"relatedIssueIDs,omitempty"`
	ReopenCount       int32                           `protobuf:"varint,32,opt,name=reopenCount,proto3" json:"reopenCount,omitempty"`
	Type              IssueTypeEnum_Type              `protobuf:"varint,33,opt,name=type,proto3,enum=erda.dop.issue.core.IssueTypeEnum_Type" json:"type,omitempty"`
	PropertyInstances []*IssuePropertyExtraProperty   `protobuf:"bytes,34,rep,name=propertyInstances,proto3" json:"propertyInstances,omitempty"`
}

func (x *Issue) Reset() {
	*x = Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue) ProtoMessage() {}

func (x *Issue) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue.ProtoReflect.Descriptor instead.
func (*Issue) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{37}
}

func (x *Issue) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Issue) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Issue) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Issue) GetPlanStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlanStartedAt
	}
	return nil
}

func (x *Issue) GetPlanFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlanFinishedAt
	}
	return nil
}

func (x *Issue) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *Issue) GetIterationID() int64 {
	if x != nil {
		return x.IterationID
	}
	return 0
}

func (x *Issue) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *Issue) GetRequirementID() int64 {
	if x != nil {
		return x.RequirementID
	}
	return 0
}

func (x *Issue) GetRequirementTitle() string {
	if x != nil {
		return x.RequirementTitle
	}
	return ""
}

func (x *Issue) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Issue) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Issue) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Issue) GetPriority() IssuePriorityEnum_Priority {
	if x != nil {
		return x.Priority
	}
	return IssuePriorityEnum_NORMAL
}

func (x *Issue) GetComplexity() IssueComplexityEnum_Complextity {
	if x != nil {
		return x.Complexity
	}
	return IssueComplexityEnum_NORMAL
}

func (x *Issue) GetSeverity() IssueSeverityEnum_Severity {
	if x != nil {
		return x.Severity
	}
	return IssueSeverityEnum_NORMAL
}

func (x *Issue) GetAssignee() string {
	if x != nil {
		return x.Assignee
	}
	return ""
}

func (x *Issue) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Issue) GetIssueButton() []*IssueStateButton {
	if x != nil {
		return x.IssueButton
	}
	return nil
}

func (x *Issue) GetIssueSummary() *IssueSummary {
	if x != nil {
		return x.IssueSummary
	}
	return nil
}

func (x *Issue) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Issue) GetLabelDetails() []*ProjectLabel {
	if x != nil {
		return x.LabelDetails
	}
	return nil
}

func (x *Issue) GetIssueManHour() *IssueManHour {
	if x != nil {
		return x.IssueManHour
	}
	return nil
}

func (x *Issue) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Issue) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *Issue) GetBugStage() string {
	if x != nil {
		return x.BugStage
	}
	return ""
}

func (x *Issue) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Issue) GetSubscribers() []string {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

func (x *Issue) GetFinishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishTime
	}
	return nil
}

func (x *Issue) GetTestPlanCaseRels() []*TestPlanCaseRel {
	if x != nil {
		return x.TestPlanCaseRels
	}
	return nil
}

func (x *Issue) GetRelatedIssueIDs() []uint64 {
	if x != nil {
		return x.RelatedIssueIDs
	}
	return nil
}

func (x *Issue) GetReopenCount() int32 {
	if x != nil {
		return x.ReopenCount
	}
	return 0
}

func (x *Issue) GetType() IssueTypeEnum_Type {
	if x != nil {
		return x.Type
	}
	return IssueTypeEnum_REQUIREMENT
}

func (x *Issue) GetPropertyInstances() []*IssuePropertyExtraProperty {
	if x != nil {
		return x.PropertyInstances
	}
	return nil
}

type IssueStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IssueStage) Reset() {
	*x = IssueStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueStage) ProtoMessage() {}

func (x *IssueStage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueStage.ProtoReflect.Descriptor instead.
func (*IssueStage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{38}
}

func (x *IssueStage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IssueStage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IssueStage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type IssuePropertyInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyID               int64                                   `protobuf:"varint,1,opt,name=propertyID,proto3" json:"propertyID,omitempty"`
	ScopeID                  int64                                   `protobuf:"varint,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	ScopeType                ScopeTypeEnum_ScopeType                 `protobuf:"varint,3,opt,name=scopeType,proto3,enum=erda.dop.issue.core.ScopeTypeEnum_ScopeType" json:"scopeType,omitempty"`
	OrgID                    int64                                   `protobuf:"varint,4,opt,name=orgID,proto3" json:"orgID,omitempty"`
	PropertyName             string                                  `protobuf:"bytes,5,opt,name=propertyName,proto3" json:"propertyName,omitempty"`
	DisplayName              string                                  `protobuf:"bytes,6,opt,name=displayName,proto3" json:"displayName,omitempty"`
	PropertyType             PropertyTypeEnum_PropertyType           `protobuf:"varint,7,opt,name=propertyType,proto3,enum=erda.dop.issue.core.PropertyTypeEnum_PropertyType" json:"propertyType,omitempty"`
	Required                 bool                                    `protobuf:"varint,8,opt,name=required,proto3" json:"required,omitempty"`
	PropertyIssueType        PropertyIssueTypeEnum_PropertyIssueType `protobuf:"varint,9,opt,name=propertyIssueType,proto3,enum=erda.dop.issue.core.PropertyIssueTypeEnum_PropertyIssueType" json:"propertyIssueType,omitempty"`
	Relation                 int64                                   `protobuf:"varint,10,opt,name=relation,proto3" json:"relation,omitempty"`
	Index                    int64                                   `protobuf:"varint,11,opt,name=index,proto3" json:"index,omitempty"`
	EnumeratedValues         []*Enumerate                            `protobuf:"bytes,12,rep,name=enumeratedValues,proto3" json:"enumeratedValues,omitempty"`
	Values                   []int64                                 `protobuf:"varint,13,rep,packed,name=values,proto3" json:"values,omitempty"`
	RelatedIssue             []string                                `protobuf:"bytes,14,rep,name=relatedIssue,proto3" json:"relatedIssue,omitempty"`
	ArbitraryValue           *structpb.Value                         `protobuf:"bytes,15,opt,name=arbitraryValue,proto3" json:"arbitraryValue,omitempty"`
	PropertyEnumeratedValues []*PropertyEnumerate                    `protobuf:"bytes,16,rep,name=propertyEnumeratedValues,proto3" json:"propertyEnumeratedValues,omitempty"`
}

func (x *IssuePropertyInstance) Reset() {
	*x = IssuePropertyInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuePropertyInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePropertyInstance) ProtoMessage() {}

func (x *IssuePropertyInstance) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePropertyInstance.ProtoReflect.Descriptor instead.
func (*IssuePropertyInstance) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{39}
}

func (x *IssuePropertyInstance) GetPropertyID() int64 {
	if x != nil {
		return x.PropertyID
	}
	return 0
}

func (x *IssuePropertyInstance) GetScopeID() int64 {
	if x != nil {
		return x.ScopeID
	}
	return 0
}

func (x *IssuePropertyInstance) GetScopeType() ScopeTypeEnum_ScopeType {
	if x != nil {
		return x.ScopeType
	}
	return ScopeTypeEnum_sys
}

func (x *IssuePropertyInstance) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *IssuePropertyInstance) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *IssuePropertyInstance) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *IssuePropertyInstance) GetPropertyType() PropertyTypeEnum_PropertyType {
	if x != nil {
		return x.PropertyType
	}
	return PropertyTypeEnum_Text
}

func (x *IssuePropertyInstance) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *IssuePropertyInstance) GetPropertyIssueType() PropertyIssueTypeEnum_PropertyIssueType {
	if x != nil {
		return x.PropertyIssueType
	}
	return PropertyIssueTypeEnum_REQUIREMENT
}

func (x *IssuePropertyInstance) GetRelation() int64 {
	if x != nil {
		return x.Relation
	}
	return 0
}

func (x *IssuePropertyInstance) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *IssuePropertyInstance) GetEnumeratedValues() []*Enumerate {
	if x != nil {
		return x.EnumeratedValues
	}
	return nil
}

func (x *IssuePropertyInstance) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *IssuePropertyInstance) GetRelatedIssue() []string {
	if x != nil {
		return x.RelatedIssue
	}
	return nil
}

func (x *IssuePropertyInstance) GetArbitraryValue() *structpb.Value {
	if x != nil {
		return x.ArbitraryValue
	}
	return nil
}

func (x *IssuePropertyInstance) GetPropertyEnumeratedValues() []*PropertyEnumerate {
	if x != nil {
		return x.PropertyEnumeratedValues
	}
	return nil
}

type IssuePropertyIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyID        int64                                   `protobuf:"varint,1,opt,name=propertyID,proto3" json:"propertyID,omitempty"`
	ScopeID           int64                                   `protobuf:"varint,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	ScopeType         ScopeTypeEnum_ScopeType                 `protobuf:"varint,3,opt,name=scopeType,proto3,enum=erda.dop.issue.core.ScopeTypeEnum_ScopeType" json:"scopeType,omitempty"`
	OrgID             int64                                   `protobuf:"varint,4,opt,name=orgID,proto3" json:"orgID,omitempty"`
	PropertyName      string                                  `protobuf:"bytes,5,opt,name=propertyName,proto3" json:"propertyName,omitempty"`
	DisplayName       string                                  `protobuf:"bytes,6,opt,name=displayName,proto3" json:"displayName,omitempty"`
	PropertyType      PropertyTypeEnum_PropertyType           `protobuf:"varint,7,opt,name=propertyType,proto3,enum=erda.dop.issue.core.PropertyTypeEnum_PropertyType" json:"propertyType,omitempty"`
	Required          bool                                    `protobuf:"varint,8,opt,name=required,proto3" json:"required,omitempty"`
	PropertyIssueType PropertyIssueTypeEnum_PropertyIssueType `protobuf:"varint,9,opt,name=propertyIssueType,proto3,enum=erda.dop.issue.core.PropertyIssueTypeEnum_PropertyIssueType" json:"propertyIssueType,omitempty"`
	Relation          int64                                   `protobuf:"varint,10,opt,name=relation,proto3" json:"relation,omitempty"`
	Index             int64                                   `protobuf:"varint,11,opt,name=index,proto3" json:"index,omitempty"`
	EnumeratedValues  []*Enumerate                            `protobuf:"bytes,12,rep,name=enumeratedValues,proto3" json:"enumeratedValues,omitempty"`
	Values            []int64                                 `protobuf:"varint,13,rep,packed,name=values,proto3" json:"values,omitempty"`
	RelatedIssue      []string                                `protobuf:"bytes,14,rep,name=relatedIssue,proto3" json:"relatedIssue,omitempty"` // related issue types
}

func (x *IssuePropertyIndex) Reset() {
	*x = IssuePropertyIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuePropertyIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePropertyIndex) ProtoMessage() {}

func (x *IssuePropertyIndex) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePropertyIndex.ProtoReflect.Descriptor instead.
func (*IssuePropertyIndex) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{40}
}

func (x *IssuePropertyIndex) GetPropertyID() int64 {
	if x != nil {
		return x.PropertyID
	}
	return 0
}

func (x *IssuePropertyIndex) GetScopeID() int64 {
	if x != nil {
		return x.ScopeID
	}
	return 0
}

func (x *IssuePropertyIndex) GetScopeType() ScopeTypeEnum_ScopeType {
	if x != nil {
		return x.ScopeType
	}
	return ScopeTypeEnum_sys
}

func (x *IssuePropertyIndex) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *IssuePropertyIndex) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *IssuePropertyIndex) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *IssuePropertyIndex) GetPropertyType() PropertyTypeEnum_PropertyType {
	if x != nil {
		return x.PropertyType
	}
	return PropertyTypeEnum_Text
}

func (x *IssuePropertyIndex) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *IssuePropertyIndex) GetPropertyIssueType() PropertyIssueTypeEnum_PropertyIssueType {
	if x != nil {
		return x.PropertyIssueType
	}
	return PropertyIssueTypeEnum_REQUIREMENT
}

func (x *IssuePropertyIndex) GetRelation() int64 {
	if x != nil {
		return x.Relation
	}
	return 0
}

func (x *IssuePropertyIndex) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *IssuePropertyIndex) GetEnumeratedValues() []*Enumerate {
	if x != nil {
		return x.EnumeratedValues
	}
	return nil
}

func (x *IssuePropertyIndex) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *IssuePropertyIndex) GetRelatedIssue() []string {
	if x != nil {
		return x.RelatedIssue
	}
	return nil
}

type PropertyEnumerate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PropertyEnumerate) Reset() {
	*x = PropertyEnumerate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyEnumerate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyEnumerate) ProtoMessage() {}

func (x *PropertyEnumerate) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyEnumerate.ProtoReflect.Descriptor instead.
func (*PropertyEnumerate) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{41}
}

func (x *PropertyEnumerate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PropertyEnumerate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ScopeTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScopeTypeEnum) Reset() {
	*x = ScopeTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeTypeEnum) ProtoMessage() {}

func (x *ScopeTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeTypeEnum.ProtoReflect.Descriptor instead.
func (*ScopeTypeEnum) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{42}
}

type IssueTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueTypeEnum) Reset() {
	*x = IssueTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTypeEnum) ProtoMessage() {}

func (x *IssueTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTypeEnum.ProtoReflect.Descriptor instead.
func (*IssueTypeEnum) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{43}
}

type IssuePriorityEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssuePriorityEnum) Reset() {
	*x = IssuePriorityEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuePriorityEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePriorityEnum) ProtoMessage() {}

func (x *IssuePriorityEnum) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePriorityEnum.ProtoReflect.Descriptor instead.
func (*IssuePriorityEnum) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{44}
}

type IssueComplexityEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueComplexityEnum) Reset() {
	*x = IssueComplexityEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueComplexityEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueComplexityEnum) ProtoMessage() {}

func (x *IssueComplexityEnum) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueComplexityEnum.ProtoReflect.Descriptor instead.
func (*IssueComplexityEnum) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{45}
}

type IssueSeverityEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueSeverityEnum) Reset() {
	*x = IssueSeverityEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueSeverityEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSeverityEnum) ProtoMessage() {}

func (x *IssueSeverityEnum) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSeverityEnum.ProtoReflect.Descriptor instead.
func (*IssueSeverityEnum) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{46}
}

type IssueStateBelongEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueStateBelongEnum) Reset() {
	*x = IssueStateBelongEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueStateBelongEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueStateBelongEnum) ProtoMessage() {}

func (x *IssueStateBelongEnum) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueStateBelongEnum.ProtoReflect.Descriptor instead.
func (*IssueStateBelongEnum) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{47}
}

type ProjectLabelTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProjectLabelTypeEnum) Reset() {
	*x = ProjectLabelTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLabelTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLabelTypeEnum) ProtoMessage() {}

func (x *ProjectLabelTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLabelTypeEnum.ProtoReflect.Descriptor instead.
func (*ProjectLabelTypeEnum) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{48}
}

type IssueManHour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstimateTime            int64  `protobuf:"varint,1,opt,name=estimateTime,proto3" json:"estimateTime,omitempty"`
	ThisElapsedTime         int64  `protobuf:"varint,2,opt,name=thisElapsedTime,proto3" json:"thisElapsedTime,omitempty"`
	ElapsedTime             int64  `protobuf:"varint,3,opt,name=elapsedTime,proto3" json:"elapsedTime,omitempty"`
	RemainingTime           int64  `protobuf:"varint,4,opt,name=remainingTime,proto3" json:"remainingTime,omitempty"`
	StartTime               string `protobuf:"bytes,5,opt,name=startTime,proto3" json:"startTime,omitempty"`
	WorkContent             string `protobuf:"bytes,6,opt,name=workContent,proto3" json:"workContent,omitempty"`
	IsModifiedRemainingTime bool   `protobuf:"varint,7,opt,name=isModifiedRemainingTime,proto3" json:"isModifiedRemainingTime,omitempty"`
}

func (x *IssueManHour) Reset() {
	*x = IssueManHour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueManHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueManHour) ProtoMessage() {}

func (x *IssueManHour) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueManHour.ProtoReflect.Descriptor instead.
func (*IssueManHour) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{49}
}

func (x *IssueManHour) GetEstimateTime() int64 {
	if x != nil {
		return x.EstimateTime
	}
	return 0
}

func (x *IssueManHour) GetThisElapsedTime() int64 {
	if x != nil {
		return x.ThisElapsedTime
	}
	return 0
}

func (x *IssueManHour) GetElapsedTime() int64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *IssueManHour) GetRemainingTime() int64 {
	if x != nil {
		return x.RemainingTime
	}
	return 0
}

func (x *IssueManHour) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *IssueManHour) GetWorkContent() string {
	if x != nil {
		return x.WorkContent
	}
	return ""
}

func (x *IssueManHour) GetIsModifiedRemainingTime() bool {
	if x != nil {
		return x.IsModifiedRemainingTime
	}
	return false
}

type IssueStateButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateID     int64                            `protobuf:"varint,1,opt,name=stateID,proto3" json:"stateID,omitempty"`
	StateName   string                           `protobuf:"bytes,2,opt,name=stateName,proto3" json:"stateName,omitempty"`
	StateBelong IssueStateBelongEnum_StateBelong `protobuf:"varint,3,opt,name=stateBelong,proto3,enum=erda.dop.issue.core.IssueStateBelongEnum_StateBelong" json:"stateBelong,omitempty"`
	Permission  bool                             `protobuf:"varint,4,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *IssueStateButton) Reset() {
	*x = IssueStateButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueStateButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueStateButton) ProtoMessage() {}

func (x *IssueStateButton) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueStateButton.ProtoReflect.Descriptor instead.
func (*IssueStateButton) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{50}
}

func (x *IssueStateButton) GetStateID() int64 {
	if x != nil {
		return x.StateID
	}
	return 0
}

func (x *IssueStateButton) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *IssueStateButton) GetStateBelong() IssueStateBelongEnum_StateBelong {
	if x != nil {
		return x.StateBelong
	}
	return IssueStateBelongEnum_OPEN
}

func (x *IssueStateButton) GetPermission() bool {
	if x != nil {
		return x.Permission
	}
	return false
}

type IssueSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessingCount int32 `protobuf:"varint,1,opt,name=processingCount,proto3" json:"processingCount,omitempty"`
	DoneCount       int32 `protobuf:"varint,2,opt,name=doneCount,proto3" json:"doneCount,omitempty"`
}

func (x *IssueSummary) Reset() {
	*x = IssueSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSummary) ProtoMessage() {}

func (x *IssueSummary) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSummary.ProtoReflect.Descriptor instead.
func (*IssueSummary) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{51}
}

func (x *IssueSummary) GetProcessingCount() int32 {
	if x != nil {
		return x.ProcessingCount
	}
	return 0
}

func (x *IssueSummary) GetDoneCount() int32 {
	if x != nil {
		return x.DoneCount
	}
	return 0
}

type ProjectLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type      ProjectLabelTypeEnum_ProjectLabelType `protobuf:"varint,3,opt,name=type,proto3,enum=erda.dop.issue.core.ProjectLabelTypeEnum_ProjectLabelType" json:"type,omitempty"`
	Color     string                                `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	ProjectID uint64                                `protobuf:"varint,5,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Creator   string                                `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt *timestamppb.Timestamp                `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp                `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *ProjectLabel) Reset() {
	*x = ProjectLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLabel) ProtoMessage() {}

func (x *ProjectLabel) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLabel.ProtoReflect.Descriptor instead.
func (*ProjectLabel) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{52}
}

func (x *ProjectLabel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProjectLabel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectLabel) GetType() ProjectLabelTypeEnum_ProjectLabelType {
	if x != nil {
		return x.Type
	}
	return ProjectLabelTypeEnum_issue
}

func (x *ProjectLabel) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *ProjectLabel) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ProjectLabel) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ProjectLabel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProjectLabel) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type TestPlanCaseRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Priority   string                     `protobuf:"bytes,3,opt,name=priority,proto3" json:"priority,omitempty"`
	TestPlanID uint64                     `protobuf:"varint,4,opt,name=testPlanID,proto3" json:"testPlanID,omitempty"`
	TestSetID  uint64                     `protobuf:"varint,5,opt,name=testSetID,proto3" json:"testSetID,omitempty"`
	TestCaseID uint64                     `protobuf:"varint,6,opt,name=testCaseID,proto3" json:"testCaseID,omitempty"`
	ExecStatus string                     `protobuf:"bytes,7,opt,name=execStatus,proto3" json:"execStatus,omitempty"`
	Creator    string                     `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
	UpdaterID  string                     `protobuf:"bytes,9,opt,name=updaterID,proto3" json:"updaterID,omitempty"`
	ExecutorID string                     `protobuf:"bytes,10,opt,name=executorID,proto3" json:"executorID,omitempty"`
	CreatedAt  *timestamppb.Timestamp     `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt  *timestamppb.Timestamp     `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	APICount   *TestCaseAPICount          `protobuf:"bytes,13,opt,name=APICount,json=apiCount,proto3" json:"APICount,omitempty"`
	IssueBugs  []*TestPlanCaseRelIssueBug `protobuf:"bytes,14,rep,name=issueBugs,proto3" json:"issueBugs,omitempty"`
}

func (x *TestPlanCaseRel) Reset() {
	*x = TestPlanCaseRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRel) ProtoMessage() {}

func (x *TestPlanCaseRel) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRel.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRel) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{53}
}

func (x *TestPlanCaseRel) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TestPlanCaseRel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestPlanCaseRel) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *TestPlanCaseRel) GetTestPlanID() uint64 {
	if x != nil {
		return x.TestPlanID
	}
	return 0
}

func (x *TestPlanCaseRel) GetTestSetID() uint64 {
	if x != nil {
		return x.TestSetID
	}
	return 0
}

func (x *TestPlanCaseRel) GetTestCaseID() uint64 {
	if x != nil {
		return x.TestCaseID
	}
	return 0
}

func (x *TestPlanCaseRel) GetExecStatus() string {
	if x != nil {
		return x.ExecStatus
	}
	return ""
}

func (x *TestPlanCaseRel) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *TestPlanCaseRel) GetUpdaterID() string {
	if x != nil {
		return x.UpdaterID
	}
	return ""
}

func (x *TestPlanCaseRel) GetExecutorID() string {
	if x != nil {
		return x.ExecutorID
	}
	return ""
}

func (x *TestPlanCaseRel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TestPlanCaseRel) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TestPlanCaseRel) GetAPICount() *TestCaseAPICount {
	if x != nil {
		return x.APICount
	}
	return nil
}

func (x *TestPlanCaseRel) GetIssueBugs() []*TestPlanCaseRelIssueBug {
	if x != nil {
		return x.IssueBugs
	}
	return nil
}

type TestCaseAPICount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Created uint64 `protobuf:"varint,2,opt,name=created,proto3" json:"created,omitempty"`
	Running uint64 `protobuf:"varint,3,opt,name=running,proto3" json:"running,omitempty"`
	Passed  uint64 `protobuf:"varint,4,opt,name=passed,proto3" json:"passed,omitempty"`
	Failed  uint64 `protobuf:"varint,5,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (x *TestCaseAPICount) Reset() {
	*x = TestCaseAPICount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseAPICount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseAPICount) ProtoMessage() {}

func (x *TestCaseAPICount) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseAPICount.ProtoReflect.Descriptor instead.
func (*TestCaseAPICount) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{54}
}

func (x *TestCaseAPICount) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TestCaseAPICount) GetCreated() uint64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *TestCaseAPICount) GetRunning() uint64 {
	if x != nil {
		return x.Running
	}
	return 0
}

func (x *TestCaseAPICount) GetPassed() uint64 {
	if x != nil {
		return x.Passed
	}
	return 0
}

func (x *TestCaseAPICount) GetFailed() uint64 {
	if x != nil {
		return x.Failed
	}
	return 0
}

type TestPlanCaseRelIssueBug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRelationID uint64                 `protobuf:"varint,1,opt,name=issueRelationID,proto3" json:"issueRelationID,omitempty"`
	IssueID         uint64                 `protobuf:"varint,2,opt,name=issueID,proto3" json:"issueID,omitempty"`
	IterationID     int64                  `protobuf:"varint,3,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	Title           string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	State           string                 `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	StateBelong     string                 `protobuf:"bytes,6,opt,name=stateBelong,proto3" json:"stateBelong,omitempty"`
	Priority        string                 `protobuf:"bytes,7,opt,name=priority,proto3" json:"priority,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *TestPlanCaseRelIssueBug) Reset() {
	*x = TestPlanCaseRelIssueBug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelIssueBug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelIssueBug) ProtoMessage() {}

func (x *TestPlanCaseRelIssueBug) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelIssueBug.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelIssueBug) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{55}
}

func (x *TestPlanCaseRelIssueBug) GetIssueRelationID() uint64 {
	if x != nil {
		return x.IssueRelationID
	}
	return 0
}

func (x *TestPlanCaseRelIssueBug) GetIssueID() uint64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *TestPlanCaseRelIssueBug) GetIterationID() int64 {
	if x != nil {
		return x.IterationID
	}
	return 0
}

func (x *TestPlanCaseRelIssueBug) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TestPlanCaseRelIssueBug) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *TestPlanCaseRelIssueBug) GetStateBelong() string {
	if x != nil {
		return x.StateBelong
	}
	return ""
}

func (x *TestPlanCaseRelIssueBug) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *TestPlanCaseRelIssueBug) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type TestCasePriorityEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestCasePriorityEnum) Reset() {
	*x = TestCasePriorityEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCasePriorityEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCasePriorityEnum) ProtoMessage() {}

func (x *TestCasePriorityEnum) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCasePriorityEnum.ProtoReflect.Descriptor instead.
func (*TestCasePriorityEnum) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{56}
}

type PropertyTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PropertyTypeEnum) Reset() {
	*x = PropertyTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyTypeEnum) ProtoMessage() {}

func (x *PropertyTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyTypeEnum.ProtoReflect.Descriptor instead.
func (*PropertyTypeEnum) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{57}
}

type PropertyIssueTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PropertyIssueTypeEnum) Reset() {
	*x = PropertyIssueTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyIssueTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyIssueTypeEnum) ProtoMessage() {}

func (x *PropertyIssueTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyIssueTypeEnum.ProtoReflect.Descriptor instead.
func (*PropertyIssueTypeEnum) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{58}
}

type Enumerate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Index int64  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Enumerate) Reset() {
	*x = Enumerate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enumerate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enumerate) ProtoMessage() {}

func (x *Enumerate) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enumerate.ProtoReflect.Descriptor instead.
func (*Enumerate) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{59}
}

func (x *Enumerate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Enumerate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Enumerate) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type IssueAndPropertyAndValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueID  int64                         `protobuf:"varint,1,opt,name=issueID,proto3" json:"issueID,omitempty"`
	Property []*IssuePropertyExtraProperty `protobuf:"bytes,2,rep,name=property,proto3" json:"property,omitempty"`
}

func (x *IssueAndPropertyAndValue) Reset() {
	*x = IssueAndPropertyAndValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueAndPropertyAndValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueAndPropertyAndValue) ProtoMessage() {}

func (x *IssueAndPropertyAndValue) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueAndPropertyAndValue.ProtoReflect.Descriptor instead.
func (*IssueAndPropertyAndValue) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{60}
}

func (x *IssueAndPropertyAndValue) GetIssueID() int64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *IssueAndPropertyAndValue) GetProperty() []*IssuePropertyExtraProperty {
	if x != nil {
		return x.Property
	}
	return nil
}

type IssuePropertyExtraProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyID       int64                         `protobuf:"varint,1,opt,name=propertyID,proto3" json:"propertyID,omitempty"`
	PropertyType     PropertyTypeEnum_PropertyType `protobuf:"varint,2,opt,name=propertyType,proto3,enum=erda.dop.issue.core.PropertyTypeEnum_PropertyType" json:"propertyType,omitempty"`
	PropertyName     string                        `protobuf:"bytes,3,opt,name=propertyName,proto3" json:"propertyName,omitempty"`
	Required         bool                          `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	DisplayName      string                        `protobuf:"bytes,5,opt,name=displayName,proto3" json:"displayName,omitempty"`
	ArbitraryValue   *structpb.Value               `protobuf:"bytes,6,opt,name=arbitraryValue,proto3" json:"arbitraryValue,omitempty"`
	EnumeratedValues []*Enumerate                  `protobuf:"bytes,7,rep,name=enumeratedValues,proto3" json:"enumeratedValues,omitempty"`
	Values           []int64                       `protobuf:"varint,8,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *IssuePropertyExtraProperty) Reset() {
	*x = IssuePropertyExtraProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuePropertyExtraProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePropertyExtraProperty) ProtoMessage() {}

func (x *IssuePropertyExtraProperty) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePropertyExtraProperty.ProtoReflect.Descriptor instead.
func (*IssuePropertyExtraProperty) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{61}
}

func (x *IssuePropertyExtraProperty) GetPropertyID() int64 {
	if x != nil {
		return x.PropertyID
	}
	return 0
}

func (x *IssuePropertyExtraProperty) GetPropertyType() PropertyTypeEnum_PropertyType {
	if x != nil {
		return x.PropertyType
	}
	return PropertyTypeEnum_Text
}

func (x *IssuePropertyExtraProperty) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *IssuePropertyExtraProperty) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *IssuePropertyExtraProperty) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *IssuePropertyExtraProperty) GetArbitraryValue() *structpb.Value {
	if x != nil {
		return x.ArbitraryValue
	}
	return nil
}

func (x *IssuePropertyExtraProperty) GetEnumeratedValues() []*Enumerate {
	if x != nil {
		return x.EnumeratedValues
	}
	return nil
}

func (x *IssuePropertyExtraProperty) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type IssuePropertyUpdateTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task        string `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Bug         string `protobuf:"bytes,2,opt,name=bug,proto3" json:"bug,omitempty"`
	Epic        string `protobuf:"bytes,3,opt,name=epic,proto3" json:"epic,omitempty"`
	Requirement string `protobuf:"bytes,4,opt,name=requirement,proto3" json:"requirement,omitempty"`
}

func (x *IssuePropertyUpdateTimes) Reset() {
	*x = IssuePropertyUpdateTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuePropertyUpdateTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePropertyUpdateTimes) ProtoMessage() {}

func (x *IssuePropertyUpdateTimes) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePropertyUpdateTimes.ProtoReflect.Descriptor instead.
func (*IssuePropertyUpdateTimes) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{62}
}

func (x *IssuePropertyUpdateTimes) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *IssuePropertyUpdateTimes) GetBug() string {
	if x != nil {
		return x.Bug
	}
	return ""
}

func (x *IssuePropertyUpdateTimes) GetEpic() string {
	if x != nil {
		return x.Epic
	}
	return ""
}

func (x *IssuePropertyUpdateTimes) GetRequirement() string {
	if x != nil {
		return x.Requirement
	}
	return ""
}

type PagingIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                 string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type                  []string         `protobuf:"bytes,2,rep,name=type,proto3" json:"type,omitempty"`
	ProjectID             uint64           `protobuf:"varint,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IterationID           int64            `protobuf:"varint,4,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	IterationIDs          []int64          `protobuf:"varint,5,rep,packed,name=iterationIDs,proto3" json:"iterationIDs,omitempty"`
	AppID                 *uint64          `protobuf:"varint,6,opt,name=appID,proto3,oneof" json:"appID,omitempty"`
	RequirementID         *int64           `protobuf:"varint,7,opt,name=requirementID,proto3,oneof" json:"requirementID,omitempty"`
	State                 []int64          `protobuf:"varint,8,rep,packed,name=state,proto3" json:"state,omitempty"`
	StateBelongs          []string         `protobuf:"bytes,9,rep,name=stateBelongs,proto3" json:"stateBelongs,omitempty"`
	Creator               []string         `protobuf:"bytes,10,rep,name=creator,proto3" json:"creator,omitempty"`
	Assignee              []string         `protobuf:"bytes,11,rep,name=assignee,proto3" json:"assignee,omitempty"`
	Label                 []uint64         `protobuf:"varint,12,rep,packed,name=label,proto3" json:"label,omitempty"`
	StartCreatedAt        int64            `protobuf:"varint,13,opt,name=startCreatedAt,proto3" json:"startCreatedAt,omitempty"`
	EndCreatedAt          int64            `protobuf:"varint,14,opt,name=endCreatedAt,proto3" json:"endCreatedAt,omitempty"`
	StartFinishedAt       int64            `protobuf:"varint,15,opt,name=startFinishedAt,proto3" json:"startFinishedAt,omitempty"`
	EndFinishedAt         int64            `protobuf:"varint,16,opt,name=endFinishedAt,proto3" json:"endFinishedAt,omitempty"`
	IsEmptyPlanFinishedAt bool             `protobuf:"varint,17,opt,name=isEmptyPlanFinishedAt,proto3" json:"isEmptyPlanFinishedAt,omitempty"`
	StartClosedAt         int64            `protobuf:"varint,18,opt,name=startClosedAt,proto3" json:"startClosedAt,omitempty"`
	EndClosedAt           int64            `protobuf:"varint,19,opt,name=endClosedAt,proto3" json:"endClosedAt,omitempty"`
	Priority              []string         `protobuf:"bytes,20,rep,name=priority,proto3" json:"priority,omitempty"`
	Complexity            []string         `protobuf:"bytes,21,rep,name=complexity,proto3" json:"complexity,omitempty"`
	Severity              []string         `protobuf:"bytes,22,rep,name=severity,proto3" json:"severity,omitempty"`
	RelatedIssueId        []uint64         `protobuf:"varint,23,rep,packed,name=relatedIssueId,proto3" json:"relatedIssueId,omitempty"`
	Source                string           `protobuf:"bytes,24,opt,name=source,proto3" json:"source,omitempty"`
	OrderBy               string           `protobuf:"bytes,25,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	TaskType              []string         `protobuf:"bytes,26,rep,name=taskType,proto3" json:"taskType,omitempty"`
	BugStage              []string         `protobuf:"bytes,27,rep,name=bugStage,proto3" json:"bugStage,omitempty"`
	Owner                 []string         `protobuf:"bytes,28,rep,name=owner,proto3" json:"owner,omitempty"`
	WithProcessSummary    bool             `protobuf:"varint,29,opt,name=withProcessSummary,proto3" json:"withProcessSummary,omitempty"`
	ExceptIDs             []int64          `protobuf:"varint,30,rep,packed,name=exceptIDs,proto3" json:"exceptIDs,omitempty"`
	Asc                   bool             `protobuf:"varint,31,opt,name=asc,proto3" json:"asc,omitempty"`
	IDs                   []int64          `protobuf:"varint,32,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	IdentityInfo          *pb.IdentityInfo `protobuf:"bytes,33,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
	External              bool             `protobuf:"varint,34,opt,name=external,proto3" json:"external,omitempty"`
	CustomPanelID         int64            `protobuf:"varint,35,opt,name=customPanelID,proto3" json:"customPanelID,omitempty"`
	OnlyIdResult          bool             `protobuf:"varint,36,opt,name=onlyIdResult,proto3" json:"onlyIdResult,omitempty"`
	NotIncluded           bool             `protobuf:"varint,37,opt,name=notIncluded,proto3" json:"notIncluded,omitempty"`
	PageNo                uint64           `protobuf:"varint,38,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize              uint64           `protobuf:"varint,39,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrgID                 int64            `protobuf:"varint,40,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ProjectIDs            []uint64         `protobuf:"varint,41,rep,packed,name=projectIDs,proto3" json:"projectIDs,omitempty"`
	Participant           []string         `protobuf:"bytes,42,rep,name=participant,proto3" json:"participant,omitempty"`
	WithCustomProperties  bool             `protobuf:"varint,43,opt,name=withCustomProperties,proto3" json:"withCustomProperties,omitempty"`
}

func (x *PagingIssueRequest) Reset() {
	*x = PagingIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingIssueRequest) ProtoMessage() {}

func (x *PagingIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingIssueRequest.ProtoReflect.Descriptor instead.
func (*PagingIssueRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{63}
}

func (x *PagingIssueRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PagingIssueRequest) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *PagingIssueRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *PagingIssueRequest) GetIterationID() int64 {
	if x != nil {
		return x.IterationID
	}
	return 0
}

func (x *PagingIssueRequest) GetIterationIDs() []int64 {
	if x != nil {
		return x.IterationIDs
	}
	return nil
}

func (x *PagingIssueRequest) GetAppID() uint64 {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return 0
}

func (x *PagingIssueRequest) GetRequirementID() int64 {
	if x != nil && x.RequirementID != nil {
		return *x.RequirementID
	}
	return 0
}

func (x *PagingIssueRequest) GetState() []int64 {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *PagingIssueRequest) GetStateBelongs() []string {
	if x != nil {
		return x.StateBelongs
	}
	return nil
}

func (x *PagingIssueRequest) GetCreator() []string {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *PagingIssueRequest) GetAssignee() []string {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *PagingIssueRequest) GetLabel() []uint64 {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *PagingIssueRequest) GetStartCreatedAt() int64 {
	if x != nil {
		return x.StartCreatedAt
	}
	return 0
}

func (x *PagingIssueRequest) GetEndCreatedAt() int64 {
	if x != nil {
		return x.EndCreatedAt
	}
	return 0
}

func (x *PagingIssueRequest) GetStartFinishedAt() int64 {
	if x != nil {
		return x.StartFinishedAt
	}
	return 0
}

func (x *PagingIssueRequest) GetEndFinishedAt() int64 {
	if x != nil {
		return x.EndFinishedAt
	}
	return 0
}

func (x *PagingIssueRequest) GetIsEmptyPlanFinishedAt() bool {
	if x != nil {
		return x.IsEmptyPlanFinishedAt
	}
	return false
}

func (x *PagingIssueRequest) GetStartClosedAt() int64 {
	if x != nil {
		return x.StartClosedAt
	}
	return 0
}

func (x *PagingIssueRequest) GetEndClosedAt() int64 {
	if x != nil {
		return x.EndClosedAt
	}
	return 0
}

func (x *PagingIssueRequest) GetPriority() []string {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *PagingIssueRequest) GetComplexity() []string {
	if x != nil {
		return x.Complexity
	}
	return nil
}

func (x *PagingIssueRequest) GetSeverity() []string {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *PagingIssueRequest) GetRelatedIssueId() []uint64 {
	if x != nil {
		return x.RelatedIssueId
	}
	return nil
}

func (x *PagingIssueRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PagingIssueRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *PagingIssueRequest) GetTaskType() []string {
	if x != nil {
		return x.TaskType
	}
	return nil
}

func (x *PagingIssueRequest) GetBugStage() []string {
	if x != nil {
		return x.BugStage
	}
	return nil
}

func (x *PagingIssueRequest) GetOwner() []string {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *PagingIssueRequest) GetWithProcessSummary() bool {
	if x != nil {
		return x.WithProcessSummary
	}
	return false
}

func (x *PagingIssueRequest) GetExceptIDs() []int64 {
	if x != nil {
		return x.ExceptIDs
	}
	return nil
}

func (x *PagingIssueRequest) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

func (x *PagingIssueRequest) GetIDs() []int64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *PagingIssueRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

func (x *PagingIssueRequest) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

func (x *PagingIssueRequest) GetCustomPanelID() int64 {
	if x != nil {
		return x.CustomPanelID
	}
	return 0
}

func (x *PagingIssueRequest) GetOnlyIdResult() bool {
	if x != nil {
		return x.OnlyIdResult
	}
	return false
}

func (x *PagingIssueRequest) GetNotIncluded() bool {
	if x != nil {
		return x.NotIncluded
	}
	return false
}

func (x *PagingIssueRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *PagingIssueRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PagingIssueRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PagingIssueRequest) GetProjectIDs() []uint64 {
	if x != nil {
		return x.ProjectIDs
	}
	return nil
}

func (x *PagingIssueRequest) GetParticipant() []string {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *PagingIssueRequest) GetWithCustomProperties() bool {
	if x != nil {
		return x.WithCustomProperties
	}
	return false
}

type IssueListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                 string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type                  []string         `protobuf:"bytes,2,rep,name=type,proto3" json:"type,omitempty"`
	ProjectID             uint64           `protobuf:"varint,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IterationID           int64            `protobuf:"varint,4,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	IterationIDs          []int64          `protobuf:"varint,5,rep,packed,name=iterationIDs,proto3" json:"iterationIDs,omitempty"`
	AppID                 *uint64          `protobuf:"varint,6,opt,name=appID,proto3,oneof" json:"appID,omitempty"`
	RequirementID         *int64           `protobuf:"varint,7,opt,name=requirementID,proto3,oneof" json:"requirementID,omitempty"`
	State                 []int64          `protobuf:"varint,8,rep,packed,name=state,proto3" json:"state,omitempty"`
	StateBelongs          []string         `protobuf:"bytes,9,rep,name=stateBelongs,proto3" json:"stateBelongs,omitempty"`
	Creator               []string         `protobuf:"bytes,10,rep,name=creator,proto3" json:"creator,omitempty"`
	Assignee              []string         `protobuf:"bytes,11,rep,name=assignee,proto3" json:"assignee,omitempty"`
	Label                 []uint64         `protobuf:"varint,12,rep,packed,name=label,proto3" json:"label,omitempty"`
	StartCreatedAt        int64            `protobuf:"varint,13,opt,name=startCreatedAt,proto3" json:"startCreatedAt,omitempty"`
	EndCreatedAt          int64            `protobuf:"varint,14,opt,name=endCreatedAt,proto3" json:"endCreatedAt,omitempty"`
	StartFinishedAt       int64            `protobuf:"varint,15,opt,name=startFinishedAt,proto3" json:"startFinishedAt,omitempty"`
	EndFinishedAt         int64            `protobuf:"varint,16,opt,name=endFinishedAt,proto3" json:"endFinishedAt,omitempty"`
	IsEmptyPlanFinishedAt bool             `protobuf:"varint,17,opt,name=isEmptyPlanFinishedAt,proto3" json:"isEmptyPlanFinishedAt,omitempty"`
	StartClosedAt         int64            `protobuf:"varint,18,opt,name=startClosedAt,proto3" json:"startClosedAt,omitempty"`
	EndClosedAt           int64            `protobuf:"varint,19,opt,name=endClosedAt,proto3" json:"endClosedAt,omitempty"`
	Priority              []string         `protobuf:"bytes,20,rep,name=priority,proto3" json:"priority,omitempty"`
	Complexity            []string         `protobuf:"bytes,21,rep,name=complexity,proto3" json:"complexity,omitempty"`
	Severity              []string         `protobuf:"bytes,22,rep,name=severity,proto3" json:"severity,omitempty"`
	RelatedIssueId        []uint64         `protobuf:"varint,23,rep,packed,name=relatedIssueId,proto3" json:"relatedIssueId,omitempty"`
	Source                string           `protobuf:"bytes,24,opt,name=source,proto3" json:"source,omitempty"`
	OrderBy               string           `protobuf:"bytes,25,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	TaskType              []string         `protobuf:"bytes,26,rep,name=taskType,proto3" json:"taskType,omitempty"`
	BugStage              []string         `protobuf:"bytes,27,rep,name=bugStage,proto3" json:"bugStage,omitempty"`
	Owner                 []string         `protobuf:"bytes,28,rep,name=owner,proto3" json:"owner,omitempty"`
	WithProcessSummary    bool             `protobuf:"varint,29,opt,name=withProcessSummary,proto3" json:"withProcessSummary,omitempty"`
	ExceptIDs             []int64          `protobuf:"varint,30,rep,packed,name=exceptIDs,proto3" json:"exceptIDs,omitempty"`
	Asc                   bool             `protobuf:"varint,31,opt,name=asc,proto3" json:"asc,omitempty"`
	IDs                   []int64          `protobuf:"varint,32,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	IdentityInfo          *pb.IdentityInfo `protobuf:"bytes,33,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
	External              bool             `protobuf:"varint,34,opt,name=external,proto3" json:"external,omitempty"`
	CustomPanelID         int64            `protobuf:"varint,35,opt,name=customPanelID,proto3" json:"customPanelID,omitempty"`
	OnlyIdResult          bool             `protobuf:"varint,36,opt,name=onlyIdResult,proto3" json:"onlyIdResult,omitempty"`
	NotIncluded           bool             `protobuf:"varint,37,opt,name=notIncluded,proto3" json:"notIncluded,omitempty"`
}

func (x *IssueListRequest) Reset() {
	*x = IssueListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueListRequest) ProtoMessage() {}

func (x *IssueListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueListRequest.ProtoReflect.Descriptor instead.
func (*IssueListRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{64}
}

func (x *IssueListRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *IssueListRequest) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *IssueListRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *IssueListRequest) GetIterationID() int64 {
	if x != nil {
		return x.IterationID
	}
	return 0
}

func (x *IssueListRequest) GetIterationIDs() []int64 {
	if x != nil {
		return x.IterationIDs
	}
	return nil
}

func (x *IssueListRequest) GetAppID() uint64 {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return 0
}

func (x *IssueListRequest) GetRequirementID() int64 {
	if x != nil && x.RequirementID != nil {
		return *x.RequirementID
	}
	return 0
}

func (x *IssueListRequest) GetState() []int64 {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *IssueListRequest) GetStateBelongs() []string {
	if x != nil {
		return x.StateBelongs
	}
	return nil
}

func (x *IssueListRequest) GetCreator() []string {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *IssueListRequest) GetAssignee() []string {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *IssueListRequest) GetLabel() []uint64 {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *IssueListRequest) GetStartCreatedAt() int64 {
	if x != nil {
		return x.StartCreatedAt
	}
	return 0
}

func (x *IssueListRequest) GetEndCreatedAt() int64 {
	if x != nil {
		return x.EndCreatedAt
	}
	return 0
}

func (x *IssueListRequest) GetStartFinishedAt() int64 {
	if x != nil {
		return x.StartFinishedAt
	}
	return 0
}

func (x *IssueListRequest) GetEndFinishedAt() int64 {
	if x != nil {
		return x.EndFinishedAt
	}
	return 0
}

func (x *IssueListRequest) GetIsEmptyPlanFinishedAt() bool {
	if x != nil {
		return x.IsEmptyPlanFinishedAt
	}
	return false
}

func (x *IssueListRequest) GetStartClosedAt() int64 {
	if x != nil {
		return x.StartClosedAt
	}
	return 0
}

func (x *IssueListRequest) GetEndClosedAt() int64 {
	if x != nil {
		return x.EndClosedAt
	}
	return 0
}

func (x *IssueListRequest) GetPriority() []string {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *IssueListRequest) GetComplexity() []string {
	if x != nil {
		return x.Complexity
	}
	return nil
}

func (x *IssueListRequest) GetSeverity() []string {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *IssueListRequest) GetRelatedIssueId() []uint64 {
	if x != nil {
		return x.RelatedIssueId
	}
	return nil
}

func (x *IssueListRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *IssueListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *IssueListRequest) GetTaskType() []string {
	if x != nil {
		return x.TaskType
	}
	return nil
}

func (x *IssueListRequest) GetBugStage() []string {
	if x != nil {
		return x.BugStage
	}
	return nil
}

func (x *IssueListRequest) GetOwner() []string {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *IssueListRequest) GetWithProcessSummary() bool {
	if x != nil {
		return x.WithProcessSummary
	}
	return false
}

func (x *IssueListRequest) GetExceptIDs() []int64 {
	if x != nil {
		return x.ExceptIDs
	}
	return nil
}

func (x *IssueListRequest) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

func (x *IssueListRequest) GetIDs() []int64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *IssueListRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

func (x *IssueListRequest) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

func (x *IssueListRequest) GetCustomPanelID() int64 {
	if x != nil {
		return x.CustomPanelID
	}
	return 0
}

func (x *IssueListRequest) GetOnlyIdResult() bool {
	if x != nil {
		return x.OnlyIdResult
	}
	return false
}

func (x *IssueListRequest) GetNotIncluded() bool {
	if x != nil {
		return x.NotIncluded
	}
	return false
}

type PagingIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *IssuePagingResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	UserIDs []string                 `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *PagingIssueResponse) Reset() {
	*x = PagingIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingIssueResponse) ProtoMessage() {}

func (x *PagingIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingIssueResponse.ProtoReflect.Descriptor instead.
func (*PagingIssueResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{65}
}

func (x *PagingIssueResponse) GetData() *IssuePagingResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PagingIssueResponse) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type IssuePagingResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Issue `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *IssuePagingResponseData) Reset() {
	*x = IssuePagingResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuePagingResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePagingResponseData) ProtoMessage() {}

func (x *IssuePagingResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePagingResponseData.ProtoReflect.Descriptor instead.
func (*IssuePagingResponseData) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{66}
}

func (x *IssuePagingResponseData) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *IssuePagingResponseData) GetList() []*Issue {
	if x != nil {
		return x.List
	}
	return nil
}

type ExportExcelIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                 string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type                  []string         `protobuf:"bytes,2,rep,name=type,proto3" json:"type,omitempty"`
	ProjectID             uint64           `protobuf:"varint,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IterationID           int64            `protobuf:"varint,4,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	IterationIDs          []int64          `protobuf:"varint,5,rep,packed,name=iterationIDs,proto3" json:"iterationIDs,omitempty"`
	AppID                 *uint64          `protobuf:"varint,6,opt,name=appID,proto3,oneof" json:"appID,omitempty"`
	RequirementID         *int64           `protobuf:"varint,7,opt,name=requirementID,proto3,oneof" json:"requirementID,omitempty"`
	State                 []int64          `protobuf:"varint,8,rep,packed,name=state,proto3" json:"state,omitempty"`
	StateBelongs          []string         `protobuf:"bytes,9,rep,name=stateBelongs,proto3" json:"stateBelongs,omitempty"`
	Creator               []string         `protobuf:"bytes,10,rep,name=creator,proto3" json:"creator,omitempty"`
	Assignee              []string         `protobuf:"bytes,11,rep,name=assignee,proto3" json:"assignee,omitempty"`
	Label                 []uint64         `protobuf:"varint,12,rep,packed,name=label,proto3" json:"label,omitempty"`
	StartCreatedAt        int64            `protobuf:"varint,13,opt,name=startCreatedAt,proto3" json:"startCreatedAt,omitempty"`
	EndCreatedAt          int64            `protobuf:"varint,14,opt,name=endCreatedAt,proto3" json:"endCreatedAt,omitempty"`
	StartFinishedAt       int64            `protobuf:"varint,15,opt,name=startFinishedAt,proto3" json:"startFinishedAt,omitempty"`
	EndFinishedAt         int64            `protobuf:"varint,16,opt,name=endFinishedAt,proto3" json:"endFinishedAt,omitempty"`
	IsEmptyPlanFinishedAt bool             `protobuf:"varint,17,opt,name=isEmptyPlanFinishedAt,proto3" json:"isEmptyPlanFinishedAt,omitempty"`
	StartClosedAt         int64            `protobuf:"varint,18,opt,name=startClosedAt,proto3" json:"startClosedAt,omitempty"`
	EndClosedAt           int64            `protobuf:"varint,19,opt,name=endClosedAt,proto3" json:"endClosedAt,omitempty"`
	Priority              []string         `protobuf:"bytes,20,rep,name=priority,proto3" json:"priority,omitempty"`
	Complexity            []string         `protobuf:"bytes,21,rep,name=complexity,proto3" json:"complexity,omitempty"`
	Severity              []string         `protobuf:"bytes,22,rep,name=severity,proto3" json:"severity,omitempty"`
	RelatedIssueId        []uint64         `protobuf:"varint,23,rep,packed,name=relatedIssueId,proto3" json:"relatedIssueId,omitempty"`
	Source                string           `protobuf:"bytes,24,opt,name=source,proto3" json:"source,omitempty"`
	OrderBy               string           `protobuf:"bytes,25,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	TaskType              []string         `protobuf:"bytes,26,rep,name=taskType,proto3" json:"taskType,omitempty"`
	BugStage              []string         `protobuf:"bytes,27,rep,name=bugStage,proto3" json:"bugStage,omitempty"`
	Owner                 []string         `protobuf:"bytes,28,rep,name=owner,proto3" json:"owner,omitempty"`
	WithProcessSummary    bool             `protobuf:"varint,29,opt,name=withProcessSummary,proto3" json:"withProcessSummary,omitempty"`
	ExceptIDs             []int64          `protobuf:"varint,30,rep,packed,name=exceptIDs,proto3" json:"exceptIDs,omitempty"`
	Asc                   bool             `protobuf:"varint,31,opt,name=asc,proto3" json:"asc,omitempty"`
	IDs                   []int64          `protobuf:"varint,32,rep,packed,name=IDs,proto3" json:"IDs,omitempty"`
	IdentityInfo          *pb.IdentityInfo `protobuf:"bytes,33,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
	External              bool             `protobuf:"varint,34,opt,name=external,proto3" json:"external,omitempty"`
	CustomPanelID         int64            `protobuf:"varint,35,opt,name=customPanelID,proto3" json:"customPanelID,omitempty"`
	OnlyIdResult          bool             `protobuf:"varint,36,opt,name=onlyIdResult,proto3" json:"onlyIdResult,omitempty"`
	NotIncluded           bool             `protobuf:"varint,37,opt,name=notIncluded,proto3" json:"notIncluded,omitempty"`
	PageNo                uint64           `protobuf:"varint,38,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize              uint64           `protobuf:"varint,39,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrgID                 int64            `protobuf:"varint,40,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ProjectIDs            []uint64         `protobuf:"varint,41,rep,packed,name=projectIDs,proto3" json:"projectIDs,omitempty"`
	Locale                string           `protobuf:"bytes,42,opt,name=locale,proto3" json:"locale,omitempty"`
	IsDownload            bool             `protobuf:"varint,43,opt,name=isDownload,proto3" json:"isDownload,omitempty"`
}

func (x *ExportExcelIssueRequest) Reset() {
	*x = ExportExcelIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportExcelIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportExcelIssueRequest) ProtoMessage() {}

func (x *ExportExcelIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportExcelIssueRequest.ProtoReflect.Descriptor instead.
func (*ExportExcelIssueRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{67}
}

func (x *ExportExcelIssueRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExportExcelIssueRequest) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetIterationID() int64 {
	if x != nil {
		return x.IterationID
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetIterationIDs() []int64 {
	if x != nil {
		return x.IterationIDs
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetAppID() uint64 {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetRequirementID() int64 {
	if x != nil && x.RequirementID != nil {
		return *x.RequirementID
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetState() []int64 {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetStateBelongs() []string {
	if x != nil {
		return x.StateBelongs
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetCreator() []string {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetAssignee() []string {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetLabel() []uint64 {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetStartCreatedAt() int64 {
	if x != nil {
		return x.StartCreatedAt
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetEndCreatedAt() int64 {
	if x != nil {
		return x.EndCreatedAt
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetStartFinishedAt() int64 {
	if x != nil {
		return x.StartFinishedAt
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetEndFinishedAt() int64 {
	if x != nil {
		return x.EndFinishedAt
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetIsEmptyPlanFinishedAt() bool {
	if x != nil {
		return x.IsEmptyPlanFinishedAt
	}
	return false
}

func (x *ExportExcelIssueRequest) GetStartClosedAt() int64 {
	if x != nil {
		return x.StartClosedAt
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetEndClosedAt() int64 {
	if x != nil {
		return x.EndClosedAt
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetPriority() []string {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetComplexity() []string {
	if x != nil {
		return x.Complexity
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetSeverity() []string {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetRelatedIssueId() []uint64 {
	if x != nil {
		return x.RelatedIssueId
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ExportExcelIssueRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ExportExcelIssueRequest) GetTaskType() []string {
	if x != nil {
		return x.TaskType
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetBugStage() []string {
	if x != nil {
		return x.BugStage
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetOwner() []string {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetWithProcessSummary() bool {
	if x != nil {
		return x.WithProcessSummary
	}
	return false
}

func (x *ExportExcelIssueRequest) GetExceptIDs() []int64 {
	if x != nil {
		return x.ExceptIDs
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

func (x *ExportExcelIssueRequest) GetIDs() []int64 {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

func (x *ExportExcelIssueRequest) GetCustomPanelID() int64 {
	if x != nil {
		return x.CustomPanelID
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetOnlyIdResult() bool {
	if x != nil {
		return x.OnlyIdResult
	}
	return false
}

func (x *ExportExcelIssueRequest) GetNotIncluded() bool {
	if x != nil {
		return x.NotIncluded
	}
	return false
}

func (x *ExportExcelIssueRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ExportExcelIssueRequest) GetProjectIDs() []uint64 {
	if x != nil {
		return x.ProjectIDs
	}
	return nil
}

func (x *ExportExcelIssueRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *ExportExcelIssueRequest) GetIsDownload() bool {
	if x != nil {
		return x.IsDownload
	}
	return false
}

type ExportExcelIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ExportExcelIssueResponse) Reset() {
	*x = ExportExcelIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportExcelIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportExcelIssueResponse) ProtoMessage() {}

func (x *ExportExcelIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportExcelIssueResponse.ProtoReflect.Descriptor instead.
func (*ExportExcelIssueResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{68}
}

func (x *ExportExcelIssueResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type ImportExcelIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID    uint64           `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	OrgID        int64            `protobuf:"varint,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Type         string           `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	FileID       string           `protobuf:"bytes,4,opt,name=fileID,proto3" json:"fileID,omitempty"`
	IdentityInfo *pb.IdentityInfo `protobuf:"bytes,33,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *ImportExcelIssueRequest) Reset() {
	*x = ImportExcelIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportExcelIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportExcelIssueRequest) ProtoMessage() {}

func (x *ImportExcelIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportExcelIssueRequest.ProtoReflect.Descriptor instead.
func (*ImportExcelIssueRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{69}
}

func (x *ImportExcelIssueRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ImportExcelIssueRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ImportExcelIssueRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ImportExcelIssueRequest) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *ImportExcelIssueRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type ImportExcelIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ImportExcelIssueResponse) Reset() {
	*x = ImportExcelIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportExcelIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportExcelIssueResponse) ProtoMessage() {}

func (x *ImportExcelIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportExcelIssueResponse.ProtoReflect.Descriptor instead.
func (*ImportExcelIssueResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{70}
}

func (x *ImportExcelIssueResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type AddIssueRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IssueID       uint64   `protobuf:"varint,2,opt,name=issueID,json=-,proto3" json:"issueID,omitempty"`
	RelatedIssues []uint64 `protobuf:"varint,3,rep,packed,name=relatedIssues,proto3" json:"relatedIssues,omitempty"`
	Comment       string   `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	ProjectId     int64    `protobuf:"varint,5,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Type          string   `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AddIssueRelationRequest) Reset() {
	*x = AddIssueRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIssueRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIssueRelationRequest) ProtoMessage() {}

func (x *AddIssueRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIssueRelationRequest.ProtoReflect.Descriptor instead.
func (*AddIssueRelationRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{71}
}

func (x *AddIssueRelationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddIssueRelationRequest) GetIssueID() uint64 {
	if x != nil {
		return x.IssueID
	}
	return 0
}

func (x *AddIssueRelationRequest) GetRelatedIssues() []uint64 {
	if x != nil {
		return x.RelatedIssues
	}
	return nil
}

func (x *AddIssueRelationRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AddIssueRelationRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AddIssueRelationRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type AddIssueRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddIssueRelationResponse) Reset() {
	*x = AddIssueRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIssueRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIssueRelationResponse) ProtoMessage() {}

func (x *AddIssueRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIssueRelationResponse.ProtoReflect.Descriptor instead.
func (*AddIssueRelationResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{72}
}

type DeleteIssueRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RelatedIssueID string   `protobuf:"bytes,2,opt,name=relatedIssueID,proto3" json:"relatedIssueID,omitempty"`
	RelationTypes  []string `protobuf:"bytes,3,rep,name=relationTypes,json=type,proto3" json:"relationTypes,omitempty"`
}

func (x *DeleteIssueRelationRequest) Reset() {
	*x = DeleteIssueRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIssueRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIssueRelationRequest) ProtoMessage() {}

func (x *DeleteIssueRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIssueRelationRequest.ProtoReflect.Descriptor instead.
func (*DeleteIssueRelationRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{73}
}

func (x *DeleteIssueRelationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteIssueRelationRequest) GetRelatedIssueID() string {
	if x != nil {
		return x.RelatedIssueID
	}
	return ""
}

func (x *DeleteIssueRelationRequest) GetRelationTypes() []string {
	if x != nil {
		return x.RelationTypes
	}
	return nil
}

type DeleteIssueRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteIssueRelationResponse) Reset() {
	*x = DeleteIssueRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIssueRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIssueRelationResponse) ProtoMessage() {}

func (x *DeleteIssueRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIssueRelationResponse.ProtoReflect.Descriptor instead.
func (*DeleteIssueRelationResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{74}
}

type GetIssueRelationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RelationTypes []string `protobuf:"bytes,2,rep,name=relationTypes,json=type,proto3" json:"relationTypes,omitempty"`
}

func (x *GetIssueRelationsRequest) Reset() {
	*x = GetIssueRelationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssueRelationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssueRelationsRequest) ProtoMessage() {}

func (x *GetIssueRelationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssueRelationsRequest.ProtoReflect.Descriptor instead.
func (*GetIssueRelationsRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{75}
}

func (x *GetIssueRelationsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetIssueRelationsRequest) GetRelationTypes() []string {
	if x != nil {
		return x.RelationTypes
	}
	return nil
}

type GetIssueRelationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *IssueRelations `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	UserIDs []string        `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *GetIssueRelationsResponse) Reset() {
	*x = GetIssueRelationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssueRelationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssueRelationsResponse) ProtoMessage() {}

func (x *GetIssueRelationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssueRelationsResponse.ProtoReflect.Descriptor instead.
func (*GetIssueRelationsResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{76}
}

func (x *GetIssueRelationsResponse) GetData() *IssueRelations {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetIssueRelationsResponse) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type IssueRelations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelatedTo  []*Issue `protobuf:"bytes,1,rep,name=relatedTo,proto3" json:"relatedTo,omitempty"`
	RelatedBy  []*Issue `protobuf:"bytes,2,rep,name=relatedBy,proto3" json:"relatedBy,omitempty"`
	Include    []*Issue `protobuf:"bytes,3,rep,name=include,proto3" json:"include,omitempty"`
	BeIncluded []*Issue `protobuf:"bytes,4,rep,name=beIncluded,proto3" json:"beIncluded,omitempty"`
}

func (x *IssueRelations) Reset() {
	*x = IssueRelations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueRelations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueRelations) ProtoMessage() {}

func (x *IssueRelations) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueRelations.ProtoReflect.Descriptor instead.
func (*IssueRelations) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{77}
}

func (x *IssueRelations) GetRelatedTo() []*Issue {
	if x != nil {
		return x.RelatedTo
	}
	return nil
}

func (x *IssueRelations) GetRelatedBy() []*Issue {
	if x != nil {
		return x.RelatedBy
	}
	return nil
}

func (x *IssueRelations) GetInclude() []*Issue {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *IssueRelations) GetBeIncluded() []*Issue {
	if x != nil {
		return x.BeIncluded
	}
	return nil
}

type CreateIssueStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID    uint64           `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IssueType    string           `protobuf:"bytes,2,opt,name=issueType,proto3" json:"issueType,omitempty"`
	StateName    string           `protobuf:"bytes,3,opt,name=stateName,proto3" json:"stateName,omitempty"`
	StateBelong  string           `protobuf:"bytes,4,opt,name=stateBelong,proto3" json:"stateBelong,omitempty"`
	IdentityInfo *pb.IdentityInfo `protobuf:"bytes,5,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *CreateIssueStateRequest) Reset() {
	*x = CreateIssueStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIssueStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssueStateRequest) ProtoMessage() {}

func (x *CreateIssueStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssueStateRequest.ProtoReflect.Descriptor instead.
func (*CreateIssueStateRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{78}
}

func (x *CreateIssueStateRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *CreateIssueStateRequest) GetIssueType() string {
	if x != nil {
		return x.IssueType
	}
	return ""
}

func (x *CreateIssueStateRequest) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *CreateIssueStateRequest) GetStateBelong() string {
	if x != nil {
		return x.StateBelong
	}
	return ""
}

func (x *CreateIssueStateRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type CreateIssueStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateIssueStateResponse) Reset() {
	*x = CreateIssueStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIssueStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssueStateResponse) ProtoMessage() {}

func (x *CreateIssueStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssueStateResponse.ProtoReflect.Descriptor instead.
func (*CreateIssueStateResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{79}
}

func (x *CreateIssueStateResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type DeleteIssueStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID    int64            `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Id           int64            `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	IdentityInfo *pb.IdentityInfo `protobuf:"bytes,3,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *DeleteIssueStateRequest) Reset() {
	*x = DeleteIssueStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIssueStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIssueStateRequest) ProtoMessage() {}

func (x *DeleteIssueStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIssueStateRequest.ProtoReflect.Descriptor instead.
func (*DeleteIssueStateRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{80}
}

func (x *DeleteIssueStateRequest) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *DeleteIssueStateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteIssueStateRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type DeleteIssueStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *IssueStatus `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteIssueStateResponse) Reset() {
	*x = DeleteIssueStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIssueStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIssueStateResponse) ProtoMessage() {}

func (x *DeleteIssueStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIssueStateResponse.ProtoReflect.Descriptor instead.
func (*DeleteIssueStateResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{81}
}

func (x *DeleteIssueStateResponse) GetData() *IssueStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type IssueStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IssueType   string `protobuf:"bytes,2,opt,name=issueType,proto3" json:"issueType,omitempty"`
	StateName   string `protobuf:"bytes,3,opt,name=stateName,proto3" json:"stateName,omitempty"`
	StateBelong string `protobuf:"bytes,4,opt,name=stateBelong,proto3" json:"stateBelong,omitempty"`
	StateID     int64  `protobuf:"varint,5,opt,name=stateID,proto3" json:"stateID,omitempty"`
	Index       int64  `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *IssueStatus) Reset() {
	*x = IssueStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueStatus) ProtoMessage() {}

func (x *IssueStatus) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueStatus.ProtoReflect.Descriptor instead.
func (*IssueStatus) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{82}
}

func (x *IssueStatus) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *IssueStatus) GetIssueType() string {
	if x != nil {
		return x.IssueType
	}
	return ""
}

func (x *IssueStatus) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *IssueStatus) GetStateBelong() string {
	if x != nil {
		return x.StateBelong
	}
	return ""
}

func (x *IssueStatus) GetStateID() int64 {
	if x != nil {
		return x.StateID
	}
	return 0
}

func (x *IssueStatus) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type IssueStateRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID     uint64  `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IssueType     string  `protobuf:"bytes,2,opt,name=issueType,proto3" json:"issueType,omitempty"`
	StateName     string  `protobuf:"bytes,3,opt,name=stateName,proto3" json:"stateName,omitempty"`
	StateBelong   string  `protobuf:"bytes,4,opt,name=stateBelong,proto3" json:"stateBelong,omitempty"`
	StateID       int64   `protobuf:"varint,5,opt,name=stateID,proto3" json:"stateID,omitempty"`
	Index         int64   `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
	StateRelation []int64 `protobuf:"varint,7,rep,packed,name=stateRelation,proto3" json:"stateRelation,omitempty"`
}

func (x *IssueStateRelation) Reset() {
	*x = IssueStateRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueStateRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueStateRelation) ProtoMessage() {}

func (x *IssueStateRelation) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueStateRelation.ProtoReflect.Descriptor instead.
func (*IssueStateRelation) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{83}
}

func (x *IssueStateRelation) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *IssueStateRelation) GetIssueType() string {
	if x != nil {
		return x.IssueType
	}
	return ""
}

func (x *IssueStateRelation) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *IssueStateRelation) GetStateBelong() string {
	if x != nil {
		return x.StateBelong
	}
	return ""
}

func (x *IssueStateRelation) GetStateID() int64 {
	if x != nil {
		return x.StateID
	}
	return 0
}

func (x *IssueStateRelation) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *IssueStateRelation) GetStateRelation() []int64 {
	if x != nil {
		return x.StateRelation
	}
	return nil
}

type UpdateIssueStateRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID    int64                 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Data         []*IssueStateRelation `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	IdentityInfo *pb.IdentityInfo      `protobuf:"bytes,3,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *UpdateIssueStateRelationRequest) Reset() {
	*x = UpdateIssueStateRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIssueStateRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssueStateRelationRequest) ProtoMessage() {}

func (x *UpdateIssueStateRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssueStateRelationRequest.ProtoReflect.Descriptor instead.
func (*UpdateIssueStateRelationRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{84}
}

func (x *UpdateIssueStateRelationRequest) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *UpdateIssueStateRelationRequest) GetData() []*IssueStateRelation {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateIssueStateRelationRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type UpdateIssueStateRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*IssueStateRelation `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateIssueStateRelationResponse) Reset() {
	*x = UpdateIssueStateRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIssueStateRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssueStateRelationResponse) ProtoMessage() {}

func (x *UpdateIssueStateRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssueStateRelationResponse.ProtoReflect.Descriptor instead.
func (*UpdateIssueStateRelationResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{85}
}

func (x *UpdateIssueStateRelationResponse) GetData() []*IssueStateRelation {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetIssueStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID    uint64           `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IssueType    string           `protobuf:"bytes,2,opt,name=issueType,proto3" json:"issueType,omitempty"`
	StateBelongs []string         `protobuf:"bytes,3,rep,name=stateBelongs,proto3" json:"stateBelongs,omitempty"`
	IdentityInfo *pb.IdentityInfo `protobuf:"bytes,4,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *GetIssueStatesRequest) Reset() {
	*x = GetIssueStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssueStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssueStatesRequest) ProtoMessage() {}

func (x *GetIssueStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssueStatesRequest.ProtoReflect.Descriptor instead.
func (*GetIssueStatesRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{86}
}

func (x *GetIssueStatesRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *GetIssueStatesRequest) GetIssueType() string {
	if x != nil {
		return x.IssueType
	}
	return ""
}

func (x *GetIssueStatesRequest) GetStateBelongs() []string {
	if x != nil {
		return x.StateBelongs
	}
	return nil
}

func (x *GetIssueStatesRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type GetIssueStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*IssueTypeState `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetIssueStatesResponse) Reset() {
	*x = GetIssueStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssueStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssueStatesResponse) ProtoMessage() {}

func (x *GetIssueStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssueStatesResponse.ProtoReflect.Descriptor instead.
func (*GetIssueStatesResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{87}
}

func (x *GetIssueStatesResponse) GetData() []*IssueTypeState {
	if x != nil {
		return x.Data
	}
	return nil
}

type IssueTypeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueType string   `protobuf:"bytes,1,opt,name=issueType,proto3" json:"issueType,omitempty"`
	State     []string `protobuf:"bytes,2,rep,name=state,proto3" json:"state,omitempty"`
}

func (x *IssueTypeState) Reset() {
	*x = IssueTypeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueTypeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTypeState) ProtoMessage() {}

func (x *IssueTypeState) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTypeState.ProtoReflect.Descriptor instead.
func (*IssueTypeState) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{88}
}

func (x *IssueTypeState) GetIssueType() string {
	if x != nil {
		return x.IssueType
	}
	return ""
}

func (x *IssueTypeState) GetState() []string {
	if x != nil {
		return x.State
	}
	return nil
}

type GetIssueStateRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID    uint64           `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IssueType    string           `protobuf:"bytes,2,opt,name=issueType,proto3" json:"issueType,omitempty"`
	IdentityInfo *pb.IdentityInfo `protobuf:"bytes,3,opt,name=identityInfo,json=-,proto3" json:"identityInfo,omitempty"`
}

func (x *GetIssueStateRelationRequest) Reset() {
	*x = GetIssueStateRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssueStateRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssueStateRelationRequest) ProtoMessage() {}

func (x *GetIssueStateRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssueStateRelationRequest.ProtoReflect.Descriptor instead.
func (*GetIssueStateRelationRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{89}
}

func (x *GetIssueStateRelationRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *GetIssueStateRelationRequest) GetIssueType() string {
	if x != nil {
		return x.IssueType
	}
	return ""
}

func (x *GetIssueStateRelationRequest) GetIdentityInfo() *pb.IdentityInfo {
	if x != nil {
		return x.IdentityInfo
	}
	return nil
}

type GetIssueStateRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*IssueStateRelation `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetIssueStateRelationResponse) Reset() {
	*x = GetIssueStateRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssueStateRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssueStateRelationResponse) ProtoMessage() {}

func (x *GetIssueStateRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssueStateRelationResponse.ProtoReflect.Descriptor instead.
func (*GetIssueStateRelationResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{90}
}

func (x *GetIssueStateRelationResponse) GetData() []*IssueStateRelation {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_core_proto protoreflect.FileDescriptor

var file_core_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x07, 0x0a, 0x12,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x12, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c,
	0x49, 0x44, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x4b, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4d,
	0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52,
	0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x67,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x67,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x12, 0x13, 0x0a, 0x08, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x2d,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x44,
	0x22, 0x29, 0x0a, 0x13, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x21, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5c,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x8f, 0x08, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x70,
	0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x08, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x15,
	0x77, 0x69, 0x74, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x77, 0x69, 0x74,
	0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f,
	0x75, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x0c, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x6c, 0x49, 0x44, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x01, 0x2d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x29,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x45, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xea, 0x03, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x6e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x01, 0x2d, 0x22, 0x1a, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb7, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x22, 0x2d, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x11, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x22, 0x4c, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x22, 0x39, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xb3, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x22, 0x65, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xda,
	0x04, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x56, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x10, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x22, 0x5a, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0c,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d,
	0x22, 0x5a, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcc, 0x05, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x6a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x4a, 0x0a, 0x10, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x22, 0x5a, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb5, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x22,
	0x57, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x01, 0x2d, 0x22, 0x61, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x15,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x29, 0x0a, 0x17, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e,
	0x0a, 0x18, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcf,
	0x01, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x13, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x38, 0x0a, 0x22, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd9, 0x0c, 0x0a, 0x05, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6c, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x6c,
	0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12,
	0x4b, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0b,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0c, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x45, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x3a, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x10,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x52, 0x10, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44,
	0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72,
	0x65, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x0a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb7,
	0x06, 0x0a, 0x15, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x44, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x6a,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4a, 0x0a, 0x10,
	0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x18,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x90, 0x05, 0x0a, 0x12, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x56, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x4a, 0x0a, 0x10, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x10, 0x65,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x22, 0x37, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x42, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x6f,
	0x72, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x10, 0x04, 0x22, 0x51, 0x0a, 0x0d, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x40, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x55, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x50, 0x49, 0x43, 0x10, 0x04, 0x22, 0x4a, 0x0a, 0x11,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75,
	0x6d, 0x22, 0x35, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x52, 0x47,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x22, 0x44, 0x0a, 0x13, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x22,
	0x2d, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41,
	0x52, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x41, 0x53, 0x59, 0x10, 0x02, 0x22, 0x5c,
	0x0a, 0x11, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x45,
	0x6e, 0x75, 0x6d, 0x22, 0x47, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x49, 0x4f, 0x55,
	0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x10, 0x04, 0x22, 0x79, 0x0a, 0x14,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x45, 0x6e, 0x75, 0x6d, 0x22, 0x61, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f,
	0x4e, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x4e, 0x54, 0x46, 0x49, 0x58, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x06, 0x22, 0x42, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x22,
	0x2a, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x10, 0x01, 0x22, 0x9e, 0x02, 0x0a, 0x0c,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68, 0x69, 0x73, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x68, 0x69, 0x73, 0x45,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a,
	0x10, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x64, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc4, 0x02, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xaa, 0x04, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x41, 0x0a, 0x08, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x41, 0x50, 0x49, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x42, 0x75, 0x67, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x42, 0x75, 0x67, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x42, 0x75, 0x67, 0x73, 0x22, 0x8c,
	0x01, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0xa3, 0x02,
	0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x75, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x4a, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x32, 0x0a, 0x10, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x06, 0x0a, 0x02, 0x50, 0x30, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x31, 0x10, 0x01, 0x12,
	0x06, 0x0a, 0x02, 0x50, 0x32, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x33, 0x10, 0x03, 0x22,
	0x99, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x78, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03,
	0x55, 0x52, 0x4c, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x08,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x09, 0x22, 0x66, 0x0a, 0x15, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x22, 0x4d, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41,
	0x53, 0x4b, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x45, 0x50, 0x49, 0x43, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x4f,
	0x4e, 0x10, 0x04, 0x22, 0x45, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41,
	0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49,
	0x44, 0x12, 0x4b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0x9a,
	0x03, 0x0a, 0x1a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x56, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x61, 0x72, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x65, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x10, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x18, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x75, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x70, 0x69,
	0x63, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x92, 0x0b, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e,
	0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x34, 0x0a, 0x15, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x49, 0x44, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x49, 0x44, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x73, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x73, 0x63, 0x12, 0x10,
	0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x44, 0x73,
	0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x01, 0x2d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e,
	0x6c, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f,
	0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x77, 0x69, 0x74, 0x68, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x61, 0x70, 0x70, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xd0, 0x09, 0x0a, 0x10, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x77,
	0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x49, 0x44, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x49, 0x44, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x73,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x49, 0x44, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x13, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x5f,
	0x0a, 0x17, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xf9, 0x0a, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x65,
	0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x77, 0x69, 0x74,
	0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x49, 0x44, 0x73, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x49, 0x44, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x73, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x73, 0x63, 0x12,
	0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x49, 0x44,
	0x73, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x01, 0x2d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f,
	0x6e, 0x6c, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x6f, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x18, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xad, 0x01, 0x0a, 0x17,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x22, 0x2e, 0x0a, 0x18, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaf, 0x01, 0x0a, 0x17,
	0x41, 0x64, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x2d, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1a, 0x0a,
	0x18, 0x41, 0x64, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x12,
	0x1b, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1d, 0x0a, 0x1b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x0e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x6f, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x62, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x0a, 0x62, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x22, 0xc9, 0x01,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x22, 0x2e, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x22, 0x50, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb9, 0x01, 0x0a, 0x0b, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01,
	0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0c,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d,
	0x22, 0x5f, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xab, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x22,
	0x51, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x44, 0x0a, 0x0e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x2d, 0x22, 0x5c, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xe0, 0x2e, 0x0a, 0x10, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x87, 0x01, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x27, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x0d, 0x0a, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x12, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0xfa, 0x81,
	0xf9, 0x1b, 0x0d, 0x0a, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x12, 0x88, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x24, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x12, 0x0a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x27, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x1a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x12, 0x0a, 0x10, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x91, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12,
	0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b,
	0x12, 0x0a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xc0, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x1a, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0xfa,
	0x81, 0xf9, 0x1b, 0x22, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xc7, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x1a, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x27, 0x0a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x12, 0xbe, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x24, 0x0a, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0xc8, 0x01, 0x0a, 0x10, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x24, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x26, 0x0a, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0xfe, 0x01, 0x0a,
	0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x32, 0x1a, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0xfa, 0x81, 0xf9, 0x1b, 0x32, 0x0a, 0x30, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0xcf, 0x01,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0xfa, 0x81, 0xf9, 0x1b, 0x25, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0xcf, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x2a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0xfa, 0x81, 0xf9, 0x1b, 0x25, 0x0a, 0x23, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0xcf, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x1a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0xfa, 0x81, 0xf9, 0x1b, 0x25, 0x0a, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0xc4, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x24, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0xf4, 0x01, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x1a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0xfa,
	0x81, 0xf9, 0x1b, 0x2d, 0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2d, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0xec, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67,
	0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2d, 0x74, 0x69,
	0x6d, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x29, 0x0a, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74,
	0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2d, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0xf9, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x2c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x2e, 0x0a, 0x2c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xea, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x2b, 0x0a, 0x29,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x73, 0x74, 0x61, 0x67, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x1e, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67,
	0x65, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x1a, 0x1f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x67, 0x65, 0xfa, 0x81, 0xf9,
	0x1b, 0x21, 0x0a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x1c, 0x0a, 0x1a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xdf, 0x01, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x2d, 0x0a,
	0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x7d, 0x12, 0xb7, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x1c, 0x0a, 0x1a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x22, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x22, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xea, 0x01, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x1a, 0x29,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x2b, 0x0a, 0x29,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb6, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x20, 0x0a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0xdd, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x65, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x29, 0x0a, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67,
	0x65, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x65, 0x78, 0x63, 0x65, 0x6c, 0xfa, 0x81,
	0xf9, 0x1b, 0x22, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x65, 0x78, 0x63, 0x65, 0x6c, 0x12, 0xc0, 0x01, 0x0a, 0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22,
	0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x65, 0x78, 0x63, 0x65,
	0x6c, 0xfa, 0x81, 0xf9, 0x1b, 0x22, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x1a, 0x10, 0xc2, 0xc4, 0xcb, 0x1c, 0x0b, 0x22,
	0x03, 0x64, 0x6f, 0x70, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2d, 0x67, 0x6f, 0x2f, 0x64, 0x6f, 0x70, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_proto_rawDescOnce sync.Once
	file_core_proto_rawDescData = file_core_proto_rawDesc
)

func file_core_proto_rawDescGZIP() []byte {
	file_core_proto_rawDescOnce.Do(func() {
		file_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_proto_rawDescData)
	})
	return file_core_proto_rawDescData
}

var file_core_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_core_proto_msgTypes = make([]protoimpl.MessageInfo, 91)
var file_core_proto_goTypes = []interface{}{
	(ScopeTypeEnum_ScopeType)(0),                 // 0: erda.dop.issue.core.ScopeTypeEnum.ScopeType
	(IssueTypeEnum_Type)(0),                      // 1: erda.dop.issue.core.IssueTypeEnum.Type
	(IssuePriorityEnum_Priority)(0),              // 2: erda.dop.issue.core.IssuePriorityEnum.Priority
	(IssueComplexityEnum_Complextity)(0),         // 3: erda.dop.issue.core.IssueComplexityEnum.Complextity
	(IssueSeverityEnum_Severity)(0),              // 4: erda.dop.issue.core.IssueSeverityEnum.Severity
	(IssueStateBelongEnum_StateBelong)(0),        // 5: erda.dop.issue.core.IssueStateBelongEnum.StateBelong
	(ProjectLabelTypeEnum_ProjectLabelType)(0),   // 6: erda.dop.issue.core.ProjectLabelTypeEnum.ProjectLabelType
	(TestCasePriorityEnum_TestCasePriority)(0),   // 7: erda.dop.issue.core.TestCasePriorityEnum.TestCasePriority
	(PropertyTypeEnum_PropertyType)(0),           // 8: erda.dop.issue.core.PropertyTypeEnum.PropertyType
	(PropertyIssueTypeEnum_PropertyIssueType)(0), // 9: erda.dop.issue.core.PropertyIssueTypeEnum.PropertyIssueType
	(*IssueCreateRequest)(nil),                   // 10: erda.dop.issue.core.IssueCreateRequest
	(*IssueCreateResponse)(nil),                  // 11: erda.dop.issue.core.IssueCreateResponse
	(*GetIssueRequest)(nil),                      // 12: erda.dop.issue.core.GetIssueRequest
	(*GetIssueResponse)(nil),                     // 13: erda.dop.issue.core.GetIssueResponse
	(*UpdateIssueRequest)(nil),                   // 14: erda.dop.issue.core.UpdateIssueRequest
	(*UpdateIssueResponse)(nil),                  // 15: erda.dop.issue.core.UpdateIssueResponse
	(*DeleteIssueRequest)(nil),                   // 16: erda.dop.issue.core.DeleteIssueRequest
	(*DeleteIssueResponse)(nil),                  // 17: erda.dop.issue.core.DeleteIssueResponse
	(*BatchUpdateIssueRequest)(nil),              // 18: erda.dop.issue.core.BatchUpdateIssueRequest
	(*BatchUpdateIssueResponse)(nil),             // 19: erda.dop.issue.core.BatchUpdateIssueResponse
	(*UpdateIssueTypeRequest)(nil),               // 20: erda.dop.issue.core.UpdateIssueTypeRequest
	(*UpdateIssueTypeResponse)(nil),              // 21: erda.dop.issue.core.UpdateIssueTypeResponse
	(*IssueStageRequest)(nil),                    // 22: erda.dop.issue.core.IssueStageRequest
	(*GetIssueStageResponse)(nil),                // 23: erda.dop.issue.core.GetIssueStageResponse
	(*UpdateIssueStageResponse)(nil),             // 24: erda.dop.issue.core.UpdateIssueStageResponse
	(*CreateIssuePropertyInstanceRequest)(nil),   // 25: erda.dop.issue.core.CreateIssuePropertyInstanceRequest
	(*CreateIssuePropertyInstanceResponse)(nil),  // 26: erda.dop.issue.core.CreateIssuePropertyInstanceResponse
	(*GetIssuePropertyInstanceRequest)(nil),      // 27: erda.dop.issue.core.GetIssuePropertyInstanceRequest
	(*GetIssuePropertyInstanceResponse)(nil),     // 28: erda.dop.issue.core.GetIssuePropertyInstanceResponse
	(*CreateIssuePropertyRequest)(nil),           // 29: erda.dop.issue.core.CreateIssuePropertyRequest
	(*CreateIssuePropertyResponse)(nil),          // 30: erda.dop.issue.core.CreateIssuePropertyResponse
	(*DeleteIssuePropertyRequest)(nil),           // 31: erda.dop.issue.core.DeleteIssuePropertyRequest
	(*DeleteIssuePropertyResponse)(nil),          // 32: erda.dop.issue.core.DeleteIssuePropertyResponse
	(*UpdateIssuePropertyRequest)(nil),           // 33: erda.dop.issue.core.UpdateIssuePropertyRequest
	(*UpdateIssuePropertyResponse)(nil),          // 34: erda.dop.issue.core.UpdateIssuePropertyResponse
	(*GetIssuePropertyRequest)(nil),              // 35: erda.dop.issue.core.GetIssuePropertyRequest
	(*GetIssuePropertyResponse)(nil),             // 36: erda.dop.issue.core.GetIssuePropertyResponse
	(*UpdateIssuePropertiesIndexRequest)(nil),    // 37: erda.dop.issue.core.UpdateIssuePropertiesIndexRequest
	(*UpdateIssuePropertiesIndexResponse)(nil),   // 38: erda.dop.issue.core.UpdateIssuePropertiesIndexResponse
	(*GetIssuePropertyUpdateTimeRequest)(nil),    // 39: erda.dop.issue.core.GetIssuePropertyUpdateTimeRequest
	(*GetIssuePropertyUpdateTimeResponse)(nil),   // 40: erda.dop.issue.core.GetIssuePropertyUpdateTimeResponse
	(*SubscribeIssueRequest)(nil),                // 41: erda.dop.issue.core.SubscribeIssueRequest
	(*SubscribeIssueResponse)(nil),               // 42: erda.dop.issue.core.SubscribeIssueResponse
	(*UnsubscribeIssueRequest)(nil),              // 43: erda.dop.issue.core.UnsubscribeIssueRequest
	(*UnsubscribeIssueResponse)(nil),             // 44: erda.dop.issue.core.UnsubscribeIssueResponse
	(*BatchUpdateIssueSubscriberRequest)(nil),    // 45: erda.dop.issue.core.BatchUpdateIssueSubscriberRequest
	(*BatchUpdateIssueSubscriberResponse)(nil),   // 46: erda.dop.issue.core.BatchUpdateIssueSubscriberResponse
	(*Issue)(nil),                            // 47: erda.dop.issue.core.Issue
	(*IssueStage)(nil),                       // 48: erda.dop.issue.core.IssueStage
	(*IssuePropertyInstance)(nil),            // 49: erda.dop.issue.core.IssuePropertyInstance
	(*IssuePropertyIndex)(nil),               // 50: erda.dop.issue.core.IssuePropertyIndex
	(*PropertyEnumerate)(nil),                // 51: erda.dop.issue.core.PropertyEnumerate
	(*ScopeTypeEnum)(nil),                    // 52: erda.dop.issue.core.ScopeTypeEnum
	(*IssueTypeEnum)(nil),                    // 53: erda.dop.issue.core.IssueTypeEnum
	(*IssuePriorityEnum)(nil),                // 54: erda.dop.issue.core.IssuePriorityEnum
	(*IssueComplexityEnum)(nil),              // 55: erda.dop.issue.core.IssueComplexityEnum
	(*IssueSeverityEnum)(nil),                // 56: erda.dop.issue.core.IssueSeverityEnum
	(*IssueStateBelongEnum)(nil),             // 57: erda.dop.issue.core.IssueStateBelongEnum
	(*ProjectLabelTypeEnum)(nil),             // 58: erda.dop.issue.core.ProjectLabelTypeEnum
	(*IssueManHour)(nil),                     // 59: erda.dop.issue.core.IssueManHour
	(*IssueStateButton)(nil),                 // 60: erda.dop.issue.core.IssueStateButton
	(*IssueSummary)(nil),                     // 61: erda.dop.issue.core.IssueSummary
	(*ProjectLabel)(nil),                     // 62: erda.dop.issue.core.ProjectLabel
	(*TestPlanCaseRel)(nil),                  // 63: erda.dop.issue.core.TestPlanCaseRel
	(*TestCaseAPICount)(nil),                 // 64: erda.dop.issue.core.TestCaseAPICount
	(*TestPlanCaseRelIssueBug)(nil),          // 65: erda.dop.issue.core.TestPlanCaseRelIssueBug
	(*TestCasePriorityEnum)(nil),             // 66: erda.dop.issue.core.TestCasePriorityEnum
	(*PropertyTypeEnum)(nil),                 // 67: erda.dop.issue.core.PropertyTypeEnum
	(*PropertyIssueTypeEnum)(nil),            // 68: erda.dop.issue.core.PropertyIssueTypeEnum
	(*Enumerate)(nil),                        // 69: erda.dop.issue.core.Enumerate
	(*IssueAndPropertyAndValue)(nil),         // 70: erda.dop.issue.core.IssueAndPropertyAndValue
	(*IssuePropertyExtraProperty)(nil),       // 71: erda.dop.issue.core.IssuePropertyExtraProperty
	(*IssuePropertyUpdateTimes)(nil),         // 72: erda.dop.issue.core.IssuePropertyUpdateTimes
	(*PagingIssueRequest)(nil),               // 73: erda.dop.issue.core.PagingIssueRequest
	(*IssueListRequest)(nil),                 // 74: erda.dop.issue.core.IssueListRequest
	(*PagingIssueResponse)(nil),              // 75: erda.dop.issue.core.PagingIssueResponse
	(*IssuePagingResponseData)(nil),          // 76: erda.dop.issue.core.IssuePagingResponseData
	(*ExportExcelIssueRequest)(nil),          // 77: erda.dop.issue.core.ExportExcelIssueRequest
	(*ExportExcelIssueResponse)(nil),         // 78: erda.dop.issue.core.ExportExcelIssueResponse
	(*ImportExcelIssueRequest)(nil),          // 79: erda.dop.issue.core.ImportExcelIssueRequest
	(*ImportExcelIssueResponse)(nil),         // 80: erda.dop.issue.core.ImportExcelIssueResponse
	(*AddIssueRelationRequest)(nil),          // 81: erda.dop.issue.core.AddIssueRelationRequest
	(*AddIssueRelationResponse)(nil),         // 82: erda.dop.issue.core.AddIssueRelationResponse
	(*DeleteIssueRelationRequest)(nil),       // 83: erda.dop.issue.core.DeleteIssueRelationRequest
	(*DeleteIssueRelationResponse)(nil),      // 84: erda.dop.issue.core.DeleteIssueRelationResponse
	(*GetIssueRelationsRequest)(nil),         // 85: erda.dop.issue.core.GetIssueRelationsRequest
	(*GetIssueRelationsResponse)(nil),        // 86: erda.dop.issue.core.GetIssueRelationsResponse
	(*IssueRelations)(nil),                   // 87: erda.dop.issue.core.IssueRelations
	(*CreateIssueStateRequest)(nil),          // 88: erda.dop.issue.core.CreateIssueStateRequest
	(*CreateIssueStateResponse)(nil),         // 89: erda.dop.issue.core.CreateIssueStateResponse
	(*DeleteIssueStateRequest)(nil),          // 90: erda.dop.issue.core.DeleteIssueStateRequest
	(*DeleteIssueStateResponse)(nil),         // 91: erda.dop.issue.core.DeleteIssueStateResponse
	(*IssueStatus)(nil),                      // 92: erda.dop.issue.core.IssueStatus
	(*IssueStateRelation)(nil),               // 93: erda.dop.issue.core.IssueStateRelation
	(*UpdateIssueStateRelationRequest)(nil),  // 94: erda.dop.issue.core.UpdateIssueStateRelationRequest
	(*UpdateIssueStateRelationResponse)(nil), // 95: erda.dop.issue.core.UpdateIssueStateRelationResponse
	(*GetIssueStatesRequest)(nil),            // 96: erda.dop.issue.core.GetIssueStatesRequest
	(*GetIssueStatesResponse)(nil),           // 97: erda.dop.issue.core.GetIssueStatesResponse
	(*IssueTypeState)(nil),                   // 98: erda.dop.issue.core.IssueTypeState
	(*GetIssueStateRelationRequest)(nil),     // 99: erda.dop.issue.core.GetIssueStateRelationRequest
	(*GetIssueStateRelationResponse)(nil),    // 100: erda.dop.issue.core.GetIssueStateRelationResponse
	(*timestamppb.Timestamp)(nil),            // 101: google.protobuf.Timestamp
	(*pb.IdentityInfo)(nil),                  // 102: erda.common.IdentityInfo
	(*structpb.Value)(nil),                   // 103: google.protobuf.Value
}
var file_core_proto_depIdxs = []int32{
	101, // 0: erda.dop.issue.core.IssueCreateRequest.planStartedAt:type_name -> google.protobuf.Timestamp
	101, // 1: erda.dop.issue.core.IssueCreateRequest.planFinishedAt:type_name -> google.protobuf.Timestamp
	1,   // 2: erda.dop.issue.core.IssueCreateRequest.type:type_name -> erda.dop.issue.core.IssueTypeEnum.Type
	2,   // 3: erda.dop.issue.core.IssueCreateRequest.priority:type_name -> erda.dop.issue.core.IssuePriorityEnum.Priority
	3,   // 4: erda.dop.issue.core.IssueCreateRequest.complexity:type_name -> erda.dop.issue.core.IssueComplexityEnum.Complextity
	4,   // 5: erda.dop.issue.core.IssueCreateRequest.severity:type_name -> erda.dop.issue.core.IssueSeverityEnum.Severity
	59,  // 6: erda.dop.issue.core.IssueCreateRequest.issueManHour:type_name -> erda.dop.issue.core.IssueManHour
	102, // 7: erda.dop.issue.core.IssueCreateRequest.identityInfo:type_name -> erda.common.IdentityInfo
	47,  // 8: erda.dop.issue.core.GetIssueResponse.data:type_name -> erda.dop.issue.core.Issue
	59,  // 9: erda.dop.issue.core.UpdateIssueRequest.issueManHour:type_name -> erda.dop.issue.core.IssueManHour
	102, // 10: erda.dop.issue.core.UpdateIssueRequest.identityInfo:type_name -> erda.common.IdentityInfo
	47,  // 11: erda.dop.issue.core.DeleteIssueResponse.data:type_name -> erda.dop.issue.core.Issue
	1,   // 12: erda.dop.issue.core.BatchUpdateIssueRequest.type:type_name -> erda.dop.issue.core.IssueTypeEnum.Type
	102, // 13: erda.dop.issue.core.BatchUpdateIssueRequest.identityInfo:type_name -> erda.common.IdentityInfo
	1,   // 14: erda.dop.issue.core.UpdateIssueTypeRequest.type:type_name -> erda.dop.issue.core.IssueTypeEnum.Type
	102, // 15: erda.dop.issue.core.UpdateIssueTypeRequest.identityInfo:type_name -> erda.common.IdentityInfo
	48,  // 16: erda.dop.issue.core.IssueStageRequest.list:type_name -> erda.dop.issue.core.IssueStage
	102, // 17: erda.dop.issue.core.IssueStageRequest.identityInfo:type_name -> erda.common.IdentityInfo
	48,  // 18: erda.dop.issue.core.GetIssueStageResponse.data:type_name -> erda.dop.issue.core.IssueStage
	49,  // 19: erda.dop.issue.core.CreateIssuePropertyInstanceRequest.property:type_name -> erda.dop.issue.core.IssuePropertyInstance
	102, // 20: erda.dop.issue.core.CreateIssuePropertyInstanceRequest.identityInfo:type_name -> erda.common.IdentityInfo
	102, // 21: erda.dop.issue.core.GetIssuePropertyInstanceRequest.identityInfo:type_name -> erda.common.IdentityInfo
	70,  // 22: erda.dop.issue.core.GetIssuePropertyInstanceResponse.data:type_name -> erda.dop.issue.core.IssueAndPropertyAndValue
	0,   // 23: erda.dop.issue.core.CreateIssuePropertyRequest.scopeType:type_name -> erda.dop.issue.core.ScopeTypeEnum.ScopeType
	8,   // 24: erda.dop.issue.core.CreateIssuePropertyRequest.propertyType:type_name -> erda.dop.issue.core.PropertyTypeEnum.PropertyType
	9,   // 25: erda.dop.issue.core.CreateIssuePropertyRequest.propertyIssueType:type_name -> erda.dop.issue.core.PropertyIssueTypeEnum.PropertyIssueType
	69,  // 26: erda.dop.issue.core.CreateIssuePropertyRequest.enumeratedValues:type_name -> erda.dop.issue.core.Enumerate
	102, // 27: erda.dop.issue.core.CreateIssuePropertyRequest.identityInfo:type_name -> erda.common.IdentityInfo
	50,  // 28: erda.dop.issue.core.CreateIssuePropertyResponse.data:type_name -> erda.dop.issue.core.IssuePropertyIndex
	102, // 29: erda.dop.issue.core.DeleteIssuePropertyRequest.identityInfo:type_name -> erda.common.IdentityInfo
	50,  // 30: erda.dop.issue.core.DeleteIssuePropertyResponse.data:type_name -> erda.dop.issue.core.IssuePropertyIndex
	0,   // 31: erda.dop.issue.core.UpdateIssuePropertyRequest.scopeType:type_name -> erda.dop.issue.core.ScopeTypeEnum.ScopeType
	8,   // 32: erda.dop.issue.core.UpdateIssuePropertyRequest.propertyType:type_name -> erda.dop.issue.core.PropertyTypeEnum.PropertyType
	9,   // 33: erda.dop.issue.core.UpdateIssuePropertyRequest.propertyIssueType:type_name -> erda.dop.issue.core.PropertyIssueTypeEnum.PropertyIssueType
	69,  // 34: erda.dop.issue.core.UpdateIssuePropertyRequest.enumeratedValues:type_name -> erda.dop.issue.core.Enumerate
	102, // 35: erda.dop.issue.core.UpdateIssuePropertyRequest.identityInfo:type_name -> erda.common.IdentityInfo
	50,  // 36: erda.dop.issue.core.UpdateIssuePropertyResponse.data:type_name -> erda.dop.issue.core.IssuePropertyIndex
	102, // 37: erda.dop.issue.core.GetIssuePropertyRequest.identityInfo:type_name -> erda.common.IdentityInfo
	50,  // 38: erda.dop.issue.core.GetIssuePropertyResponse.data:type_name -> erda.dop.issue.core.IssuePropertyIndex
	50,  // 39: erda.dop.issue.core.UpdateIssuePropertiesIndexRequest.data:type_name -> erda.dop.issue.core.IssuePropertyIndex
	102, // 40: erda.dop.issue.core.UpdateIssuePropertiesIndexRequest.identityInfo:type_name -> erda.common.IdentityInfo
	50,  // 41: erda.dop.issue.core.UpdateIssuePropertiesIndexResponse.data:type_name -> erda.dop.issue.core.IssuePropertyIndex
	72,  // 42: erda.dop.issue.core.GetIssuePropertyUpdateTimeResponse.data:type_name -> erda.dop.issue.core.IssuePropertyUpdateTimes
	102, // 43: erda.dop.issue.core.BatchUpdateIssueSubscriberRequest.identityInfo:type_name -> erda.common.IdentityInfo
	101, // 44: erda.dop.issue.core.Issue.createdAt:type_name -> google.protobuf.Timestamp
	101, // 45: erda.dop.issue.core.Issue.updatedAt:type_name -> google.protobuf.Timestamp
	101, // 46: erda.dop.issue.core.Issue.planStartedAt:type_name -> google.protobuf.Timestamp
	101, // 47: erda.dop.issue.core.Issue.planFinishedAt:type_name -> google.protobuf.Timestamp
	2,   // 48: erda.dop.issue.core.Issue.priority:type_name -> erda.dop.issue.core.IssuePriorityEnum.Priority
	3,   // 49: erda.dop.issue.core.Issue.complexity:type_name -> erda.dop.issue.core.IssueComplexityEnum.Complextity
	4,   // 50: erda.dop.issue.core.Issue.severity:type_name -> erda.dop.issue.core.IssueSeverityEnum.Severity
	60,  // 51: erda.dop.issue.core.Issue.issueButton:type_name -> erda.dop.issue.core.IssueStateButton
	61,  // 52: erda.dop.issue.core.Issue.issueSummary:type_name -> erda.dop.issue.core.IssueSummary
	62,  // 53: erda.dop.issue.core.Issue.labelDetails:type_name -> erda.dop.issue.core.ProjectLabel
	59,  // 54: erda.dop.issue.core.Issue.issueManHour:type_name -> erda.dop.issue.core.IssueManHour
	101, // 55: erda.dop.issue.core.Issue.finishTime:type_name -> google.protobuf.Timestamp
	63,  // 56: erda.dop.issue.core.Issue.testPlanCaseRels:type_name -> erda.dop.issue.core.TestPlanCaseRel
	1,   // 57: erda.dop.issue.core.Issue.type:type_name -> erda.dop.issue.core.IssueTypeEnum.Type
	71,  // 58: erda.dop.issue.core.Issue.propertyInstances:type_name -> erda.dop.issue.core.IssuePropertyExtraProperty
	0,   // 59: erda.dop.issue.core.IssuePropertyInstance.scopeType:type_name -> erda.dop.issue.core.ScopeTypeEnum.ScopeType
	8,   // 60: erda.dop.issue.core.IssuePropertyInstance.propertyType:type_name -> erda.dop.issue.core.PropertyTypeEnum.PropertyType
	9,   // 61: erda.dop.issue.core.IssuePropertyInstance.propertyIssueType:type_name -> erda.dop.issue.core.PropertyIssueTypeEnum.PropertyIssueType
	69,  // 62: erda.dop.issue.core.IssuePropertyInstance.enumeratedValues:type_name -> erda.dop.issue.core.Enumerate
	103, // 63: erda.dop.issue.core.IssuePropertyInstance.arbitraryValue:type_name -> google.protobuf.Value
	51,  // 64: erda.dop.issue.core.IssuePropertyInstance.propertyEnumeratedValues:type_name -> erda.dop.issue.core.PropertyEnumerate
	0,   // 65: erda.dop.issue.core.IssuePropertyIndex.scopeType:type_name -> erda.dop.issue.core.ScopeTypeEnum.ScopeType
	8,   // 66: erda.dop.issue.core.IssuePropertyIndex.propertyType:type_name -> erda.dop.issue.core.PropertyTypeEnum.PropertyType
	9,   // 67: erda.dop.issue.core.IssuePropertyIndex.propertyIssueType:type_name -> erda.dop.issue.core.PropertyIssueTypeEnum.PropertyIssueType
	69,  // 68: erda.dop.issue.core.IssuePropertyIndex.enumeratedValues:type_name -> erda.dop.issue.core.Enumerate
	5,   // 69: erda.dop.issue.core.IssueStateButton.stateBelong:type_name -> erda.dop.issue.core.IssueStateBelongEnum.StateBelong
	6,   // 70: erda.dop.issue.core.ProjectLabel.type:type_name -> erda.dop.issue.core.ProjectLabelTypeEnum.ProjectLabelType
	101, // 71: erda.dop.issue.core.ProjectLabel.createdAt:type_name -> google.protobuf.Timestamp
	101, // 72: erda.dop.issue.core.ProjectLabel.updatedAt:type_name -> google.protobuf.Timestamp
	101, // 73: erda.dop.issue.core.TestPlanCaseRel.createdAt:type_name -> google.protobuf.Timestamp
	101, // 74: erda.dop.issue.core.TestPlanCaseRel.updatedAt:type_name -> google.protobuf.Timestamp
	64,  // 75: erda.dop.issue.core.TestPlanCaseRel.APICount:type_name -> erda.dop.issue.core.TestCaseAPICount
	65,  // 76: erda.dop.issue.core.TestPlanCaseRel.issueBugs:type_name -> erda.dop.issue.core.TestPlanCaseRelIssueBug
	101, // 77: erda.dop.issue.core.TestPlanCaseRelIssueBug.createdAt:type_name -> google.protobuf.Timestamp
	71,  // 78: erda.dop.issue.core.IssueAndPropertyAndValue.property:type_name -> erda.dop.issue.core.IssuePropertyExtraProperty
	8,   // 79: erda.dop.issue.core.IssuePropertyExtraProperty.propertyType:type_name -> erda.dop.issue.core.PropertyTypeEnum.PropertyType
	103, // 80: erda.dop.issue.core.IssuePropertyExtraProperty.arbitraryValue:type_name -> google.protobuf.Value
	69,  // 81: erda.dop.issue.core.IssuePropertyExtraProperty.enumeratedValues:type_name -> erda.dop.issue.core.Enumerate
	102, // 82: erda.dop.issue.core.PagingIssueRequest.identityInfo:type_name -> erda.common.IdentityInfo
	102, // 83: erda.dop.issue.core.IssueListRequest.identityInfo:type_name -> erda.common.IdentityInfo
	76,  // 84: erda.dop.issue.core.PagingIssueResponse.data:type_name -> erda.dop.issue.core.IssuePagingResponseData
	47,  // 85: erda.dop.issue.core.IssuePagingResponseData.list:type_name -> erda.dop.issue.core.Issue
	102, // 86: erda.dop.issue.core.ExportExcelIssueRequest.identityInfo:type_name -> erda.common.IdentityInfo
	102, // 87: erda.dop.issue.core.ImportExcelIssueRequest.identityInfo:type_name -> erda.common.IdentityInfo
	87,  // 88: erda.dop.issue.core.GetIssueRelationsResponse.data:type_name -> erda.dop.issue.core.IssueRelations
	47,  // 89: erda.dop.issue.core.IssueRelations.relatedTo:type_name -> erda.dop.issue.core.Issue
	47,  // 90: erda.dop.issue.core.IssueRelations.relatedBy:type_name -> erda.dop.issue.core.Issue
	47,  // 91: erda.dop.issue.core.IssueRelations.include:type_name -> erda.dop.issue.core.Issue
	47,  // 92: erda.dop.issue.core.IssueRelations.beIncluded:type_name -> erda.dop.issue.core.Issue
	102, // 93: erda.dop.issue.core.CreateIssueStateRequest.identityInfo:type_name -> erda.common.IdentityInfo
	102, // 94: erda.dop.issue.core.DeleteIssueStateRequest.identityInfo:type_name -> erda.common.IdentityInfo
	92,  // 95: erda.dop.issue.core.DeleteIssueStateResponse.data:type_name -> erda.dop.issue.core.IssueStatus
	93,  // 96: erda.dop.issue.core.UpdateIssueStateRelationRequest.data:type_name -> erda.dop.issue.core.IssueStateRelation
	102, // 97: erda.dop.issue.core.UpdateIssueStateRelationRequest.identityInfo:type_name -> erda.common.IdentityInfo
	93,  // 98: erda.dop.issue.core.UpdateIssueStateRelationResponse.data:type_name -> erda.dop.issue.core.IssueStateRelation
	102, // 99: erda.dop.issue.core.GetIssueStatesRequest.identityInfo:type_name -> erda.common.IdentityInfo
	98,  // 100: erda.dop.issue.core.GetIssueStatesResponse.data:type_name -> erda.dop.issue.core.IssueTypeState
	102, // 101: erda.dop.issue.core.GetIssueStateRelationRequest.identityInfo:type_name -> erda.common.IdentityInfo
	93,  // 102: erda.dop.issue.core.GetIssueStateRelationResponse.data:type_name -> erda.dop.issue.core.IssueStateRelation
	10,  // 103: erda.dop.issue.core.IssueCoreService.CreateIssue:input_type -> erda.dop.issue.core.IssueCreateRequest
	73,  // 104: erda.dop.issue.core.IssueCoreService.PagingIssue:input_type -> erda.dop.issue.core.PagingIssueRequest
	12,  // 105: erda.dop.issue.core.IssueCoreService.GetIssue:input_type -> erda.dop.issue.core.GetIssueRequest
	14,  // 106: erda.dop.issue.core.IssueCoreService.UpdateIssue:input_type -> erda.dop.issue.core.UpdateIssueRequest
	16,  // 107: erda.dop.issue.core.IssueCoreService.DeleteIssue:input_type -> erda.dop.issue.core.DeleteIssueRequest
	18,  // 108: erda.dop.issue.core.IssueCoreService.BatchUpdateIssue:input_type -> erda.dop.issue.core.BatchUpdateIssueRequest
	20,  // 109: erda.dop.issue.core.IssueCoreService.UpdateIssueType:input_type -> erda.dop.issue.core.UpdateIssueTypeRequest
	41,  // 110: erda.dop.issue.core.IssueCoreService.SubscribeIssue:input_type -> erda.dop.issue.core.SubscribeIssueRequest
	43,  // 111: erda.dop.issue.core.IssueCoreService.UnsubscribeIssue:input_type -> erda.dop.issue.core.UnsubscribeIssueRequest
	45,  // 112: erda.dop.issue.core.IssueCoreService.BatchUpdateIssueSubscriber:input_type -> erda.dop.issue.core.BatchUpdateIssueSubscriberRequest
	29,  // 113: erda.dop.issue.core.IssueCoreService.CreateIssueProperty:input_type -> erda.dop.issue.core.CreateIssuePropertyRequest
	31,  // 114: erda.dop.issue.core.IssueCoreService.DeleteIssueProperty:input_type -> erda.dop.issue.core.DeleteIssuePropertyRequest
	33,  // 115: erda.dop.issue.core.IssueCoreService.UpdateIssueProperty:input_type -> erda.dop.issue.core.UpdateIssuePropertyRequest
	35,  // 116: erda.dop.issue.core.IssueCoreService.GetIssueProperty:input_type -> erda.dop.issue.core.GetIssuePropertyRequest
	37,  // 117: erda.dop.issue.core.IssueCoreService.UpdateIssuePropertiesIndex:input_type -> erda.dop.issue.core.UpdateIssuePropertiesIndexRequest
	39,  // 118: erda.dop.issue.core.IssueCoreService.GetIssuePropertyUpdateTime:input_type -> erda.dop.issue.core.GetIssuePropertyUpdateTimeRequest
	25,  // 119: erda.dop.issue.core.IssueCoreService.CreateIssuePropertyInstance:input_type -> erda.dop.issue.core.CreateIssuePropertyInstanceRequest
	27,  // 120: erda.dop.issue.core.IssueCoreService.GetIssuePropertyInstance:input_type -> erda.dop.issue.core.GetIssuePropertyInstanceRequest
	22,  // 121: erda.dop.issue.core.IssueCoreService.GetIssueStage:input_type -> erda.dop.issue.core.IssueStageRequest
	22,  // 122: erda.dop.issue.core.IssueCoreService.UpdateIssueStage:input_type -> erda.dop.issue.core.IssueStageRequest
	81,  // 123: erda.dop.issue.core.IssueCoreService.AddIssueRelation:input_type -> erda.dop.issue.core.AddIssueRelationRequest
	83,  // 124: erda.dop.issue.core.IssueCoreService.DeleteIssueRelation:input_type -> erda.dop.issue.core.DeleteIssueRelationRequest
	85,  // 125: erda.dop.issue.core.IssueCoreService.GetIssueRelations:input_type -> erda.dop.issue.core.GetIssueRelationsRequest
	88,  // 126: erda.dop.issue.core.IssueCoreService.CreateIssueState:input_type -> erda.dop.issue.core.CreateIssueStateRequest
	90,  // 127: erda.dop.issue.core.IssueCoreService.DeleteIssueState:input_type -> erda.dop.issue.core.DeleteIssueStateRequest
	94,  // 128: erda.dop.issue.core.IssueCoreService.UpdateIssueStateRelation:input_type -> erda.dop.issue.core.UpdateIssueStateRelationRequest
	96,  // 129: erda.dop.issue.core.IssueCoreService.GetIssueStates:input_type -> erda.dop.issue.core.GetIssueStatesRequest
	99,  // 130: erda.dop.issue.core.IssueCoreService.GetIssueStateRelation:input_type -> erda.dop.issue.core.GetIssueStateRelationRequest
	77,  // 131: erda.dop.issue.core.IssueCoreService.ExportExcelIssue:input_type -> erda.dop.issue.core.ExportExcelIssueRequest
	79,  // 132: erda.dop.issue.core.IssueCoreService.ImportExcelIssue:input_type -> erda.dop.issue.core.ImportExcelIssueRequest
	11,  // 133: erda.dop.issue.core.IssueCoreService.CreateIssue:output_type -> erda.dop.issue.core.IssueCreateResponse
	75,  // 134: erda.dop.issue.core.IssueCoreService.PagingIssue:output_type -> erda.dop.issue.core.PagingIssueResponse
	13,  // 135: erda.dop.issue.core.IssueCoreService.GetIssue:output_type -> erda.dop.issue.core.GetIssueResponse
	15,  // 136: erda.dop.issue.core.IssueCoreService.UpdateIssue:output_type -> erda.dop.issue.core.UpdateIssueResponse
	17,  // 137: erda.dop.issue.core.IssueCoreService.DeleteIssue:output_type -> erda.dop.issue.core.DeleteIssueResponse
	19,  // 138: erda.dop.issue.core.IssueCoreService.BatchUpdateIssue:output_type -> erda.dop.issue.core.BatchUpdateIssueResponse
	21,  // 139: erda.dop.issue.core.IssueCoreService.UpdateIssueType:output_type -> erda.dop.issue.core.UpdateIssueTypeResponse
	42,  // 140: erda.dop.issue.core.IssueCoreService.SubscribeIssue:output_type -> erda.dop.issue.core.SubscribeIssueResponse
	44,  // 141: erda.dop.issue.core.IssueCoreService.UnsubscribeIssue:output_type -> erda.dop.issue.core.UnsubscribeIssueResponse
	46,  // 142: erda.dop.issue.core.IssueCoreService.BatchUpdateIssueSubscriber:output_type -> erda.dop.issue.core.BatchUpdateIssueSubscriberResponse
	30,  // 143: erda.dop.issue.core.IssueCoreService.CreateIssueProperty:output_type -> erda.dop.issue.core.CreateIssuePropertyResponse
	32,  // 144: erda.dop.issue.core.IssueCoreService.DeleteIssueProperty:output_type -> erda.dop.issue.core.DeleteIssuePropertyResponse
	34,  // 145: erda.dop.issue.core.IssueCoreService.UpdateIssueProperty:output_type -> erda.dop.issue.core.UpdateIssuePropertyResponse
	36,  // 146: erda.dop.issue.core.IssueCoreService.GetIssueProperty:output_type -> erda.dop.issue.core.GetIssuePropertyResponse
	38,  // 147: erda.dop.issue.core.IssueCoreService.UpdateIssuePropertiesIndex:output_type -> erda.dop.issue.core.UpdateIssuePropertiesIndexResponse
	40,  // 148: erda.dop.issue.core.IssueCoreService.GetIssuePropertyUpdateTime:output_type -> erda.dop.issue.core.GetIssuePropertyUpdateTimeResponse
	26,  // 149: erda.dop.issue.core.IssueCoreService.CreateIssuePropertyInstance:output_type -> erda.dop.issue.core.CreateIssuePropertyInstanceResponse
	28,  // 150: erda.dop.issue.core.IssueCoreService.GetIssuePropertyInstance:output_type -> erda.dop.issue.core.GetIssuePropertyInstanceResponse
	23,  // 151: erda.dop.issue.core.IssueCoreService.GetIssueStage:output_type -> erda.dop.issue.core.GetIssueStageResponse
	24,  // 152: erda.dop.issue.core.IssueCoreService.UpdateIssueStage:output_type -> erda.dop.issue.core.UpdateIssueStageResponse
	82,  // 153: erda.dop.issue.core.IssueCoreService.AddIssueRelation:output_type -> erda.dop.issue.core.AddIssueRelationResponse
	84,  // 154: erda.dop.issue.core.IssueCoreService.DeleteIssueRelation:output_type -> erda.dop.issue.core.DeleteIssueRelationResponse
	86,  // 155: erda.dop.issue.core.IssueCoreService.GetIssueRelations:output_type -> erda.dop.issue.core.GetIssueRelationsResponse
	89,  // 156: erda.dop.issue.core.IssueCoreService.CreateIssueState:output_type -> erda.dop.issue.core.CreateIssueStateResponse
	91,  // 157: erda.dop.issue.core.IssueCoreService.DeleteIssueState:output_type -> erda.dop.issue.core.DeleteIssueStateResponse
	95,  // 158: erda.dop.issue.core.IssueCoreService.UpdateIssueStateRelation:output_type -> erda.dop.issue.core.UpdateIssueStateRelationResponse
	97,  // 159: erda.dop.issue.core.IssueCoreService.GetIssueStates:output_type -> erda.dop.issue.core.GetIssueStatesResponse
	100, // 160: erda.dop.issue.core.IssueCoreService.GetIssueStateRelation:output_type -> erda.dop.issue.core.GetIssueStateRelationResponse
	78,  // 161: erda.dop.issue.core.IssueCoreService.ExportExcelIssue:output_type -> erda.dop.issue.core.ExportExcelIssueResponse
	80,  // 162: erda.dop.issue.core.IssueCoreService.ImportExcelIssue:output_type -> erda.dop.issue.core.ImportExcelIssueResponse
	133, // [133:163] is the sub-list for method output_type
	103, // [103:133] is the sub-list for method input_type
	103, // [103:103] is the sub-list for extension type_name
	103, // [103:103] is the sub-list for extension extendee
	0,   // [0:103] is the sub-list for field type_name
}

func init() { file_core_proto_init() }
func file_core_proto_init() {
	if File_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIssueTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIssueTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueStageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssueStageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIssueStageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIssuePropertyInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIssuePropertyInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssuePropertyInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssuePropertyInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIssuePropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIssuePropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIssuePropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIssuePropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIssuePropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIssuePropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssuePropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssuePropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIssuePropertiesIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIssuePropertiesIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssuePropertyUpdateTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssuePropertyUpdateTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateIssueSubscriberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateIssueSubscriberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuePropertyInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuePropertyIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyEnumerate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuePriorityEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueComplexityEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueSeverityEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueStateBelongEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLabelTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueManHour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueStateButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseAPICount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelIssueBug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCasePriorityEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyIssueTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enumerate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueAndPropertyAndValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuePropertyExtraProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuePropertyUpdateTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuePagingResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportExcelIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportExcelIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportExcelIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportExcelIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIssueRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIssueRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIssueRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIssueRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssueRelationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssueRelationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueRelations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIssueStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIssueStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIssueStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIssueStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueStateRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIssueStateRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIssueStateRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssueStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssueStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueTypeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssueStateRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssueStateRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_core_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_core_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_core_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_core_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_core_proto_msgTypes[67].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   91,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_core_proto_goTypes,
		DependencyIndexes: file_core_proto_depIdxs,
		EnumInfos:         file_core_proto_enumTypes,
		MessageInfos:      file_core_proto_msgTypes,
	}.Build()
	File_core_proto = out.File
	file_core_proto_rawDesc = nil
	file_core_proto_goTypes = nil
	file_core_proto_depIdxs = nil
}
