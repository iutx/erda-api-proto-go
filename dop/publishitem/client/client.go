// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: publishitem.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/dop/publishitem/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// PublishItemService publishitem.proto
	PublishItemService() pb.PublishItemServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		publishItemService: pb.NewPublishItemServiceClient(cc),
	}
}

type serviceClients struct {
	publishItemService pb.PublishItemServiceClient
}

func (c *serviceClients) PublishItemService() pb.PublishItemServiceClient {
	return c.publishItemService
}

type publishItemServiceWrapper struct {
	client pb.PublishItemServiceClient
	opts   []grpc1.CallOption
}

func (s *publishItemServiceWrapper) CreatePublishItemBlackList(ctx context.Context, req *pb.PublishItemUserlistRequest) (*pb.PublishItemAddBlacklistResponse, error) {
	return s.client.CreatePublishItemBlackList(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) DeletePublishItemBlackList(ctx context.Context, req *pb.DeletePublishItemBlackListRequest) (*pb.PublishItemDeleteBlacklistResponse, error) {
	return s.client.DeletePublishItemBlackList(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) GetPublishItemBlackList(ctx context.Context, req *pb.GetPublishItemBlackListRequest) (*pb.PublishItemUserListDataResponse, error) {
	return s.client.GetPublishItemBlackList(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) CreatePublishItemErase(ctx context.Context, req *pb.CreatePublishItemEraseRequest) (*pb.PublicItemAddEraseResponse, error) {
	return s.client.CreatePublishItemErase(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) GetPublishItemErase(ctx context.Context, req *pb.GetPublishItemEraseRequest) (*pb.PublishItemUserListDataResponse, error) {
	return s.client.GetPublishItemErase(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) ListPublishItemMonitorKeys(ctx context.Context, req *pb.ListPublishItemMonitorKeysRequest) (*pb.ListPublishItemMonitorKeysResponse, error) {
	return s.client.ListPublishItemMonitorKeys(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) CreatePublishItem(ctx context.Context, req *pb.CreatePublishItemRequest) (*pb.CreatePublishItemResponse, error) {
	return s.client.CreatePublishItem(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) DeletePublishItem(ctx context.Context, req *pb.DeletePublishItemRequest) (*pb.DeletePublishItemResponse, error) {
	return s.client.DeletePublishItem(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) GetPublishItem(ctx context.Context, req *pb.GetPublishItemRequest) (*pb.GetPublishItemResponse, error) {
	return s.client.GetPublishItem(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) GetPublishItemH5PackageName(ctx context.Context, req *pb.GetPublishItemH5PackageNameRequest) (*pb.GetPublishItemH5PackageNameResponse, error) {
	return s.client.GetPublishItemH5PackageName(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) QueryPublishItem(ctx context.Context, req *pb.QueryPublishItemRequest) (*pb.QueryPublishItemResponse, error) {
	return s.client.QueryPublishItem(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) UpdatePublishItem(ctx context.Context, req *pb.UpdatePublishItemRequest) (*pb.UpdatePublishItemResponse, error) {
	return s.client.UpdatePublishItem(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) CreatePublishItemVersion(ctx context.Context, req *pb.CreatePublishItemVersionRequest) (*pb.CreatePublishItemVersionResponse, error) {
	return s.client.CreatePublishItemVersion(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) GetPublicPublishItemVersion(ctx context.Context, req *pb.GetPublicPublishItemVersionRequest) (*pb.QueryPublishItemVersionResponse, error) {
	return s.client.GetPublicPublishItemVersion(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) QueryPublishItemVersion(ctx context.Context, req *pb.QueryPublishItemVersionRequest) (*pb.QueryPublishItemVersionResponse, error) {
	return s.client.QueryPublishItemVersion(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) SetPublishItemVersionStatus(ctx context.Context, req *pb.SetPublishItemVersionStatusRequest) (*emptypb.Empty, error) {
	return s.client.SetPublishItemVersionStatus(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) UpdatePublishItemVersion(ctx context.Context, req *pb.UpdatePublishItemVersionStatesRequset) (*emptypb.Empty, error) {
	return s.client.UpdatePublishItemVersion(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *publishItemServiceWrapper) QueryMyPublishItem(ctx context.Context, req *pb.QueryPublishItemRequest) (*pb.QueryPublishItemResponse, error) {
	return s.client.QueryMyPublishItem(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
