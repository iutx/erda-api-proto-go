// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: publishitem.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// PublishItemServiceClient is the client API for PublishItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublishItemServiceClient interface {
	CreatePublishItemBlackList(ctx context.Context, in *PublishItemUserlistRequest, opts ...grpc.CallOption) (*PublishItemAddBlacklistResponse, error)
	DeletePublishItemBlackList(ctx context.Context, in *DeletePublishItemBlackListRequest, opts ...grpc.CallOption) (*PublishItemDeleteBlacklistResponse, error)
	GetPublishItemBlackList(ctx context.Context, in *GetPublishItemBlackListRequest, opts ...grpc.CallOption) (*PublishItemUserListDataResponse, error)
	CreatePublishItemErase(ctx context.Context, in *CreatePublishItemEraseRequest, opts ...grpc.CallOption) (*PublicItemAddEraseResponse, error)
	GetPublishItemErase(ctx context.Context, in *GetPublishItemEraseRequest, opts ...grpc.CallOption) (*PublishItemUserListDataResponse, error)
	ListPublishItemMonitorKeys(ctx context.Context, in *ListPublishItemMonitorKeysRequest, opts ...grpc.CallOption) (*ListPublishItemMonitorKeysResponse, error)
	CreatePublishItem(ctx context.Context, in *CreatePublishItemRequest, opts ...grpc.CallOption) (*CreatePublishItemResponse, error)
	DeletePublishItem(ctx context.Context, in *DeletePublishItemRequest, opts ...grpc.CallOption) (*DeletePublishItemResponse, error)
	GetPublishItem(ctx context.Context, in *GetPublishItemRequest, opts ...grpc.CallOption) (*GetPublishItemResponse, error)
	GetPublishItemH5PackageName(ctx context.Context, in *GetPublishItemH5PackageNameRequest, opts ...grpc.CallOption) (*GetPublishItemH5PackageNameResponse, error)
	QueryPublishItem(ctx context.Context, in *QueryPublishItemRequest, opts ...grpc.CallOption) (*QueryPublishItemResponse, error)
	UpdatePublishItem(ctx context.Context, in *UpdatePublishItemRequest, opts ...grpc.CallOption) (*UpdatePublishItemResponse, error)
	CreatePublishItemVersion(ctx context.Context, in *CreatePublishItemVersionRequest, opts ...grpc.CallOption) (*CreatePublishItemVersionResponse, error)
	GetPublicPublishItemVersion(ctx context.Context, in *GetPublicPublishItemVersionRequest, opts ...grpc.CallOption) (*QueryPublishItemVersionResponse, error)
	QueryPublishItemVersion(ctx context.Context, in *QueryPublishItemVersionRequest, opts ...grpc.CallOption) (*QueryPublishItemVersionResponse, error)
	SetPublishItemVersionStatus(ctx context.Context, in *SetPublishItemVersionStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePublishItemVersion(ctx context.Context, in *UpdatePublishItemVersionStatesRequset, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QueryMyPublishItem(ctx context.Context, in *QueryPublishItemRequest, opts ...grpc.CallOption) (*QueryPublishItemResponse, error)
}

type publishItemServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewPublishItemServiceClient(cc grpc1.ClientConnInterface) PublishItemServiceClient {
	return &publishItemServiceClient{cc}
}

func (c *publishItemServiceClient) CreatePublishItemBlackList(ctx context.Context, in *PublishItemUserlistRequest, opts ...grpc.CallOption) (*PublishItemAddBlacklistResponse, error) {
	out := new(PublishItemAddBlacklistResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/CreatePublishItemBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) DeletePublishItemBlackList(ctx context.Context, in *DeletePublishItemBlackListRequest, opts ...grpc.CallOption) (*PublishItemDeleteBlacklistResponse, error) {
	out := new(PublishItemDeleteBlacklistResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/DeletePublishItemBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) GetPublishItemBlackList(ctx context.Context, in *GetPublishItemBlackListRequest, opts ...grpc.CallOption) (*PublishItemUserListDataResponse, error) {
	out := new(PublishItemUserListDataResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/GetPublishItemBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) CreatePublishItemErase(ctx context.Context, in *CreatePublishItemEraseRequest, opts ...grpc.CallOption) (*PublicItemAddEraseResponse, error) {
	out := new(PublicItemAddEraseResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/CreatePublishItemErase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) GetPublishItemErase(ctx context.Context, in *GetPublishItemEraseRequest, opts ...grpc.CallOption) (*PublishItemUserListDataResponse, error) {
	out := new(PublishItemUserListDataResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/GetPublishItemErase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) ListPublishItemMonitorKeys(ctx context.Context, in *ListPublishItemMonitorKeysRequest, opts ...grpc.CallOption) (*ListPublishItemMonitorKeysResponse, error) {
	out := new(ListPublishItemMonitorKeysResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/ListPublishItemMonitorKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) CreatePublishItem(ctx context.Context, in *CreatePublishItemRequest, opts ...grpc.CallOption) (*CreatePublishItemResponse, error) {
	out := new(CreatePublishItemResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/CreatePublishItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) DeletePublishItem(ctx context.Context, in *DeletePublishItemRequest, opts ...grpc.CallOption) (*DeletePublishItemResponse, error) {
	out := new(DeletePublishItemResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/DeletePublishItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) GetPublishItem(ctx context.Context, in *GetPublishItemRequest, opts ...grpc.CallOption) (*GetPublishItemResponse, error) {
	out := new(GetPublishItemResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/GetPublishItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) GetPublishItemH5PackageName(ctx context.Context, in *GetPublishItemH5PackageNameRequest, opts ...grpc.CallOption) (*GetPublishItemH5PackageNameResponse, error) {
	out := new(GetPublishItemH5PackageNameResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/GetPublishItemH5PackageName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) QueryPublishItem(ctx context.Context, in *QueryPublishItemRequest, opts ...grpc.CallOption) (*QueryPublishItemResponse, error) {
	out := new(QueryPublishItemResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/QueryPublishItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) UpdatePublishItem(ctx context.Context, in *UpdatePublishItemRequest, opts ...grpc.CallOption) (*UpdatePublishItemResponse, error) {
	out := new(UpdatePublishItemResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/UpdatePublishItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) CreatePublishItemVersion(ctx context.Context, in *CreatePublishItemVersionRequest, opts ...grpc.CallOption) (*CreatePublishItemVersionResponse, error) {
	out := new(CreatePublishItemVersionResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/CreatePublishItemVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) GetPublicPublishItemVersion(ctx context.Context, in *GetPublicPublishItemVersionRequest, opts ...grpc.CallOption) (*QueryPublishItemVersionResponse, error) {
	out := new(QueryPublishItemVersionResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/GetPublicPublishItemVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) QueryPublishItemVersion(ctx context.Context, in *QueryPublishItemVersionRequest, opts ...grpc.CallOption) (*QueryPublishItemVersionResponse, error) {
	out := new(QueryPublishItemVersionResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/QueryPublishItemVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) SetPublishItemVersionStatus(ctx context.Context, in *SetPublishItemVersionStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/SetPublishItemVersionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) UpdatePublishItemVersion(ctx context.Context, in *UpdatePublishItemVersionStatesRequset, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/UpdatePublishItemVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishItemServiceClient) QueryMyPublishItem(ctx context.Context, in *QueryPublishItemRequest, opts ...grpc.CallOption) (*QueryPublishItemResponse, error) {
	out := new(QueryPublishItemResponse)
	err := c.cc.Invoke(ctx, "/erda.dop.publishitem.PublishItemService/QueryMyPublishItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublishItemServiceServer is the server API for PublishItemService service.
// All implementations should embed UnimplementedPublishItemServiceServer
// for forward compatibility
type PublishItemServiceServer interface {
	CreatePublishItemBlackList(context.Context, *PublishItemUserlistRequest) (*PublishItemAddBlacklistResponse, error)
	DeletePublishItemBlackList(context.Context, *DeletePublishItemBlackListRequest) (*PublishItemDeleteBlacklistResponse, error)
	GetPublishItemBlackList(context.Context, *GetPublishItemBlackListRequest) (*PublishItemUserListDataResponse, error)
	CreatePublishItemErase(context.Context, *CreatePublishItemEraseRequest) (*PublicItemAddEraseResponse, error)
	GetPublishItemErase(context.Context, *GetPublishItemEraseRequest) (*PublishItemUserListDataResponse, error)
	ListPublishItemMonitorKeys(context.Context, *ListPublishItemMonitorKeysRequest) (*ListPublishItemMonitorKeysResponse, error)
	CreatePublishItem(context.Context, *CreatePublishItemRequest) (*CreatePublishItemResponse, error)
	DeletePublishItem(context.Context, *DeletePublishItemRequest) (*DeletePublishItemResponse, error)
	GetPublishItem(context.Context, *GetPublishItemRequest) (*GetPublishItemResponse, error)
	GetPublishItemH5PackageName(context.Context, *GetPublishItemH5PackageNameRequest) (*GetPublishItemH5PackageNameResponse, error)
	QueryPublishItem(context.Context, *QueryPublishItemRequest) (*QueryPublishItemResponse, error)
	UpdatePublishItem(context.Context, *UpdatePublishItemRequest) (*UpdatePublishItemResponse, error)
	CreatePublishItemVersion(context.Context, *CreatePublishItemVersionRequest) (*CreatePublishItemVersionResponse, error)
	GetPublicPublishItemVersion(context.Context, *GetPublicPublishItemVersionRequest) (*QueryPublishItemVersionResponse, error)
	QueryPublishItemVersion(context.Context, *QueryPublishItemVersionRequest) (*QueryPublishItemVersionResponse, error)
	SetPublishItemVersionStatus(context.Context, *SetPublishItemVersionStatusRequest) (*emptypb.Empty, error)
	UpdatePublishItemVersion(context.Context, *UpdatePublishItemVersionStatesRequset) (*emptypb.Empty, error)
	QueryMyPublishItem(context.Context, *QueryPublishItemRequest) (*QueryPublishItemResponse, error)
}

// UnimplementedPublishItemServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPublishItemServiceServer struct {
}

func (*UnimplementedPublishItemServiceServer) CreatePublishItemBlackList(context.Context, *PublishItemUserlistRequest) (*PublishItemAddBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublishItemBlackList not implemented")
}
func (*UnimplementedPublishItemServiceServer) DeletePublishItemBlackList(context.Context, *DeletePublishItemBlackListRequest) (*PublishItemDeleteBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublishItemBlackList not implemented")
}
func (*UnimplementedPublishItemServiceServer) GetPublishItemBlackList(context.Context, *GetPublishItemBlackListRequest) (*PublishItemUserListDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishItemBlackList not implemented")
}
func (*UnimplementedPublishItemServiceServer) CreatePublishItemErase(context.Context, *CreatePublishItemEraseRequest) (*PublicItemAddEraseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublishItemErase not implemented")
}
func (*UnimplementedPublishItemServiceServer) GetPublishItemErase(context.Context, *GetPublishItemEraseRequest) (*PublishItemUserListDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishItemErase not implemented")
}
func (*UnimplementedPublishItemServiceServer) ListPublishItemMonitorKeys(context.Context, *ListPublishItemMonitorKeysRequest) (*ListPublishItemMonitorKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublishItemMonitorKeys not implemented")
}
func (*UnimplementedPublishItemServiceServer) CreatePublishItem(context.Context, *CreatePublishItemRequest) (*CreatePublishItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublishItem not implemented")
}
func (*UnimplementedPublishItemServiceServer) DeletePublishItem(context.Context, *DeletePublishItemRequest) (*DeletePublishItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublishItem not implemented")
}
func (*UnimplementedPublishItemServiceServer) GetPublishItem(context.Context, *GetPublishItemRequest) (*GetPublishItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishItem not implemented")
}
func (*UnimplementedPublishItemServiceServer) GetPublishItemH5PackageName(context.Context, *GetPublishItemH5PackageNameRequest) (*GetPublishItemH5PackageNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishItemH5PackageName not implemented")
}
func (*UnimplementedPublishItemServiceServer) QueryPublishItem(context.Context, *QueryPublishItemRequest) (*QueryPublishItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPublishItem not implemented")
}
func (*UnimplementedPublishItemServiceServer) UpdatePublishItem(context.Context, *UpdatePublishItemRequest) (*UpdatePublishItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublishItem not implemented")
}
func (*UnimplementedPublishItemServiceServer) CreatePublishItemVersion(context.Context, *CreatePublishItemVersionRequest) (*CreatePublishItemVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublishItemVersion not implemented")
}
func (*UnimplementedPublishItemServiceServer) GetPublicPublishItemVersion(context.Context, *GetPublicPublishItemVersionRequest) (*QueryPublishItemVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicPublishItemVersion not implemented")
}
func (*UnimplementedPublishItemServiceServer) QueryPublishItemVersion(context.Context, *QueryPublishItemVersionRequest) (*QueryPublishItemVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPublishItemVersion not implemented")
}
func (*UnimplementedPublishItemServiceServer) SetPublishItemVersionStatus(context.Context, *SetPublishItemVersionStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPublishItemVersionStatus not implemented")
}
func (*UnimplementedPublishItemServiceServer) UpdatePublishItemVersion(context.Context, *UpdatePublishItemVersionStatesRequset) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublishItemVersion not implemented")
}
func (*UnimplementedPublishItemServiceServer) QueryMyPublishItem(context.Context, *QueryPublishItemRequest) (*QueryPublishItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMyPublishItem not implemented")
}

func RegisterPublishItemServiceServer(s grpc1.ServiceRegistrar, srv PublishItemServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_PublishItemService_serviceDesc(srv, opts...), srv)
}

var _PublishItemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.dop.publishitem.PublishItemService",
	HandlerType: (*PublishItemServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "publishitem.proto",
}

func _get_PublishItemService_serviceDesc(srv PublishItemServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_PublishItemService_CreatePublishItemBlackList_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreatePublishItemBlackList(ctx, req.(*PublishItemUserlistRequest))
	}
	var _PublishItemService_CreatePublishItemBlackList_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_CreatePublishItemBlackList_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "CreatePublishItemBlackList", srv)
		_PublishItemService_CreatePublishItemBlackList_Handler = h.Interceptor(_PublishItemService_CreatePublishItemBlackList_Handler)
	}

	_PublishItemService_DeletePublishItemBlackList_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeletePublishItemBlackList(ctx, req.(*DeletePublishItemBlackListRequest))
	}
	var _PublishItemService_DeletePublishItemBlackList_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_DeletePublishItemBlackList_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "DeletePublishItemBlackList", srv)
		_PublishItemService_DeletePublishItemBlackList_Handler = h.Interceptor(_PublishItemService_DeletePublishItemBlackList_Handler)
	}

	_PublishItemService_GetPublishItemBlackList_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetPublishItemBlackList(ctx, req.(*GetPublishItemBlackListRequest))
	}
	var _PublishItemService_GetPublishItemBlackList_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_GetPublishItemBlackList_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "GetPublishItemBlackList", srv)
		_PublishItemService_GetPublishItemBlackList_Handler = h.Interceptor(_PublishItemService_GetPublishItemBlackList_Handler)
	}

	_PublishItemService_CreatePublishItemErase_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreatePublishItemErase(ctx, req.(*CreatePublishItemEraseRequest))
	}
	var _PublishItemService_CreatePublishItemErase_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_CreatePublishItemErase_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "CreatePublishItemErase", srv)
		_PublishItemService_CreatePublishItemErase_Handler = h.Interceptor(_PublishItemService_CreatePublishItemErase_Handler)
	}

	_PublishItemService_GetPublishItemErase_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetPublishItemErase(ctx, req.(*GetPublishItemEraseRequest))
	}
	var _PublishItemService_GetPublishItemErase_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_GetPublishItemErase_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "GetPublishItemErase", srv)
		_PublishItemService_GetPublishItemErase_Handler = h.Interceptor(_PublishItemService_GetPublishItemErase_Handler)
	}

	_PublishItemService_ListPublishItemMonitorKeys_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListPublishItemMonitorKeys(ctx, req.(*ListPublishItemMonitorKeysRequest))
	}
	var _PublishItemService_ListPublishItemMonitorKeys_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_ListPublishItemMonitorKeys_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "ListPublishItemMonitorKeys", srv)
		_PublishItemService_ListPublishItemMonitorKeys_Handler = h.Interceptor(_PublishItemService_ListPublishItemMonitorKeys_Handler)
	}

	_PublishItemService_CreatePublishItem_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreatePublishItem(ctx, req.(*CreatePublishItemRequest))
	}
	var _PublishItemService_CreatePublishItem_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_CreatePublishItem_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "CreatePublishItem", srv)
		_PublishItemService_CreatePublishItem_Handler = h.Interceptor(_PublishItemService_CreatePublishItem_Handler)
	}

	_PublishItemService_DeletePublishItem_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeletePublishItem(ctx, req.(*DeletePublishItemRequest))
	}
	var _PublishItemService_DeletePublishItem_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_DeletePublishItem_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "DeletePublishItem", srv)
		_PublishItemService_DeletePublishItem_Handler = h.Interceptor(_PublishItemService_DeletePublishItem_Handler)
	}

	_PublishItemService_GetPublishItem_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetPublishItem(ctx, req.(*GetPublishItemRequest))
	}
	var _PublishItemService_GetPublishItem_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_GetPublishItem_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "GetPublishItem", srv)
		_PublishItemService_GetPublishItem_Handler = h.Interceptor(_PublishItemService_GetPublishItem_Handler)
	}

	_PublishItemService_GetPublishItemH5PackageName_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetPublishItemH5PackageName(ctx, req.(*GetPublishItemH5PackageNameRequest))
	}
	var _PublishItemService_GetPublishItemH5PackageName_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_GetPublishItemH5PackageName_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "GetPublishItemH5PackageName", srv)
		_PublishItemService_GetPublishItemH5PackageName_Handler = h.Interceptor(_PublishItemService_GetPublishItemH5PackageName_Handler)
	}

	_PublishItemService_QueryPublishItem_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryPublishItem(ctx, req.(*QueryPublishItemRequest))
	}
	var _PublishItemService_QueryPublishItem_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_QueryPublishItem_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "QueryPublishItem", srv)
		_PublishItemService_QueryPublishItem_Handler = h.Interceptor(_PublishItemService_QueryPublishItem_Handler)
	}

	_PublishItemService_UpdatePublishItem_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdatePublishItem(ctx, req.(*UpdatePublishItemRequest))
	}
	var _PublishItemService_UpdatePublishItem_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_UpdatePublishItem_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "UpdatePublishItem", srv)
		_PublishItemService_UpdatePublishItem_Handler = h.Interceptor(_PublishItemService_UpdatePublishItem_Handler)
	}

	_PublishItemService_CreatePublishItemVersion_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreatePublishItemVersion(ctx, req.(*CreatePublishItemVersionRequest))
	}
	var _PublishItemService_CreatePublishItemVersion_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_CreatePublishItemVersion_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "CreatePublishItemVersion", srv)
		_PublishItemService_CreatePublishItemVersion_Handler = h.Interceptor(_PublishItemService_CreatePublishItemVersion_Handler)
	}

	_PublishItemService_GetPublicPublishItemVersion_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetPublicPublishItemVersion(ctx, req.(*GetPublicPublishItemVersionRequest))
	}
	var _PublishItemService_GetPublicPublishItemVersion_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_GetPublicPublishItemVersion_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "GetPublicPublishItemVersion", srv)
		_PublishItemService_GetPublicPublishItemVersion_Handler = h.Interceptor(_PublishItemService_GetPublicPublishItemVersion_Handler)
	}

	_PublishItemService_QueryPublishItemVersion_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryPublishItemVersion(ctx, req.(*QueryPublishItemVersionRequest))
	}
	var _PublishItemService_QueryPublishItemVersion_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_QueryPublishItemVersion_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "QueryPublishItemVersion", srv)
		_PublishItemService_QueryPublishItemVersion_Handler = h.Interceptor(_PublishItemService_QueryPublishItemVersion_Handler)
	}

	_PublishItemService_SetPublishItemVersionStatus_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SetPublishItemVersionStatus(ctx, req.(*SetPublishItemVersionStatusRequest))
	}
	var _PublishItemService_SetPublishItemVersionStatus_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_SetPublishItemVersionStatus_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "SetPublishItemVersionStatus", srv)
		_PublishItemService_SetPublishItemVersionStatus_Handler = h.Interceptor(_PublishItemService_SetPublishItemVersionStatus_Handler)
	}

	_PublishItemService_UpdatePublishItemVersion_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdatePublishItemVersion(ctx, req.(*UpdatePublishItemVersionStatesRequset))
	}
	var _PublishItemService_UpdatePublishItemVersion_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_UpdatePublishItemVersion_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "UpdatePublishItemVersion", srv)
		_PublishItemService_UpdatePublishItemVersion_Handler = h.Interceptor(_PublishItemService_UpdatePublishItemVersion_Handler)
	}

	_PublishItemService_QueryMyPublishItem_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryMyPublishItem(ctx, req.(*QueryPublishItemRequest))
	}
	var _PublishItemService_QueryMyPublishItem_info transport.ServiceInfo
	if h.Interceptor != nil {
		_PublishItemService_QueryMyPublishItem_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "QueryMyPublishItem", srv)
		_PublishItemService_QueryMyPublishItem_Handler = h.Interceptor(_PublishItemService_QueryMyPublishItem_Handler)
	}

	var serviceDesc = _PublishItemService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CreatePublishItemBlackList",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PublishItemUserlistRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).CreatePublishItemBlackList(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_CreatePublishItemBlackList_info)
				}
				if interceptor == nil {
					return _PublishItemService_CreatePublishItemBlackList_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/CreatePublishItemBlackList",
				}
				return interceptor(ctx, in, info, _PublishItemService_CreatePublishItemBlackList_Handler)
			},
		},
		{
			MethodName: "DeletePublishItemBlackList",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeletePublishItemBlackListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).DeletePublishItemBlackList(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_DeletePublishItemBlackList_info)
				}
				if interceptor == nil {
					return _PublishItemService_DeletePublishItemBlackList_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/DeletePublishItemBlackList",
				}
				return interceptor(ctx, in, info, _PublishItemService_DeletePublishItemBlackList_Handler)
			},
		},
		{
			MethodName: "GetPublishItemBlackList",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetPublishItemBlackListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).GetPublishItemBlackList(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_GetPublishItemBlackList_info)
				}
				if interceptor == nil {
					return _PublishItemService_GetPublishItemBlackList_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/GetPublishItemBlackList",
				}
				return interceptor(ctx, in, info, _PublishItemService_GetPublishItemBlackList_Handler)
			},
		},
		{
			MethodName: "CreatePublishItemErase",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreatePublishItemEraseRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).CreatePublishItemErase(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_CreatePublishItemErase_info)
				}
				if interceptor == nil {
					return _PublishItemService_CreatePublishItemErase_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/CreatePublishItemErase",
				}
				return interceptor(ctx, in, info, _PublishItemService_CreatePublishItemErase_Handler)
			},
		},
		{
			MethodName: "GetPublishItemErase",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetPublishItemEraseRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).GetPublishItemErase(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_GetPublishItemErase_info)
				}
				if interceptor == nil {
					return _PublishItemService_GetPublishItemErase_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/GetPublishItemErase",
				}
				return interceptor(ctx, in, info, _PublishItemService_GetPublishItemErase_Handler)
			},
		},
		{
			MethodName: "ListPublishItemMonitorKeys",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListPublishItemMonitorKeysRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).ListPublishItemMonitorKeys(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_ListPublishItemMonitorKeys_info)
				}
				if interceptor == nil {
					return _PublishItemService_ListPublishItemMonitorKeys_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/ListPublishItemMonitorKeys",
				}
				return interceptor(ctx, in, info, _PublishItemService_ListPublishItemMonitorKeys_Handler)
			},
		},
		{
			MethodName: "CreatePublishItem",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreatePublishItemRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).CreatePublishItem(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_CreatePublishItem_info)
				}
				if interceptor == nil {
					return _PublishItemService_CreatePublishItem_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/CreatePublishItem",
				}
				return interceptor(ctx, in, info, _PublishItemService_CreatePublishItem_Handler)
			},
		},
		{
			MethodName: "DeletePublishItem",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeletePublishItemRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).DeletePublishItem(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_DeletePublishItem_info)
				}
				if interceptor == nil {
					return _PublishItemService_DeletePublishItem_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/DeletePublishItem",
				}
				return interceptor(ctx, in, info, _PublishItemService_DeletePublishItem_Handler)
			},
		},
		{
			MethodName: "GetPublishItem",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetPublishItemRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).GetPublishItem(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_GetPublishItem_info)
				}
				if interceptor == nil {
					return _PublishItemService_GetPublishItem_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/GetPublishItem",
				}
				return interceptor(ctx, in, info, _PublishItemService_GetPublishItem_Handler)
			},
		},
		{
			MethodName: "GetPublishItemH5PackageName",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetPublishItemH5PackageNameRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).GetPublishItemH5PackageName(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_GetPublishItemH5PackageName_info)
				}
				if interceptor == nil {
					return _PublishItemService_GetPublishItemH5PackageName_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/GetPublishItemH5PackageName",
				}
				return interceptor(ctx, in, info, _PublishItemService_GetPublishItemH5PackageName_Handler)
			},
		},
		{
			MethodName: "QueryPublishItem",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryPublishItemRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).QueryPublishItem(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_QueryPublishItem_info)
				}
				if interceptor == nil {
					return _PublishItemService_QueryPublishItem_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/QueryPublishItem",
				}
				return interceptor(ctx, in, info, _PublishItemService_QueryPublishItem_Handler)
			},
		},
		{
			MethodName: "UpdatePublishItem",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdatePublishItemRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).UpdatePublishItem(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_UpdatePublishItem_info)
				}
				if interceptor == nil {
					return _PublishItemService_UpdatePublishItem_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/UpdatePublishItem",
				}
				return interceptor(ctx, in, info, _PublishItemService_UpdatePublishItem_Handler)
			},
		},
		{
			MethodName: "CreatePublishItemVersion",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreatePublishItemVersionRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).CreatePublishItemVersion(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_CreatePublishItemVersion_info)
				}
				if interceptor == nil {
					return _PublishItemService_CreatePublishItemVersion_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/CreatePublishItemVersion",
				}
				return interceptor(ctx, in, info, _PublishItemService_CreatePublishItemVersion_Handler)
			},
		},
		{
			MethodName: "GetPublicPublishItemVersion",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetPublicPublishItemVersionRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).GetPublicPublishItemVersion(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_GetPublicPublishItemVersion_info)
				}
				if interceptor == nil {
					return _PublishItemService_GetPublicPublishItemVersion_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/GetPublicPublishItemVersion",
				}
				return interceptor(ctx, in, info, _PublishItemService_GetPublicPublishItemVersion_Handler)
			},
		},
		{
			MethodName: "QueryPublishItemVersion",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryPublishItemVersionRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).QueryPublishItemVersion(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_QueryPublishItemVersion_info)
				}
				if interceptor == nil {
					return _PublishItemService_QueryPublishItemVersion_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/QueryPublishItemVersion",
				}
				return interceptor(ctx, in, info, _PublishItemService_QueryPublishItemVersion_Handler)
			},
		},
		{
			MethodName: "SetPublishItemVersionStatus",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SetPublishItemVersionStatusRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).SetPublishItemVersionStatus(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_SetPublishItemVersionStatus_info)
				}
				if interceptor == nil {
					return _PublishItemService_SetPublishItemVersionStatus_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/SetPublishItemVersionStatus",
				}
				return interceptor(ctx, in, info, _PublishItemService_SetPublishItemVersionStatus_Handler)
			},
		},
		{
			MethodName: "UpdatePublishItemVersion",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdatePublishItemVersionStatesRequset)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).UpdatePublishItemVersion(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_UpdatePublishItemVersion_info)
				}
				if interceptor == nil {
					return _PublishItemService_UpdatePublishItemVersion_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/UpdatePublishItemVersion",
				}
				return interceptor(ctx, in, info, _PublishItemService_UpdatePublishItemVersion_Handler)
			},
		},
		{
			MethodName: "QueryMyPublishItem",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryPublishItemRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(PublishItemServiceServer).QueryMyPublishItem(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _PublishItemService_QueryMyPublishItem_info)
				}
				if interceptor == nil {
					return _PublishItemService_QueryMyPublishItem_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.dop.publishitem.PublishItemService/QueryMyPublishItem",
				}
				return interceptor(ctx, in, info, _PublishItemService_QueryMyPublishItem_Handler)
			},
		},
	}
	return &serviceDesc
}
