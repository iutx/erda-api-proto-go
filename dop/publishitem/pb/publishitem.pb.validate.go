// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: publishitem.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateBranchRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBranchRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBranchRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBranchRuleResponseMultiError, or nil if none found.
func (m *CreateBranchRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBranchRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateBranchRuleResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateBranchRuleResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateBranchRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateBranchRuleResponseMultiError(errors)
	}

	return nil
}

// CreateBranchRuleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBranchRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBranchRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBranchRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBranchRuleResponseMultiError) AllErrors() []error { return m }

// CreateBranchRuleResponseValidationError is the validation error returned by
// CreateBranchRuleResponse.Validate if the designated constraints aren't met.
type CreateBranchRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBranchRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBranchRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBranchRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBranchRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBranchRuleResponseValidationError) ErrorName() string {
	return "CreateBranchRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBranchRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBranchRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBranchRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBranchRuleResponseValidationError{}

// Validate checks the field values on CreatePublishItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePublishItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePublishItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePublishItemRequestMultiError, or nil if none found.
func (m *CreatePublishItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePublishItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for PublisherID

	// no validation rules for Type

	// no validation rules for Logo

	// no validation rules for Public

	// no validation rules for Desc

	// no validation rules for OrgID

	// no validation rules for Creator

	// no validation rules for NoJailbreak

	// no validation rules for GeofenceLon

	// no validation rules for GeofenceLat

	// no validation rules for GeofenceRadius

	// no validation rules for GrayLevelPercent

	// no validation rules for BackgroundImage

	if len(errors) > 0 {
		return CreatePublishItemRequestMultiError(errors)
	}

	return nil
}

// CreatePublishItemRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePublishItemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePublishItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePublishItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePublishItemRequestMultiError) AllErrors() []error { return m }

// CreatePublishItemRequestValidationError is the validation error returned by
// CreatePublishItemRequest.Validate if the designated constraints aren't met.
type CreatePublishItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePublishItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePublishItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePublishItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePublishItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePublishItemRequestValidationError) ErrorName() string {
	return "CreatePublishItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePublishItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePublishItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePublishItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePublishItemRequestValidationError{}

// Validate checks the field values on CreatePublishItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePublishItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePublishItemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePublishItemResponseMultiError, or nil if none found.
func (m *CreatePublishItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePublishItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePublishItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePublishItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePublishItemResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePublishItemResponseMultiError(errors)
	}

	return nil
}

// CreatePublishItemResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePublishItemResponse.ValidateAll() if the
// designated constraints aren't met.
type CreatePublishItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePublishItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePublishItemResponseMultiError) AllErrors() []error { return m }

// CreatePublishItemResponseValidationError is the validation error returned by
// CreatePublishItemResponse.Validate if the designated constraints aren't met.
type CreatePublishItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePublishItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePublishItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePublishItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePublishItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePublishItemResponseValidationError) ErrorName() string {
	return "CreatePublishItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePublishItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePublishItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePublishItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePublishItemResponseValidationError{}

// Validate checks the field values on CreatePublishItemVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePublishItemVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePublishItemVersionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePublishItemVersionRequestMultiError, or nil if none found.
func (m *CreatePublishItemVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePublishItemVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for BuildID

	// no validation rules for PackageName

	// no validation rules for Public

	// no validation rules for IsDefault

	// no validation rules for Logo

	// no validation rules for Desc

	// no validation rules for Readme

	// no validation rules for Spec

	// no validation rules for Swagger

	// no validation rules for ReleaseID

	// no validation rules for MobileType

	if all {
		switch v := interface{}(m.GetH5VersionInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePublishItemVersionRequestValidationError{
					field:  "H5VersionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePublishItemVersionRequestValidationError{
					field:  "H5VersionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetH5VersionInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePublishItemVersionRequestValidationError{
				field:  "H5VersionInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PublishItemID

	// no validation rules for OrgID

	// no validation rules for AppID

	// no validation rules for Creator

	if len(errors) > 0 {
		return CreatePublishItemVersionRequestMultiError(errors)
	}

	return nil
}

// CreatePublishItemVersionRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePublishItemVersionRequest.ValidateAll()
// if the designated constraints aren't met.
type CreatePublishItemVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePublishItemVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePublishItemVersionRequestMultiError) AllErrors() []error { return m }

// CreatePublishItemVersionRequestValidationError is the validation error
// returned by CreatePublishItemVersionRequest.Validate if the designated
// constraints aren't met.
type CreatePublishItemVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePublishItemVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePublishItemVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePublishItemVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePublishItemVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePublishItemVersionRequestValidationError) ErrorName() string {
	return "CreatePublishItemVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePublishItemVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePublishItemVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePublishItemVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePublishItemVersionRequestValidationError{}

// Validate checks the field values on CreatePublishItemVersionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePublishItemVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePublishItemVersionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePublishItemVersionResponseMultiError, or nil if none found.
func (m *CreatePublishItemVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePublishItemVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePublishItemVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePublishItemVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePublishItemVersionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePublishItemVersionResponseMultiError(errors)
	}

	return nil
}

// CreatePublishItemVersionResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreatePublishItemVersionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePublishItemVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePublishItemVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePublishItemVersionResponseMultiError) AllErrors() []error { return m }

// CreatePublishItemVersionResponseValidationError is the validation error
// returned by CreatePublishItemVersionResponse.Validate if the designated
// constraints aren't met.
type CreatePublishItemVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePublishItemVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePublishItemVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePublishItemVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePublishItemVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePublishItemVersionResponseValidationError) ErrorName() string {
	return "CreatePublishItemVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePublishItemVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePublishItemVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePublishItemVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePublishItemVersionResponseValidationError{}

// Validate checks the field values on CreatePublishItemVersionData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePublishItemVersionData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePublishItemVersionData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePublishItemVersionDataMultiError, or nil if none found.
func (m *CreatePublishItemVersionData) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePublishItemVersionData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePublishItemVersionDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePublishItemVersionDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePublishItemVersionDataValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublishItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePublishItemVersionDataValidationError{
					field:  "PublishItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePublishItemVersionDataValidationError{
					field:  "PublishItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublishItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePublishItemVersionDataValidationError{
				field:  "PublishItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePublishItemVersionDataMultiError(errors)
	}

	return nil
}

// CreatePublishItemVersionDataMultiError is an error wrapping multiple
// validation errors returned by CreatePublishItemVersionData.ValidateAll() if
// the designated constraints aren't met.
type CreatePublishItemVersionDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePublishItemVersionDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePublishItemVersionDataMultiError) AllErrors() []error { return m }

// CreatePublishItemVersionDataValidationError is the validation error returned
// by CreatePublishItemVersionData.Validate if the designated constraints
// aren't met.
type CreatePublishItemVersionDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePublishItemVersionDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePublishItemVersionDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePublishItemVersionDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePublishItemVersionDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePublishItemVersionDataValidationError) ErrorName() string {
	return "CreatePublishItemVersionDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePublishItemVersionDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePublishItemVersionData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePublishItemVersionDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePublishItemVersionDataValidationError{}

// Validate checks the field values on CreateUpdateDeleteReleaseRuleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateUpdateDeleteReleaseRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUpdateDeleteReleaseRuleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateUpdateDeleteReleaseRuleRequestMultiError, or nil if none found.
func (m *CreateUpdateDeleteReleaseRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUpdateDeleteReleaseRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for UserID

	// no validation rules for RuleID

	if m.Body != nil {

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateUpdateDeleteReleaseRuleRequestValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateUpdateDeleteReleaseRuleRequestValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUpdateDeleteReleaseRuleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateUpdateDeleteReleaseRuleRequestMultiError(errors)
	}

	return nil
}

// CreateUpdateDeleteReleaseRuleRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateUpdateDeleteReleaseRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUpdateDeleteReleaseRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUpdateDeleteReleaseRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUpdateDeleteReleaseRuleRequestMultiError) AllErrors() []error { return m }

// CreateUpdateDeleteReleaseRuleRequestValidationError is the validation error
// returned by CreateUpdateDeleteReleaseRuleRequest.Validate if the designated
// constraints aren't met.
type CreateUpdateDeleteReleaseRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUpdateDeleteReleaseRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUpdateDeleteReleaseRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUpdateDeleteReleaseRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUpdateDeleteReleaseRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUpdateDeleteReleaseRuleRequestValidationError) ErrorName() string {
	return "CreateUpdateDeleteReleaseRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUpdateDeleteReleaseRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUpdateDeleteReleaseRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUpdateDeleteReleaseRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUpdateDeleteReleaseRuleRequestValidationError{}

// Validate checks the field values on DeletePublishItemBlackListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeletePublishItemBlackListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePublishItemBlackListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeletePublishItemBlackListRequestMultiError, or nil if none found.
func (m *DeletePublishItemBlackListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePublishItemBlackListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	// no validation rules for BlacklistId

	if len(errors) > 0 {
		return DeletePublishItemBlackListRequestMultiError(errors)
	}

	return nil
}

// DeletePublishItemBlackListRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeletePublishItemBlackListRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePublishItemBlackListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePublishItemBlackListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePublishItemBlackListRequestMultiError) AllErrors() []error { return m }

// DeletePublishItemBlackListRequestValidationError is the validation error
// returned by DeletePublishItemBlackListRequest.Validate if the designated
// constraints aren't met.
type DeletePublishItemBlackListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePublishItemBlackListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePublishItemBlackListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePublishItemBlackListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePublishItemBlackListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePublishItemBlackListRequestValidationError) ErrorName() string {
	return "DeletePublishItemBlackListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePublishItemBlackListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePublishItemBlackListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePublishItemBlackListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePublishItemBlackListRequestValidationError{}

// Validate checks the field values on GetPublishItemBlackListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublishItemBlackListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishItemBlackListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPublishItemBlackListRequestMultiError, or nil if none found.
func (m *GetPublishItemBlackListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishItemBlackListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetPublishItemBlackListRequestMultiError(errors)
	}

	return nil
}

// GetPublishItemBlackListRequestMultiError is an error wrapping multiple
// validation errors returned by GetPublishItemBlackListRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPublishItemBlackListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishItemBlackListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishItemBlackListRequestMultiError) AllErrors() []error { return m }

// GetPublishItemBlackListRequestValidationError is the validation error
// returned by GetPublishItemBlackListRequest.Validate if the designated
// constraints aren't met.
type GetPublishItemBlackListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishItemBlackListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishItemBlackListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishItemBlackListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishItemBlackListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishItemBlackListRequestValidationError) ErrorName() string {
	return "GetPublishItemBlackListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishItemBlackListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishItemBlackListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishItemBlackListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishItemBlackListRequestValidationError{}

// Validate checks the field values on CreatePublishItemEraseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePublishItemEraseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePublishItemEraseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePublishItemEraseRequestMultiError, or nil if none found.
func (m *CreatePublishItemEraseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePublishItemEraseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for UserID

	// no validation rules for UserName

	// no validation rules for DeviceNo

	// no validation rules for PublishItemId

	// no validation rules for Operator

	if len(errors) > 0 {
		return CreatePublishItemEraseRequestMultiError(errors)
	}

	return nil
}

// CreatePublishItemEraseRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePublishItemEraseRequest.ValidateAll()
// if the designated constraints aren't met.
type CreatePublishItemEraseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePublishItemEraseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePublishItemEraseRequestMultiError) AllErrors() []error { return m }

// CreatePublishItemEraseRequestValidationError is the validation error
// returned by CreatePublishItemEraseRequest.Validate if the designated
// constraints aren't met.
type CreatePublishItemEraseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePublishItemEraseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePublishItemEraseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePublishItemEraseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePublishItemEraseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePublishItemEraseRequestValidationError) ErrorName() string {
	return "CreatePublishItemEraseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePublishItemEraseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePublishItemEraseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePublishItemEraseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePublishItemEraseRequestValidationError{}

// Validate checks the field values on GetPublishItemEraseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublishItemEraseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishItemEraseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublishItemEraseRequestMultiError, or nil if none found.
func (m *GetPublishItemEraseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishItemEraseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return GetPublishItemEraseRequestMultiError(errors)
	}

	return nil
}

// GetPublishItemEraseRequestMultiError is an error wrapping multiple
// validation errors returned by GetPublishItemEraseRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPublishItemEraseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishItemEraseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishItemEraseRequestMultiError) AllErrors() []error { return m }

// GetPublishItemEraseRequestValidationError is the validation error returned
// by GetPublishItemEraseRequest.Validate if the designated constraints aren't met.
type GetPublishItemEraseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishItemEraseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishItemEraseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishItemEraseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishItemEraseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishItemEraseRequestValidationError) ErrorName() string {
	return "GetPublishItemEraseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishItemEraseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishItemEraseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishItemEraseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishItemEraseRequestValidationError{}

// Validate checks the field values on ListPublishItemMonitorKeysRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListPublishItemMonitorKeysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublishItemMonitorKeysRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListPublishItemMonitorKeysRequestMultiError, or nil if none found.
func (m *ListPublishItemMonitorKeysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublishItemMonitorKeysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return ListPublishItemMonitorKeysRequestMultiError(errors)
	}

	return nil
}

// ListPublishItemMonitorKeysRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListPublishItemMonitorKeysRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPublishItemMonitorKeysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublishItemMonitorKeysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublishItemMonitorKeysRequestMultiError) AllErrors() []error { return m }

// ListPublishItemMonitorKeysRequestValidationError is the validation error
// returned by ListPublishItemMonitorKeysRequest.Validate if the designated
// constraints aren't met.
type ListPublishItemMonitorKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublishItemMonitorKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublishItemMonitorKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublishItemMonitorKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublishItemMonitorKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublishItemMonitorKeysRequestValidationError) ErrorName() string {
	return "ListPublishItemMonitorKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublishItemMonitorKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublishItemMonitorKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublishItemMonitorKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublishItemMonitorKeysRequestValidationError{}

// Validate checks the field values on ListPublishItemMonitorKeysResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListPublishItemMonitorKeysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublishItemMonitorKeysResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListPublishItemMonitorKeysResponseMultiError, or nil if none found.
func (m *ListPublishItemMonitorKeysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublishItemMonitorKeysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ListPublishItemMonitorKeysResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ListPublishItemMonitorKeysResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ListPublishItemMonitorKeysResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ListPublishItemMonitorKeysResponseMultiError(errors)
	}

	return nil
}

// ListPublishItemMonitorKeysResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListPublishItemMonitorKeysResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPublishItemMonitorKeysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublishItemMonitorKeysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublishItemMonitorKeysResponseMultiError) AllErrors() []error { return m }

// ListPublishItemMonitorKeysResponseValidationError is the validation error
// returned by ListPublishItemMonitorKeysResponse.Validate if the designated
// constraints aren't met.
type ListPublishItemMonitorKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublishItemMonitorKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublishItemMonitorKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublishItemMonitorKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublishItemMonitorKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublishItemMonitorKeysResponseValidationError) ErrorName() string {
	return "ListPublishItemMonitorKeysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublishItemMonitorKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublishItemMonitorKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublishItemMonitorKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublishItemMonitorKeysResponseValidationError{}

// Validate checks the field values on MonitorKeys with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MonitorKeys) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonitorKeys with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MonitorKeysMultiError, or
// nil if none found.
func (m *MonitorKeys) ValidateAll() error {
	return m.validate(true)
}

func (m *MonitorKeys) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AK

	// no validation rules for AI

	// no validation rules for Env

	// no validation rules for AppID

	if len(errors) > 0 {
		return MonitorKeysMultiError(errors)
	}

	return nil
}

// MonitorKeysMultiError is an error wrapping multiple validation errors
// returned by MonitorKeys.ValidateAll() if the designated constraints aren't met.
type MonitorKeysMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonitorKeysMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonitorKeysMultiError) AllErrors() []error { return m }

// MonitorKeysValidationError is the validation error returned by
// MonitorKeys.Validate if the designated constraints aren't met.
type MonitorKeysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonitorKeysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonitorKeysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonitorKeysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonitorKeysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonitorKeysValidationError) ErrorName() string { return "MonitorKeysValidationError" }

// Error satisfies the builtin error interface
func (e MonitorKeysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonitorKeys.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonitorKeysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonitorKeysValidationError{}

// Validate checks the field values on DeletePublishItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePublishItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePublishItemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePublishItemResponseMultiError, or nil if none found.
func (m *DeletePublishItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePublishItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeletePublishItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeletePublishItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePublishItemResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeletePublishItemResponseMultiError(errors)
	}

	return nil
}

// DeletePublishItemResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePublishItemResponse.ValidateAll() if the
// designated constraints aren't met.
type DeletePublishItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePublishItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePublishItemResponseMultiError) AllErrors() []error { return m }

// DeletePublishItemResponseValidationError is the validation error returned by
// DeletePublishItemResponse.Validate if the designated constraints aren't met.
type DeletePublishItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePublishItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePublishItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePublishItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePublishItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePublishItemResponseValidationError) ErrorName() string {
	return "DeletePublishItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePublishItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePublishItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePublishItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePublishItemResponseValidationError{}

// Validate checks the field values on GetPublishItemLatestVersionData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublishItemLatestVersionData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishItemLatestVersionData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPublishItemLatestVersionDataMultiError, or nil if none found.
func (m *GetPublishItemLatestVersionData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishItemLatestVersionData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetH5Versions()))
		i := 0
		for key := range m.GetH5Versions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetH5Versions()[key]
			_ = val

			// no validation rules for H5Versions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetPublishItemLatestVersionDataValidationError{
							field:  fmt.Sprintf("H5Versions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetPublishItemLatestVersionDataValidationError{
							field:  fmt.Sprintf("H5Versions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetPublishItemLatestVersionDataValidationError{
						field:  fmt.Sprintf("H5Versions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if m.AppVersion != nil {

		if all {
			switch v := interface{}(m.GetAppVersion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPublishItemLatestVersionDataValidationError{
						field:  "AppVersion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPublishItemLatestVersionDataValidationError{
						field:  "AppVersion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAppVersion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPublishItemLatestVersionDataValidationError{
					field:  "AppVersion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPublishItemLatestVersionDataMultiError(errors)
	}

	return nil
}

// GetPublishItemLatestVersionDataMultiError is an error wrapping multiple
// validation errors returned by GetPublishItemLatestVersionData.ValidateAll()
// if the designated constraints aren't met.
type GetPublishItemLatestVersionDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishItemLatestVersionDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishItemLatestVersionDataMultiError) AllErrors() []error { return m }

// GetPublishItemLatestVersionDataValidationError is the validation error
// returned by GetPublishItemLatestVersionData.Validate if the designated
// constraints aren't met.
type GetPublishItemLatestVersionDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishItemLatestVersionDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishItemLatestVersionDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishItemLatestVersionDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishItemLatestVersionDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishItemLatestVersionDataValidationError) ErrorName() string {
	return "GetPublishItemLatestVersionDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishItemLatestVersionDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishItemLatestVersionData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishItemLatestVersionDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishItemLatestVersionDataValidationError{}

// Validate checks the field values on GetPublishItemLatestVersionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPublishItemLatestVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishItemLatestVersionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPublishItemLatestVersionRequestMultiError, or nil if none found.
func (m *GetPublishItemLatestVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishItemLatestVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ak

	// no validation rules for Ai

	if all {
		switch v := interface{}(m.GetCurrentAppInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublishItemLatestVersionRequestValidationError{
					field:  "CurrentAppInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublishItemLatestVersionRequestValidationError{
					field:  "CurrentAppInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentAppInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublishItemLatestVersionRequestValidationError{
				field:  "CurrentAppInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCurrentH5Info() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPublishItemLatestVersionRequestValidationError{
						field:  fmt.Sprintf("CurrentH5Info[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPublishItemLatestVersionRequestValidationError{
						field:  fmt.Sprintf("CurrentH5Info[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPublishItemLatestVersionRequestValidationError{
					field:  fmt.Sprintf("CurrentH5Info[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MobileType

	// no validation rules for ForceBetaH5

	// no validation rules for Check

	if len(errors) > 0 {
		return GetPublishItemLatestVersionRequestMultiError(errors)
	}

	return nil
}

// GetPublishItemLatestVersionRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPublishItemLatestVersionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPublishItemLatestVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishItemLatestVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishItemLatestVersionRequestMultiError) AllErrors() []error { return m }

// GetPublishItemLatestVersionRequestValidationError is the validation error
// returned by GetPublishItemLatestVersionRequest.Validate if the designated
// constraints aren't met.
type GetPublishItemLatestVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishItemLatestVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishItemLatestVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishItemLatestVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishItemLatestVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishItemLatestVersionRequestValidationError) ErrorName() string {
	return "GetPublishItemLatestVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishItemLatestVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishItemLatestVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishItemLatestVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishItemLatestVersionRequestValidationError{}

// Validate checks the field values on GetPublishItemLatestVersionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPublishItemLatestVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishItemLatestVersionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPublishItemLatestVersionResponseMultiError, or nil if none found.
func (m *GetPublishItemLatestVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishItemLatestVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublishItemLatestVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublishItemLatestVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublishItemLatestVersionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPublishItemLatestVersionResponseMultiError(errors)
	}

	return nil
}

// GetPublishItemLatestVersionResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPublishItemLatestVersionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPublishItemLatestVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishItemLatestVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishItemLatestVersionResponseMultiError) AllErrors() []error { return m }

// GetPublishItemLatestVersionResponseValidationError is the validation error
// returned by GetPublishItemLatestVersionResponse.Validate if the designated
// constraints aren't met.
type GetPublishItemLatestVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishItemLatestVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishItemLatestVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishItemLatestVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishItemLatestVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishItemLatestVersionResponseValidationError) ErrorName() string {
	return "GetPublishItemLatestVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishItemLatestVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishItemLatestVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishItemLatestVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishItemLatestVersionResponseValidationError{}

// Validate checks the field values on H5VersionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *H5VersionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on H5VersionInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in H5VersionInfoMultiError, or
// nil if none found.
func (m *H5VersionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *H5VersionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVersionInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, H5VersionInfoValidationError{
					field:  "VersionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, H5VersionInfoValidationError{
					field:  "VersionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVersionInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return H5VersionInfoValidationError{
				field:  "VersionInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetTargetMobiles()))
		i := 0
		for key := range m.GetTargetMobiles() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTargetMobiles()[key]
			_ = val

			// no validation rules for TargetMobiles[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, H5VersionInfoValidationError{
							field:  fmt.Sprintf("TargetMobiles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, H5VersionInfoValidationError{
							field:  fmt.Sprintf("TargetMobiles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return H5VersionInfoValidationError{
						field:  fmt.Sprintf("TargetMobiles[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return H5VersionInfoMultiError(errors)
	}

	return nil
}

// H5VersionInfoMultiError is an error wrapping multiple validation errors
// returned by H5VersionInfo.ValidateAll() if the designated constraints
// aren't met.
type H5VersionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m H5VersionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m H5VersionInfoMultiError) AllErrors() []error { return m }

// H5VersionInfoValidationError is the validation error returned by
// H5VersionInfo.Validate if the designated constraints aren't met.
type H5VersionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e H5VersionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e H5VersionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e H5VersionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e H5VersionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e H5VersionInfoValidationError) ErrorName() string { return "H5VersionInfoValidationError" }

// Error satisfies the builtin error interface
func (e H5VersionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sH5VersionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = H5VersionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = H5VersionInfoValidationError{}

// Validate checks the field values on CreatePublishItemOfflineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePublishItemOfflineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePublishItemOfflineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePublishItemOfflineRequestMultiError, or nil if none found.
func (m *CreatePublishItemOfflineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePublishItemOfflineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return CreatePublishItemOfflineRequestMultiError(errors)
	}

	return nil
}

// CreatePublishItemOfflineRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePublishItemOfflineRequest.ValidateAll()
// if the designated constraints aren't met.
type CreatePublishItemOfflineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePublishItemOfflineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePublishItemOfflineRequestMultiError) AllErrors() []error { return m }

// CreatePublishItemOfflineRequestValidationError is the validation error
// returned by CreatePublishItemOfflineRequest.Validate if the designated
// constraints aren't met.
type CreatePublishItemOfflineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePublishItemOfflineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePublishItemOfflineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePublishItemOfflineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePublishItemOfflineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePublishItemOfflineRequestValidationError) ErrorName() string {
	return "CreatePublishItemOfflineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePublishItemOfflineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePublishItemOfflineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePublishItemOfflineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePublishItemOfflineRequestValidationError{}

// Validate checks the field values on CreatePublishItemOfflineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePublishItemOfflineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePublishItemOfflineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePublishItemOfflineResponseMultiError, or nil if none found.
func (m *CreatePublishItemOfflineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePublishItemOfflineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreatePublishItemOfflineResponseMultiError(errors)
	}

	return nil
}

// CreatePublishItemOfflineResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreatePublishItemOfflineResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePublishItemOfflineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePublishItemOfflineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePublishItemOfflineResponseMultiError) AllErrors() []error { return m }

// CreatePublishItemOfflineResponseValidationError is the validation error
// returned by CreatePublishItemOfflineResponse.Validate if the designated
// constraints aren't met.
type CreatePublishItemOfflineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePublishItemOfflineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePublishItemOfflineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePublishItemOfflineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePublishItemOfflineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePublishItemOfflineResponseValidationError) ErrorName() string {
	return "CreatePublishItemOfflineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePublishItemOfflineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePublishItemOfflineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePublishItemOfflineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePublishItemOfflineResponseValidationError{}

// Validate checks the field values on DeletePublishItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePublishItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePublishItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePublishItemRequestMultiError, or nil if none found.
func (m *DeletePublishItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePublishItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return DeletePublishItemRequestMultiError(errors)
	}

	return nil
}

// DeletePublishItemRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePublishItemRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePublishItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePublishItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePublishItemRequestMultiError) AllErrors() []error { return m }

// DeletePublishItemRequestValidationError is the validation error returned by
// DeletePublishItemRequest.Validate if the designated constraints aren't met.
type DeletePublishItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePublishItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePublishItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePublishItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePublishItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePublishItemRequestValidationError) ErrorName() string {
	return "DeletePublishItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePublishItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePublishItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePublishItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePublishItemRequestValidationError{}

// Validate checks the field values on DistributePublishItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DistributePublishItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistributePublishItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DistributePublishItemRequestMultiError, or nil if none found.
func (m *DistributePublishItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DistributePublishItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	// no validation rules for MobileType

	// no validation rules for PackageName

	if len(errors) > 0 {
		return DistributePublishItemRequestMultiError(errors)
	}

	return nil
}

// DistributePublishItemRequestMultiError is an error wrapping multiple
// validation errors returned by DistributePublishItemRequest.ValidateAll() if
// the designated constraints aren't met.
type DistributePublishItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributePublishItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributePublishItemRequestMultiError) AllErrors() []error { return m }

// DistributePublishItemRequestValidationError is the validation error returned
// by DistributePublishItemRequest.Validate if the designated constraints
// aren't met.
type DistributePublishItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributePublishItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributePublishItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributePublishItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributePublishItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributePublishItemRequestValidationError) ErrorName() string {
	return "DistributePublishItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DistributePublishItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributePublishItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributePublishItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributePublishItemRequestValidationError{}

// Validate checks the field values on GetPublishItemH5PackageNameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPublishItemH5PackageNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishItemH5PackageNameRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPublishItemH5PackageNameRequestMultiError, or nil if none found.
func (m *GetPublishItemH5PackageNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishItemH5PackageNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return GetPublishItemH5PackageNameRequestMultiError(errors)
	}

	return nil
}

// GetPublishItemH5PackageNameRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPublishItemH5PackageNameRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPublishItemH5PackageNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishItemH5PackageNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishItemH5PackageNameRequestMultiError) AllErrors() []error { return m }

// GetPublishItemH5PackageNameRequestValidationError is the validation error
// returned by GetPublishItemH5PackageNameRequest.Validate if the designated
// constraints aren't met.
type GetPublishItemH5PackageNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishItemH5PackageNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishItemH5PackageNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishItemH5PackageNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishItemH5PackageNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishItemH5PackageNameRequestValidationError) ErrorName() string {
	return "GetPublishItemH5PackageNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishItemH5PackageNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishItemH5PackageNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishItemH5PackageNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishItemH5PackageNameRequestValidationError{}

// Validate checks the field values on GetPublishItemH5PackageNameResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPublishItemH5PackageNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishItemH5PackageNameResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPublishItemH5PackageNameResponseMultiError, or nil if none found.
func (m *GetPublishItemH5PackageNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishItemH5PackageNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPublishItemH5PackageNameResponseMultiError(errors)
	}

	return nil
}

// GetPublishItemH5PackageNameResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPublishItemH5PackageNameResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPublishItemH5PackageNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishItemH5PackageNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishItemH5PackageNameResponseMultiError) AllErrors() []error { return m }

// GetPublishItemH5PackageNameResponseValidationError is the validation error
// returned by GetPublishItemH5PackageNameResponse.Validate if the designated
// constraints aren't met.
type GetPublishItemH5PackageNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishItemH5PackageNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishItemH5PackageNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishItemH5PackageNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishItemH5PackageNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishItemH5PackageNameResponseValidationError) ErrorName() string {
	return "GetPublishItemH5PackageNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishItemH5PackageNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishItemH5PackageNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishItemH5PackageNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishItemH5PackageNameResponseValidationError{}

// Validate checks the field values on GetPublishItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublishItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublishItemRequestMultiError, or nil if none found.
func (m *GetPublishItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPublishItemRequestMultiError(errors)
	}

	return nil
}

// GetPublishItemRequestMultiError is an error wrapping multiple validation
// errors returned by GetPublishItemRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPublishItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishItemRequestMultiError) AllErrors() []error { return m }

// GetPublishItemRequestValidationError is the validation error returned by
// GetPublishItemRequest.Validate if the designated constraints aren't met.
type GetPublishItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishItemRequestValidationError) ErrorName() string {
	return "GetPublishItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishItemRequestValidationError{}

// Validate checks the field values on GetPublishItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublishItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublishItemResponseMultiError, or nil if none found.
func (m *GetPublishItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublishItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublishItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublishItemResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPublishItemResponseMultiError(errors)
	}

	return nil
}

// GetPublishItemResponseMultiError is an error wrapping multiple validation
// errors returned by GetPublishItemResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPublishItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishItemResponseMultiError) AllErrors() []error { return m }

// GetPublishItemResponseValidationError is the validation error returned by
// GetPublishItemResponse.Validate if the designated constraints aren't met.
type GetPublishItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishItemResponseValidationError) ErrorName() string {
	return "GetPublishItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishItemResponseValidationError{}

// Validate checks the field values on GetPublicPublishItemVersionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPublicPublishItemVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicPublishItemVersionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPublicPublishItemVersionRequestMultiError, or nil if none found.
func (m *GetPublicPublishItemVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicPublishItemVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	// no validation rules for MobileType

	// no validation rules for PackageName

	if len(errors) > 0 {
		return GetPublicPublishItemVersionRequestMultiError(errors)
	}

	return nil
}

// GetPublicPublishItemVersionRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPublicPublishItemVersionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPublicPublishItemVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicPublishItemVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicPublishItemVersionRequestMultiError) AllErrors() []error { return m }

// GetPublicPublishItemVersionRequestValidationError is the validation error
// returned by GetPublicPublishItemVersionRequest.Validate if the designated
// constraints aren't met.
type GetPublicPublishItemVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicPublishItemVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicPublishItemVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicPublishItemVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicPublishItemVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicPublishItemVersionRequestValidationError) ErrorName() string {
	return "GetPublicPublishItemVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicPublishItemVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicPublishItemVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicPublishItemVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicPublishItemVersionRequestValidationError{}

// Validate checks the field values on SetPublishItemVersionStatusRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SetPublishItemVersionStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetPublishItemVersionStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SetPublishItemVersionStatusRequestMultiError, or nil if none found.
func (m *SetPublishItemVersionStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetPublishItemVersionStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemId

	// no validation rules for VersionID

	// no validation rules for Action

	if len(errors) > 0 {
		return SetPublishItemVersionStatusRequestMultiError(errors)
	}

	return nil
}

// SetPublishItemVersionStatusRequestMultiError is an error wrapping multiple
// validation errors returned by
// SetPublishItemVersionStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type SetPublishItemVersionStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetPublishItemVersionStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetPublishItemVersionStatusRequestMultiError) AllErrors() []error { return m }

// SetPublishItemVersionStatusRequestValidationError is the validation error
// returned by SetPublishItemVersionStatusRequest.Validate if the designated
// constraints aren't met.
type SetPublishItemVersionStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPublishItemVersionStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPublishItemVersionStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPublishItemVersionStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPublishItemVersionStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPublishItemVersionStatusRequestValidationError) ErrorName() string {
	return "SetPublishItemVersionStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetPublishItemVersionStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPublishItemVersionStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPublishItemVersionStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPublishItemVersionStatusRequestValidationError{}

// Validate checks the field values on PublicItemAddEraseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicItemAddEraseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicItemAddEraseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicItemAddEraseDataMultiError, or nil if none found.
func (m *PublicItemAddEraseData) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicItemAddEraseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicItemAddEraseDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicItemAddEraseDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicItemAddEraseDataValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeviceNo

	if len(errors) > 0 {
		return PublicItemAddEraseDataMultiError(errors)
	}

	return nil
}

// PublicItemAddEraseDataMultiError is an error wrapping multiple validation
// errors returned by PublicItemAddEraseData.ValidateAll() if the designated
// constraints aren't met.
type PublicItemAddEraseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicItemAddEraseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicItemAddEraseDataMultiError) AllErrors() []error { return m }

// PublicItemAddEraseDataValidationError is the validation error returned by
// PublicItemAddEraseData.Validate if the designated constraints aren't met.
type PublicItemAddEraseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicItemAddEraseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicItemAddEraseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicItemAddEraseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicItemAddEraseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicItemAddEraseDataValidationError) ErrorName() string {
	return "PublicItemAddEraseDataValidationError"
}

// Error satisfies the builtin error interface
func (e PublicItemAddEraseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicItemAddEraseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicItemAddEraseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicItemAddEraseDataValidationError{}

// Validate checks the field values on PublicItemAddEraseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicItemAddEraseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicItemAddEraseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicItemAddEraseResponseMultiError, or nil if none found.
func (m *PublicItemAddEraseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicItemAddEraseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicItemAddEraseResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicItemAddEraseResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicItemAddEraseResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublicItemAddEraseResponseMultiError(errors)
	}

	return nil
}

// PublicItemAddEraseResponseMultiError is an error wrapping multiple
// validation errors returned by PublicItemAddEraseResponse.ValidateAll() if
// the designated constraints aren't met.
type PublicItemAddEraseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicItemAddEraseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicItemAddEraseResponseMultiError) AllErrors() []error { return m }

// PublicItemAddEraseResponseValidationError is the validation error returned
// by PublicItemAddEraseResponse.Validate if the designated constraints aren't met.
type PublicItemAddEraseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicItemAddEraseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicItemAddEraseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicItemAddEraseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicItemAddEraseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicItemAddEraseResponseValidationError) ErrorName() string {
	return "PublicItemAddEraseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublicItemAddEraseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicItemAddEraseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicItemAddEraseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicItemAddEraseResponseValidationError{}

// Validate checks the field values on PublishItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublishItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublishItemMultiError, or
// nil if none found.
func (m *PublishItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Logo

	// no validation rules for PublisherID

	// no validation rules for AK

	// no validation rules for AI

	// no validation rules for Type

	// no validation rules for Public

	// no validation rules for OrgID

	// no validation rules for Desc

	// no validation rules for Creator

	// no validation rules for DownloadUrl

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NoJailbreak

	// no validation rules for GeofenceLon

	// no validation rules for GeofenceLat

	// no validation rules for GeofenceRadius

	// no validation rules for GrayLevelPercent

	// no validation rules for LatestVersion

	// no validation rules for RefCount

	// no validation rules for BackgroundImage

	if len(errors) > 0 {
		return PublishItemMultiError(errors)
	}

	return nil
}

// PublishItemMultiError is an error wrapping multiple validation errors
// returned by PublishItem.ValidateAll() if the designated constraints aren't met.
type PublishItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemMultiError) AllErrors() []error { return m }

// PublishItemValidationError is the validation error returned by
// PublishItem.Validate if the designated constraints aren't met.
type PublishItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemValidationError) ErrorName() string { return "PublishItemValidationError" }

// Error satisfies the builtin error interface
func (e PublishItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemValidationError{}

// Validate checks the field values on PublishItemAddBlacklistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishItemAddBlacklistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemAddBlacklistResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PublishItemAddBlacklistResponseMultiError, or nil if none found.
func (m *PublishItemAddBlacklistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemAddBlacklistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemAddBlacklistResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemAddBlacklistResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemAddBlacklistResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishItemAddBlacklistResponseMultiError(errors)
	}

	return nil
}

// PublishItemAddBlacklistResponseMultiError is an error wrapping multiple
// validation errors returned by PublishItemAddBlacklistResponse.ValidateAll()
// if the designated constraints aren't met.
type PublishItemAddBlacklistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemAddBlacklistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemAddBlacklistResponseMultiError) AllErrors() []error { return m }

// PublishItemAddBlacklistResponseValidationError is the validation error
// returned by PublishItemAddBlacklistResponse.Validate if the designated
// constraints aren't met.
type PublishItemAddBlacklistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemAddBlacklistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemAddBlacklistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemAddBlacklistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemAddBlacklistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemAddBlacklistResponseValidationError) ErrorName() string {
	return "PublishItemAddBlacklistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemAddBlacklistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemAddBlacklistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemAddBlacklistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemAddBlacklistResponseValidationError{}

// Validate checks the field values on PublishItemDeleteBlacklistResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PublishItemDeleteBlacklistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemDeleteBlacklistResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PublishItemDeleteBlacklistResponseMultiError, or nil if none found.
func (m *PublishItemDeleteBlacklistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemDeleteBlacklistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemDeleteBlacklistResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemDeleteBlacklistResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemDeleteBlacklistResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishItemDeleteBlacklistResponseMultiError(errors)
	}

	return nil
}

// PublishItemDeleteBlacklistResponseMultiError is an error wrapping multiple
// validation errors returned by
// PublishItemDeleteBlacklistResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishItemDeleteBlacklistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemDeleteBlacklistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemDeleteBlacklistResponseMultiError) AllErrors() []error { return m }

// PublishItemDeleteBlacklistResponseValidationError is the validation error
// returned by PublishItemDeleteBlacklistResponse.Validate if the designated
// constraints aren't met.
type PublishItemDeleteBlacklistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemDeleteBlacklistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemDeleteBlacklistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemDeleteBlacklistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemDeleteBlacklistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemDeleteBlacklistResponseValidationError) ErrorName() string {
	return "PublishItemDeleteBlacklistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemDeleteBlacklistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemDeleteBlacklistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemDeleteBlacklistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemDeleteBlacklistResponseValidationError{}

// Validate checks the field values on PublishItemDistributionData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishItemDistributionData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemDistributionData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishItemDistributionDataMultiError, or nil if none found.
func (m *PublishItemDistributionData) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemDistributionData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Desc

	// no validation rules for Logo

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemDistributionDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemDistributionDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemDistributionDataValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BackgroundImage

	if m.Default != nil {

		if all {
			switch v := interface{}(m.GetDefault()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublishItemDistributionDataValidationError{
						field:  "Default",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublishItemDistributionDataValidationError{
						field:  "Default",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublishItemDistributionDataValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Versions != nil {

		if all {
			switch v := interface{}(m.GetVersions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublishItemDistributionDataValidationError{
						field:  "Versions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublishItemDistributionDataValidationError{
						field:  "Versions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVersions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublishItemDistributionDataValidationError{
					field:  "Versions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PublishItemDistributionDataMultiError(errors)
	}

	return nil
}

// PublishItemDistributionDataMultiError is an error wrapping multiple
// validation errors returned by PublishItemDistributionData.ValidateAll() if
// the designated constraints aren't met.
type PublishItemDistributionDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemDistributionDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemDistributionDataMultiError) AllErrors() []error { return m }

// PublishItemDistributionDataValidationError is the validation error returned
// by PublishItemDistributionData.Validate if the designated constraints
// aren't met.
type PublishItemDistributionDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemDistributionDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemDistributionDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemDistributionDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemDistributionDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemDistributionDataValidationError) ErrorName() string {
	return "PublishItemDistributionDataValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemDistributionDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemDistributionData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemDistributionDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemDistributionDataValidationError{}

// Validate checks the field values on PublishItemDistributionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishItemDistributionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemDistributionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PublishItemDistributionResponseMultiError, or nil if none found.
func (m *PublishItemDistributionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemDistributionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemDistributionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemDistributionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemDistributionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishItemDistributionResponseMultiError(errors)
	}

	return nil
}

// PublishItemDistributionResponseMultiError is an error wrapping multiple
// validation errors returned by PublishItemDistributionResponse.ValidateAll()
// if the designated constraints aren't met.
type PublishItemDistributionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemDistributionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemDistributionResponseMultiError) AllErrors() []error { return m }

// PublishItemDistributionResponseValidationError is the validation error
// returned by PublishItemDistributionResponse.Validate if the designated
// constraints aren't met.
type PublishItemDistributionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemDistributionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemDistributionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemDistributionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemDistributionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemDistributionResponseValidationError) ErrorName() string {
	return "PublishItemDistributionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemDistributionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemDistributionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemDistributionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemDistributionResponseValidationError{}

// Validate checks the field values on PublishItemUserListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishItemUserListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemUserListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishItemUserListResponseMultiError, or nil if none found.
func (m *PublishItemUserListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemUserListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for UserID

	// no validation rules for UserName

	// no validation rules for EraseStatus

	// no validation rules for DeviceNo

	// no validation rules for PublishItemID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemUserListResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemUserListResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemUserListResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PublishItemName

	if len(errors) > 0 {
		return PublishItemUserListResponseMultiError(errors)
	}

	return nil
}

// PublishItemUserListResponseMultiError is an error wrapping multiple
// validation errors returned by PublishItemUserListResponse.ValidateAll() if
// the designated constraints aren't met.
type PublishItemUserListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemUserListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemUserListResponseMultiError) AllErrors() []error { return m }

// PublishItemUserListResponseValidationError is the validation error returned
// by PublishItemUserListResponse.Validate if the designated constraints
// aren't met.
type PublishItemUserListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemUserListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemUserListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemUserListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemUserListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemUserListResponseValidationError) ErrorName() string {
	return "PublishItemUserListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemUserListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemUserListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemUserListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemUserListResponseValidationError{}

// Validate checks the field values on PublishItemUserlistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishItemUserlistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemUserlistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishItemUserlistRequestMultiError, or nil if none found.
func (m *PublishItemUserlistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemUserlistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for UserID

	// no validation rules for UserName

	// no validation rules for DeviceNo

	// no validation rules for PublishItemID

	// no validation rules for Operator

	if len(errors) > 0 {
		return PublishItemUserlistRequestMultiError(errors)
	}

	return nil
}

// PublishItemUserlistRequestMultiError is an error wrapping multiple
// validation errors returned by PublishItemUserlistRequest.ValidateAll() if
// the designated constraints aren't met.
type PublishItemUserlistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemUserlistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemUserlistRequestMultiError) AllErrors() []error { return m }

// PublishItemUserlistRequestValidationError is the validation error returned
// by PublishItemUserlistRequest.Validate if the designated constraints aren't met.
type PublishItemUserlistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemUserlistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemUserlistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemUserlistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemUserlistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemUserlistRequestValidationError) ErrorName() string {
	return "PublishItemUserlistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemUserlistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemUserlistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemUserlistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemUserlistRequestValidationError{}

// Validate checks the field values on PublishItemUserListDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishItemUserListDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemUserListDataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PublishItemUserListDataResponseMultiError, or nil if none found.
func (m *PublishItemUserListDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemUserListDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemUserListDataResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemUserListDataResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemUserListDataResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishItemUserListDataResponseMultiError(errors)
	}

	return nil
}

// PublishItemUserListDataResponseMultiError is an error wrapping multiple
// validation errors returned by PublishItemUserListDataResponse.ValidateAll()
// if the designated constraints aren't met.
type PublishItemUserListDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemUserListDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemUserListDataResponseMultiError) AllErrors() []error { return m }

// PublishItemUserListDataResponseValidationError is the validation error
// returned by PublishItemUserListDataResponse.Validate if the designated
// constraints aren't met.
type PublishItemUserListDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemUserListDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemUserListDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemUserListDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemUserListDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemUserListDataResponseValidationError) ErrorName() string {
	return "PublishItemUserListDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemUserListDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemUserListDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemUserListDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemUserListDataResponseValidationError{}

// Validate checks the field values on PublishItemUserListData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishItemUserListData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemUserListData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishItemUserListDataMultiError, or nil if none found.
func (m *PublishItemUserListData) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemUserListData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublishItemUserListDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublishItemUserListDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublishItemUserListDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PublishItemUserListDataMultiError(errors)
	}

	return nil
}

// PublishItemUserListDataMultiError is an error wrapping multiple validation
// errors returned by PublishItemUserListData.ValidateAll() if the designated
// constraints aren't met.
type PublishItemUserListDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemUserListDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemUserListDataMultiError) AllErrors() []error { return m }

// PublishItemUserListDataValidationError is the validation error returned by
// PublishItemUserListData.Validate if the designated constraints aren't met.
type PublishItemUserListDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemUserListDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemUserListDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemUserListDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemUserListDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemUserListDataValidationError) ErrorName() string {
	return "PublishItemUserListDataValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemUserListDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemUserListData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemUserListDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemUserListDataValidationError{}

// Validate checks the field values on PublishItemVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishItemVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishItemVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishItemVersionMultiError, or nil if none found.
func (m *PublishItemVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishItemVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Version

	// no validation rules for BuildID

	// no validation rules for PackageName

	// no validation rules for Public

	// no validation rules for IsDefault

	// no validation rules for Desc

	// no validation rules for Logo

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemVersionValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemVersionValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemVersionValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemVersionValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemVersionValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemVersionValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSwagger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemVersionValidationError{
					field:  "Swagger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemVersionValidationError{
					field:  "Swagger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSwagger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemVersionValidationError{
				field:  "Swagger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrgID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemVersionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemVersionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemVersionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishItemVersionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishItemVersionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishItemVersionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Spec

	// no validation rules for Readme

	// no validation rules for MobileType

	{
		sorted_keys := make([]string, len(m.GetTargetMobiles()))
		i := 0
		for key := range m.GetTargetMobiles() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTargetMobiles()[key]
			_ = val

			// no validation rules for TargetMobiles[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PublishItemVersionValidationError{
							field:  fmt.Sprintf("TargetMobiles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PublishItemVersionValidationError{
							field:  fmt.Sprintf("TargetMobiles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PublishItemVersionValidationError{
						field:  fmt.Sprintf("TargetMobiles[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for VersionStates

	// no validation rules for GrayLevelPercent

	if len(errors) > 0 {
		return PublishItemVersionMultiError(errors)
	}

	return nil
}

// PublishItemVersionMultiError is an error wrapping multiple validation errors
// returned by PublishItemVersion.ValidateAll() if the designated constraints
// aren't met.
type PublishItemVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishItemVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishItemVersionMultiError) AllErrors() []error { return m }

// PublishItemVersionValidationError is the validation error returned by
// PublishItemVersion.Validate if the designated constraints aren't met.
type PublishItemVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishItemVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishItemVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishItemVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishItemVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishItemVersionValidationError) ErrorName() string {
	return "PublishItemVersionValidationError"
}

// Error satisfies the builtin error interface
func (e PublishItemVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishItemVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishItemVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishItemVersionValidationError{}

// Validate checks the field values on QueryPublishItemData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryPublishItemData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPublishItemData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryPublishItemDataMultiError, or nil if none found.
func (m *QueryPublishItemData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPublishItemData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryPublishItemDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryPublishItemDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryPublishItemDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryPublishItemDataMultiError(errors)
	}

	return nil
}

// QueryPublishItemDataMultiError is an error wrapping multiple validation
// errors returned by QueryPublishItemData.ValidateAll() if the designated
// constraints aren't met.
type QueryPublishItemDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPublishItemDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPublishItemDataMultiError) AllErrors() []error { return m }

// QueryPublishItemDataValidationError is the validation error returned by
// QueryPublishItemData.Validate if the designated constraints aren't met.
type QueryPublishItemDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPublishItemDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPublishItemDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPublishItemDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPublishItemDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPublishItemDataValidationError) ErrorName() string {
	return "QueryPublishItemDataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPublishItemDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPublishItemData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPublishItemDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPublishItemDataValidationError{}

// Validate checks the field values on QueryPublishItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryPublishItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPublishItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryPublishItemRequestMultiError, or nil if none found.
func (m *QueryPublishItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPublishItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for PublisherId

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Public

	// no validation rules for Q

	// no validation rules for Ids

	// no validation rules for OrgID

	if len(errors) > 0 {
		return QueryPublishItemRequestMultiError(errors)
	}

	return nil
}

// QueryPublishItemRequestMultiError is an error wrapping multiple validation
// errors returned by QueryPublishItemRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryPublishItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPublishItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPublishItemRequestMultiError) AllErrors() []error { return m }

// QueryPublishItemRequestValidationError is the validation error returned by
// QueryPublishItemRequest.Validate if the designated constraints aren't met.
type QueryPublishItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPublishItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPublishItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPublishItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPublishItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPublishItemRequestValidationError) ErrorName() string {
	return "QueryPublishItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPublishItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPublishItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPublishItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPublishItemRequestValidationError{}

// Validate checks the field values on QueryPublishItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryPublishItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPublishItemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryPublishItemResponseMultiError, or nil if none found.
func (m *QueryPublishItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPublishItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryPublishItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryPublishItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryPublishItemResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryPublishItemResponseMultiError(errors)
	}

	return nil
}

// QueryPublishItemResponseMultiError is an error wrapping multiple validation
// errors returned by QueryPublishItemResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryPublishItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPublishItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPublishItemResponseMultiError) AllErrors() []error { return m }

// QueryPublishItemResponseValidationError is the validation error returned by
// QueryPublishItemResponse.Validate if the designated constraints aren't met.
type QueryPublishItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPublishItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPublishItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPublishItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPublishItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPublishItemResponseValidationError) ErrorName() string {
	return "QueryPublishItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPublishItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPublishItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPublishItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPublishItemResponseValidationError{}

// Validate checks the field values on QueryPublishItemVersionData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryPublishItemVersionData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPublishItemVersionData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryPublishItemVersionDataMultiError, or nil if none found.
func (m *QueryPublishItemVersionData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPublishItemVersionData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryPublishItemVersionDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryPublishItemVersionDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryPublishItemVersionDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryPublishItemVersionDataMultiError(errors)
	}

	return nil
}

// QueryPublishItemVersionDataMultiError is an error wrapping multiple
// validation errors returned by QueryPublishItemVersionData.ValidateAll() if
// the designated constraints aren't met.
type QueryPublishItemVersionDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPublishItemVersionDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPublishItemVersionDataMultiError) AllErrors() []error { return m }

// QueryPublishItemVersionDataValidationError is the validation error returned
// by QueryPublishItemVersionData.Validate if the designated constraints
// aren't met.
type QueryPublishItemVersionDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPublishItemVersionDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPublishItemVersionDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPublishItemVersionDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPublishItemVersionDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPublishItemVersionDataValidationError) ErrorName() string {
	return "QueryPublishItemVersionDataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPublishItemVersionDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPublishItemVersionData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPublishItemVersionDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPublishItemVersionDataValidationError{}

// Validate checks the field values on QueryPublishItemVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryPublishItemVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPublishItemVersionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryPublishItemVersionRequestMultiError, or nil if none found.
func (m *QueryPublishItemVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPublishItemVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Public

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for MobileType

	// no validation rules for PackageName

	// no validation rules for ItemID

	// no validation rules for OrgID

	// no validation rules for IsDefault

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return QueryPublishItemVersionRequestMultiError(errors)
	}

	return nil
}

// QueryPublishItemVersionRequestMultiError is an error wrapping multiple
// validation errors returned by QueryPublishItemVersionRequest.ValidateAll()
// if the designated constraints aren't met.
type QueryPublishItemVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPublishItemVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPublishItemVersionRequestMultiError) AllErrors() []error { return m }

// QueryPublishItemVersionRequestValidationError is the validation error
// returned by QueryPublishItemVersionRequest.Validate if the designated
// constraints aren't met.
type QueryPublishItemVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPublishItemVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPublishItemVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPublishItemVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPublishItemVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPublishItemVersionRequestValidationError) ErrorName() string {
	return "QueryPublishItemVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPublishItemVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPublishItemVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPublishItemVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPublishItemVersionRequestValidationError{}

// Validate checks the field values on QueryPublishItemVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryPublishItemVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPublishItemVersionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryPublishItemVersionResponseMultiError, or nil if none found.
func (m *QueryPublishItemVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPublishItemVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryPublishItemVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryPublishItemVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryPublishItemVersionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryPublishItemVersionResponseMultiError(errors)
	}

	return nil
}

// QueryPublishItemVersionResponseMultiError is an error wrapping multiple
// validation errors returned by QueryPublishItemVersionResponse.ValidateAll()
// if the designated constraints aren't met.
type QueryPublishItemVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPublishItemVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPublishItemVersionResponseMultiError) AllErrors() []error { return m }

// QueryPublishItemVersionResponseValidationError is the validation error
// returned by QueryPublishItemVersionResponse.Validate if the designated
// constraints aren't met.
type QueryPublishItemVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPublishItemVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPublishItemVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPublishItemVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPublishItemVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPublishItemVersionResponseValidationError) ErrorName() string {
	return "QueryPublishItemVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPublishItemVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPublishItemVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPublishItemVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPublishItemVersionResponseValidationError{}

// Validate checks the field values on UpdatePublishItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePublishItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePublishItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePublishItemRequestMultiError, or nil if none found.
func (m *UpdatePublishItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePublishItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for DisplayName

	// no validation rules for Logo

	// no validation rules for Public

	// no validation rules for Desc

	// no validation rules for NoJailbreak

	// no validation rules for GeofenceLon

	// no validation rules for GeofenceLat

	// no validation rules for GeofenceRadius

	// no validation rules for GrayLevelPercent

	// no validation rules for BackgroundImage

	// no validation rules for PublishItemId

	if len(errors) > 0 {
		return UpdatePublishItemRequestMultiError(errors)
	}

	return nil
}

// UpdatePublishItemRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePublishItemRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePublishItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePublishItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePublishItemRequestMultiError) AllErrors() []error { return m }

// UpdatePublishItemRequestValidationError is the validation error returned by
// UpdatePublishItemRequest.Validate if the designated constraints aren't met.
type UpdatePublishItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePublishItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePublishItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePublishItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePublishItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePublishItemRequestValidationError) ErrorName() string {
	return "UpdatePublishItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePublishItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePublishItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePublishItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePublishItemRequestValidationError{}

// Validate checks the field values on UpdatePublishItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePublishItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePublishItemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePublishItemResponseMultiError, or nil if none found.
func (m *UpdatePublishItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePublishItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePublishItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePublishItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePublishItemResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePublishItemResponseMultiError(errors)
	}

	return nil
}

// UpdatePublishItemResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePublishItemResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdatePublishItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePublishItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePublishItemResponseMultiError) AllErrors() []error { return m }

// UpdatePublishItemResponseValidationError is the validation error returned by
// UpdatePublishItemResponse.Validate if the designated constraints aren't met.
type UpdatePublishItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePublishItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePublishItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePublishItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePublishItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePublishItemResponseValidationError) ErrorName() string {
	return "UpdatePublishItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePublishItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePublishItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePublishItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePublishItemResponseValidationError{}

// Validate checks the field values on UpdatePublishItemVersionStatesRequset
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdatePublishItemVersionStatesRequset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePublishItemVersionStatesRequset
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdatePublishItemVersionStatesRequsetMultiError, or nil if none found.
func (m *UpdatePublishItemVersionStatesRequset) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePublishItemVersionStatesRequset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishItemID

	// no validation rules for PublishItemVersionID

	// no validation rules for PackageName

	// no validation rules for VersionStates

	// no validation rules for GrayLevelPercent

	// no validation rules for Public

	// no validation rules for Action

	if len(errors) > 0 {
		return UpdatePublishItemVersionStatesRequsetMultiError(errors)
	}

	return nil
}

// UpdatePublishItemVersionStatesRequsetMultiError is an error wrapping
// multiple validation errors returned by
// UpdatePublishItemVersionStatesRequset.ValidateAll() if the designated
// constraints aren't met.
type UpdatePublishItemVersionStatesRequsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePublishItemVersionStatesRequsetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePublishItemVersionStatesRequsetMultiError) AllErrors() []error { return m }

// UpdatePublishItemVersionStatesRequsetValidationError is the validation error
// returned by UpdatePublishItemVersionStatesRequset.Validate if the
// designated constraints aren't met.
type UpdatePublishItemVersionStatesRequsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePublishItemVersionStatesRequsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePublishItemVersionStatesRequsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePublishItemVersionStatesRequsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePublishItemVersionStatesRequsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePublishItemVersionStatesRequsetValidationError) ErrorName() string {
	return "UpdatePublishItemVersionStatesRequsetValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePublishItemVersionStatesRequsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePublishItemVersionStatesRequset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePublishItemVersionStatesRequsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePublishItemVersionStatesRequsetValidationError{}

// Validate checks the field values on VersionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VersionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VersionInfoMultiError, or
// nil if none found.
func (m *VersionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageName

	// no validation rules for Version

	// no validation rules for BuildID

	if len(errors) > 0 {
		return VersionInfoMultiError(errors)
	}

	return nil
}

// VersionInfoMultiError is an error wrapping multiple validation errors
// returned by VersionInfo.ValidateAll() if the designated constraints aren't met.
type VersionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionInfoMultiError) AllErrors() []error { return m }

// VersionInfoValidationError is the validation error returned by
// VersionInfo.Validate if the designated constraints aren't met.
type VersionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionInfoValidationError) ErrorName() string { return "VersionInfoValidationError" }

// Error satisfies the builtin error interface
func (e VersionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionInfoValidationError{}
