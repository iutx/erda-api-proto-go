// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: publishitem.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateBranchRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *CreateBranchRuleResponse) Reset() {
	*x = CreateBranchRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBranchRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchRuleResponse) ProtoMessage() {}

func (x *CreateBranchRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateBranchRuleResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{0}
}

func (x *CreateBranchRuleResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreatePublishItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName      string   `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	PublisherID      int64    `protobuf:"varint,3,opt,name=publisherID,json=publisherId,proto3" json:"publisherID,omitempty"`
	Type             string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Logo             string   `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	Public           bool     `protobuf:"varint,6,opt,name=public,proto3" json:"public,omitempty"`
	Desc             string   `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	OrgID            int64    `protobuf:"varint,8,opt,name=orgID,json=-,proto3" json:"orgID,omitempty"`
	Creator          string   `protobuf:"bytes,9,opt,name=creator,json=-,proto3" json:"creator,omitempty"`
	NoJailbreak      bool     `protobuf:"varint,10,opt,name=noJailbreak,proto3" json:"noJailbreak,omitempty"`
	GeofenceLon      float64  `protobuf:"fixed64,11,opt,name=geofenceLon,proto3" json:"geofenceLon,omitempty"`
	GeofenceLat      float64  `protobuf:"fixed64,12,opt,name=geofenceLat,proto3" json:"geofenceLat,omitempty"`
	GeofenceRadius   float64  `protobuf:"fixed64,13,opt,name=geofenceRadius,proto3" json:"geofenceRadius,omitempty"`
	GrayLevelPercent int64    `protobuf:"varint,14,opt,name=grayLevelPercent,proto3" json:"grayLevelPercent,omitempty"`
	PreviewImages    []string `protobuf:"bytes,15,rep,name=previewImages,proto3" json:"previewImages,omitempty"`
	BackgroundImage  string   `protobuf:"bytes,16,opt,name=backgroundImage,proto3" json:"backgroundImage,omitempty"`
}

func (x *CreatePublishItemRequest) Reset() {
	*x = CreatePublishItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublishItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublishItemRequest) ProtoMessage() {}

func (x *CreatePublishItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublishItemRequest.ProtoReflect.Descriptor instead.
func (*CreatePublishItemRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePublishItemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePublishItemRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreatePublishItemRequest) GetPublisherID() int64 {
	if x != nil {
		return x.PublisherID
	}
	return 0
}

func (x *CreatePublishItemRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreatePublishItemRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *CreatePublishItemRequest) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *CreatePublishItemRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreatePublishItemRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CreatePublishItemRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreatePublishItemRequest) GetNoJailbreak() bool {
	if x != nil {
		return x.NoJailbreak
	}
	return false
}

func (x *CreatePublishItemRequest) GetGeofenceLon() float64 {
	if x != nil {
		return x.GeofenceLon
	}
	return 0
}

func (x *CreatePublishItemRequest) GetGeofenceLat() float64 {
	if x != nil {
		return x.GeofenceLat
	}
	return 0
}

func (x *CreatePublishItemRequest) GetGeofenceRadius() float64 {
	if x != nil {
		return x.GeofenceRadius
	}
	return 0
}

func (x *CreatePublishItemRequest) GetGrayLevelPercent() int64 {
	if x != nil {
		return x.GrayLevelPercent
	}
	return 0
}

func (x *CreatePublishItemRequest) GetPreviewImages() []string {
	if x != nil {
		return x.PreviewImages
	}
	return nil
}

func (x *CreatePublishItemRequest) GetBackgroundImage() string {
	if x != nil {
		return x.BackgroundImage
	}
	return ""
}

type CreatePublishItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PublishItem `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreatePublishItemResponse) Reset() {
	*x = CreatePublishItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublishItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublishItemResponse) ProtoMessage() {}

func (x *CreatePublishItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublishItemResponse.ProtoReflect.Descriptor instead.
func (*CreatePublishItemResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePublishItemResponse) GetData() *PublishItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreatePublishItemVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version       string         `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	BuildID       string         `protobuf:"bytes,2,opt,name=buildID,proto3" json:"buildID,omitempty"`
	PackageName   string         `protobuf:"bytes,3,opt,name=packageName,json=package_name,proto3" json:"packageName,omitempty"`
	Public        bool           `protobuf:"varint,4,opt,name=public,proto3" json:"public,omitempty"`
	IsDefault     bool           `protobuf:"varint,5,opt,name=isDefault,json=is_default,proto3" json:"isDefault,omitempty"`
	Logo          string         `protobuf:"bytes,6,opt,name=logo,proto3" json:"logo,omitempty"`
	Desc          string         `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	Readme        string         `protobuf:"bytes,8,opt,name=readme,proto3" json:"readme,omitempty"`
	Spec          string         `protobuf:"bytes,9,opt,name=spec,proto3" json:"spec,omitempty"`
	Swagger       string         `protobuf:"bytes,10,opt,name=swagger,proto3" json:"swagger,omitempty"`
	ReleaseID     string         `protobuf:"bytes,11,opt,name=releaseID,json=releaseId,proto3" json:"releaseID,omitempty"`
	MobileType    string         `protobuf:"bytes,12,opt,name=mobileType,proto3" json:"mobileType,omitempty"`
	H5VersionInfo *H5VersionInfo `protobuf:"bytes,13,opt,name=h5VersionInfo,proto3" json:"h5VersionInfo,omitempty"`
	PublishItemID int64          `protobuf:"varint,14,opt,name=publishItemID,json=-,proto3" json:"publishItemID,omitempty"`
	OrgID         int64          `protobuf:"varint,15,opt,name=orgID,json=-,proto3" json:"orgID,omitempty"`
	AppID         uint64         `protobuf:"varint,16,opt,name=appID,proto3" json:"appID,omitempty"`
	Creator       string         `protobuf:"bytes,17,opt,name=creator,json=-,proto3" json:"creator,omitempty"`
}

func (x *CreatePublishItemVersionRequest) Reset() {
	*x = CreatePublishItemVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublishItemVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublishItemVersionRequest) ProtoMessage() {}

func (x *CreatePublishItemVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublishItemVersionRequest.ProtoReflect.Descriptor instead.
func (*CreatePublishItemVersionRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePublishItemVersionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreatePublishItemVersionRequest) GetBuildID() string {
	if x != nil {
		return x.BuildID
	}
	return ""
}

func (x *CreatePublishItemVersionRequest) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *CreatePublishItemVersionRequest) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *CreatePublishItemVersionRequest) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *CreatePublishItemVersionRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *CreatePublishItemVersionRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreatePublishItemVersionRequest) GetReadme() string {
	if x != nil {
		return x.Readme
	}
	return ""
}

func (x *CreatePublishItemVersionRequest) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *CreatePublishItemVersionRequest) GetSwagger() string {
	if x != nil {
		return x.Swagger
	}
	return ""
}

func (x *CreatePublishItemVersionRequest) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

func (x *CreatePublishItemVersionRequest) GetMobileType() string {
	if x != nil {
		return x.MobileType
	}
	return ""
}

func (x *CreatePublishItemVersionRequest) GetH5VersionInfo() *H5VersionInfo {
	if x != nil {
		return x.H5VersionInfo
	}
	return nil
}

func (x *CreatePublishItemVersionRequest) GetPublishItemID() int64 {
	if x != nil {
		return x.PublishItemID
	}
	return 0
}

func (x *CreatePublishItemVersionRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CreatePublishItemVersionRequest) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *CreatePublishItemVersionRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type CreatePublishItemVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CreatePublishItemVersionData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreatePublishItemVersionResponse) Reset() {
	*x = CreatePublishItemVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublishItemVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublishItemVersionResponse) ProtoMessage() {}

func (x *CreatePublishItemVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublishItemVersionResponse.ProtoReflect.Descriptor instead.
func (*CreatePublishItemVersionResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePublishItemVersionResponse) GetData() *CreatePublishItemVersionData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreatePublishItemVersionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        *PublishItemVersion `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	PublishItem *PublishItem        `protobuf:"bytes,2,opt,name=publishItem,proto3" json:"publishItem,omitempty"`
}

func (x *CreatePublishItemVersionData) Reset() {
	*x = CreatePublishItemVersionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublishItemVersionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublishItemVersionData) ProtoMessage() {}

func (x *CreatePublishItemVersionData) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublishItemVersionData.ProtoReflect.Descriptor instead.
func (*CreatePublishItemVersionData) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePublishItemVersionData) GetData() *PublishItemVersion {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreatePublishItemVersionData) GetPublishItem() *PublishItem {
	if x != nil {
		return x.PublishItem
	}
	return nil
}

type CreateUpdateDeleteReleaseRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ProjectID uint64          `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	UserID    uint64          `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	RuleID    string          `protobuf:"bytes,4,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
	Body      *structpb.Value `protobuf:"bytes,5,opt,name=body,proto3,oneof" json:"body,omitempty"`
}

func (x *CreateUpdateDeleteReleaseRuleRequest) Reset() {
	*x = CreateUpdateDeleteReleaseRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUpdateDeleteReleaseRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUpdateDeleteReleaseRuleRequest) ProtoMessage() {}

func (x *CreateUpdateDeleteReleaseRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUpdateDeleteReleaseRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateUpdateDeleteReleaseRuleRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{6}
}

func (x *CreateUpdateDeleteReleaseRuleRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CreateUpdateDeleteReleaseRuleRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *CreateUpdateDeleteReleaseRuleRequest) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CreateUpdateDeleteReleaseRuleRequest) GetRuleID() string {
	if x != nil {
		return x.RuleID
	}
	return ""
}

func (x *CreateUpdateDeleteReleaseRuleRequest) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

type DeletePublishItemBlackListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId uint64 `protobuf:"varint,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
	BlacklistId   uint64 `protobuf:"varint,2,opt,name=blacklistId,proto3" json:"blacklistId,omitempty"`     // generated from path variable: blacklistId. You should change the proto type if necessary.
}

func (x *DeletePublishItemBlackListRequest) Reset() {
	*x = DeletePublishItemBlackListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePublishItemBlackListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePublishItemBlackListRequest) ProtoMessage() {}

func (x *DeletePublishItemBlackListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePublishItemBlackListRequest.ProtoReflect.Descriptor instead.
func (*DeletePublishItemBlackListRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{7}
}

func (x *DeletePublishItemBlackListRequest) GetPublishItemId() uint64 {
	if x != nil {
		return x.PublishItemId
	}
	return 0
}

func (x *DeletePublishItemBlackListRequest) GetBlacklistId() uint64 {
	if x != nil {
		return x.BlacklistId
	}
	return 0
}

type GetPublishItemBlackListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId int64  `protobuf:"varint,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
	PageNo        uint64 `protobuf:"varint,2,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize      uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *GetPublishItemBlackListRequest) Reset() {
	*x = GetPublishItemBlackListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishItemBlackListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishItemBlackListRequest) ProtoMessage() {}

func (x *GetPublishItemBlackListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishItemBlackListRequest.ProtoReflect.Descriptor instead.
func (*GetPublishItemBlackListRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{8}
}

func (x *GetPublishItemBlackListRequest) GetPublishItemId() int64 {
	if x != nil {
		return x.PublishItemId
	}
	return 0
}

func (x *GetPublishItemBlackListRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *GetPublishItemBlackListRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type CreatePublishItemEraseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo        uint64 `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize      uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	UserID        string `protobuf:"bytes,3,opt,name=userID,json=userId,proto3" json:"userID,omitempty"`
	UserName      string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	DeviceNo      string `protobuf:"bytes,5,opt,name=deviceNo,proto3" json:"deviceNo,omitempty"`
	PublishItemId uint64 `protobuf:"varint,6,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"`
	Operator      string `protobuf:"bytes,7,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *CreatePublishItemEraseRequest) Reset() {
	*x = CreatePublishItemEraseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublishItemEraseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublishItemEraseRequest) ProtoMessage() {}

func (x *CreatePublishItemEraseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublishItemEraseRequest.ProtoReflect.Descriptor instead.
func (*CreatePublishItemEraseRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{9}
}

func (x *CreatePublishItemEraseRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *CreatePublishItemEraseRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CreatePublishItemEraseRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreatePublishItemEraseRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CreatePublishItemEraseRequest) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

func (x *CreatePublishItemEraseRequest) GetPublishItemId() uint64 {
	if x != nil {
		return x.PublishItemId
	}
	return 0
}

func (x *CreatePublishItemEraseRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type GetPublishItemEraseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo        uint64 `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize      uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PublishItemId uint64 `protobuf:"varint,3,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *GetPublishItemEraseRequest) Reset() {
	*x = GetPublishItemEraseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishItemEraseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishItemEraseRequest) ProtoMessage() {}

func (x *GetPublishItemEraseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishItemEraseRequest.ProtoReflect.Descriptor instead.
func (*GetPublishItemEraseRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{10}
}

func (x *GetPublishItemEraseRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *GetPublishItemEraseRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPublishItemEraseRequest) GetPublishItemId() uint64 {
	if x != nil {
		return x.PublishItemId
	}
	return 0
}

type ListPublishItemMonitorKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId uint64 `protobuf:"varint,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *ListPublishItemMonitorKeysRequest) Reset() {
	*x = ListPublishItemMonitorKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublishItemMonitorKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublishItemMonitorKeysRequest) ProtoMessage() {}

func (x *ListPublishItemMonitorKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublishItemMonitorKeysRequest.ProtoReflect.Descriptor instead.
func (*ListPublishItemMonitorKeysRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{11}
}

func (x *ListPublishItemMonitorKeysRequest) GetPublishItemId() uint64 {
	if x != nil {
		return x.PublishItemId
	}
	return 0
}

type ListPublishItemMonitorKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*MonitorKeys `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListPublishItemMonitorKeysResponse) Reset() {
	*x = ListPublishItemMonitorKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublishItemMonitorKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublishItemMonitorKeysResponse) ProtoMessage() {}

func (x *ListPublishItemMonitorKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublishItemMonitorKeysResponse.ProtoReflect.Descriptor instead.
func (*ListPublishItemMonitorKeysResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{12}
}

func (x *ListPublishItemMonitorKeysResponse) GetData() map[string]*MonitorKeys {
	if x != nil {
		return x.Data
	}
	return nil
}

type MonitorKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AK    string `protobuf:"bytes,1,opt,name=aK,json=ak,proto3" json:"aK,omitempty"`
	AI    string `protobuf:"bytes,2,opt,name=aI,json=ai,proto3" json:"aI,omitempty"`
	Env   string `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	AppID int64  `protobuf:"varint,4,opt,name=appID,json=appId,proto3" json:"appID,omitempty"`
}

func (x *MonitorKeys) Reset() {
	*x = MonitorKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorKeys) ProtoMessage() {}

func (x *MonitorKeys) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorKeys.ProtoReflect.Descriptor instead.
func (*MonitorKeys) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{13}
}

func (x *MonitorKeys) GetAK() string {
	if x != nil {
		return x.AK
	}
	return ""
}

func (x *MonitorKeys) GetAI() string {
	if x != nil {
		return x.AI
	}
	return ""
}

func (x *MonitorKeys) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *MonitorKeys) GetAppID() int64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

type DeletePublishItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PublishItem `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeletePublishItemResponse) Reset() {
	*x = DeletePublishItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePublishItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePublishItemResponse) ProtoMessage() {}

func (x *DeletePublishItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePublishItemResponse.ProtoReflect.Descriptor instead.
func (*DeletePublishItemResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{14}
}

func (x *DeletePublishItemResponse) GetData() *PublishItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPublishItemLatestVersionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppVersion *PublishItemVersion            `protobuf:"bytes,1,opt,name=appVersion,json=appVerison,proto3,oneof" json:"appVersion,omitempty"`
	H5Versions map[string]*PublishItemVersion `protobuf:"bytes,2,rep,name=h5Versions,proto3" json:"h5Versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetPublishItemLatestVersionData) Reset() {
	*x = GetPublishItemLatestVersionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishItemLatestVersionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishItemLatestVersionData) ProtoMessage() {}

func (x *GetPublishItemLatestVersionData) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishItemLatestVersionData.ProtoReflect.Descriptor instead.
func (*GetPublishItemLatestVersionData) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{15}
}

func (x *GetPublishItemLatestVersionData) GetAppVersion() *PublishItemVersion {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

func (x *GetPublishItemLatestVersionData) GetH5Versions() map[string]*PublishItemVersion {
	if x != nil {
		return x.H5Versions
	}
	return nil
}

type GetPublishItemLatestVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ak             string         `protobuf:"bytes,1,opt,name=ak,proto3" json:"ak,omitempty"`
	Ai             string         `protobuf:"bytes,2,opt,name=ai,proto3" json:"ai,omitempty"`
	CurrentAppInfo *VersionInfo   `protobuf:"bytes,3,opt,name=currentAppInfo,proto3" json:"currentAppInfo,omitempty"`
	CurrentH5Info  []*VersionInfo `protobuf:"bytes,4,rep,name=currentH5Info,proto3" json:"currentH5Info,omitempty"`
	MobileType     string         `protobuf:"bytes,5,opt,name=mobileType,proto3" json:"mobileType,omitempty"`
	ForceBetaH5    bool           `protobuf:"varint,6,opt,name=forceBetaH5,proto3" json:"forceBetaH5,omitempty"`
	Check          bool           `protobuf:"varint,7,opt,name=check,proto3" json:"check,omitempty"`
}

func (x *GetPublishItemLatestVersionRequest) Reset() {
	*x = GetPublishItemLatestVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishItemLatestVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishItemLatestVersionRequest) ProtoMessage() {}

func (x *GetPublishItemLatestVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishItemLatestVersionRequest.ProtoReflect.Descriptor instead.
func (*GetPublishItemLatestVersionRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{16}
}

func (x *GetPublishItemLatestVersionRequest) GetAk() string {
	if x != nil {
		return x.Ak
	}
	return ""
}

func (x *GetPublishItemLatestVersionRequest) GetAi() string {
	if x != nil {
		return x.Ai
	}
	return ""
}

func (x *GetPublishItemLatestVersionRequest) GetCurrentAppInfo() *VersionInfo {
	if x != nil {
		return x.CurrentAppInfo
	}
	return nil
}

func (x *GetPublishItemLatestVersionRequest) GetCurrentH5Info() []*VersionInfo {
	if x != nil {
		return x.CurrentH5Info
	}
	return nil
}

func (x *GetPublishItemLatestVersionRequest) GetMobileType() string {
	if x != nil {
		return x.MobileType
	}
	return ""
}

func (x *GetPublishItemLatestVersionRequest) GetForceBetaH5() bool {
	if x != nil {
		return x.ForceBetaH5
	}
	return false
}

func (x *GetPublishItemLatestVersionRequest) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

type GetPublishItemLatestVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GetPublishItemLatestVersionData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPublishItemLatestVersionResponse) Reset() {
	*x = GetPublishItemLatestVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishItemLatestVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishItemLatestVersionResponse) ProtoMessage() {}

func (x *GetPublishItemLatestVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishItemLatestVersionResponse.ProtoReflect.Descriptor instead.
func (*GetPublishItemLatestVersionResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{17}
}

func (x *GetPublishItemLatestVersionResponse) GetData() *GetPublishItemLatestVersionData {
	if x != nil {
		return x.Data
	}
	return nil
}

type H5VersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionInfo   *VersionInfo               `protobuf:"bytes,1,opt,name=versionInfo,proto3" json:"versionInfo,omitempty"`
	TargetMobiles map[string]*structpb.Value `protobuf:"bytes,2,rep,name=targetMobiles,proto3" json:"targetMobiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *H5VersionInfo) Reset() {
	*x = H5VersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H5VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H5VersionInfo) ProtoMessage() {}

func (x *H5VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H5VersionInfo.ProtoReflect.Descriptor instead.
func (*H5VersionInfo) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{18}
}

func (x *H5VersionInfo) GetVersionInfo() *VersionInfo {
	if x != nil {
		return x.VersionInfo
	}
	return nil
}

func (x *H5VersionInfo) GetTargetMobiles() map[string]*structpb.Value {
	if x != nil {
		return x.TargetMobiles
	}
	return nil
}

type CreatePublishItemOfflineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId int64 `protobuf:"varint,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *CreatePublishItemOfflineRequest) Reset() {
	*x = CreatePublishItemOfflineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublishItemOfflineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublishItemOfflineRequest) ProtoMessage() {}

func (x *CreatePublishItemOfflineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublishItemOfflineRequest.ProtoReflect.Descriptor instead.
func (*CreatePublishItemOfflineRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{19}
}

func (x *CreatePublishItemOfflineRequest) GetPublishItemId() int64 {
	if x != nil {
		return x.PublishItemId
	}
	return 0
}

type CreatePublishItemOfflineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreatePublishItemOfflineResponse) Reset() {
	*x = CreatePublishItemOfflineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublishItemOfflineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublishItemOfflineResponse) ProtoMessage() {}

func (x *CreatePublishItemOfflineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublishItemOfflineResponse.ProtoReflect.Descriptor instead.
func (*CreatePublishItemOfflineResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{20}
}

func (x *CreatePublishItemOfflineResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DeletePublishItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId int64 `protobuf:"varint,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"`
}

func (x *DeletePublishItemRequest) Reset() {
	*x = DeletePublishItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePublishItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePublishItemRequest) ProtoMessage() {}

func (x *DeletePublishItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePublishItemRequest.ProtoReflect.Descriptor instead.
func (*DeletePublishItemRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{21}
}

func (x *DeletePublishItemRequest) GetPublishItemId() int64 {
	if x != nil {
		return x.PublishItemId
	}
	return 0
}

type DistributePublishItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId int64  `protobuf:"varint,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"`
	MobileType    string `protobuf:"bytes,2,opt,name=mobileType,proto3" json:"mobileType,omitempty"`
	PackageName   string `protobuf:"bytes,3,opt,name=packageName,proto3" json:"packageName,omitempty"`
}

func (x *DistributePublishItemRequest) Reset() {
	*x = DistributePublishItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributePublishItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributePublishItemRequest) ProtoMessage() {}

func (x *DistributePublishItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributePublishItemRequest.ProtoReflect.Descriptor instead.
func (*DistributePublishItemRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{22}
}

func (x *DistributePublishItemRequest) GetPublishItemId() int64 {
	if x != nil {
		return x.PublishItemId
	}
	return 0
}

func (x *DistributePublishItemRequest) GetMobileType() string {
	if x != nil {
		return x.MobileType
	}
	return ""
}

func (x *DistributePublishItemRequest) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

type GetPublishItemH5PackageNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId int64 `protobuf:"varint,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *GetPublishItemH5PackageNameRequest) Reset() {
	*x = GetPublishItemH5PackageNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishItemH5PackageNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishItemH5PackageNameRequest) ProtoMessage() {}

func (x *GetPublishItemH5PackageNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishItemH5PackageNameRequest.ProtoReflect.Descriptor instead.
func (*GetPublishItemH5PackageNameRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{23}
}

func (x *GetPublishItemH5PackageNameRequest) GetPublishItemId() int64 {
	if x != nil {
		return x.PublishItemId
	}
	return 0
}

type GetPublishItemH5PackageNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPublishItemH5PackageNameResponse) Reset() {
	*x = GetPublishItemH5PackageNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishItemH5PackageNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishItemH5PackageNameResponse) ProtoMessage() {}

func (x *GetPublishItemH5PackageNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishItemH5PackageNameResponse.ProtoReflect.Descriptor instead.
func (*GetPublishItemH5PackageNameResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{24}
}

func (x *GetPublishItemH5PackageNameResponse) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPublishItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *GetPublishItemRequest) Reset() {
	*x = GetPublishItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishItemRequest) ProtoMessage() {}

func (x *GetPublishItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishItemRequest.ProtoReflect.Descriptor instead.
func (*GetPublishItemRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{25}
}

func (x *GetPublishItemRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPublishItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PublishItem `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPublishItemResponse) Reset() {
	*x = GetPublishItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublishItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublishItemResponse) ProtoMessage() {}

func (x *GetPublishItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublishItemResponse.ProtoReflect.Descriptor instead.
func (*GetPublishItemResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{26}
}

func (x *GetPublishItemResponse) GetData() *PublishItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPublicPublishItemVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId int64  `protobuf:"varint,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
	MobileType    string `protobuf:"bytes,2,opt,name=mobileType,proto3" json:"mobileType,omitempty"`
	PackageName   string `protobuf:"bytes,3,opt,name=packageName,proto3" json:"packageName,omitempty"`
}

func (x *GetPublicPublishItemVersionRequest) Reset() {
	*x = GetPublicPublishItemVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicPublishItemVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicPublishItemVersionRequest) ProtoMessage() {}

func (x *GetPublicPublishItemVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicPublishItemVersionRequest.ProtoReflect.Descriptor instead.
func (*GetPublicPublishItemVersionRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{27}
}

func (x *GetPublicPublishItemVersionRequest) GetPublishItemId() int64 {
	if x != nil {
		return x.PublishItemId
	}
	return 0
}

func (x *GetPublicPublishItemVersionRequest) GetMobileType() string {
	if x != nil {
		return x.MobileType
	}
	return ""
}

func (x *GetPublicPublishItemVersionRequest) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

type SetPublishItemVersionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemId int64  `protobuf:"varint,1,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
	VersionID     int64  `protobuf:"varint,2,opt,name=versionID,proto3" json:"versionID,omitempty"`         // generated from path variable: versionID. You should change the proto type if necessary.
	Action        string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`                // generated from path variable: action. You should change the proto type if necessary.
}

func (x *SetPublishItemVersionStatusRequest) Reset() {
	*x = SetPublishItemVersionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPublishItemVersionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPublishItemVersionStatusRequest) ProtoMessage() {}

func (x *SetPublishItemVersionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPublishItemVersionStatusRequest.ProtoReflect.Descriptor instead.
func (*SetPublishItemVersionStatusRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{28}
}

func (x *SetPublishItemVersionStatusRequest) GetPublishItemId() int64 {
	if x != nil {
		return x.PublishItemId
	}
	return 0
}

func (x *SetPublishItemVersionStatusRequest) GetVersionID() int64 {
	if x != nil {
		return x.VersionID
	}
	return 0
}

func (x *SetPublishItemVersionStatusRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type PublicItemAddEraseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *PublishItem `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	DeviceNo string       `protobuf:"bytes,2,opt,name=deviceNo,proto3" json:"deviceNo,omitempty"`
}

func (x *PublicItemAddEraseData) Reset() {
	*x = PublicItemAddEraseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicItemAddEraseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicItemAddEraseData) ProtoMessage() {}

func (x *PublicItemAddEraseData) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicItemAddEraseData.ProtoReflect.Descriptor instead.
func (*PublicItemAddEraseData) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{29}
}

func (x *PublicItemAddEraseData) GetData() *PublishItem {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PublicItemAddEraseData) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

type PublicItemAddEraseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PublicItemAddEraseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublicItemAddEraseResponse) Reset() {
	*x = PublicItemAddEraseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicItemAddEraseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicItemAddEraseResponse) ProtoMessage() {}

func (x *PublicItemAddEraseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicItemAddEraseResponse.ProtoReflect.Descriptor instead.
func (*PublicItemAddEraseResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{30}
}

func (x *PublicItemAddEraseResponse) GetData() *PublicItemAddEraseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublishItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               int64                  `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName      string                 `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Logo             string                 `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	PublisherID      int64                  `protobuf:"varint,5,opt,name=publisherID,json=publisherId,proto3" json:"publisherID,omitempty"`
	AK               string                 `protobuf:"bytes,6,opt,name=aK,json=ak,proto3" json:"aK,omitempty"`
	AI               string                 `protobuf:"bytes,7,opt,name=aI,json=ai,proto3" json:"aI,omitempty"`
	Type             string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Public           bool                   `protobuf:"varint,9,opt,name=public,proto3" json:"public,omitempty"`
	OrgID            int64                  `protobuf:"varint,10,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	Desc             string                 `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`
	Creator          string                 `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`
	DownloadUrl      string                 `protobuf:"bytes,13,opt,name=downloadUrl,proto3" json:"downloadUrl,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	NoJailbreak      bool                   `protobuf:"varint,16,opt,name=noJailbreak,proto3" json:"noJailbreak,omitempty"`
	GeofenceLon      float64                `protobuf:"fixed64,17,opt,name=geofenceLon,proto3" json:"geofenceLon,omitempty"`
	GeofenceLat      float64                `protobuf:"fixed64,18,opt,name=geofenceLat,proto3" json:"geofenceLat,omitempty"`
	GeofenceRadius   float64                `protobuf:"fixed64,19,opt,name=geofenceRadius,proto3" json:"geofenceRadius,omitempty"`
	GrayLevelPercent int64                  `protobuf:"varint,20,opt,name=grayLevelPercent,proto3" json:"grayLevelPercent,omitempty"`
	LatestVersion    string                 `protobuf:"bytes,21,opt,name=latestVersion,proto3" json:"latestVersion,omitempty"`
	RefCount         uint64                 `protobuf:"varint,22,opt,name=refCount,proto3" json:"refCount,omitempty"`
	PreviewImages    []string               `protobuf:"bytes,23,rep,name=previewImages,proto3" json:"previewImages,omitempty"`
	BackgroundImage  string                 `protobuf:"bytes,24,opt,name=backgroundImage,proto3" json:"backgroundImage,omitempty"`
}

func (x *PublishItem) Reset() {
	*x = PublishItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItem) ProtoMessage() {}

func (x *PublishItem) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItem.ProtoReflect.Descriptor instead.
func (*PublishItem) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{31}
}

func (x *PublishItem) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PublishItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublishItem) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PublishItem) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *PublishItem) GetPublisherID() int64 {
	if x != nil {
		return x.PublisherID
	}
	return 0
}

func (x *PublishItem) GetAK() string {
	if x != nil {
		return x.AK
	}
	return ""
}

func (x *PublishItem) GetAI() string {
	if x != nil {
		return x.AI
	}
	return ""
}

func (x *PublishItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PublishItem) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *PublishItem) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PublishItem) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PublishItem) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *PublishItem) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *PublishItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PublishItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PublishItem) GetNoJailbreak() bool {
	if x != nil {
		return x.NoJailbreak
	}
	return false
}

func (x *PublishItem) GetGeofenceLon() float64 {
	if x != nil {
		return x.GeofenceLon
	}
	return 0
}

func (x *PublishItem) GetGeofenceLat() float64 {
	if x != nil {
		return x.GeofenceLat
	}
	return 0
}

func (x *PublishItem) GetGeofenceRadius() float64 {
	if x != nil {
		return x.GeofenceRadius
	}
	return 0
}

func (x *PublishItem) GetGrayLevelPercent() int64 {
	if x != nil {
		return x.GrayLevelPercent
	}
	return 0
}

func (x *PublishItem) GetLatestVersion() string {
	if x != nil {
		return x.LatestVersion
	}
	return ""
}

func (x *PublishItem) GetRefCount() uint64 {
	if x != nil {
		return x.RefCount
	}
	return 0
}

func (x *PublishItem) GetPreviewImages() []string {
	if x != nil {
		return x.PreviewImages
	}
	return nil
}

func (x *PublishItem) GetBackgroundImage() string {
	if x != nil {
		return x.BackgroundImage
	}
	return ""
}

type PublishItemAddBlacklistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PublishItem `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublishItemAddBlacklistResponse) Reset() {
	*x = PublishItemAddBlacklistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemAddBlacklistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemAddBlacklistResponse) ProtoMessage() {}

func (x *PublishItemAddBlacklistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemAddBlacklistResponse.ProtoReflect.Descriptor instead.
func (*PublishItemAddBlacklistResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{32}
}

func (x *PublishItemAddBlacklistResponse) GetData() *PublishItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublishItemDeleteBlacklistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PublishItemUserListResponse `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublishItemDeleteBlacklistResponse) Reset() {
	*x = PublishItemDeleteBlacklistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemDeleteBlacklistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemDeleteBlacklistResponse) ProtoMessage() {}

func (x *PublishItemDeleteBlacklistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemDeleteBlacklistResponse.ProtoReflect.Descriptor instead.
func (*PublishItemDeleteBlacklistResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{33}
}

func (x *PublishItemDeleteBlacklistResponse) GetData() *PublishItemUserListResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublishItemDistributionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default         *PublishItemVersion          `protobuf:"bytes,1,opt,name=default,proto3,oneof" json:"default,omitempty"`
	Versions        *QueryPublishItemVersionData `protobuf:"bytes,2,opt,name=versions,proto3,oneof" json:"versions,omitempty"`
	Name            string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName     string                       `protobuf:"bytes,4,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Desc            string                       `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Logo            string                       `protobuf:"bytes,6,opt,name=logo,proto3" json:"logo,omitempty"`
	CreatedAt       *timestamppb.Timestamp       `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	PreviewImages   []string                     `protobuf:"bytes,8,rep,name=previewImages,proto3" json:"previewImages,omitempty"`
	BackgroundImage string                       `protobuf:"bytes,9,opt,name=backgroundImage,proto3" json:"backgroundImage,omitempty"`
}

func (x *PublishItemDistributionData) Reset() {
	*x = PublishItemDistributionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemDistributionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemDistributionData) ProtoMessage() {}

func (x *PublishItemDistributionData) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemDistributionData.ProtoReflect.Descriptor instead.
func (*PublishItemDistributionData) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{34}
}

func (x *PublishItemDistributionData) GetDefault() *PublishItemVersion {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *PublishItemDistributionData) GetVersions() *QueryPublishItemVersionData {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *PublishItemDistributionData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublishItemDistributionData) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PublishItemDistributionData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PublishItemDistributionData) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *PublishItemDistributionData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PublishItemDistributionData) GetPreviewImages() []string {
	if x != nil {
		return x.PreviewImages
	}
	return nil
}

func (x *PublishItemDistributionData) GetBackgroundImage() string {
	if x != nil {
		return x.BackgroundImage
	}
	return ""
}

type PublishItemDistributionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PublishItemDistributionData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublishItemDistributionResponse) Reset() {
	*x = PublishItemDistributionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemDistributionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemDistributionResponse) ProtoMessage() {}

func (x *PublishItemDistributionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemDistributionResponse.ProtoReflect.Descriptor instead.
func (*PublishItemDistributionResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{35}
}

func (x *PublishItemDistributionResponse) GetData() *PublishItemDistributionData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublishItemUserListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	UserID          string                 `protobuf:"bytes,2,opt,name=userID,json=userId,proto3" json:"userID,omitempty"`
	UserName        string                 `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	EraseStatus     string                 `protobuf:"bytes,4,opt,name=eraseStatus,proto3" json:"eraseStatus,omitempty"`
	DeviceNo        string                 `protobuf:"bytes,5,opt,name=deviceNo,proto3" json:"deviceNo,omitempty"`
	PublishItemID   uint64                 `protobuf:"varint,6,opt,name=publishItemID,json=publishItemId,proto3" json:"publishItemID,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	PublishItemName string                 `protobuf:"bytes,8,opt,name=publishItemName,proto3" json:"publishItemName,omitempty"`
}

func (x *PublishItemUserListResponse) Reset() {
	*x = PublishItemUserListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemUserListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemUserListResponse) ProtoMessage() {}

func (x *PublishItemUserListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemUserListResponse.ProtoReflect.Descriptor instead.
func (*PublishItemUserListResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{36}
}

func (x *PublishItemUserListResponse) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PublishItemUserListResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PublishItemUserListResponse) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *PublishItemUserListResponse) GetEraseStatus() string {
	if x != nil {
		return x.EraseStatus
	}
	return ""
}

func (x *PublishItemUserListResponse) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

func (x *PublishItemUserListResponse) GetPublishItemID() uint64 {
	if x != nil {
		return x.PublishItemID
	}
	return 0
}

func (x *PublishItemUserListResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PublishItemUserListResponse) GetPublishItemName() string {
	if x != nil {
		return x.PublishItemName
	}
	return ""
}

type PublishItemUserlistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo        uint64 `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize      uint64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	UserID        string `protobuf:"bytes,3,opt,name=userID,json=userId,proto3" json:"userID,omitempty"`
	UserName      string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	DeviceNo      string `protobuf:"bytes,5,opt,name=deviceNo,proto3" json:"deviceNo,omitempty"`
	PublishItemID uint64 `protobuf:"varint,6,opt,name=publishItemID,json=publishItemId,proto3" json:"publishItemID,omitempty"`
	Operator      string `protobuf:"bytes,7,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *PublishItemUserlistRequest) Reset() {
	*x = PublishItemUserlistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemUserlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemUserlistRequest) ProtoMessage() {}

func (x *PublishItemUserlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemUserlistRequest.ProtoReflect.Descriptor instead.
func (*PublishItemUserlistRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{37}
}

func (x *PublishItemUserlistRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *PublishItemUserlistRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PublishItemUserlistRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PublishItemUserlistRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *PublishItemUserlistRequest) GetDeviceNo() string {
	if x != nil {
		return x.DeviceNo
	}
	return ""
}

func (x *PublishItemUserlistRequest) GetPublishItemID() uint64 {
	if x != nil {
		return x.PublishItemID
	}
	return 0
}

func (x *PublishItemUserlistRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type PublishItemUserListDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PublishItemUserListData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublishItemUserListDataResponse) Reset() {
	*x = PublishItemUserListDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemUserListDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemUserListDataResponse) ProtoMessage() {}

func (x *PublishItemUserListDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemUserListDataResponse.ProtoReflect.Descriptor instead.
func (*PublishItemUserListDataResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{38}
}

func (x *PublishItemUserListDataResponse) GetData() *PublishItemUserListData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublishItemUserListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64                         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*PublishItemUserListResponse `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PublishItemUserListData) Reset() {
	*x = PublishItemUserListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemUserListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemUserListData) ProtoMessage() {}

func (x *PublishItemUserListData) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemUserListData.ProtoReflect.Descriptor instead.
func (*PublishItemUserListData) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{39}
}

func (x *PublishItemUserListData) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PublishItemUserListData) GetList() []*PublishItemUserListResponse {
	if x != nil {
		return x.List
	}
	return nil
}

type PublishItemVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint64                     `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Version          string                     `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	BuildID          string                     `protobuf:"bytes,3,opt,name=buildID,json=buildId,proto3" json:"buildID,omitempty"`
	PackageName      string                     `protobuf:"bytes,4,opt,name=packageName,proto3" json:"packageName,omitempty"`
	Public           bool                       `protobuf:"varint,5,opt,name=public,proto3" json:"public,omitempty"`
	IsDefault        bool                       `protobuf:"varint,6,opt,name=isDefault,proto3" json:"isDefault,omitempty"`
	Desc             string                     `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	Logo             string                     `protobuf:"bytes,8,opt,name=logo,proto3" json:"logo,omitempty"`
	Resources        *structpb.Value            `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	Meta             *structpb.Value            `protobuf:"bytes,10,opt,name=meta,proto3" json:"meta,omitempty"`
	Swagger          *structpb.Value            `protobuf:"bytes,11,opt,name=swagger,proto3" json:"swagger,omitempty"`
	OrgID            int64                      `protobuf:"varint,12,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	CreatedAt        *timestamppb.Timestamp     `protobuf:"bytes,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        *timestamppb.Timestamp     `protobuf:"bytes,14,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Spec             string                     `protobuf:"bytes,15,opt,name=spec,proto3" json:"spec,omitempty"`
	Readme           string                     `protobuf:"bytes,16,opt,name=readme,proto3" json:"readme,omitempty"`
	MobileType       string                     `protobuf:"bytes,17,opt,name=mobileType,proto3" json:"mobileType,omitempty"`
	TargetMobiles    map[string]*structpb.Value `protobuf:"bytes,18,rep,name=targetMobiles,proto3" json:"targetMobiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VersionStates    string                     `protobuf:"bytes,19,opt,name=versionStates,proto3" json:"versionStates,omitempty"`
	GrayLevelPercent int64                      `protobuf:"varint,20,opt,name=grayLevelPercent,proto3" json:"grayLevelPercent,omitempty"`
}

func (x *PublishItemVersion) Reset() {
	*x = PublishItemVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishItemVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishItemVersion) ProtoMessage() {}

func (x *PublishItemVersion) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishItemVersion.ProtoReflect.Descriptor instead.
func (*PublishItemVersion) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{40}
}

func (x *PublishItemVersion) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PublishItemVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PublishItemVersion) GetBuildID() string {
	if x != nil {
		return x.BuildID
	}
	return ""
}

func (x *PublishItemVersion) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *PublishItemVersion) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *PublishItemVersion) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *PublishItemVersion) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PublishItemVersion) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *PublishItemVersion) GetResources() *structpb.Value {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *PublishItemVersion) GetMeta() *structpb.Value {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PublishItemVersion) GetSwagger() *structpb.Value {
	if x != nil {
		return x.Swagger
	}
	return nil
}

func (x *PublishItemVersion) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *PublishItemVersion) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PublishItemVersion) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PublishItemVersion) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *PublishItemVersion) GetReadme() string {
	if x != nil {
		return x.Readme
	}
	return ""
}

func (x *PublishItemVersion) GetMobileType() string {
	if x != nil {
		return x.MobileType
	}
	return ""
}

func (x *PublishItemVersion) GetTargetMobiles() map[string]*structpb.Value {
	if x != nil {
		return x.TargetMobiles
	}
	return nil
}

func (x *PublishItemVersion) GetVersionStates() string {
	if x != nil {
		return x.VersionStates
	}
	return ""
}

func (x *PublishItemVersion) GetGrayLevelPercent() int64 {
	if x != nil {
		return x.GrayLevelPercent
	}
	return 0
}

type QueryPublishItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*PublishItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *QueryPublishItemData) Reset() {
	*x = QueryPublishItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPublishItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPublishItemData) ProtoMessage() {}

func (x *QueryPublishItemData) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPublishItemData.ProtoReflect.Descriptor instead.
func (*QueryPublishItemData) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{41}
}

func (x *QueryPublishItemData) GetList() []*PublishItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *QueryPublishItemData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryPublishItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo      int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize    int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PublisherId int64  `protobuf:"varint,3,opt,name=publisherId,proto3" json:"publisherId,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type        string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Public      string `protobuf:"bytes,6,opt,name=public,proto3" json:"public,omitempty"`
	Q           string `protobuf:"bytes,7,opt,name=q,proto3" json:"q,omitempty"`
	Ids         string `protobuf:"bytes,8,opt,name=ids,proto3" json:"ids,omitempty"`
	OrgID       int64  `protobuf:"varint,9,opt,name=orgID,json=-,proto3" json:"orgID,omitempty"`
}

func (x *QueryPublishItemRequest) Reset() {
	*x = QueryPublishItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPublishItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPublishItemRequest) ProtoMessage() {}

func (x *QueryPublishItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPublishItemRequest.ProtoReflect.Descriptor instead.
func (*QueryPublishItemRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{42}
}

func (x *QueryPublishItemRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *QueryPublishItemRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryPublishItemRequest) GetPublisherId() int64 {
	if x != nil {
		return x.PublisherId
	}
	return 0
}

func (x *QueryPublishItemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryPublishItemRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QueryPublishItemRequest) GetPublic() string {
	if x != nil {
		return x.Public
	}
	return ""
}

func (x *QueryPublishItemRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *QueryPublishItemRequest) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

func (x *QueryPublishItemRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

type QueryPublishItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QueryPublishItemData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryPublishItemResponse) Reset() {
	*x = QueryPublishItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPublishItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPublishItemResponse) ProtoMessage() {}

func (x *QueryPublishItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPublishItemResponse.ProtoReflect.Descriptor instead.
func (*QueryPublishItemResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{43}
}

func (x *QueryPublishItemResponse) GetData() *QueryPublishItemData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryPublishItemVersionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*PublishItemVersion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *QueryPublishItemVersionData) Reset() {
	*x = QueryPublishItemVersionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPublishItemVersionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPublishItemVersionData) ProtoMessage() {}

func (x *QueryPublishItemVersionData) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPublishItemVersionData.ProtoReflect.Descriptor instead.
func (*QueryPublishItemVersionData) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{44}
}

func (x *QueryPublishItemVersionData) GetList() []*PublishItemVersion {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *QueryPublishItemVersionData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryPublishItemVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Public        string `protobuf:"bytes,1,opt,name=public,proto3" json:"public,omitempty"`
	PageNo        int64  `protobuf:"varint,2,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize      int64  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	MobileType    string `protobuf:"bytes,4,opt,name=mobileType,proto3" json:"mobileType,omitempty"`
	PackageName   string `protobuf:"bytes,5,opt,name=packageName,proto3" json:"packageName,omitempty"`
	ItemID        int64  `protobuf:"varint,6,opt,name=itemID,json=-,proto3" json:"itemID,omitempty"`
	OrgID         int64  `protobuf:"varint,7,opt,name=orgID,json=-,proto3" json:"orgID,omitempty"`
	IsDefault     string `protobuf:"bytes,8,opt,name=isDefault,json=-,proto3" json:"isDefault,omitempty"`
	PublishItemId int64  `protobuf:"varint,9,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *QueryPublishItemVersionRequest) Reset() {
	*x = QueryPublishItemVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPublishItemVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPublishItemVersionRequest) ProtoMessage() {}

func (x *QueryPublishItemVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPublishItemVersionRequest.ProtoReflect.Descriptor instead.
func (*QueryPublishItemVersionRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{45}
}

func (x *QueryPublishItemVersionRequest) GetPublic() string {
	if x != nil {
		return x.Public
	}
	return ""
}

func (x *QueryPublishItemVersionRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *QueryPublishItemVersionRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryPublishItemVersionRequest) GetMobileType() string {
	if x != nil {
		return x.MobileType
	}
	return ""
}

func (x *QueryPublishItemVersionRequest) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *QueryPublishItemVersionRequest) GetItemID() int64 {
	if x != nil {
		return x.ItemID
	}
	return 0
}

func (x *QueryPublishItemVersionRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *QueryPublishItemVersionRequest) GetIsDefault() string {
	if x != nil {
		return x.IsDefault
	}
	return ""
}

func (x *QueryPublishItemVersionRequest) GetPublishItemId() int64 {
	if x != nil {
		return x.PublishItemId
	}
	return 0
}

type QueryPublishItemVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QueryPublishItemVersionData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryPublishItemVersionResponse) Reset() {
	*x = QueryPublishItemVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPublishItemVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPublishItemVersionResponse) ProtoMessage() {}

func (x *QueryPublishItemVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPublishItemVersionResponse.ProtoReflect.Descriptor instead.
func (*QueryPublishItemVersionResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{46}
}

func (x *QueryPublishItemVersionResponse) GetData() *QueryPublishItemVersionData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdatePublishItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               int64    `protobuf:"varint,1,opt,name=ID,json=-,proto3" json:"ID,omitempty"`
	DisplayName      string   `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Logo             string   `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`
	Public           bool     `protobuf:"varint,4,opt,name=public,proto3" json:"public,omitempty"`
	Desc             string   `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	NoJailbreak      bool     `protobuf:"varint,6,opt,name=noJailbreak,proto3" json:"noJailbreak,omitempty"`
	GeofenceLon      float64  `protobuf:"fixed64,7,opt,name=geofenceLon,proto3" json:"geofenceLon,omitempty"`
	GeofenceLat      float64  `protobuf:"fixed64,8,opt,name=geofenceLat,proto3" json:"geofenceLat,omitempty"`
	GeofenceRadius   float64  `protobuf:"fixed64,9,opt,name=geofenceRadius,proto3" json:"geofenceRadius,omitempty"`
	GrayLevelPercent int64    `protobuf:"varint,10,opt,name=grayLevelPercent,proto3" json:"grayLevelPercent,omitempty"`
	PreviewImages    []string `protobuf:"bytes,11,rep,name=previewImages,proto3" json:"previewImages,omitempty"`
	BackgroundImage  string   `protobuf:"bytes,12,opt,name=backgroundImage,proto3" json:"backgroundImage,omitempty"`
	PublishItemId    int64    `protobuf:"varint,13,opt,name=publishItemId,proto3" json:"publishItemId,omitempty"` // generated from path variable: publishItemId. You should change the proto type if necessary.
}

func (x *UpdatePublishItemRequest) Reset() {
	*x = UpdatePublishItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePublishItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublishItemRequest) ProtoMessage() {}

func (x *UpdatePublishItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublishItemRequest.ProtoReflect.Descriptor instead.
func (*UpdatePublishItemRequest) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{47}
}

func (x *UpdatePublishItemRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdatePublishItemRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UpdatePublishItemRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *UpdatePublishItemRequest) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *UpdatePublishItemRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *UpdatePublishItemRequest) GetNoJailbreak() bool {
	if x != nil {
		return x.NoJailbreak
	}
	return false
}

func (x *UpdatePublishItemRequest) GetGeofenceLon() float64 {
	if x != nil {
		return x.GeofenceLon
	}
	return 0
}

func (x *UpdatePublishItemRequest) GetGeofenceLat() float64 {
	if x != nil {
		return x.GeofenceLat
	}
	return 0
}

func (x *UpdatePublishItemRequest) GetGeofenceRadius() float64 {
	if x != nil {
		return x.GeofenceRadius
	}
	return 0
}

func (x *UpdatePublishItemRequest) GetGrayLevelPercent() int64 {
	if x != nil {
		return x.GrayLevelPercent
	}
	return 0
}

func (x *UpdatePublishItemRequest) GetPreviewImages() []string {
	if x != nil {
		return x.PreviewImages
	}
	return nil
}

func (x *UpdatePublishItemRequest) GetBackgroundImage() string {
	if x != nil {
		return x.BackgroundImage
	}
	return ""
}

func (x *UpdatePublishItemRequest) GetPublishItemId() int64 {
	if x != nil {
		return x.PublishItemId
	}
	return 0
}

type UpdatePublishItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *PublishItem `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdatePublishItemResponse) Reset() {
	*x = UpdatePublishItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePublishItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublishItemResponse) ProtoMessage() {}

func (x *UpdatePublishItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublishItemResponse.ProtoReflect.Descriptor instead.
func (*UpdatePublishItemResponse) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{48}
}

func (x *UpdatePublishItemResponse) GetData() *PublishItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdatePublishItemVersionStatesRequset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishItemID        int64  `protobuf:"varint,1,opt,name=publishItemID,proto3" json:"publishItemID,omitempty"`
	PublishItemVersionID int64  `protobuf:"varint,2,opt,name=publishItemVersionID,proto3" json:"publishItemVersionID,omitempty"`
	PackageName          string `protobuf:"bytes,3,opt,name=packageName,proto3" json:"packageName,omitempty"`
	VersionStates        string `protobuf:"bytes,4,opt,name=versionStates,proto3" json:"versionStates,omitempty"`
	GrayLevelPercent     int64  `protobuf:"varint,5,opt,name=grayLevelPercent,proto3" json:"grayLevelPercent,omitempty"`
	Public               bool   `protobuf:"varint,6,opt,name=public,json=-,proto3" json:"public,omitempty"`
	Action               string `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"` // generated from path variable: action. You should change the proto type if necessary.
}

func (x *UpdatePublishItemVersionStatesRequset) Reset() {
	*x = UpdatePublishItemVersionStatesRequset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePublishItemVersionStatesRequset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublishItemVersionStatesRequset) ProtoMessage() {}

func (x *UpdatePublishItemVersionStatesRequset) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublishItemVersionStatesRequset.ProtoReflect.Descriptor instead.
func (*UpdatePublishItemVersionStatesRequset) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{49}
}

func (x *UpdatePublishItemVersionStatesRequset) GetPublishItemID() int64 {
	if x != nil {
		return x.PublishItemID
	}
	return 0
}

func (x *UpdatePublishItemVersionStatesRequset) GetPublishItemVersionID() int64 {
	if x != nil {
		return x.PublishItemVersionID
	}
	return 0
}

func (x *UpdatePublishItemVersionStatesRequset) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *UpdatePublishItemVersionStatesRequset) GetVersionStates() string {
	if x != nil {
		return x.VersionStates
	}
	return ""
}

func (x *UpdatePublishItemVersionStatesRequset) GetGrayLevelPercent() int64 {
	if x != nil {
		return x.GrayLevelPercent
	}
	return 0
}

func (x *UpdatePublishItemVersionStatesRequset) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *UpdatePublishItemVersionStatesRequset) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type VersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName string `protobuf:"bytes,1,opt,name=packageName,proto3" json:"packageName,omitempty"`
	Version     string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	BuildID     string `protobuf:"bytes,3,opt,name=buildID,json=buildId,proto3" json:"buildID,omitempty"`
}

func (x *VersionInfo) Reset() {
	*x = VersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publishitem_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInfo) ProtoMessage() {}

func (x *VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_publishitem_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInfo.ProtoReflect.Descriptor instead.
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return file_publishitem_proto_rawDescGZIP(), []int{50}
}

func (x *VersionInfo) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *VersionInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionInfo) GetBuildID() string {
	if x != nil {
		return x.BuildID
	}
	return ""
}

var File_publishitem_proto protoreflect.FileDescriptor

var file_publishitem_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf6, 0x03, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x10, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x01, 0x2d, 0x12, 0x12, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x2d, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x4a, 0x61,
	0x69, 0x6c, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e,
	0x6f, 0x4a, 0x61, 0x69, 0x6c, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x65,
	0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x67, 0x72, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0x52, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfc, 0x03, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x21,
	0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x68, 0x35, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x48, 0x35, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x68, 0x35, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x10, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x2d, 0x22, 0x6a, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xa1, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x43, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xc4, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x44, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x6b, 0x0a, 0x21,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x76, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x72, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x22, 0xd8, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x5a, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x0b, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x4b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x49,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x22, 0x52, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcf, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x0a, 0x68, 0x35, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x35, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x68, 0x35, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x67, 0x0a, 0x0f, 0x48, 0x35, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x02, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x61, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x61, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x69, 0x12,
	0x49, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x35, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x35, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x65, 0x74, 0x61,
	0x48, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x42,
	0x65, 0x74, 0x61, 0x48, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x70, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x02,
	0x0a, 0x0d, 0x48, 0x35, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x43, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5c, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x48, 0x35, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x73, 0x1a, 0x58, 0x0a, 0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0x86, 0x01, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x35, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x35, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x16, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x45, 0x72, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x22, 0x5e, 0x0a, 0x1a, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x45, 0x72, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x45, 0x72, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfb, 0x05, 0x0a, 0x0b, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x4b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x49, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x61, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f,
	0x4a, 0x61, 0x69, 0x6c, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6e, 0x6f, 0x4a, 0x61, 0x69, 0x6c, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x67, 0x72, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65,
	0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x1f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x6b, 0x0a, 0x22, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x03,
	0x0a, 0x1b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x68, 0x0a, 0x1f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69,
	0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x02, 0x0a, 0x1b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x72, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x72, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xe2, 0x01, 0x0a, 0x1a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x64, 0x0a, 0x1f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x17,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x45, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xd1, 0x06, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12,
	0x34, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x77, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x72,
	0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0x58,
	0x0a, 0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x63, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe1, 0x01,
	0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x0c, 0x0a, 0x01, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x10, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01,
	0x2d, 0x22, 0x5a, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a,
	0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65,
	0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x8f, 0x02, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x11, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x01, 0x2d, 0x12, 0x10, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x14, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x2d, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x22, 0x68, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x03, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0d, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f,
	0x4a, 0x61, 0x69, 0x6c, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6e, 0x6f, 0x4a, 0x61, 0x69, 0x6c, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x67, 0x72, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa0,
	0x02, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x32,
	0x0a, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x72,
	0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x72, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x2d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x63, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x32, 0x97, 0x26, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9b, 0x02,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69,
	0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x2c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x44, 0x7d, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0xfa, 0x81, 0xf9, 0x1b,
	0x5a, 0x0a, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x44, 0x7d, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe5, 0x86, 0x85, 0xe5,
	0xae, 0xb9, 0xe9, 0xbb, 0x91, 0xe5, 0x90, 0x8d, 0xe5, 0x8d, 0x95, 0x12, 0xc1, 0x02, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65,
	0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x2a, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x7b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x68, 0x0a, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x7b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe9, 0xbb, 0x91, 0xe5, 0x90, 0x8d, 0xe5, 0x8d, 0x95, 0x12,
	0x9c, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x12, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0xfa,
	0x81, 0xf9, 0x1b, 0x5a, 0x0a, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe9,
	0xbb, 0x91, 0xe5, 0x90, 0x8d, 0xe5, 0x8d, 0x95, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x90,
	0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x61, 0x73, 0x65, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x72, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d,
	0x41, 0x64, 0x64, 0x45, 0x72, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x72,
	0x61, 0x73, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x59, 0x0a, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x65, 0x72, 0x61,
	0x73, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe5,
	0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0x93, 0xa6, 0xe9, 0x99,
	0xa4, 0x12, 0x8f, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x61, 0x73, 0x65, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x72, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f,
	0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f,
	0x65, 0x72, 0x61, 0x73, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x59, 0x0a, 0x28, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x65,
	0x72, 0x61, 0x73, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x27, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe5, 0x86, 0x85, 0xe5, 0xae,
	0xb9, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0x93, 0xa6, 0xe9, 0x99, 0xa4, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x12, 0xbe, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x7d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d,
	0x6b, 0x65, 0x79, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x6b, 0x0a, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe5, 0x86, 0x85, 0xe5,
	0xae, 0xb9, 0xe7, 0x9a, 0x84, 0xe7, 0x9b, 0x91, 0xe6, 0x8e, 0xa7, 0x6b, 0x65, 0x79, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xc6, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65,
	0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65,
	0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x12, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0x12, 0xe6, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d,
	0xfa, 0x81, 0xf9, 0x1b, 0x41, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0x12, 0xcb, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x3a, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x32, 0x02, 0x18, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe5, 0x86,
	0x85, 0xe5, 0xae, 0xb9, 0x12, 0xdb, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x35, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x35, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x48, 0x35, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x48, 0x12, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x68, 0x35, 0x2d, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x73, 0x0a,
	0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x68, 0x35, 0x2d, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x23, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0xa7,
	0xbb, 0xe5, 0x8a, 0xa8, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x48, 0x35, 0xe5, 0x8c, 0x85, 0xe5,
	0x90, 0x8d, 0x12, 0xc1, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2f, 0x0a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0x02, 0x18, 0x01, 0x3a,
	0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0x12, 0xe6, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69,
	0x74, 0x65, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69,
	0x74, 0x65, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x1a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x41, 0x0a, 0x22,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0x12,
	0x94, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69,
	0x74, 0x65, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2d, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x50, 0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x12, 0xce, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44,
	0x12, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x6e, 0x0a, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x02, 0x18,
	0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe7, 0xba, 0xbf, 0xe4, 0xb8, 0x8a, 0xe5, 0xb7, 0xb2, 0xe5, 0x8f, 0x91, 0xe5, 0xb8,
	0x83, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x12, 0x8f, 0x02, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x86, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x4e, 0x0a, 0x2b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f,
	0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x02, 0x18, 0x01, 0x3a, 0x1b, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0x8f, 0x91,
	0xe5, 0xb8, 0x83, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x12, 0xb4, 0x02, 0x0a, 0x1b, 0x53, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x53, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xc2, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4a, 0x22, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0xfa, 0x81,
	0xf9, 0x1b, 0x6d, 0x0a, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0xae,
	0xbe, 0xe7, 0xbd, 0xae, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x12, 0xfd, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x73, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x8b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x2c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x52, 0x0a, 0x2c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x1c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe4, 0xb8, 0x8a,
	0xe6, 0x9e, 0xb6, 0x2f, 0xe4, 0xb8, 0x8b, 0xe6, 0x9e, 0xb6, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac,
	0x12, 0xd1, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x79, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64,
	0x6f, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x64, 0x6f,
	0x70, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x79, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x3a, 0x0a, 0x15, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6d, 0x79, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84, 0xe5, 0x8f,
	0x91, 0xe5, 0xb8, 0x83, 0x1a, 0x0a, 0xc2, 0xc4, 0xcb, 0x1c, 0x05, 0x22, 0x03, 0x64, 0x6f, 0x70,
	0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
	0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x64, 0x6f, 0x70, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_publishitem_proto_rawDescOnce sync.Once
	file_publishitem_proto_rawDescData = file_publishitem_proto_rawDesc
)

func file_publishitem_proto_rawDescGZIP() []byte {
	file_publishitem_proto_rawDescOnce.Do(func() {
		file_publishitem_proto_rawDescData = protoimpl.X.CompressGZIP(file_publishitem_proto_rawDescData)
	})
	return file_publishitem_proto_rawDescData
}

var file_publishitem_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_publishitem_proto_goTypes = []interface{}{
	(*CreateBranchRuleResponse)(nil),              // 0: erda.dop.publishitem.CreateBranchRuleResponse
	(*CreatePublishItemRequest)(nil),              // 1: erda.dop.publishitem.CreatePublishItemRequest
	(*CreatePublishItemResponse)(nil),             // 2: erda.dop.publishitem.CreatePublishItemResponse
	(*CreatePublishItemVersionRequest)(nil),       // 3: erda.dop.publishitem.CreatePublishItemVersionRequest
	(*CreatePublishItemVersionResponse)(nil),      // 4: erda.dop.publishitem.CreatePublishItemVersionResponse
	(*CreatePublishItemVersionData)(nil),          // 5: erda.dop.publishitem.CreatePublishItemVersionData
	(*CreateUpdateDeleteReleaseRuleRequest)(nil),  // 6: erda.dop.publishitem.CreateUpdateDeleteReleaseRuleRequest
	(*DeletePublishItemBlackListRequest)(nil),     // 7: erda.dop.publishitem.DeletePublishItemBlackListRequest
	(*GetPublishItemBlackListRequest)(nil),        // 8: erda.dop.publishitem.GetPublishItemBlackListRequest
	(*CreatePublishItemEraseRequest)(nil),         // 9: erda.dop.publishitem.CreatePublishItemEraseRequest
	(*GetPublishItemEraseRequest)(nil),            // 10: erda.dop.publishitem.GetPublishItemEraseRequest
	(*ListPublishItemMonitorKeysRequest)(nil),     // 11: erda.dop.publishitem.ListPublishItemMonitorKeysRequest
	(*ListPublishItemMonitorKeysResponse)(nil),    // 12: erda.dop.publishitem.ListPublishItemMonitorKeysResponse
	(*MonitorKeys)(nil),                           // 13: erda.dop.publishitem.MonitorKeys
	(*DeletePublishItemResponse)(nil),             // 14: erda.dop.publishitem.DeletePublishItemResponse
	(*GetPublishItemLatestVersionData)(nil),       // 15: erda.dop.publishitem.GetPublishItemLatestVersionData
	(*GetPublishItemLatestVersionRequest)(nil),    // 16: erda.dop.publishitem.GetPublishItemLatestVersionRequest
	(*GetPublishItemLatestVersionResponse)(nil),   // 17: erda.dop.publishitem.GetPublishItemLatestVersionResponse
	(*H5VersionInfo)(nil),                         // 18: erda.dop.publishitem.H5VersionInfo
	(*CreatePublishItemOfflineRequest)(nil),       // 19: erda.dop.publishitem.CreatePublishItemOfflineRequest
	(*CreatePublishItemOfflineResponse)(nil),      // 20: erda.dop.publishitem.CreatePublishItemOfflineResponse
	(*DeletePublishItemRequest)(nil),              // 21: erda.dop.publishitem.DeletePublishItemRequest
	(*DistributePublishItemRequest)(nil),          // 22: erda.dop.publishitem.DistributePublishItemRequest
	(*GetPublishItemH5PackageNameRequest)(nil),    // 23: erda.dop.publishitem.GetPublishItemH5PackageNameRequest
	(*GetPublishItemH5PackageNameResponse)(nil),   // 24: erda.dop.publishitem.GetPublishItemH5PackageNameResponse
	(*GetPublishItemRequest)(nil),                 // 25: erda.dop.publishitem.GetPublishItemRequest
	(*GetPublishItemResponse)(nil),                // 26: erda.dop.publishitem.GetPublishItemResponse
	(*GetPublicPublishItemVersionRequest)(nil),    // 27: erda.dop.publishitem.GetPublicPublishItemVersionRequest
	(*SetPublishItemVersionStatusRequest)(nil),    // 28: erda.dop.publishitem.SetPublishItemVersionStatusRequest
	(*PublicItemAddEraseData)(nil),                // 29: erda.dop.publishitem.PublicItemAddEraseData
	(*PublicItemAddEraseResponse)(nil),            // 30: erda.dop.publishitem.PublicItemAddEraseResponse
	(*PublishItem)(nil),                           // 31: erda.dop.publishitem.PublishItem
	(*PublishItemAddBlacklistResponse)(nil),       // 32: erda.dop.publishitem.PublishItemAddBlacklistResponse
	(*PublishItemDeleteBlacklistResponse)(nil),    // 33: erda.dop.publishitem.PublishItemDeleteBlacklistResponse
	(*PublishItemDistributionData)(nil),           // 34: erda.dop.publishitem.PublishItemDistributionData
	(*PublishItemDistributionResponse)(nil),       // 35: erda.dop.publishitem.PublishItemDistributionResponse
	(*PublishItemUserListResponse)(nil),           // 36: erda.dop.publishitem.PublishItemUserListResponse
	(*PublishItemUserlistRequest)(nil),            // 37: erda.dop.publishitem.PublishItemUserlistRequest
	(*PublishItemUserListDataResponse)(nil),       // 38: erda.dop.publishitem.PublishItemUserListDataResponse
	(*PublishItemUserListData)(nil),               // 39: erda.dop.publishitem.PublishItemUserListData
	(*PublishItemVersion)(nil),                    // 40: erda.dop.publishitem.PublishItemVersion
	(*QueryPublishItemData)(nil),                  // 41: erda.dop.publishitem.QueryPublishItemData
	(*QueryPublishItemRequest)(nil),               // 42: erda.dop.publishitem.QueryPublishItemRequest
	(*QueryPublishItemResponse)(nil),              // 43: erda.dop.publishitem.QueryPublishItemResponse
	(*QueryPublishItemVersionData)(nil),           // 44: erda.dop.publishitem.QueryPublishItemVersionData
	(*QueryPublishItemVersionRequest)(nil),        // 45: erda.dop.publishitem.QueryPublishItemVersionRequest
	(*QueryPublishItemVersionResponse)(nil),       // 46: erda.dop.publishitem.QueryPublishItemVersionResponse
	(*UpdatePublishItemRequest)(nil),              // 47: erda.dop.publishitem.UpdatePublishItemRequest
	(*UpdatePublishItemResponse)(nil),             // 48: erda.dop.publishitem.UpdatePublishItemResponse
	(*UpdatePublishItemVersionStatesRequset)(nil), // 49: erda.dop.publishitem.UpdatePublishItemVersionStatesRequset
	(*VersionInfo)(nil),                           // 50: erda.dop.publishitem.VersionInfo
	nil,                                           // 51: erda.dop.publishitem.ListPublishItemMonitorKeysResponse.DataEntry
	nil,                                           // 52: erda.dop.publishitem.GetPublishItemLatestVersionData.H5VersionsEntry
	nil,                                           // 53: erda.dop.publishitem.H5VersionInfo.TargetMobilesEntry
	nil,                                           // 54: erda.dop.publishitem.PublishItemVersion.TargetMobilesEntry
	(*structpb.Value)(nil),                        // 55: google.protobuf.Value
	(*timestamppb.Timestamp)(nil),                 // 56: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                         // 57: google.protobuf.Empty
}
var file_publishitem_proto_depIdxs = []int32{
	55, // 0: erda.dop.publishitem.CreateBranchRuleResponse.data:type_name -> google.protobuf.Value
	31, // 1: erda.dop.publishitem.CreatePublishItemResponse.data:type_name -> erda.dop.publishitem.PublishItem
	18, // 2: erda.dop.publishitem.CreatePublishItemVersionRequest.h5VersionInfo:type_name -> erda.dop.publishitem.H5VersionInfo
	5,  // 3: erda.dop.publishitem.CreatePublishItemVersionResponse.data:type_name -> erda.dop.publishitem.CreatePublishItemVersionData
	40, // 4: erda.dop.publishitem.CreatePublishItemVersionData.data:type_name -> erda.dop.publishitem.PublishItemVersion
	31, // 5: erda.dop.publishitem.CreatePublishItemVersionData.publishItem:type_name -> erda.dop.publishitem.PublishItem
	55, // 6: erda.dop.publishitem.CreateUpdateDeleteReleaseRuleRequest.body:type_name -> google.protobuf.Value
	51, // 7: erda.dop.publishitem.ListPublishItemMonitorKeysResponse.data:type_name -> erda.dop.publishitem.ListPublishItemMonitorKeysResponse.DataEntry
	31, // 8: erda.dop.publishitem.DeletePublishItemResponse.data:type_name -> erda.dop.publishitem.PublishItem
	40, // 9: erda.dop.publishitem.GetPublishItemLatestVersionData.appVersion:type_name -> erda.dop.publishitem.PublishItemVersion
	52, // 10: erda.dop.publishitem.GetPublishItemLatestVersionData.h5Versions:type_name -> erda.dop.publishitem.GetPublishItemLatestVersionData.H5VersionsEntry
	50, // 11: erda.dop.publishitem.GetPublishItemLatestVersionRequest.currentAppInfo:type_name -> erda.dop.publishitem.VersionInfo
	50, // 12: erda.dop.publishitem.GetPublishItemLatestVersionRequest.currentH5Info:type_name -> erda.dop.publishitem.VersionInfo
	15, // 13: erda.dop.publishitem.GetPublishItemLatestVersionResponse.data:type_name -> erda.dop.publishitem.GetPublishItemLatestVersionData
	50, // 14: erda.dop.publishitem.H5VersionInfo.versionInfo:type_name -> erda.dop.publishitem.VersionInfo
	53, // 15: erda.dop.publishitem.H5VersionInfo.targetMobiles:type_name -> erda.dop.publishitem.H5VersionInfo.TargetMobilesEntry
	31, // 16: erda.dop.publishitem.GetPublishItemResponse.data:type_name -> erda.dop.publishitem.PublishItem
	31, // 17: erda.dop.publishitem.PublicItemAddEraseData.data:type_name -> erda.dop.publishitem.PublishItem
	29, // 18: erda.dop.publishitem.PublicItemAddEraseResponse.data:type_name -> erda.dop.publishitem.PublicItemAddEraseData
	56, // 19: erda.dop.publishitem.PublishItem.createdAt:type_name -> google.protobuf.Timestamp
	56, // 20: erda.dop.publishitem.PublishItem.updatedAt:type_name -> google.protobuf.Timestamp
	31, // 21: erda.dop.publishitem.PublishItemAddBlacklistResponse.data:type_name -> erda.dop.publishitem.PublishItem
	36, // 22: erda.dop.publishitem.PublishItemDeleteBlacklistResponse.data:type_name -> erda.dop.publishitem.PublishItemUserListResponse
	40, // 23: erda.dop.publishitem.PublishItemDistributionData.default:type_name -> erda.dop.publishitem.PublishItemVersion
	44, // 24: erda.dop.publishitem.PublishItemDistributionData.versions:type_name -> erda.dop.publishitem.QueryPublishItemVersionData
	56, // 25: erda.dop.publishitem.PublishItemDistributionData.createdAt:type_name -> google.protobuf.Timestamp
	34, // 26: erda.dop.publishitem.PublishItemDistributionResponse.data:type_name -> erda.dop.publishitem.PublishItemDistributionData
	56, // 27: erda.dop.publishitem.PublishItemUserListResponse.createdAt:type_name -> google.protobuf.Timestamp
	39, // 28: erda.dop.publishitem.PublishItemUserListDataResponse.data:type_name -> erda.dop.publishitem.PublishItemUserListData
	36, // 29: erda.dop.publishitem.PublishItemUserListData.list:type_name -> erda.dop.publishitem.PublishItemUserListResponse
	55, // 30: erda.dop.publishitem.PublishItemVersion.resources:type_name -> google.protobuf.Value
	55, // 31: erda.dop.publishitem.PublishItemVersion.meta:type_name -> google.protobuf.Value
	55, // 32: erda.dop.publishitem.PublishItemVersion.swagger:type_name -> google.protobuf.Value
	56, // 33: erda.dop.publishitem.PublishItemVersion.createdAt:type_name -> google.protobuf.Timestamp
	56, // 34: erda.dop.publishitem.PublishItemVersion.updatedAt:type_name -> google.protobuf.Timestamp
	54, // 35: erda.dop.publishitem.PublishItemVersion.targetMobiles:type_name -> erda.dop.publishitem.PublishItemVersion.TargetMobilesEntry
	31, // 36: erda.dop.publishitem.QueryPublishItemData.list:type_name -> erda.dop.publishitem.PublishItem
	41, // 37: erda.dop.publishitem.QueryPublishItemResponse.data:type_name -> erda.dop.publishitem.QueryPublishItemData
	40, // 38: erda.dop.publishitem.QueryPublishItemVersionData.list:type_name -> erda.dop.publishitem.PublishItemVersion
	44, // 39: erda.dop.publishitem.QueryPublishItemVersionResponse.data:type_name -> erda.dop.publishitem.QueryPublishItemVersionData
	31, // 40: erda.dop.publishitem.UpdatePublishItemResponse.data:type_name -> erda.dop.publishitem.PublishItem
	13, // 41: erda.dop.publishitem.ListPublishItemMonitorKeysResponse.DataEntry.value:type_name -> erda.dop.publishitem.MonitorKeys
	40, // 42: erda.dop.publishitem.GetPublishItemLatestVersionData.H5VersionsEntry.value:type_name -> erda.dop.publishitem.PublishItemVersion
	55, // 43: erda.dop.publishitem.H5VersionInfo.TargetMobilesEntry.value:type_name -> google.protobuf.Value
	55, // 44: erda.dop.publishitem.PublishItemVersion.TargetMobilesEntry.value:type_name -> google.protobuf.Value
	37, // 45: erda.dop.publishitem.PublishItemService.CreatePublishItemBlackList:input_type -> erda.dop.publishitem.PublishItemUserlistRequest
	7,  // 46: erda.dop.publishitem.PublishItemService.DeletePublishItemBlackList:input_type -> erda.dop.publishitem.DeletePublishItemBlackListRequest
	8,  // 47: erda.dop.publishitem.PublishItemService.GetPublishItemBlackList:input_type -> erda.dop.publishitem.GetPublishItemBlackListRequest
	9,  // 48: erda.dop.publishitem.PublishItemService.CreatePublishItemErase:input_type -> erda.dop.publishitem.CreatePublishItemEraseRequest
	10, // 49: erda.dop.publishitem.PublishItemService.GetPublishItemErase:input_type -> erda.dop.publishitem.GetPublishItemEraseRequest
	11, // 50: erda.dop.publishitem.PublishItemService.ListPublishItemMonitorKeys:input_type -> erda.dop.publishitem.ListPublishItemMonitorKeysRequest
	1,  // 51: erda.dop.publishitem.PublishItemService.CreatePublishItem:input_type -> erda.dop.publishitem.CreatePublishItemRequest
	21, // 52: erda.dop.publishitem.PublishItemService.DeletePublishItem:input_type -> erda.dop.publishitem.DeletePublishItemRequest
	25, // 53: erda.dop.publishitem.PublishItemService.GetPublishItem:input_type -> erda.dop.publishitem.GetPublishItemRequest
	23, // 54: erda.dop.publishitem.PublishItemService.GetPublishItemH5PackageName:input_type -> erda.dop.publishitem.GetPublishItemH5PackageNameRequest
	42, // 55: erda.dop.publishitem.PublishItemService.QueryPublishItem:input_type -> erda.dop.publishitem.QueryPublishItemRequest
	47, // 56: erda.dop.publishitem.PublishItemService.UpdatePublishItem:input_type -> erda.dop.publishitem.UpdatePublishItemRequest
	3,  // 57: erda.dop.publishitem.PublishItemService.CreatePublishItemVersion:input_type -> erda.dop.publishitem.CreatePublishItemVersionRequest
	27, // 58: erda.dop.publishitem.PublishItemService.GetPublicPublishItemVersion:input_type -> erda.dop.publishitem.GetPublicPublishItemVersionRequest
	45, // 59: erda.dop.publishitem.PublishItemService.QueryPublishItemVersion:input_type -> erda.dop.publishitem.QueryPublishItemVersionRequest
	28, // 60: erda.dop.publishitem.PublishItemService.SetPublishItemVersionStatus:input_type -> erda.dop.publishitem.SetPublishItemVersionStatusRequest
	49, // 61: erda.dop.publishitem.PublishItemService.UpdatePublishItemVersion:input_type -> erda.dop.publishitem.UpdatePublishItemVersionStatesRequset
	42, // 62: erda.dop.publishitem.PublishItemService.QueryMyPublishItem:input_type -> erda.dop.publishitem.QueryPublishItemRequest
	32, // 63: erda.dop.publishitem.PublishItemService.CreatePublishItemBlackList:output_type -> erda.dop.publishitem.PublishItemAddBlacklistResponse
	33, // 64: erda.dop.publishitem.PublishItemService.DeletePublishItemBlackList:output_type -> erda.dop.publishitem.PublishItemDeleteBlacklistResponse
	38, // 65: erda.dop.publishitem.PublishItemService.GetPublishItemBlackList:output_type -> erda.dop.publishitem.PublishItemUserListDataResponse
	30, // 66: erda.dop.publishitem.PublishItemService.CreatePublishItemErase:output_type -> erda.dop.publishitem.PublicItemAddEraseResponse
	38, // 67: erda.dop.publishitem.PublishItemService.GetPublishItemErase:output_type -> erda.dop.publishitem.PublishItemUserListDataResponse
	12, // 68: erda.dop.publishitem.PublishItemService.ListPublishItemMonitorKeys:output_type -> erda.dop.publishitem.ListPublishItemMonitorKeysResponse
	2,  // 69: erda.dop.publishitem.PublishItemService.CreatePublishItem:output_type -> erda.dop.publishitem.CreatePublishItemResponse
	14, // 70: erda.dop.publishitem.PublishItemService.DeletePublishItem:output_type -> erda.dop.publishitem.DeletePublishItemResponse
	26, // 71: erda.dop.publishitem.PublishItemService.GetPublishItem:output_type -> erda.dop.publishitem.GetPublishItemResponse
	24, // 72: erda.dop.publishitem.PublishItemService.GetPublishItemH5PackageName:output_type -> erda.dop.publishitem.GetPublishItemH5PackageNameResponse
	43, // 73: erda.dop.publishitem.PublishItemService.QueryPublishItem:output_type -> erda.dop.publishitem.QueryPublishItemResponse
	48, // 74: erda.dop.publishitem.PublishItemService.UpdatePublishItem:output_type -> erda.dop.publishitem.UpdatePublishItemResponse
	4,  // 75: erda.dop.publishitem.PublishItemService.CreatePublishItemVersion:output_type -> erda.dop.publishitem.CreatePublishItemVersionResponse
	46, // 76: erda.dop.publishitem.PublishItemService.GetPublicPublishItemVersion:output_type -> erda.dop.publishitem.QueryPublishItemVersionResponse
	46, // 77: erda.dop.publishitem.PublishItemService.QueryPublishItemVersion:output_type -> erda.dop.publishitem.QueryPublishItemVersionResponse
	57, // 78: erda.dop.publishitem.PublishItemService.SetPublishItemVersionStatus:output_type -> google.protobuf.Empty
	57, // 79: erda.dop.publishitem.PublishItemService.UpdatePublishItemVersion:output_type -> google.protobuf.Empty
	43, // 80: erda.dop.publishitem.PublishItemService.QueryMyPublishItem:output_type -> erda.dop.publishitem.QueryPublishItemResponse
	63, // [63:81] is the sub-list for method output_type
	45, // [45:63] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_publishitem_proto_init() }
func file_publishitem_proto_init() {
	if File_publishitem_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_publishitem_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBranchRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublishItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublishItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublishItemVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublishItemVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublishItemVersionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUpdateDeleteReleaseRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePublishItemBlackListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishItemBlackListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublishItemEraseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishItemEraseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPublishItemMonitorKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPublishItemMonitorKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePublishItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishItemLatestVersionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishItemLatestVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishItemLatestVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H5VersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublishItemOfflineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublishItemOfflineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePublishItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributePublishItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishItemH5PackageNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishItemH5PackageNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublishItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicPublishItemVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPublishItemVersionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicItemAddEraseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicItemAddEraseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemAddBlacklistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemDeleteBlacklistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemDistributionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemDistributionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemUserListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemUserlistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemUserListDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemUserListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishItemVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPublishItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPublishItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPublishItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPublishItemVersionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPublishItemVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPublishItemVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePublishItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePublishItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePublishItemVersionStatesRequset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publishitem_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_publishitem_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_publishitem_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_publishitem_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_publishitem_proto_msgTypes[34].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_publishitem_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_publishitem_proto_goTypes,
		DependencyIndexes: file_publishitem_proto_depIdxs,
		MessageInfos:      file_publishitem_proto_msgTypes,
	}.Build()
	File_publishitem_proto = out.File
	file_publishitem_proto_rawDesc = nil
	file_publishitem_proto_goTypes = nil
	file_publishitem_proto_depIdxs = nil
}
