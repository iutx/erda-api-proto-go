// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: publishitem.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// PublishItemServiceHandler is the server API for PublishItemService service.
type PublishItemServiceHandler interface {
	// POST /api/publish-items/{publishItemID}/blacklist
	CreatePublishItemBlackList(context.Context, *PublishItemUserlistRequest) (*PublishItemAddBlacklistResponse, error)
	// DELETE /api/publish-items/{publishItemId}/blacklist/{blacklistId}
	DeletePublishItemBlackList(context.Context, *DeletePublishItemBlackListRequest) (*PublishItemDeleteBlacklistResponse, error)
	// GET /api/publish-items/{publishItemId}/blacklist
	GetPublishItemBlackList(context.Context, *GetPublishItemBlackListRequest) (*PublishItemUserListDataResponse, error)
	// POST /api/publish-items/{publishItemId}/erase
	CreatePublishItemErase(context.Context, *CreatePublishItemEraseRequest) (*PublicItemAddEraseResponse, error)
	// GET /api/publish-items/{publishItemId}/erase
	GetPublishItemErase(context.Context, *GetPublishItemEraseRequest) (*PublishItemUserListDataResponse, error)
	// GET /api/publish-items/{publishItemId}/list-monitor-keys
	ListPublishItemMonitorKeys(context.Context, *ListPublishItemMonitorKeysRequest) (*ListPublishItemMonitorKeysResponse, error)
	// POST /api/publish-items
	CreatePublishItem(context.Context, *CreatePublishItemRequest) (*CreatePublishItemResponse, error)
	// DELETE /api/publish-items/{publishItemId}
	DeletePublishItem(context.Context, *DeletePublishItemRequest) (*DeletePublishItemResponse, error)
	// GET /api/publish-items/{id}
	GetPublishItem(context.Context, *GetPublishItemRequest) (*GetPublishItemResponse, error)
	// GET /api/publish-items/{publishItemId}/versions/actions/get-h5-packagename
	GetPublishItemH5PackageName(context.Context, *GetPublishItemH5PackageNameRequest) (*GetPublishItemH5PackageNameResponse, error)
	// GET /api/publish-items
	QueryPublishItem(context.Context, *QueryPublishItemRequest) (*QueryPublishItemResponse, error)
	// PUT /api/publish-items/{publishItemId}
	UpdatePublishItem(context.Context, *UpdatePublishItemRequest) (*UpdatePublishItemResponse, error)
	// POST /api/publish-items/{publishItemID}/versions
	CreatePublishItemVersion(context.Context, *CreatePublishItemVersionRequest) (*CreatePublishItemVersionResponse, error)
	// GET /api/publish-items/{publishItemId}/versions/actions/public-version
	GetPublicPublishItemVersion(context.Context, *GetPublicPublishItemVersionRequest) (*QueryPublishItemVersionResponse, error)
	// GET /api/publish-items/{publishItemId}/versions
	QueryPublishItemVersion(context.Context, *QueryPublishItemVersionRequest) (*QueryPublishItemVersionResponse, error)
	// POST /api/publish-items/{publishItemId}/versions/{versionID}/actions/{action}
	SetPublishItemVersionStatus(context.Context, *SetPublishItemVersionStatusRequest) (*emptypb.Empty, error)
	// POST /api/publish-items/versions/actions/{action}
	UpdatePublishItemVersion(context.Context, *UpdatePublishItemVersionStatesRequset) (*emptypb.Empty, error)
	// GET /api/my-publish-items
	QueryMyPublishItem(context.Context, *QueryPublishItemRequest) (*QueryPublishItemResponse, error)
}

// RegisterPublishItemServiceHandler register PublishItemServiceHandler to http.Router.
func RegisterPublishItemServiceHandler(r http.Router, srv PublishItemServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_CreatePublishItemBlackList := func(method, path string, fn func(context.Context, *PublishItemUserlistRequest) (*PublishItemAddBlacklistResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*PublishItemUserlistRequest))
		}
		var CreatePublishItemBlackList_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreatePublishItemBlackList_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "CreatePublishItemBlackList", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreatePublishItemBlackList_info)
				}
				r = r.WithContext(ctx)
				var in PublishItemUserlistRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "publishItemID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PublishItemID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DeletePublishItemBlackList := func(method, path string, fn func(context.Context, *DeletePublishItemBlackListRequest) (*PublishItemDeleteBlacklistResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DeletePublishItemBlackListRequest))
		}
		var DeletePublishItemBlackList_info transport.ServiceInfo
		if h.Interceptor != nil {
			DeletePublishItemBlackList_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "DeletePublishItemBlackList", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DeletePublishItemBlackList_info)
				}
				r = r.WithContext(ctx)
				var in DeletePublishItemBlackListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "publishItemId":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PublishItemId = val
						case "blacklistId":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.BlacklistId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetPublishItemBlackList := func(method, path string, fn func(context.Context, *GetPublishItemBlackListRequest) (*PublishItemUserListDataResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetPublishItemBlackListRequest))
		}
		var GetPublishItemBlackList_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetPublishItemBlackList_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "GetPublishItemBlackList", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetPublishItemBlackList_info)
				}
				r = r.WithContext(ctx)
				var in GetPublishItemBlackListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "publishItemId":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PublishItemId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreatePublishItemErase := func(method, path string, fn func(context.Context, *CreatePublishItemEraseRequest) (*PublicItemAddEraseResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreatePublishItemEraseRequest))
		}
		var CreatePublishItemErase_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreatePublishItemErase_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "CreatePublishItemErase", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreatePublishItemErase_info)
				}
				r = r.WithContext(ctx)
				var in CreatePublishItemEraseRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "publishItemId":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PublishItemId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetPublishItemErase := func(method, path string, fn func(context.Context, *GetPublishItemEraseRequest) (*PublishItemUserListDataResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetPublishItemEraseRequest))
		}
		var GetPublishItemErase_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetPublishItemErase_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "GetPublishItemErase", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetPublishItemErase_info)
				}
				r = r.WithContext(ctx)
				var in GetPublishItemEraseRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "publishItemId":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PublishItemId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ListPublishItemMonitorKeys := func(method, path string, fn func(context.Context, *ListPublishItemMonitorKeysRequest) (*ListPublishItemMonitorKeysResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ListPublishItemMonitorKeysRequest))
		}
		var ListPublishItemMonitorKeys_info transport.ServiceInfo
		if h.Interceptor != nil {
			ListPublishItemMonitorKeys_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "ListPublishItemMonitorKeys", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ListPublishItemMonitorKeys_info)
				}
				r = r.WithContext(ctx)
				var in ListPublishItemMonitorKeysRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "publishItemId":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PublishItemId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreatePublishItem := func(method, path string, fn func(context.Context, *CreatePublishItemRequest) (*CreatePublishItemResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreatePublishItemRequest))
		}
		var CreatePublishItem_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreatePublishItem_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "CreatePublishItem", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreatePublishItem_info)
				}
				r = r.WithContext(ctx)
				var in CreatePublishItemRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DeletePublishItem := func(method, path string, fn func(context.Context, *DeletePublishItemRequest) (*DeletePublishItemResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DeletePublishItemRequest))
		}
		var DeletePublishItem_info transport.ServiceInfo
		if h.Interceptor != nil {
			DeletePublishItem_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "DeletePublishItem", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DeletePublishItem_info)
				}
				r = r.WithContext(ctx)
				var in DeletePublishItemRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "publishItemId":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PublishItemId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetPublishItem := func(method, path string, fn func(context.Context, *GetPublishItemRequest) (*GetPublishItemResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetPublishItemRequest))
		}
		var GetPublishItem_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetPublishItem_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "GetPublishItem", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetPublishItem_info)
				}
				r = r.WithContext(ctx)
				var in GetPublishItemRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetPublishItemH5PackageName := func(method, path string, fn func(context.Context, *GetPublishItemH5PackageNameRequest) (*GetPublishItemH5PackageNameResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetPublishItemH5PackageNameRequest))
		}
		var GetPublishItemH5PackageName_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetPublishItemH5PackageName_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "GetPublishItemH5PackageName", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetPublishItemH5PackageName_info)
				}
				r = r.WithContext(ctx)
				var in GetPublishItemH5PackageNameRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "publishItemId":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PublishItemId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_QueryPublishItem := func(method, path string, fn func(context.Context, *QueryPublishItemRequest) (*QueryPublishItemResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*QueryPublishItemRequest))
		}
		var QueryPublishItem_info transport.ServiceInfo
		if h.Interceptor != nil {
			QueryPublishItem_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "QueryPublishItem", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, QueryPublishItem_info)
				}
				r = r.WithContext(ctx)
				var in QueryPublishItemRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UpdatePublishItem := func(method, path string, fn func(context.Context, *UpdatePublishItemRequest) (*UpdatePublishItemResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*UpdatePublishItemRequest))
		}
		var UpdatePublishItem_info transport.ServiceInfo
		if h.Interceptor != nil {
			UpdatePublishItem_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "UpdatePublishItem", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UpdatePublishItem_info)
				}
				r = r.WithContext(ctx)
				var in UpdatePublishItemRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "publishItemId":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PublishItemId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreatePublishItemVersion := func(method, path string, fn func(context.Context, *CreatePublishItemVersionRequest) (*CreatePublishItemVersionResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreatePublishItemVersionRequest))
		}
		var CreatePublishItemVersion_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreatePublishItemVersion_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "CreatePublishItemVersion", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreatePublishItemVersion_info)
				}
				r = r.WithContext(ctx)
				var in CreatePublishItemVersionRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "publishItemID":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PublishItemID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetPublicPublishItemVersion := func(method, path string, fn func(context.Context, *GetPublicPublishItemVersionRequest) (*QueryPublishItemVersionResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GetPublicPublishItemVersionRequest))
		}
		var GetPublicPublishItemVersion_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetPublicPublishItemVersion_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "GetPublicPublishItemVersion", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetPublicPublishItemVersion_info)
				}
				r = r.WithContext(ctx)
				var in GetPublicPublishItemVersionRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "publishItemId":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PublishItemId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_QueryPublishItemVersion := func(method, path string, fn func(context.Context, *QueryPublishItemVersionRequest) (*QueryPublishItemVersionResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*QueryPublishItemVersionRequest))
		}
		var QueryPublishItemVersion_info transport.ServiceInfo
		if h.Interceptor != nil {
			QueryPublishItemVersion_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "QueryPublishItemVersion", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, QueryPublishItemVersion_info)
				}
				r = r.WithContext(ctx)
				var in QueryPublishItemVersionRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "publishItemId":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PublishItemId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SetPublishItemVersionStatus := func(method, path string, fn func(context.Context, *SetPublishItemVersionStatusRequest) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SetPublishItemVersionStatusRequest))
		}
		var SetPublishItemVersionStatus_info transport.ServiceInfo
		if h.Interceptor != nil {
			SetPublishItemVersionStatus_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "SetPublishItemVersionStatus", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SetPublishItemVersionStatus_info)
				}
				r = r.WithContext(ctx)
				var in SetPublishItemVersionStatusRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "publishItemId":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.PublishItemId = val
						case "versionID":
							val, err := strconv.ParseInt(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.VersionID = val
						case "action":
							in.Action = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UpdatePublishItemVersion := func(method, path string, fn func(context.Context, *UpdatePublishItemVersionStatesRequset) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*UpdatePublishItemVersionStatesRequset))
		}
		var UpdatePublishItemVersion_info transport.ServiceInfo
		if h.Interceptor != nil {
			UpdatePublishItemVersion_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "UpdatePublishItemVersion", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UpdatePublishItemVersion_info)
				}
				r = r.WithContext(ctx)
				var in UpdatePublishItemVersionStatesRequset
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "action":
							in.Action = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_QueryMyPublishItem := func(method, path string, fn func(context.Context, *QueryPublishItemRequest) (*QueryPublishItemResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*QueryPublishItemRequest))
		}
		var QueryMyPublishItem_info transport.ServiceInfo
		if h.Interceptor != nil {
			QueryMyPublishItem_info = transport.NewServiceInfo("erda.dop.publishitem.PublishItemService", "QueryMyPublishItem", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, QueryMyPublishItem_info)
				}
				r = r.WithContext(ctx)
				var in QueryPublishItemRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreatePublishItemBlackList("POST", "/api/publish-items/{publishItemID}/blacklist", srv.CreatePublishItemBlackList)
	add_DeletePublishItemBlackList("DELETE", "/api/publish-items/{publishItemId}/blacklist/{blacklistId}", srv.DeletePublishItemBlackList)
	add_GetPublishItemBlackList("GET", "/api/publish-items/{publishItemId}/blacklist", srv.GetPublishItemBlackList)
	add_CreatePublishItemErase("POST", "/api/publish-items/{publishItemId}/erase", srv.CreatePublishItemErase)
	add_GetPublishItemErase("GET", "/api/publish-items/{publishItemId}/erase", srv.GetPublishItemErase)
	add_ListPublishItemMonitorKeys("GET", "/api/publish-items/{publishItemId}/list-monitor-keys", srv.ListPublishItemMonitorKeys)
	add_CreatePublishItem("POST", "/api/publish-items", srv.CreatePublishItem)
	add_DeletePublishItem("DELETE", "/api/publish-items/{publishItemId}", srv.DeletePublishItem)
	add_GetPublishItem("GET", "/api/publish-items/{id}", srv.GetPublishItem)
	add_GetPublishItemH5PackageName("GET", "/api/publish-items/{publishItemId}/versions/actions/get-h5-packagename", srv.GetPublishItemH5PackageName)
	add_QueryPublishItem("GET", "/api/publish-items", srv.QueryPublishItem)
	add_UpdatePublishItem("PUT", "/api/publish-items/{publishItemId}", srv.UpdatePublishItem)
	add_CreatePublishItemVersion("POST", "/api/publish-items/{publishItemID}/versions", srv.CreatePublishItemVersion)
	add_GetPublicPublishItemVersion("GET", "/api/publish-items/{publishItemId}/versions/actions/public-version", srv.GetPublicPublishItemVersion)
	add_QueryPublishItemVersion("GET", "/api/publish-items/{publishItemId}/versions", srv.QueryPublishItemVersion)
	add_SetPublishItemVersionStatus("POST", "/api/publish-items/{publishItemId}/versions/{versionID}/actions/{action}", srv.SetPublishItemVersionStatus)
	add_UpdatePublishItemVersion("POST", "/api/publish-items/versions/actions/{action}", srv.UpdatePublishItemVersion)
	add_QueryMyPublishItem("GET", "/api/my-publish-items", srv.QueryMyPublishItem)
}
