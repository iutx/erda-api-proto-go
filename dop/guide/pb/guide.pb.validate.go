// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: guide.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListGuideRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGuideRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGuideRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGuideRequestMultiError, or nil if none found.
func (m *ListGuideRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGuideRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKind()) < 1 {
		err := ListGuideRequestValidationError{
			field:  "Kind",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProjectID() <= 0 {
		err := ListGuideRequestValidationError{
			field:  "ProjectID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListGuideRequestMultiError(errors)
	}

	return nil
}

// ListGuideRequestMultiError is an error wrapping multiple validation errors
// returned by ListGuideRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGuideRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGuideRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGuideRequestMultiError) AllErrors() []error { return m }

// ListGuideRequestValidationError is the validation error returned by
// ListGuideRequest.Validate if the designated constraints aren't met.
type ListGuideRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGuideRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGuideRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGuideRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGuideRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGuideRequestValidationError) ErrorName() string { return "ListGuideRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListGuideRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGuideRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGuideRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGuideRequestValidationError{}

// Validate checks the field values on ListGuideResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGuideResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGuideResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGuideResponseMultiError, or nil if none found.
func (m *ListGuideResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGuideResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGuideResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGuideResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGuideResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGuideResponseMultiError(errors)
	}

	return nil
}

// ListGuideResponseMultiError is an error wrapping multiple validation errors
// returned by ListGuideResponse.ValidateAll() if the designated constraints
// aren't met.
type ListGuideResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGuideResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGuideResponseMultiError) AllErrors() []error { return m }

// ListGuideResponseValidationError is the validation error returned by
// ListGuideResponse.Validate if the designated constraints aren't met.
type ListGuideResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGuideResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGuideResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGuideResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGuideResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGuideResponseValidationError) ErrorName() string {
	return "ListGuideResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGuideResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGuideResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGuideResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGuideResponseValidationError{}

// Validate checks the field values on Guide with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Guide) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Guide with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GuideMultiError, or nil if none found.
func (m *Guide) ValidateAll() error {
	return m.validate(true)
}

func (m *Guide) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Status

	// no validation rules for Creator

	// no validation rules for Kind

	// no validation rules for OrgID

	// no validation rules for OrgName

	// no validation rules for ProjectID

	// no validation rules for AppID

	// no validation rules for Branch

	// no validation rules for AppName

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GuideValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GuideValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuideValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GuideValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GuideValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuideValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	if len(errors) > 0 {
		return GuideMultiError(errors)
	}

	return nil
}

// GuideMultiError is an error wrapping multiple validation errors returned by
// Guide.ValidateAll() if the designated constraints aren't met.
type GuideMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GuideMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GuideMultiError) AllErrors() []error { return m }

// GuideValidationError is the validation error returned by Guide.Validate if
// the designated constraints aren't met.
type GuideValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuideValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuideValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuideValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuideValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuideValidationError) ErrorName() string { return "GuideValidationError" }

// Error satisfies the builtin error interface
func (e GuideValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuide.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuideValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuideValidationError{}

// Validate checks the field values on GittarPushPayloadEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GittarPushPayloadEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GittarPushPayloadEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GittarPushPayloadEventMultiError, or nil if none found.
func (m *GittarPushPayloadEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *GittarPushPayloadEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Event

	// no validation rules for Action

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ApplicationID

	// no validation rules for Env

	// no validation rules for TimeStamp

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GittarPushPayloadEventValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GittarPushPayloadEventValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GittarPushPayloadEventValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GittarPushPayloadEventMultiError(errors)
	}

	return nil
}

// GittarPushPayloadEventMultiError is an error wrapping multiple validation
// errors returned by GittarPushPayloadEvent.ValidateAll() if the designated
// constraints aren't met.
type GittarPushPayloadEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GittarPushPayloadEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GittarPushPayloadEventMultiError) AllErrors() []error { return m }

// GittarPushPayloadEventValidationError is the validation error returned by
// GittarPushPayloadEvent.Validate if the designated constraints aren't met.
type GittarPushPayloadEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GittarPushPayloadEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GittarPushPayloadEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GittarPushPayloadEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GittarPushPayloadEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GittarPushPayloadEventValidationError) ErrorName() string {
	return "GittarPushPayloadEventValidationError"
}

// Error satisfies the builtin error interface
func (e GittarPushPayloadEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGittarPushPayloadEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GittarPushPayloadEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GittarPushPayloadEventValidationError{}

// Validate checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Content) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContentMultiError, or nil if none found.
func (m *Content) ValidateAll() error {
	return m.validate(true)
}

func (m *Content) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ref

	// no validation rules for After

	// no validation rules for Before

	if all {
		switch v := interface{}(m.GetPusher()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Pusher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Pusher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPusher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContentValidationError{
				field:  "Pusher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContentMultiError(errors)
	}

	return nil
}

// ContentMultiError is an error wrapping multiple validation errors returned
// by Content.ValidateAll() if the designated constraints aren't met.
type ContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentMultiError) AllErrors() []error { return m }

// ContentValidationError is the validation error returned by Content.Validate
// if the designated constraints aren't met.
type ContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentValidationError) ErrorName() string { return "ContentValidationError" }

// Error satisfies the builtin error interface
func (e ContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentValidationError{}

// Validate checks the field values on Pusher with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pusher) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pusher with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PusherMultiError, or nil if none found.
func (m *Pusher) ValidateAll() error {
	return m.validate(true)
}

func (m *Pusher) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for NickName

	// no validation rules for Email

	if len(errors) > 0 {
		return PusherMultiError(errors)
	}

	return nil
}

// PusherMultiError is an error wrapping multiple validation errors returned by
// Pusher.ValidateAll() if the designated constraints aren't met.
type PusherMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PusherMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PusherMultiError) AllErrors() []error { return m }

// PusherValidationError is the validation error returned by Pusher.Validate if
// the designated constraints aren't met.
type PusherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PusherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PusherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PusherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PusherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PusherValidationError) ErrorName() string { return "PusherValidationError" }

// Error satisfies the builtin error interface
func (e PusherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPusher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PusherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PusherValidationError{}

// Validate checks the field values on CreateGuideResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGuideResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGuideResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGuideResponseMultiError, or nil if none found.
func (m *CreateGuideResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGuideResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGuideResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGuideResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGuideResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGuideResponseMultiError(errors)
	}

	return nil
}

// CreateGuideResponseMultiError is an error wrapping multiple validation
// errors returned by CreateGuideResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateGuideResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGuideResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGuideResponseMultiError) AllErrors() []error { return m }

// CreateGuideResponseValidationError is the validation error returned by
// CreateGuideResponse.Validate if the designated constraints aren't met.
type CreateGuideResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGuideResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGuideResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGuideResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGuideResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGuideResponseValidationError) ErrorName() string {
	return "CreateGuideResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGuideResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGuideResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGuideResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGuideResponseValidationError{}

// Validate checks the field values on ProcessGuideRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessGuideRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessGuideRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessGuideRequestMultiError, or nil if none found.
func (m *ProcessGuideRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessGuideRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for Branch

	if utf8.RuneCountInString(m.GetKind()) < 1 {
		err := ProcessGuideRequestValidationError{
			field:  "Kind",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProcessGuideRequestMultiError(errors)
	}

	return nil
}

// ProcessGuideRequestMultiError is an error wrapping multiple validation
// errors returned by ProcessGuideRequest.ValidateAll() if the designated
// constraints aren't met.
type ProcessGuideRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessGuideRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessGuideRequestMultiError) AllErrors() []error { return m }

// ProcessGuideRequestValidationError is the validation error returned by
// ProcessGuideRequest.Validate if the designated constraints aren't met.
type ProcessGuideRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessGuideRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessGuideRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessGuideRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessGuideRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessGuideRequestValidationError) ErrorName() string {
	return "ProcessGuideRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessGuideRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessGuideRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessGuideRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessGuideRequestValidationError{}

// Validate checks the field values on ProcessGuideResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessGuideResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessGuideResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessGuideResponseMultiError, or nil if none found.
func (m *ProcessGuideResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessGuideResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProcessGuideResponseMultiError(errors)
	}

	return nil
}

// ProcessGuideResponseMultiError is an error wrapping multiple validation
// errors returned by ProcessGuideResponse.ValidateAll() if the designated
// constraints aren't met.
type ProcessGuideResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessGuideResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessGuideResponseMultiError) AllErrors() []error { return m }

// ProcessGuideResponseValidationError is the validation error returned by
// ProcessGuideResponse.Validate if the designated constraints aren't met.
type ProcessGuideResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessGuideResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessGuideResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessGuideResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessGuideResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessGuideResponseValidationError) ErrorName() string {
	return "ProcessGuideResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessGuideResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessGuideResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessGuideResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessGuideResponseValidationError{}

// Validate checks the field values on DeleteGuideResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGuideResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGuideResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGuideResponseMultiError, or nil if none found.
func (m *DeleteGuideResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGuideResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGuideResponseMultiError(errors)
	}

	return nil
}

// DeleteGuideResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteGuideResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteGuideResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGuideResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGuideResponseMultiError) AllErrors() []error { return m }

// DeleteGuideResponseValidationError is the validation error returned by
// DeleteGuideResponse.Validate if the designated constraints aren't met.
type DeleteGuideResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGuideResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGuideResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGuideResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGuideResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGuideResponseValidationError) ErrorName() string {
	return "DeleteGuideResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGuideResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGuideResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGuideResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGuideResponseValidationError{}

// Validate checks the field values on CancelGuideRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelGuideRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelGuideRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelGuideRequestMultiError, or nil if none found.
func (m *CancelGuideRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelGuideRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetID()) < 1 {
		err := CancelGuideRequestValidationError{
			field:  "ID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelGuideRequestMultiError(errors)
	}

	return nil
}

// CancelGuideRequestMultiError is an error wrapping multiple validation errors
// returned by CancelGuideRequest.ValidateAll() if the designated constraints
// aren't met.
type CancelGuideRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelGuideRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelGuideRequestMultiError) AllErrors() []error { return m }

// CancelGuideRequestValidationError is the validation error returned by
// CancelGuideRequest.Validate if the designated constraints aren't met.
type CancelGuideRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelGuideRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelGuideRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelGuideRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelGuideRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelGuideRequestValidationError) ErrorName() string {
	return "CancelGuideRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelGuideRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelGuideRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelGuideRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelGuideRequestValidationError{}

// Validate checks the field values on CancelGuideResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelGuideResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelGuideResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelGuideResponseMultiError, or nil if none found.
func (m *CancelGuideResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelGuideResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelGuideResponseMultiError(errors)
	}

	return nil
}

// CancelGuideResponseMultiError is an error wrapping multiple validation
// errors returned by CancelGuideResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelGuideResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelGuideResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelGuideResponseMultiError) AllErrors() []error { return m }

// CancelGuideResponseValidationError is the validation error returned by
// CancelGuideResponse.Validate if the designated constraints aren't met.
type CancelGuideResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelGuideResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelGuideResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelGuideResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelGuideResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelGuideResponseValidationError) ErrorName() string {
	return "CancelGuideResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelGuideResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelGuideResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelGuideResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelGuideResponseValidationError{}
