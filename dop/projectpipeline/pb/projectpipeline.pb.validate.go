// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: projectpipeline.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PipelineRunParam with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineRunParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRunParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineRunParamMultiError, or nil if none found.
func (m *PipelineRunParam) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRunParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineRunParamValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineRunParamValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineRunParamValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineRunParamMultiError(errors)
	}

	return nil
}

// PipelineRunParamMultiError is an error wrapping multiple validation errors
// returned by PipelineRunParam.ValidateAll() if the designated constraints
// aren't met.
type PipelineRunParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRunParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRunParamMultiError) AllErrors() []error { return m }

// PipelineRunParamValidationError is the validation error returned by
// PipelineRunParam.Validate if the designated constraints aren't met.
type PipelineRunParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRunParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRunParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRunParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRunParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRunParamValidationError) ErrorName() string { return "PipelineRunParamValidationError" }

// Error satisfies the builtin error interface
func (e PipelineRunParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRunParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRunParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRunParamValidationError{}

// Validate checks the field values on RunProjectPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunProjectPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunProjectPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunProjectPipelineRequestMultiError, or nil if none found.
func (m *RunProjectPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunProjectPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineDefinitionID

	// no validation rules for ProjectID

	for idx, item := range m.GetRunParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunProjectPipelineRequestValidationError{
						field:  fmt.Sprintf("RunParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunProjectPipelineRequestValidationError{
						field:  fmt.Sprintf("RunParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunProjectPipelineRequestValidationError{
					field:  fmt.Sprintf("RunParams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RunProjectPipelineRequestMultiError(errors)
	}

	return nil
}

// RunProjectPipelineRequestMultiError is an error wrapping multiple validation
// errors returned by RunProjectPipelineRequest.ValidateAll() if the
// designated constraints aren't met.
type RunProjectPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunProjectPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunProjectPipelineRequestMultiError) AllErrors() []error { return m }

// RunProjectPipelineRequestValidationError is the validation error returned by
// RunProjectPipelineRequest.Validate if the designated constraints aren't met.
type RunProjectPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunProjectPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunProjectPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunProjectPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunProjectPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunProjectPipelineRequestValidationError) ErrorName() string {
	return "RunProjectPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunProjectPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunProjectPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunProjectPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunProjectPipelineRequestValidationError{}

// Validate checks the field values on RunProjectPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunProjectPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunProjectPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunProjectPipelineResponseMultiError, or nil if none found.
func (m *RunProjectPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunProjectPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunProjectPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunProjectPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunProjectPipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RunProjectPipelineResponseMultiError(errors)
	}

	return nil
}

// RunProjectPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by RunProjectPipelineResponse.ValidateAll() if
// the designated constraints aren't met.
type RunProjectPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunProjectPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunProjectPipelineResponseMultiError) AllErrors() []error { return m }

// RunProjectPipelineResponseValidationError is the validation error returned
// by RunProjectPipelineResponse.Validate if the designated constraints aren't met.
type RunProjectPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunProjectPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunProjectPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunProjectPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunProjectPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunProjectPipelineResponseValidationError) ErrorName() string {
	return "RunProjectPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunProjectPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunProjectPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunProjectPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunProjectPipelineResponseValidationError{}

// Validate checks the field values on RerunProjectPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RerunProjectPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RerunProjectPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RerunProjectPipelineRequestMultiError, or nil if none found.
func (m *RerunProjectPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RerunProjectPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineDefinitionID

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return RerunProjectPipelineRequestMultiError(errors)
	}

	return nil
}

// RerunProjectPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by RerunProjectPipelineRequest.ValidateAll() if
// the designated constraints aren't met.
type RerunProjectPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RerunProjectPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RerunProjectPipelineRequestMultiError) AllErrors() []error { return m }

// RerunProjectPipelineRequestValidationError is the validation error returned
// by RerunProjectPipelineRequest.Validate if the designated constraints
// aren't met.
type RerunProjectPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RerunProjectPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RerunProjectPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RerunProjectPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RerunProjectPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RerunProjectPipelineRequestValidationError) ErrorName() string {
	return "RerunProjectPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RerunProjectPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRerunProjectPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RerunProjectPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RerunProjectPipelineRequestValidationError{}

// Validate checks the field values on RerunProjectPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RerunProjectPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RerunProjectPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RerunProjectPipelineResponseMultiError, or nil if none found.
func (m *RerunProjectPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RerunProjectPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RerunProjectPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RerunProjectPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RerunProjectPipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RerunProjectPipelineResponseMultiError(errors)
	}

	return nil
}

// RerunProjectPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by RerunProjectPipelineResponse.ValidateAll() if
// the designated constraints aren't met.
type RerunProjectPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RerunProjectPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RerunProjectPipelineResponseMultiError) AllErrors() []error { return m }

// RerunProjectPipelineResponseValidationError is the validation error returned
// by RerunProjectPipelineResponse.Validate if the designated constraints
// aren't met.
type RerunProjectPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RerunProjectPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RerunProjectPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RerunProjectPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RerunProjectPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RerunProjectPipelineResponseValidationError) ErrorName() string {
	return "RerunProjectPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RerunProjectPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRerunProjectPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RerunProjectPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RerunProjectPipelineResponseValidationError{}

// Validate checks the field values on RerunFailedProjectPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RerunFailedProjectPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RerunFailedProjectPipelineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RerunFailedProjectPipelineRequestMultiError, or nil if none found.
func (m *RerunFailedProjectPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RerunFailedProjectPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineDefinitionID

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return RerunFailedProjectPipelineRequestMultiError(errors)
	}

	return nil
}

// RerunFailedProjectPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by
// RerunFailedProjectPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type RerunFailedProjectPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RerunFailedProjectPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RerunFailedProjectPipelineRequestMultiError) AllErrors() []error { return m }

// RerunFailedProjectPipelineRequestValidationError is the validation error
// returned by RerunFailedProjectPipelineRequest.Validate if the designated
// constraints aren't met.
type RerunFailedProjectPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RerunFailedProjectPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RerunFailedProjectPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RerunFailedProjectPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RerunFailedProjectPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RerunFailedProjectPipelineRequestValidationError) ErrorName() string {
	return "RerunFailedProjectPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RerunFailedProjectPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRerunFailedProjectPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RerunFailedProjectPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RerunFailedProjectPipelineRequestValidationError{}

// Validate checks the field values on RerunFailedProjectPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RerunFailedProjectPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RerunFailedProjectPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RerunFailedProjectPipelineResponseMultiError, or nil if none found.
func (m *RerunFailedProjectPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RerunFailedProjectPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RerunFailedProjectPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RerunFailedProjectPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RerunFailedProjectPipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RerunFailedProjectPipelineResponseMultiError(errors)
	}

	return nil
}

// RerunFailedProjectPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// RerunFailedProjectPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type RerunFailedProjectPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RerunFailedProjectPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RerunFailedProjectPipelineResponseMultiError) AllErrors() []error { return m }

// RerunFailedProjectPipelineResponseValidationError is the validation error
// returned by RerunFailedProjectPipelineResponse.Validate if the designated
// constraints aren't met.
type RerunFailedProjectPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RerunFailedProjectPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RerunFailedProjectPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RerunFailedProjectPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RerunFailedProjectPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RerunFailedProjectPipelineResponseValidationError) ErrorName() string {
	return "RerunFailedProjectPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RerunFailedProjectPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRerunFailedProjectPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RerunFailedProjectPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RerunFailedProjectPipelineResponseValidationError{}

// Validate checks the field values on CancelProjectPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelProjectPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelProjectPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelProjectPipelineRequestMultiError, or nil if none found.
func (m *CancelProjectPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelProjectPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineDefinitionID

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return CancelProjectPipelineRequestMultiError(errors)
	}

	return nil
}

// CancelProjectPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by CancelProjectPipelineRequest.ValidateAll() if
// the designated constraints aren't met.
type CancelProjectPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelProjectPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelProjectPipelineRequestMultiError) AllErrors() []error { return m }

// CancelProjectPipelineRequestValidationError is the validation error returned
// by CancelProjectPipelineRequest.Validate if the designated constraints
// aren't met.
type CancelProjectPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelProjectPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelProjectPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelProjectPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelProjectPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelProjectPipelineRequestValidationError) ErrorName() string {
	return "CancelProjectPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelProjectPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelProjectPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelProjectPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelProjectPipelineRequestValidationError{}

// Validate checks the field values on CancelProjectPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelProjectPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelProjectPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CancelProjectPipelineResponseMultiError, or nil if none found.
func (m *CancelProjectPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelProjectPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelProjectPipelineResponseMultiError(errors)
	}

	return nil
}

// CancelProjectPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by CancelProjectPipelineResponse.ValidateAll()
// if the designated constraints aren't met.
type CancelProjectPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelProjectPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelProjectPipelineResponseMultiError) AllErrors() []error { return m }

// CancelProjectPipelineResponseValidationError is the validation error
// returned by CancelProjectPipelineResponse.Validate if the designated
// constraints aren't met.
type CancelProjectPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelProjectPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelProjectPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelProjectPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelProjectPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelProjectPipelineResponseValidationError) ErrorName() string {
	return "CancelProjectPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelProjectPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelProjectPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelProjectPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelProjectPipelineResponseValidationError{}

// Validate checks the field values on
// CreateProjectPipelineSourcePreCheckRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateProjectPipelineSourcePreCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateProjectPipelineSourcePreCheckRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateProjectPipelineSourcePreCheckRequestMultiError, or nil if none found.
func (m *CreateProjectPipelineSourcePreCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectPipelineSourcePreCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppID() <= 0 {
		err := CreateProjectPipelineSourcePreCheckRequestValidationError{
			field:  "AppID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSourceType()) < 1 {
		err := CreateProjectPipelineSourcePreCheckRequestValidationError{
			field:  "SourceType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRef()) < 1 {
		err := CreateProjectPipelineSourcePreCheckRequestValidationError{
			field:  "Ref",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Path

	if utf8.RuneCountInString(m.GetFileName()) < 1 {
		err := CreateProjectPipelineSourcePreCheckRequestValidationError{
			field:  "FileName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateProjectPipelineSourcePreCheckRequestMultiError(errors)
	}

	return nil
}

// CreateProjectPipelineSourcePreCheckRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateProjectPipelineSourcePreCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectPipelineSourcePreCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectPipelineSourcePreCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectPipelineSourcePreCheckRequestMultiError) AllErrors() []error { return m }

// CreateProjectPipelineSourcePreCheckRequestValidationError is the validation
// error returned by CreateProjectPipelineSourcePreCheckRequest.Validate if
// the designated constraints aren't met.
type CreateProjectPipelineSourcePreCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectPipelineSourcePreCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectPipelineSourcePreCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectPipelineSourcePreCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectPipelineSourcePreCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectPipelineSourcePreCheckRequestValidationError) ErrorName() string {
	return "CreateProjectPipelineSourcePreCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectPipelineSourcePreCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectPipelineSourcePreCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectPipelineSourcePreCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectPipelineSourcePreCheckRequestValidationError{}

// Validate checks the field values on
// CreateProjectPipelineSourcePreCheckResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateProjectPipelineSourcePreCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateProjectPipelineSourcePreCheckResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateProjectPipelineSourcePreCheckResponseMultiError, or nil if none found.
func (m *CreateProjectPipelineSourcePreCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectPipelineSourcePreCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pass

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateProjectPipelineSourcePreCheckResponseMultiError(errors)
	}

	return nil
}

// CreateProjectPipelineSourcePreCheckResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateProjectPipelineSourcePreCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectPipelineSourcePreCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectPipelineSourcePreCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectPipelineSourcePreCheckResponseMultiError) AllErrors() []error { return m }

// CreateProjectPipelineSourcePreCheckResponseValidationError is the validation
// error returned by CreateProjectPipelineSourcePreCheckResponse.Validate if
// the designated constraints aren't met.
type CreateProjectPipelineSourcePreCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectPipelineSourcePreCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectPipelineSourcePreCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectPipelineSourcePreCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectPipelineSourcePreCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectPipelineSourcePreCheckResponseValidationError) ErrorName() string {
	return "CreateProjectPipelineSourcePreCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectPipelineSourcePreCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectPipelineSourcePreCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectPipelineSourcePreCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectPipelineSourcePreCheckResponseValidationError{}

// Validate checks the field values on CreateProjectPipelineNamePreCheckRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateProjectPipelineNamePreCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateProjectPipelineNamePreCheckRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateProjectPipelineNamePreCheckRequestMultiError, or nil if none found.
func (m *CreateProjectPipelineNamePreCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectPipelineNamePreCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectID() <= 0 {
		err := CreateProjectPipelineNamePreCheckRequestValidationError{
			field:  "ProjectID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateProjectPipelineNamePreCheckRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateProjectPipelineNamePreCheckRequestMultiError(errors)
	}

	return nil
}

// CreateProjectPipelineNamePreCheckRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateProjectPipelineNamePreCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectPipelineNamePreCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectPipelineNamePreCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectPipelineNamePreCheckRequestMultiError) AllErrors() []error { return m }

// CreateProjectPipelineNamePreCheckRequestValidationError is the validation
// error returned by CreateProjectPipelineNamePreCheckRequest.Validate if the
// designated constraints aren't met.
type CreateProjectPipelineNamePreCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectPipelineNamePreCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectPipelineNamePreCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectPipelineNamePreCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectPipelineNamePreCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectPipelineNamePreCheckRequestValidationError) ErrorName() string {
	return "CreateProjectPipelineNamePreCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectPipelineNamePreCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectPipelineNamePreCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectPipelineNamePreCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectPipelineNamePreCheckRequestValidationError{}

// Validate checks the field values on
// CreateProjectPipelineNamePreCheckResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateProjectPipelineNamePreCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateProjectPipelineNamePreCheckResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateProjectPipelineNamePreCheckResponseMultiError, or nil if none found.
func (m *CreateProjectPipelineNamePreCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectPipelineNamePreCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pass

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateProjectPipelineNamePreCheckResponseMultiError(errors)
	}

	return nil
}

// CreateProjectPipelineNamePreCheckResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateProjectPipelineNamePreCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectPipelineNamePreCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectPipelineNamePreCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectPipelineNamePreCheckResponseMultiError) AllErrors() []error { return m }

// CreateProjectPipelineNamePreCheckResponseValidationError is the validation
// error returned by CreateProjectPipelineNamePreCheckResponse.Validate if the
// designated constraints aren't met.
type CreateProjectPipelineNamePreCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectPipelineNamePreCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectPipelineNamePreCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectPipelineNamePreCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectPipelineNamePreCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectPipelineNamePreCheckResponseValidationError) ErrorName() string {
	return "CreateProjectPipelineNamePreCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectPipelineNamePreCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectPipelineNamePreCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectPipelineNamePreCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectPipelineNamePreCheckResponseValidationError{}

// Validate checks the field values on ListAppPipelineYmlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAppPipelineYmlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppPipelineYmlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAppPipelineYmlRequestMultiError, or nil if none found.
func (m *ListAppPipelineYmlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppPipelineYmlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for Branch

	if len(errors) > 0 {
		return ListAppPipelineYmlRequestMultiError(errors)
	}

	return nil
}

// ListAppPipelineYmlRequestMultiError is an error wrapping multiple validation
// errors returned by ListAppPipelineYmlRequest.ValidateAll() if the
// designated constraints aren't met.
type ListAppPipelineYmlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppPipelineYmlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppPipelineYmlRequestMultiError) AllErrors() []error { return m }

// ListAppPipelineYmlRequestValidationError is the validation error returned by
// ListAppPipelineYmlRequest.Validate if the designated constraints aren't met.
type ListAppPipelineYmlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppPipelineYmlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppPipelineYmlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppPipelineYmlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppPipelineYmlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppPipelineYmlRequestValidationError) ErrorName() string {
	return "ListAppPipelineYmlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppPipelineYmlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppPipelineYmlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppPipelineYmlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppPipelineYmlRequestValidationError{}

// Validate checks the field values on PipelineYmlList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineYmlList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineYmlList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineYmlListMultiError, or nil if none found.
func (m *PipelineYmlList) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineYmlList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for YmlName

	// no validation rules for YmlPath

	if len(errors) > 0 {
		return PipelineYmlListMultiError(errors)
	}

	return nil
}

// PipelineYmlListMultiError is an error wrapping multiple validation errors
// returned by PipelineYmlList.ValidateAll() if the designated constraints
// aren't met.
type PipelineYmlListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineYmlListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineYmlListMultiError) AllErrors() []error { return m }

// PipelineYmlListValidationError is the validation error returned by
// PipelineYmlList.Validate if the designated constraints aren't met.
type PipelineYmlListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineYmlListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineYmlListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineYmlListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineYmlListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineYmlListValidationError) ErrorName() string { return "PipelineYmlListValidationError" }

// Error satisfies the builtin error interface
func (e PipelineYmlListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineYmlList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineYmlListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineYmlListValidationError{}

// Validate checks the field values on ListAppPipelineYmlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAppPipelineYmlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppPipelineYmlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAppPipelineYmlResponseMultiError, or nil if none found.
func (m *ListAppPipelineYmlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppPipelineYmlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAppPipelineYmlResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAppPipelineYmlResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppPipelineYmlResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAppPipelineYmlResponseMultiError(errors)
	}

	return nil
}

// ListAppPipelineYmlResponseMultiError is an error wrapping multiple
// validation errors returned by ListAppPipelineYmlResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAppPipelineYmlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppPipelineYmlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppPipelineYmlResponseMultiError) AllErrors() []error { return m }

// ListAppPipelineYmlResponseValidationError is the validation error returned
// by ListAppPipelineYmlResponse.Validate if the designated constraints aren't met.
type ListAppPipelineYmlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppPipelineYmlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppPipelineYmlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppPipelineYmlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppPipelineYmlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppPipelineYmlResponseValidationError) ErrorName() string {
	return "ListAppPipelineYmlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppPipelineYmlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppPipelineYmlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppPipelineYmlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppPipelineYmlResponseValidationError{}

// Validate checks the field values on ListAppRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAppRequestMultiError,
// or nil if none found.
func (m *ListAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectID() <= 0 {
		err := ListAppRequestValidationError{
			field:  "ProjectID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return ListAppRequestMultiError(errors)
	}

	return nil
}

// ListAppRequestMultiError is an error wrapping multiple validation errors
// returned by ListAppRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppRequestMultiError) AllErrors() []error { return m }

// ListAppRequestValidationError is the validation error returned by
// ListAppRequest.Validate if the designated constraints aren't met.
type ListAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppRequestValidationError) ErrorName() string { return "ListAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppRequestValidationError{}

// Validate checks the field values on ListAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAppResponseMultiError, or nil if none found.
func (m *ListAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAppResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAppResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAppResponseMultiError(errors)
	}

	return nil
}

// ListAppResponseMultiError is an error wrapping multiple validation errors
// returned by ListAppResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppResponseMultiError) AllErrors() []error { return m }

// ListAppResponseValidationError is the validation error returned by
// ListAppResponse.Validate if the designated constraints aren't met.
type ListAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppResponseValidationError) ErrorName() string { return "ListAppResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppResponseValidationError{}

// Validate checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Application) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApplicationMultiError, or
// nil if none found.
func (m *Application) ValidateAll() error {
	return m.validate(true)
}

func (m *Application) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Mode

	// no validation rules for Desc

	// no validation rules for Logo

	// no validation rules for IsPublic

	// no validation rules for Creator

	// no validation rules for GitRepo

	// no validation rules for OrgID

	// no validation rules for OrgDisplayName

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for IsExternalRepo

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RunningNum

	// no validation rules for FailedNum

	// no validation rules for TotalNum

	if len(errors) > 0 {
		return ApplicationMultiError(errors)
	}

	return nil
}

// ApplicationMultiError is an error wrapping multiple validation errors
// returned by Application.ValidateAll() if the designated constraints aren't met.
type ApplicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationMultiError) AllErrors() []error { return m }

// ApplicationValidationError is the validation error returned by
// Application.Validate if the designated constraints aren't met.
type ApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationValidationError) ErrorName() string { return "ApplicationValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationValidationError{}

// Validate checks the field values on CreateProjectPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectPipelineRequestMultiError, or nil if none found.
func (m *CreateProjectPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectID() <= 0 {
		err := CreateProjectPipelineRequestValidationError{
			field:  "ProjectID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateProjectPipelineRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AppID

	if utf8.RuneCountInString(m.GetSourceType()) < 1 {
		err := CreateProjectPipelineRequestValidationError{
			field:  "SourceType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRef()) < 1 {
		err := CreateProjectPipelineRequestValidationError{
			field:  "Ref",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Path

	if utf8.RuneCountInString(m.GetFileName()) < 1 {
		err := CreateProjectPipelineRequestValidationError{
			field:  "FileName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateProjectPipelineRequestMultiError(errors)
	}

	return nil
}

// CreateProjectPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProjectPipelineRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateProjectPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectPipelineRequestMultiError) AllErrors() []error { return m }

// CreateProjectPipelineRequestValidationError is the validation error returned
// by CreateProjectPipelineRequest.Validate if the designated constraints
// aren't met.
type CreateProjectPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectPipelineRequestValidationError) ErrorName() string {
	return "CreateProjectPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectPipelineRequestValidationError{}

// Validate checks the field values on CreateProjectPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateProjectPipelineResponseMultiError, or nil if none found.
func (m *CreateProjectPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProjectPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectPipelineResponseValidationError{
					field:  "ProjectPipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectPipelineResponseValidationError{
					field:  "ProjectPipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectPipelineResponseValidationError{
				field:  "ProjectPipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectPipelineResponseMultiError(errors)
	}

	return nil
}

// CreateProjectPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by CreateProjectPipelineResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateProjectPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectPipelineResponseMultiError) AllErrors() []error { return m }

// CreateProjectPipelineResponseValidationError is the validation error
// returned by CreateProjectPipelineResponse.Validate if the designated
// constraints aren't met.
type CreateProjectPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectPipelineResponseValidationError) ErrorName() string {
	return "CreateProjectPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectPipelineResponseValidationError{}

// Validate checks the field values on ProjectPipeline with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProjectPipeline) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectPipeline with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectPipelineMultiError, or nil if none found.
func (m *ProjectPipeline) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectPipeline) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Creator

	// no validation rules for Category

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectPipelineValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectPipelineValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectPipelineValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectPipelineValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectPipelineValidationError{
					field:  "TimeUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectPipelineValidationError{
				field:  "TimeUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SourceType

	// no validation rules for Remote

	// no validation rules for Ref

	// no validation rules for Path

	// no validation rules for FileName

	// no validation rules for PipelineSourceID

	if len(errors) > 0 {
		return ProjectPipelineMultiError(errors)
	}

	return nil
}

// ProjectPipelineMultiError is an error wrapping multiple validation errors
// returned by ProjectPipeline.ValidateAll() if the designated constraints
// aren't met.
type ProjectPipelineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectPipelineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectPipelineMultiError) AllErrors() []error { return m }

// ProjectPipelineValidationError is the validation error returned by
// ProjectPipeline.Validate if the designated constraints aren't met.
type ProjectPipelineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectPipelineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectPipelineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectPipelineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectPipelineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectPipelineValidationError) ErrorName() string { return "ProjectPipelineValidationError" }

// Error satisfies the builtin error interface
func (e ProjectPipelineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectPipeline.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectPipelineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectPipelineValidationError{}

// Validate checks the field values on ListPipelineCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipelineCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelineCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPipelineCategoryRequestMultiError, or nil if none found.
func (m *ListPipelineCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelineCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectID() <= 0 {
		err := ListPipelineCategoryRequestValidationError{
			field:  "ProjectID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AppID

	if len(errors) > 0 {
		return ListPipelineCategoryRequestMultiError(errors)
	}

	return nil
}

// ListPipelineCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by ListPipelineCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type ListPipelineCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelineCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelineCategoryRequestMultiError) AllErrors() []error { return m }

// ListPipelineCategoryRequestValidationError is the validation error returned
// by ListPipelineCategoryRequest.Validate if the designated constraints
// aren't met.
type ListPipelineCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelineCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelineCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelineCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelineCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelineCategoryRequestValidationError) ErrorName() string {
	return "ListPipelineCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelineCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelineCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelineCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelineCategoryRequestValidationError{}

// Validate checks the field values on ListPipelineCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipelineCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelineCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPipelineCategoryResponseMultiError, or nil if none found.
func (m *ListPipelineCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelineCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPipelineCategoryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPipelineCategoryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPipelineCategoryResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPipelineCategoryResponseMultiError(errors)
	}

	return nil
}

// ListPipelineCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by ListPipelineCategoryResponse.ValidateAll() if
// the designated constraints aren't met.
type ListPipelineCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelineCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelineCategoryResponseMultiError) AllErrors() []error { return m }

// ListPipelineCategoryResponseValidationError is the validation error returned
// by ListPipelineCategoryResponse.Validate if the designated constraints
// aren't met.
type ListPipelineCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelineCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelineCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelineCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelineCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelineCategoryResponseValidationError) ErrorName() string {
	return "ListPipelineCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelineCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelineCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelineCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelineCategoryResponseValidationError{}

// Validate checks the field values on PipelineCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineCategoryMultiError, or nil if none found.
func (m *PipelineCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Category

	// no validation rules for RunningNum

	// no validation rules for FailedNum

	// no validation rules for TotalNum

	if len(errors) > 0 {
		return PipelineCategoryMultiError(errors)
	}

	return nil
}

// PipelineCategoryMultiError is an error wrapping multiple validation errors
// returned by PipelineCategory.ValidateAll() if the designated constraints
// aren't met.
type PipelineCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineCategoryMultiError) AllErrors() []error { return m }

// PipelineCategoryValidationError is the validation error returned by
// PipelineCategory.Validate if the designated constraints aren't met.
type PipelineCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineCategoryValidationError) ErrorName() string { return "PipelineCategoryValidationError" }

// Error satisfies the builtin error interface
func (e PipelineCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineCategoryValidationError{}

// Validate checks the field values on UpdateProjectPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectPipelineRequestMultiError, or nil if none found.
func (m *UpdateProjectPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipelineDefinitionID()) < 1 {
		err := UpdateProjectPipelineRequestValidationError{
			field:  "PipelineDefinitionID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProjectID() <= 0 {
		err := UpdateProjectPipelineRequestValidationError{
			field:  "ProjectID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateProjectPipelineRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProjectPipelineSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectPipelineRequestValidationError{
					field:  "ProjectPipelineSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectPipelineRequestValidationError{
					field:  "ProjectPipelineSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectPipelineSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectPipelineRequestValidationError{
				field:  "ProjectPipelineSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectPipelineRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectPipelineRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProjectPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectPipelineRequestMultiError) AllErrors() []error { return m }

// UpdateProjectPipelineRequestValidationError is the validation error returned
// by UpdateProjectPipelineRequest.Validate if the designated constraints
// aren't met.
type UpdateProjectPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectPipelineRequestValidationError) ErrorName() string {
	return "UpdateProjectPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectPipelineRequestValidationError{}

// Validate checks the field values on UpdateProjectPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectPipelineResponseMultiError, or nil if none found.
func (m *UpdateProjectPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProjectPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectPipelineResponseValidationError{
					field:  "ProjectPipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectPipelineResponseValidationError{
					field:  "ProjectPipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectPipelineResponseValidationError{
				field:  "ProjectPipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectPipelineResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectPipelineResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateProjectPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectPipelineResponseMultiError) AllErrors() []error { return m }

// UpdateProjectPipelineResponseValidationError is the validation error
// returned by UpdateProjectPipelineResponse.Validate if the designated
// constraints aren't met.
type UpdateProjectPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectPipelineResponseValidationError) ErrorName() string {
	return "UpdateProjectPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectPipelineResponseValidationError{}

// Validate checks the field values on OneClickCreateProjectPipelineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *OneClickCreateProjectPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneClickCreateProjectPipelineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// OneClickCreateProjectPipelineRequestMultiError, or nil if none found.
func (m *OneClickCreateProjectPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OneClickCreateProjectPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectID() <= 0 {
		err := OneClickCreateProjectPipelineRequestValidationError{
			field:  "ProjectID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AppID

	if utf8.RuneCountInString(m.GetSourceType()) < 1 {
		err := OneClickCreateProjectPipelineRequestValidationError{
			field:  "SourceType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRef()) < 1 {
		err := OneClickCreateProjectPipelineRequestValidationError{
			field:  "Ref",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OneClickCreateProjectPipelineRequestMultiError(errors)
	}

	return nil
}

// OneClickCreateProjectPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by
// OneClickCreateProjectPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type OneClickCreateProjectPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneClickCreateProjectPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneClickCreateProjectPipelineRequestMultiError) AllErrors() []error { return m }

// OneClickCreateProjectPipelineRequestValidationError is the validation error
// returned by OneClickCreateProjectPipelineRequest.Validate if the designated
// constraints aren't met.
type OneClickCreateProjectPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneClickCreateProjectPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneClickCreateProjectPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneClickCreateProjectPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneClickCreateProjectPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneClickCreateProjectPipelineRequestValidationError) ErrorName() string {
	return "OneClickCreateProjectPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OneClickCreateProjectPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneClickCreateProjectPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneClickCreateProjectPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneClickCreateProjectPipelineRequestValidationError{}

// Validate checks the field values on OneClickCreateProjectPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *OneClickCreateProjectPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneClickCreateProjectPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// OneClickCreateProjectPipelineResponseMultiError, or nil if none found.
func (m *OneClickCreateProjectPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OneClickCreateProjectPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProjectPipelines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OneClickCreateProjectPipelineResponseValidationError{
						field:  fmt.Sprintf("ProjectPipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OneClickCreateProjectPipelineResponseValidationError{
						field:  fmt.Sprintf("ProjectPipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OneClickCreateProjectPipelineResponseValidationError{
					field:  fmt.Sprintf("ProjectPipelines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ErrMsg

	if len(errors) > 0 {
		return OneClickCreateProjectPipelineResponseMultiError(errors)
	}

	return nil
}

// OneClickCreateProjectPipelineResponseMultiError is an error wrapping
// multiple validation errors returned by
// OneClickCreateProjectPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type OneClickCreateProjectPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneClickCreateProjectPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneClickCreateProjectPipelineResponseMultiError) AllErrors() []error { return m }

// OneClickCreateProjectPipelineResponseValidationError is the validation error
// returned by OneClickCreateProjectPipelineResponse.Validate if the
// designated constraints aren't met.
type OneClickCreateProjectPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneClickCreateProjectPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneClickCreateProjectPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneClickCreateProjectPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneClickCreateProjectPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneClickCreateProjectPipelineResponseValidationError) ErrorName() string {
	return "OneClickCreateProjectPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OneClickCreateProjectPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneClickCreateProjectPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneClickCreateProjectPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneClickCreateProjectPipelineResponseValidationError{}

// Validate checks the field values on ProjectPipelineSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectPipelineSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectPipelineSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectPipelineSourceMultiError, or nil if none found.
func (m *ProjectPipelineSource) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectPipelineSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppID() <= 0 {
		err := ProjectPipelineSourceValidationError{
			field:  "AppID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSourceType()) < 1 {
		err := ProjectPipelineSourceValidationError{
			field:  "SourceType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRef()) < 1 {
		err := ProjectPipelineSourceValidationError{
			field:  "Ref",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Path

	if utf8.RuneCountInString(m.GetFileName()) < 1 {
		err := ProjectPipelineSourceValidationError{
			field:  "FileName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectPipelineSourceMultiError(errors)
	}

	return nil
}

// ProjectPipelineSourceMultiError is an error wrapping multiple validation
// errors returned by ProjectPipelineSource.ValidateAll() if the designated
// constraints aren't met.
type ProjectPipelineSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectPipelineSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectPipelineSourceMultiError) AllErrors() []error { return m }

// ProjectPipelineSourceValidationError is the validation error returned by
// ProjectPipelineSource.Validate if the designated constraints aren't met.
type ProjectPipelineSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectPipelineSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectPipelineSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectPipelineSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectPipelineSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectPipelineSourceValidationError) ErrorName() string {
	return "ProjectPipelineSourceValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectPipelineSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectPipelineSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectPipelineSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectPipelineSourceValidationError{}

// Validate checks the field values on GittarPushPayloadEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GittarPushPayloadEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GittarPushPayloadEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GittarPushPayloadEventMultiError, or nil if none found.
func (m *GittarPushPayloadEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *GittarPushPayloadEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Event

	// no validation rules for Action

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ApplicationID

	// no validation rules for Env

	// no validation rules for TimeStamp

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GittarPushPayloadEventValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GittarPushPayloadEventValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GittarPushPayloadEventValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GittarPushPayloadEventMultiError(errors)
	}

	return nil
}

// GittarPushPayloadEventMultiError is an error wrapping multiple validation
// errors returned by GittarPushPayloadEvent.ValidateAll() if the designated
// constraints aren't met.
type GittarPushPayloadEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GittarPushPayloadEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GittarPushPayloadEventMultiError) AllErrors() []error { return m }

// GittarPushPayloadEventValidationError is the validation error returned by
// GittarPushPayloadEvent.Validate if the designated constraints aren't met.
type GittarPushPayloadEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GittarPushPayloadEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GittarPushPayloadEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GittarPushPayloadEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GittarPushPayloadEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GittarPushPayloadEventValidationError) ErrorName() string {
	return "GittarPushPayloadEventValidationError"
}

// Error satisfies the builtin error interface
func (e GittarPushPayloadEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGittarPushPayloadEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GittarPushPayloadEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GittarPushPayloadEventValidationError{}

// Validate checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Content) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContentMultiError, or nil if none found.
func (m *Content) ValidateAll() error {
	return m.validate(true)
}

func (m *Content) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ref

	// no validation rules for After

	// no validation rules for Before

	if all {
		switch v := interface{}(m.GetPusher()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Pusher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContentValidationError{
					field:  "Pusher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPusher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContentValidationError{
				field:  "Pusher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContentMultiError(errors)
	}

	return nil
}

// ContentMultiError is an error wrapping multiple validation errors returned
// by Content.ValidateAll() if the designated constraints aren't met.
type ContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentMultiError) AllErrors() []error { return m }

// ContentValidationError is the validation error returned by Content.Validate
// if the designated constraints aren't met.
type ContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentValidationError) ErrorName() string { return "ContentValidationError" }

// Error satisfies the builtin error interface
func (e ContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentValidationError{}

// Validate checks the field values on Pusher with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pusher) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pusher with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PusherMultiError, or nil if none found.
func (m *Pusher) ValidateAll() error {
	return m.validate(true)
}

func (m *Pusher) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for NickName

	// no validation rules for Email

	if len(errors) > 0 {
		return PusherMultiError(errors)
	}

	return nil
}

// PusherMultiError is an error wrapping multiple validation errors returned by
// Pusher.ValidateAll() if the designated constraints aren't met.
type PusherMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PusherMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PusherMultiError) AllErrors() []error { return m }

// PusherValidationError is the validation error returned by Pusher.Validate if
// the designated constraints aren't met.
type PusherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PusherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PusherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PusherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PusherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PusherValidationError) ErrorName() string { return "PusherValidationError" }

// Error satisfies the builtin error interface
func (e PusherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPusher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PusherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PusherValidationError{}

// Validate checks the field values on BatchCreateProjectPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchCreateProjectPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateProjectPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchCreateProjectPipelineResponseMultiError, or nil if none found.
func (m *BatchCreateProjectPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateProjectPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchCreateProjectPipelineResponseMultiError(errors)
	}

	return nil
}

// BatchCreateProjectPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// BatchCreateProjectPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateProjectPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateProjectPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateProjectPipelineResponseMultiError) AllErrors() []error { return m }

// BatchCreateProjectPipelineResponseValidationError is the validation error
// returned by BatchCreateProjectPipelineResponse.Validate if the designated
// constraints aren't met.
type BatchCreateProjectPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateProjectPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateProjectPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateProjectPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateProjectPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateProjectPipelineResponseValidationError) ErrorName() string {
	return "BatchCreateProjectPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateProjectPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateProjectPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateProjectPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateProjectPipelineResponseValidationError{}

// Validate checks the field values on ListPipelineExecHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipelineExecHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelineExecHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPipelineExecHistoryRequestMultiError, or nil if none found.
func (m *ListPipelineExecHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelineExecHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for PageNo

	// no validation rules for PageSize

	if all {
		switch v := interface{}(m.GetStartTimeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPipelineExecHistoryRequestValidationError{
					field:  "StartTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPipelineExecHistoryRequestValidationError{
					field:  "StartTimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTimeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPipelineExecHistoryRequestValidationError{
				field:  "StartTimeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartTimeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPipelineExecHistoryRequestValidationError{
					field:  "StartTimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPipelineExecHistoryRequestValidationError{
					field:  "StartTimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTimeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPipelineExecHistoryRequestValidationError{
				field:  "StartTimeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProjectID

	// no validation rules for DefinitionID

	if len(errors) > 0 {
		return ListPipelineExecHistoryRequestMultiError(errors)
	}

	return nil
}

// ListPipelineExecHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by ListPipelineExecHistoryRequest.ValidateAll()
// if the designated constraints aren't met.
type ListPipelineExecHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelineExecHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelineExecHistoryRequestMultiError) AllErrors() []error { return m }

// ListPipelineExecHistoryRequestValidationError is the validation error
// returned by ListPipelineExecHistoryRequest.Validate if the designated
// constraints aren't met.
type ListPipelineExecHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelineExecHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelineExecHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelineExecHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelineExecHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelineExecHistoryRequestValidationError) ErrorName() string {
	return "ListPipelineExecHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelineExecHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelineExecHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelineExecHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelineExecHistoryRequestValidationError{}

// Validate checks the field values on ListPipelineExecHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipelineExecHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelineExecHistoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPipelineExecHistoryResponseMultiError, or nil if none found.
func (m *ListPipelineExecHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelineExecHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for CurrentPageSize

	for idx, item := range m.GetExecHistories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPipelineExecHistoryResponseValidationError{
						field:  fmt.Sprintf("ExecHistories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPipelineExecHistoryResponseValidationError{
						field:  fmt.Sprintf("ExecHistories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPipelineExecHistoryResponseValidationError{
					field:  fmt.Sprintf("ExecHistories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPipelineExecHistoryResponseMultiError(errors)
	}

	return nil
}

// ListPipelineExecHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by ListPipelineExecHistoryResponse.ValidateAll()
// if the designated constraints aren't met.
type ListPipelineExecHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelineExecHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelineExecHistoryResponseMultiError) AllErrors() []error { return m }

// ListPipelineExecHistoryResponseValidationError is the validation error
// returned by ListPipelineExecHistoryResponse.Validate if the designated
// constraints aren't met.
type ListPipelineExecHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelineExecHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelineExecHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelineExecHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelineExecHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelineExecHistoryResponseValidationError) ErrorName() string {
	return "ListPipelineExecHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelineExecHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelineExecHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelineExecHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelineExecHistoryResponseValidationError{}

// Validate checks the field values on PipelineExecHistory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineExecHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineExecHistory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineExecHistoryMultiError, or nil if none found.
func (m *PipelineExecHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineExecHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineName

	// no validation rules for PipelineStatus

	// no validation rules for CostTimeSec

	// no validation rules for AppName

	// no validation rules for Branch

	// no validation rules for Executor

	if all {
		switch v := interface{}(m.GetTimeBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineExecHistoryValidationError{
					field:  "TimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineExecHistoryValidationError{
					field:  "TimeBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineExecHistoryValidationError{
				field:  "TimeBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PipelineID

	// no validation rules for Owner

	// no validation rules for TriggerMode

	if len(errors) > 0 {
		return PipelineExecHistoryMultiError(errors)
	}

	return nil
}

// PipelineExecHistoryMultiError is an error wrapping multiple validation
// errors returned by PipelineExecHistory.ValidateAll() if the designated
// constraints aren't met.
type PipelineExecHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineExecHistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineExecHistoryMultiError) AllErrors() []error { return m }

// PipelineExecHistoryValidationError is the validation error returned by
// PipelineExecHistory.Validate if the designated constraints aren't met.
type PipelineExecHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineExecHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineExecHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineExecHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineExecHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineExecHistoryValidationError) ErrorName() string {
	return "PipelineExecHistoryValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineExecHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineExecHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineExecHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineExecHistoryValidationError{}

// Validate checks the field values on DeleteByAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteByAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteByAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteByAppRequestMultiError, or nil if none found.
func (m *DeleteByAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteByAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	if len(errors) > 0 {
		return DeleteByAppRequestMultiError(errors)
	}

	return nil
}

// DeleteByAppRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteByAppRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteByAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteByAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteByAppRequestMultiError) AllErrors() []error { return m }

// DeleteByAppRequestValidationError is the validation error returned by
// DeleteByAppRequest.Validate if the designated constraints aren't met.
type DeleteByAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteByAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteByAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteByAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteByAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteByAppRequestValidationError) ErrorName() string {
	return "DeleteByAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteByAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteByAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteByAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteByAppRequestValidationError{}

// Validate checks the field values on DeleteByAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteByAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteByAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteByAppResponseMultiError, or nil if none found.
func (m *DeleteByAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteByAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteByAppResponseMultiError(errors)
	}

	return nil
}

// DeleteByAppResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteByAppResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteByAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteByAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteByAppResponseMultiError) AllErrors() []error { return m }

// DeleteByAppResponseValidationError is the validation error returned by
// DeleteByAppResponse.Validate if the designated constraints aren't met.
type DeleteByAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteByAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteByAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteByAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteByAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteByAppResponseValidationError) ErrorName() string {
	return "DeleteByAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteByAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteByAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteByAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteByAppResponseValidationError{}
