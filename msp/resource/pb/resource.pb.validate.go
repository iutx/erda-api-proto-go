// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resource.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateResourceRequestMultiError, or nil if none found.
func (m *CreateResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEngine()) < 1 {
		err := CreateResourceRequestValidationError{
			field:  "Engine",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := CreateResourceRequestValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Plan

	if utf8.RuneCountInString(m.GetAz()) < 1 {
		err := CreateResourceRequestValidationError{
			field:  "Az",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Options

	// no validation rules for Callback

	if len(errors) > 0 {
		return CreateResourceRequestMultiError(errors)
	}

	return nil
}

// CreateResourceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResourceRequestMultiError) AllErrors() []error { return m }

// CreateResourceRequestValidationError is the validation error returned by
// CreateResourceRequest.Validate if the designated constraints aren't met.
type CreateResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResourceRequestValidationError) ErrorName() string {
	return "CreateResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResourceRequestValidationError{}

// Validate checks the field values on CreateResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateResourceResponseMultiError, or nil if none found.
func (m *CreateResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateResourceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateResourceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateResourceResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateResourceResponseMultiError(errors)
	}

	return nil
}

// CreateResourceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResourceResponseMultiError) AllErrors() []error { return m }

// CreateResourceResponseValidationError is the validation error returned by
// CreateResourceResponse.Validate if the designated constraints aren't met.
type CreateResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResourceResponseValidationError) ErrorName() string {
	return "CreateResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResourceResponseValidationError{}

// Validate checks the field values on ResourceCreateResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceCreateResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceCreateResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceCreateResultMultiError, or nil if none found.
func (m *ResourceCreateResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceCreateResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Config

	// no validation rules for Label

	// no validation rules for CreatedAt

	// no validation rules for UpdateAt

	// no validation rules for Status

	if len(errors) > 0 {
		return ResourceCreateResultMultiError(errors)
	}

	return nil
}

// ResourceCreateResultMultiError is an error wrapping multiple validation
// errors returned by ResourceCreateResult.ValidateAll() if the designated
// constraints aren't met.
type ResourceCreateResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceCreateResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceCreateResultMultiError) AllErrors() []error { return m }

// ResourceCreateResultValidationError is the validation error returned by
// ResourceCreateResult.Validate if the designated constraints aren't met.
type ResourceCreateResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceCreateResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceCreateResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceCreateResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceCreateResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceCreateResultValidationError) ErrorName() string {
	return "ResourceCreateResultValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceCreateResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceCreateResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceCreateResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceCreateResultValidationError{}

// Validate checks the field values on DeleteResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteResourceRequestMultiError, or nil if none found.
func (m *DeleteResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEngine()) < 1 {
		err := DeleteResourceRequestValidationError{
			field:  "Engine",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteResourceRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteResourceRequestMultiError(errors)
	}

	return nil
}

// DeleteResourceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceRequestMultiError) AllErrors() []error { return m }

// DeleteResourceRequestValidationError is the validation error returned by
// DeleteResourceRequest.Validate if the designated constraints aren't met.
type DeleteResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceRequestValidationError) ErrorName() string {
	return "DeleteResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceRequestValidationError{}

// Validate checks the field values on DeleteResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteResourceResponseMultiError, or nil if none found.
func (m *DeleteResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteResourceResponseMultiError(errors)
	}

	return nil
}

// DeleteResourceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceResponseMultiError) AllErrors() []error { return m }

// DeleteResourceResponseValidationError is the validation error returned by
// DeleteResourceResponse.Validate if the designated constraints aren't met.
type DeleteResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceResponseValidationError) ErrorName() string {
	return "DeleteResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceResponseValidationError{}

// Validate checks the field values on GetMonitorRuntimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMonitorRuntimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonitorRuntimeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMonitorRuntimeRequestMultiError, or nil if none found.
func (m *GetMonitorRuntimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonitorRuntimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TerminusKey

	// no validation rules for ApplicationId

	// no validation rules for RuntimeName

	// no validation rules for RuntimeId

	if len(errors) > 0 {
		return GetMonitorRuntimeRequestMultiError(errors)
	}

	return nil
}

// GetMonitorRuntimeRequestMultiError is an error wrapping multiple validation
// errors returned by GetMonitorRuntimeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMonitorRuntimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonitorRuntimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonitorRuntimeRequestMultiError) AllErrors() []error { return m }

// GetMonitorRuntimeRequestValidationError is the validation error returned by
// GetMonitorRuntimeRequest.Validate if the designated constraints aren't met.
type GetMonitorRuntimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonitorRuntimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonitorRuntimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonitorRuntimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonitorRuntimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonitorRuntimeRequestValidationError) ErrorName() string {
	return "GetMonitorRuntimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonitorRuntimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonitorRuntimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonitorRuntimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonitorRuntimeRequestValidationError{}

// Validate checks the field values on GetMonitorRuntimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMonitorRuntimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonitorRuntimeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMonitorRuntimeResponseMultiError, or nil if none found.
func (m *GetMonitorRuntimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonitorRuntimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMonitorRuntimeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMonitorRuntimeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMonitorRuntimeResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMonitorRuntimeResponseMultiError(errors)
	}

	return nil
}

// GetMonitorRuntimeResponseMultiError is an error wrapping multiple validation
// errors returned by GetMonitorRuntimeResponse.ValidateAll() if the
// designated constraints aren't met.
type GetMonitorRuntimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonitorRuntimeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonitorRuntimeResponseMultiError) AllErrors() []error { return m }

// GetMonitorRuntimeResponseValidationError is the validation error returned by
// GetMonitorRuntimeResponse.Validate if the designated constraints aren't met.
type GetMonitorRuntimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonitorRuntimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonitorRuntimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonitorRuntimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonitorRuntimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonitorRuntimeResponseValidationError) ErrorName() string {
	return "GetMonitorRuntimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonitorRuntimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonitorRuntimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonitorRuntimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonitorRuntimeResponseValidationError{}

// Validate checks the field values on MonitorRuntime with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MonitorRuntime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonitorRuntime with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MonitorRuntimeMultiError,
// or nil if none found.
func (m *MonitorRuntime) ValidateAll() error {
	return m.validate(true)
}

func (m *MonitorRuntime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TerminusKey

	// no validation rules for ProjectId

	// no validation rules for ProjectName

	// no validation rules for ApplicationId

	// no validation rules for ApplicationName

	// no validation rules for Workspace

	// no validation rules for RuntimeId

	// no validation rules for RuntimeName

	if len(errors) > 0 {
		return MonitorRuntimeMultiError(errors)
	}

	return nil
}

// MonitorRuntimeMultiError is an error wrapping multiple validation errors
// returned by MonitorRuntime.ValidateAll() if the designated constraints
// aren't met.
type MonitorRuntimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonitorRuntimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonitorRuntimeMultiError) AllErrors() []error { return m }

// MonitorRuntimeValidationError is the validation error returned by
// MonitorRuntime.Validate if the designated constraints aren't met.
type MonitorRuntimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonitorRuntimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonitorRuntimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonitorRuntimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonitorRuntimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonitorRuntimeValidationError) ErrorName() string { return "MonitorRuntimeValidationError" }

// Error satisfies the builtin error interface
func (e MonitorRuntimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonitorRuntime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonitorRuntimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonitorRuntimeValidationError{}

// Validate checks the field values on GetMonitorInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMonitorInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonitorInstanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMonitorInstanceRequestMultiError, or nil if none found.
func (m *GetMonitorInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonitorInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTerminusKey()) < 1 {
		err := GetMonitorInstanceRequestValidationError{
			field:  "TerminusKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMonitorInstanceRequestMultiError(errors)
	}

	return nil
}

// GetMonitorInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetMonitorInstanceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetMonitorInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonitorInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonitorInstanceRequestMultiError) AllErrors() []error { return m }

// GetMonitorInstanceRequestValidationError is the validation error returned by
// GetMonitorInstanceRequest.Validate if the designated constraints aren't met.
type GetMonitorInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonitorInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonitorInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonitorInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonitorInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonitorInstanceRequestValidationError) ErrorName() string {
	return "GetMonitorInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonitorInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonitorInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonitorInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonitorInstanceRequestValidationError{}

// Validate checks the field values on GetMonitorInstanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMonitorInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonitorInstanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMonitorInstanceResponseMultiError, or nil if none found.
func (m *GetMonitorInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonitorInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMonitorInstanceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMonitorInstanceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMonitorInstanceResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMonitorInstanceResponseMultiError(errors)
	}

	return nil
}

// GetMonitorInstanceResponseMultiError is an error wrapping multiple
// validation errors returned by GetMonitorInstanceResponse.ValidateAll() if
// the designated constraints aren't met.
type GetMonitorInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonitorInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonitorInstanceResponseMultiError) AllErrors() []error { return m }

// GetMonitorInstanceResponseValidationError is the validation error returned
// by GetMonitorInstanceResponse.Validate if the designated constraints aren't met.
type GetMonitorInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonitorInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonitorInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonitorInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonitorInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonitorInstanceResponseValidationError) ErrorName() string {
	return "GetMonitorInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonitorInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonitorInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonitorInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonitorInstanceResponseValidationError{}

// Validate checks the field values on MonitorInstance with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MonitorInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonitorInstance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MonitorInstanceMultiError, or nil if none found.
func (m *MonitorInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *MonitorInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MonitorId

	// no validation rules for MonitorName

	// no validation rules for TerminusKey

	// no validation rules for ProjectId

	// no validation rules for ProjectName

	// no validation rules for Workspace

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return MonitorInstanceMultiError(errors)
	}

	return nil
}

// MonitorInstanceMultiError is an error wrapping multiple validation errors
// returned by MonitorInstance.ValidateAll() if the designated constraints
// aren't met.
type MonitorInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonitorInstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonitorInstanceMultiError) AllErrors() []error { return m }

// MonitorInstanceValidationError is the validation error returned by
// MonitorInstance.Validate if the designated constraints aren't met.
type MonitorInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonitorInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonitorInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonitorInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonitorInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonitorInstanceValidationError) ErrorName() string { return "MonitorInstanceValidationError" }

// Error satisfies the builtin error interface
func (e MonitorInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonitorInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonitorInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonitorInstanceValidationError{}
