// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tenant.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantRequestMultiError, or nil if none found.
func (m *CreateTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProjectID()) < 1 {
		err := CreateTenantRequestValidationError{
			field:  "ProjectID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTenantType()) < 1 {
		err := CreateTenantRequestValidationError{
			field:  "TenantType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetWorkspaces() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := CreateTenantRequestValidationError{
				field:  fmt.Sprintf("Workspaces[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateTenantRequestMultiError(errors)
	}

	return nil
}

// CreateTenantRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantRequestMultiError) AllErrors() []error { return m }

// CreateTenantRequestValidationError is the validation error returned by
// CreateTenantRequest.Validate if the designated constraints aren't met.
type CreateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantRequestValidationError) ErrorName() string {
	return "CreateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantRequestValidationError{}

// Validate checks the field values on CreateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantResponseMultiError, or nil if none found.
func (m *CreateTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTenantResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTenantResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTenantResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateTenantResponseMultiError(errors)
	}

	return nil
}

// CreateTenantResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantResponseMultiError) AllErrors() []error { return m }

// CreateTenantResponseValidationError is the validation error returned by
// CreateTenantResponse.Validate if the designated constraints aren't met.
type CreateTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantResponseValidationError) ErrorName() string {
	return "CreateTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantResponseValidationError{}

// Validate checks the field values on GetTenantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantRequestMultiError, or nil if none found.
func (m *GetTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProjectID()) < 1 {
		err := GetTenantRequestValidationError{
			field:  "ProjectID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTenantType()) < 1 {
		err := GetTenantRequestValidationError{
			field:  "TenantType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkspace()) < 1 {
		err := GetTenantRequestValidationError{
			field:  "Workspace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTenantRequestMultiError(errors)
	}

	return nil
}

// GetTenantRequestMultiError is an error wrapping multiple validation errors
// returned by GetTenantRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantRequestMultiError) AllErrors() []error { return m }

// GetTenantRequestValidationError is the validation error returned by
// GetTenantRequest.Validate if the designated constraints aren't met.
type GetTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantRequestValidationError) ErrorName() string { return "GetTenantRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantRequestValidationError{}

// Validate checks the field values on GetTenantResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantResponseMultiError, or nil if none found.
func (m *GetTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTenantResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTenantResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTenantResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTenantResponseMultiError(errors)
	}

	return nil
}

// GetTenantResponseMultiError is an error wrapping multiple validation errors
// returned by GetTenantResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantResponseMultiError) AllErrors() []error { return m }

// GetTenantResponseValidationError is the validation error returned by
// GetTenantResponse.Validate if the designated constraints aren't met.
type GetTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantResponseValidationError) ErrorName() string {
	return "GetTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantResponseValidationError{}

// Validate checks the field values on DeleteTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTenantRequestMultiError, or nil if none found.
func (m *DeleteTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProjectID()) < 1 {
		err := DeleteTenantRequestValidationError{
			field:  "ProjectID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTenantType()) < 1 {
		err := DeleteTenantRequestValidationError{
			field:  "TenantType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkspace()) < 1 {
		err := DeleteTenantRequestValidationError{
			field:  "Workspace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTenantRequestMultiError(errors)
	}

	return nil
}

// DeleteTenantRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTenantRequestMultiError) AllErrors() []error { return m }

// DeleteTenantRequestValidationError is the validation error returned by
// DeleteTenantRequest.Validate if the designated constraints aren't met.
type DeleteTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantRequestValidationError) ErrorName() string {
	return "DeleteTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantRequestValidationError{}

// Validate checks the field values on DeleteTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTenantResponseMultiError, or nil if none found.
func (m *DeleteTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteTenantResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteTenantResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTenantResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteTenantResponseMultiError(errors)
	}

	return nil
}

// DeleteTenantResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTenantResponseMultiError) AllErrors() []error { return m }

// DeleteTenantResponseValidationError is the validation error returned by
// DeleteTenantResponse.Validate if the designated constraints aren't met.
type DeleteTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantResponseValidationError) ErrorName() string {
	return "DeleteTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantResponseValidationError{}

// Validate checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tenant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TenantMultiError, or nil if none found.
func (m *Tenant) ValidateAll() error {
	return m.validate(true)
}

func (m *Tenant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for ProjectID

	// no validation rules for Workspace

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return TenantMultiError(errors)
	}

	return nil
}

// TenantMultiError is an error wrapping multiple validation errors returned by
// Tenant.ValidateAll() if the designated constraints aren't met.
type TenantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantMultiError) AllErrors() []error { return m }

// TenantValidationError is the validation error returned by Tenant.Validate if
// the designated constraints aren't met.
type TenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantValidationError) ErrorName() string { return "TenantValidationError" }

// Error satisfies the builtin error interface
func (e TenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantValidationError{}

// Validate checks the field values on GetTenantProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantProjectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantProjectRequestMultiError, or nil if none found.
func (m *GetTenantProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return GetTenantProjectRequestMultiError(errors)
	}

	return nil
}

// GetTenantProjectRequestMultiError is an error wrapping multiple validation
// errors returned by GetTenantProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTenantProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantProjectRequestMultiError) AllErrors() []error { return m }

// GetTenantProjectRequestValidationError is the validation error returned by
// GetTenantProjectRequest.Validate if the designated constraints aren't met.
type GetTenantProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantProjectRequestValidationError) ErrorName() string {
	return "GetTenantProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantProjectRequestValidationError{}

// Validate checks the field values on GetTenantProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantProjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantProjectResponseMultiError, or nil if none found.
func (m *GetTenantProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTenantProjectResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTenantProjectResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTenantProjectResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTenantProjectResponseMultiError(errors)
	}

	return nil
}

// GetTenantProjectResponseMultiError is an error wrapping multiple validation
// errors returned by GetTenantProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTenantProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantProjectResponseMultiError) AllErrors() []error { return m }

// GetTenantProjectResponseValidationError is the validation error returned by
// GetTenantProjectResponse.Validate if the designated constraints aren't met.
type GetTenantProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantProjectResponseValidationError) ErrorName() string {
	return "GetTenantProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantProjectResponseValidationError{}

// Validate checks the field values on TenantProjectData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TenantProjectData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantProjectData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantProjectDataMultiError, or nil if none found.
func (m *TenantProjectData) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantProjectData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Workspace

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return TenantProjectDataMultiError(errors)
	}

	return nil
}

// TenantProjectDataMultiError is an error wrapping multiple validation errors
// returned by TenantProjectData.ValidateAll() if the designated constraints
// aren't met.
type TenantProjectDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantProjectDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantProjectDataMultiError) AllErrors() []error { return m }

// TenantProjectDataValidationError is the validation error returned by
// TenantProjectData.Validate if the designated constraints aren't met.
type TenantProjectDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantProjectDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantProjectDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantProjectDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantProjectDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantProjectDataValidationError) ErrorName() string {
	return "TenantProjectDataValidationError"
}

// Error satisfies the builtin error interface
func (e TenantProjectDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantProjectData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantProjectDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantProjectDataValidationError{}
