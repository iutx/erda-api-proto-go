// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: service.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetServiceLanguageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceLanguageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceLanguageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceLanguageResponseMultiError, or nil if none found.
func (m *GetServiceLanguageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceLanguageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Language

	if len(errors) > 0 {
		return GetServiceLanguageResponseMultiError(errors)
	}

	return nil
}

// GetServiceLanguageResponseMultiError is an error wrapping multiple
// validation errors returned by GetServiceLanguageResponse.ValidateAll() if
// the designated constraints aren't met.
type GetServiceLanguageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceLanguageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceLanguageResponseMultiError) AllErrors() []error { return m }

// GetServiceLanguageResponseValidationError is the validation error returned
// by GetServiceLanguageResponse.Validate if the designated constraints aren't met.
type GetServiceLanguageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceLanguageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceLanguageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceLanguageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceLanguageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceLanguageResponseValidationError) ErrorName() string {
	return "GetServiceLanguageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceLanguageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceLanguageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceLanguageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceLanguageResponseValidationError{}

// Validate checks the field values on GetServiceLanguageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceLanguageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceLanguageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceLanguageRequestMultiError, or nil if none found.
func (m *GetServiceLanguageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceLanguageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for ServiceId

	if len(errors) > 0 {
		return GetServiceLanguageRequestMultiError(errors)
	}

	return nil
}

// GetServiceLanguageRequestMultiError is an error wrapping multiple validation
// errors returned by GetServiceLanguageRequest.ValidateAll() if the
// designated constraints aren't met.
type GetServiceLanguageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceLanguageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceLanguageRequestMultiError) AllErrors() []error { return m }

// GetServiceLanguageRequestValidationError is the validation error returned by
// GetServiceLanguageRequest.Validate if the designated constraints aren't met.
type GetServiceLanguageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceLanguageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceLanguageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceLanguageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceLanguageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceLanguageRequestValidationError) ErrorName() string {
	return "GetServiceLanguageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceLanguageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceLanguageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceLanguageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceLanguageRequestValidationError{}

// Validate checks the field values on GetServiceOverviewTopRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceOverviewTopRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceOverviewTopRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceOverviewTopRequestMultiError, or nil if none found.
func (m *GetServiceOverviewTopRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceOverviewTopRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	if len(errors) > 0 {
		return GetServiceOverviewTopRequestMultiError(errors)
	}

	return nil
}

// GetServiceOverviewTopRequestMultiError is an error wrapping multiple
// validation errors returned by GetServiceOverviewTopRequest.ValidateAll() if
// the designated constraints aren't met.
type GetServiceOverviewTopRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceOverviewTopRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceOverviewTopRequestMultiError) AllErrors() []error { return m }

// GetServiceOverviewTopRequestValidationError is the validation error returned
// by GetServiceOverviewTopRequest.Validate if the designated constraints
// aren't met.
type GetServiceOverviewTopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceOverviewTopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceOverviewTopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceOverviewTopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceOverviewTopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceOverviewTopRequestValidationError) ErrorName() string {
	return "GetServiceOverviewTopRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceOverviewTopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceOverviewTopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceOverviewTopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceOverviewTopRequestValidationError{}

// Validate checks the field values on GetServiceOverviewTopResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceOverviewTopResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceOverviewTopResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetServiceOverviewTopResponseMultiError, or nil if none found.
func (m *GetServiceOverviewTopResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceOverviewTopResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetServiceOverviewTopResponseMultiError(errors)
	}

	return nil
}

// GetServiceOverviewTopResponseMultiError is an error wrapping multiple
// validation errors returned by GetServiceOverviewTopResponse.ValidateAll()
// if the designated constraints aren't met.
type GetServiceOverviewTopResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceOverviewTopResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceOverviewTopResponseMultiError) AllErrors() []error { return m }

// GetServiceOverviewTopResponseValidationError is the validation error
// returned by GetServiceOverviewTopResponse.Validate if the designated
// constraints aren't met.
type GetServiceOverviewTopResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceOverviewTopResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceOverviewTopResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceOverviewTopResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceOverviewTopResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceOverviewTopResponseValidationError) ErrorName() string {
	return "GetServiceOverviewTopResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceOverviewTopResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceOverviewTopResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceOverviewTopResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceOverviewTopResponseValidationError{}

// Validate checks the field values on GetServiceCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceCountRequestMultiError, or nil if none found.
func (m *GetServiceCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for Status

	if len(errors) > 0 {
		return GetServiceCountRequestMultiError(errors)
	}

	return nil
}

// GetServiceCountRequestMultiError is an error wrapping multiple validation
// errors returned by GetServiceCountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetServiceCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceCountRequestMultiError) AllErrors() []error { return m }

// GetServiceCountRequestValidationError is the validation error returned by
// GetServiceCountRequest.Validate if the designated constraints aren't met.
type GetServiceCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceCountRequestValidationError) ErrorName() string {
	return "GetServiceCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceCountRequestValidationError{}

// Validate checks the field values on GetServiceCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceCountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceCountResponseMultiError, or nil if none found.
func (m *GetServiceCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for HasErrorCount

	// no validation rules for WithoutRequestCount

	if len(errors) > 0 {
		return GetServiceCountResponseMultiError(errors)
	}

	return nil
}

// GetServiceCountResponseMultiError is an error wrapping multiple validation
// errors returned by GetServiceCountResponse.ValidateAll() if the designated
// constraints aren't met.
type GetServiceCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceCountResponseMultiError) AllErrors() []error { return m }

// GetServiceCountResponseValidationError is the validation error returned by
// GetServiceCountResponse.Validate if the designated constraints aren't met.
type GetServiceCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceCountResponseValidationError) ErrorName() string {
	return "GetServiceCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceCountResponseValidationError{}

// Validate checks the field values on GetServiceAnalyzerOverviewRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetServiceAnalyzerOverviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceAnalyzerOverviewRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetServiceAnalyzerOverviewRequestMultiError, or nil if none found.
func (m *GetServiceAnalyzerOverviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceAnalyzerOverviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for View

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetServiceAnalyzerOverviewRequestMultiError(errors)
	}

	return nil
}

// GetServiceAnalyzerOverviewRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetServiceAnalyzerOverviewRequest.ValidateAll() if the designated
// constraints aren't met.
type GetServiceAnalyzerOverviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceAnalyzerOverviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceAnalyzerOverviewRequestMultiError) AllErrors() []error { return m }

// GetServiceAnalyzerOverviewRequestValidationError is the validation error
// returned by GetServiceAnalyzerOverviewRequest.Validate if the designated
// constraints aren't met.
type GetServiceAnalyzerOverviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceAnalyzerOverviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceAnalyzerOverviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceAnalyzerOverviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceAnalyzerOverviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceAnalyzerOverviewRequestValidationError) ErrorName() string {
	return "GetServiceAnalyzerOverviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceAnalyzerOverviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceAnalyzerOverviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceAnalyzerOverviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceAnalyzerOverviewRequestValidationError{}

// Validate checks the field values on GetServiceAnalyzerOverviewResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetServiceAnalyzerOverviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceAnalyzerOverviewResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetServiceAnalyzerOverviewResponseMultiError, or nil if none found.
func (m *GetServiceAnalyzerOverviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceAnalyzerOverviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceAnalyzerOverviewResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceAnalyzerOverviewResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceAnalyzerOverviewResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetServiceAnalyzerOverviewResponseMultiError(errors)
	}

	return nil
}

// GetServiceAnalyzerOverviewResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetServiceAnalyzerOverviewResponse.ValidateAll() if the designated
// constraints aren't met.
type GetServiceAnalyzerOverviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceAnalyzerOverviewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceAnalyzerOverviewResponseMultiError) AllErrors() []error { return m }

// GetServiceAnalyzerOverviewResponseValidationError is the validation error
// returned by GetServiceAnalyzerOverviewResponse.Validate if the designated
// constraints aren't met.
type GetServiceAnalyzerOverviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceAnalyzerOverviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceAnalyzerOverviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceAnalyzerOverviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceAnalyzerOverviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceAnalyzerOverviewResponseValidationError) ErrorName() string {
	return "GetServiceAnalyzerOverviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceAnalyzerOverviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceAnalyzerOverviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceAnalyzerOverviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceAnalyzerOverviewResponseValidationError{}

// Validate checks the field values on ServicesView with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServicesView) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServicesView with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServicesViewMultiError, or
// nil if none found.
func (m *ServicesView) ValidateAll() error {
	return m.validate(true)
}

func (m *ServicesView) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	for idx, item := range m.GetViews() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServicesViewValidationError{
						field:  fmt.Sprintf("Views[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServicesViewValidationError{
						field:  fmt.Sprintf("Views[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServicesViewValidationError{
					field:  fmt.Sprintf("Views[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServicesViewMultiError(errors)
	}

	return nil
}

// ServicesViewMultiError is an error wrapping multiple validation errors
// returned by ServicesView.ValidateAll() if the designated constraints aren't met.
type ServicesViewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServicesViewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServicesViewMultiError) AllErrors() []error { return m }

// ServicesViewValidationError is the validation error returned by
// ServicesView.Validate if the designated constraints aren't met.
type ServicesViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicesViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicesViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicesViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicesViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicesViewValidationError) ErrorName() string { return "ServicesViewValidationError" }

// Error satisfies the builtin error interface
func (e ServicesViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServicesView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicesViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicesViewValidationError{}

// Validate checks the field values on GetServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServicesRequestMultiError, or nil if none found.
func (m *GetServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for TenantId

	// no validation rules for ServiceName

	// no validation rules for ServiceStatus

	if len(errors) > 0 {
		return GetServicesRequestMultiError(errors)
	}

	return nil
}

// GetServicesRequestMultiError is an error wrapping multiple validation errors
// returned by GetServicesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServicesRequestMultiError) AllErrors() []error { return m }

// GetServicesRequestValidationError is the validation error returned by
// GetServicesRequest.Validate if the designated constraints aren't met.
type GetServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServicesRequestValidationError) ErrorName() string {
	return "GetServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServicesRequestValidationError{}

// Validate checks the field values on GetServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServicesResponseMultiError, or nil if none found.
func (m *GetServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServicesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServicesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServicesResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetServicesResponseMultiError(errors)
	}

	return nil
}

// GetServicesResponseMultiError is an error wrapping multiple validation
// errors returned by GetServicesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServicesResponseMultiError) AllErrors() []error { return m }

// GetServicesResponseValidationError is the validation error returned by
// GetServicesResponse.Validate if the designated constraints aren't met.
type GetServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServicesResponseValidationError) ErrorName() string {
	return "GetServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServicesResponseValidationError{}

// Validate checks the field values on TopTable with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TopTable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopTable with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TopTableMultiError, or nil
// if none found.
func (m *TopTable) ValidateAll() error {
	return m.validate(true)
}

func (m *TopTable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ServiceName

	// no validation rules for Value

	if len(errors) > 0 {
		return TopTableMultiError(errors)
	}

	return nil
}

// TopTableMultiError is an error wrapping multiple validation errors returned
// by TopTable.ValidateAll() if the designated constraints aren't met.
type TopTableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopTableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopTableMultiError) AllErrors() []error { return m }

// TopTableValidationError is the validation error returned by
// TopTable.Validate if the designated constraints aren't met.
type TopTableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopTableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopTableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopTableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopTableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopTableValidationError) ErrorName() string { return "TopTableValidationError" }

// Error satisfies the builtin error interface
func (e TopTableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopTableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopTableValidationError{}

// Validate checks the field values on Chart with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Chart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Chart with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChartMultiError, or nil if none found.
func (m *Chart) ValidateAll() error {
	return m.validate(true)
}

func (m *Chart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Value

	// no validation rules for Dimension

	if len(errors) > 0 {
		return ChartMultiError(errors)
	}

	return nil
}

// ChartMultiError is an error wrapping multiple validation errors returned by
// Chart.ValidateAll() if the designated constraints aren't met.
type ChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChartMultiError) AllErrors() []error { return m }

// ChartValidationError is the validation error returned by Chart.Validate if
// the designated constraints aren't met.
type ChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChartValidationError) ErrorName() string { return "ChartValidationError" }

// Error satisfies the builtin error interface
func (e ChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChartValidationError{}

// Validate checks the field values on ServiceTop with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceTop) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceTop with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceTopMultiError, or
// nil if none found.
func (m *ServiceTop) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceTop) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	for idx, item := range m.GetTops() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceTopValidationError{
						field:  fmt.Sprintf("Tops[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceTopValidationError{
						field:  fmt.Sprintf("Tops[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceTopValidationError{
					field:  fmt.Sprintf("Tops[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServiceTopMultiError(errors)
	}

	return nil
}

// ServiceTopMultiError is an error wrapping multiple validation errors
// returned by ServiceTop.ValidateAll() if the designated constraints aren't met.
type ServiceTopMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceTopMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceTopMultiError) AllErrors() []error { return m }

// ServiceTopValidationError is the validation error returned by
// ServiceTop.Validate if the designated constraints aren't met.
type ServiceTopValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceTopValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceTopValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceTopValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceTopValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceTopValidationError) ErrorName() string { return "ServiceTopValidationError" }

// Error satisfies the builtin error interface
func (e ServiceTopValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceTop.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceTopValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceTopValidationError{}

// Validate checks the field values on ServiceChart with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceChart with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceChartMultiError, or
// nil if none found.
func (m *ServiceChart) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	for idx, item := range m.GetView() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceChartValidationError{
						field:  fmt.Sprintf("View[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceChartValidationError{
						field:  fmt.Sprintf("View[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceChartValidationError{
					field:  fmt.Sprintf("View[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MaxValue

	if len(errors) > 0 {
		return ServiceChartMultiError(errors)
	}

	return nil
}

// ServiceChartMultiError is an error wrapping multiple validation errors
// returned by ServiceChart.ValidateAll() if the designated constraints aren't met.
type ServiceChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceChartMultiError) AllErrors() []error { return m }

// ServiceChartValidationError is the validation error returned by
// ServiceChart.Validate if the designated constraints aren't met.
type ServiceChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceChartValidationError) ErrorName() string { return "ServiceChartValidationError" }

// Error satisfies the builtin error interface
func (e ServiceChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceChartValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Language

	// no validation rules for LastHeartbeat

	if all {
		switch v := interface{}(m.GetAggregateMetric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "AggregateMetric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServiceValidationError{
					field:  "AggregateMetric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAggregateMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "AggregateMetric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on AggregateMetric with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AggregateMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AggregateMetric with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AggregateMetricMultiError, or nil if none found.
func (m *AggregateMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *AggregateMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvgRps

	// no validation rules for AvgDuration

	// no validation rules for ErrorRate

	if len(errors) > 0 {
		return AggregateMetricMultiError(errors)
	}

	return nil
}

// AggregateMetricMultiError is an error wrapping multiple validation errors
// returned by AggregateMetric.ValidateAll() if the designated constraints
// aren't met.
type AggregateMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AggregateMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AggregateMetricMultiError) AllErrors() []error { return m }

// AggregateMetricValidationError is the validation error returned by
// AggregateMetric.Validate if the designated constraints aren't met.
type AggregateMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AggregateMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AggregateMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AggregateMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AggregateMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AggregateMetricValidationError) ErrorName() string { return "AggregateMetricValidationError" }

// Error satisfies the builtin error interface
func (e AggregateMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAggregateMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AggregateMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AggregateMetricValidationError{}
