// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: checker.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCheckerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCheckerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCheckerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCheckerRequestMultiError, or nil if none found.
func (m *CreateCheckerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCheckerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := CreateCheckerRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScopeID()) < 1 {
		err := CreateCheckerRequestValidationError{
			field:  "ScopeID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := CreateCheckerRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCheckerRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCheckerRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCheckerRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCheckerRequestMultiError(errors)
	}

	return nil
}

// CreateCheckerRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCheckerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCheckerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCheckerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCheckerRequestMultiError) AllErrors() []error { return m }

// CreateCheckerRequestValidationError is the validation error returned by
// CreateCheckerRequest.Validate if the designated constraints aren't met.
type CreateCheckerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCheckerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCheckerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCheckerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCheckerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCheckerRequestValidationError) ErrorName() string {
	return "CreateCheckerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCheckerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCheckerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCheckerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCheckerRequestValidationError{}

// Validate checks the field values on CreateCheckerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCheckerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCheckerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCheckerResponseMultiError, or nil if none found.
func (m *CreateCheckerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCheckerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateCheckerResponseMultiError(errors)
	}

	return nil
}

// CreateCheckerResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCheckerResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCheckerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCheckerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCheckerResponseMultiError) AllErrors() []error { return m }

// CreateCheckerResponseValidationError is the validation error returned by
// CreateCheckerResponse.Validate if the designated constraints aren't met.
type CreateCheckerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCheckerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCheckerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCheckerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCheckerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCheckerResponseValidationError) ErrorName() string {
	return "CreateCheckerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCheckerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCheckerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCheckerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCheckerResponseValidationError{}

// Validate checks the field values on UpdateCheckerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCheckerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCheckerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCheckerRequestMultiError, or nil if none found.
func (m *UpdateCheckerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCheckerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := UpdateCheckerRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScopeID()) < 1 {
		err := UpdateCheckerRequestValidationError{
			field:  "ScopeID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCheckerRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCheckerRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCheckerRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCheckerRequestMultiError(errors)
	}

	return nil
}

// UpdateCheckerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCheckerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCheckerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCheckerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCheckerRequestMultiError) AllErrors() []error { return m }

// UpdateCheckerRequestValidationError is the validation error returned by
// UpdateCheckerRequest.Validate if the designated constraints aren't met.
type UpdateCheckerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCheckerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCheckerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCheckerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCheckerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCheckerRequestValidationError) ErrorName() string {
	return "UpdateCheckerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCheckerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCheckerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCheckerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCheckerRequestValidationError{}

// Validate checks the field values on UpdateCheckerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCheckerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCheckerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCheckerResponseMultiError, or nil if none found.
func (m *UpdateCheckerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCheckerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return UpdateCheckerResponseMultiError(errors)
	}

	return nil
}

// UpdateCheckerResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCheckerResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCheckerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCheckerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCheckerResponseMultiError) AllErrors() []error { return m }

// UpdateCheckerResponseValidationError is the validation error returned by
// UpdateCheckerResponse.Validate if the designated constraints aren't met.
type UpdateCheckerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCheckerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCheckerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCheckerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCheckerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCheckerResponseValidationError) ErrorName() string {
	return "UpdateCheckerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCheckerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCheckerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCheckerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCheckerResponseValidationError{}

// Validate checks the field values on DeleteCheckerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCheckerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCheckerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCheckerRequestMultiError, or nil if none found.
func (m *DeleteCheckerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCheckerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := DeleteCheckerRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScopeID()) < 1 {
		err := DeleteCheckerRequestValidationError{
			field:  "ScopeID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCheckerRequestMultiError(errors)
	}

	return nil
}

// DeleteCheckerRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCheckerRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCheckerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCheckerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCheckerRequestMultiError) AllErrors() []error { return m }

// DeleteCheckerRequestValidationError is the validation error returned by
// DeleteCheckerRequest.Validate if the designated constraints aren't met.
type DeleteCheckerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCheckerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCheckerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCheckerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCheckerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCheckerRequestValidationError) ErrorName() string {
	return "DeleteCheckerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCheckerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCheckerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCheckerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCheckerRequestValidationError{}

// Validate checks the field values on DeleteCheckerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCheckerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCheckerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCheckerResponseMultiError, or nil if none found.
func (m *DeleteCheckerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCheckerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteCheckerResponseMultiError(errors)
	}

	return nil
}

// DeleteCheckerResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCheckerResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCheckerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCheckerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCheckerResponseMultiError) AllErrors() []error { return m }

// DeleteCheckerResponseValidationError is the validation error returned by
// DeleteCheckerResponse.Validate if the designated constraints aren't met.
type DeleteCheckerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCheckerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCheckerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCheckerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCheckerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCheckerResponseValidationError) ErrorName() string {
	return "DeleteCheckerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCheckerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCheckerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCheckerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCheckerResponseValidationError{}

// Validate checks the field values on ListCheckersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCheckersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCheckersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCheckersRequestMultiError, or nil if none found.
func (m *ListCheckersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCheckersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := ListCheckersRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScopeID()) < 1 {
		err := ListCheckersRequestValidationError{
			field:  "ScopeID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCheckersRequestMultiError(errors)
	}

	return nil
}

// ListCheckersRequestMultiError is an error wrapping multiple validation
// errors returned by ListCheckersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCheckersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCheckersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCheckersRequestMultiError) AllErrors() []error { return m }

// ListCheckersRequestValidationError is the validation error returned by
// ListCheckersRequest.Validate if the designated constraints aren't met.
type ListCheckersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCheckersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCheckersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCheckersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCheckersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCheckersRequestValidationError) ErrorName() string {
	return "ListCheckersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCheckersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCheckersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCheckersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCheckersRequestValidationError{}

// Validate checks the field values on ListCheckersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCheckersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCheckersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCheckersResponseMultiError, or nil if none found.
func (m *ListCheckersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCheckersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCheckersResponseMultiError(errors)
	}

	return nil
}

// ListCheckersResponseMultiError is an error wrapping multiple validation
// errors returned by ListCheckersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCheckersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCheckersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCheckersResponseMultiError) AllErrors() []error { return m }

// ListCheckersResponseValidationError is the validation error returned by
// ListCheckersResponse.Validate if the designated constraints aren't met.
type ListCheckersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCheckersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCheckersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCheckersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCheckersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCheckersResponseValidationError) ErrorName() string {
	return "ListCheckersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCheckersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCheckersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCheckersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCheckersResponseValidationError{}

// Validate checks the field values on DescribeCheckersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCheckersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCheckersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCheckersRequestMultiError, or nil if none found.
func (m *DescribeCheckersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCheckersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := DescribeCheckersRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScopeID()) < 1 {
		err := DescribeCheckersRequestValidationError{
			field:  "ScopeID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCheckersRequestMultiError(errors)
	}

	return nil
}

// DescribeCheckersRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeCheckersRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeCheckersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCheckersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCheckersRequestMultiError) AllErrors() []error { return m }

// DescribeCheckersRequestValidationError is the validation error returned by
// DescribeCheckersRequest.Validate if the designated constraints aren't met.
type DescribeCheckersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCheckersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCheckersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCheckersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCheckersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCheckersRequestValidationError) ErrorName() string {
	return "DescribeCheckersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCheckersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCheckersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCheckersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCheckersRequestValidationError{}

// Validate checks the field values on DescribeCheckersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCheckersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCheckersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCheckersResponseMultiError, or nil if none found.
func (m *DescribeCheckersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCheckersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DescribeCheckersResponseMultiError(errors)
	}

	return nil
}

// DescribeCheckersResponseMultiError is an error wrapping multiple validation
// errors returned by DescribeCheckersResponse.ValidateAll() if the designated
// constraints aren't met.
type DescribeCheckersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCheckersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCheckersResponseMultiError) AllErrors() []error { return m }

// DescribeCheckersResponseValidationError is the validation error returned by
// DescribeCheckersResponse.Validate if the designated constraints aren't met.
type DescribeCheckersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCheckersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCheckersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCheckersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCheckersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCheckersResponseValidationError) ErrorName() string {
	return "DescribeCheckersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCheckersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCheckersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCheckersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCheckersResponseValidationError{}

// Validate checks the field values on DescribeCheckerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCheckerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCheckerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCheckerRequestMultiError, or nil if none found.
func (m *DescribeCheckerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCheckerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := DescribeCheckerRequestValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScopeID()) < 1 {
		err := DescribeCheckerRequestValidationError{
			field:  "ScopeID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetId() <= 0 {
		err := DescribeCheckerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCheckerRequestMultiError(errors)
	}

	return nil
}

// DescribeCheckerRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeCheckerRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeCheckerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCheckerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCheckerRequestMultiError) AllErrors() []error { return m }

// DescribeCheckerRequestValidationError is the validation error returned by
// DescribeCheckerRequest.Validate if the designated constraints aren't met.
type DescribeCheckerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCheckerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCheckerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCheckerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCheckerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCheckerRequestValidationError) ErrorName() string {
	return "DescribeCheckerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCheckerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCheckerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCheckerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCheckerRequestValidationError{}

// Validate checks the field values on DescribeCheckerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCheckerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCheckerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCheckerResponseMultiError, or nil if none found.
func (m *DescribeCheckerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCheckerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DescribeCheckerResponseMultiError(errors)
	}

	return nil
}

// DescribeCheckerResponseMultiError is an error wrapping multiple validation
// errors returned by DescribeCheckerResponse.ValidateAll() if the designated
// constraints aren't met.
type DescribeCheckerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCheckerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCheckerResponseMultiError) AllErrors() []error { return m }

// DescribeCheckerResponseValidationError is the validation error returned by
// DescribeCheckerResponse.Validate if the designated constraints aren't met.
type DescribeCheckerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCheckerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCheckerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCheckerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCheckerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCheckerResponseValidationError) ErrorName() string {
	return "DescribeCheckerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCheckerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCheckerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCheckerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCheckerResponseValidationError{}

// Validate checks the field values on Checker with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Checker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Checker with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CheckerMultiError, or nil if none found.
func (m *Checker) ValidateAll() error {
	return m.validate(true)
}

func (m *Checker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CheckerValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := CheckerValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CheckerValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CheckerValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CheckerValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Tags

	if len(errors) > 0 {
		return CheckerMultiError(errors)
	}

	return nil
}

// CheckerMultiError is an error wrapping multiple validation errors returned
// by Checker.ValidateAll() if the designated constraints aren't met.
type CheckerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckerMultiError) AllErrors() []error { return m }

// CheckerValidationError is the validation error returned by Checker.Validate
// if the designated constraints aren't met.
type CheckerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckerValidationError) ErrorName() string { return "CheckerValidationError" }

// Error satisfies the builtin error interface
func (e CheckerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChecker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckerValidationError{}
