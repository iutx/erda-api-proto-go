// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: checker_v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCheckerV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCheckerV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCheckerV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCheckerV1RequestMultiError, or nil if none found.
func (m *CreateCheckerV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCheckerV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := CreateCheckerV1RequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCheckerV1RequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCheckerV1RequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCheckerV1RequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCheckerV1RequestMultiError(errors)
	}

	return nil
}

// CreateCheckerV1RequestMultiError is an error wrapping multiple validation
// errors returned by CreateCheckerV1Request.ValidateAll() if the designated
// constraints aren't met.
type CreateCheckerV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCheckerV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCheckerV1RequestMultiError) AllErrors() []error { return m }

// CreateCheckerV1RequestValidationError is the validation error returned by
// CreateCheckerV1Request.Validate if the designated constraints aren't met.
type CreateCheckerV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCheckerV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCheckerV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCheckerV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCheckerV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCheckerV1RequestValidationError) ErrorName() string {
	return "CreateCheckerV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCheckerV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCheckerV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCheckerV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCheckerV1RequestValidationError{}

// Validate checks the field values on CreateCheckerV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCheckerV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCheckerV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCheckerV1ResponseMultiError, or nil if none found.
func (m *CreateCheckerV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCheckerV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateCheckerV1ResponseMultiError(errors)
	}

	return nil
}

// CreateCheckerV1ResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCheckerV1Response.ValidateAll() if the designated
// constraints aren't met.
type CreateCheckerV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCheckerV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCheckerV1ResponseMultiError) AllErrors() []error { return m }

// CreateCheckerV1ResponseValidationError is the validation error returned by
// CreateCheckerV1Response.Validate if the designated constraints aren't met.
type CreateCheckerV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCheckerV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCheckerV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCheckerV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCheckerV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCheckerV1ResponseValidationError) ErrorName() string {
	return "CreateCheckerV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCheckerV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCheckerV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCheckerV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCheckerV1ResponseValidationError{}

// Validate checks the field values on UpdateCheckerV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCheckerV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCheckerV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCheckerV1RequestMultiError, or nil if none found.
func (m *UpdateCheckerV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCheckerV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateCheckerV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := UpdateCheckerV1RequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCheckerV1RequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCheckerV1RequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCheckerV1RequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCheckerV1RequestMultiError(errors)
	}

	return nil
}

// UpdateCheckerV1RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCheckerV1Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateCheckerV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCheckerV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCheckerV1RequestMultiError) AllErrors() []error { return m }

// UpdateCheckerV1RequestValidationError is the validation error returned by
// UpdateCheckerV1Request.Validate if the designated constraints aren't met.
type UpdateCheckerV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCheckerV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCheckerV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCheckerV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCheckerV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCheckerV1RequestValidationError) ErrorName() string {
	return "UpdateCheckerV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCheckerV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCheckerV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCheckerV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCheckerV1RequestValidationError{}

// Validate checks the field values on UpdateCheckerV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCheckerV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCheckerV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCheckerV1ResponseMultiError, or nil if none found.
func (m *UpdateCheckerV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCheckerV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return UpdateCheckerV1ResponseMultiError(errors)
	}

	return nil
}

// UpdateCheckerV1ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCheckerV1Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateCheckerV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCheckerV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCheckerV1ResponseMultiError) AllErrors() []error { return m }

// UpdateCheckerV1ResponseValidationError is the validation error returned by
// UpdateCheckerV1Response.Validate if the designated constraints aren't met.
type UpdateCheckerV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCheckerV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCheckerV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCheckerV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCheckerV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCheckerV1ResponseValidationError) ErrorName() string {
	return "UpdateCheckerV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCheckerV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCheckerV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCheckerV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCheckerV1ResponseValidationError{}

// Validate checks the field values on DeleteCheckerV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCheckerV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCheckerV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCheckerV1RequestMultiError, or nil if none found.
func (m *DeleteCheckerV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCheckerV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteCheckerV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCheckerV1RequestMultiError(errors)
	}

	return nil
}

// DeleteCheckerV1RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCheckerV1Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteCheckerV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCheckerV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCheckerV1RequestMultiError) AllErrors() []error { return m }

// DeleteCheckerV1RequestValidationError is the validation error returned by
// DeleteCheckerV1Request.Validate if the designated constraints aren't met.
type DeleteCheckerV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCheckerV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCheckerV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCheckerV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCheckerV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCheckerV1RequestValidationError) ErrorName() string {
	return "DeleteCheckerV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCheckerV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCheckerV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCheckerV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCheckerV1RequestValidationError{}

// Validate checks the field values on DeleteCheckerV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCheckerV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCheckerV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCheckerV1ResponseMultiError, or nil if none found.
func (m *DeleteCheckerV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCheckerV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCheckerV1ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCheckerV1ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCheckerV1ResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteCheckerV1ResponseMultiError(errors)
	}

	return nil
}

// DeleteCheckerV1ResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCheckerV1Response.ValidateAll() if the designated
// constraints aren't met.
type DeleteCheckerV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCheckerV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCheckerV1ResponseMultiError) AllErrors() []error { return m }

// DeleteCheckerV1ResponseValidationError is the validation error returned by
// DeleteCheckerV1Response.Validate if the designated constraints aren't met.
type DeleteCheckerV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCheckerV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCheckerV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCheckerV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCheckerV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCheckerV1ResponseValidationError) ErrorName() string {
	return "DeleteCheckerV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCheckerV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCheckerV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCheckerV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCheckerV1ResponseValidationError{}

// Validate checks the field values on GetCheckerV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCheckerV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCheckerV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCheckerV1RequestMultiError, or nil if none found.
func (m *GetCheckerV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCheckerV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCheckerV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCheckerV1RequestMultiError(errors)
	}

	return nil
}

// GetCheckerV1RequestMultiError is an error wrapping multiple validation
// errors returned by GetCheckerV1Request.ValidateAll() if the designated
// constraints aren't met.
type GetCheckerV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCheckerV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCheckerV1RequestMultiError) AllErrors() []error { return m }

// GetCheckerV1RequestValidationError is the validation error returned by
// GetCheckerV1Request.Validate if the designated constraints aren't met.
type GetCheckerV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCheckerV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCheckerV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCheckerV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCheckerV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCheckerV1RequestValidationError) ErrorName() string {
	return "GetCheckerV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCheckerV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCheckerV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCheckerV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCheckerV1RequestValidationError{}

// Validate checks the field values on GetCheckerV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCheckerV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCheckerV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCheckerV1ResponseMultiError, or nil if none found.
func (m *GetCheckerV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCheckerV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCheckerV1ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCheckerV1ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCheckerV1ResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCheckerV1ResponseMultiError(errors)
	}

	return nil
}

// GetCheckerV1ResponseMultiError is an error wrapping multiple validation
// errors returned by GetCheckerV1Response.ValidateAll() if the designated
// constraints aren't met.
type GetCheckerV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCheckerV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCheckerV1ResponseMultiError) AllErrors() []error { return m }

// GetCheckerV1ResponseValidationError is the validation error returned by
// GetCheckerV1Response.Validate if the designated constraints aren't met.
type GetCheckerV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCheckerV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCheckerV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCheckerV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCheckerV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCheckerV1ResponseValidationError) ErrorName() string {
	return "GetCheckerV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCheckerV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCheckerV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCheckerV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCheckerV1ResponseValidationError{}

// Validate checks the field values on DescribeCheckersV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCheckersV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCheckersV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCheckersV1RequestMultiError, or nil if none found.
func (m *DescribeCheckersV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCheckersV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectID() <= 0 {
		err := DescribeCheckersV1RequestValidationError{
			field:  "ProjectID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEnv()) < 1 {
		err := DescribeCheckersV1RequestValidationError{
			field:  "Env",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TenantId

	if len(errors) > 0 {
		return DescribeCheckersV1RequestMultiError(errors)
	}

	return nil
}

// DescribeCheckersV1RequestMultiError is an error wrapping multiple validation
// errors returned by DescribeCheckersV1Request.ValidateAll() if the
// designated constraints aren't met.
type DescribeCheckersV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCheckersV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCheckersV1RequestMultiError) AllErrors() []error { return m }

// DescribeCheckersV1RequestValidationError is the validation error returned by
// DescribeCheckersV1Request.Validate if the designated constraints aren't met.
type DescribeCheckersV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCheckersV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCheckersV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCheckersV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCheckersV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCheckersV1RequestValidationError) ErrorName() string {
	return "DescribeCheckersV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCheckersV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCheckersV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCheckersV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCheckersV1RequestValidationError{}

// Validate checks the field values on DescribeCheckersV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCheckersV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCheckersV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCheckersV1ResponseMultiError, or nil if none found.
func (m *DescribeCheckersV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCheckersV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeCheckersV1ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeCheckersV1ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeCheckersV1ResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeCheckersV1ResponseMultiError(errors)
	}

	return nil
}

// DescribeCheckersV1ResponseMultiError is an error wrapping multiple
// validation errors returned by DescribeCheckersV1Response.ValidateAll() if
// the designated constraints aren't met.
type DescribeCheckersV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCheckersV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCheckersV1ResponseMultiError) AllErrors() []error { return m }

// DescribeCheckersV1ResponseValidationError is the validation error returned
// by DescribeCheckersV1Response.Validate if the designated constraints aren't met.
type DescribeCheckersV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCheckersV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCheckersV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCheckersV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCheckersV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCheckersV1ResponseValidationError) ErrorName() string {
	return "DescribeCheckersV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCheckersV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCheckersV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCheckersV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCheckersV1ResponseValidationError{}

// Validate checks the field values on DescribeCheckerV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCheckerV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCheckerV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCheckerV1RequestMultiError, or nil if none found.
func (m *DescribeCheckerV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCheckerV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DescribeCheckerV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Period

	if len(errors) > 0 {
		return DescribeCheckerV1RequestMultiError(errors)
	}

	return nil
}

// DescribeCheckerV1RequestMultiError is an error wrapping multiple validation
// errors returned by DescribeCheckerV1Request.ValidateAll() if the designated
// constraints aren't met.
type DescribeCheckerV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCheckerV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCheckerV1RequestMultiError) AllErrors() []error { return m }

// DescribeCheckerV1RequestValidationError is the validation error returned by
// DescribeCheckerV1Request.Validate if the designated constraints aren't met.
type DescribeCheckerV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCheckerV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCheckerV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCheckerV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCheckerV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCheckerV1RequestValidationError) ErrorName() string {
	return "DescribeCheckerV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCheckerV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCheckerV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCheckerV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCheckerV1RequestValidationError{}

// Validate checks the field values on DescribeCheckerV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCheckerV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCheckerV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCheckerV1ResponseMultiError, or nil if none found.
func (m *DescribeCheckerV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCheckerV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeCheckerV1ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeCheckerV1ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeCheckerV1ResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeCheckerV1ResponseMultiError(errors)
	}

	return nil
}

// DescribeCheckerV1ResponseMultiError is an error wrapping multiple validation
// errors returned by DescribeCheckerV1Response.ValidateAll() if the
// designated constraints aren't met.
type DescribeCheckerV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCheckerV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCheckerV1ResponseMultiError) AllErrors() []error { return m }

// DescribeCheckerV1ResponseValidationError is the validation error returned by
// DescribeCheckerV1Response.Validate if the designated constraints aren't met.
type DescribeCheckerV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCheckerV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCheckerV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCheckerV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCheckerV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCheckerV1ResponseValidationError) ErrorName() string {
	return "DescribeCheckerV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCheckerV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCheckerV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCheckerV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCheckerV1ResponseValidationError{}

// Validate checks the field values on GetCheckerStatusV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCheckerStatusV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCheckerStatusV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCheckerStatusV1RequestMultiError, or nil if none found.
func (m *GetCheckerStatusV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCheckerStatusV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCheckerStatusV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCheckerStatusV1RequestMultiError(errors)
	}

	return nil
}

// GetCheckerStatusV1RequestMultiError is an error wrapping multiple validation
// errors returned by GetCheckerStatusV1Request.ValidateAll() if the
// designated constraints aren't met.
type GetCheckerStatusV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCheckerStatusV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCheckerStatusV1RequestMultiError) AllErrors() []error { return m }

// GetCheckerStatusV1RequestValidationError is the validation error returned by
// GetCheckerStatusV1Request.Validate if the designated constraints aren't met.
type GetCheckerStatusV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCheckerStatusV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCheckerStatusV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCheckerStatusV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCheckerStatusV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCheckerStatusV1RequestValidationError) ErrorName() string {
	return "GetCheckerStatusV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCheckerStatusV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCheckerStatusV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCheckerStatusV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCheckerStatusV1RequestValidationError{}

// Validate checks the field values on GetCheckerStatusV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCheckerStatusV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCheckerStatusV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCheckerStatusV1ResponseMultiError, or nil if none found.
func (m *GetCheckerStatusV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCheckerStatusV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCheckerStatusV1ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCheckerStatusV1ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCheckerStatusV1ResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCheckerStatusV1ResponseMultiError(errors)
	}

	return nil
}

// GetCheckerStatusV1ResponseMultiError is an error wrapping multiple
// validation errors returned by GetCheckerStatusV1Response.ValidateAll() if
// the designated constraints aren't met.
type GetCheckerStatusV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCheckerStatusV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCheckerStatusV1ResponseMultiError) AllErrors() []error { return m }

// GetCheckerStatusV1ResponseValidationError is the validation error returned
// by GetCheckerStatusV1Response.Validate if the designated constraints aren't met.
type GetCheckerStatusV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCheckerStatusV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCheckerStatusV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCheckerStatusV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCheckerStatusV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCheckerStatusV1ResponseValidationError) ErrorName() string {
	return "GetCheckerStatusV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCheckerStatusV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCheckerStatusV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCheckerStatusV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCheckerStatusV1ResponseValidationError{}

// Validate checks the field values on CheckerStatusV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckerStatusV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckerStatusV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckerStatusV1MultiError, or nil if none found.
func (m *CheckerStatusV1) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckerStatusV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckerStatusV1MultiError(errors)
	}

	return nil
}

// CheckerStatusV1MultiError is an error wrapping multiple validation errors
// returned by CheckerStatusV1.ValidateAll() if the designated constraints
// aren't met.
type CheckerStatusV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckerStatusV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckerStatusV1MultiError) AllErrors() []error { return m }

// CheckerStatusV1ValidationError is the validation error returned by
// CheckerStatusV1.Validate if the designated constraints aren't met.
type CheckerStatusV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckerStatusV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckerStatusV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckerStatusV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckerStatusV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckerStatusV1ValidationError) ErrorName() string { return "CheckerStatusV1ValidationError" }

// Error satisfies the builtin error interface
func (e CheckerStatusV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckerStatusV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckerStatusV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckerStatusV1ValidationError{}

// Validate checks the field values on GetCheckerIssuesV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCheckerIssuesV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCheckerIssuesV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCheckerIssuesV1RequestMultiError, or nil if none found.
func (m *GetCheckerIssuesV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCheckerIssuesV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCheckerIssuesV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCheckerIssuesV1RequestMultiError(errors)
	}

	return nil
}

// GetCheckerIssuesV1RequestMultiError is an error wrapping multiple validation
// errors returned by GetCheckerIssuesV1Request.ValidateAll() if the
// designated constraints aren't met.
type GetCheckerIssuesV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCheckerIssuesV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCheckerIssuesV1RequestMultiError) AllErrors() []error { return m }

// GetCheckerIssuesV1RequestValidationError is the validation error returned by
// GetCheckerIssuesV1Request.Validate if the designated constraints aren't met.
type GetCheckerIssuesV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCheckerIssuesV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCheckerIssuesV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCheckerIssuesV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCheckerIssuesV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCheckerIssuesV1RequestValidationError) ErrorName() string {
	return "GetCheckerIssuesV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCheckerIssuesV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCheckerIssuesV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCheckerIssuesV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCheckerIssuesV1RequestValidationError{}

// Validate checks the field values on GetCheckerIssuesV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCheckerIssuesV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCheckerIssuesV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCheckerIssuesV1ResponseMultiError, or nil if none found.
func (m *GetCheckerIssuesV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCheckerIssuesV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCheckerIssuesV1ResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCheckerIssuesV1ResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCheckerIssuesV1ResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCheckerIssuesV1ResponseMultiError(errors)
	}

	return nil
}

// GetCheckerIssuesV1ResponseMultiError is an error wrapping multiple
// validation errors returned by GetCheckerIssuesV1Response.ValidateAll() if
// the designated constraints aren't met.
type GetCheckerIssuesV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCheckerIssuesV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCheckerIssuesV1ResponseMultiError) AllErrors() []error { return m }

// GetCheckerIssuesV1ResponseValidationError is the validation error returned
// by GetCheckerIssuesV1Response.Validate if the designated constraints aren't met.
type GetCheckerIssuesV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCheckerIssuesV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCheckerIssuesV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCheckerIssuesV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCheckerIssuesV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCheckerIssuesV1ResponseValidationError) ErrorName() string {
	return "GetCheckerIssuesV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCheckerIssuesV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCheckerIssuesV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCheckerIssuesV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCheckerIssuesV1ResponseValidationError{}

// Validate checks the field values on CheckerV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckerV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckerV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckerV1MultiError, or nil
// if none found.
func (m *CheckerV1) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckerV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CheckerV1ValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMode()) < 1 {
		err := CheckerV1ValidationError{
			field:  "Mode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProjectID

	// no validation rules for Env

	// no validation rules for TenantId

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CheckerV1ValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CheckerV1ValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CheckerV1ValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CheckerV1MultiError(errors)
	}

	return nil
}

// CheckerV1MultiError is an error wrapping multiple validation errors returned
// by CheckerV1.ValidateAll() if the designated constraints aren't met.
type CheckerV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckerV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckerV1MultiError) AllErrors() []error { return m }

// CheckerV1ValidationError is the validation error returned by
// CheckerV1.Validate if the designated constraints aren't met.
type CheckerV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckerV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckerV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckerV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckerV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckerV1ValidationError) ErrorName() string { return "CheckerV1ValidationError" }

// Error satisfies the builtin error interface
func (e CheckerV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckerV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckerV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckerV1ValidationError{}

// Validate checks the field values on HttpModeConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HttpModeConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HttpModeConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HttpModeConfigMultiError,
// or nil if none found.
func (m *HttpModeConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *HttpModeConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := HttpModeConfigValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMethod()) < 1 {
		err := HttpModeConfigValidationError{
			field:  "Method",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHeaders()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HttpModeConfigValidationError{
					field:  "Headers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HttpModeConfigValidationError{
					field:  "Headers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeaders()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HttpModeConfigValidationError{
				field:  "Headers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HttpModeConfigValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HttpModeConfigValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HttpModeConfigValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTriggering() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HttpModeConfigValidationError{
						field:  fmt.Sprintf("Triggering[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HttpModeConfigValidationError{
						field:  fmt.Sprintf("Triggering[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpModeConfigValidationError{
					field:  fmt.Sprintf("Triggering[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Retry

	// no validation rules for Interval

	if len(errors) > 0 {
		return HttpModeConfigMultiError(errors)
	}

	return nil
}

// HttpModeConfigMultiError is an error wrapping multiple validation errors
// returned by HttpModeConfig.ValidateAll() if the designated constraints
// aren't met.
type HttpModeConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HttpModeConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HttpModeConfigMultiError) AllErrors() []error { return m }

// HttpModeConfigValidationError is the validation error returned by
// HttpModeConfig.Validate if the designated constraints aren't met.
type HttpModeConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpModeConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpModeConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpModeConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpModeConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpModeConfigValidationError) ErrorName() string { return "HttpModeConfigValidationError" }

// Error satisfies the builtin error interface
func (e HttpModeConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpModeConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpModeConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpModeConfigValidationError{}

// Validate checks the field values on Condition with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Condition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Condition with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConditionMultiError, or nil
// if none found.
func (m *Condition) ValidateAll() error {
	return m.validate(true)
}

func (m *Condition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Operate

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConditionValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConditionValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConditionValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConditionMultiError(errors)
	}

	return nil
}

// ConditionMultiError is an error wrapping multiple validation errors returned
// by Condition.ValidateAll() if the designated constraints aren't met.
type ConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConditionMultiError) AllErrors() []error { return m }

// ConditionValidationError is the validation error returned by
// Condition.Validate if the designated constraints aren't met.
type ConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionValidationError) ErrorName() string { return "ConditionValidationError" }

// Error satisfies the builtin error interface
func (e ConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionValidationError{}

// Validate checks the field values on DescribeResultV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DescribeResultV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeResultV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeResultV1MultiError, or nil if none found.
func (m *DescribeResultV1) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeResultV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DownCount

	{
		sorted_keys := make([]int64, len(m.GetMetrics()))
		i := 0
		for key := range m.GetMetrics() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMetrics()[key]
			_ = val

			// no validation rules for Metrics[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DescribeResultV1ValidationError{
							field:  fmt.Sprintf("Metrics[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DescribeResultV1ValidationError{
							field:  fmt.Sprintf("Metrics[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DescribeResultV1ValidationError{
						field:  fmt.Sprintf("Metrics[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return DescribeResultV1MultiError(errors)
	}

	return nil
}

// DescribeResultV1MultiError is an error wrapping multiple validation errors
// returned by DescribeResultV1.ValidateAll() if the designated constraints
// aren't met.
type DescribeResultV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeResultV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeResultV1MultiError) AllErrors() []error { return m }

// DescribeResultV1ValidationError is the validation error returned by
// DescribeResultV1.Validate if the designated constraints aren't met.
type DescribeResultV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeResultV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeResultV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeResultV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeResultV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeResultV1ValidationError) ErrorName() string { return "DescribeResultV1ValidationError" }

// Error satisfies the builtin error interface
func (e DescribeResultV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeResultV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeResultV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeResultV1ValidationError{}

// Validate checks the field values on DescribeItemV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DescribeItemV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeItemV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DescribeItemV1MultiError,
// or nil if none found.
func (m *DescribeItemV1) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeItemV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Mode

	// no validation rules for Url

	// no validation rules for Status

	// no validation rules for Uptime

	// no validation rules for Downtime

	// no validation rules for DownDuration

	// no validation rules for Latency

	// no validation rules for RequestId

	// no validation rules for Apdex

	// no validation rules for Avg

	// no validation rules for Max

	// no validation rules for Min

	if all {
		switch v := interface{}(m.GetChart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeItemV1ValidationError{
					field:  "Chart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeItemV1ValidationError{
					field:  "Chart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeItemV1ValidationError{
				field:  "Chart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DescribeItemV1ValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DescribeItemV1ValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DescribeItemV1ValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return DescribeItemV1MultiError(errors)
	}

	return nil
}

// DescribeItemV1MultiError is an error wrapping multiple validation errors
// returned by DescribeItemV1.ValidateAll() if the designated constraints
// aren't met.
type DescribeItemV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeItemV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeItemV1MultiError) AllErrors() []error { return m }

// DescribeItemV1ValidationError is the validation error returned by
// DescribeItemV1.Validate if the designated constraints aren't met.
type DescribeItemV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeItemV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeItemV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeItemV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeItemV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeItemV1ValidationError) ErrorName() string { return "DescribeItemV1ValidationError" }

// Error satisfies the builtin error interface
func (e DescribeItemV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeItemV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeItemV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeItemV1ValidationError{}

// Validate checks the field values on CheckerChartV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckerChartV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckerChartV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckerChartV1MultiError,
// or nil if none found.
func (m *CheckerChartV1) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckerChartV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckerChartV1MultiError(errors)
	}

	return nil
}

// CheckerChartV1MultiError is an error wrapping multiple validation errors
// returned by CheckerChartV1.ValidateAll() if the designated constraints
// aren't met.
type CheckerChartV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckerChartV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckerChartV1MultiError) AllErrors() []error { return m }

// CheckerChartV1ValidationError is the validation error returned by
// CheckerChartV1.Validate if the designated constraints aren't met.
type CheckerChartV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckerChartV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckerChartV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckerChartV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckerChartV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckerChartV1ValidationError) ErrorName() string { return "CheckerChartV1ValidationError" }

// Error satisfies the builtin error interface
func (e CheckerChartV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckerChartV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckerChartV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckerChartV1ValidationError{}
