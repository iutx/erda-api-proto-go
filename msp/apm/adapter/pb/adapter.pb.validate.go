// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: adapter.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetInstrumentationLibraryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetInstrumentationLibraryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstrumentationLibraryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetInstrumentationLibraryRequestMultiError, or nil if none found.
func (m *GetInstrumentationLibraryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstrumentationLibraryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInstrumentationLibraryRequestMultiError(errors)
	}

	return nil
}

// GetInstrumentationLibraryRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetInstrumentationLibraryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInstrumentationLibraryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstrumentationLibraryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstrumentationLibraryRequestMultiError) AllErrors() []error { return m }

// GetInstrumentationLibraryRequestValidationError is the validation error
// returned by GetInstrumentationLibraryRequest.Validate if the designated
// constraints aren't met.
type GetInstrumentationLibraryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstrumentationLibraryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstrumentationLibraryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstrumentationLibraryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstrumentationLibraryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstrumentationLibraryRequestValidationError) ErrorName() string {
	return "GetInstrumentationLibraryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstrumentationLibraryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstrumentationLibraryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstrumentationLibraryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstrumentationLibraryRequestValidationError{}

// Validate checks the field values on GetInstrumentationLibraryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetInstrumentationLibraryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstrumentationLibraryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetInstrumentationLibraryResponseMultiError, or nil if none found.
func (m *GetInstrumentationLibraryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstrumentationLibraryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetInstrumentationLibraryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetInstrumentationLibraryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetInstrumentationLibraryResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetInstrumentationLibraryResponseMultiError(errors)
	}

	return nil
}

// GetInstrumentationLibraryResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetInstrumentationLibraryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetInstrumentationLibraryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstrumentationLibraryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstrumentationLibraryResponseMultiError) AllErrors() []error { return m }

// GetInstrumentationLibraryResponseValidationError is the validation error
// returned by GetInstrumentationLibraryResponse.Validate if the designated
// constraints aren't met.
type GetInstrumentationLibraryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstrumentationLibraryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstrumentationLibraryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstrumentationLibraryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstrumentationLibraryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstrumentationLibraryResponseValidationError) ErrorName() string {
	return "GetInstrumentationLibraryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstrumentationLibraryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstrumentationLibraryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstrumentationLibraryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstrumentationLibraryResponseValidationError{}

// Validate checks the field values on GetInstrumentationLibraryDocsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetInstrumentationLibraryDocsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstrumentationLibraryDocsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetInstrumentationLibraryDocsRequestMultiError, or nil if none found.
func (m *GetInstrumentationLibraryDocsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstrumentationLibraryDocsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Language

	// no validation rules for Strategy

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return GetInstrumentationLibraryDocsRequestMultiError(errors)
	}

	return nil
}

// GetInstrumentationLibraryDocsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetInstrumentationLibraryDocsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInstrumentationLibraryDocsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstrumentationLibraryDocsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstrumentationLibraryDocsRequestMultiError) AllErrors() []error { return m }

// GetInstrumentationLibraryDocsRequestValidationError is the validation error
// returned by GetInstrumentationLibraryDocsRequest.Validate if the designated
// constraints aren't met.
type GetInstrumentationLibraryDocsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstrumentationLibraryDocsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstrumentationLibraryDocsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstrumentationLibraryDocsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstrumentationLibraryDocsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstrumentationLibraryDocsRequestValidationError) ErrorName() string {
	return "GetInstrumentationLibraryDocsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstrumentationLibraryDocsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstrumentationLibraryDocsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstrumentationLibraryDocsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstrumentationLibraryDocsRequestValidationError{}

// Validate checks the field values on GetInstrumentationLibraryDocsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetInstrumentationLibraryDocsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstrumentationLibraryDocsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetInstrumentationLibraryDocsResponseMultiError, or nil if none found.
func (m *GetInstrumentationLibraryDocsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstrumentationLibraryDocsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return GetInstrumentationLibraryDocsResponseMultiError(errors)
	}

	return nil
}

// GetInstrumentationLibraryDocsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetInstrumentationLibraryDocsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetInstrumentationLibraryDocsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstrumentationLibraryDocsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstrumentationLibraryDocsResponseMultiError) AllErrors() []error { return m }

// GetInstrumentationLibraryDocsResponseValidationError is the validation error
// returned by GetInstrumentationLibraryDocsResponse.Validate if the
// designated constraints aren't met.
type GetInstrumentationLibraryDocsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstrumentationLibraryDocsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstrumentationLibraryDocsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstrumentationLibraryDocsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstrumentationLibraryDocsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstrumentationLibraryDocsResponseValidationError) ErrorName() string {
	return "GetInstrumentationLibraryDocsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstrumentationLibraryDocsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstrumentationLibraryDocsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstrumentationLibraryDocsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstrumentationLibraryDocsResponseValidationError{}

// Validate checks the field values on Language with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Language) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Language with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LanguageMultiError, or nil
// if none found.
func (m *Language) ValidateAll() error {
	return m.validate(true)
}

func (m *Language) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Language

	if len(errors) > 0 {
		return LanguageMultiError(errors)
	}

	return nil
}

// LanguageMultiError is an error wrapping multiple validation errors returned
// by Language.ValidateAll() if the designated constraints aren't met.
type LanguageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LanguageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LanguageMultiError) AllErrors() []error { return m }

// LanguageValidationError is the validation error returned by
// Language.Validate if the designated constraints aren't met.
type LanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LanguageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LanguageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LanguageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LanguageValidationError) ErrorName() string { return "LanguageValidationError" }

// Error satisfies the builtin error interface
func (e LanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLanguage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LanguageValidationError{}

// Validate checks the field values on InstrumentationLibrary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstrumentationLibrary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstrumentationLibrary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstrumentationLibraryMultiError, or nil if none found.
func (m *InstrumentationLibrary) ValidateAll() error {
	return m.validate(true)
}

func (m *InstrumentationLibrary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Strategy

	for idx, item := range m.GetLanguages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstrumentationLibraryValidationError{
						field:  fmt.Sprintf("Languages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstrumentationLibraryValidationError{
						field:  fmt.Sprintf("Languages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstrumentationLibraryValidationError{
					field:  fmt.Sprintf("Languages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InstrumentationLibraryMultiError(errors)
	}

	return nil
}

// InstrumentationLibraryMultiError is an error wrapping multiple validation
// errors returned by InstrumentationLibrary.ValidateAll() if the designated
// constraints aren't met.
type InstrumentationLibraryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstrumentationLibraryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstrumentationLibraryMultiError) AllErrors() []error { return m }

// InstrumentationLibraryValidationError is the validation error returned by
// InstrumentationLibrary.Validate if the designated constraints aren't met.
type InstrumentationLibraryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstrumentationLibraryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstrumentationLibraryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstrumentationLibraryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstrumentationLibraryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstrumentationLibraryValidationError) ErrorName() string {
	return "InstrumentationLibraryValidationError"
}

// Error satisfies the builtin error interface
func (e InstrumentationLibraryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstrumentationLibrary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstrumentationLibraryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstrumentationLibraryValidationError{}
