// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: apm_alert.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on QueryAlertRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAlertRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAlertRuleRequestMultiError, or nil if none found.
func (m *QueryAlertRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return QueryAlertRuleRequestMultiError(errors)
	}

	return nil
}

// QueryAlertRuleRequestMultiError is an error wrapping multiple validation
// errors returned by QueryAlertRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryAlertRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertRuleRequestMultiError) AllErrors() []error { return m }

// QueryAlertRuleRequestValidationError is the validation error returned by
// QueryAlertRuleRequest.Validate if the designated constraints aren't met.
type QueryAlertRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertRuleRequestValidationError) ErrorName() string {
	return "QueryAlertRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertRuleRequestValidationError{}

// Validate checks the field values on QueryAlertRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAlertRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAlertRuleResponseMultiError, or nil if none found.
func (m *QueryAlertRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryAlertRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryAlertRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryAlertRuleResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryAlertRuleResponseMultiError(errors)
	}

	return nil
}

// QueryAlertRuleResponseMultiError is an error wrapping multiple validation
// errors returned by QueryAlertRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryAlertRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertRuleResponseMultiError) AllErrors() []error { return m }

// QueryAlertRuleResponseValidationError is the validation error returned by
// QueryAlertRuleResponse.Validate if the designated constraints aren't met.
type QueryAlertRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertRuleResponseValidationError) ErrorName() string {
	return "QueryAlertRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertRuleResponseValidationError{}

// Validate checks the field values on QueryAlertRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAlertRequestMultiError, or nil if none found.
func (m *QueryAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if m.GetPageNo() <= 0 {
		err := QueryAlertRequestValidationError{
			field:  "PageNo",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val >= 101 {
		err := QueryAlertRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 101)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return QueryAlertRequestMultiError(errors)
	}

	return nil
}

// QueryAlertRequestMultiError is an error wrapping multiple validation errors
// returned by QueryAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertRequestMultiError) AllErrors() []error { return m }

// QueryAlertRequestValidationError is the validation error returned by
// QueryAlertRequest.Validate if the designated constraints aren't met.
type QueryAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertRequestValidationError) ErrorName() string {
	return "QueryAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertRequestValidationError{}

// Validate checks the field values on QueryAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAlertResponseMultiError, or nil if none found.
func (m *QueryAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryAlertResponseMultiError(errors)
	}

	return nil
}

// QueryAlertResponseMultiError is an error wrapping multiple validation errors
// returned by QueryAlertResponse.ValidateAll() if the designated constraints
// aren't met.
type QueryAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertResponseMultiError) AllErrors() []error { return m }

// QueryAlertResponseValidationError is the validation error returned by
// QueryAlertResponse.Validate if the designated constraints aren't met.
type QueryAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertResponseValidationError) ErrorName() string {
	return "QueryAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertResponseValidationError{}

// Validate checks the field values on QueryAlertData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryAlertData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAlertData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryAlertDataMultiError,
// or nil if none found.
func (m *QueryAlertData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAlertData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryAlertDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryAlertDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryAlertDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryAlertDataMultiError(errors)
	}

	return nil
}

// QueryAlertDataMultiError is an error wrapping multiple validation errors
// returned by QueryAlertData.ValidateAll() if the designated constraints
// aren't met.
type QueryAlertDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAlertDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAlertDataMultiError) AllErrors() []error { return m }

// QueryAlertDataValidationError is the validation error returned by
// QueryAlertData.Validate if the designated constraints aren't met.
type QueryAlertDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAlertDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAlertDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAlertDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAlertDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAlertDataValidationError) ErrorName() string { return "QueryAlertDataValidationError" }

// Error satisfies the builtin error interface
func (e QueryAlertDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAlertData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAlertDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAlertDataValidationError{}

// Validate checks the field values on GetAlertRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertRequestMultiError, or nil if none found.
func (m *GetAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if m.GetId() <= 0 {
		err := GetAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAlertRequestMultiError(errors)
	}

	return nil
}

// GetAlertRequestMultiError is an error wrapping multiple validation errors
// returned by GetAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertRequestMultiError) AllErrors() []error { return m }

// GetAlertRequestValidationError is the validation error returned by
// GetAlertRequest.Validate if the designated constraints aren't met.
type GetAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertRequestValidationError) ErrorName() string { return "GetAlertRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertRequestValidationError{}

// Validate checks the field values on GetAlertResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertResponseMultiError, or nil if none found.
func (m *GetAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlertResponseMultiError(errors)
	}

	return nil
}

// GetAlertResponseMultiError is an error wrapping multiple validation errors
// returned by GetAlertResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertResponseMultiError) AllErrors() []error { return m }

// GetAlertResponseValidationError is the validation error returned by
// GetAlertResponse.Validate if the designated constraints aren't met.
type GetAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertResponseValidationError) ErrorName() string { return "GetAlertResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertResponseValidationError{}

// Validate checks the field values on ApmAlertData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApmAlertData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApmAlertData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApmAlertDataMultiError, or
// nil if none found.
func (m *ApmAlertData) ValidateAll() error {
	return m.validate(true)
}

func (m *ApmAlertData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApmAlertDataValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApmAlertDataValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApmAlertDataValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApmAlertDataValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApmAlertDataValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApmAlertDataValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Domain

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ApmAlertDataValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ApmAlertDataValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ApmAlertDataValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	for idx, item := range m.GetTriggerCondition() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApmAlertDataValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApmAlertDataValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApmAlertDataValidationError{
					field:  fmt.Sprintf("TriggerCondition[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Creator

	// no validation rules for RuleCount

	if len(errors) > 0 {
		return ApmAlertDataMultiError(errors)
	}

	return nil
}

// ApmAlertDataMultiError is an error wrapping multiple validation errors
// returned by ApmAlertData.ValidateAll() if the designated constraints aren't met.
type ApmAlertDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApmAlertDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApmAlertDataMultiError) AllErrors() []error { return m }

// ApmAlertDataValidationError is the validation error returned by
// ApmAlertData.Validate if the designated constraints aren't met.
type ApmAlertDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApmAlertDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApmAlertDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApmAlertDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApmAlertDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApmAlertDataValidationError) ErrorName() string { return "ApmAlertDataValidationError" }

// Error satisfies the builtin error interface
func (e ApmAlertDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApmAlertData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApmAlertDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApmAlertDataValidationError{}

// Validate checks the field values on CreateAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertRequestMultiError, or nil if none found.
func (m *CreateAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for Name

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Domain

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetTriggerCondition() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAlertRequestValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAlertRequestValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAlertRequestValidationError{
					field:  fmt.Sprintf("TriggerCondition[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateAlertRequestMultiError(errors)
	}

	return nil
}

// CreateAlertRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertRequestMultiError) AllErrors() []error { return m }

// CreateAlertRequestValidationError is the validation error returned by
// CreateAlertRequest.Validate if the designated constraints aren't met.
type CreateAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertRequestValidationError) ErrorName() string {
	return "CreateAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertRequestValidationError{}

// Validate checks the field values on CreateAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertResponseMultiError, or nil if none found.
func (m *CreateAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAlertResponseMultiError(errors)
	}

	return nil
}

// CreateAlertResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertResponseMultiError) AllErrors() []error { return m }

// CreateAlertResponseValidationError is the validation error returned by
// CreateAlertResponse.Validate if the designated constraints aren't met.
type CreateAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertResponseValidationError) ErrorName() string {
	return "CreateAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertResponseValidationError{}

// Validate checks the field values on CreateAlertData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertDataMultiError, or nil if none found.
func (m *CreateAlertData) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return CreateAlertDataMultiError(errors)
	}

	return nil
}

// CreateAlertDataMultiError is an error wrapping multiple validation errors
// returned by CreateAlertData.ValidateAll() if the designated constraints
// aren't met.
type CreateAlertDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertDataMultiError) AllErrors() []error { return m }

// CreateAlertDataValidationError is the validation error returned by
// CreateAlertData.Validate if the designated constraints aren't met.
type CreateAlertDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertDataValidationError) ErrorName() string { return "CreateAlertDataValidationError" }

// Error satisfies the builtin error interface
func (e CreateAlertDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertDataValidationError{}

// Validate checks the field values on UpdateAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlertRequestMultiError, or nil if none found.
func (m *UpdateAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Domain

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	for idx, item := range m.GetTriggerCondition() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAlertRequestValidationError{
						field:  fmt.Sprintf("TriggerCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAlertRequestValidationError{
					field:  fmt.Sprintf("TriggerCondition[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateAlertRequestMultiError(errors)
	}

	return nil
}

// UpdateAlertRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertRequestMultiError) AllErrors() []error { return m }

// UpdateAlertRequestValidationError is the validation error returned by
// UpdateAlertRequest.Validate if the designated constraints aren't met.
type UpdateAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertRequestValidationError) ErrorName() string {
	return "UpdateAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertRequestValidationError{}

// Validate checks the field values on UpdateAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlertResponseMultiError, or nil if none found.
func (m *UpdateAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return UpdateAlertResponseMultiError(errors)
	}

	return nil
}

// UpdateAlertResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertResponseMultiError) AllErrors() []error { return m }

// UpdateAlertResponseValidationError is the validation error returned by
// UpdateAlertResponse.Validate if the designated constraints aren't met.
type UpdateAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertResponseValidationError) ErrorName() string {
	return "UpdateAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertResponseValidationError{}

// Validate checks the field values on UpdateAlertEnableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertEnableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertEnableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlertEnableRequestMultiError, or nil if none found.
func (m *UpdateAlertEnableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertEnableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAlertEnableRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TenantGroup

	// no validation rules for Enable

	if len(errors) > 0 {
		return UpdateAlertEnableRequestMultiError(errors)
	}

	return nil
}

// UpdateAlertEnableRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAlertEnableRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAlertEnableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertEnableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertEnableRequestMultiError) AllErrors() []error { return m }

// UpdateAlertEnableRequestValidationError is the validation error returned by
// UpdateAlertEnableRequest.Validate if the designated constraints aren't met.
type UpdateAlertEnableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertEnableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertEnableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertEnableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertEnableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertEnableRequestValidationError) ErrorName() string {
	return "UpdateAlertEnableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertEnableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertEnableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertEnableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertEnableRequestValidationError{}

// Validate checks the field values on UpdateAlertEnableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertEnableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertEnableResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlertEnableResponseMultiError, or nil if none found.
func (m *UpdateAlertEnableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertEnableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return UpdateAlertEnableResponseMultiError(errors)
	}

	return nil
}

// UpdateAlertEnableResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAlertEnableResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateAlertEnableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertEnableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertEnableResponseMultiError) AllErrors() []error { return m }

// UpdateAlertEnableResponseValidationError is the validation error returned by
// UpdateAlertEnableResponse.Validate if the designated constraints aren't met.
type UpdateAlertEnableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertEnableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertEnableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertEnableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertEnableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertEnableResponseValidationError) ErrorName() string {
	return "UpdateAlertEnableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertEnableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertEnableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertEnableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertEnableResponseValidationError{}

// Validate checks the field values on DeleteAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAlertRequestMultiError, or nil if none found.
func (m *DeleteAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return DeleteAlertRequestMultiError(errors)
	}

	return nil
}

// DeleteAlertRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAlertRequestMultiError) AllErrors() []error { return m }

// DeleteAlertRequestValidationError is the validation error returned by
// DeleteAlertRequest.Validate if the designated constraints aren't met.
type DeleteAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAlertRequestValidationError) ErrorName() string {
	return "DeleteAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAlertRequestValidationError{}

// Validate checks the field values on DeleteAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAlertResponseMultiError, or nil if none found.
func (m *DeleteAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteAlertResponseMultiError(errors)
	}

	return nil
}

// DeleteAlertResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAlertResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAlertResponseMultiError) AllErrors() []error { return m }

// DeleteAlertResponseValidationError is the validation error returned by
// DeleteAlertResponse.Validate if the designated constraints aren't met.
type DeleteAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAlertResponseValidationError) ErrorName() string {
	return "DeleteAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAlertResponseValidationError{}

// Validate checks the field values on DeleteAlertData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAlertData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAlertData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAlertDataMultiError, or nil if none found.
func (m *DeleteAlertData) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAlertData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return DeleteAlertDataMultiError(errors)
	}

	return nil
}

// DeleteAlertDataMultiError is an error wrapping multiple validation errors
// returned by DeleteAlertData.ValidateAll() if the designated constraints
// aren't met.
type DeleteAlertDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAlertDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAlertDataMultiError) AllErrors() []error { return m }

// DeleteAlertDataValidationError is the validation error returned by
// DeleteAlertData.Validate if the designated constraints aren't met.
type DeleteAlertDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAlertDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAlertDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAlertDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAlertDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAlertDataValidationError) ErrorName() string { return "DeleteAlertDataValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAlertDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAlertData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAlertDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAlertDataValidationError{}

// Validate checks the field values on QueryCustomizeMetricRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCustomizeMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeMetricRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCustomizeMetricRequestMultiError, or nil if none found.
func (m *QueryCustomizeMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return QueryCustomizeMetricRequestMultiError(errors)
	}

	return nil
}

// QueryCustomizeMetricRequestMultiError is an error wrapping multiple
// validation errors returned by QueryCustomizeMetricRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryCustomizeMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeMetricRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeMetricRequestMultiError) AllErrors() []error { return m }

// QueryCustomizeMetricRequestValidationError is the validation error returned
// by QueryCustomizeMetricRequest.Validate if the designated constraints
// aren't met.
type QueryCustomizeMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeMetricRequestValidationError) ErrorName() string {
	return "QueryCustomizeMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeMetricRequestValidationError{}

// Validate checks the field values on QueryCustomizeMetricResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCustomizeMetricResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeMetricResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCustomizeMetricResponseMultiError, or nil if none found.
func (m *QueryCustomizeMetricResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeMetricResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryCustomizeMetricResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryCustomizeMetricResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryCustomizeMetricResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryCustomizeMetricResponseMultiError(errors)
	}

	return nil
}

// QueryCustomizeMetricResponseMultiError is an error wrapping multiple
// validation errors returned by QueryCustomizeMetricResponse.ValidateAll() if
// the designated constraints aren't met.
type QueryCustomizeMetricResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeMetricResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeMetricResponseMultiError) AllErrors() []error { return m }

// QueryCustomizeMetricResponseValidationError is the validation error returned
// by QueryCustomizeMetricResponse.Validate if the designated constraints
// aren't met.
type QueryCustomizeMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeMetricResponseValidationError) ErrorName() string {
	return "QueryCustomizeMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeMetricResponseValidationError{}

// Validate checks the field values on QueryCustomizeNotifyTargetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *QueryCustomizeNotifyTargetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeNotifyTargetRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// QueryCustomizeNotifyTargetRequestMultiError, or nil if none found.
func (m *QueryCustomizeNotifyTargetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeNotifyTargetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return QueryCustomizeNotifyTargetRequestMultiError(errors)
	}

	return nil
}

// QueryCustomizeNotifyTargetRequestMultiError is an error wrapping multiple
// validation errors returned by
// QueryCustomizeNotifyTargetRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryCustomizeNotifyTargetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeNotifyTargetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeNotifyTargetRequestMultiError) AllErrors() []error { return m }

// QueryCustomizeNotifyTargetRequestValidationError is the validation error
// returned by QueryCustomizeNotifyTargetRequest.Validate if the designated
// constraints aren't met.
type QueryCustomizeNotifyTargetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeNotifyTargetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeNotifyTargetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeNotifyTargetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeNotifyTargetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeNotifyTargetRequestValidationError) ErrorName() string {
	return "QueryCustomizeNotifyTargetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeNotifyTargetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeNotifyTargetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeNotifyTargetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeNotifyTargetRequestValidationError{}

// Validate checks the field values on QueryCustomizeNotifyTargetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *QueryCustomizeNotifyTargetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeNotifyTargetResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// QueryCustomizeNotifyTargetResponseMultiError, or nil if none found.
func (m *QueryCustomizeNotifyTargetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeNotifyTargetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryCustomizeNotifyTargetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryCustomizeNotifyTargetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryCustomizeNotifyTargetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryCustomizeNotifyTargetResponseMultiError(errors)
	}

	return nil
}

// QueryCustomizeNotifyTargetResponseMultiError is an error wrapping multiple
// validation errors returned by
// QueryCustomizeNotifyTargetResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryCustomizeNotifyTargetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeNotifyTargetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeNotifyTargetResponseMultiError) AllErrors() []error { return m }

// QueryCustomizeNotifyTargetResponseValidationError is the validation error
// returned by QueryCustomizeNotifyTargetResponse.Validate if the designated
// constraints aren't met.
type QueryCustomizeNotifyTargetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeNotifyTargetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeNotifyTargetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeNotifyTargetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeNotifyTargetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeNotifyTargetResponseValidationError) ErrorName() string {
	return "QueryCustomizeNotifyTargetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeNotifyTargetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeNotifyTargetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeNotifyTargetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeNotifyTargetResponseValidationError{}

// Validate checks the field values on QueryCustomizeAlertsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCustomizeAlertsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeAlertsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCustomizeAlertsRequestMultiError, or nil if none found.
func (m *QueryCustomizeAlertsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeAlertsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if m.GetPageNo() <= 0 {
		err := QueryCustomizeAlertsRequestValidationError{
			field:  "PageNo",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val >= 101 {
		err := QueryCustomizeAlertsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 101)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return QueryCustomizeAlertsRequestMultiError(errors)
	}

	return nil
}

// QueryCustomizeAlertsRequestMultiError is an error wrapping multiple
// validation errors returned by QueryCustomizeAlertsRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryCustomizeAlertsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeAlertsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeAlertsRequestMultiError) AllErrors() []error { return m }

// QueryCustomizeAlertsRequestValidationError is the validation error returned
// by QueryCustomizeAlertsRequest.Validate if the designated constraints
// aren't met.
type QueryCustomizeAlertsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeAlertsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeAlertsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeAlertsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeAlertsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeAlertsRequestValidationError) ErrorName() string {
	return "QueryCustomizeAlertsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeAlertsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeAlertsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeAlertsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeAlertsRequestValidationError{}

// Validate checks the field values on QueryCustomizeAlertsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCustomizeAlertsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCustomizeAlertsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCustomizeAlertsResponseMultiError, or nil if none found.
func (m *QueryCustomizeAlertsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCustomizeAlertsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryCustomizeAlertsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryCustomizeAlertsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryCustomizeAlertsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryCustomizeAlertsResponseMultiError(errors)
	}

	return nil
}

// QueryCustomizeAlertsResponseMultiError is an error wrapping multiple
// validation errors returned by QueryCustomizeAlertsResponse.ValidateAll() if
// the designated constraints aren't met.
type QueryCustomizeAlertsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCustomizeAlertsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCustomizeAlertsResponseMultiError) AllErrors() []error { return m }

// QueryCustomizeAlertsResponseValidationError is the validation error returned
// by QueryCustomizeAlertsResponse.Validate if the designated constraints
// aren't met.
type QueryCustomizeAlertsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCustomizeAlertsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCustomizeAlertsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCustomizeAlertsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCustomizeAlertsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCustomizeAlertsResponseValidationError) ErrorName() string {
	return "QueryCustomizeAlertsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCustomizeAlertsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCustomizeAlertsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCustomizeAlertsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCustomizeAlertsResponseValidationError{}

// Validate checks the field values on GetCustomizeAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomizeAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomizeAlertRequestMultiError, or nil if none found.
func (m *GetCustomizeAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomizeAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCustomizeAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return GetCustomizeAlertRequestMultiError(errors)
	}

	return nil
}

// GetCustomizeAlertRequestMultiError is an error wrapping multiple validation
// errors returned by GetCustomizeAlertRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCustomizeAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomizeAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomizeAlertRequestMultiError) AllErrors() []error { return m }

// GetCustomizeAlertRequestValidationError is the validation error returned by
// GetCustomizeAlertRequest.Validate if the designated constraints aren't met.
type GetCustomizeAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomizeAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomizeAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomizeAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomizeAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomizeAlertRequestValidationError) ErrorName() string {
	return "GetCustomizeAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomizeAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomizeAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomizeAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomizeAlertRequestValidationError{}

// Validate checks the field values on GetCustomizeAlertResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomizeAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomizeAlertResponseMultiError, or nil if none found.
func (m *GetCustomizeAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomizeAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCustomizeAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCustomizeAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomizeAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCustomizeAlertResponseMultiError(errors)
	}

	return nil
}

// GetCustomizeAlertResponseMultiError is an error wrapping multiple validation
// errors returned by GetCustomizeAlertResponse.ValidateAll() if the
// designated constraints aren't met.
type GetCustomizeAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomizeAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomizeAlertResponseMultiError) AllErrors() []error { return m }

// GetCustomizeAlertResponseValidationError is the validation error returned by
// GetCustomizeAlertResponse.Validate if the designated constraints aren't met.
type GetCustomizeAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomizeAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomizeAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomizeAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomizeAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomizeAlertResponseValidationError) ErrorName() string {
	return "GetCustomizeAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomizeAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomizeAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomizeAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomizeAlertResponseValidationError{}

// Validate checks the field values on CreateCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomizeAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomizeAlertRequestMultiError, or nil if none found.
func (m *CreateCustomizeAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomizeAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for Id

	// no validation rules for ClusterName

	// no validation rules for Name

	// no validation rules for AlertType

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateCustomizeAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateCustomizeAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCustomizeAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCustomizeAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return CreateCustomizeAlertRequestMultiError(errors)
	}

	return nil
}

// CreateCustomizeAlertRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCustomizeAlertRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateCustomizeAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomizeAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomizeAlertRequestMultiError) AllErrors() []error { return m }

// CreateCustomizeAlertRequestValidationError is the validation error returned
// by CreateCustomizeAlertRequest.Validate if the designated constraints
// aren't met.
type CreateCustomizeAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomizeAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomizeAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomizeAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomizeAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomizeAlertRequestValidationError) ErrorName() string {
	return "CreateCustomizeAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomizeAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomizeAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomizeAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomizeAlertRequestValidationError{}

// Validate checks the field values on CreateCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomizeAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomizeAlertResponseMultiError, or nil if none found.
func (m *CreateCustomizeAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomizeAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCustomizeAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCustomizeAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCustomizeAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCustomizeAlertResponseMultiError(errors)
	}

	return nil
}

// CreateCustomizeAlertResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCustomizeAlertResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateCustomizeAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomizeAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomizeAlertResponseMultiError) AllErrors() []error { return m }

// CreateCustomizeAlertResponseValidationError is the validation error returned
// by CreateCustomizeAlertResponse.Validate if the designated constraints
// aren't met.
type CreateCustomizeAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomizeAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomizeAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomizeAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomizeAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomizeAlertResponseValidationError) ErrorName() string {
	return "CreateCustomizeAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomizeAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomizeAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomizeAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomizeAlertResponseValidationError{}

// Validate checks the field values on CreateCustomizeAlertData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomizeAlertData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomizeAlertData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomizeAlertDataMultiError, or nil if none found.
func (m *CreateCustomizeAlertData) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomizeAlertData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return CreateCustomizeAlertDataMultiError(errors)
	}

	return nil
}

// CreateCustomizeAlertDataMultiError is an error wrapping multiple validation
// errors returned by CreateCustomizeAlertData.ValidateAll() if the designated
// constraints aren't met.
type CreateCustomizeAlertDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomizeAlertDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomizeAlertDataMultiError) AllErrors() []error { return m }

// CreateCustomizeAlertDataValidationError is the validation error returned by
// CreateCustomizeAlertData.Validate if the designated constraints aren't met.
type CreateCustomizeAlertDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomizeAlertDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomizeAlertDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomizeAlertDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomizeAlertDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomizeAlertDataValidationError) ErrorName() string {
	return "CreateCustomizeAlertDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomizeAlertDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomizeAlertData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomizeAlertDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomizeAlertDataValidationError{}

// Validate checks the field values on UpdateCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCustomizeAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCustomizeAlertRequestMultiError, or nil if none found.
func (m *UpdateCustomizeAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomizeAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateCustomizeAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TenantGroup

	// no validation rules for ClusterName

	// no validation rules for Name

	// no validation rules for AlertType

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateCustomizeAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateCustomizeAlertRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCustomizeAlertRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCustomizeAlertRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCustomizeAlertRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return UpdateCustomizeAlertRequestMultiError(errors)
	}

	return nil
}

// UpdateCustomizeAlertRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCustomizeAlertRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCustomizeAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomizeAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomizeAlertRequestMultiError) AllErrors() []error { return m }

// UpdateCustomizeAlertRequestValidationError is the validation error returned
// by UpdateCustomizeAlertRequest.Validate if the designated constraints
// aren't met.
type UpdateCustomizeAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomizeAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomizeAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomizeAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomizeAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomizeAlertRequestValidationError) ErrorName() string {
	return "UpdateCustomizeAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomizeAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomizeAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomizeAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomizeAlertRequestValidationError{}

// Validate checks the field values on UpdateCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCustomizeAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCustomizeAlertResponseMultiError, or nil if none found.
func (m *UpdateCustomizeAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomizeAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return UpdateCustomizeAlertResponseMultiError(errors)
	}

	return nil
}

// UpdateCustomizeAlertResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCustomizeAlertResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateCustomizeAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomizeAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomizeAlertResponseMultiError) AllErrors() []error { return m }

// UpdateCustomizeAlertResponseValidationError is the validation error returned
// by UpdateCustomizeAlertResponse.Validate if the designated constraints
// aren't met.
type UpdateCustomizeAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomizeAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomizeAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomizeAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomizeAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomizeAlertResponseValidationError) ErrorName() string {
	return "UpdateCustomizeAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomizeAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomizeAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomizeAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomizeAlertResponseValidationError{}

// Validate checks the field values on UpdateCustomizeAlertEnableRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateCustomizeAlertEnableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomizeAlertEnableRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateCustomizeAlertEnableRequestMultiError, or nil if none found.
func (m *UpdateCustomizeAlertEnableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomizeAlertEnableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateCustomizeAlertEnableRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TenantGroup

	// no validation rules for Enable

	if len(errors) > 0 {
		return UpdateCustomizeAlertEnableRequestMultiError(errors)
	}

	return nil
}

// UpdateCustomizeAlertEnableRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCustomizeAlertEnableRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCustomizeAlertEnableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomizeAlertEnableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomizeAlertEnableRequestMultiError) AllErrors() []error { return m }

// UpdateCustomizeAlertEnableRequestValidationError is the validation error
// returned by UpdateCustomizeAlertEnableRequest.Validate if the designated
// constraints aren't met.
type UpdateCustomizeAlertEnableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomizeAlertEnableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomizeAlertEnableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomizeAlertEnableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomizeAlertEnableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomizeAlertEnableRequestValidationError) ErrorName() string {
	return "UpdateCustomizeAlertEnableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomizeAlertEnableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomizeAlertEnableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomizeAlertEnableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomizeAlertEnableRequestValidationError{}

// Validate checks the field values on UpdateCustomizeAlertEnableResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateCustomizeAlertEnableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomizeAlertEnableResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateCustomizeAlertEnableResponseMultiError, or nil if none found.
func (m *UpdateCustomizeAlertEnableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomizeAlertEnableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCustomizeAlertEnableResponseMultiError(errors)
	}

	return nil
}

// UpdateCustomizeAlertEnableResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCustomizeAlertEnableResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCustomizeAlertEnableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomizeAlertEnableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomizeAlertEnableResponseMultiError) AllErrors() []error { return m }

// UpdateCustomizeAlertEnableResponseValidationError is the validation error
// returned by UpdateCustomizeAlertEnableResponse.Validate if the designated
// constraints aren't met.
type UpdateCustomizeAlertEnableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomizeAlertEnableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomizeAlertEnableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomizeAlertEnableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomizeAlertEnableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomizeAlertEnableResponseValidationError) ErrorName() string {
	return "UpdateCustomizeAlertEnableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomizeAlertEnableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomizeAlertEnableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomizeAlertEnableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomizeAlertEnableResponseValidationError{}

// Validate checks the field values on DeleteCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomizeAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomizeAlertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCustomizeAlertRequestMultiError, or nil if none found.
func (m *DeleteCustomizeAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomizeAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteCustomizeAlertRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return DeleteCustomizeAlertRequestMultiError(errors)
	}

	return nil
}

// DeleteCustomizeAlertRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCustomizeAlertRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteCustomizeAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomizeAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomizeAlertRequestMultiError) AllErrors() []error { return m }

// DeleteCustomizeAlertRequestValidationError is the validation error returned
// by DeleteCustomizeAlertRequest.Validate if the designated constraints
// aren't met.
type DeleteCustomizeAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomizeAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomizeAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomizeAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomizeAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomizeAlertRequestValidationError) ErrorName() string {
	return "DeleteCustomizeAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomizeAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomizeAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomizeAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomizeAlertRequestValidationError{}

// Validate checks the field values on DeleteCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomizeAlertResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomizeAlertResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCustomizeAlertResponseMultiError, or nil if none found.
func (m *DeleteCustomizeAlertResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomizeAlertResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCustomizeAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCustomizeAlertResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCustomizeAlertResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteCustomizeAlertResponseMultiError(errors)
	}

	return nil
}

// DeleteCustomizeAlertResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCustomizeAlertResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteCustomizeAlertResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomizeAlertResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomizeAlertResponseMultiError) AllErrors() []error { return m }

// DeleteCustomizeAlertResponseValidationError is the validation error returned
// by DeleteCustomizeAlertResponse.Validate if the designated constraints
// aren't met.
type DeleteCustomizeAlertResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomizeAlertResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomizeAlertResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomizeAlertResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomizeAlertResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomizeAlertResponseValidationError) ErrorName() string {
	return "DeleteCustomizeAlertResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomizeAlertResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomizeAlertResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomizeAlertResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomizeAlertResponseValidationError{}

// Validate checks the field values on DeleteCustomizeAlertData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomizeAlertData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomizeAlertData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCustomizeAlertDataMultiError, or nil if none found.
func (m *DeleteCustomizeAlertData) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomizeAlertData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return DeleteCustomizeAlertDataMultiError(errors)
	}

	return nil
}

// DeleteCustomizeAlertDataMultiError is an error wrapping multiple validation
// errors returned by DeleteCustomizeAlertData.ValidateAll() if the designated
// constraints aren't met.
type DeleteCustomizeAlertDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomizeAlertDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomizeAlertDataMultiError) AllErrors() []error { return m }

// DeleteCustomizeAlertDataValidationError is the validation error returned by
// DeleteCustomizeAlertData.Validate if the designated constraints aren't met.
type DeleteCustomizeAlertDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomizeAlertDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomizeAlertDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomizeAlertDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomizeAlertDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomizeAlertDataValidationError) ErrorName() string {
	return "DeleteCustomizeAlertDataValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomizeAlertDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomizeAlertData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomizeAlertDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomizeAlertDataValidationError{}

// Validate checks the field values on GetAlertRecordAttrsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertRecordAttrsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertRecordAttrsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertRecordAttrsRequestMultiError, or nil if none found.
func (m *GetAlertRecordAttrsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertRecordAttrsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return GetAlertRecordAttrsRequestMultiError(errors)
	}

	return nil
}

// GetAlertRecordAttrsRequestMultiError is an error wrapping multiple
// validation errors returned by GetAlertRecordAttrsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAlertRecordAttrsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertRecordAttrsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertRecordAttrsRequestMultiError) AllErrors() []error { return m }

// GetAlertRecordAttrsRequestValidationError is the validation error returned
// by GetAlertRecordAttrsRequest.Validate if the designated constraints aren't met.
type GetAlertRecordAttrsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertRecordAttrsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertRecordAttrsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertRecordAttrsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertRecordAttrsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertRecordAttrsRequestValidationError) ErrorName() string {
	return "GetAlertRecordAttrsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertRecordAttrsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertRecordAttrsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertRecordAttrsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertRecordAttrsRequestValidationError{}

// Validate checks the field values on GetAlertRecordAttrsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertRecordAttrsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertRecordAttrsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertRecordAttrsResponseMultiError, or nil if none found.
func (m *GetAlertRecordAttrsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertRecordAttrsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlertRecordAttrsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlertRecordAttrsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertRecordAttrsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlertRecordAttrsResponseMultiError(errors)
	}

	return nil
}

// GetAlertRecordAttrsResponseMultiError is an error wrapping multiple
// validation errors returned by GetAlertRecordAttrsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAlertRecordAttrsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertRecordAttrsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertRecordAttrsResponseMultiError) AllErrors() []error { return m }

// GetAlertRecordAttrsResponseValidationError is the validation error returned
// by GetAlertRecordAttrsResponse.Validate if the designated constraints
// aren't met.
type GetAlertRecordAttrsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertRecordAttrsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertRecordAttrsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertRecordAttrsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertRecordAttrsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertRecordAttrsResponseValidationError) ErrorName() string {
	return "GetAlertRecordAttrsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertRecordAttrsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertRecordAttrsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertRecordAttrsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertRecordAttrsResponseValidationError{}

// Validate checks the field values on GetAlertRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertRecordsRequestMultiError, or nil if none found.
func (m *GetAlertRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetAlertRecordsRequestMultiError(errors)
	}

	return nil
}

// GetAlertRecordsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAlertRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAlertRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertRecordsRequestMultiError) AllErrors() []error { return m }

// GetAlertRecordsRequestValidationError is the validation error returned by
// GetAlertRecordsRequest.Validate if the designated constraints aren't met.
type GetAlertRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertRecordsRequestValidationError) ErrorName() string {
	return "GetAlertRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertRecordsRequestValidationError{}

// Validate checks the field values on GetAlertRecordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertRecordsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertRecordsResponseMultiError, or nil if none found.
func (m *GetAlertRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlertRecordsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlertRecordsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertRecordsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlertRecordsResponseMultiError(errors)
	}

	return nil
}

// GetAlertRecordsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAlertRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAlertRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertRecordsResponseMultiError) AllErrors() []error { return m }

// GetAlertRecordsResponseValidationError is the validation error returned by
// GetAlertRecordsResponse.Validate if the designated constraints aren't met.
type GetAlertRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertRecordsResponseValidationError) ErrorName() string {
	return "GetAlertRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertRecordsResponseValidationError{}

// Validate checks the field values on GetAlertRecordsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertRecordsData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertRecordsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertRecordsDataMultiError, or nil if none found.
func (m *GetAlertRecordsData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertRecordsData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAlertRecordsDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAlertRecordsDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAlertRecordsDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetAlertRecordsDataMultiError(errors)
	}

	return nil
}

// GetAlertRecordsDataMultiError is an error wrapping multiple validation
// errors returned by GetAlertRecordsData.ValidateAll() if the designated
// constraints aren't met.
type GetAlertRecordsDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertRecordsDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertRecordsDataMultiError) AllErrors() []error { return m }

// GetAlertRecordsDataValidationError is the validation error returned by
// GetAlertRecordsData.Validate if the designated constraints aren't met.
type GetAlertRecordsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertRecordsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertRecordsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertRecordsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertRecordsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertRecordsDataValidationError) ErrorName() string {
	return "GetAlertRecordsDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertRecordsDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertRecordsData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertRecordsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertRecordsDataValidationError{}

// Validate checks the field values on GetAlertRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertRecordRequestMultiError, or nil if none found.
func (m *GetAlertRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return GetAlertRecordRequestMultiError(errors)
	}

	return nil
}

// GetAlertRecordRequestMultiError is an error wrapping multiple validation
// errors returned by GetAlertRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAlertRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertRecordRequestMultiError) AllErrors() []error { return m }

// GetAlertRecordRequestValidationError is the validation error returned by
// GetAlertRecordRequest.Validate if the designated constraints aren't met.
type GetAlertRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertRecordRequestValidationError) ErrorName() string {
	return "GetAlertRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertRecordRequestValidationError{}

// Validate checks the field values on GetAlertRecordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertRecordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertRecordResponseMultiError, or nil if none found.
func (m *GetAlertRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAlertRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAlertRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAlertRecordResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAlertRecordResponseMultiError(errors)
	}

	return nil
}

// GetAlertRecordResponseMultiError is an error wrapping multiple validation
// errors returned by GetAlertRecordResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAlertRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertRecordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertRecordResponseMultiError) AllErrors() []error { return m }

// GetAlertRecordResponseValidationError is the validation error returned by
// GetAlertRecordResponse.Validate if the designated constraints aren't met.
type GetAlertRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertRecordResponseValidationError) ErrorName() string {
	return "GetAlertRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertRecordResponseValidationError{}

// Validate checks the field values on GetAlertHistoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertHistoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertHistoriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertHistoriesRequestMultiError, or nil if none found.
func (m *GetAlertHistoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertHistoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for TenantGroup

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetAlertHistoriesRequestMultiError(errors)
	}

	return nil
}

// GetAlertHistoriesRequestMultiError is an error wrapping multiple validation
// errors returned by GetAlertHistoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAlertHistoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertHistoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertHistoriesRequestMultiError) AllErrors() []error { return m }

// GetAlertHistoriesRequestValidationError is the validation error returned by
// GetAlertHistoriesRequest.Validate if the designated constraints aren't met.
type GetAlertHistoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertHistoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertHistoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertHistoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertHistoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertHistoriesRequestValidationError) ErrorName() string {
	return "GetAlertHistoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertHistoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertHistoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertHistoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertHistoriesRequestValidationError{}

// Validate checks the field values on GetAlertHistoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertHistoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertHistoriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertHistoriesResponseMultiError, or nil if none found.
func (m *GetAlertHistoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertHistoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAlertHistoriesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAlertHistoriesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAlertHistoriesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAlertHistoriesResponseMultiError(errors)
	}

	return nil
}

// GetAlertHistoriesResponseMultiError is an error wrapping multiple validation
// errors returned by GetAlertHistoriesResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAlertHistoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertHistoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertHistoriesResponseMultiError) AllErrors() []error { return m }

// GetAlertHistoriesResponseValidationError is the validation error returned by
// GetAlertHistoriesResponse.Validate if the designated constraints aren't met.
type GetAlertHistoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertHistoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertHistoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertHistoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertHistoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertHistoriesResponseValidationError) ErrorName() string {
	return "GetAlertHistoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertHistoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertHistoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertHistoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertHistoriesResponseValidationError{}

// Validate checks the field values on CreateAlertRecordIssueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertRecordIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertRecordIssueRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateAlertRecordIssueRequestMultiError, or nil if none found.
func (m *CreateAlertRecordIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertRecordIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for TenantGroup

	{
		sorted_keys := make([]string, len(m.GetBody()))
		i := 0
		for key := range m.GetBody() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBody()[key]
			_ = val

			// no validation rules for Body[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateAlertRecordIssueRequestValidationError{
							field:  fmt.Sprintf("Body[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateAlertRecordIssueRequestValidationError{
							field:  fmt.Sprintf("Body[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateAlertRecordIssueRequestValidationError{
						field:  fmt.Sprintf("Body[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CreateAlertRecordIssueRequestMultiError(errors)
	}

	return nil
}

// CreateAlertRecordIssueRequestMultiError is an error wrapping multiple
// validation errors returned by CreateAlertRecordIssueRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateAlertRecordIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertRecordIssueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertRecordIssueRequestMultiError) AllErrors() []error { return m }

// CreateAlertRecordIssueRequestValidationError is the validation error
// returned by CreateAlertRecordIssueRequest.Validate if the designated
// constraints aren't met.
type CreateAlertRecordIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertRecordIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertRecordIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertRecordIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertRecordIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertRecordIssueRequestValidationError) ErrorName() string {
	return "CreateAlertRecordIssueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertRecordIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertRecordIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertRecordIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertRecordIssueRequestValidationError{}

// Validate checks the field values on CreateAlertRecordIssueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertRecordIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertRecordIssueResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateAlertRecordIssueResponseMultiError, or nil if none found.
func (m *CreateAlertRecordIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertRecordIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAlertRecordIssueResponseMultiError(errors)
	}

	return nil
}

// CreateAlertRecordIssueResponseMultiError is an error wrapping multiple
// validation errors returned by CreateAlertRecordIssueResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateAlertRecordIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertRecordIssueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertRecordIssueResponseMultiError) AllErrors() []error { return m }

// CreateAlertRecordIssueResponseValidationError is the validation error
// returned by CreateAlertRecordIssueResponse.Validate if the designated
// constraints aren't met.
type CreateAlertRecordIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertRecordIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertRecordIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertRecordIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertRecordIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertRecordIssueResponseValidationError) ErrorName() string {
	return "CreateAlertRecordIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertRecordIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertRecordIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertRecordIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertRecordIssueResponseValidationError{}

// Validate checks the field values on UpdateAlertRecordIssueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertRecordIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertRecordIssueRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAlertRecordIssueRequestMultiError, or nil if none found.
func (m *UpdateAlertRecordIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertRecordIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for TenantGroup

	{
		sorted_keys := make([]string, len(m.GetBody()))
		i := 0
		for key := range m.GetBody() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBody()[key]
			_ = val

			// no validation rules for Body[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateAlertRecordIssueRequestValidationError{
							field:  fmt.Sprintf("Body[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateAlertRecordIssueRequestValidationError{
							field:  fmt.Sprintf("Body[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateAlertRecordIssueRequestValidationError{
						field:  fmt.Sprintf("Body[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return UpdateAlertRecordIssueRequestMultiError(errors)
	}

	return nil
}

// UpdateAlertRecordIssueRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAlertRecordIssueRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateAlertRecordIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertRecordIssueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertRecordIssueRequestMultiError) AllErrors() []error { return m }

// UpdateAlertRecordIssueRequestValidationError is the validation error
// returned by UpdateAlertRecordIssueRequest.Validate if the designated
// constraints aren't met.
type UpdateAlertRecordIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertRecordIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertRecordIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertRecordIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertRecordIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertRecordIssueRequestValidationError) ErrorName() string {
	return "UpdateAlertRecordIssueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertRecordIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertRecordIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertRecordIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertRecordIssueRequestValidationError{}

// Validate checks the field values on UpdateAlertRecordIssueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlertRecordIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlertRecordIssueResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAlertRecordIssueResponseMultiError, or nil if none found.
func (m *UpdateAlertRecordIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlertRecordIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAlertRecordIssueResponseMultiError(errors)
	}

	return nil
}

// UpdateAlertRecordIssueResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAlertRecordIssueResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateAlertRecordIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlertRecordIssueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlertRecordIssueResponseMultiError) AllErrors() []error { return m }

// UpdateAlertRecordIssueResponseValidationError is the validation error
// returned by UpdateAlertRecordIssueResponse.Validate if the designated
// constraints aren't met.
type UpdateAlertRecordIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlertRecordIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlertRecordIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlertRecordIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlertRecordIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlertRecordIssueResponseValidationError) ErrorName() string {
	return "UpdateAlertRecordIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlertRecordIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlertRecordIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlertRecordIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlertRecordIssueResponseValidationError{}

// Validate checks the field values on DashboardPreviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DashboardPreviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DashboardPreviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DashboardPreviewRequestMultiError, or nil if none found.
func (m *DashboardPreviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DashboardPreviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for Id

	// no validation rules for ClusterName

	// no validation rules for Name

	// no validation rules for AlertType

	// no validation rules for AlertScope

	// no validation rules for AlertScopeId

	// no validation rules for Enable

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DashboardPreviewRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DashboardPreviewRequestValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DashboardPreviewRequestValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DashboardPreviewRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DashboardPreviewRequestValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DashboardPreviewRequestValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetNotifies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DashboardPreviewRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DashboardPreviewRequestValidationError{
						field:  fmt.Sprintf("Notifies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DashboardPreviewRequestValidationError{
					field:  fmt.Sprintf("Notifies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return DashboardPreviewRequestMultiError(errors)
	}

	return nil
}

// DashboardPreviewRequestMultiError is an error wrapping multiple validation
// errors returned by DashboardPreviewRequest.ValidateAll() if the designated
// constraints aren't met.
type DashboardPreviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DashboardPreviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DashboardPreviewRequestMultiError) AllErrors() []error { return m }

// DashboardPreviewRequestValidationError is the validation error returned by
// DashboardPreviewRequest.Validate if the designated constraints aren't met.
type DashboardPreviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardPreviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardPreviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardPreviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardPreviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardPreviewRequestValidationError) ErrorName() string {
	return "DashboardPreviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardPreviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardPreviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardPreviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardPreviewRequestValidationError{}

// Validate checks the field values on DashboardPreviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DashboardPreviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DashboardPreviewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DashboardPreviewResponseMultiError, or nil if none found.
func (m *DashboardPreviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DashboardPreviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DashboardPreviewResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DashboardPreviewResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DashboardPreviewResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DashboardPreviewResponseMultiError(errors)
	}

	return nil
}

// DashboardPreviewResponseMultiError is an error wrapping multiple validation
// errors returned by DashboardPreviewResponse.ValidateAll() if the designated
// constraints aren't met.
type DashboardPreviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DashboardPreviewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DashboardPreviewResponseMultiError) AllErrors() []error { return m }

// DashboardPreviewResponseValidationError is the validation error returned by
// DashboardPreviewResponse.Validate if the designated constraints aren't met.
type DashboardPreviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DashboardPreviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DashboardPreviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DashboardPreviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DashboardPreviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DashboardPreviewResponseValidationError) ErrorName() string {
	return "DashboardPreviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DashboardPreviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDashboardPreviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DashboardPreviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DashboardPreviewResponseValidationError{}

// Validate checks the field values on GetAlertConditionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertConditionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertConditionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertConditionsRequestMultiError, or nil if none found.
func (m *GetAlertConditionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertConditionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	if len(errors) > 0 {
		return GetAlertConditionsRequestMultiError(errors)
	}

	return nil
}

// GetAlertConditionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAlertConditionsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetAlertConditionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertConditionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertConditionsRequestMultiError) AllErrors() []error { return m }

// GetAlertConditionsRequestValidationError is the validation error returned by
// GetAlertConditionsRequest.Validate if the designated constraints aren't met.
type GetAlertConditionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertConditionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertConditionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertConditionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertConditionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertConditionsRequestValidationError) ErrorName() string {
	return "GetAlertConditionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertConditionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertConditionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertConditionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertConditionsRequestValidationError{}

// Validate checks the field values on GetAlertConditionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertConditionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertConditionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlertConditionsResponseMultiError, or nil if none found.
func (m *GetAlertConditionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertConditionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAlertConditionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAlertConditionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAlertConditionsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAlertConditionsResponseMultiError(errors)
	}

	return nil
}

// GetAlertConditionsResponseMultiError is an error wrapping multiple
// validation errors returned by GetAlertConditionsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAlertConditionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertConditionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertConditionsResponseMultiError) AllErrors() []error { return m }

// GetAlertConditionsResponseValidationError is the validation error returned
// by GetAlertConditionsResponse.Validate if the designated constraints aren't met.
type GetAlertConditionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertConditionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertConditionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertConditionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertConditionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertConditionsResponseValidationError) ErrorName() string {
	return "GetAlertConditionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertConditionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertConditionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertConditionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertConditionsResponseValidationError{}

// Validate checks the field values on GetAlertConditionsValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertConditionsValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertConditionsValueRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAlertConditionsValueRequestMultiError, or nil if none found.
func (m *GetAlertConditionsValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertConditionsValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAlertConditionsValueRequestValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAlertConditionsValueRequestValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAlertConditionsValueRequestValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAlertConditionsValueRequestMultiError(errors)
	}

	return nil
}

// GetAlertConditionsValueRequestMultiError is an error wrapping multiple
// validation errors returned by GetAlertConditionsValueRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAlertConditionsValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertConditionsValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertConditionsValueRequestMultiError) AllErrors() []error { return m }

// GetAlertConditionsValueRequestValidationError is the validation error
// returned by GetAlertConditionsValueRequest.Validate if the designated
// constraints aren't met.
type GetAlertConditionsValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertConditionsValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertConditionsValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertConditionsValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertConditionsValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertConditionsValueRequestValidationError) ErrorName() string {
	return "GetAlertConditionsValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertConditionsValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertConditionsValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertConditionsValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertConditionsValueRequestValidationError{}

// Validate checks the field values on GetAlertConditionsValueResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAlertConditionsValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlertConditionsValueResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAlertConditionsValueResponseMultiError, or nil if none found.
func (m *GetAlertConditionsValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlertConditionsValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAlertConditionsValueResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAlertConditionsValueResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAlertConditionsValueResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAlertConditionsValueResponseMultiError(errors)
	}

	return nil
}

// GetAlertConditionsValueResponseMultiError is an error wrapping multiple
// validation errors returned by GetAlertConditionsValueResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAlertConditionsValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlertConditionsValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlertConditionsValueResponseMultiError) AllErrors() []error { return m }

// GetAlertConditionsValueResponseValidationError is the validation error
// returned by GetAlertConditionsValueResponse.Validate if the designated
// constraints aren't met.
type GetAlertConditionsValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlertConditionsValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlertConditionsValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlertConditionsValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlertConditionsValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlertConditionsValueResponseValidationError) ErrorName() string {
	return "GetAlertConditionsValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAlertConditionsValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlertConditionsValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlertConditionsValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlertConditionsValueResponseValidationError{}
