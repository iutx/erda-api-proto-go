// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: credential.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccessKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccessKeyRequestMultiError, or nil if none found.
func (m *CreateAccessKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccessKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubjectType

	// no validation rules for Subject

	// no validation rules for Description

	// no validation rules for Scope

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return CreateAccessKeyRequestMultiError(errors)
	}

	return nil
}

// CreateAccessKeyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAccessKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAccessKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccessKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccessKeyRequestMultiError) AllErrors() []error { return m }

// CreateAccessKeyRequestValidationError is the validation error returned by
// CreateAccessKeyRequest.Validate if the designated constraints aren't met.
type CreateAccessKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccessKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccessKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccessKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccessKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccessKeyRequestValidationError) ErrorName() string {
	return "CreateAccessKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccessKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccessKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccessKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccessKeyRequestValidationError{}

// Validate checks the field values on CreateAccessKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccessKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccessKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccessKeyResponseMultiError, or nil if none found.
func (m *CreateAccessKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccessKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccessKeyResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccessKeyResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccessKeyResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAccessKeyResponseMultiError(errors)
	}

	return nil
}

// CreateAccessKeyResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAccessKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAccessKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccessKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccessKeyResponseMultiError) AllErrors() []error { return m }

// CreateAccessKeyResponseValidationError is the validation error returned by
// CreateAccessKeyResponse.Validate if the designated constraints aren't met.
type CreateAccessKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccessKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccessKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccessKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccessKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccessKeyResponseValidationError) ErrorName() string {
	return "CreateAccessKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccessKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccessKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccessKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccessKeyResponseValidationError{}

// Validate checks the field values on CreateAccessKeyData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccessKeyData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccessKeyData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccessKeyDataMultiError, or nil if none found.
func (m *CreateAccessKeyData) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccessKeyData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return CreateAccessKeyDataMultiError(errors)
	}

	return nil
}

// CreateAccessKeyDataMultiError is an error wrapping multiple validation
// errors returned by CreateAccessKeyData.ValidateAll() if the designated
// constraints aren't met.
type CreateAccessKeyDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccessKeyDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccessKeyDataMultiError) AllErrors() []error { return m }

// CreateAccessKeyDataValidationError is the validation error returned by
// CreateAccessKeyData.Validate if the designated constraints aren't met.
type CreateAccessKeyDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccessKeyDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccessKeyDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccessKeyDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccessKeyDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccessKeyDataValidationError) ErrorName() string {
	return "CreateAccessKeyDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccessKeyDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccessKeyData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccessKeyDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccessKeyDataValidationError{}

// Validate checks the field values on DeleteAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccessKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccessKeyRequestMultiError, or nil if none found.
func (m *DeleteAccessKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccessKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAccessKeyRequestMultiError(errors)
	}

	return nil
}

// DeleteAccessKeyRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAccessKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccessKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccessKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccessKeyRequestMultiError) AllErrors() []error { return m }

// DeleteAccessKeyRequestValidationError is the validation error returned by
// DeleteAccessKeyRequest.Validate if the designated constraints aren't met.
type DeleteAccessKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccessKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccessKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccessKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccessKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccessKeyRequestValidationError) ErrorName() string {
	return "DeleteAccessKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccessKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccessKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccessKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccessKeyRequestValidationError{}

// Validate checks the field values on DeleteAccessKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccessKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccessKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccessKeyResponseMultiError, or nil if none found.
func (m *DeleteAccessKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccessKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteAccessKeyResponseMultiError(errors)
	}

	return nil
}

// DeleteAccessKeyResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAccessKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccessKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccessKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccessKeyResponseMultiError) AllErrors() []error { return m }

// DeleteAccessKeyResponseValidationError is the validation error returned by
// DeleteAccessKeyResponse.Validate if the designated constraints aren't met.
type DeleteAccessKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccessKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccessKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccessKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccessKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccessKeyResponseValidationError) ErrorName() string {
	return "DeleteAccessKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccessKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccessKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccessKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccessKeyResponseValidationError{}

// Validate checks the field values on GetAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessKeyRequestMultiError, or nil if none found.
func (m *GetAccessKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAccessKeyRequestMultiError(errors)
	}

	return nil
}

// GetAccessKeyRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccessKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccessKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessKeyRequestMultiError) AllErrors() []error { return m }

// GetAccessKeyRequestValidationError is the validation error returned by
// GetAccessKeyRequest.Validate if the designated constraints aren't met.
type GetAccessKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessKeyRequestValidationError) ErrorName() string {
	return "GetAccessKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessKeyRequestValidationError{}

// Validate checks the field values on GetAccessKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessKeyResponseMultiError, or nil if none found.
func (m *GetAccessKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccessKeyResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccessKeyResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccessKeyResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccessKeyResponseMultiError(errors)
	}

	return nil
}

// GetAccessKeyResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccessKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccessKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessKeyResponseMultiError) AllErrors() []error { return m }

// GetAccessKeyResponseValidationError is the validation error returned by
// GetAccessKeyResponse.Validate if the designated constraints aren't met.
type GetAccessKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessKeyResponseValidationError) ErrorName() string {
	return "GetAccessKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessKeyResponseValidationError{}

// Validate checks the field values on DownloadAccessKeyFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadAccessKeyFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadAccessKeyFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadAccessKeyFileRequestMultiError, or nil if none found.
func (m *DownloadAccessKeyFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadAccessKeyFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DownloadAccessKeyFileRequestMultiError(errors)
	}

	return nil
}

// DownloadAccessKeyFileRequestMultiError is an error wrapping multiple
// validation errors returned by DownloadAccessKeyFileRequest.ValidateAll() if
// the designated constraints aren't met.
type DownloadAccessKeyFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadAccessKeyFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadAccessKeyFileRequestMultiError) AllErrors() []error { return m }

// DownloadAccessKeyFileRequestValidationError is the validation error returned
// by DownloadAccessKeyFileRequest.Validate if the designated constraints
// aren't met.
type DownloadAccessKeyFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadAccessKeyFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadAccessKeyFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadAccessKeyFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadAccessKeyFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadAccessKeyFileRequestValidationError) ErrorName() string {
	return "DownloadAccessKeyFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadAccessKeyFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadAccessKeyFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadAccessKeyFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadAccessKeyFileRequestValidationError{}

// Validate checks the field values on DownloadAccessKeyFileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadAccessKeyFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadAccessKeyFileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DownloadAccessKeyFileResponseMultiError, or nil if none found.
func (m *DownloadAccessKeyFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadAccessKeyFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return DownloadAccessKeyFileResponseMultiError(errors)
	}

	return nil
}

// DownloadAccessKeyFileResponseMultiError is an error wrapping multiple
// validation errors returned by DownloadAccessKeyFileResponse.ValidateAll()
// if the designated constraints aren't met.
type DownloadAccessKeyFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadAccessKeyFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadAccessKeyFileResponseMultiError) AllErrors() []error { return m }

// DownloadAccessKeyFileResponseValidationError is the validation error
// returned by DownloadAccessKeyFileResponse.Validate if the designated
// constraints aren't met.
type DownloadAccessKeyFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadAccessKeyFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadAccessKeyFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadAccessKeyFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadAccessKeyFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadAccessKeyFileResponseValidationError) ErrorName() string {
	return "DownloadAccessKeyFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadAccessKeyFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadAccessKeyFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadAccessKeyFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadAccessKeyFileResponseValidationError{}

// Validate checks the field values on QueryAccessKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAccessKeysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAccessKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAccessKeysRequestMultiError, or nil if none found.
func (m *QueryAccessKeysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAccessKeysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for SubjectType

	// no validation rules for Subject

	// no validation rules for AccessKey

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Scope

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return QueryAccessKeysRequestMultiError(errors)
	}

	return nil
}

// QueryAccessKeysRequestMultiError is an error wrapping multiple validation
// errors returned by QueryAccessKeysRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryAccessKeysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAccessKeysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAccessKeysRequestMultiError) AllErrors() []error { return m }

// QueryAccessKeysRequestValidationError is the validation error returned by
// QueryAccessKeysRequest.Validate if the designated constraints aren't met.
type QueryAccessKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAccessKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAccessKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAccessKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAccessKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAccessKeysRequestValidationError) ErrorName() string {
	return "QueryAccessKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAccessKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAccessKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAccessKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAccessKeysRequestValidationError{}

// Validate checks the field values on QueryAccessKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAccessKeysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAccessKeysResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAccessKeysResponseMultiError, or nil if none found.
func (m *QueryAccessKeysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAccessKeysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryAccessKeysResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryAccessKeysResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryAccessKeysResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryAccessKeysResponseMultiError(errors)
	}

	return nil
}

// QueryAccessKeysResponseMultiError is an error wrapping multiple validation
// errors returned by QueryAccessKeysResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryAccessKeysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAccessKeysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAccessKeysResponseMultiError) AllErrors() []error { return m }

// QueryAccessKeysResponseValidationError is the validation error returned by
// QueryAccessKeysResponse.Validate if the designated constraints aren't met.
type QueryAccessKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAccessKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAccessKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAccessKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAccessKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAccessKeysResponseValidationError) ErrorName() string {
	return "QueryAccessKeysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAccessKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAccessKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAccessKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAccessKeysResponseValidationError{}

// Validate checks the field values on QueryAccessKeysData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryAccessKeysData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAccessKeysData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAccessKeysDataMultiError, or nil if none found.
func (m *QueryAccessKeysData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAccessKeysData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryAccessKeysDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryAccessKeysDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryAccessKeysDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryAccessKeysDataMultiError(errors)
	}

	return nil
}

// QueryAccessKeysDataMultiError is an error wrapping multiple validation
// errors returned by QueryAccessKeysData.ValidateAll() if the designated
// constraints aren't met.
type QueryAccessKeysDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAccessKeysDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAccessKeysDataMultiError) AllErrors() []error { return m }

// QueryAccessKeysDataValidationError is the validation error returned by
// QueryAccessKeysData.Validate if the designated constraints aren't met.
type QueryAccessKeysDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAccessKeysDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAccessKeysDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAccessKeysDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAccessKeysDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAccessKeysDataValidationError) ErrorName() string {
	return "QueryAccessKeysDataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryAccessKeysDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAccessKeysData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAccessKeysDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAccessKeysDataValidationError{}

// Validate checks the field values on QueryAccessKeys with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryAccessKeys) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryAccessKeys with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryAccessKeysMultiError, or nil if none found.
func (m *QueryAccessKeys) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryAccessKeys) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryAccessKeysValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryAccessKeysValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryAccessKeysValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Creator

	if len(errors) > 0 {
		return QueryAccessKeysMultiError(errors)
	}

	return nil
}

// QueryAccessKeysMultiError is an error wrapping multiple validation errors
// returned by QueryAccessKeys.ValidateAll() if the designated constraints
// aren't met.
type QueryAccessKeysMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryAccessKeysMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryAccessKeysMultiError) AllErrors() []error { return m }

// QueryAccessKeysValidationError is the validation error returned by
// QueryAccessKeys.Validate if the designated constraints aren't met.
type QueryAccessKeysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryAccessKeysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryAccessKeysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryAccessKeysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryAccessKeysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryAccessKeysValidationError) ErrorName() string { return "QueryAccessKeysValidationError" }

// Error satisfies the builtin error interface
func (e QueryAccessKeysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryAccessKeys.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryAccessKeysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryAccessKeysValidationError{}

// Validate checks the field values on AccessKeysItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccessKeysItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessKeysItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccessKeysItemMultiError,
// or nil if none found.
func (m *AccessKeysItem) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessKeysItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AccessKey

	// no validation rules for SecretKey

	// no validation rules for Status

	// no validation rules for SubjectType

	// no validation rules for Subject

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccessKeysItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccessKeysItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccessKeysItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Scope

	// no validation rules for ScopeId

	// no validation rules for Token

	// no validation rules for CreatorId

	if len(errors) > 0 {
		return AccessKeysItemMultiError(errors)
	}

	return nil
}

// AccessKeysItemMultiError is an error wrapping multiple validation errors
// returned by AccessKeysItem.ValidateAll() if the designated constraints
// aren't met.
type AccessKeysItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessKeysItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessKeysItemMultiError) AllErrors() []error { return m }

// AccessKeysItemValidationError is the validation error returned by
// AccessKeysItem.Validate if the designated constraints aren't met.
type AccessKeysItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessKeysItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessKeysItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessKeysItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessKeysItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessKeysItemValidationError) ErrorName() string { return "AccessKeysItemValidationError" }

// Error satisfies the builtin error interface
func (e AccessKeysItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessKeysItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessKeysItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessKeysItemValidationError{}

// Validate checks the field values on SubjectTypeEnum with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubjectTypeEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubjectTypeEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubjectTypeEnumMultiError, or nil if none found.
func (m *SubjectTypeEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *SubjectTypeEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubjectTypeEnumMultiError(errors)
	}

	return nil
}

// SubjectTypeEnumMultiError is an error wrapping multiple validation errors
// returned by SubjectTypeEnum.ValidateAll() if the designated constraints
// aren't met.
type SubjectTypeEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectTypeEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectTypeEnumMultiError) AllErrors() []error { return m }

// SubjectTypeEnumValidationError is the validation error returned by
// SubjectTypeEnum.Validate if the designated constraints aren't met.
type SubjectTypeEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectTypeEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectTypeEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectTypeEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectTypeEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectTypeEnumValidationError) ErrorName() string { return "SubjectTypeEnumValidationError" }

// Error satisfies the builtin error interface
func (e SubjectTypeEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectTypeEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectTypeEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectTypeEnumValidationError{}

// Validate checks the field values on StatusEnum with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusEnum with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusEnumMultiError, or
// nil if none found.
func (m *StatusEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StatusEnumMultiError(errors)
	}

	return nil
}

// StatusEnumMultiError is an error wrapping multiple validation errors
// returned by StatusEnum.ValidateAll() if the designated constraints aren't met.
type StatusEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusEnumMultiError) AllErrors() []error { return m }

// StatusEnumValidationError is the validation error returned by
// StatusEnum.Validate if the designated constraints aren't met.
type StatusEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusEnumValidationError) ErrorName() string { return "StatusEnumValidationError" }

// Error satisfies the builtin error interface
func (e StatusEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusEnumValidationError{}
