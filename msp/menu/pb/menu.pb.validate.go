// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: menu.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetMenuRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenuRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMenuRequestMultiError,
// or nil if none found.
func (m *GetMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTenantId()) < 1 {
		err := GetMenuRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := GetMenuRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMenuRequestMultiError(errors)
	}

	return nil
}

// GetMenuRequestMultiError is an error wrapping multiple validation errors
// returned by GetMenuRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenuRequestMultiError) AllErrors() []error { return m }

// GetMenuRequestValidationError is the validation error returned by
// GetMenuRequest.Validate if the designated constraints aren't met.
type GetMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuRequestValidationError) ErrorName() string { return "GetMenuRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuRequestValidationError{}

// Validate checks the field values on GetMenuResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMenuResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMenuResponseMultiError, or nil if none found.
func (m *GetMenuResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenuResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMenuResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMenuResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMenuResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMenuResponseMultiError(errors)
	}

	return nil
}

// GetMenuResponseMultiError is an error wrapping multiple validation errors
// returned by GetMenuResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMenuResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenuResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenuResponseMultiError) AllErrors() []error { return m }

// GetMenuResponseValidationError is the validation error returned by
// GetMenuResponse.Validate if the designated constraints aren't met.
type GetMenuResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuResponseValidationError) ErrorName() string { return "GetMenuResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetMenuResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuResponseValidationError{}

// Validate checks the field values on MenuItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenuItemMultiError, or nil
// if none found.
func (m *MenuItem) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for ClusterType

	// no validation rules for Key

	// no validation rules for CnName

	// no validation rules for EnName

	// no validation rules for Href

	// no validation rules for Params

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenuItemValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenuItemValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenuItemValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Exists

	// no validation rules for MustExists

	// no validation rules for OnlyK8S

	// no validation rules for OnlyNotK8S

	// no validation rules for IsK8S

	// no validation rules for IsEdas

	if len(errors) > 0 {
		return MenuItemMultiError(errors)
	}

	return nil
}

// MenuItemMultiError is an error wrapping multiple validation errors returned
// by MenuItem.ValidateAll() if the designated constraints aren't met.
type MenuItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuItemMultiError) AllErrors() []error { return m }

// MenuItemValidationError is the validation error returned by
// MenuItem.Validate if the designated constraints aren't met.
type MenuItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuItemValidationError) ErrorName() string { return "MenuItemValidationError" }

// Error satisfies the builtin error interface
func (e MenuItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuItemValidationError{}

// Validate checks the field values on GetSettingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingRequestMultiError, or nil if none found.
func (m *GetSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTenantGroup()) < 1 {
		err := GetSettingRequestValidationError{
			field:  "TenantGroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TenantId

	if len(errors) > 0 {
		return GetSettingRequestMultiError(errors)
	}

	return nil
}

// GetSettingRequestMultiError is an error wrapping multiple validation errors
// returned by GetSettingRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingRequestMultiError) AllErrors() []error { return m }

// GetSettingRequestValidationError is the validation error returned by
// GetSettingRequest.Validate if the designated constraints aren't met.
type GetSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingRequestValidationError) ErrorName() string {
	return "GetSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingRequestValidationError{}

// Validate checks the field values on GetSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingResponseMultiError, or nil if none found.
func (m *GetSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSettingResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSettingResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSettingResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSettingResponseMultiError(errors)
	}

	return nil
}

// GetSettingResponseMultiError is an error wrapping multiple validation errors
// returned by GetSettingResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingResponseMultiError) AllErrors() []error { return m }

// GetSettingResponseValidationError is the validation error returned by
// GetSettingResponse.Validate if the designated constraints aren't met.
type GetSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingResponseValidationError) ErrorName() string {
	return "GetSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingResponseValidationError{}

// Validate checks the field values on EngineSetting with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EngineSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EngineSetting with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EngineSettingMultiError, or
// nil if none found.
func (m *EngineSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *EngineSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonName

	// no validation rules for CnName

	// no validation rules for EnName

	// no validation rules for Config

	if len(errors) > 0 {
		return EngineSettingMultiError(errors)
	}

	return nil
}

// EngineSettingMultiError is an error wrapping multiple validation errors
// returned by EngineSetting.ValidateAll() if the designated constraints
// aren't met.
type EngineSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EngineSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EngineSettingMultiError) AllErrors() []error { return m }

// EngineSettingValidationError is the validation error returned by
// EngineSetting.Validate if the designated constraints aren't met.
type EngineSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EngineSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EngineSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EngineSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EngineSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EngineSettingValidationError) ErrorName() string { return "EngineSettingValidationError" }

// Error satisfies the builtin error interface
func (e EngineSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEngineSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EngineSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EngineSettingValidationError{}
