// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: member.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ScopeRoleAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScopeRoleAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScopeRoleAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScopeRoleAccessRequestMultiError, or nil if none found.
func (m *ScopeRoleAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScopeRoleAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScopeRoleAccessRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScopeRoleAccessRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScopeRoleAccessRequestValidationError{
				field:  "Scope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScopeRoleAccessRequestMultiError(errors)
	}

	return nil
}

// ScopeRoleAccessRequestMultiError is an error wrapping multiple validation
// errors returned by ScopeRoleAccessRequest.ValidateAll() if the designated
// constraints aren't met.
type ScopeRoleAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeRoleAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeRoleAccessRequestMultiError) AllErrors() []error { return m }

// ScopeRoleAccessRequestValidationError is the validation error returned by
// ScopeRoleAccessRequest.Validate if the designated constraints aren't met.
type ScopeRoleAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeRoleAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeRoleAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeRoleAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeRoleAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeRoleAccessRequestValidationError) ErrorName() string {
	return "ScopeRoleAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScopeRoleAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeRoleAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeRoleAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeRoleAccessRequestValidationError{}

// Validate checks the field values on Scope with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Scope) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Scope with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ScopeMultiError, or nil if none found.
func (m *Scope) ValidateAll() error {
	return m.validate(true)
}

func (m *Scope) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	if len(errors) > 0 {
		return ScopeMultiError(errors)
	}

	return nil
}

// ScopeMultiError is an error wrapping multiple validation errors returned by
// Scope.ValidateAll() if the designated constraints aren't met.
type ScopeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeMultiError) AllErrors() []error { return m }

// ScopeValidationError is the validation error returned by Scope.Validate if
// the designated constraints aren't met.
type ScopeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeValidationError) ErrorName() string { return "ScopeValidationError" }

// Error satisfies the builtin error interface
func (e ScopeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScope.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeValidationError{}

// Validate checks the field values on ScopeRoleAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScopeRoleAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScopeRoleAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScopeRoleAccessResponseMultiError, or nil if none found.
func (m *ScopeRoleAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScopeRoleAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScopeRoleAccessResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScopeRoleAccessResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScopeRoleAccessResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScopeRoleAccessResponseMultiError(errors)
	}

	return nil
}

// ScopeRoleAccessResponseMultiError is an error wrapping multiple validation
// errors returned by ScopeRoleAccessResponse.ValidateAll() if the designated
// constraints aren't met.
type ScopeRoleAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeRoleAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeRoleAccessResponseMultiError) AllErrors() []error { return m }

// ScopeRoleAccessResponseValidationError is the validation error returned by
// ScopeRoleAccessResponse.Validate if the designated constraints aren't met.
type ScopeRoleAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeRoleAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeRoleAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeRoleAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeRoleAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeRoleAccessResponseValidationError) ErrorName() string {
	return "ScopeRoleAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScopeRoleAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeRoleAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeRoleAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeRoleAccessResponseValidationError{}

// Validate checks the field values on ScopeRoleData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScopeRoleData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScopeRoleData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScopeRoleDataMultiError, or
// nil if none found.
func (m *ScopeRoleData) ValidateAll() error {
	return m.validate(true)
}

func (m *ScopeRoleData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Access

	for idx, item := range m.GetPermissionList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScopeRoleDataValidationError{
						field:  fmt.Sprintf("PermissionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScopeRoleDataValidationError{
						field:  fmt.Sprintf("PermissionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScopeRoleDataValidationError{
					field:  fmt.Sprintf("PermissionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResourceRoleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScopeRoleDataValidationError{
						field:  fmt.Sprintf("ResourceRoleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScopeRoleDataValidationError{
						field:  fmt.Sprintf("ResourceRoleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScopeRoleDataValidationError{
					field:  fmt.Sprintf("ResourceRoleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Exist

	if len(errors) > 0 {
		return ScopeRoleDataMultiError(errors)
	}

	return nil
}

// ScopeRoleDataMultiError is an error wrapping multiple validation errors
// returned by ScopeRoleData.ValidateAll() if the designated constraints
// aren't met.
type ScopeRoleDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeRoleDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeRoleDataMultiError) AllErrors() []error { return m }

// ScopeRoleDataValidationError is the validation error returned by
// ScopeRoleData.Validate if the designated constraints aren't met.
type ScopeRoleDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeRoleDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeRoleDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeRoleDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeRoleDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeRoleDataValidationError) ErrorName() string { return "ScopeRoleDataValidationError" }

// Error satisfies the builtin error interface
func (e ScopeRoleDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeRoleData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeRoleDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeRoleDataValidationError{}

// Validate checks the field values on ScopeResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScopeResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScopeResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScopeResourceMultiError, or
// nil if none found.
func (m *ScopeResource) ValidateAll() error {
	return m.validate(true)
}

func (m *ScopeResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Resource

	// no validation rules for Action

	// no validation rules for ResourceRole

	if len(errors) > 0 {
		return ScopeResourceMultiError(errors)
	}

	return nil
}

// ScopeResourceMultiError is an error wrapping multiple validation errors
// returned by ScopeResource.ValidateAll() if the designated constraints
// aren't met.
type ScopeResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeResourceMultiError) AllErrors() []error { return m }

// ScopeResourceValidationError is the validation error returned by
// ScopeResource.Validate if the designated constraints aren't met.
type ScopeResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeResourceValidationError) ErrorName() string { return "ScopeResourceValidationError" }

// Error satisfies the builtin error interface
func (e ScopeResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeResourceValidationError{}

// Validate checks the field values on ListMemberRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemberRequestMultiError, or nil if none found.
func (m *ListMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Q

	if len(errors) > 0 {
		return ListMemberRequestMultiError(errors)
	}

	return nil
}

// ListMemberRequestMultiError is an error wrapping multiple validation errors
// returned by ListMemberRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemberRequestMultiError) AllErrors() []error { return m }

// ListMemberRequestValidationError is the validation error returned by
// ListMemberRequest.Validate if the designated constraints aren't met.
type ListMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemberRequestValidationError) ErrorName() string {
	return "ListMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemberRequestValidationError{}

// Validate checks the field values on ListMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemberResponseMultiError, or nil if none found.
func (m *ListMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMemberResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMemberResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMemberResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListMemberResponseMultiError(errors)
	}

	return nil
}

// ListMemberResponseMultiError is an error wrapping multiple validation errors
// returned by ListMemberResponse.ValidateAll() if the designated constraints
// aren't met.
type ListMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemberResponseMultiError) AllErrors() []error { return m }

// ListMemberResponseValidationError is the validation error returned by
// ListMemberResponse.Validate if the designated constraints aren't met.
type ListMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemberResponseValidationError) ErrorName() string {
	return "ListMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemberResponseValidationError{}

// Validate checks the field values on MemberList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberListMultiError, or
// nil if none found.
func (m *MemberList) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return MemberListMultiError(errors)
	}

	return nil
}

// MemberListMultiError is an error wrapping multiple validation errors
// returned by MemberList.ValidateAll() if the designated constraints aren't met.
type MemberListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberListMultiError) AllErrors() []error { return m }

// MemberListValidationError is the validation error returned by
// MemberList.Validate if the designated constraints aren't met.
type MemberListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberListValidationError) ErrorName() string { return "MemberListValidationError" }

// Error satisfies the builtin error interface
func (e MemberListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberListValidationError{}

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Name

	// no validation rules for Nick

	// no validation rules for Avatar

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "Scope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Removed

	// no validation rules for Deleted

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}

	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on CreateOrUpdateMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateMemberRequestMultiError, or nil if none found.
func (m *CreateOrUpdateMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateMemberRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateMemberRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateMemberRequestValidationError{
				field:  "Scope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TargetScopeType

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateMemberRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateMemberRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateMemberRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for VerifyCode

	if len(errors) > 0 {
		return CreateOrUpdateMemberRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateMemberRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateMemberRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateMemberRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateMemberRequestValidationError is the validation error returned
// by CreateOrUpdateMemberRequest.Validate if the designated constraints
// aren't met.
type CreateOrUpdateMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateMemberRequestValidationError) ErrorName() string {
	return "CreateOrUpdateMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateMemberRequestValidationError{}

// Validate checks the field values on MemberAddOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberAddOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberAddOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberAddOptionsMultiError, or nil if none found.
func (m *MemberAddOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberAddOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rewrite

	if len(errors) > 0 {
		return MemberAddOptionsMultiError(errors)
	}

	return nil
}

// MemberAddOptionsMultiError is an error wrapping multiple validation errors
// returned by MemberAddOptions.ValidateAll() if the designated constraints
// aren't met.
type MemberAddOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberAddOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberAddOptionsMultiError) AllErrors() []error { return m }

// MemberAddOptionsValidationError is the validation error returned by
// MemberAddOptions.Validate if the designated constraints aren't met.
type MemberAddOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberAddOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberAddOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberAddOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberAddOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberAddOptionsValidationError) ErrorName() string { return "MemberAddOptionsValidationError" }

// Error satisfies the builtin error interface
func (e MemberAddOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberAddOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberAddOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberAddOptionsValidationError{}

// Validate checks the field values on CreateOrUpdateMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateMemberResponseMultiError, or nil if none found.
func (m *CreateOrUpdateMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return CreateOrUpdateMemberResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateMemberResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateMemberResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateMemberResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateMemberResponseValidationError is the validation error returned
// by CreateOrUpdateMemberResponse.Validate if the designated constraints
// aren't met.
type CreateOrUpdateMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateMemberResponseValidationError) ErrorName() string {
	return "CreateOrUpdateMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateMemberResponseValidationError{}

// Validate checks the field values on DeleteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMemberRequestMultiError, or nil if none found.
func (m *DeleteMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteMemberRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteMemberRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteMemberRequestValidationError{
				field:  "Scope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserID

	// no validation rules for InternalClient

	if len(errors) > 0 {
		return DeleteMemberRequestMultiError(errors)
	}

	return nil
}

// DeleteMemberRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMemberRequestMultiError) AllErrors() []error { return m }

// DeleteMemberRequestValidationError is the validation error returned by
// DeleteMemberRequest.Validate if the designated constraints aren't met.
type DeleteMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMemberRequestValidationError) ErrorName() string {
	return "DeleteMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMemberRequestValidationError{}

// Validate checks the field values on DeleteMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMemberResponseMultiError, or nil if none found.
func (m *DeleteMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DeleteMemberResponseMultiError(errors)
	}

	return nil
}

// DeleteMemberResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMemberResponseMultiError) AllErrors() []error { return m }

// DeleteMemberResponseValidationError is the validation error returned by
// DeleteMemberResponse.Validate if the designated constraints aren't met.
type DeleteMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMemberResponseValidationError) ErrorName() string {
	return "DeleteMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMemberResponseValidationError{}

// Validate checks the field values on ListMemberRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemberRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemberRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemberRolesRequestMultiError, or nil if none found.
func (m *ListMemberRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemberRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeId

	if len(errors) > 0 {
		return ListMemberRolesRequestMultiError(errors)
	}

	return nil
}

// ListMemberRolesRequestMultiError is an error wrapping multiple validation
// errors returned by ListMemberRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMemberRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemberRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemberRolesRequestMultiError) AllErrors() []error { return m }

// ListMemberRolesRequestValidationError is the validation error returned by
// ListMemberRolesRequest.Validate if the designated constraints aren't met.
type ListMemberRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemberRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemberRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemberRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemberRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemberRolesRequestValidationError) ErrorName() string {
	return "ListMemberRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemberRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemberRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemberRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemberRolesRequestValidationError{}

// Validate checks the field values on ListMemberRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemberRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemberRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemberRolesResponseMultiError, or nil if none found.
func (m *ListMemberRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemberRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMemberRolesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMemberRolesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMemberRolesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListMemberRolesResponseMultiError(errors)
	}

	return nil
}

// ListMemberRolesResponseMultiError is an error wrapping multiple validation
// errors returned by ListMemberRolesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMemberRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemberRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemberRolesResponseMultiError) AllErrors() []error { return m }

// ListMemberRolesResponseValidationError is the validation error returned by
// ListMemberRolesResponse.Validate if the designated constraints aren't met.
type ListMemberRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemberRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemberRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemberRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemberRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemberRolesResponseValidationError) ErrorName() string {
	return "ListMemberRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemberRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemberRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemberRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemberRolesResponseValidationError{}

// Validate checks the field values on RoleList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleListMultiError, or nil
// if none found.
func (m *RoleList) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return RoleListMultiError(errors)
	}

	return nil
}

// RoleListMultiError is an error wrapping multiple validation errors returned
// by RoleList.ValidateAll() if the designated constraints aren't met.
type RoleListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleListMultiError) AllErrors() []error { return m }

// RoleListValidationError is the validation error returned by
// RoleList.Validate if the designated constraints aren't met.
type RoleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleListValidationError) ErrorName() string { return "RoleListValidationError" }

// Error satisfies the builtin error interface
func (e RoleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleListValidationError{}

// Validate checks the field values on RoleInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleInfoMultiError, or nil
// if none found.
func (m *RoleInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	// no validation rules for Name

	if len(errors) > 0 {
		return RoleInfoMultiError(errors)
	}

	return nil
}

// RoleInfoMultiError is an error wrapping multiple validation errors returned
// by RoleInfo.ValidateAll() if the designated constraints aren't met.
type RoleInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleInfoMultiError) AllErrors() []error { return m }

// RoleInfoValidationError is the validation error returned by
// RoleInfo.Validate if the designated constraints aren't met.
type RoleInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleInfoValidationError) ErrorName() string { return "RoleInfoValidationError" }

// Error satisfies the builtin error interface
func (e RoleInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleInfoValidationError{}
