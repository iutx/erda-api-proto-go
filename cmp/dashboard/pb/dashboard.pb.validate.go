// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dashboard.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetClustersResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClustersResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClustersResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClustersResourcesRequestMultiError, or nil if none found.
func (m *GetClustersResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClustersResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetClustersResourcesRequestMultiError(errors)
	}

	return nil
}

// GetClustersResourcesRequestMultiError is an error wrapping multiple
// validation errors returned by GetClustersResourcesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetClustersResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClustersResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClustersResourcesRequestMultiError) AllErrors() []error { return m }

// GetClustersResourcesRequestValidationError is the validation error returned
// by GetClustersResourcesRequest.Validate if the designated constraints
// aren't met.
type GetClustersResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClustersResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClustersResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClustersResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClustersResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClustersResourcesRequestValidationError) ErrorName() string {
	return "GetClustersResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClustersResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClustersResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClustersResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClustersResourcesRequestValidationError{}

// Validate checks the field values on GetClusterResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterResourcesResponseMultiError, or nil if none found.
func (m *GetClusterResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetClusterResourcesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetClusterResourcesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClusterResourcesResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetClusterResourcesResponseMultiError(errors)
	}

	return nil
}

// GetClusterResourcesResponseMultiError is an error wrapping multiple
// validation errors returned by GetClusterResourcesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetClusterResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterResourcesResponseMultiError) AllErrors() []error { return m }

// GetClusterResourcesResponseValidationError is the validation error returned
// by GetClusterResourcesResponse.Validate if the designated constraints
// aren't met.
type GetClusterResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterResourcesResponseValidationError) ErrorName() string {
	return "GetClusterResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterResourcesResponseValidationError{}

// Validate checks the field values on ClusterResourceDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterResourceDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterResourceDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterResourceDetailMultiError, or nil if none found.
func (m *ClusterResourceDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterResourceDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Err

	// no validation rules for ClusterName

	for idx, item := range m.GetHosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterResourceDetailValidationError{
						field:  fmt.Sprintf("Hosts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterResourceDetailValidationError{
						field:  fmt.Sprintf("Hosts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterResourceDetailValidationError{
					field:  fmt.Sprintf("Hosts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterResourceDetailMultiError(errors)
	}

	return nil
}

// ClusterResourceDetailMultiError is an error wrapping multiple validation
// errors returned by ClusterResourceDetail.ValidateAll() if the designated
// constraints aren't met.
type ClusterResourceDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterResourceDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterResourceDetailMultiError) AllErrors() []error { return m }

// ClusterResourceDetailValidationError is the validation error returned by
// ClusterResourceDetail.Validate if the designated constraints aren't met.
type ClusterResourceDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterResourceDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterResourceDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterResourceDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterResourceDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterResourceDetailValidationError) ErrorName() string {
	return "ClusterResourceDetailValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterResourceDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterResourceDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterResourceDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterResourceDetailValidationError{}

// Validate checks the field values on HostResourceDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HostResourceDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HostResourceDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HostResourceDetailMultiError, or nil if none found.
func (m *HostResourceDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *HostResourceDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for CpuAllocatable

	// no validation rules for CpuTotal

	// no validation rules for CpuRequest

	// no validation rules for MemAllocatable

	// no validation rules for MemTotal

	// no validation rules for MemRequest

	if len(errors) > 0 {
		return HostResourceDetailMultiError(errors)
	}

	return nil
}

// HostResourceDetailMultiError is an error wrapping multiple validation errors
// returned by HostResourceDetail.ValidateAll() if the designated constraints
// aren't met.
type HostResourceDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HostResourceDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HostResourceDetailMultiError) AllErrors() []error { return m }

// HostResourceDetailValidationError is the validation error returned by
// HostResourceDetail.Validate if the designated constraints aren't met.
type HostResourceDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostResourceDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostResourceDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostResourceDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostResourceDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostResourceDetailValidationError) ErrorName() string {
	return "HostResourceDetailValidationError"
}

// Error satisfies the builtin error interface
func (e HostResourceDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostResourceDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostResourceDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostResourceDetailValidationError{}

// Validate checks the field values on GetNamespacesResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespacesResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespacesResourcesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNamespacesResourcesRequestMultiError, or nil if none found.
func (m *GetNamespacesResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespacesResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNamespaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNamespacesResourcesRequestValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNamespacesResourcesRequestValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNamespacesResourcesRequestValidationError{
					field:  fmt.Sprintf("Namespaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNamespacesResourcesRequestMultiError(errors)
	}

	return nil
}

// GetNamespacesResourcesRequestMultiError is an error wrapping multiple
// validation errors returned by GetNamespacesResourcesRequest.ValidateAll()
// if the designated constraints aren't met.
type GetNamespacesResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespacesResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespacesResourcesRequestMultiError) AllErrors() []error { return m }

// GetNamespacesResourcesRequestValidationError is the validation error
// returned by GetNamespacesResourcesRequest.Validate if the designated
// constraints aren't met.
type GetNamespacesResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespacesResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespacesResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespacesResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespacesResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespacesResourcesRequestValidationError) ErrorName() string {
	return "GetNamespacesResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespacesResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespacesResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespacesResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespacesResourcesRequestValidationError{}

// Validate checks the field values on ClusterNamespacePair with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterNamespacePair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterNamespacePair with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterNamespacePairMultiError, or nil if none found.
func (m *ClusterNamespacePair) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterNamespacePair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for Namespace

	if len(errors) > 0 {
		return ClusterNamespacePairMultiError(errors)
	}

	return nil
}

// ClusterNamespacePairMultiError is an error wrapping multiple validation
// errors returned by ClusterNamespacePair.ValidateAll() if the designated
// constraints aren't met.
type ClusterNamespacePairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterNamespacePairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterNamespacePairMultiError) AllErrors() []error { return m }

// ClusterNamespacePairValidationError is the validation error returned by
// ClusterNamespacePair.Validate if the designated constraints aren't met.
type ClusterNamespacePairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterNamespacePairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterNamespacePairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterNamespacePairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterNamespacePairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterNamespacePairValidationError) ErrorName() string {
	return "ClusterNamespacePairValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterNamespacePairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterNamespacePair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterNamespacePairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterNamespacePairValidationError{}

// Validate checks the field values on GetNamespacesResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespacesResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespacesResourcesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNamespacesResourcesResponseMultiError, or nil if none found.
func (m *GetNamespacesResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespacesResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNamespacesResourcesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNamespacesResourcesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNamespacesResourcesResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNamespacesResourcesResponseMultiError(errors)
	}

	return nil
}

// GetNamespacesResourcesResponseMultiError is an error wrapping multiple
// validation errors returned by GetNamespacesResourcesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetNamespacesResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespacesResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespacesResourcesResponseMultiError) AllErrors() []error { return m }

// GetNamespacesResourcesResponseValidationError is the validation error
// returned by GetNamespacesResourcesResponse.Validate if the designated
// constraints aren't met.
type GetNamespacesResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespacesResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespacesResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespacesResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespacesResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespacesResourcesResponseValidationError) ErrorName() string {
	return "GetNamespacesResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespacesResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespacesResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespacesResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespacesResourcesResponseValidationError{}

// Validate checks the field values on ClusterResourceItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterResourceItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterResourceItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterResourceItemMultiError, or nil if none found.
func (m *ClusterResourceItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterResourceItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Err

	// no validation rules for ClusterName

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterResourceItemValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterResourceItemValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterResourceItemValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterResourceItemMultiError(errors)
	}

	return nil
}

// ClusterResourceItemMultiError is an error wrapping multiple validation
// errors returned by ClusterResourceItem.ValidateAll() if the designated
// constraints aren't met.
type ClusterResourceItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterResourceItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterResourceItemMultiError) AllErrors() []error { return m }

// ClusterResourceItemValidationError is the validation error returned by
// ClusterResourceItem.Validate if the designated constraints aren't met.
type ClusterResourceItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterResourceItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterResourceItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterResourceItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterResourceItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterResourceItemValidationError) ErrorName() string {
	return "ClusterResourceItemValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterResourceItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterResourceItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterResourceItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterResourceItemValidationError{}

// Validate checks the field values on NamespaceResourceDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NamespaceResourceDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceResourceDetail with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespaceResourceDetailMultiError, or nil if none found.
func (m *NamespaceResourceDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceResourceDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for CpuRequest

	// no validation rules for MemRequest

	if len(errors) > 0 {
		return NamespaceResourceDetailMultiError(errors)
	}

	return nil
}

// NamespaceResourceDetailMultiError is an error wrapping multiple validation
// errors returned by NamespaceResourceDetail.ValidateAll() if the designated
// constraints aren't met.
type NamespaceResourceDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceResourceDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceResourceDetailMultiError) AllErrors() []error { return m }

// NamespaceResourceDetailValidationError is the validation error returned by
// NamespaceResourceDetail.Validate if the designated constraints aren't met.
type NamespaceResourceDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceResourceDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceResourceDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceResourceDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceResourceDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceResourceDetailValidationError) ErrorName() string {
	return "NamespaceResourceDetailValidationError"
}

// Error satisfies the builtin error interface
func (e NamespaceResourceDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceResourceDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceResourceDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceResourceDetailValidationError{}

// Validate checks the field values on GetPodsByLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPodsByLabelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPodsByLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPodsByLabelsRequestMultiError, or nil if none found.
func (m *GetPodsByLabelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPodsByLabelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cluster

	if len(errors) > 0 {
		return GetPodsByLabelsRequestMultiError(errors)
	}

	return nil
}

// GetPodsByLabelsRequestMultiError is an error wrapping multiple validation
// errors returned by GetPodsByLabelsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPodsByLabelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPodsByLabelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPodsByLabelsRequestMultiError) AllErrors() []error { return m }

// GetPodsByLabelsRequestValidationError is the validation error returned by
// GetPodsByLabelsRequest.Validate if the designated constraints aren't met.
type GetPodsByLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPodsByLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPodsByLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPodsByLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPodsByLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPodsByLabelsRequestValidationError) ErrorName() string {
	return "GetPodsByLabelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPodsByLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPodsByLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPodsByLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPodsByLabelsRequestValidationError{}

// Validate checks the field values on GetPodsByLabelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPodsByLabelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPodsByLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPodsByLabelsResponseMultiError, or nil if none found.
func (m *GetPodsByLabelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPodsByLabelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPodsByLabelsResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPodsByLabelsResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPodsByLabelsResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPodsByLabelsResponseMultiError(errors)
	}

	return nil
}

// GetPodsByLabelsResponseMultiError is an error wrapping multiple validation
// errors returned by GetPodsByLabelsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPodsByLabelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPodsByLabelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPodsByLabelsResponseMultiError) AllErrors() []error { return m }

// GetPodsByLabelsResponseValidationError is the validation error returned by
// GetPodsByLabelsResponse.Validate if the designated constraints aren't met.
type GetPodsByLabelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPodsByLabelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPodsByLabelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPodsByLabelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPodsByLabelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPodsByLabelsResponseValidationError) ErrorName() string {
	return "GetPodsByLabelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPodsByLabelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPodsByLabelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPodsByLabelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPodsByLabelsResponseValidationError{}

// Validate checks the field values on GetPodsByLabelsItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPodsByLabelsItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPodsByLabelsItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPodsByLabelsItemMultiError, or nil if none found.
func (m *GetPodsByLabelsItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPodsByLabelsItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cluster

	// no validation rules for Status

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for CpuRequest

	// no validation rules for MemRequest

	if len(errors) > 0 {
		return GetPodsByLabelsItemMultiError(errors)
	}

	return nil
}

// GetPodsByLabelsItemMultiError is an error wrapping multiple validation
// errors returned by GetPodsByLabelsItem.ValidateAll() if the designated
// constraints aren't met.
type GetPodsByLabelsItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPodsByLabelsItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPodsByLabelsItemMultiError) AllErrors() []error { return m }

// GetPodsByLabelsItemValidationError is the validation error returned by
// GetPodsByLabelsItem.Validate if the designated constraints aren't met.
type GetPodsByLabelsItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPodsByLabelsItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPodsByLabelsItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPodsByLabelsItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPodsByLabelsItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPodsByLabelsItemValidationError) ErrorName() string {
	return "GetPodsByLabelsItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetPodsByLabelsItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPodsByLabelsItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPodsByLabelsItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPodsByLabelsItemValidationError{}
