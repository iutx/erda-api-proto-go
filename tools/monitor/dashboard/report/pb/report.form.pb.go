// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: report.proto

package pb

import (
	base64 "encoding/base64"
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	pb "github.com/erda-project/erda-proto-go/core/messenger/notifygroup/pb"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*ListTasksRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListTasksResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateTaskRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateTaskResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateTaskRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*SwitchTaskRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetTaskRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteTaskRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListTypesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListTypesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Type)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListHistoriesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListHistoriesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ReportHistoryDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateHistoryRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateHistoryResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetHistoryRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetHistoryResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteHistoryRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ReportTaskDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ReportTaskOnly)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Notify)(nil)

// ListTasksRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListTasksRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// ListTasksResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListTasksResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// CreateTaskRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateTaskRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "name":
				m.Name = vals[0]
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "type":
				m.Type = vals[0]
			case "dashboardId":
				m.DashboardId = vals[0]
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			case "notifyTarget":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
			case "notifyTarget.type":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.Type = vals[0]
			case "notifyTarget.groupId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.GroupId = val
			case "notifyTarget.groupType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.GroupType = vals[0]
			case "notifyTarget.notifyGroup":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
			case "notifyTarget.notifyGroup.id":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.Id = val
			case "notifyTarget.notifyGroup.name":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Name = vals[0]
			case "notifyTarget.notifyGroup.scopeType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeType = vals[0]
			case "notifyTarget.notifyGroup.scopeId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeId = vals[0]
			case "notifyTarget.notifyGroup.createdAt":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
			case "notifyTarget.notifyGroup.createdAt.seconds":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.CreatedAt.Seconds = val
			case "notifyTarget.notifyGroup.createdAt.nanos":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.CreatedAt.Nanos = int32(val)
			case "notifyTarget.notifyGroup.creator":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Creator = vals[0]
			case "notifyTarget.notifyGroup.label":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Label = vals[0]
			}
		}
	}
	return nil
}

// CreateTaskResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateTaskResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			}
		}
	}
	return nil
}

// UpdateTaskRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpdateTaskRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "name":
				m.Name = &vals[0]
			case "dashboardId":
				m.DashboardId = &vals[0]
			case "notifyTarget":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
			case "notifyTarget.type":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.Type = vals[0]
			case "notifyTarget.groupId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.GroupId = val
			case "notifyTarget.groupType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.GroupType = vals[0]
			case "notifyTarget.notifyGroup":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
			case "notifyTarget.notifyGroup.id":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.Id = val
			case "notifyTarget.notifyGroup.name":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Name = vals[0]
			case "notifyTarget.notifyGroup.scopeType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeType = vals[0]
			case "notifyTarget.notifyGroup.scopeId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeId = vals[0]
			case "notifyTarget.notifyGroup.createdAt":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
			case "notifyTarget.notifyGroup.createdAt.seconds":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.CreatedAt.Seconds = val
			case "notifyTarget.notifyGroup.createdAt.nanos":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.CreatedAt.Nanos = int32(val)
			case "notifyTarget.notifyGroup.creator":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Creator = vals[0]
			case "notifyTarget.notifyGroup.label":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Label = vals[0]
			}
		}
	}
	return nil
}

// SwitchTaskRequest implement urlenc.URLValuesUnmarshaler.
func (m *SwitchTaskRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			}
		}
	}
	return nil
}

// GetTaskRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetTaskRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			}
		}
	}
	return nil
}

// DeleteTaskRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteTaskRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			}
		}
	}
	return nil
}

// ListTypesRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListTypesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				m.Scope = vals[0]
			}
		}
	}
	return nil
}

// ListTypesResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListTypesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// Type implement urlenc.URLValuesUnmarshaler.
func (m *Type) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "value":
				m.Value = vals[0]
			}
		}
	}
	return nil
}

// ListHistoriesRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListHistoriesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "taskId":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TaskId = val
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "start":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Start = val
			case "end":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.End = val
			}
		}
	}
	return nil
}

// ListHistoriesResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListHistoriesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// ReportHistoryDTO implement urlenc.URLValuesUnmarshaler.
func (m *ReportHistoryDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "reportTask":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
			case "reportTask.id":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ReportTask.Id = val
			case "reportTask.name":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				m.ReportTask.Name = vals[0]
			case "reportTask.scope":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				m.ReportTask.Scope = vals[0]
			case "reportTask.scopeId":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				m.ReportTask.ScopeId = vals[0]
			case "reportTask.type":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				m.ReportTask.Type = vals[0]
			case "reportTask.enable":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.ReportTask.Enable = val
			case "reportTask.notifyTarget":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
			case "reportTask.notifyTarget.type":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
				m.ReportTask.NotifyTarget.Type = vals[0]
			case "reportTask.notifyTarget.groupId":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ReportTask.NotifyTarget.GroupId = val
			case "reportTask.notifyTarget.groupType":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
				m.ReportTask.NotifyTarget.GroupType = vals[0]
			case "reportTask.notifyTarget.notifyGroup":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
				if m.ReportTask.NotifyTarget.NotifyGroup == nil {
					m.ReportTask.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
			case "reportTask.notifyTarget.notifyGroup.id":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
				if m.ReportTask.NotifyTarget.NotifyGroup == nil {
					m.ReportTask.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ReportTask.NotifyTarget.NotifyGroup.Id = val
			case "reportTask.notifyTarget.notifyGroup.name":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
				if m.ReportTask.NotifyTarget.NotifyGroup == nil {
					m.ReportTask.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.ReportTask.NotifyTarget.NotifyGroup.Name = vals[0]
			case "reportTask.notifyTarget.notifyGroup.scopeType":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
				if m.ReportTask.NotifyTarget.NotifyGroup == nil {
					m.ReportTask.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.ReportTask.NotifyTarget.NotifyGroup.ScopeType = vals[0]
			case "reportTask.notifyTarget.notifyGroup.scopeId":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
				if m.ReportTask.NotifyTarget.NotifyGroup == nil {
					m.ReportTask.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.ReportTask.NotifyTarget.NotifyGroup.ScopeId = vals[0]
			case "reportTask.notifyTarget.notifyGroup.createdAt":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
				if m.ReportTask.NotifyTarget.NotifyGroup == nil {
					m.ReportTask.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.ReportTask.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.ReportTask.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
			case "reportTask.notifyTarget.notifyGroup.createdAt.seconds":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
				if m.ReportTask.NotifyTarget.NotifyGroup == nil {
					m.ReportTask.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.ReportTask.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.ReportTask.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ReportTask.NotifyTarget.NotifyGroup.CreatedAt.Seconds = val
			case "reportTask.notifyTarget.notifyGroup.createdAt.nanos":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
				if m.ReportTask.NotifyTarget.NotifyGroup == nil {
					m.ReportTask.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.ReportTask.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.ReportTask.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.ReportTask.NotifyTarget.NotifyGroup.CreatedAt.Nanos = int32(val)
			case "reportTask.notifyTarget.notifyGroup.creator":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
				if m.ReportTask.NotifyTarget.NotifyGroup == nil {
					m.ReportTask.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.ReportTask.NotifyTarget.NotifyGroup.Creator = vals[0]
			case "reportTask.notifyTarget.notifyGroup.label":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				if m.ReportTask.NotifyTarget == nil {
					m.ReportTask.NotifyTarget = &Notify{}
				}
				if m.ReportTask.NotifyTarget.NotifyGroup == nil {
					m.ReportTask.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.ReportTask.NotifyTarget.NotifyGroup.Label = vals[0]
			case "reportTask.createdAt":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ReportTask.CreatedAt = val
			case "reportTask.updatedAt":
				if m.ReportTask == nil {
					m.ReportTask = &ReportTaskOnly{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ReportTask.UpdatedAt = val
			case "dashboardBlock":
				if m.DashboardBlock == nil {
					m.DashboardBlock = &anypb.Any{}
				}
			case "dashboardBlock.type_url":
				if m.DashboardBlock == nil {
					m.DashboardBlock = &anypb.Any{}
				}
				m.DashboardBlock.TypeUrl = vals[0]
			case "dashboardBlock.value":
				if m.DashboardBlock == nil {
					m.DashboardBlock = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.DashboardBlock.Value = val
			case "start":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Start = val
			case "end":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.End = val
			}
		}
	}
	return nil
}

// CreateHistoryRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateHistoryRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "taskId":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TaskId = val
			case "reportTask":
				if m.ReportTask == nil {
					m.ReportTask = &anypb.Any{}
				}
			case "reportTask.type_url":
				if m.ReportTask == nil {
					m.ReportTask = &anypb.Any{}
				}
				m.ReportTask.TypeUrl = vals[0]
			case "reportTask.value":
				if m.ReportTask == nil {
					m.ReportTask = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.ReportTask.Value = val
			case "dashboardId":
				m.DashboardId = vals[0]
			case "dashboardBlock":
				if m.DashboardBlock == nil {
					m.DashboardBlock = &anypb.Any{}
				}
			case "dashboardBlock.type_url":
				if m.DashboardBlock == nil {
					m.DashboardBlock = &anypb.Any{}
				}
				m.DashboardBlock.TypeUrl = vals[0]
			case "dashboardBlock.value":
				if m.DashboardBlock == nil {
					m.DashboardBlock = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.DashboardBlock.Value = val
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "start":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Start = val
			case "end":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.End = val
			}
		}
	}
	return nil
}

// CreateHistoryResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateHistoryResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			}
		}
	}
	return nil
}

// GetHistoryRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetHistoryRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			}
		}
	}
	return nil
}

// GetHistoryResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetHistoryResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "reportTask":
				if m.ReportTask == nil {
					m.ReportTask = &anypb.Any{}
				}
			case "reportTask.type_url":
				if m.ReportTask == nil {
					m.ReportTask = &anypb.Any{}
				}
				m.ReportTask.TypeUrl = vals[0]
			case "reportTask.value":
				if m.ReportTask == nil {
					m.ReportTask = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.ReportTask.Value = val
			case "dashboardBlock":
				if m.DashboardBlock == nil {
					m.DashboardBlock = &anypb.Any{}
				}
			case "dashboardBlock.type_url":
				if m.DashboardBlock == nil {
					m.DashboardBlock = &anypb.Any{}
				}
				m.DashboardBlock.TypeUrl = vals[0]
			case "dashboardBlock.value":
				if m.DashboardBlock == nil {
					m.DashboardBlock = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.DashboardBlock.Value = val
			case "start":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Start = val
			case "end":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.End = val
			}
		}
	}
	return nil
}

// DeleteHistoryRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteHistoryRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			}
		}
	}
	return nil
}

// ReportTaskDTO implement urlenc.URLValuesUnmarshaler.
func (m *ReportTaskDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "name":
				m.Name = vals[0]
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "type":
				m.Type = vals[0]
			case "dashboardId":
				m.DashboardId = vals[0]
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			case "notifyTarget":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
			case "notifyTarget.type":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.Type = vals[0]
			case "notifyTarget.groupId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.GroupId = val
			case "notifyTarget.groupType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.GroupType = vals[0]
			case "notifyTarget.notifyGroup":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
			case "notifyTarget.notifyGroup.id":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.Id = val
			case "notifyTarget.notifyGroup.name":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Name = vals[0]
			case "notifyTarget.notifyGroup.scopeType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeType = vals[0]
			case "notifyTarget.notifyGroup.scopeId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeId = vals[0]
			case "notifyTarget.notifyGroup.createdAt":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
			case "notifyTarget.notifyGroup.createdAt.seconds":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.CreatedAt.Seconds = val
			case "notifyTarget.notifyGroup.createdAt.nanos":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.CreatedAt.Nanos = int32(val)
			case "notifyTarget.notifyGroup.creator":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Creator = vals[0]
			case "notifyTarget.notifyGroup.label":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Label = vals[0]
			case "createdAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt = val
			case "updatedAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt = val
			}
		}
	}
	return nil
}

// ReportTaskOnly implement urlenc.URLValuesUnmarshaler.
func (m *ReportTaskOnly) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "name":
				m.Name = vals[0]
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "type":
				m.Type = vals[0]
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			case "notifyTarget":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
			case "notifyTarget.type":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.Type = vals[0]
			case "notifyTarget.groupId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.GroupId = val
			case "notifyTarget.groupType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.GroupType = vals[0]
			case "notifyTarget.notifyGroup":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
			case "notifyTarget.notifyGroup.id":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.Id = val
			case "notifyTarget.notifyGroup.name":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Name = vals[0]
			case "notifyTarget.notifyGroup.scopeType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeType = vals[0]
			case "notifyTarget.notifyGroup.scopeId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeId = vals[0]
			case "notifyTarget.notifyGroup.createdAt":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
			case "notifyTarget.notifyGroup.createdAt.seconds":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.CreatedAt.Seconds = val
			case "notifyTarget.notifyGroup.createdAt.nanos":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyTarget.NotifyGroup.CreatedAt == nil {
					m.NotifyTarget.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.CreatedAt.Nanos = int32(val)
			case "notifyTarget.notifyGroup.creator":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Creator = vals[0]
			case "notifyTarget.notifyGroup.label":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Label = vals[0]
			case "createdAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt = val
			case "updatedAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt = val
			}
		}
	}
	return nil
}

// Notify implement urlenc.URLValuesUnmarshaler.
func (m *Notify) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "type":
				m.Type = vals[0]
			case "groupId":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.GroupId = val
			case "groupType":
				m.GroupType = vals[0]
			case "notifyGroup":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &pb.NotifyGroup{}
				}
			case "notifyGroup.id":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &pb.NotifyGroup{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyGroup.Id = val
			case "notifyGroup.name":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyGroup.Name = vals[0]
			case "notifyGroup.scopeType":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyGroup.ScopeType = vals[0]
			case "notifyGroup.scopeId":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyGroup.ScopeId = vals[0]
			case "notifyGroup.createdAt":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyGroup.CreatedAt == nil {
					m.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
			case "notifyGroup.createdAt.seconds":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyGroup.CreatedAt == nil {
					m.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyGroup.CreatedAt.Seconds = val
			case "notifyGroup.createdAt.nanos":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &pb.NotifyGroup{}
				}
				if m.NotifyGroup.CreatedAt == nil {
					m.NotifyGroup.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.NotifyGroup.CreatedAt.Nanos = int32(val)
			case "notifyGroup.creator":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyGroup.Creator = vals[0]
			case "notifyGroup.label":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &pb.NotifyGroup{}
				}
				m.NotifyGroup.Label = vals[0]
			}
		}
	}
	return nil
}
