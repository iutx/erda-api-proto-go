// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: report.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListTasksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTasksRequestMultiError, or nil if none found.
func (m *ListTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if utf8.RuneCountInString(m.GetScopeId()) < 1 {
		err := ListTasksRequestValidationError{
			field:  "ScopeId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Type

	if len(errors) > 0 {
		return ListTasksRequestMultiError(errors)
	}

	return nil
}

// ListTasksRequestMultiError is an error wrapping multiple validation errors
// returned by ListTasksRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTasksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTasksRequestMultiError) AllErrors() []error { return m }

// ListTasksRequestValidationError is the validation error returned by
// ListTasksRequest.Validate if the designated constraints aren't met.
type ListTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTasksRequestValidationError) ErrorName() string { return "ListTasksRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTasksRequestValidationError{}

// Validate checks the field values on ListTasksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTasksResponseMultiError, or nil if none found.
func (m *ListTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTasksResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTasksResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTasksResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListTasksResponseMultiError(errors)
	}

	return nil
}

// ListTasksResponseMultiError is an error wrapping multiple validation errors
// returned by ListTasksResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTasksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTasksResponseMultiError) AllErrors() []error { return m }

// ListTasksResponseValidationError is the validation error returned by
// ListTasksResponse.Validate if the designated constraints aren't met.
type ListTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTasksResponseValidationError) ErrorName() string {
	return "ListTasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTasksResponseValidationError{}

// Validate checks the field values on CreateTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTaskRequestMultiError, or nil if none found.
func (m *CreateTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Scope

	// no validation rules for ScopeId

	// no validation rules for Type

	// no validation rules for DashboardId

	// no validation rules for Enable

	if all {
		switch v := interface{}(m.GetNotifyTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "NotifyTarget",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "NotifyTarget",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifyTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTaskRequestValidationError{
				field:  "NotifyTarget",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTaskRequestMultiError(errors)
	}

	return nil
}

// CreateTaskRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskRequestMultiError) AllErrors() []error { return m }

// CreateTaskRequestValidationError is the validation error returned by
// CreateTaskRequest.Validate if the designated constraints aren't met.
type CreateTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskRequestValidationError) ErrorName() string {
	return "CreateTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskRequestValidationError{}

// Validate checks the field values on CreateTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTaskResponseMultiError, or nil if none found.
func (m *CreateTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTaskResponseMultiError(errors)
	}

	return nil
}

// CreateTaskResponseMultiError is an error wrapping multiple validation errors
// returned by CreateTaskResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskResponseMultiError) AllErrors() []error { return m }

// CreateTaskResponseValidationError is the validation error returned by
// CreateTaskResponse.Validate if the designated constraints aren't met.
type CreateTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskResponseValidationError) ErrorName() string {
	return "CreateTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskResponseValidationError{}

// Validate checks the field values on UpdateTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTaskRequestMultiError, or nil if none found.
func (m *UpdateTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.DashboardId != nil {
		// no validation rules for DashboardId
	}

	if m.NotifyTarget != nil {

		if all {
			switch v := interface{}(m.GetNotifyTarget()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateTaskRequestValidationError{
						field:  "NotifyTarget",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateTaskRequestValidationError{
						field:  "NotifyTarget",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNotifyTarget()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTaskRequestValidationError{
					field:  "NotifyTarget",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateTaskRequestMultiError(errors)
	}

	return nil
}

// UpdateTaskRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTaskRequestMultiError) AllErrors() []error { return m }

// UpdateTaskRequestValidationError is the validation error returned by
// UpdateTaskRequest.Validate if the designated constraints aren't met.
type UpdateTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaskRequestValidationError) ErrorName() string {
	return "UpdateTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaskRequestValidationError{}

// Validate checks the field values on SwitchTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SwitchTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SwitchTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SwitchTaskRequestMultiError, or nil if none found.
func (m *SwitchTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SwitchTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Enable

	if len(errors) > 0 {
		return SwitchTaskRequestMultiError(errors)
	}

	return nil
}

// SwitchTaskRequestMultiError is an error wrapping multiple validation errors
// returned by SwitchTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type SwitchTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SwitchTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SwitchTaskRequestMultiError) AllErrors() []error { return m }

// SwitchTaskRequestValidationError is the validation error returned by
// SwitchTaskRequest.Validate if the designated constraints aren't met.
type SwitchTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwitchTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwitchTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwitchTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwitchTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwitchTaskRequestValidationError) ErrorName() string {
	return "SwitchTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SwitchTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwitchTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwitchTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwitchTaskRequestValidationError{}

// Validate checks the field values on GetTaskRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTaskRequestMultiError,
// or nil if none found.
func (m *GetTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTaskRequestMultiError(errors)
	}

	return nil
}

// GetTaskRequestMultiError is an error wrapping multiple validation errors
// returned by GetTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskRequestMultiError) AllErrors() []error { return m }

// GetTaskRequestValidationError is the validation error returned by
// GetTaskRequest.Validate if the designated constraints aren't met.
type GetTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskRequestValidationError) ErrorName() string { return "GetTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskRequestValidationError{}

// Validate checks the field values on DeleteTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTaskRequestMultiError, or nil if none found.
func (m *DeleteTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTaskRequestMultiError(errors)
	}

	return nil
}

// DeleteTaskRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTaskRequestMultiError) AllErrors() []error { return m }

// DeleteTaskRequestValidationError is the validation error returned by
// DeleteTaskRequest.Validate if the designated constraints aren't met.
type DeleteTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTaskRequestValidationError) ErrorName() string {
	return "DeleteTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTaskRequestValidationError{}

// Validate checks the field values on ListTypesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTypesRequestMultiError, or nil if none found.
func (m *ListTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return ListTypesRequestMultiError(errors)
	}

	return nil
}

// ListTypesRequestMultiError is an error wrapping multiple validation errors
// returned by ListTypesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTypesRequestMultiError) AllErrors() []error { return m }

// ListTypesRequestValidationError is the validation error returned by
// ListTypesRequest.Validate if the designated constraints aren't met.
type ListTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTypesRequestValidationError) ErrorName() string { return "ListTypesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTypesRequestValidationError{}

// Validate checks the field values on ListTypesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTypesResponseMultiError, or nil if none found.
func (m *ListTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTypesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTypesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTypesResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListTypesResponseMultiError(errors)
	}

	return nil
}

// ListTypesResponseMultiError is an error wrapping multiple validation errors
// returned by ListTypesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTypesResponseMultiError) AllErrors() []error { return m }

// ListTypesResponseValidationError is the validation error returned by
// ListTypesResponse.Validate if the designated constraints aren't met.
type ListTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTypesResponseValidationError) ErrorName() string {
	return "ListTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTypesResponseValidationError{}

// Validate checks the field values on Type with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Type with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TypeMultiError, or nil if none found.
func (m *Type) ValidateAll() error {
	return m.validate(true)
}

func (m *Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Value

	if len(errors) > 0 {
		return TypeMultiError(errors)
	}

	return nil
}

// TypeMultiError is an error wrapping multiple validation errors returned by
// Type.ValidateAll() if the designated constraints aren't met.
type TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TypeMultiError) AllErrors() []error { return m }

// TypeValidationError is the validation error returned by Type.Validate if the
// designated constraints aren't met.
type TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypeValidationError) ErrorName() string { return "TypeValidationError" }

// Error satisfies the builtin error interface
func (e TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypeValidationError{}

// Validate checks the field values on ListHistoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHistoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHistoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHistoriesRequestMultiError, or nil if none found.
func (m *ListHistoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHistoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for Scope

	// no validation rules for ScopeId

	// no validation rules for Start

	// no validation rules for End

	if len(errors) > 0 {
		return ListHistoriesRequestMultiError(errors)
	}

	return nil
}

// ListHistoriesRequestMultiError is an error wrapping multiple validation
// errors returned by ListHistoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListHistoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHistoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHistoriesRequestMultiError) AllErrors() []error { return m }

// ListHistoriesRequestValidationError is the validation error returned by
// ListHistoriesRequest.Validate if the designated constraints aren't met.
type ListHistoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistoriesRequestValidationError) ErrorName() string {
	return "ListHistoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistoriesRequestValidationError{}

// Validate checks the field values on ListHistoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHistoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHistoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHistoriesResponseMultiError, or nil if none found.
func (m *ListHistoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHistoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHistoriesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHistoriesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHistoriesResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListHistoriesResponseMultiError(errors)
	}

	return nil
}

// ListHistoriesResponseMultiError is an error wrapping multiple validation
// errors returned by ListHistoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListHistoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHistoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHistoriesResponseMultiError) AllErrors() []error { return m }

// ListHistoriesResponseValidationError is the validation error returned by
// ListHistoriesResponse.Validate if the designated constraints aren't met.
type ListHistoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistoriesResponseValidationError) ErrorName() string {
	return "ListHistoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistoriesResponseValidationError{}

// Validate checks the field values on ReportHistoryDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReportHistoryDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportHistoryDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportHistoryDTOMultiError, or nil if none found.
func (m *ReportHistoryDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportHistoryDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Scope

	// no validation rules for ScopeId

	if all {
		switch v := interface{}(m.GetReportTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportHistoryDTOValidationError{
					field:  "ReportTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportHistoryDTOValidationError{
					field:  "ReportTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportHistoryDTOValidationError{
				field:  "ReportTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDashboardBlock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportHistoryDTOValidationError{
					field:  "DashboardBlock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportHistoryDTOValidationError{
					field:  "DashboardBlock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDashboardBlock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportHistoryDTOValidationError{
				field:  "DashboardBlock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Start

	// no validation rules for End

	if len(errors) > 0 {
		return ReportHistoryDTOMultiError(errors)
	}

	return nil
}

// ReportHistoryDTOMultiError is an error wrapping multiple validation errors
// returned by ReportHistoryDTO.ValidateAll() if the designated constraints
// aren't met.
type ReportHistoryDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportHistoryDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportHistoryDTOMultiError) AllErrors() []error { return m }

// ReportHistoryDTOValidationError is the validation error returned by
// ReportHistoryDTO.Validate if the designated constraints aren't met.
type ReportHistoryDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportHistoryDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportHistoryDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportHistoryDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportHistoryDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportHistoryDTOValidationError) ErrorName() string { return "ReportHistoryDTOValidationError" }

// Error satisfies the builtin error interface
func (e ReportHistoryDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportHistoryDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportHistoryDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportHistoryDTOValidationError{}

// Validate checks the field values on CreateHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHistoryRequestMultiError, or nil if none found.
func (m *CreateHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Scope

	// no validation rules for ScopeId

	// no validation rules for TaskId

	if all {
		switch v := interface{}(m.GetReportTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateHistoryRequestValidationError{
					field:  "ReportTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateHistoryRequestValidationError{
					field:  "ReportTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHistoryRequestValidationError{
				field:  "ReportTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DashboardId

	if all {
		switch v := interface{}(m.GetDashboardBlock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateHistoryRequestValidationError{
					field:  "DashboardBlock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateHistoryRequestValidationError{
					field:  "DashboardBlock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDashboardBlock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHistoryRequestValidationError{
				field:  "DashboardBlock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateHistoryRequestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateHistoryRequestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHistoryRequestValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Start

	// no validation rules for End

	if len(errors) > 0 {
		return CreateHistoryRequestMultiError(errors)
	}

	return nil
}

// CreateHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHistoryRequestMultiError) AllErrors() []error { return m }

// CreateHistoryRequestValidationError is the validation error returned by
// CreateHistoryRequest.Validate if the designated constraints aren't met.
type CreateHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHistoryRequestValidationError) ErrorName() string {
	return "CreateHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHistoryRequestValidationError{}

// Validate checks the field values on CreateHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHistoryResponseMultiError, or nil if none found.
func (m *CreateHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateHistoryResponseMultiError(errors)
	}

	return nil
}

// CreateHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by CreateHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHistoryResponseMultiError) AllErrors() []error { return m }

// CreateHistoryResponseValidationError is the validation error returned by
// CreateHistoryResponse.Validate if the designated constraints aren't met.
type CreateHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHistoryResponseValidationError) ErrorName() string {
	return "CreateHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHistoryResponseValidationError{}

// Validate checks the field values on GetHistoryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHistoryRequestMultiError, or nil if none found.
func (m *GetHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetHistoryRequestMultiError(errors)
	}

	return nil
}

// GetHistoryRequestMultiError is an error wrapping multiple validation errors
// returned by GetHistoryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHistoryRequestMultiError) AllErrors() []error { return m }

// GetHistoryRequestValidationError is the validation error returned by
// GetHistoryRequest.Validate if the designated constraints aren't met.
type GetHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistoryRequestValidationError) ErrorName() string {
	return "GetHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistoryRequestValidationError{}

// Validate checks the field values on GetHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHistoryResponseMultiError, or nil if none found.
func (m *GetHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Scope

	// no validation rules for ScopeId

	if all {
		switch v := interface{}(m.GetReportTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHistoryResponseValidationError{
					field:  "ReportTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHistoryResponseValidationError{
					field:  "ReportTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHistoryResponseValidationError{
				field:  "ReportTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDashboardBlock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHistoryResponseValidationError{
					field:  "DashboardBlock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHistoryResponseValidationError{
					field:  "DashboardBlock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDashboardBlock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHistoryResponseValidationError{
				field:  "DashboardBlock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Start

	// no validation rules for End

	if len(errors) > 0 {
		return GetHistoryResponseMultiError(errors)
	}

	return nil
}

// GetHistoryResponseMultiError is an error wrapping multiple validation errors
// returned by GetHistoryResponse.ValidateAll() if the designated constraints
// aren't met.
type GetHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHistoryResponseMultiError) AllErrors() []error { return m }

// GetHistoryResponseValidationError is the validation error returned by
// GetHistoryResponse.Validate if the designated constraints aren't met.
type GetHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistoryResponseValidationError) ErrorName() string {
	return "GetHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistoryResponseValidationError{}

// Validate checks the field values on DeleteHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteHistoryRequestMultiError, or nil if none found.
func (m *DeleteHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteHistoryRequestMultiError(errors)
	}

	return nil
}

// DeleteHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHistoryRequestMultiError) AllErrors() []error { return m }

// DeleteHistoryRequestValidationError is the validation error returned by
// DeleteHistoryRequest.Validate if the designated constraints aren't met.
type DeleteHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHistoryRequestValidationError) ErrorName() string {
	return "DeleteHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHistoryRequestValidationError{}

// Validate checks the field values on ReportTaskDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportTaskDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportTaskDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReportTaskDTOMultiError, or
// nil if none found.
func (m *ReportTaskDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportTaskDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Scope

	// no validation rules for ScopeId

	// no validation rules for Type

	// no validation rules for DashboardId

	// no validation rules for Enable

	if all {
		switch v := interface{}(m.GetNotifyTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportTaskDTOValidationError{
					field:  "NotifyTarget",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportTaskDTOValidationError{
					field:  "NotifyTarget",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifyTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportTaskDTOValidationError{
				field:  "NotifyTarget",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ReportTaskDTOMultiError(errors)
	}

	return nil
}

// ReportTaskDTOMultiError is an error wrapping multiple validation errors
// returned by ReportTaskDTO.ValidateAll() if the designated constraints
// aren't met.
type ReportTaskDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportTaskDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportTaskDTOMultiError) AllErrors() []error { return m }

// ReportTaskDTOValidationError is the validation error returned by
// ReportTaskDTO.Validate if the designated constraints aren't met.
type ReportTaskDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportTaskDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportTaskDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportTaskDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportTaskDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportTaskDTOValidationError) ErrorName() string { return "ReportTaskDTOValidationError" }

// Error satisfies the builtin error interface
func (e ReportTaskDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportTaskDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportTaskDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportTaskDTOValidationError{}

// Validate checks the field values on ReportTaskOnly with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportTaskOnly) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportTaskOnly with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReportTaskOnlyMultiError,
// or nil if none found.
func (m *ReportTaskOnly) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportTaskOnly) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Scope

	// no validation rules for ScopeId

	// no validation rules for Type

	// no validation rules for Enable

	if all {
		switch v := interface{}(m.GetNotifyTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportTaskOnlyValidationError{
					field:  "NotifyTarget",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportTaskOnlyValidationError{
					field:  "NotifyTarget",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifyTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportTaskOnlyValidationError{
				field:  "NotifyTarget",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ReportTaskOnlyMultiError(errors)
	}

	return nil
}

// ReportTaskOnlyMultiError is an error wrapping multiple validation errors
// returned by ReportTaskOnly.ValidateAll() if the designated constraints
// aren't met.
type ReportTaskOnlyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportTaskOnlyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportTaskOnlyMultiError) AllErrors() []error { return m }

// ReportTaskOnlyValidationError is the validation error returned by
// ReportTaskOnly.Validate if the designated constraints aren't met.
type ReportTaskOnlyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportTaskOnlyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportTaskOnlyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportTaskOnlyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportTaskOnlyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportTaskOnlyValidationError) ErrorName() string { return "ReportTaskOnlyValidationError" }

// Error satisfies the builtin error interface
func (e ReportTaskOnlyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportTaskOnly.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportTaskOnlyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportTaskOnlyValidationError{}

// Validate checks the field values on Notify with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notify with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NotifyMultiError, or nil if none found.
func (m *Notify) ValidateAll() error {
	return m.validate(true)
}

func (m *Notify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for GroupId

	// no validation rules for GroupType

	if all {
		switch v := interface{}(m.GetNotifyGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyValidationError{
					field:  "NotifyGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyValidationError{
					field:  "NotifyGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotifyGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyValidationError{
				field:  "NotifyGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotifyMultiError(errors)
	}

	return nil
}

// NotifyMultiError is an error wrapping multiple validation errors returned by
// Notify.ValidateAll() if the designated constraints aren't met.
type NotifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyMultiError) AllErrors() []error { return m }

// NotifyValidationError is the validation error returned by Notify.Validate if
// the designated constraints aren't met.
type NotifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyValidationError) ErrorName() string { return "NotifyValidationError" }

// Error satisfies the builtin error interface
func (e NotifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyValidationError{}
