// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: report.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb1 "github.com/erda-project/erda-proto-go/common/pb"
	pb "github.com/erda-project/erda-proto-go/tools/monitor/dashboard/report/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// ReportService report.proto
	ReportService() pb.ReportServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		reportService: pb.NewReportServiceClient(cc),
	}
}

type serviceClients struct {
	reportService pb.ReportServiceClient
}

func (c *serviceClients) ReportService() pb.ReportServiceClient {
	return c.reportService
}

type reportServiceWrapper struct {
	client pb.ReportServiceClient
	opts   []grpc1.CallOption
}

func (s *reportServiceWrapper) ListTasks(ctx context.Context, req *pb.ListTasksRequest) (*pb.ListTasksResponse, error) {
	return s.client.ListTasks(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *reportServiceWrapper) CreateTask(ctx context.Context, req *pb.CreateTaskRequest) (*pb.CreateTaskResponse, error) {
	return s.client.CreateTask(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *reportServiceWrapper) UpdateTask(ctx context.Context, req *pb.UpdateTaskRequest) (*pb1.VoidResponse, error) {
	return s.client.UpdateTask(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *reportServiceWrapper) SwitchTask(ctx context.Context, req *pb.SwitchTaskRequest) (*pb1.VoidResponse, error) {
	return s.client.SwitchTask(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *reportServiceWrapper) GetTask(ctx context.Context, req *pb.GetTaskRequest) (*pb.ReportTaskDTO, error) {
	return s.client.GetTask(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *reportServiceWrapper) DeleteTask(ctx context.Context, req *pb.DeleteTaskRequest) (*pb1.VoidResponse, error) {
	return s.client.DeleteTask(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *reportServiceWrapper) ListTypes(ctx context.Context, req *pb.ListTypesRequest) (*pb.ListTypesResponse, error) {
	return s.client.ListTypes(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *reportServiceWrapper) ListHistories(ctx context.Context, req *pb.ListHistoriesRequest) (*pb.ListHistoriesResponse, error) {
	return s.client.ListHistories(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *reportServiceWrapper) CreateHistory(ctx context.Context, req *pb.CreateHistoryRequest) (*pb.CreateHistoryResponse, error) {
	return s.client.CreateHistory(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *reportServiceWrapper) GetHistory(ctx context.Context, req *pb.GetHistoryRequest) (*pb.GetHistoryResponse, error) {
	return s.client.GetHistory(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *reportServiceWrapper) DeleteHistory(ctx context.Context, req *pb.DeleteHistoryRequest) (*pb1.VoidResponse, error) {
	return s.client.DeleteHistory(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
