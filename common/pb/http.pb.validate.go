// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: http.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VoidRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VoidRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoidRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VoidRequestMultiError, or
// nil if none found.
func (m *VoidRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VoidRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VoidRequestMultiError(errors)
	}

	return nil
}

// VoidRequestMultiError is an error wrapping multiple validation errors
// returned by VoidRequest.ValidateAll() if the designated constraints aren't met.
type VoidRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoidRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoidRequestMultiError) AllErrors() []error { return m }

// VoidRequestValidationError is the validation error returned by
// VoidRequest.Validate if the designated constraints aren't met.
type VoidRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoidRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoidRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoidRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoidRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoidRequestValidationError) ErrorName() string { return "VoidRequestValidationError" }

// Error satisfies the builtin error interface
func (e VoidRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoidRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoidRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoidRequestValidationError{}

// Validate checks the field values on VoidResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VoidResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoidResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VoidResponseMultiError, or
// nil if none found.
func (m *VoidResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VoidResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VoidResponseMultiError(errors)
	}

	return nil
}

// VoidResponseMultiError is an error wrapping multiple validation errors
// returned by VoidResponse.ValidateAll() if the designated constraints aren't met.
type VoidResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoidResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoidResponseMultiError) AllErrors() []error { return m }

// VoidResponseValidationError is the validation error returned by
// VoidResponse.Validate if the designated constraints aren't met.
type VoidResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoidResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoidResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoidResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoidResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoidResponseValidationError) ErrorName() string { return "VoidResponseValidationError" }

// Error satisfies the builtin error interface
func (e VoidResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoidResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoidResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoidResponseValidationError{}

// Validate checks the field values on ResponseHeader with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResponseHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseHeader with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseHeaderMultiError,
// or nil if none found.
func (m *ResponseHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseHeaderValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseHeaderValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseHeaderValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResponseHeaderMultiError(errors)
	}

	return nil
}

// ResponseHeaderMultiError is an error wrapping multiple validation errors
// returned by ResponseHeader.ValidateAll() if the designated constraints
// aren't met.
type ResponseHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseHeaderMultiError) AllErrors() []error { return m }

// ResponseHeaderValidationError is the validation error returned by
// ResponseHeader.Validate if the designated constraints aren't met.
type ResponseHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseHeaderValidationError) ErrorName() string { return "ResponseHeaderValidationError" }

// Error satisfies the builtin error interface
func (e ResponseHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseHeaderValidationError{}

// Validate checks the field values on ResponseError with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseErrorMultiError, or
// nil if none found.
func (m *ResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetCtx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseErrorValidationError{
					field:  "Ctx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseErrorValidationError{
					field:  "Ctx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseErrorValidationError{
				field:  "Ctx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResponseErrorMultiError(errors)
	}

	return nil
}

// ResponseErrorMultiError is an error wrapping multiple validation errors
// returned by ResponseError.ValidateAll() if the designated constraints
// aren't met.
type ResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseErrorMultiError) AllErrors() []error { return m }

// ResponseErrorValidationError is the validation error returned by
// ResponseError.Validate if the designated constraints aren't met.
type ResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseErrorValidationError) ErrorName() string { return "ResponseErrorValidationError" }

// Error satisfies the builtin error interface
func (e ResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseErrorValidationError{}
