// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: openapi.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*OpenAPIOption)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APIAuth)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CheckOverPermission)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CheckOver)(nil)

// OpenAPIOption implement urlenc.URLValuesUnmarshaler.
func (m *OpenAPIOption) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "path":
				m.Path = vals[0]
			case "prefix":
				m.Prefix = vals[0]
			case "backend_prefix":
				m.BackendPrefix = vals[0]
			case "service":
				m.Service = vals[0]
			case "private":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Private = val
			case "auth":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
			case "auth.no_check":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Auth.NoCheck = val
			case "auth.check_login":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Auth.CheckLogin = val
			case "auth.try_check_login":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Auth.TryCheckLogin = val
			case "auth.check_token":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Auth.CheckToken = val
			case "auth.check_basic_auth":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Auth.CheckBasicAuth = val
			case "auth.check_over_permission":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				if m.Auth.CheckOverPermission == nil {
					m.Auth.CheckOverPermission = &CheckOverPermission{}
				}
			case "auth.check_over_permission.org_name":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				if m.Auth.CheckOverPermission == nil {
					m.Auth.CheckOverPermission = &CheckOverPermission{}
				}
				if m.Auth.CheckOverPermission.OrgName == nil {
					m.Auth.CheckOverPermission.OrgName = &CheckOver{}
				}
			case "auth.check_over_permission.org_name.enable":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				if m.Auth.CheckOverPermission == nil {
					m.Auth.CheckOverPermission = &CheckOverPermission{}
				}
				if m.Auth.CheckOverPermission.OrgName == nil {
					m.Auth.CheckOverPermission.OrgName = &CheckOver{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Auth.CheckOverPermission.OrgName.Enable = val
			case "auth.check_over_permission.org_name.expr":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				if m.Auth.CheckOverPermission == nil {
					m.Auth.CheckOverPermission = &CheckOverPermission{}
				}
				if m.Auth.CheckOverPermission.OrgName == nil {
					m.Auth.CheckOverPermission.OrgName = &CheckOver{}
				}
				m.Auth.CheckOverPermission.OrgName.Expr = vals
			case "auth.check_over_permission.org_id":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				if m.Auth.CheckOverPermission == nil {
					m.Auth.CheckOverPermission = &CheckOverPermission{}
				}
				if m.Auth.CheckOverPermission.OrgId == nil {
					m.Auth.CheckOverPermission.OrgId = &CheckOver{}
				}
			case "auth.check_over_permission.org_id.enable":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				if m.Auth.CheckOverPermission == nil {
					m.Auth.CheckOverPermission = &CheckOverPermission{}
				}
				if m.Auth.CheckOverPermission.OrgId == nil {
					m.Auth.CheckOverPermission.OrgId = &CheckOver{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Auth.CheckOverPermission.OrgId.Enable = val
			case "auth.check_over_permission.org_id.expr":
				if m.Auth == nil {
					m.Auth = &APIAuth{}
				}
				if m.Auth.CheckOverPermission == nil {
					m.Auth.CheckOverPermission = &CheckOverPermission{}
				}
				if m.Auth.CheckOverPermission.OrgId == nil {
					m.Auth.CheckOverPermission.OrgId = &CheckOver{}
				}
				m.Auth.CheckOverPermission.OrgId.Expr = vals
			case "doc":
				m.Doc = vals[0]
			}
		}
	}
	return nil
}

// APIAuth implement urlenc.URLValuesUnmarshaler.
func (m *APIAuth) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "no_check":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.NoCheck = val
			case "check_login":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CheckLogin = val
			case "try_check_login":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.TryCheckLogin = val
			case "check_token":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CheckToken = val
			case "check_basic_auth":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CheckBasicAuth = val
			case "check_over_permission":
				if m.CheckOverPermission == nil {
					m.CheckOverPermission = &CheckOverPermission{}
				}
			case "check_over_permission.org_name":
				if m.CheckOverPermission == nil {
					m.CheckOverPermission = &CheckOverPermission{}
				}
				if m.CheckOverPermission.OrgName == nil {
					m.CheckOverPermission.OrgName = &CheckOver{}
				}
			case "check_over_permission.org_name.enable":
				if m.CheckOverPermission == nil {
					m.CheckOverPermission = &CheckOverPermission{}
				}
				if m.CheckOverPermission.OrgName == nil {
					m.CheckOverPermission.OrgName = &CheckOver{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CheckOverPermission.OrgName.Enable = val
			case "check_over_permission.org_name.expr":
				if m.CheckOverPermission == nil {
					m.CheckOverPermission = &CheckOverPermission{}
				}
				if m.CheckOverPermission.OrgName == nil {
					m.CheckOverPermission.OrgName = &CheckOver{}
				}
				m.CheckOverPermission.OrgName.Expr = vals
			case "check_over_permission.org_id":
				if m.CheckOverPermission == nil {
					m.CheckOverPermission = &CheckOverPermission{}
				}
				if m.CheckOverPermission.OrgId == nil {
					m.CheckOverPermission.OrgId = &CheckOver{}
				}
			case "check_over_permission.org_id.enable":
				if m.CheckOverPermission == nil {
					m.CheckOverPermission = &CheckOverPermission{}
				}
				if m.CheckOverPermission.OrgId == nil {
					m.CheckOverPermission.OrgId = &CheckOver{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CheckOverPermission.OrgId.Enable = val
			case "check_over_permission.org_id.expr":
				if m.CheckOverPermission == nil {
					m.CheckOverPermission = &CheckOverPermission{}
				}
				if m.CheckOverPermission.OrgId == nil {
					m.CheckOverPermission.OrgId = &CheckOver{}
				}
				m.CheckOverPermission.OrgId.Expr = vals
			}
		}
	}
	return nil
}

// CheckOverPermission implement urlenc.URLValuesUnmarshaler.
func (m *CheckOverPermission) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "org_name":
				if m.OrgName == nil {
					m.OrgName = &CheckOver{}
				}
			case "org_name.enable":
				if m.OrgName == nil {
					m.OrgName = &CheckOver{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrgName.Enable = val
			case "org_name.expr":
				if m.OrgName == nil {
					m.OrgName = &CheckOver{}
				}
				m.OrgName.Expr = vals
			case "org_id":
				if m.OrgId == nil {
					m.OrgId = &CheckOver{}
				}
			case "org_id.enable":
				if m.OrgId == nil {
					m.OrgId = &CheckOver{}
				}
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrgId.Enable = val
			case "org_id.expr":
				if m.OrgId == nil {
					m.OrgId = &CheckOver{}
				}
				m.OrgId.Expr = vals
			}
		}
	}
	return nil
}

// CheckOver implement urlenc.URLValuesUnmarshaler.
func (m *CheckOver) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			case "expr":
				m.Expr = vals
			}
		}
	}
	return nil
}
