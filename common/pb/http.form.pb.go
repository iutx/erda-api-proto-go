// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: http.proto

package pb

import (
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*VoidRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*VoidResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ResponseHeader)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ResponseError)(nil)

// VoidRequest implement urlenc.URLValuesUnmarshaler.
func (m *VoidRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// VoidResponse implement urlenc.URLValuesUnmarshaler.
func (m *VoidResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ResponseHeader implement urlenc.URLValuesUnmarshaler.
func (m *ResponseHeader) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			case "error":
				if m.Error == nil {
					m.Error = &ResponseError{}
				}
			case "error.code":
				if m.Error == nil {
					m.Error = &ResponseError{}
				}
				m.Error.Code = vals[0]
			case "error.msg":
				if m.Error == nil {
					m.Error = &ResponseError{}
				}
				m.Error.Msg = vals[0]
			case "error.ctx":
				if m.Error == nil {
					m.Error = &ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.null_value":
				if m.Error == nil {
					m.Error = &ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.number_value":
				if m.Error == nil {
					m.Error = &ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.string_value":
				if m.Error == nil {
					m.Error = &ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.bool_value":
				if m.Error == nil {
					m.Error = &ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.struct_value":
				if m.Error == nil {
					m.Error = &ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			case "error.ctx.list_value":
				if m.Error == nil {
					m.Error = &ResponseError{}
				}
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error.Ctx = val
					} else {
						m.Error.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ResponseError implement urlenc.URLValuesUnmarshaler.
func (m *ResponseError) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "code":
				m.Code = vals[0]
			case "msg":
				m.Msg = vals[0]
			case "ctx":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Ctx = val
					} else {
						m.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}
