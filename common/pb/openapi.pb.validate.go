// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: openapi.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OpenAPIOption with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OpenAPIOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenAPIOption with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OpenAPIOptionMultiError, or
// nil if none found.
func (m *OpenAPIOption) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenAPIOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Prefix

	// no validation rules for BackendPrefix

	// no validation rules for Service

	// no validation rules for Private

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpenAPIOptionValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpenAPIOptionValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenAPIOptionValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Doc

	if len(errors) > 0 {
		return OpenAPIOptionMultiError(errors)
	}

	return nil
}

// OpenAPIOptionMultiError is an error wrapping multiple validation errors
// returned by OpenAPIOption.ValidateAll() if the designated constraints
// aren't met.
type OpenAPIOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenAPIOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenAPIOptionMultiError) AllErrors() []error { return m }

// OpenAPIOptionValidationError is the validation error returned by
// OpenAPIOption.Validate if the designated constraints aren't met.
type OpenAPIOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenAPIOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenAPIOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenAPIOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenAPIOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenAPIOptionValidationError) ErrorName() string { return "OpenAPIOptionValidationError" }

// Error satisfies the builtin error interface
func (e OpenAPIOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenAPIOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenAPIOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenAPIOptionValidationError{}

// Validate checks the field values on APIAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *APIAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in APIAuthMultiError, or nil if none found.
func (m *APIAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *APIAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NoCheck

	// no validation rules for CheckLogin

	// no validation rules for TryCheckLogin

	// no validation rules for CheckToken

	// no validation rules for CheckBasicAuth

	if all {
		switch v := interface{}(m.GetCheckOverPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, APIAuthValidationError{
					field:  "CheckOverPermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, APIAuthValidationError{
					field:  "CheckOverPermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckOverPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return APIAuthValidationError{
				field:  "CheckOverPermission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return APIAuthMultiError(errors)
	}

	return nil
}

// APIAuthMultiError is an error wrapping multiple validation errors returned
// by APIAuth.ValidateAll() if the designated constraints aren't met.
type APIAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIAuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIAuthMultiError) AllErrors() []error { return m }

// APIAuthValidationError is the validation error returned by APIAuth.Validate
// if the designated constraints aren't met.
type APIAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APIAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIAuthValidationError) ErrorName() string { return "APIAuthValidationError" }

// Error satisfies the builtin error interface
func (e APIAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APIAuthValidationError{}

// Validate checks the field values on CheckOverPermission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckOverPermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckOverPermission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckOverPermissionMultiError, or nil if none found.
func (m *CheckOverPermission) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckOverPermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrgName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckOverPermissionValidationError{
					field:  "OrgName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckOverPermissionValidationError{
					field:  "OrgName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrgName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckOverPermissionValidationError{
				field:  "OrgName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrgId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckOverPermissionValidationError{
					field:  "OrgId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckOverPermissionValidationError{
					field:  "OrgId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrgId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckOverPermissionValidationError{
				field:  "OrgId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckOverPermissionMultiError(errors)
	}

	return nil
}

// CheckOverPermissionMultiError is an error wrapping multiple validation
// errors returned by CheckOverPermission.ValidateAll() if the designated
// constraints aren't met.
type CheckOverPermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckOverPermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckOverPermissionMultiError) AllErrors() []error { return m }

// CheckOverPermissionValidationError is the validation error returned by
// CheckOverPermission.Validate if the designated constraints aren't met.
type CheckOverPermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckOverPermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckOverPermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckOverPermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckOverPermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckOverPermissionValidationError) ErrorName() string {
	return "CheckOverPermissionValidationError"
}

// Error satisfies the builtin error interface
func (e CheckOverPermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckOverPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckOverPermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckOverPermissionValidationError{}

// Validate checks the field values on CheckOver with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckOver) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckOver with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckOverMultiError, or nil
// if none found.
func (m *CheckOver) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckOver) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	if len(errors) > 0 {
		return CheckOverMultiError(errors)
	}

	return nil
}

// CheckOverMultiError is an error wrapping multiple validation errors returned
// by CheckOver.ValidateAll() if the designated constraints aren't met.
type CheckOverMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckOverMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckOverMultiError) AllErrors() []error { return m }

// CheckOverValidationError is the validation error returned by
// CheckOver.Validate if the designated constraints aren't met.
type CheckOverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckOverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckOverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckOverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckOverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckOverValidationError) ErrorName() string { return "CheckOverValidationError" }

// Error satisfies the builtin error interface
func (e CheckOverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckOver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckOverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckOverValidationError{}
