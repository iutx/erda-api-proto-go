// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: gittar.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/gittar/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// Gittar gittar.proto
	Gittar() pb.GittarClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		gittar: pb.NewGittarClient(cc),
	}
}

type serviceClients struct {
	gittar pb.GittarClient
}

func (c *serviceClients) Gittar() pb.GittarClient {
	return c.gittar
}

type gittarWrapper struct {
	client pb.GittarClient
	opts   []grpc1.CallOption
}

func (s *gittarWrapper) GITTAR_ARCHIVE(ctx context.Context, req *pb.GITTAR_ARCHIVE_Request) (*emptypb.Empty, error) {
	return s.client.GITTAR_ARCHIVE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_BLAME(ctx context.Context, req *pb.GITTAR_BLAME_Request) (*pb.GittarBlameResponse, error) {
	return s.client.GITTAR_BLAME(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_BLOB(ctx context.Context, req *pb.GITTAR_BLOB_Request) (*pb.GittarBlobResponse, error) {
	return s.client.GITTAR_BLOB(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_BRANCH(ctx context.Context, req *pb.GITTAR_BRANCH_Request) (*pb.GittarBranchesResponse, error) {
	return s.client.GITTAR_BRANCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_BRANCH_CREATE(ctx context.Context, req *pb.GittarCreateBranchRequest) (*pb.GittarCreateBranchResponse, error) {
	return s.client.GITTAR_BRANCH_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_BRANCH_DELETE(ctx context.Context, req *pb.GITTAR_BRANCH_DELETE_Request) (*pb.GittarDeleteBranchResponse, error) {
	return s.client.GITTAR_BRANCH_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_CHECK_RUN_CREATE(ctx context.Context, req *pb.CheckRun) (*pb.CreateCheckRunResponse, error) {
	return s.client.GITTAR_CHECK_RUN_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_CHECK_RUN_QUERY(ctx context.Context, req *pb.CheckRun) (*pb.CreateCheckRunResponse, error) {
	return s.client.GITTAR_CHECK_RUN_QUERY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_COMMIT(ctx context.Context, req *pb.GITTAR_COMMIT_Request) (*pb.GittarCommitResponse, error) {
	return s.client.GITTAR_COMMIT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_COMMITS(ctx context.Context, req *pb.GittarCommitsRequest) (*pb.GittarCommitsResponse, error) {
	return s.client.GITTAR_COMMITS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_COMMITS_CREATE(ctx context.Context, req *pb.GittarCreateCommitRequest) (*pb.GittarCreateCommitResponse, error) {
	return s.client.GITTAR_COMMITS_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_COMPARE(ctx context.Context, req *pb.GITTAR_COMPARE_Request) (*pb.GittarCompareResponse, error) {
	return s.client.GITTAR_COMPARE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_MERGE_ACTION_POST(ctx context.Context, req *pb.GITTAR_MERGE_ACTION_POST_Request) (*emptypb.Empty, error) {
	return s.client.GITTAR_MERGE_ACTION_POST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_MERGE_ACTION_QUERY(ctx context.Context, req *pb.GITTAR_MERGE_ACTION_QUERY_Request) (*emptypb.Empty, error) {
	return s.client.GITTAR_MERGE_ACTION_QUERY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_MERGE_CREATE(ctx context.Context, req *pb.GittarCreateMergeRequest) (*pb.GittarCreateMergeResponse, error) {
	return s.client.GITTAR_MERGE_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_MERGE_GET(ctx context.Context, req *pb.GITTAR_MERGE_GET_Request) (*pb.GittarQueryMrDetailResponse, error) {
	return s.client.GITTAR_MERGE_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_MERGE_QUERY(ctx context.Context, req *pb.GittarQueryMrRequest) (*pb.GittarQueryMrResponse, error) {
	return s.client.GITTAR_MERGE_QUERY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_MERGE_STATS(ctx context.Context, req *pb.GittarMergeStatusRequest) (*pb.GittarMergeStatusResponse, error) {
	return s.client.GITTAR_MERGE_STATS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_MR_TEMPLATES(ctx context.Context, req *pb.GITTAR_MR_TEMPLATES_Request) (*pb.GittarMergeTemplatesResponse, error) {
	return s.client.GITTAR_MR_TEMPLATES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_RAW(ctx context.Context, req *pb.GITTAR_RAW_Request) (*emptypb.Empty, error) {
	return s.client.GITTAR_RAW(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_REPO_STATS(ctx context.Context, req *pb.GITTAR_REPO_STATS_Request) (*pb.GittarStatsResponse, error) {
	return s.client.GITTAR_REPO_STATS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_REPO_STATS_DEFAULT(ctx context.Context, req *pb.GITTAR_REPO_STATS_DEFAULT_Request) (*pb.GittarStatsResponse, error) {
	return s.client.GITTAR_REPO_STATS_DEFAULT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_TAG(ctx context.Context, req *pb.GITTAR_TAG_Request) (*pb.GittarTagsResponse, error) {
	return s.client.GITTAR_TAG(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_TAG_CREATE(ctx context.Context, req *pb.GittarCreateTagRequest) (*pb.GittarCreateTagResponse, error) {
	return s.client.GITTAR_TAG_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_TAG_DELETE(ctx context.Context, req *pb.GITTAR_TAG_DELETE_Request) (*pb.GittarDeleteResponse, error) {
	return s.client.GITTAR_TAG_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_TREE(ctx context.Context, req *pb.GITTAR_TREE_Request) (*emptypb.Empty, error) {
	return s.client.GITTAR_TREE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) GITTAR_TREE_SEARCH(ctx context.Context, req *pb.GittarTreeSearchRequest) (*pb.GittarTreeSearchResponse, error) {
	return s.client.GITTAR_TREE_SEARCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) REPO_DELETE(ctx context.Context, req *pb.REPO_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.REPO_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) REPO_GET(ctx context.Context, req *pb.REPO_GET_Request) (*emptypb.Empty, error) {
	return s.client.REPO_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) REPO_POST(ctx context.Context, req *pb.REPO_POST_Request) (*emptypb.Empty, error) {
	return s.client.REPO_POST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *gittarWrapper) REPO_PUT(ctx context.Context, req *pb.REPO_PUT_Request) (*emptypb.Empty, error) {
	return s.client.REPO_PUT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
