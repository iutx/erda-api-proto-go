// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: gittar.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string          `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name      string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Commit    *structpb.Value `protobuf:"bytes,3,opt,name=commit,proto3,oneof" json:"commit,omitempty"`
	IsDefault bool            `protobuf:"varint,4,opt,name=isDefault,proto3" json:"isDefault,omitempty"`
	IsProtect bool            `protobuf:"varint,5,opt,name=isProtect,proto3" json:"isProtect,omitempty"`
	IsMerged  bool            `protobuf:"varint,6,opt,name=isMerged,proto3" json:"isMerged,omitempty"`
}

func (x *Branch) Reset() {
	*x = Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Branch) ProtoMessage() {}

func (x *Branch) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Branch.ProtoReflect.Descriptor instead.
func (*Branch) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{0}
}

func (x *Branch) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Branch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Branch) GetCommit() *structpb.Value {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *Branch) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *Branch) GetIsProtect() bool {
	if x != nil {
		return x.IsProtect
	}
	return false
}

func (x *Branch) GetIsMerged() bool {
	if x != nil {
		return x.IsMerged
	}
	return false
}

type CheckRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          int64                  `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MrID        int64                  `protobuf:"varint,3,opt,name=mrID,json=mrId,proto3" json:"mrID,omitempty"`
	Type        string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ExternalID  string                 `protobuf:"bytes,5,opt,name=externalID,json=externalId,proto3" json:"externalID,omitempty"`
	Commit      string                 `protobuf:"bytes,6,opt,name=commit,proto3" json:"commit,omitempty"`
	PipelineID  string                 `protobuf:"bytes,7,opt,name=pipelineID,json=pipelineId,proto3" json:"pipelineID,omitempty"`
	Status      string                 `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Result      string                 `protobuf:"bytes,9,opt,name=result,proto3" json:"result,omitempty"`
	Output      string                 `protobuf:"bytes,10,opt,name=output,proto3" json:"output,omitempty"`
	CompletedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=completedAt,proto3,oneof" json:"completedAt,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	RepoID      int64                  `protobuf:"varint,13,opt,name=repoID,json=repoId,proto3" json:"repoID,omitempty"`
	Org         string                 `protobuf:"bytes,14,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo        string                 `protobuf:"bytes,15,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *CheckRun) Reset() {
	*x = CheckRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRun) ProtoMessage() {}

func (x *CheckRun) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRun.ProtoReflect.Descriptor instead.
func (*CheckRun) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{1}
}

func (x *CheckRun) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CheckRun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CheckRun) GetMrID() int64 {
	if x != nil {
		return x.MrID
	}
	return 0
}

func (x *CheckRun) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CheckRun) GetExternalID() string {
	if x != nil {
		return x.ExternalID
	}
	return ""
}

func (x *CheckRun) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *CheckRun) GetPipelineID() string {
	if x != nil {
		return x.PipelineID
	}
	return ""
}

func (x *CheckRun) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CheckRun) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *CheckRun) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *CheckRun) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *CheckRun) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CheckRun) GetRepoID() int64 {
	if x != nil {
		return x.RepoID
	}
	return 0
}

func (x *CheckRun) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *CheckRun) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type CheckRuns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckRun []*structpb.Value `protobuf:"bytes,1,rep,name=checkRun,json=checkrun,proto3" json:"checkRun,omitempty"`
	Result   string            `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Mergable bool              `protobuf:"varint,3,opt,name=mergable,proto3" json:"mergable,omitempty"`
}

func (x *CheckRuns) Reset() {
	*x = CheckRuns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRuns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRuns) ProtoMessage() {}

func (x *CheckRuns) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRuns.ProtoReflect.Descriptor instead.
func (*CheckRuns) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{2}
}

func (x *CheckRuns) GetCheckRun() []*structpb.Value {
	if x != nil {
		return x.CheckRun
	}
	return nil
}

func (x *CheckRuns) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *CheckRuns) GetMergable() bool {
	if x != nil {
		return x.Mergable
	}
	return false
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string          `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Author        *structpb.Value `protobuf:"bytes,2,opt,name=author,json=-,proto3,oneof" json:"author,omitempty"`
	Committer     *structpb.Value `protobuf:"bytes,3,opt,name=committer,proto3,oneof" json:"committer,omitempty"`
	CommitMessage string          `protobuf:"bytes,4,opt,name=commitMessage,proto3" json:"commitMessage,omitempty"`
	ParentSha     string          `protobuf:"bytes,5,opt,name=parentSha,proto3" json:"parentSha,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{3}
}

func (x *Commit) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Commit) GetAuthor() *structpb.Value {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Commit) GetCommitter() *structpb.Value {
	if x != nil {
		return x.Committer
	}
	return nil
}

func (x *Commit) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *Commit) GetParentSha() string {
	if x != nil {
		return x.ParentSha
	}
	return ""
}

type CreateCheckRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *CreateCheckRunResponse) Reset() {
	*x = CreateCheckRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCheckRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCheckRunResponse) ProtoMessage() {}

func (x *CreateCheckRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCheckRunResponse.ProtoReflect.Descriptor instead.
func (*CreateCheckRunResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCheckRunResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event     string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	AppName   string `protobuf:"bytes,2,opt,name=appName,proto3" json:"appName,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AppID     int64  `protobuf:"varint,4,opt,name=appID,json=appId,proto3" json:"appID,omitempty"`
	ProjectID int64  `protobuf:"varint,5,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
}

func (x *DeleteEvent) Reset() {
	*x = DeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEvent) ProtoMessage() {}

func (x *DeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEvent.ProtoReflect.Descriptor instead.
func (*DeleteEvent) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteEvent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *DeleteEvent) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *DeleteEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteEvent) GetAppID() int64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *DeleteEvent) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

type Diff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesChanged  int64             `protobuf:"varint,1,opt,name=filesChanged,proto3" json:"filesChanged,omitempty"`
	TotalAddition int64             `protobuf:"varint,2,opt,name=totalAddition,proto3" json:"totalAddition,omitempty"`
	TotalDeletion int64             `protobuf:"varint,3,opt,name=totalDeletion,proto3" json:"totalDeletion,omitempty"`
	Files         []*structpb.Value `protobuf:"bytes,4,rep,name=files,proto3" json:"files,omitempty"`
	IsFinish      bool              `protobuf:"varint,5,opt,name=isFinish,proto3" json:"isFinish,omitempty"`
}

func (x *Diff) Reset() {
	*x = Diff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diff) ProtoMessage() {}

func (x *Diff) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diff.ProtoReflect.Descriptor instead.
func (*Diff) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{6}
}

func (x *Diff) GetFilesChanged() int64 {
	if x != nil {
		return x.FilesChanged
	}
	return 0
}

func (x *Diff) GetTotalAddition() int64 {
	if x != nil {
		return x.TotalAddition
	}
	return 0
}

func (x *Diff) GetTotalDeletion() int64 {
	if x != nil {
		return x.TotalDeletion
	}
	return 0
}

func (x *Diff) GetFiles() []*structpb.Value {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *Diff) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

type EditActionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action   string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Content  string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	PathType string `protobuf:"bytes,4,opt,name=pathType,proto3" json:"pathType,omitempty"`
}

func (x *EditActionItem) Reset() {
	*x = EditActionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditActionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditActionItem) ProtoMessage() {}

func (x *EditActionItem) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditActionItem.ProtoReflect.Descriptor instead.
func (*EditActionItem) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{7}
}

func (x *EditActionItem) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *EditActionItem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *EditActionItem) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *EditActionItem) GetPathType() string {
	if x != nil {
		return x.PathType
	}
	return ""
}

type GITTAR_ARCHIVE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_ARCHIVE_Request) Reset() {
	*x = GITTAR_ARCHIVE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_ARCHIVE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_ARCHIVE_Request) ProtoMessage() {}

func (x *GITTAR_ARCHIVE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_ARCHIVE_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_ARCHIVE_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{8}
}

func (x *GITTAR_ARCHIVE_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_ARCHIVE_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GITTAR_BLAME_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_BLAME_Request) Reset() {
	*x = GITTAR_BLAME_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_BLAME_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_BLAME_Request) ProtoMessage() {}

func (x *GITTAR_BLAME_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_BLAME_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_BLAME_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{9}
}

func (x *GITTAR_BLAME_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_BLAME_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GITTAR_BLOB_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_BLOB_Request) Reset() {
	*x = GITTAR_BLOB_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_BLOB_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_BLOB_Request) ProtoMessage() {}

func (x *GITTAR_BLOB_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_BLOB_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_BLOB_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{10}
}

func (x *GITTAR_BLOB_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_BLOB_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GITTAR_BRANCH_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_BRANCH_DELETE_Request) Reset() {
	*x = GITTAR_BRANCH_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_BRANCH_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_BRANCH_DELETE_Request) ProtoMessage() {}

func (x *GITTAR_BRANCH_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_BRANCH_DELETE_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_BRANCH_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{11}
}

func (x *GITTAR_BRANCH_DELETE_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_BRANCH_DELETE_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GITTAR_BRANCH_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_BRANCH_Request) Reset() {
	*x = GITTAR_BRANCH_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_BRANCH_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_BRANCH_Request) ProtoMessage() {}

func (x *GITTAR_BRANCH_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_BRANCH_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_BRANCH_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{12}
}

func (x *GITTAR_BRANCH_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_BRANCH_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GITTAR_COMMIT_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_COMMIT_Request) Reset() {
	*x = GITTAR_COMMIT_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_COMMIT_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_COMMIT_Request) ProtoMessage() {}

func (x *GITTAR_COMMIT_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_COMMIT_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_COMMIT_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{13}
}

func (x *GITTAR_COMMIT_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_COMMIT_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GITTAR_COMPARE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_COMPARE_Request) Reset() {
	*x = GITTAR_COMPARE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_COMPARE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_COMPARE_Request) ProtoMessage() {}

func (x *GITTAR_COMPARE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_COMPARE_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_COMPARE_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{14}
}

func (x *GITTAR_COMPARE_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_COMPARE_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GITTAR_MERGE_ACTION_POST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org    string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`       // generated from path variable: org. You should change the proto type if necessary.
	Repo   string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`     // generated from path variable: repo. You should change the proto type if necessary.
	Id     string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`         // generated from path variable: id. You should change the proto type if necessary.
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"` // generated from path variable: action. You should change the proto type if necessary.
}

func (x *GITTAR_MERGE_ACTION_POST_Request) Reset() {
	*x = GITTAR_MERGE_ACTION_POST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_MERGE_ACTION_POST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_MERGE_ACTION_POST_Request) ProtoMessage() {}

func (x *GITTAR_MERGE_ACTION_POST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_MERGE_ACTION_POST_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_MERGE_ACTION_POST_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{15}
}

func (x *GITTAR_MERGE_ACTION_POST_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_MERGE_ACTION_POST_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *GITTAR_MERGE_ACTION_POST_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GITTAR_MERGE_ACTION_POST_Request) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type GITTAR_MERGE_ACTION_QUERY_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org    string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`       // generated from path variable: org. You should change the proto type if necessary.
	Repo   string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`     // generated from path variable: repo. You should change the proto type if necessary.
	Id     string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`         // generated from path variable: id. You should change the proto type if necessary.
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"` // generated from path variable: action. You should change the proto type if necessary.
}

func (x *GITTAR_MERGE_ACTION_QUERY_Request) Reset() {
	*x = GITTAR_MERGE_ACTION_QUERY_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_MERGE_ACTION_QUERY_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_MERGE_ACTION_QUERY_Request) ProtoMessage() {}

func (x *GITTAR_MERGE_ACTION_QUERY_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_MERGE_ACTION_QUERY_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_MERGE_ACTION_QUERY_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{16}
}

func (x *GITTAR_MERGE_ACTION_QUERY_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_MERGE_ACTION_QUERY_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *GITTAR_MERGE_ACTION_QUERY_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GITTAR_MERGE_ACTION_QUERY_Request) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type GITTAR_MERGE_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
	Id   string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`     // generated from path variable: id. You should change the proto type if necessary.
}

func (x *GITTAR_MERGE_GET_Request) Reset() {
	*x = GITTAR_MERGE_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_MERGE_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_MERGE_GET_Request) ProtoMessage() {}

func (x *GITTAR_MERGE_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_MERGE_GET_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_MERGE_GET_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{17}
}

func (x *GITTAR_MERGE_GET_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_MERGE_GET_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *GITTAR_MERGE_GET_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GITTAR_MR_TEMPLATES_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_MR_TEMPLATES_Request) Reset() {
	*x = GITTAR_MR_TEMPLATES_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_MR_TEMPLATES_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_MR_TEMPLATES_Request) ProtoMessage() {}

func (x *GITTAR_MR_TEMPLATES_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_MR_TEMPLATES_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_MR_TEMPLATES_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{18}
}

func (x *GITTAR_MR_TEMPLATES_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_MR_TEMPLATES_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GITTAR_RAW_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_RAW_Request) Reset() {
	*x = GITTAR_RAW_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_RAW_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_RAW_Request) ProtoMessage() {}

func (x *GITTAR_RAW_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_RAW_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_RAW_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{19}
}

func (x *GITTAR_RAW_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_RAW_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GITTAR_REPO_STATS_DEFAULT_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_REPO_STATS_DEFAULT_Request) Reset() {
	*x = GITTAR_REPO_STATS_DEFAULT_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_REPO_STATS_DEFAULT_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_REPO_STATS_DEFAULT_Request) ProtoMessage() {}

func (x *GITTAR_REPO_STATS_DEFAULT_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_REPO_STATS_DEFAULT_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_REPO_STATS_DEFAULT_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{20}
}

func (x *GITTAR_REPO_STATS_DEFAULT_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_REPO_STATS_DEFAULT_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GITTAR_REPO_STATS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_REPO_STATS_Request) Reset() {
	*x = GITTAR_REPO_STATS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_REPO_STATS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_REPO_STATS_Request) ProtoMessage() {}

func (x *GITTAR_REPO_STATS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_REPO_STATS_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_REPO_STATS_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{21}
}

func (x *GITTAR_REPO_STATS_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_REPO_STATS_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GITTAR_TAG_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_TAG_DELETE_Request) Reset() {
	*x = GITTAR_TAG_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_TAG_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_TAG_DELETE_Request) ProtoMessage() {}

func (x *GITTAR_TAG_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_TAG_DELETE_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_TAG_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{22}
}

func (x *GITTAR_TAG_DELETE_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_TAG_DELETE_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GITTAR_TAG_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_TAG_Request) Reset() {
	*x = GITTAR_TAG_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_TAG_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_TAG_Request) ProtoMessage() {}

func (x *GITTAR_TAG_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_TAG_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_TAG_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{23}
}

func (x *GITTAR_TAG_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_TAG_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GITTAR_TREE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org  string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GITTAR_TREE_Request) Reset() {
	*x = GITTAR_TREE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GITTAR_TREE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GITTAR_TREE_Request) ProtoMessage() {}

func (x *GITTAR_TREE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GITTAR_TREE_Request.ProtoReflect.Descriptor instead.
func (*GITTAR_TREE_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{24}
}

func (x *GITTAR_TREE_Request) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GITTAR_TREE_Request) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GittarBlameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarBlameResponse) Reset() {
	*x = GittarBlameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarBlameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarBlameResponse) ProtoMessage() {}

func (x *GittarBlameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarBlameResponse.ProtoReflect.Descriptor instead.
func (*GittarBlameResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{25}
}

func (x *GittarBlameResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarBlobData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Binary  bool   `protobuf:"varint,1,opt,name=binary,proto3" json:"binary,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *GittarBlobData) Reset() {
	*x = GittarBlobData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarBlobData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarBlobData) ProtoMessage() {}

func (x *GittarBlobData) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarBlobData.ProtoReflect.Descriptor instead.
func (*GittarBlobData) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{26}
}

func (x *GittarBlobData) GetBinary() bool {
	if x != nil {
		return x.Binary
	}
	return false
}

func (x *GittarBlobData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type GittarBlobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarBlobResponse) Reset() {
	*x = GittarBlobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarBlobResponse) ProtoMessage() {}

func (x *GittarBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarBlobResponse.ProtoReflect.Descriptor instead.
func (*GittarBlobResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{27}
}

func (x *GittarBlobResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarBranchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarBranchesResponse) Reset() {
	*x = GittarBranchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarBranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarBranchesResponse) ProtoMessage() {}

func (x *GittarBranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarBranchesResponse.ProtoReflect.Descriptor instead.
func (*GittarBranchesResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{28}
}

func (x *GittarBranchesResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarCommitResponse) Reset() {
	*x = GittarCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarCommitResponse) ProtoMessage() {}

func (x *GittarCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarCommitResponse.ProtoReflect.Descriptor instead.
func (*GittarCommitResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{29}
}

func (x *GittarCommitResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search   string `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	PageNo   int64  `protobuf:"varint,2,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize int64  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Org      string `protobuf:"bytes,4,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo     string `protobuf:"bytes,5,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GittarCommitsRequest) Reset() {
	*x = GittarCommitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarCommitsRequest) ProtoMessage() {}

func (x *GittarCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarCommitsRequest.ProtoReflect.Descriptor instead.
func (*GittarCommitsRequest) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{30}
}

func (x *GittarCommitsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GittarCommitsRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *GittarCommitsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GittarCommitsRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GittarCommitsRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GittarCommitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarCommitsResponse) Reset() {
	*x = GittarCommitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarCommitsResponse) ProtoMessage() {}

func (x *GittarCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarCommitsResponse.ProtoReflect.Descriptor instead.
func (*GittarCommitsResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{31}
}

func (x *GittarCommitsResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarCompareData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From    string            `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To      string            `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Commits []*structpb.Value `protobuf:"bytes,3,rep,name=commits,proto3" json:"commits,omitempty"`
	Diff    *structpb.Value   `protobuf:"bytes,4,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *GittarCompareData) Reset() {
	*x = GittarCompareData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarCompareData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarCompareData) ProtoMessage() {}

func (x *GittarCompareData) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarCompareData.ProtoReflect.Descriptor instead.
func (*GittarCompareData) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{32}
}

func (x *GittarCompareData) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GittarCompareData) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GittarCompareData) GetCommits() []*structpb.Value {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *GittarCompareData) GetDiff() *structpb.Value {
	if x != nil {
		return x.Diff
	}
	return nil
}

type GittarCompareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarCompareResponse) Reset() {
	*x = GittarCompareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarCompareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarCompareResponse) ProtoMessage() {}

func (x *GittarCompareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarCompareResponse.ProtoReflect.Descriptor instead.
func (*GittarCompareResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{33}
}

func (x *GittarCompareResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarCreateBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ref  string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Org  string `protobuf:"bytes,3,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo string `protobuf:"bytes,4,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GittarCreateBranchRequest) Reset() {
	*x = GittarCreateBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarCreateBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarCreateBranchRequest) ProtoMessage() {}

func (x *GittarCreateBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarCreateBranchRequest.ProtoReflect.Descriptor instead.
func (*GittarCreateBranchRequest) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{34}
}

func (x *GittarCreateBranchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GittarCreateBranchRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *GittarCreateBranchRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GittarCreateBranchRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GittarCreateBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GittarCreateBranchResponse) Reset() {
	*x = GittarCreateBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarCreateBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarCreateBranchResponse) ProtoMessage() {}

func (x *GittarCreateBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarCreateBranchResponse.ProtoReflect.Descriptor instead.
func (*GittarCreateBranchResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{35}
}

type GittarCreateCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string            `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Actions []*structpb.Value `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	Branch  string            `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	Org     string            `protobuf:"bytes,4,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo    string            `protobuf:"bytes,5,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GittarCreateCommitRequest) Reset() {
	*x = GittarCreateCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarCreateCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarCreateCommitRequest) ProtoMessage() {}

func (x *GittarCreateCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarCreateCommitRequest.ProtoReflect.Descriptor instead.
func (*GittarCreateCommitRequest) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{36}
}

func (x *GittarCreateCommitRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GittarCreateCommitRequest) GetActions() []*structpb.Value {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *GittarCreateCommitRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GittarCreateCommitRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GittarCreateCommitRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GittarCreateCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GittarCreateCommitResponse) Reset() {
	*x = GittarCreateCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarCreateCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarCreateCommitResponse) ProtoMessage() {}

func (x *GittarCreateCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarCreateCommitResponse.ProtoReflect.Descriptor instead.
func (*GittarCreateCommitResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{37}
}

type GittarCreateMergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title              string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description        string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	AssigneeID         string `protobuf:"bytes,3,opt,name=assigneeID,json=assigneeId,proto3" json:"assigneeID,omitempty"`
	SourceBranch       string `protobuf:"bytes,4,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	TargetBranch       string `protobuf:"bytes,5,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	RemoveSourceBranch bool   `protobuf:"varint,6,opt,name=removeSourceBranch,proto3" json:"removeSourceBranch,omitempty"`
	Org                string `protobuf:"bytes,7,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo               string `protobuf:"bytes,8,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GittarCreateMergeRequest) Reset() {
	*x = GittarCreateMergeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarCreateMergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarCreateMergeRequest) ProtoMessage() {}

func (x *GittarCreateMergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarCreateMergeRequest.ProtoReflect.Descriptor instead.
func (*GittarCreateMergeRequest) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{38}
}

func (x *GittarCreateMergeRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GittarCreateMergeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GittarCreateMergeRequest) GetAssigneeID() string {
	if x != nil {
		return x.AssigneeID
	}
	return ""
}

func (x *GittarCreateMergeRequest) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *GittarCreateMergeRequest) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *GittarCreateMergeRequest) GetRemoveSourceBranch() bool {
	if x != nil {
		return x.RemoveSourceBranch
	}
	return false
}

func (x *GittarCreateMergeRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GittarCreateMergeRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GittarCreateMergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *GittarCreateMergeResponse) Reset() {
	*x = GittarCreateMergeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarCreateMergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarCreateMergeResponse) ProtoMessage() {}

func (x *GittarCreateMergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarCreateMergeResponse.ProtoReflect.Descriptor instead.
func (*GittarCreateMergeResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{39}
}

func (x *GittarCreateMergeResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarCreateTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Ref     string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	Org     string `protobuf:"bytes,4,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo    string `protobuf:"bytes,5,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GittarCreateTagRequest) Reset() {
	*x = GittarCreateTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarCreateTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarCreateTagRequest) ProtoMessage() {}

func (x *GittarCreateTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarCreateTagRequest.ProtoReflect.Descriptor instead.
func (*GittarCreateTagRequest) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{40}
}

func (x *GittarCreateTagRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GittarCreateTagRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GittarCreateTagRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *GittarCreateTagRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GittarCreateTagRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GittarCreateTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GittarCreateTagResponse) Reset() {
	*x = GittarCreateTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarCreateTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarCreateTagResponse) ProtoMessage() {}

func (x *GittarCreateTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarCreateTagResponse.ProtoReflect.Descriptor instead.
func (*GittarCreateTagResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{41}
}

type GittarDeleteBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GittarDeleteBranchResponse) Reset() {
	*x = GittarDeleteBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarDeleteBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarDeleteBranchResponse) ProtoMessage() {}

func (x *GittarDeleteBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarDeleteBranchResponse.ProtoReflect.Descriptor instead.
func (*GittarDeleteBranchResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{42}
}

type GittarDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarDeleteResponse) Reset() {
	*x = GittarDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarDeleteResponse) ProtoMessage() {}

func (x *GittarDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarDeleteResponse.ProtoReflect.Descriptor instead.
func (*GittarDeleteResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{43}
}

func (x *GittarDeleteResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarDiffData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *structpb.Value `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Diff   *structpb.Value `protobuf:"bytes,2,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *GittarDiffData) Reset() {
	*x = GittarDiffData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarDiffData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarDiffData) ProtoMessage() {}

func (x *GittarDiffData) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarDiffData.ProtoReflect.Descriptor instead.
func (*GittarDiffData) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{44}
}

func (x *GittarDiffData) GetCommit() *structpb.Value {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *GittarDiffData) GetDiff() *structpb.Value {
	if x != nil {
		return x.Diff
	}
	return nil
}

type GittarMergeStatusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasConflict bool   `protobuf:"varint,1,opt,name=hasConflict,proto3" json:"hasConflict,omitempty"`
	IsMerged    bool   `protobuf:"varint,2,opt,name=isMerged,proto3" json:"isMerged,omitempty"`
	HasError    bool   `protobuf:"varint,3,opt,name=hasError,proto3" json:"hasError,omitempty"`
	ErrorMsg    string `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (x *GittarMergeStatusData) Reset() {
	*x = GittarMergeStatusData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarMergeStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarMergeStatusData) ProtoMessage() {}

func (x *GittarMergeStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarMergeStatusData.ProtoReflect.Descriptor instead.
func (*GittarMergeStatusData) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{45}
}

func (x *GittarMergeStatusData) GetHasConflict() bool {
	if x != nil {
		return x.HasConflict
	}
	return false
}

func (x *GittarMergeStatusData) GetIsMerged() bool {
	if x != nil {
		return x.IsMerged
	}
	return false
}

func (x *GittarMergeStatusData) GetHasError() bool {
	if x != nil {
		return x.HasError
	}
	return false
}

func (x *GittarMergeStatusData) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type GittarMergeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceBranch string `protobuf:"bytes,1,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	TargetBranch string `protobuf:"bytes,2,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	Org          string `protobuf:"bytes,3,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo         string `protobuf:"bytes,4,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GittarMergeStatusRequest) Reset() {
	*x = GittarMergeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarMergeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarMergeStatusRequest) ProtoMessage() {}

func (x *GittarMergeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarMergeStatusRequest.ProtoReflect.Descriptor instead.
func (*GittarMergeStatusRequest) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{46}
}

func (x *GittarMergeStatusRequest) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *GittarMergeStatusRequest) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *GittarMergeStatusRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GittarMergeStatusRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GittarMergeStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarMergeStatusResponse) Reset() {
	*x = GittarMergeStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarMergeStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarMergeStatusResponse) ProtoMessage() {}

func (x *GittarMergeStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarMergeStatusResponse.ProtoReflect.Descriptor instead.
func (*GittarMergeStatusResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{47}
}

func (x *GittarMergeStatusResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarMergeTemplatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarMergeTemplatesResponse) Reset() {
	*x = GittarMergeTemplatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarMergeTemplatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarMergeTemplatesResponse) ProtoMessage() {}

func (x *GittarMergeTemplatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarMergeTemplatesResponse.ProtoReflect.Descriptor instead.
func (*GittarMergeTemplatesResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{48}
}

func (x *GittarMergeTemplatesResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarQueryMrDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarQueryMrDetailResponse) Reset() {
	*x = GittarQueryMrDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarQueryMrDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarQueryMrDetailResponse) ProtoMessage() {}

func (x *GittarQueryMrDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarQueryMrDetailResponse.ProtoReflect.Descriptor instead.
func (*GittarQueryMrDetailResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{49}
}

func (x *GittarQueryMrDetailResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarQueryMrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State        string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Query        string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	AuthorId     string `protobuf:"bytes,3,opt,name=authorId,proto3" json:"authorId,omitempty"`
	AssigneeId   string `protobuf:"bytes,4,opt,name=assigneeId,proto3" json:"assigneeId,omitempty"`
	Score        int64  `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	Page         int64  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Size         int64  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	TargetBranch string `protobuf:"bytes,8,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	SourceBranch string `protobuf:"bytes,9,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	Org          string `protobuf:"bytes,10,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo         string `protobuf:"bytes,11,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GittarQueryMrRequest) Reset() {
	*x = GittarQueryMrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarQueryMrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarQueryMrRequest) ProtoMessage() {}

func (x *GittarQueryMrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarQueryMrRequest.ProtoReflect.Descriptor instead.
func (*GittarQueryMrRequest) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{50}
}

func (x *GittarQueryMrRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GittarQueryMrRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GittarQueryMrRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *GittarQueryMrRequest) GetAssigneeId() string {
	if x != nil {
		return x.AssigneeId
	}
	return ""
}

func (x *GittarQueryMrRequest) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GittarQueryMrRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GittarQueryMrRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GittarQueryMrRequest) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *GittarQueryMrRequest) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *GittarQueryMrRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GittarQueryMrRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GittarQueryMrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarQueryMrResponse) Reset() {
	*x = GittarQueryMrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarQueryMrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarQueryMrResponse) ProtoMessage() {}

func (x *GittarQueryMrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarQueryMrResponse.ProtoReflect.Descriptor instead.
func (*GittarQueryMrResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{51}
}

func (x *GittarQueryMrResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarStatsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitsCount      int64    `protobuf:"varint,1,opt,name=commitsCount,proto3" json:"commitsCount,omitempty"`
	ContributorCount  int64    `protobuf:"varint,2,opt,name=contributorCount,proto3" json:"contributorCount,omitempty"`
	Tags              []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Branches          []string `protobuf:"bytes,4,rep,name=branches,proto3" json:"branches,omitempty"`
	DefaultBranch     string   `protobuf:"bytes,5,opt,name=defaultBranch,proto3" json:"defaultBranch,omitempty"`
	Empty             bool     `protobuf:"varint,6,opt,name=empty,proto3" json:"empty,omitempty"`
	CommitID          string   `protobuf:"bytes,7,opt,name=commitID,json=commitId,proto3" json:"commitID,omitempty"`
	MergeRequestCount int64    `protobuf:"varint,8,opt,name=mergeRequestCount,proto3" json:"mergeRequestCount,omitempty"`
	Size              int64    `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	ReadmeFile        string   `protobuf:"bytes,10,opt,name=readmeFile,proto3" json:"readmeFile,omitempty"`
	ApplicationID     int64    `protobuf:"varint,11,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	ProjectID         uint64   `protobuf:"varint,12,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *GittarStatsData) Reset() {
	*x = GittarStatsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarStatsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarStatsData) ProtoMessage() {}

func (x *GittarStatsData) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarStatsData.ProtoReflect.Descriptor instead.
func (*GittarStatsData) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{52}
}

func (x *GittarStatsData) GetCommitsCount() int64 {
	if x != nil {
		return x.CommitsCount
	}
	return 0
}

func (x *GittarStatsData) GetContributorCount() int64 {
	if x != nil {
		return x.ContributorCount
	}
	return 0
}

func (x *GittarStatsData) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GittarStatsData) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *GittarStatsData) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

func (x *GittarStatsData) GetEmpty() bool {
	if x != nil {
		return x.Empty
	}
	return false
}

func (x *GittarStatsData) GetCommitID() string {
	if x != nil {
		return x.CommitID
	}
	return ""
}

func (x *GittarStatsData) GetMergeRequestCount() int64 {
	if x != nil {
		return x.MergeRequestCount
	}
	return 0
}

func (x *GittarStatsData) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GittarStatsData) GetReadmeFile() string {
	if x != nil {
		return x.ReadmeFile
	}
	return ""
}

func (x *GittarStatsData) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *GittarStatsData) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

type GittarStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarStatsResponse) Reset() {
	*x = GittarStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarStatsResponse) ProtoMessage() {}

func (x *GittarStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarStatsResponse.ProtoReflect.Descriptor instead.
func (*GittarStatsResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{53}
}

func (x *GittarStatsResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarTagsResponse) Reset() {
	*x = GittarTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarTagsResponse) ProtoMessage() {}

func (x *GittarTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarTagsResponse.ProtoReflect.Descriptor instead.
func (*GittarTagsResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{54}
}

func (x *GittarTagsResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GittarTreeSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref     string `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Pattern string `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Org     string `protobuf:"bytes,3,opt,name=org,proto3" json:"org,omitempty"`   // generated from path variable: org. You should change the proto type if necessary.
	Repo    string `protobuf:"bytes,4,opt,name=repo,proto3" json:"repo,omitempty"` // generated from path variable: repo. You should change the proto type if necessary.
}

func (x *GittarTreeSearchRequest) Reset() {
	*x = GittarTreeSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarTreeSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarTreeSearchRequest) ProtoMessage() {}

func (x *GittarTreeSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarTreeSearchRequest.ProtoReflect.Descriptor instead.
func (*GittarTreeSearchRequest) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{55}
}

func (x *GittarTreeSearchRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *GittarTreeSearchRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *GittarTreeSearchRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GittarTreeSearchRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type GittarTreeSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GittarTreeSearchResponse) Reset() {
	*x = GittarTreeSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GittarTreeSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GittarTreeSearchResponse) ProtoMessage() {}

func (x *GittarTreeSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GittarTreeSearchResponse.ProtoReflect.Descriptor instead.
func (*GittarTreeSearchResponse) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{56}
}

func (x *GittarTreeSearchResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type MergeRequestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RepoMergeId          int64                  `protobuf:"varint,2,opt,name=repoMergeId,json=mergeId,proto3" json:"repoMergeId,omitempty"`
	AppID                int64                  `protobuf:"varint,3,opt,name=appID,json=appId,proto3" json:"appID,omitempty"`
	RepoID               int64                  `protobuf:"varint,4,opt,name=repoID,json=repoId,proto3" json:"repoID,omitempty"`
	Title                string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	AuthorId             string                 `protobuf:"bytes,6,opt,name=authorId,proto3" json:"authorId,omitempty"`
	AuthorUser           *structpb.Value        `protobuf:"bytes,7,opt,name=authorUser,proto3,oneof" json:"authorUser,omitempty"`
	Description          string                 `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	AssigneeId           string                 `protobuf:"bytes,9,opt,name=assigneeId,proto3" json:"assigneeId,omitempty"`
	AssigneeUser         *structpb.Value        `protobuf:"bytes,10,opt,name=assigneeUser,proto3,oneof" json:"assigneeUser,omitempty"`
	MergeUserId          string                 `protobuf:"bytes,11,opt,name=mergeUserId,proto3" json:"mergeUserId,omitempty"`
	MergeUser            *structpb.Value        `protobuf:"bytes,12,opt,name=mergeUser,proto3,oneof" json:"mergeUser,omitempty"`
	CloseUserId          string                 `protobuf:"bytes,13,opt,name=closeUserId,proto3" json:"closeUserId,omitempty"`
	CloseUser            *structpb.Value        `protobuf:"bytes,14,opt,name=closeUser,proto3,oneof" json:"closeUser,omitempty"`
	SourceBranch         string                 `protobuf:"bytes,15,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	TargetBranch         string                 `protobuf:"bytes,16,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	SourceSha            string                 `protobuf:"bytes,17,opt,name=sourceSha,proto3" json:"sourceSha,omitempty"`
	TargetSha            string                 `protobuf:"bytes,18,opt,name=targetSha,proto3" json:"targetSha,omitempty"`
	RemoveSourceBranch   bool                   `protobuf:"varint,19,opt,name=removeSourceBranch,proto3" json:"removeSourceBranch,omitempty"`
	State                string                 `protobuf:"bytes,20,opt,name=state,proto3" json:"state,omitempty"`
	IsCheckRunValid      bool                   `protobuf:"varint,21,opt,name=isCheckRunValid,proto3" json:"isCheckRunValid,omitempty"`
	TargetBranchRule     *structpb.Value        `protobuf:"bytes,22,opt,name=targetBranchRule,proto3,oneof" json:"targetBranchRule,omitempty"`
	DefaultCommitMessage string                 `protobuf:"bytes,23,opt,name=defaultCommitMessage,proto3" json:"defaultCommitMessage,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=updatedAt,proto3,oneof" json:"updatedAt,omitempty"`
	CloseAt              *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=closeAt,proto3,oneof" json:"closeAt,omitempty"`
	MergeAt              *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=mergeAt,proto3,oneof" json:"mergeAt,omitempty"`
	Link                 string                 `protobuf:"bytes,28,opt,name=link,proto3" json:"link,omitempty"`
	Score                int64                  `protobuf:"varint,29,opt,name=score,proto3" json:"score,omitempty"`
	ScoreNum             int64                  `protobuf:"varint,30,opt,name=scoreNum,proto3" json:"scoreNum,omitempty"`
	RebaseBranch         string                 `protobuf:"bytes,31,opt,name=rebaseBranch,proto3" json:"rebaseBranch,omitempty"`
	EventName            string                 `protobuf:"bytes,32,opt,name=eventName,proto3" json:"eventName,omitempty"`
	CheckRuns            *structpb.Value        `protobuf:"bytes,33,opt,name=checkRuns,proto3" json:"checkRuns,omitempty"`
	JoinTempBranchStatus string                 `protobuf:"bytes,34,opt,name=joinTempBranchStatus,proto3" json:"joinTempBranchStatus,omitempty"`
	IsJoinTempBranch     bool                   `protobuf:"varint,35,opt,name=isJoinTempBranch,proto3" json:"isJoinTempBranch,omitempty"`
}

func (x *MergeRequestInfo) Reset() {
	*x = MergeRequestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeRequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequestInfo) ProtoMessage() {}

func (x *MergeRequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequestInfo.ProtoReflect.Descriptor instead.
func (*MergeRequestInfo) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{57}
}

func (x *MergeRequestInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MergeRequestInfo) GetRepoMergeId() int64 {
	if x != nil {
		return x.RepoMergeId
	}
	return 0
}

func (x *MergeRequestInfo) GetAppID() int64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *MergeRequestInfo) GetRepoID() int64 {
	if x != nil {
		return x.RepoID
	}
	return 0
}

func (x *MergeRequestInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MergeRequestInfo) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *MergeRequestInfo) GetAuthorUser() *structpb.Value {
	if x != nil {
		return x.AuthorUser
	}
	return nil
}

func (x *MergeRequestInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MergeRequestInfo) GetAssigneeId() string {
	if x != nil {
		return x.AssigneeId
	}
	return ""
}

func (x *MergeRequestInfo) GetAssigneeUser() *structpb.Value {
	if x != nil {
		return x.AssigneeUser
	}
	return nil
}

func (x *MergeRequestInfo) GetMergeUserId() string {
	if x != nil {
		return x.MergeUserId
	}
	return ""
}

func (x *MergeRequestInfo) GetMergeUser() *structpb.Value {
	if x != nil {
		return x.MergeUser
	}
	return nil
}

func (x *MergeRequestInfo) GetCloseUserId() string {
	if x != nil {
		return x.CloseUserId
	}
	return ""
}

func (x *MergeRequestInfo) GetCloseUser() *structpb.Value {
	if x != nil {
		return x.CloseUser
	}
	return nil
}

func (x *MergeRequestInfo) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *MergeRequestInfo) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *MergeRequestInfo) GetSourceSha() string {
	if x != nil {
		return x.SourceSha
	}
	return ""
}

func (x *MergeRequestInfo) GetTargetSha() string {
	if x != nil {
		return x.TargetSha
	}
	return ""
}

func (x *MergeRequestInfo) GetRemoveSourceBranch() bool {
	if x != nil {
		return x.RemoveSourceBranch
	}
	return false
}

func (x *MergeRequestInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *MergeRequestInfo) GetIsCheckRunValid() bool {
	if x != nil {
		return x.IsCheckRunValid
	}
	return false
}

func (x *MergeRequestInfo) GetTargetBranchRule() *structpb.Value {
	if x != nil {
		return x.TargetBranchRule
	}
	return nil
}

func (x *MergeRequestInfo) GetDefaultCommitMessage() string {
	if x != nil {
		return x.DefaultCommitMessage
	}
	return ""
}

func (x *MergeRequestInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MergeRequestInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MergeRequestInfo) GetCloseAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseAt
	}
	return nil
}

func (x *MergeRequestInfo) GetMergeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MergeAt
	}
	return nil
}

func (x *MergeRequestInfo) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *MergeRequestInfo) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MergeRequestInfo) GetScoreNum() int64 {
	if x != nil {
		return x.ScoreNum
	}
	return 0
}

func (x *MergeRequestInfo) GetRebaseBranch() string {
	if x != nil {
		return x.RebaseBranch
	}
	return ""
}

func (x *MergeRequestInfo) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *MergeRequestInfo) GetCheckRuns() *structpb.Value {
	if x != nil {
		return x.CheckRuns
	}
	return nil
}

func (x *MergeRequestInfo) GetJoinTempBranchStatus() string {
	if x != nil {
		return x.JoinTempBranchStatus
	}
	return ""
}

func (x *MergeRequestInfo) GetIsJoinTempBranch() bool {
	if x != nil {
		return x.IsJoinTempBranch
	}
	return false
}

type MergeTemplatesResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch string   `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	Path   string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Names  []string `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *MergeTemplatesResponseData) Reset() {
	*x = MergeTemplatesResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeTemplatesResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeTemplatesResponseData) ProtoMessage() {}

func (x *MergeTemplatesResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeTemplatesResponseData.ProtoReflect.Descriptor instead.
func (*MergeTemplatesResponseData) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{58}
}

func (x *MergeTemplatesResponseData) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *MergeTemplatesResponseData) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MergeTemplatesResponseData) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type QueryMergeRequestsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*structpb.Value `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *QueryMergeRequestsData) Reset() {
	*x = QueryMergeRequestsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMergeRequestsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMergeRequestsData) ProtoMessage() {}

func (x *QueryMergeRequestsData) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMergeRequestsData.ProtoReflect.Descriptor instead.
func (*QueryMergeRequestsData) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{59}
}

func (x *QueryMergeRequestsData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *QueryMergeRequestsData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type REPO_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *REPO_DELETE_Request) Reset() {
	*x = REPO_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *REPO_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*REPO_DELETE_Request) ProtoMessage() {}

func (x *REPO_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use REPO_DELETE_Request.ProtoReflect.Descriptor instead.
func (*REPO_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{60}
}

type REPO_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *REPO_GET_Request) Reset() {
	*x = REPO_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *REPO_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*REPO_GET_Request) ProtoMessage() {}

func (x *REPO_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use REPO_GET_Request.ProtoReflect.Descriptor instead.
func (*REPO_GET_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{61}
}

type REPO_POST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *REPO_POST_Request) Reset() {
	*x = REPO_POST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *REPO_POST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*REPO_POST_Request) ProtoMessage() {}

func (x *REPO_POST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use REPO_POST_Request.ProtoReflect.Descriptor instead.
func (*REPO_POST_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{62}
}

type REPO_PUT_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *REPO_PUT_Request) Reset() {
	*x = REPO_PUT_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *REPO_PUT_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*REPO_PUT_Request) ProtoMessage() {}

func (x *REPO_PUT_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use REPO_PUT_Request.ProtoReflect.Descriptor instead.
func (*REPO_PUT_Request) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{63}
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ID      string          `protobuf:"bytes,2,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Object  string          `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Tagger  *structpb.Value `protobuf:"bytes,4,opt,name=tagger,proto3,oneof" json:"tagger,omitempty"`
	Message string          `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gittar_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_gittar_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_gittar_proto_rawDescGZIP(), []int{64}
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Tag) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *Tag) GetTagger() *structpb.Value {
	if x != nil {
		return x.Tagger
	}
	return nil
}

func (x *Tag) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_gittar_proto protoreflect.FileDescriptor

var file_gittar_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67,
	0x69, 0x74, 0x74, 0x61, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc4, 0x01, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xc1, 0x03, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x75, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x73, 0x0a, 0x09, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x72, 0x75, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x72, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x65, 0x72, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0xe0, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x01, 0x2d, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x22, 0x52, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xc0,
	0x01, 0x0a, 0x04, 0x44, 0x69, 0x66, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x22, 0x72, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x16, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f,
	0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x3c, 0x0a, 0x14, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f,
	0x42, 0x4c, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x22, 0x3b, 0x0a, 0x13, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x42, 0x4c,
	0x4f, 0x42, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x22, 0x44, 0x0a, 0x1c, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43,
	0x48, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x3d, 0x0a, 0x15, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52,
	0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x3d, 0x0a, 0x15, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x22, 0x3e, 0x0a, 0x16, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x22, 0x70, 0x0a, 0x20, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x54,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x21, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52,
	0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x18, 0x47, 0x49, 0x54,
	0x54, 0x41, 0x52, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x1b, 0x47,
	0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x4d, 0x52, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54,
	0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x22, 0x3a, 0x0a, 0x12, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x49, 0x0a, 0x21,
	0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x41, 0x0a, 0x19, 0x47, 0x49, 0x54, 0x54, 0x41,
	0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x41, 0x0a, 0x19, 0x47, 0x49,
	0x54, 0x54, 0x41, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x3a, 0x0a,
	0x12, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x3b, 0x0a, 0x13, 0x47, 0x49, 0x54,
	0x54, 0x41, 0x52, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x41, 0x0a, 0x13, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x42, 0x6c, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x0e, 0x47, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x42, 0x6c, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x40, 0x0a,
	0x12, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x44, 0x0a, 0x16, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x14, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x47, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x22, 0x43, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x47, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x69, 0x66,
	0x66, 0x22, 0x43, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x19, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22,
	0x1c, 0x0a, 0x1a, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01,
	0x0a, 0x19, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x18, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x55, 0x0a, 0x19, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7e, 0x0a,
	0x16, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x19, 0x0a,
	0x17, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x14, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6c, 0x0a, 0x0e, 0x47, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x44, 0x69, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x47, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x47, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x22, 0x47, 0x0a, 0x19, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x1c,
	0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x1b, 0x47, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xaa, 0x02, 0x0a, 0x14, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x22, 0x43, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8f, 0x03, 0x0a, 0x0f, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0x41, 0x0a, 0x13, 0x47, 0x69, 0x74, 0x74, 0x61,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x12, 0x47, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6b, 0x0a, 0x17,
	0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x46, 0x0a, 0x18, 0x47, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x8f, 0x0c, 0x0a, 0x10, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x02, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03,
	0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x68, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x68, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x68,
	0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x04, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x14, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x07, 0x52, 0x07, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x4e, 0x75, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x75, 0x6e, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6a, 0x6f, 0x69, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4a, 0x6f,
	0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x41, 0x74, 0x22, 0x5e, 0x0a, 0x1a, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x15, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x45,
	0x50, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x12, 0x0a, 0x10, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x72, 0x32, 0xf4, 0x36, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x12, 0xcc, 0x01, 0x0a,
	0x0e, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x12,
	0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x41,
	0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x43, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x7d, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe5, 0x8e, 0x8b, 0xe7, 0xbc, 0xa9, 0xe5, 0x8c, 0x85, 0x12, 0xe0, 0x01, 0x0a, 0x0c,
	0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x4d, 0x45, 0x12, 0x2b, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x4d,
	0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61,
	0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d,
	0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x62, 0x6c, 0x61, 0x6d, 0x65, 0x2f, 0x2a, 0x2a,
	0xfa, 0x81, 0xf9, 0x1b, 0x49, 0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f,
	0x62, 0x6c, 0x61, 0x6d, 0x65, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x20, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x96, 0x87,
	0xe4, 0xbb, 0xb6, 0x62, 0x6c, 0x61, 0x6d, 0x65, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xd9,
	0x01, 0x0a, 0x0b, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x12, 0x2a,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x42, 0x4c,
	0x4f, 0x42, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d,
	0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x2a, 0x2a, 0xfa,
	0x81, 0xf9, 0x1b, 0x46, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61,
	0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x62,
	0x6c, 0x6f, 0x62, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x67, 0x69, 0x74, 0xe4, 0xbb,
	0x93, 0xe5, 0xba, 0x93, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x12, 0xe3, 0x01, 0x0a, 0x0d, 0x47,
	0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x12, 0x2c, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x42, 0x52, 0x41, 0x4e,
	0x43, 0x48, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x47, 0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65,
	0x70, 0x6f, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0x67, 0x69, 0x74, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe5, 0x88, 0x86, 0xe6, 0x94, 0xaf,
	0x12, 0xe9, 0x01, 0x0a, 0x14, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x42, 0x52, 0x41, 0x4e,
	0x43, 0x48, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61,
	0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d,
	0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x3e, 0x0a, 0x21,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x88, 0x86, 0xe6, 0x94, 0xaf, 0x12, 0xf2, 0x01, 0x0a,
	0x14, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x49,
	0x54, 0x54, 0x41, 0x52, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x41,
	0x0a, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x88, 0x86, 0xe6, 0x94,
	0xaf, 0x12, 0xe4, 0x01, 0x0a, 0x17, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x1f, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67,
	0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x1a, 0x2d,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x72, 0x75, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x49, 0x0a,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d,
	0x72, 0x75, 0x6e, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x72,
	0x75, 0x6e, 0xe7, 0xba, 0xaa, 0xe5, 0xbd, 0x95, 0x12, 0xe3, 0x01, 0x0a, 0x16, 0x47, 0x49, 0x54,
	0x54, 0x41, 0x52, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x12, 0x1f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x75, 0x6e, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b,
	0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x72, 0x75, 0x6e, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x49, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x72, 0x75, 0x6e, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1e,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x20, 0x72, 0x75, 0x6e, 0xe7, 0xba, 0xaa, 0xe5, 0xbd, 0x95, 0x12, 0xe4,
	0x01, 0x0a, 0x0d, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54,
	0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x49, 0x0a, 0x22, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f,
	0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2f, 0x2a, 0x2a,
	0x32, 0x02, 0x10, 0x01, 0x3a, 0x1f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x67, 0x69, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0xe8,
	0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xf6, 0x01, 0x0a, 0x0e, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x53, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f,
	0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x2a,
	0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x58, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a,
	0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0x67, 0x69, 0x74, 0x20, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe5, 0x88, 0x86, 0xe6, 0x94, 0xaf,
	0x2c, 0x74, 0x61, 0x67, 0xe7, 0x9a, 0x84, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0xec,
	0x01, 0x0a, 0x15, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54,
	0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x41, 0x0a, 0x20, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f,
	0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x19, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0x67, 0x69, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0xee, 0x01,
	0x0a, 0x0e, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45,
	0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x4f, 0x0a,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe6, 0xaf, 0x94, 0xe8, 0xbe, 0x83, 0xe4, 0xb8, 0xa4, 0xe4, 0xb8, 0xaa, 0x67,
	0x69, 0x74, 0xe5, 0x88, 0x86, 0xe6, 0x94, 0xaf, 0xe5, 0xb7, 0xae, 0xe5, 0xbc, 0x82, 0x12, 0x84,
	0x02, 0x0a, 0x18, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x37, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x2e, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x96, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0xfa, 0x81, 0xf9, 0x1b,
	0x54, 0x0a, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x7b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x17, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x4d, 0x52, 0xe5, 0x8f, 0x98, 0xe6, 0x9b, 0xb4, 0xe6,
	0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0x12, 0x8c, 0x02, 0x0a, 0x19, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52,
	0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x49, 0x54, 0x54,
	0x41, 0x52, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x9c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x2d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x5a, 0x0a, 0x35, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72,
	0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0x4d, 0x52, 0xe5, 0x8f, 0x98, 0xe6, 0x9b, 0xb4, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x12, 0xee, 0x01, 0x0a, 0x13, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x2f, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67,
	0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f,
	0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x40, 0x0a, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x11, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0x4d, 0x52, 0x12, 0xff, 0x01, 0x0a, 0x10, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52,
	0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2e, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x85, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x4c, 0x0a, 0x2c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b,
	0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x18, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x4d, 0x52, 0x20, 0xe8, 0xaf, 0xa6, 0xe6, 0x83,
	0x85, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c, 0x8b, 0x12, 0xe6, 0x01, 0x0a, 0x12, 0x47, 0x49, 0x54, 0x54,
	0x41, 0x52, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x12, 0x2b,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x12, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x41, 0x0a,
	0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x2d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x12, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x4d, 0x52, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0x12, 0xed, 0x01, 0x0a, 0x12, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e,
	0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x43, 0x0a, 0x24, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d,
	0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x17, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0x6d, 0x72, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0xa3, 0x80, 0xe6, 0xb5, 0x8b,
	0x12, 0x83, 0x02, 0x0a, 0x13, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x4d, 0x52, 0x5f, 0x54,
	0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x2e, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x4d, 0x52, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72,
	0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x4d, 0x0a, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65,
	0x70, 0x6f, 0x7d, 0x2f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x6d, 0x72, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xd5, 0x01, 0x0a, 0x0a, 0x47, 0x49, 0x54, 0x54, 0x41,
	0x52, 0x5f, 0x52, 0x41, 0x57, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x49,
	0x54, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x41, 0x57, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x83, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x72, 0x61, 0x77, 0x2f,
	0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x57, 0x0a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f,
	0x7d, 0x2f, 0x72, 0x61, 0x77, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x30, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x67, 0x69, 0x74,
	0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe8, 0xb7, 0xaf, 0xe5,
	0x9f, 0xba, 0xe5, 0x8e, 0x9f, 0xe5, 0xa7, 0x8b, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x12, 0xf5,
	0x01, 0x0a, 0x11, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x53, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x49, 0x54,
	0x54, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47,
	0x69, 0x74, 0x74, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x81, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b,
	0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x2a, 0x2a, 0xfa, 0x81,
	0xf9, 0x1b, 0x53, 0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x2a, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x67, 0x69, 0x74, 0xe4, 0xbb,
	0x93, 0xe5, 0xba, 0x93, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe5, 0x88, 0x86, 0xe6, 0x94, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xfe, 0x01, 0x0a, 0x19, 0x47, 0x49, 0x54, 0x54, 0x41,
	0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x49, 0x54,
	0x54, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x50, 0x0a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f,
	0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x2a, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x67, 0x69, 0x74, 0xe4,
	0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x88, 0x86, 0xe6, 0x94,
	0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xd4, 0x01, 0x0a, 0x0a, 0x47, 0x49, 0x54, 0x54,
	0x41, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47,
	0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61,
	0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x74,
	0x61, 0x67, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x46, 0x0a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x67, 0x69, 0x74, 0xe4,
	0xbb, 0x93, 0xe5, 0xba, 0x93, 0x74, 0x61, 0x67, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xd5,
	0x01, 0x0a, 0x11, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b,
	0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x37, 0x0a,
	0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x12, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0x74, 0x61, 0x67, 0x12, 0xdc, 0x01, 0x0a, 0x11, 0x47, 0x49, 0x54, 0x54, 0x41,
	0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x30, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x74, 0x61,
	0x67, 0x73, 0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x3b, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72,
	0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0x20, 0x74, 0x61, 0x67, 0x12, 0xcc, 0x01, 0x0a, 0x0b, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52,
	0x5f, 0x54, 0x52, 0x45, 0x45, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x47, 0x49,
	0x54, 0x54, 0x41, 0x52, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x74, 0x72, 0x65, 0x65,
	0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x4c, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x7d, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x24,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x67,
	0x69, 0x74, 0xe4, 0xbb, 0x93, 0xe5, 0xba, 0x93, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xe9, 0x01, 0x0a, 0x12, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x5f,
	0x54, 0x52, 0x45, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x12, 0x2e, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x2e, 0x47, 0x69, 0x74, 0x74, 0x61, 0x72, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61,
	0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x74,
	0x72, 0x65, 0x65, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0xfa, 0x81, 0xf9, 0x1b, 0x41, 0x0a,
	0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x7d, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x2d, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6,
	0x12, 0xa0, 0x01, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x2a, 0x0c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x34, 0x0a,
	0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x2a, 0x2a, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x72, 0x65,
	0x70, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x70, 0x69, 0x20, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x12, 0x97, 0x01, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x47, 0x45, 0x54,
	0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x2e, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x0c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x2a, 0x2a, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01,
	0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x61, 0x70, 0x69, 0x20, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x9c, 0x01,
	0x0a, 0x09, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x28, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74,
	0x74, 0x61, 0x72, 0x2e, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x34, 0x0a, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x2f, 0x2a, 0x2a, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1e, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x61, 0x70, 0x69, 0x20, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x9a, 0x01, 0x0a,
	0x08, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x50, 0x55, 0x54, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x74, 0x61,
	0x72, 0x2e, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x1a, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x2a, 0x2a,
	0xfa, 0x81, 0xf9, 0x1b, 0x34, 0x0a, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x2f, 0x2a, 0x2a, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20,
	0x61, 0x70, 0x69, 0x20, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x1a, 0x0d, 0xc2, 0xc4, 0xcb, 0x1c, 0x08,
	0x22, 0x06, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67,
	0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gittar_proto_rawDescOnce sync.Once
	file_gittar_proto_rawDescData = file_gittar_proto_rawDesc
)

func file_gittar_proto_rawDescGZIP() []byte {
	file_gittar_proto_rawDescOnce.Do(func() {
		file_gittar_proto_rawDescData = protoimpl.X.CompressGZIP(file_gittar_proto_rawDescData)
	})
	return file_gittar_proto_rawDescData
}

var file_gittar_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_gittar_proto_goTypes = []interface{}{
	(*Branch)(nil),                            // 0: erda.openapiv1.gittar.Branch
	(*CheckRun)(nil),                          // 1: erda.openapiv1.gittar.CheckRun
	(*CheckRuns)(nil),                         // 2: erda.openapiv1.gittar.CheckRuns
	(*Commit)(nil),                            // 3: erda.openapiv1.gittar.Commit
	(*CreateCheckRunResponse)(nil),            // 4: erda.openapiv1.gittar.CreateCheckRunResponse
	(*DeleteEvent)(nil),                       // 5: erda.openapiv1.gittar.DeleteEvent
	(*Diff)(nil),                              // 6: erda.openapiv1.gittar.Diff
	(*EditActionItem)(nil),                    // 7: erda.openapiv1.gittar.EditActionItem
	(*GITTAR_ARCHIVE_Request)(nil),            // 8: erda.openapiv1.gittar.GITTAR_ARCHIVE_Request
	(*GITTAR_BLAME_Request)(nil),              // 9: erda.openapiv1.gittar.GITTAR_BLAME_Request
	(*GITTAR_BLOB_Request)(nil),               // 10: erda.openapiv1.gittar.GITTAR_BLOB_Request
	(*GITTAR_BRANCH_DELETE_Request)(nil),      // 11: erda.openapiv1.gittar.GITTAR_BRANCH_DELETE_Request
	(*GITTAR_BRANCH_Request)(nil),             // 12: erda.openapiv1.gittar.GITTAR_BRANCH_Request
	(*GITTAR_COMMIT_Request)(nil),             // 13: erda.openapiv1.gittar.GITTAR_COMMIT_Request
	(*GITTAR_COMPARE_Request)(nil),            // 14: erda.openapiv1.gittar.GITTAR_COMPARE_Request
	(*GITTAR_MERGE_ACTION_POST_Request)(nil),  // 15: erda.openapiv1.gittar.GITTAR_MERGE_ACTION_POST_Request
	(*GITTAR_MERGE_ACTION_QUERY_Request)(nil), // 16: erda.openapiv1.gittar.GITTAR_MERGE_ACTION_QUERY_Request
	(*GITTAR_MERGE_GET_Request)(nil),          // 17: erda.openapiv1.gittar.GITTAR_MERGE_GET_Request
	(*GITTAR_MR_TEMPLATES_Request)(nil),       // 18: erda.openapiv1.gittar.GITTAR_MR_TEMPLATES_Request
	(*GITTAR_RAW_Request)(nil),                // 19: erda.openapiv1.gittar.GITTAR_RAW_Request
	(*GITTAR_REPO_STATS_DEFAULT_Request)(nil), // 20: erda.openapiv1.gittar.GITTAR_REPO_STATS_DEFAULT_Request
	(*GITTAR_REPO_STATS_Request)(nil),         // 21: erda.openapiv1.gittar.GITTAR_REPO_STATS_Request
	(*GITTAR_TAG_DELETE_Request)(nil),         // 22: erda.openapiv1.gittar.GITTAR_TAG_DELETE_Request
	(*GITTAR_TAG_Request)(nil),                // 23: erda.openapiv1.gittar.GITTAR_TAG_Request
	(*GITTAR_TREE_Request)(nil),               // 24: erda.openapiv1.gittar.GITTAR_TREE_Request
	(*GittarBlameResponse)(nil),               // 25: erda.openapiv1.gittar.GittarBlameResponse
	(*GittarBlobData)(nil),                    // 26: erda.openapiv1.gittar.GittarBlobData
	(*GittarBlobResponse)(nil),                // 27: erda.openapiv1.gittar.GittarBlobResponse
	(*GittarBranchesResponse)(nil),            // 28: erda.openapiv1.gittar.GittarBranchesResponse
	(*GittarCommitResponse)(nil),              // 29: erda.openapiv1.gittar.GittarCommitResponse
	(*GittarCommitsRequest)(nil),              // 30: erda.openapiv1.gittar.GittarCommitsRequest
	(*GittarCommitsResponse)(nil),             // 31: erda.openapiv1.gittar.GittarCommitsResponse
	(*GittarCompareData)(nil),                 // 32: erda.openapiv1.gittar.GittarCompareData
	(*GittarCompareResponse)(nil),             // 33: erda.openapiv1.gittar.GittarCompareResponse
	(*GittarCreateBranchRequest)(nil),         // 34: erda.openapiv1.gittar.GittarCreateBranchRequest
	(*GittarCreateBranchResponse)(nil),        // 35: erda.openapiv1.gittar.GittarCreateBranchResponse
	(*GittarCreateCommitRequest)(nil),         // 36: erda.openapiv1.gittar.GittarCreateCommitRequest
	(*GittarCreateCommitResponse)(nil),        // 37: erda.openapiv1.gittar.GittarCreateCommitResponse
	(*GittarCreateMergeRequest)(nil),          // 38: erda.openapiv1.gittar.GittarCreateMergeRequest
	(*GittarCreateMergeResponse)(nil),         // 39: erda.openapiv1.gittar.GittarCreateMergeResponse
	(*GittarCreateTagRequest)(nil),            // 40: erda.openapiv1.gittar.GittarCreateTagRequest
	(*GittarCreateTagResponse)(nil),           // 41: erda.openapiv1.gittar.GittarCreateTagResponse
	(*GittarDeleteBranchResponse)(nil),        // 42: erda.openapiv1.gittar.GittarDeleteBranchResponse
	(*GittarDeleteResponse)(nil),              // 43: erda.openapiv1.gittar.GittarDeleteResponse
	(*GittarDiffData)(nil),                    // 44: erda.openapiv1.gittar.GittarDiffData
	(*GittarMergeStatusData)(nil),             // 45: erda.openapiv1.gittar.GittarMergeStatusData
	(*GittarMergeStatusRequest)(nil),          // 46: erda.openapiv1.gittar.GittarMergeStatusRequest
	(*GittarMergeStatusResponse)(nil),         // 47: erda.openapiv1.gittar.GittarMergeStatusResponse
	(*GittarMergeTemplatesResponse)(nil),      // 48: erda.openapiv1.gittar.GittarMergeTemplatesResponse
	(*GittarQueryMrDetailResponse)(nil),       // 49: erda.openapiv1.gittar.GittarQueryMrDetailResponse
	(*GittarQueryMrRequest)(nil),              // 50: erda.openapiv1.gittar.GittarQueryMrRequest
	(*GittarQueryMrResponse)(nil),             // 51: erda.openapiv1.gittar.GittarQueryMrResponse
	(*GittarStatsData)(nil),                   // 52: erda.openapiv1.gittar.GittarStatsData
	(*GittarStatsResponse)(nil),               // 53: erda.openapiv1.gittar.GittarStatsResponse
	(*GittarTagsResponse)(nil),                // 54: erda.openapiv1.gittar.GittarTagsResponse
	(*GittarTreeSearchRequest)(nil),           // 55: erda.openapiv1.gittar.GittarTreeSearchRequest
	(*GittarTreeSearchResponse)(nil),          // 56: erda.openapiv1.gittar.GittarTreeSearchResponse
	(*MergeRequestInfo)(nil),                  // 57: erda.openapiv1.gittar.MergeRequestInfo
	(*MergeTemplatesResponseData)(nil),        // 58: erda.openapiv1.gittar.MergeTemplatesResponseData
	(*QueryMergeRequestsData)(nil),            // 59: erda.openapiv1.gittar.QueryMergeRequestsData
	(*REPO_DELETE_Request)(nil),               // 60: erda.openapiv1.gittar.REPO_DELETE_Request
	(*REPO_GET_Request)(nil),                  // 61: erda.openapiv1.gittar.REPO_GET_Request
	(*REPO_POST_Request)(nil),                 // 62: erda.openapiv1.gittar.REPO_POST_Request
	(*REPO_PUT_Request)(nil),                  // 63: erda.openapiv1.gittar.REPO_PUT_Request
	(*Tag)(nil),                               // 64: erda.openapiv1.gittar.Tag
	(*structpb.Value)(nil),                    // 65: google.protobuf.Value
	(*timestamppb.Timestamp)(nil),             // 66: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                     // 67: google.protobuf.Empty
}
var file_gittar_proto_depIdxs = []int32{
	65, // 0: erda.openapiv1.gittar.Branch.commit:type_name -> google.protobuf.Value
	66, // 1: erda.openapiv1.gittar.CheckRun.completedAt:type_name -> google.protobuf.Timestamp
	66, // 2: erda.openapiv1.gittar.CheckRun.createdAt:type_name -> google.protobuf.Timestamp
	65, // 3: erda.openapiv1.gittar.CheckRuns.checkRun:type_name -> google.protobuf.Value
	65, // 4: erda.openapiv1.gittar.Commit.author:type_name -> google.protobuf.Value
	65, // 5: erda.openapiv1.gittar.Commit.committer:type_name -> google.protobuf.Value
	65, // 6: erda.openapiv1.gittar.CreateCheckRunResponse.data:type_name -> google.protobuf.Value
	65, // 7: erda.openapiv1.gittar.Diff.files:type_name -> google.protobuf.Value
	65, // 8: erda.openapiv1.gittar.GittarBlameResponse.data:type_name -> google.protobuf.Value
	65, // 9: erda.openapiv1.gittar.GittarBlobResponse.data:type_name -> google.protobuf.Value
	65, // 10: erda.openapiv1.gittar.GittarBranchesResponse.data:type_name -> google.protobuf.Value
	65, // 11: erda.openapiv1.gittar.GittarCommitResponse.data:type_name -> google.protobuf.Value
	65, // 12: erda.openapiv1.gittar.GittarCommitsResponse.data:type_name -> google.protobuf.Value
	65, // 13: erda.openapiv1.gittar.GittarCompareData.commits:type_name -> google.protobuf.Value
	65, // 14: erda.openapiv1.gittar.GittarCompareData.diff:type_name -> google.protobuf.Value
	65, // 15: erda.openapiv1.gittar.GittarCompareResponse.data:type_name -> google.protobuf.Value
	65, // 16: erda.openapiv1.gittar.GittarCreateCommitRequest.actions:type_name -> google.protobuf.Value
	65, // 17: erda.openapiv1.gittar.GittarCreateMergeResponse.data:type_name -> google.protobuf.Value
	65, // 18: erda.openapiv1.gittar.GittarDeleteResponse.data:type_name -> google.protobuf.Value
	65, // 19: erda.openapiv1.gittar.GittarDiffData.commit:type_name -> google.protobuf.Value
	65, // 20: erda.openapiv1.gittar.GittarDiffData.diff:type_name -> google.protobuf.Value
	65, // 21: erda.openapiv1.gittar.GittarMergeStatusResponse.data:type_name -> google.protobuf.Value
	65, // 22: erda.openapiv1.gittar.GittarMergeTemplatesResponse.data:type_name -> google.protobuf.Value
	65, // 23: erda.openapiv1.gittar.GittarQueryMrDetailResponse.data:type_name -> google.protobuf.Value
	65, // 24: erda.openapiv1.gittar.GittarQueryMrResponse.data:type_name -> google.protobuf.Value
	65, // 25: erda.openapiv1.gittar.GittarStatsResponse.data:type_name -> google.protobuf.Value
	65, // 26: erda.openapiv1.gittar.GittarTagsResponse.data:type_name -> google.protobuf.Value
	65, // 27: erda.openapiv1.gittar.GittarTreeSearchResponse.data:type_name -> google.protobuf.Value
	65, // 28: erda.openapiv1.gittar.MergeRequestInfo.authorUser:type_name -> google.protobuf.Value
	65, // 29: erda.openapiv1.gittar.MergeRequestInfo.assigneeUser:type_name -> google.protobuf.Value
	65, // 30: erda.openapiv1.gittar.MergeRequestInfo.mergeUser:type_name -> google.protobuf.Value
	65, // 31: erda.openapiv1.gittar.MergeRequestInfo.closeUser:type_name -> google.protobuf.Value
	65, // 32: erda.openapiv1.gittar.MergeRequestInfo.targetBranchRule:type_name -> google.protobuf.Value
	66, // 33: erda.openapiv1.gittar.MergeRequestInfo.createdAt:type_name -> google.protobuf.Timestamp
	66, // 34: erda.openapiv1.gittar.MergeRequestInfo.updatedAt:type_name -> google.protobuf.Timestamp
	66, // 35: erda.openapiv1.gittar.MergeRequestInfo.closeAt:type_name -> google.protobuf.Timestamp
	66, // 36: erda.openapiv1.gittar.MergeRequestInfo.mergeAt:type_name -> google.protobuf.Timestamp
	65, // 37: erda.openapiv1.gittar.MergeRequestInfo.checkRuns:type_name -> google.protobuf.Value
	65, // 38: erda.openapiv1.gittar.QueryMergeRequestsData.list:type_name -> google.protobuf.Value
	65, // 39: erda.openapiv1.gittar.Tag.tagger:type_name -> google.protobuf.Value
	8,  // 40: erda.openapiv1.gittar.gittar.GITTAR_ARCHIVE:input_type -> erda.openapiv1.gittar.GITTAR_ARCHIVE_Request
	9,  // 41: erda.openapiv1.gittar.gittar.GITTAR_BLAME:input_type -> erda.openapiv1.gittar.GITTAR_BLAME_Request
	10, // 42: erda.openapiv1.gittar.gittar.GITTAR_BLOB:input_type -> erda.openapiv1.gittar.GITTAR_BLOB_Request
	12, // 43: erda.openapiv1.gittar.gittar.GITTAR_BRANCH:input_type -> erda.openapiv1.gittar.GITTAR_BRANCH_Request
	34, // 44: erda.openapiv1.gittar.gittar.GITTAR_BRANCH_CREATE:input_type -> erda.openapiv1.gittar.GittarCreateBranchRequest
	11, // 45: erda.openapiv1.gittar.gittar.GITTAR_BRANCH_DELETE:input_type -> erda.openapiv1.gittar.GITTAR_BRANCH_DELETE_Request
	1,  // 46: erda.openapiv1.gittar.gittar.GITTAR_CHECK_RUN_CREATE:input_type -> erda.openapiv1.gittar.CheckRun
	1,  // 47: erda.openapiv1.gittar.gittar.GITTAR_CHECK_RUN_QUERY:input_type -> erda.openapiv1.gittar.CheckRun
	13, // 48: erda.openapiv1.gittar.gittar.GITTAR_COMMIT:input_type -> erda.openapiv1.gittar.GITTAR_COMMIT_Request
	30, // 49: erda.openapiv1.gittar.gittar.GITTAR_COMMITS:input_type -> erda.openapiv1.gittar.GittarCommitsRequest
	36, // 50: erda.openapiv1.gittar.gittar.GITTAR_COMMITS_CREATE:input_type -> erda.openapiv1.gittar.GittarCreateCommitRequest
	14, // 51: erda.openapiv1.gittar.gittar.GITTAR_COMPARE:input_type -> erda.openapiv1.gittar.GITTAR_COMPARE_Request
	15, // 52: erda.openapiv1.gittar.gittar.GITTAR_MERGE_ACTION_POST:input_type -> erda.openapiv1.gittar.GITTAR_MERGE_ACTION_POST_Request
	16, // 53: erda.openapiv1.gittar.gittar.GITTAR_MERGE_ACTION_QUERY:input_type -> erda.openapiv1.gittar.GITTAR_MERGE_ACTION_QUERY_Request
	38, // 54: erda.openapiv1.gittar.gittar.GITTAR_MERGE_CREATE:input_type -> erda.openapiv1.gittar.GittarCreateMergeRequest
	17, // 55: erda.openapiv1.gittar.gittar.GITTAR_MERGE_GET:input_type -> erda.openapiv1.gittar.GITTAR_MERGE_GET_Request
	50, // 56: erda.openapiv1.gittar.gittar.GITTAR_MERGE_QUERY:input_type -> erda.openapiv1.gittar.GittarQueryMrRequest
	46, // 57: erda.openapiv1.gittar.gittar.GITTAR_MERGE_STATS:input_type -> erda.openapiv1.gittar.GittarMergeStatusRequest
	18, // 58: erda.openapiv1.gittar.gittar.GITTAR_MR_TEMPLATES:input_type -> erda.openapiv1.gittar.GITTAR_MR_TEMPLATES_Request
	19, // 59: erda.openapiv1.gittar.gittar.GITTAR_RAW:input_type -> erda.openapiv1.gittar.GITTAR_RAW_Request
	21, // 60: erda.openapiv1.gittar.gittar.GITTAR_REPO_STATS:input_type -> erda.openapiv1.gittar.GITTAR_REPO_STATS_Request
	20, // 61: erda.openapiv1.gittar.gittar.GITTAR_REPO_STATS_DEFAULT:input_type -> erda.openapiv1.gittar.GITTAR_REPO_STATS_DEFAULT_Request
	23, // 62: erda.openapiv1.gittar.gittar.GITTAR_TAG:input_type -> erda.openapiv1.gittar.GITTAR_TAG_Request
	40, // 63: erda.openapiv1.gittar.gittar.GITTAR_TAG_CREATE:input_type -> erda.openapiv1.gittar.GittarCreateTagRequest
	22, // 64: erda.openapiv1.gittar.gittar.GITTAR_TAG_DELETE:input_type -> erda.openapiv1.gittar.GITTAR_TAG_DELETE_Request
	24, // 65: erda.openapiv1.gittar.gittar.GITTAR_TREE:input_type -> erda.openapiv1.gittar.GITTAR_TREE_Request
	55, // 66: erda.openapiv1.gittar.gittar.GITTAR_TREE_SEARCH:input_type -> erda.openapiv1.gittar.GittarTreeSearchRequest
	60, // 67: erda.openapiv1.gittar.gittar.REPO_DELETE:input_type -> erda.openapiv1.gittar.REPO_DELETE_Request
	61, // 68: erda.openapiv1.gittar.gittar.REPO_GET:input_type -> erda.openapiv1.gittar.REPO_GET_Request
	62, // 69: erda.openapiv1.gittar.gittar.REPO_POST:input_type -> erda.openapiv1.gittar.REPO_POST_Request
	63, // 70: erda.openapiv1.gittar.gittar.REPO_PUT:input_type -> erda.openapiv1.gittar.REPO_PUT_Request
	67, // 71: erda.openapiv1.gittar.gittar.GITTAR_ARCHIVE:output_type -> google.protobuf.Empty
	25, // 72: erda.openapiv1.gittar.gittar.GITTAR_BLAME:output_type -> erda.openapiv1.gittar.GittarBlameResponse
	27, // 73: erda.openapiv1.gittar.gittar.GITTAR_BLOB:output_type -> erda.openapiv1.gittar.GittarBlobResponse
	28, // 74: erda.openapiv1.gittar.gittar.GITTAR_BRANCH:output_type -> erda.openapiv1.gittar.GittarBranchesResponse
	35, // 75: erda.openapiv1.gittar.gittar.GITTAR_BRANCH_CREATE:output_type -> erda.openapiv1.gittar.GittarCreateBranchResponse
	42, // 76: erda.openapiv1.gittar.gittar.GITTAR_BRANCH_DELETE:output_type -> erda.openapiv1.gittar.GittarDeleteBranchResponse
	4,  // 77: erda.openapiv1.gittar.gittar.GITTAR_CHECK_RUN_CREATE:output_type -> erda.openapiv1.gittar.CreateCheckRunResponse
	4,  // 78: erda.openapiv1.gittar.gittar.GITTAR_CHECK_RUN_QUERY:output_type -> erda.openapiv1.gittar.CreateCheckRunResponse
	29, // 79: erda.openapiv1.gittar.gittar.GITTAR_COMMIT:output_type -> erda.openapiv1.gittar.GittarCommitResponse
	31, // 80: erda.openapiv1.gittar.gittar.GITTAR_COMMITS:output_type -> erda.openapiv1.gittar.GittarCommitsResponse
	37, // 81: erda.openapiv1.gittar.gittar.GITTAR_COMMITS_CREATE:output_type -> erda.openapiv1.gittar.GittarCreateCommitResponse
	33, // 82: erda.openapiv1.gittar.gittar.GITTAR_COMPARE:output_type -> erda.openapiv1.gittar.GittarCompareResponse
	67, // 83: erda.openapiv1.gittar.gittar.GITTAR_MERGE_ACTION_POST:output_type -> google.protobuf.Empty
	67, // 84: erda.openapiv1.gittar.gittar.GITTAR_MERGE_ACTION_QUERY:output_type -> google.protobuf.Empty
	39, // 85: erda.openapiv1.gittar.gittar.GITTAR_MERGE_CREATE:output_type -> erda.openapiv1.gittar.GittarCreateMergeResponse
	49, // 86: erda.openapiv1.gittar.gittar.GITTAR_MERGE_GET:output_type -> erda.openapiv1.gittar.GittarQueryMrDetailResponse
	51, // 87: erda.openapiv1.gittar.gittar.GITTAR_MERGE_QUERY:output_type -> erda.openapiv1.gittar.GittarQueryMrResponse
	47, // 88: erda.openapiv1.gittar.gittar.GITTAR_MERGE_STATS:output_type -> erda.openapiv1.gittar.GittarMergeStatusResponse
	48, // 89: erda.openapiv1.gittar.gittar.GITTAR_MR_TEMPLATES:output_type -> erda.openapiv1.gittar.GittarMergeTemplatesResponse
	67, // 90: erda.openapiv1.gittar.gittar.GITTAR_RAW:output_type -> google.protobuf.Empty
	53, // 91: erda.openapiv1.gittar.gittar.GITTAR_REPO_STATS:output_type -> erda.openapiv1.gittar.GittarStatsResponse
	53, // 92: erda.openapiv1.gittar.gittar.GITTAR_REPO_STATS_DEFAULT:output_type -> erda.openapiv1.gittar.GittarStatsResponse
	54, // 93: erda.openapiv1.gittar.gittar.GITTAR_TAG:output_type -> erda.openapiv1.gittar.GittarTagsResponse
	41, // 94: erda.openapiv1.gittar.gittar.GITTAR_TAG_CREATE:output_type -> erda.openapiv1.gittar.GittarCreateTagResponse
	43, // 95: erda.openapiv1.gittar.gittar.GITTAR_TAG_DELETE:output_type -> erda.openapiv1.gittar.GittarDeleteResponse
	67, // 96: erda.openapiv1.gittar.gittar.GITTAR_TREE:output_type -> google.protobuf.Empty
	56, // 97: erda.openapiv1.gittar.gittar.GITTAR_TREE_SEARCH:output_type -> erda.openapiv1.gittar.GittarTreeSearchResponse
	67, // 98: erda.openapiv1.gittar.gittar.REPO_DELETE:output_type -> google.protobuf.Empty
	67, // 99: erda.openapiv1.gittar.gittar.REPO_GET:output_type -> google.protobuf.Empty
	67, // 100: erda.openapiv1.gittar.gittar.REPO_POST:output_type -> google.protobuf.Empty
	67, // 101: erda.openapiv1.gittar.gittar.REPO_PUT:output_type -> google.protobuf.Empty
	71, // [71:102] is the sub-list for method output_type
	40, // [40:71] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_gittar_proto_init() }
func file_gittar_proto_init() {
	if File_gittar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gittar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRuns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCheckRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditActionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_ARCHIVE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_BLAME_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_BLOB_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_BRANCH_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_BRANCH_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_COMMIT_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_COMPARE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_MERGE_ACTION_POST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_MERGE_ACTION_QUERY_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_MERGE_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_MR_TEMPLATES_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_RAW_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_REPO_STATS_DEFAULT_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_REPO_STATS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_TAG_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_TAG_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GITTAR_TREE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarBlameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarBlobData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarBlobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarBranchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarCommitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarCommitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarCompareData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarCompareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarCreateBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarCreateBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarCreateCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarCreateCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarCreateMergeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarCreateMergeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarCreateTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarCreateTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarDeleteBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarDiffData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarMergeStatusData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarMergeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarMergeStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarMergeTemplatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarQueryMrDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarQueryMrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarQueryMrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarStatsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarTreeSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GittarTreeSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeRequestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeTemplatesResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMergeRequestsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*REPO_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*REPO_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*REPO_POST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*REPO_PUT_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gittar_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gittar_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_gittar_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_gittar_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_gittar_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_gittar_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_gittar_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_gittar_proto_msgTypes[64].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gittar_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gittar_proto_goTypes,
		DependencyIndexes: file_gittar_proto_depIdxs,
		MessageInfos:      file_gittar_proto_msgTypes,
	}.Build()
	File_gittar_proto = out.File
	file_gittar_proto_rawDesc = nil
	file_gittar_proto_goTypes = nil
	file_gittar_proto_depIdxs = nil
}
