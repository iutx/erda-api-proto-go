// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: testplatform_testplan_rel.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/testplatform/testplan/rel/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// TestplatformTestplanRel testplatform_testplan_rel.proto
	TestplatformTestplanRel() pb.TestplatformTestplanRelClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		testplatformTestplanRel: pb.NewTestplatformTestplanRelClient(cc),
	}
}

type serviceClients struct {
	testplatformTestplanRel pb.TestplatformTestplanRelClient
}

func (c *serviceClients) TestplatformTestplanRel() pb.TestplatformTestplanRelClient {
	return c.testplatformTestplanRel
}

type testplatformTestplanRelWrapper struct {
	client pb.TestplatformTestplanRelClient
	opts   []grpc1.CallOption
}

func (s *testplatformTestplanRelWrapper) ADD_ISSUE_RELATION(ctx context.Context, req *pb.TestPlanCaseRelIssueRelationAddRequest) (*pb.TestPlanCaseRelIssueRelationAddResponse, error) {
	return s.client.ADD_ISSUE_RELATION(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestplanRelWrapper) BATCH_UPDATE(ctx context.Context, req *pb.TestPlanCaseRelBatchUpdateRequest) (*emptypb.Empty, error) {
	return s.client.BATCH_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestplanRelWrapper) CREATE(ctx context.Context, req *pb.TestPlanCaseRelCreateRequest) (*pb.TestPlanCaseRelCreateResponse, error) {
	return s.client.CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestplanRelWrapper) EXPORT(ctx context.Context, req *pb.TestPlanCaseRelExportRequest) (*pb.TestPlanCaseRelExportResponse, error) {
	return s.client.EXPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestplanRelWrapper) GET(ctx context.Context, req *pb.TestPlanCaseRelGetRequest) (*pb.TestPlanCaseRelGetResponse, error) {
	return s.client.GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestplanRelWrapper) PAGING(ctx context.Context, req *pb.TestPlanCaseRelPagingRequest) (*pb.TestPlanCaseRelPagingResponse, error) {
	return s.client.PAGING(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestplanRelWrapper) REMOVE_ISSUE_RELATION(ctx context.Context, req *pb.TestPlanCaseRelIssueRelationRemoveRequest) (*pb.TestPlanCaseRelIssueRelationRemoveResponse, error) {
	return s.client.REMOVE_ISSUE_RELATION(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
