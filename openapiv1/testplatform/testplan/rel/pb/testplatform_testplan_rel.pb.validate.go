// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: testplatform_testplan_rel.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TestPlanCaseRelBatchUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TestPlanCaseRelBatchUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanCaseRelBatchUpdateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TestPlanCaseRelBatchUpdateRequestMultiError, or nil if none found.
func (m *TestPlanCaseRelBatchUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCaseRelBatchUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Delete

	// no validation rules for ExecutorID

	// no validation rules for ExecStatus

	// no validation rules for TestPlanID

	// no validation rules for ProjectID

	if m.TestSetID != nil {
		// no validation rules for TestSetID
	}

	if len(errors) > 0 {
		return TestPlanCaseRelBatchUpdateRequestMultiError(errors)
	}

	return nil
}

// TestPlanCaseRelBatchUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by
// TestPlanCaseRelBatchUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type TestPlanCaseRelBatchUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCaseRelBatchUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCaseRelBatchUpdateRequestMultiError) AllErrors() []error { return m }

// TestPlanCaseRelBatchUpdateRequestValidationError is the validation error
// returned by TestPlanCaseRelBatchUpdateRequest.Validate if the designated
// constraints aren't met.
type TestPlanCaseRelBatchUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCaseRelBatchUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCaseRelBatchUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCaseRelBatchUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCaseRelBatchUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCaseRelBatchUpdateRequestValidationError) ErrorName() string {
	return "TestPlanCaseRelBatchUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCaseRelBatchUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCaseRelBatchUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCaseRelBatchUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCaseRelBatchUpdateRequestValidationError{}

// Validate checks the field values on TestPlanCaseRelCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanCaseRelCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanCaseRelCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanCaseRelCreateRequestMultiError, or nil if none found.
func (m *TestPlanCaseRelCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCaseRelCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestPlanID

	if len(errors) > 0 {
		return TestPlanCaseRelCreateRequestMultiError(errors)
	}

	return nil
}

// TestPlanCaseRelCreateRequestMultiError is an error wrapping multiple
// validation errors returned by TestPlanCaseRelCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type TestPlanCaseRelCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCaseRelCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCaseRelCreateRequestMultiError) AllErrors() []error { return m }

// TestPlanCaseRelCreateRequestValidationError is the validation error returned
// by TestPlanCaseRelCreateRequest.Validate if the designated constraints
// aren't met.
type TestPlanCaseRelCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCaseRelCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCaseRelCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCaseRelCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCaseRelCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCaseRelCreateRequestValidationError) ErrorName() string {
	return "TestPlanCaseRelCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCaseRelCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCaseRelCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCaseRelCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCaseRelCreateRequestValidationError{}

// Validate checks the field values on TestPlanCaseRelCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanCaseRelCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanCaseRelCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TestPlanCaseRelCreateResponseMultiError, or nil if none found.
func (m *TestPlanCaseRelCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCaseRelCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanCaseRelCreateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanCaseRelCreateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanCaseRelCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TestPlanCaseRelCreateResponseMultiError(errors)
	}

	return nil
}

// TestPlanCaseRelCreateResponseMultiError is an error wrapping multiple
// validation errors returned by TestPlanCaseRelCreateResponse.ValidateAll()
// if the designated constraints aren't met.
type TestPlanCaseRelCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCaseRelCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCaseRelCreateResponseMultiError) AllErrors() []error { return m }

// TestPlanCaseRelCreateResponseValidationError is the validation error
// returned by TestPlanCaseRelCreateResponse.Validate if the designated
// constraints aren't met.
type TestPlanCaseRelCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCaseRelCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCaseRelCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCaseRelCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCaseRelCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCaseRelCreateResponseValidationError) ErrorName() string {
	return "TestPlanCaseRelCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCaseRelCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCaseRelCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCaseRelCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCaseRelCreateResponseValidationError{}

// Validate checks the field values on TestPlanCaseRelExportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanCaseRelExportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanCaseRelExportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanCaseRelExportRequestMultiError, or nil if none found.
func (m *TestPlanCaseRelExportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCaseRelExportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestPlanCaseRelPagingRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestPlanCaseRelExportRequestValidationError{
					field:  "TestPlanCaseRelPagingRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestPlanCaseRelExportRequestValidationError{
					field:  "TestPlanCaseRelPagingRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestPlanCaseRelPagingRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestPlanCaseRelExportRequestValidationError{
				field:  "TestPlanCaseRelPagingRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Locale

	// no validation rules for FileType

	// no validation rules for TestPlanID

	if len(errors) > 0 {
		return TestPlanCaseRelExportRequestMultiError(errors)
	}

	return nil
}

// TestPlanCaseRelExportRequestMultiError is an error wrapping multiple
// validation errors returned by TestPlanCaseRelExportRequest.ValidateAll() if
// the designated constraints aren't met.
type TestPlanCaseRelExportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCaseRelExportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCaseRelExportRequestMultiError) AllErrors() []error { return m }

// TestPlanCaseRelExportRequestValidationError is the validation error returned
// by TestPlanCaseRelExportRequest.Validate if the designated constraints
// aren't met.
type TestPlanCaseRelExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCaseRelExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCaseRelExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCaseRelExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCaseRelExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCaseRelExportRequestValidationError) ErrorName() string {
	return "TestPlanCaseRelExportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCaseRelExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCaseRelExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCaseRelExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCaseRelExportRequestValidationError{}

// Validate checks the field values on TestPlanCaseRelExportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanCaseRelExportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanCaseRelExportResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TestPlanCaseRelExportResponseMultiError, or nil if none found.
func (m *TestPlanCaseRelExportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCaseRelExportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return TestPlanCaseRelExportResponseMultiError(errors)
	}

	return nil
}

// TestPlanCaseRelExportResponseMultiError is an error wrapping multiple
// validation errors returned by TestPlanCaseRelExportResponse.ValidateAll()
// if the designated constraints aren't met.
type TestPlanCaseRelExportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCaseRelExportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCaseRelExportResponseMultiError) AllErrors() []error { return m }

// TestPlanCaseRelExportResponseValidationError is the validation error
// returned by TestPlanCaseRelExportResponse.Validate if the designated
// constraints aren't met.
type TestPlanCaseRelExportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCaseRelExportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCaseRelExportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCaseRelExportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCaseRelExportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCaseRelExportResponseValidationError) ErrorName() string {
	return "TestPlanCaseRelExportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCaseRelExportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCaseRelExportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCaseRelExportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCaseRelExportResponseValidationError{}

// Validate checks the field values on TestPlanCaseRelGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanCaseRelGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanCaseRelGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanCaseRelGetRequestMultiError, or nil if none found.
func (m *TestPlanCaseRelGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCaseRelGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RelationID

	// no validation rules for TestPlanID

	if len(errors) > 0 {
		return TestPlanCaseRelGetRequestMultiError(errors)
	}

	return nil
}

// TestPlanCaseRelGetRequestMultiError is an error wrapping multiple validation
// errors returned by TestPlanCaseRelGetRequest.ValidateAll() if the
// designated constraints aren't met.
type TestPlanCaseRelGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCaseRelGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCaseRelGetRequestMultiError) AllErrors() []error { return m }

// TestPlanCaseRelGetRequestValidationError is the validation error returned by
// TestPlanCaseRelGetRequest.Validate if the designated constraints aren't met.
type TestPlanCaseRelGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCaseRelGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCaseRelGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCaseRelGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCaseRelGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCaseRelGetRequestValidationError) ErrorName() string {
	return "TestPlanCaseRelGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCaseRelGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCaseRelGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCaseRelGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCaseRelGetRequestValidationError{}

// Validate checks the field values on TestPlanCaseRelGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanCaseRelGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanCaseRelGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanCaseRelGetResponseMultiError, or nil if none found.
func (m *TestPlanCaseRelGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCaseRelGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanCaseRelGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanCaseRelGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanCaseRelGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TestPlanCaseRelGetResponseMultiError(errors)
	}

	return nil
}

// TestPlanCaseRelGetResponseMultiError is an error wrapping multiple
// validation errors returned by TestPlanCaseRelGetResponse.ValidateAll() if
// the designated constraints aren't met.
type TestPlanCaseRelGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCaseRelGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCaseRelGetResponseMultiError) AllErrors() []error { return m }

// TestPlanCaseRelGetResponseValidationError is the validation error returned
// by TestPlanCaseRelGetResponse.Validate if the designated constraints aren't met.
type TestPlanCaseRelGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCaseRelGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCaseRelGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCaseRelGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCaseRelGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCaseRelGetResponseValidationError) ErrorName() string {
	return "TestPlanCaseRelGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCaseRelGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCaseRelGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCaseRelGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCaseRelGetResponseValidationError{}

// Validate checks the field values on TestPlanCaseRelIssueRelationAddRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TestPlanCaseRelIssueRelationAddRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TestPlanCaseRelIssueRelationAddRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TestPlanCaseRelIssueRelationAddRequestMultiError, or nil if none found.
func (m *TestPlanCaseRelIssueRelationAddRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCaseRelIssueRelationAddRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestPlanID

	// no validation rules for TestPlanCaseRelID

	// no validation rules for RelationID

	if len(errors) > 0 {
		return TestPlanCaseRelIssueRelationAddRequestMultiError(errors)
	}

	return nil
}

// TestPlanCaseRelIssueRelationAddRequestMultiError is an error wrapping
// multiple validation errors returned by
// TestPlanCaseRelIssueRelationAddRequest.ValidateAll() if the designated
// constraints aren't met.
type TestPlanCaseRelIssueRelationAddRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCaseRelIssueRelationAddRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCaseRelIssueRelationAddRequestMultiError) AllErrors() []error { return m }

// TestPlanCaseRelIssueRelationAddRequestValidationError is the validation
// error returned by TestPlanCaseRelIssueRelationAddRequest.Validate if the
// designated constraints aren't met.
type TestPlanCaseRelIssueRelationAddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCaseRelIssueRelationAddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCaseRelIssueRelationAddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCaseRelIssueRelationAddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCaseRelIssueRelationAddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCaseRelIssueRelationAddRequestValidationError) ErrorName() string {
	return "TestPlanCaseRelIssueRelationAddRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCaseRelIssueRelationAddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCaseRelIssueRelationAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCaseRelIssueRelationAddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCaseRelIssueRelationAddRequestValidationError{}

// Validate checks the field values on TestPlanCaseRelIssueRelationAddResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TestPlanCaseRelIssueRelationAddResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TestPlanCaseRelIssueRelationAddResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TestPlanCaseRelIssueRelationAddResponseMultiError, or nil if none found.
func (m *TestPlanCaseRelIssueRelationAddResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCaseRelIssueRelationAddResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TestPlanCaseRelIssueRelationAddResponseMultiError(errors)
	}

	return nil
}

// TestPlanCaseRelIssueRelationAddResponseMultiError is an error wrapping
// multiple validation errors returned by
// TestPlanCaseRelIssueRelationAddResponse.ValidateAll() if the designated
// constraints aren't met.
type TestPlanCaseRelIssueRelationAddResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCaseRelIssueRelationAddResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCaseRelIssueRelationAddResponseMultiError) AllErrors() []error { return m }

// TestPlanCaseRelIssueRelationAddResponseValidationError is the validation
// error returned by TestPlanCaseRelIssueRelationAddResponse.Validate if the
// designated constraints aren't met.
type TestPlanCaseRelIssueRelationAddResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCaseRelIssueRelationAddResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCaseRelIssueRelationAddResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCaseRelIssueRelationAddResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCaseRelIssueRelationAddResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCaseRelIssueRelationAddResponseValidationError) ErrorName() string {
	return "TestPlanCaseRelIssueRelationAddResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCaseRelIssueRelationAddResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCaseRelIssueRelationAddResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCaseRelIssueRelationAddResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCaseRelIssueRelationAddResponseValidationError{}

// Validate checks the field values on
// TestPlanCaseRelIssueRelationRemoveRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestPlanCaseRelIssueRelationRemoveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TestPlanCaseRelIssueRelationRemoveRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TestPlanCaseRelIssueRelationRemoveRequestMultiError, or nil if none found.
func (m *TestPlanCaseRelIssueRelationRemoveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCaseRelIssueRelationRemoveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestPlanID

	// no validation rules for TestPlanCaseRelID

	// no validation rules for RelationID

	if len(errors) > 0 {
		return TestPlanCaseRelIssueRelationRemoveRequestMultiError(errors)
	}

	return nil
}

// TestPlanCaseRelIssueRelationRemoveRequestMultiError is an error wrapping
// multiple validation errors returned by
// TestPlanCaseRelIssueRelationRemoveRequest.ValidateAll() if the designated
// constraints aren't met.
type TestPlanCaseRelIssueRelationRemoveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCaseRelIssueRelationRemoveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCaseRelIssueRelationRemoveRequestMultiError) AllErrors() []error { return m }

// TestPlanCaseRelIssueRelationRemoveRequestValidationError is the validation
// error returned by TestPlanCaseRelIssueRelationRemoveRequest.Validate if the
// designated constraints aren't met.
type TestPlanCaseRelIssueRelationRemoveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCaseRelIssueRelationRemoveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCaseRelIssueRelationRemoveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCaseRelIssueRelationRemoveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCaseRelIssueRelationRemoveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCaseRelIssueRelationRemoveRequestValidationError) ErrorName() string {
	return "TestPlanCaseRelIssueRelationRemoveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCaseRelIssueRelationRemoveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCaseRelIssueRelationRemoveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCaseRelIssueRelationRemoveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCaseRelIssueRelationRemoveRequestValidationError{}

// Validate checks the field values on
// TestPlanCaseRelIssueRelationRemoveResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestPlanCaseRelIssueRelationRemoveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TestPlanCaseRelIssueRelationRemoveResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TestPlanCaseRelIssueRelationRemoveResponseMultiError, or nil if none found.
func (m *TestPlanCaseRelIssueRelationRemoveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCaseRelIssueRelationRemoveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TestPlanCaseRelIssueRelationRemoveResponseMultiError(errors)
	}

	return nil
}

// TestPlanCaseRelIssueRelationRemoveResponseMultiError is an error wrapping
// multiple validation errors returned by
// TestPlanCaseRelIssueRelationRemoveResponse.ValidateAll() if the designated
// constraints aren't met.
type TestPlanCaseRelIssueRelationRemoveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCaseRelIssueRelationRemoveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCaseRelIssueRelationRemoveResponseMultiError) AllErrors() []error { return m }

// TestPlanCaseRelIssueRelationRemoveResponseValidationError is the validation
// error returned by TestPlanCaseRelIssueRelationRemoveResponse.Validate if
// the designated constraints aren't met.
type TestPlanCaseRelIssueRelationRemoveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCaseRelIssueRelationRemoveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCaseRelIssueRelationRemoveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCaseRelIssueRelationRemoveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCaseRelIssueRelationRemoveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCaseRelIssueRelationRemoveResponseValidationError) ErrorName() string {
	return "TestPlanCaseRelIssueRelationRemoveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCaseRelIssueRelationRemoveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCaseRelIssueRelationRemoveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCaseRelIssueRelationRemoveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCaseRelIssueRelationRemoveResponseValidationError{}

// Validate checks the field values on TestPlanCaseRelPagingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanCaseRelPagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanCaseRelPagingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanCaseRelPagingRequestMultiError, or nil if none found.
func (m *TestPlanCaseRelPagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCaseRelPagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for TestPlanID

	// no validation rules for TestSetID

	// no validation rules for Query

	if m.TimestampSecUpdatedAtBegin != nil {

		if all {
			switch v := interface{}(m.GetTimestampSecUpdatedAtBegin()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanCaseRelPagingRequestValidationError{
						field:  "TimestampSecUpdatedAtBegin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanCaseRelPagingRequestValidationError{
						field:  "TimestampSecUpdatedAtBegin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimestampSecUpdatedAtBegin()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanCaseRelPagingRequestValidationError{
					field:  "TimestampSecUpdatedAtBegin",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TimestampSecUpdatedAtEnd != nil {

		if all {
			switch v := interface{}(m.GetTimestampSecUpdatedAtEnd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanCaseRelPagingRequestValidationError{
						field:  "TimestampSecUpdatedAtEnd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanCaseRelPagingRequestValidationError{
						field:  "TimestampSecUpdatedAtEnd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimestampSecUpdatedAtEnd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanCaseRelPagingRequestValidationError{
					field:  "TimestampSecUpdatedAtEnd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAtBeginInclude != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAtBeginInclude()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanCaseRelPagingRequestValidationError{
						field:  "UpdatedAtBeginInclude",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanCaseRelPagingRequestValidationError{
						field:  "UpdatedAtBeginInclude",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAtBeginInclude()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanCaseRelPagingRequestValidationError{
					field:  "UpdatedAtBeginInclude",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAtEndInclude != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAtEndInclude()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanCaseRelPagingRequestValidationError{
						field:  "UpdatedAtEndInclude",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanCaseRelPagingRequestValidationError{
						field:  "UpdatedAtEndInclude",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAtEndInclude()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanCaseRelPagingRequestValidationError{
					field:  "UpdatedAtEndInclude",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.OrderByPriorityAsc != nil {
		// no validation rules for OrderByPriorityAsc
	}

	if m.OrderByPriorityDesc != nil {
		// no validation rules for OrderByPriorityDesc
	}

	if m.OrderByUpdaterIDAsc != nil {
		// no validation rules for OrderByUpdaterIDAsc
	}

	if m.OrderByUpdaterIDDesc != nil {
		// no validation rules for OrderByUpdaterIDDesc
	}

	if m.OrderByUpdatedAtAsc != nil {
		// no validation rules for OrderByUpdatedAtAsc
	}

	if m.OrderByUpdatedAtDesc != nil {
		// no validation rules for OrderByUpdatedAtDesc
	}

	if m.OrderByIDAsc != nil {
		// no validation rules for OrderByIDAsc
	}

	if m.OrderByIDDesc != nil {
		// no validation rules for OrderByIDDesc
	}

	if m.OrderByTestSetIDAsc != nil {
		// no validation rules for OrderByTestSetIDAsc
	}

	if m.OrderByTestSetIDDesc != nil {
		// no validation rules for OrderByTestSetIDDesc
	}

	if m.OrderByTestSetNameAsc != nil {
		// no validation rules for OrderByTestSetNameAsc
	}

	if m.OrderByTestSetNameDesc != nil {
		// no validation rules for OrderByTestSetNameDesc
	}

	if m.TestPlan != nil {

		if all {
			switch v := interface{}(m.GetTestPlan()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanCaseRelPagingRequestValidationError{
						field:  "TestPlan",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanCaseRelPagingRequestValidationError{
						field:  "TestPlan",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTestPlan()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanCaseRelPagingRequestValidationError{
					field:  "TestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TestPlanCaseRelPagingRequestMultiError(errors)
	}

	return nil
}

// TestPlanCaseRelPagingRequestMultiError is an error wrapping multiple
// validation errors returned by TestPlanCaseRelPagingRequest.ValidateAll() if
// the designated constraints aren't met.
type TestPlanCaseRelPagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCaseRelPagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCaseRelPagingRequestMultiError) AllErrors() []error { return m }

// TestPlanCaseRelPagingRequestValidationError is the validation error returned
// by TestPlanCaseRelPagingRequest.Validate if the designated constraints
// aren't met.
type TestPlanCaseRelPagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCaseRelPagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCaseRelPagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCaseRelPagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCaseRelPagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCaseRelPagingRequestValidationError) ErrorName() string {
	return "TestPlanCaseRelPagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCaseRelPagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCaseRelPagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCaseRelPagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCaseRelPagingRequestValidationError{}

// Validate checks the field values on TestPlanCaseRelPagingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanCaseRelPagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanCaseRelPagingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TestPlanCaseRelPagingResponseMultiError, or nil if none found.
func (m *TestPlanCaseRelPagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCaseRelPagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanCaseRelPagingResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanCaseRelPagingResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanCaseRelPagingResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TestPlanCaseRelPagingResponseMultiError(errors)
	}

	return nil
}

// TestPlanCaseRelPagingResponseMultiError is an error wrapping multiple
// validation errors returned by TestPlanCaseRelPagingResponse.ValidateAll()
// if the designated constraints aren't met.
type TestPlanCaseRelPagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCaseRelPagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCaseRelPagingResponseMultiError) AllErrors() []error { return m }

// TestPlanCaseRelPagingResponseValidationError is the validation error
// returned by TestPlanCaseRelPagingResponse.Validate if the designated
// constraints aren't met.
type TestPlanCaseRelPagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCaseRelPagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCaseRelPagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCaseRelPagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCaseRelPagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCaseRelPagingResponseValidationError) ErrorName() string {
	return "TestPlanCaseRelPagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCaseRelPagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCaseRelPagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCaseRelPagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCaseRelPagingResponseValidationError{}
