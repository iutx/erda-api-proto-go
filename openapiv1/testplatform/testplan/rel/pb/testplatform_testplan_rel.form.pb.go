// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: testplatform_testplan_rel.proto

package pb

import (
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*TestPlanCaseRelBatchUpdateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestPlanCaseRelCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestPlanCaseRelCreateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestPlanCaseRelExportRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestPlanCaseRelExportResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestPlanCaseRelGetRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestPlanCaseRelGetResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestPlanCaseRelIssueRelationAddRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestPlanCaseRelIssueRelationAddResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestPlanCaseRelIssueRelationRemoveRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestPlanCaseRelIssueRelationRemoveResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestPlanCaseRelPagingRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestPlanCaseRelPagingResponse)(nil)

// TestPlanCaseRelBatchUpdateRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestPlanCaseRelBatchUpdateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "delete":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Delete = val
			case "executorID":
				m.ExecutorID = vals[0]
			case "execStatus":
				m.ExecStatus = vals[0]
			case "testPlanID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TestPlanID = val
			case "testSetID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TestSetID = &val
			case "relationIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.RelationIDs = list
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			}
		}
	}
	return nil
}

// TestPlanCaseRelCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestPlanCaseRelCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "testPlanID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TestPlanID = val
			case "testCaseIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.TestCaseIDs = list
			case "testSetIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.TestSetIDs = list
			}
		}
	}
	return nil
}

// TestPlanCaseRelCreateResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestPlanCaseRelCreateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// TestPlanCaseRelExportRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestPlanCaseRelExportRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "testPlanCaseRelPagingRequest":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.TestPlanCaseRelPagingRequest = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.TestPlanCaseRelPagingRequest = val
					} else {
						m.TestPlanCaseRelPagingRequest = structpb.NewStringValue(vals[0])
					}
				}
			case "locale":
				m.Locale = vals[0]
			case "fileType":
				m.FileType = vals[0]
			case "testPlanID":
				m.TestPlanID = vals[0]
			}
		}
	}
	return nil
}

// TestPlanCaseRelExportResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestPlanCaseRelExportResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// TestPlanCaseRelGetRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestPlanCaseRelGetRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "relationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RelationID = val
			case "testPlanID":
				m.TestPlanID = vals[0]
			}
		}
	}
	return nil
}

// TestPlanCaseRelGetResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestPlanCaseRelGetResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// TestPlanCaseRelIssueRelationAddRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestPlanCaseRelIssueRelationAddRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "issueIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.IssueIDs = list
			case "testPlanID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TestPlanID = val
			case "testPlanCaseRelID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TestPlanCaseRelID = val
			case "relationID":
				m.RelationID = vals[0]
			}
		}
	}
	return nil
}

// TestPlanCaseRelIssueRelationAddResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestPlanCaseRelIssueRelationAddResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// TestPlanCaseRelIssueRelationRemoveRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestPlanCaseRelIssueRelationRemoveRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "issueTestCaseRelationIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.IssueTestCaseRelationIDs = list
			case "testPlanID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TestPlanID = val
			case "testPlanCaseRelID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TestPlanCaseRelID = val
			case "relationID":
				m.RelationID = vals[0]
			}
		}
	}
	return nil
}

// TestPlanCaseRelIssueRelationRemoveResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestPlanCaseRelIssueRelationRemoveResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// TestPlanCaseRelPagingRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestPlanCaseRelPagingRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "relIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.RelIDs = list
			case "testPlanID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TestPlanID = val
			case "testSetID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TestSetID = val
			case "query":
				m.Query = vals[0]
			case "priorities":
				m.Priorities = vals
			case "updaterIDs":
				m.UpdaterIDs = vals
			case "executorIDs":
				m.ExecutorIDs = vals
			case "execStatuses":
				m.ExecStatuses = vals
			case "timestampSecUpdatedAtBegin":
				if m.TimestampSecUpdatedAtBegin == nil {
					m.TimestampSecUpdatedAtBegin = &durationpb.Duration{}
				}
			case "timestampSecUpdatedAtBegin.seconds":
				if m.TimestampSecUpdatedAtBegin == nil {
					m.TimestampSecUpdatedAtBegin = &durationpb.Duration{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimestampSecUpdatedAtBegin.Seconds = val
			case "timestampSecUpdatedAtBegin.nanos":
				if m.TimestampSecUpdatedAtBegin == nil {
					m.TimestampSecUpdatedAtBegin = &durationpb.Duration{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimestampSecUpdatedAtBegin.Nanos = int32(val)
			case "timestampSecUpdatedAtEnd":
				if m.TimestampSecUpdatedAtEnd == nil {
					m.TimestampSecUpdatedAtEnd = &durationpb.Duration{}
				}
			case "timestampSecUpdatedAtEnd.seconds":
				if m.TimestampSecUpdatedAtEnd == nil {
					m.TimestampSecUpdatedAtEnd = &durationpb.Duration{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimestampSecUpdatedAtEnd.Seconds = val
			case "timestampSecUpdatedAtEnd.nanos":
				if m.TimestampSecUpdatedAtEnd == nil {
					m.TimestampSecUpdatedAtEnd = &durationpb.Duration{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimestampSecUpdatedAtEnd.Nanos = int32(val)
			case "updatedAtBeginInclude":
				if m.UpdatedAtBeginInclude == nil {
					m.UpdatedAtBeginInclude = &timestamppb.Timestamp{}
				}
			case "updatedAtBeginInclude.seconds":
				if m.UpdatedAtBeginInclude == nil {
					m.UpdatedAtBeginInclude = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAtBeginInclude.Seconds = val
			case "updatedAtBeginInclude.nanos":
				if m.UpdatedAtBeginInclude == nil {
					m.UpdatedAtBeginInclude = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAtBeginInclude.Nanos = int32(val)
			case "updatedAtEndInclude":
				if m.UpdatedAtEndInclude == nil {
					m.UpdatedAtEndInclude = &timestamppb.Timestamp{}
				}
			case "updatedAtEndInclude.seconds":
				if m.UpdatedAtEndInclude == nil {
					m.UpdatedAtEndInclude = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAtEndInclude.Seconds = val
			case "updatedAtEndInclude.nanos":
				if m.UpdatedAtEndInclude == nil {
					m.UpdatedAtEndInclude = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAtEndInclude.Nanos = int32(val)
			case "orderFields":
				m.OrderFields = vals
			case "orderByPriorityAsc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByPriorityAsc = &val
			case "orderByPriorityDesc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByPriorityDesc = &val
			case "orderByUpdaterIDAsc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByUpdaterIDAsc = &val
			case "orderByUpdaterIDDesc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByUpdaterIDDesc = &val
			case "orderByUpdatedAtAsc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByUpdatedAtAsc = &val
			case "orderByUpdatedAtDesc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByUpdatedAtDesc = &val
			case "orderByIDAsc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByIDAsc = &val
			case "orderByIDDesc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByIDDesc = &val
			case "orderByTestSetIDAsc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByTestSetIDAsc = &val
			case "orderByTestSetIDDesc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByTestSetIDDesc = &val
			case "orderByTestSetNameAsc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByTestSetNameAsc = &val
			case "orderByTestSetNameDesc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByTestSetNameDesc = &val
			case "testPlan":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.TestPlan = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.TestPlan = val
					} else {
						m.TestPlan = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// TestPlanCaseRelPagingResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestPlanCaseRelPagingResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}
