// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: testplatform_testplan_rel.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestPlanCaseRelBatchUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delete      bool     `protobuf:"varint,1,opt,name=delete,proto3" json:"delete,omitempty"`
	ExecutorID  string   `protobuf:"bytes,2,opt,name=executorID,proto3" json:"executorID,omitempty"`
	ExecStatus  string   `protobuf:"bytes,3,opt,name=execStatus,proto3" json:"execStatus,omitempty"`
	TestPlanID  uint64   `protobuf:"varint,4,opt,name=testPlanID,json=-,proto3" json:"testPlanID,omitempty"`
	TestSetID   *uint64  `protobuf:"varint,5,opt,name=testSetID,proto3,oneof" json:"testSetID,omitempty"`
	RelationIDs []uint64 `protobuf:"varint,6,rep,packed,name=relationIDs,proto3" json:"relationIDs,omitempty"`
	ProjectID   uint64   `protobuf:"varint,7,opt,name=projectID,json=-,proto3" json:"projectID,omitempty"`
}

func (x *TestPlanCaseRelBatchUpdateRequest) Reset() {
	*x = TestPlanCaseRelBatchUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_rel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelBatchUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelBatchUpdateRequest) ProtoMessage() {}

func (x *TestPlanCaseRelBatchUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_rel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelBatchUpdateRequest.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelBatchUpdateRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_rel_proto_rawDescGZIP(), []int{0}
}

func (x *TestPlanCaseRelBatchUpdateRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (x *TestPlanCaseRelBatchUpdateRequest) GetExecutorID() string {
	if x != nil {
		return x.ExecutorID
	}
	return ""
}

func (x *TestPlanCaseRelBatchUpdateRequest) GetExecStatus() string {
	if x != nil {
		return x.ExecStatus
	}
	return ""
}

func (x *TestPlanCaseRelBatchUpdateRequest) GetTestPlanID() uint64 {
	if x != nil {
		return x.TestPlanID
	}
	return 0
}

func (x *TestPlanCaseRelBatchUpdateRequest) GetTestSetID() uint64 {
	if x != nil && x.TestSetID != nil {
		return *x.TestSetID
	}
	return 0
}

func (x *TestPlanCaseRelBatchUpdateRequest) GetRelationIDs() []uint64 {
	if x != nil {
		return x.RelationIDs
	}
	return nil
}

func (x *TestPlanCaseRelBatchUpdateRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

type TestPlanCaseRelCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestPlanID  uint64   `protobuf:"varint,1,opt,name=testPlanID,proto3" json:"testPlanID,omitempty"`
	TestCaseIDs []uint64 `protobuf:"varint,2,rep,packed,name=testCaseIDs,proto3" json:"testCaseIDs,omitempty"`
	TestSetIDs  []uint64 `protobuf:"varint,3,rep,packed,name=testSetIDs,proto3" json:"testSetIDs,omitempty"`
}

func (x *TestPlanCaseRelCreateRequest) Reset() {
	*x = TestPlanCaseRelCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_rel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelCreateRequest) ProtoMessage() {}

func (x *TestPlanCaseRelCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_rel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelCreateRequest.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelCreateRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_rel_proto_rawDescGZIP(), []int{1}
}

func (x *TestPlanCaseRelCreateRequest) GetTestPlanID() uint64 {
	if x != nil {
		return x.TestPlanID
	}
	return 0
}

func (x *TestPlanCaseRelCreateRequest) GetTestCaseIDs() []uint64 {
	if x != nil {
		return x.TestCaseIDs
	}
	return nil
}

func (x *TestPlanCaseRelCreateRequest) GetTestSetIDs() []uint64 {
	if x != nil {
		return x.TestSetIDs
	}
	return nil
}

type TestPlanCaseRelCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *TestPlanCaseRelCreateResponse) Reset() {
	*x = TestPlanCaseRelCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_rel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelCreateResponse) ProtoMessage() {}

func (x *TestPlanCaseRelCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_rel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelCreateResponse.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelCreateResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_rel_proto_rawDescGZIP(), []int{2}
}

func (x *TestPlanCaseRelCreateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestPlanCaseRelExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestPlanCaseRelPagingRequest *structpb.Value `protobuf:"bytes,1,opt,name=testPlanCaseRelPagingRequest,proto3" json:"testPlanCaseRelPagingRequest,omitempty"`
	Locale                       string          `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
	FileType                     string          `protobuf:"bytes,3,opt,name=fileType,proto3" json:"fileType,omitempty"`
	TestPlanID                   string          `protobuf:"bytes,4,opt,name=testPlanID,proto3" json:"testPlanID,omitempty"` // generated from path variable: testPlanID. You should change the proto type if necessary.
}

func (x *TestPlanCaseRelExportRequest) Reset() {
	*x = TestPlanCaseRelExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_rel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelExportRequest) ProtoMessage() {}

func (x *TestPlanCaseRelExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_rel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelExportRequest.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelExportRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_rel_proto_rawDescGZIP(), []int{3}
}

func (x *TestPlanCaseRelExportRequest) GetTestPlanCaseRelPagingRequest() *structpb.Value {
	if x != nil {
		return x.TestPlanCaseRelPagingRequest
	}
	return nil
}

func (x *TestPlanCaseRelExportRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *TestPlanCaseRelExportRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *TestPlanCaseRelExportRequest) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

type TestPlanCaseRelExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TestPlanCaseRelExportResponse) Reset() {
	*x = TestPlanCaseRelExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_rel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelExportResponse) ProtoMessage() {}

func (x *TestPlanCaseRelExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_rel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelExportResponse.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelExportResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_rel_proto_rawDescGZIP(), []int{4}
}

func (x *TestPlanCaseRelExportResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type TestPlanCaseRelGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationID uint64 `protobuf:"varint,1,opt,name=relationID,proto3" json:"relationID,omitempty"`
	TestPlanID string `protobuf:"bytes,2,opt,name=testPlanID,proto3" json:"testPlanID,omitempty"` // generated from path variable: testPlanID. You should change the proto type if necessary.
}

func (x *TestPlanCaseRelGetRequest) Reset() {
	*x = TestPlanCaseRelGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_rel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelGetRequest) ProtoMessage() {}

func (x *TestPlanCaseRelGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_rel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelGetRequest.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelGetRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_rel_proto_rawDescGZIP(), []int{5}
}

func (x *TestPlanCaseRelGetRequest) GetRelationID() uint64 {
	if x != nil {
		return x.RelationID
	}
	return 0
}

func (x *TestPlanCaseRelGetRequest) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

type TestPlanCaseRelGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *TestPlanCaseRelGetResponse) Reset() {
	*x = TestPlanCaseRelGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_rel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelGetResponse) ProtoMessage() {}

func (x *TestPlanCaseRelGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_rel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelGetResponse.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelGetResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_rel_proto_rawDescGZIP(), []int{6}
}

func (x *TestPlanCaseRelGetResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestPlanCaseRelIssueRelationAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueIDs          []uint64 `protobuf:"varint,1,rep,packed,name=issueIDs,proto3" json:"issueIDs,omitempty"`
	TestPlanID        uint64   `protobuf:"varint,2,opt,name=testPlanID,json=-,proto3" json:"testPlanID,omitempty"`
	TestPlanCaseRelID uint64   `protobuf:"varint,3,opt,name=testPlanCaseRelID,json=-,proto3" json:"testPlanCaseRelID,omitempty"`
	RelationID        string   `protobuf:"bytes,4,opt,name=relationID,proto3" json:"relationID,omitempty"` // generated from path variable: relationID. You should change the proto type if necessary.
}

func (x *TestPlanCaseRelIssueRelationAddRequest) Reset() {
	*x = TestPlanCaseRelIssueRelationAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_rel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelIssueRelationAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelIssueRelationAddRequest) ProtoMessage() {}

func (x *TestPlanCaseRelIssueRelationAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_rel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelIssueRelationAddRequest.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelIssueRelationAddRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_rel_proto_rawDescGZIP(), []int{7}
}

func (x *TestPlanCaseRelIssueRelationAddRequest) GetIssueIDs() []uint64 {
	if x != nil {
		return x.IssueIDs
	}
	return nil
}

func (x *TestPlanCaseRelIssueRelationAddRequest) GetTestPlanID() uint64 {
	if x != nil {
		return x.TestPlanID
	}
	return 0
}

func (x *TestPlanCaseRelIssueRelationAddRequest) GetTestPlanCaseRelID() uint64 {
	if x != nil {
		return x.TestPlanCaseRelID
	}
	return 0
}

func (x *TestPlanCaseRelIssueRelationAddRequest) GetRelationID() string {
	if x != nil {
		return x.RelationID
	}
	return ""
}

type TestPlanCaseRelIssueRelationAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestPlanCaseRelIssueRelationAddResponse) Reset() {
	*x = TestPlanCaseRelIssueRelationAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_rel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelIssueRelationAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelIssueRelationAddResponse) ProtoMessage() {}

func (x *TestPlanCaseRelIssueRelationAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_rel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelIssueRelationAddResponse.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelIssueRelationAddResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_rel_proto_rawDescGZIP(), []int{8}
}

type TestPlanCaseRelIssueRelationRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueTestCaseRelationIDs []uint64 `protobuf:"varint,1,rep,packed,name=issueTestCaseRelationIDs,proto3" json:"issueTestCaseRelationIDs,omitempty"`
	TestPlanID               uint64   `protobuf:"varint,2,opt,name=testPlanID,json=-,proto3" json:"testPlanID,omitempty"`
	TestPlanCaseRelID        uint64   `protobuf:"varint,3,opt,name=testPlanCaseRelID,json=-,proto3" json:"testPlanCaseRelID,omitempty"`
	RelationID               string   `protobuf:"bytes,4,opt,name=relationID,proto3" json:"relationID,omitempty"` // generated from path variable: relationID. You should change the proto type if necessary.
}

func (x *TestPlanCaseRelIssueRelationRemoveRequest) Reset() {
	*x = TestPlanCaseRelIssueRelationRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_rel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelIssueRelationRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelIssueRelationRemoveRequest) ProtoMessage() {}

func (x *TestPlanCaseRelIssueRelationRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_rel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelIssueRelationRemoveRequest.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelIssueRelationRemoveRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_rel_proto_rawDescGZIP(), []int{9}
}

func (x *TestPlanCaseRelIssueRelationRemoveRequest) GetIssueTestCaseRelationIDs() []uint64 {
	if x != nil {
		return x.IssueTestCaseRelationIDs
	}
	return nil
}

func (x *TestPlanCaseRelIssueRelationRemoveRequest) GetTestPlanID() uint64 {
	if x != nil {
		return x.TestPlanID
	}
	return 0
}

func (x *TestPlanCaseRelIssueRelationRemoveRequest) GetTestPlanCaseRelID() uint64 {
	if x != nil {
		return x.TestPlanCaseRelID
	}
	return 0
}

func (x *TestPlanCaseRelIssueRelationRemoveRequest) GetRelationID() string {
	if x != nil {
		return x.RelationID
	}
	return ""
}

type TestPlanCaseRelIssueRelationRemoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestPlanCaseRelIssueRelationRemoveResponse) Reset() {
	*x = TestPlanCaseRelIssueRelationRemoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_rel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelIssueRelationRemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelIssueRelationRemoveResponse) ProtoMessage() {}

func (x *TestPlanCaseRelIssueRelationRemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_rel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelIssueRelationRemoveResponse.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelIssueRelationRemoveResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_rel_proto_rawDescGZIP(), []int{10}
}

type TestPlanCaseRelPagingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo                     int64                  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize                   int64                  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	RelIDs                     []uint64               `protobuf:"varint,3,rep,packed,name=relIDs,proto3" json:"relIDs,omitempty"`
	TestPlanID                 uint64                 `protobuf:"varint,4,opt,name=testPlanID,proto3" json:"testPlanID,omitempty"`
	TestSetID                  uint64                 `protobuf:"varint,5,opt,name=testSetID,proto3" json:"testSetID,omitempty"`
	Query                      string                 `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	Priorities                 []string               `protobuf:"bytes,7,rep,name=priorities,proto3" json:"priorities,omitempty"`
	UpdaterIDs                 []string               `protobuf:"bytes,8,rep,name=updaterIDs,proto3" json:"updaterIDs,omitempty"`
	ExecutorIDs                []string               `protobuf:"bytes,9,rep,name=executorIDs,proto3" json:"executorIDs,omitempty"`
	ExecStatuses               []string               `protobuf:"bytes,10,rep,name=execStatuses,proto3" json:"execStatuses,omitempty"`
	TimestampSecUpdatedAtBegin *durationpb.Duration   `protobuf:"bytes,11,opt,name=timestampSecUpdatedAtBegin,proto3,oneof" json:"timestampSecUpdatedAtBegin,omitempty"`
	TimestampSecUpdatedAtEnd   *durationpb.Duration   `protobuf:"bytes,12,opt,name=timestampSecUpdatedAtEnd,proto3,oneof" json:"timestampSecUpdatedAtEnd,omitempty"`
	UpdatedAtBeginInclude      *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updatedAtBeginInclude,proto3,oneof" json:"updatedAtBeginInclude,omitempty"`
	UpdatedAtEndInclude        *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=updatedAtEndInclude,proto3,oneof" json:"updatedAtEndInclude,omitempty"`
	OrderFields                []string               `protobuf:"bytes,15,rep,name=orderFields,proto3" json:"orderFields,omitempty"`
	OrderByPriorityAsc         *bool                  `protobuf:"varint,16,opt,name=orderByPriorityAsc,proto3,oneof" json:"orderByPriorityAsc,omitempty"`
	OrderByPriorityDesc        *bool                  `protobuf:"varint,17,opt,name=orderByPriorityDesc,proto3,oneof" json:"orderByPriorityDesc,omitempty"`
	OrderByUpdaterIDAsc        *bool                  `protobuf:"varint,18,opt,name=orderByUpdaterIDAsc,proto3,oneof" json:"orderByUpdaterIDAsc,omitempty"`
	OrderByUpdaterIDDesc       *bool                  `protobuf:"varint,19,opt,name=orderByUpdaterIDDesc,proto3,oneof" json:"orderByUpdaterIDDesc,omitempty"`
	OrderByUpdatedAtAsc        *bool                  `protobuf:"varint,20,opt,name=orderByUpdatedAtAsc,proto3,oneof" json:"orderByUpdatedAtAsc,omitempty"`
	OrderByUpdatedAtDesc       *bool                  `protobuf:"varint,21,opt,name=orderByUpdatedAtDesc,proto3,oneof" json:"orderByUpdatedAtDesc,omitempty"`
	OrderByIDAsc               *bool                  `protobuf:"varint,22,opt,name=orderByIDAsc,proto3,oneof" json:"orderByIDAsc,omitempty"`
	OrderByIDDesc              *bool                  `protobuf:"varint,23,opt,name=orderByIDDesc,proto3,oneof" json:"orderByIDDesc,omitempty"`
	OrderByTestSetIDAsc        *bool                  `protobuf:"varint,24,opt,name=orderByTestSetIDAsc,proto3,oneof" json:"orderByTestSetIDAsc,omitempty"`
	OrderByTestSetIDDesc       *bool                  `protobuf:"varint,25,opt,name=orderByTestSetIDDesc,proto3,oneof" json:"orderByTestSetIDDesc,omitempty"`
	OrderByTestSetNameAsc      *bool                  `protobuf:"varint,26,opt,name=orderByTestSetNameAsc,proto3,oneof" json:"orderByTestSetNameAsc,omitempty"`
	OrderByTestSetNameDesc     *bool                  `protobuf:"varint,27,opt,name=orderByTestSetNameDesc,proto3,oneof" json:"orderByTestSetNameDesc,omitempty"`
	TestPlan                   *structpb.Value        `protobuf:"bytes,28,opt,name=testPlan,proto3,oneof" json:"testPlan,omitempty"`
}

func (x *TestPlanCaseRelPagingRequest) Reset() {
	*x = TestPlanCaseRelPagingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_rel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelPagingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelPagingRequest) ProtoMessage() {}

func (x *TestPlanCaseRelPagingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_rel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelPagingRequest.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelPagingRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_rel_proto_rawDescGZIP(), []int{11}
}

func (x *TestPlanCaseRelPagingRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *TestPlanCaseRelPagingRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TestPlanCaseRelPagingRequest) GetRelIDs() []uint64 {
	if x != nil {
		return x.RelIDs
	}
	return nil
}

func (x *TestPlanCaseRelPagingRequest) GetTestPlanID() uint64 {
	if x != nil {
		return x.TestPlanID
	}
	return 0
}

func (x *TestPlanCaseRelPagingRequest) GetTestSetID() uint64 {
	if x != nil {
		return x.TestSetID
	}
	return 0
}

func (x *TestPlanCaseRelPagingRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *TestPlanCaseRelPagingRequest) GetPriorities() []string {
	if x != nil {
		return x.Priorities
	}
	return nil
}

func (x *TestPlanCaseRelPagingRequest) GetUpdaterIDs() []string {
	if x != nil {
		return x.UpdaterIDs
	}
	return nil
}

func (x *TestPlanCaseRelPagingRequest) GetExecutorIDs() []string {
	if x != nil {
		return x.ExecutorIDs
	}
	return nil
}

func (x *TestPlanCaseRelPagingRequest) GetExecStatuses() []string {
	if x != nil {
		return x.ExecStatuses
	}
	return nil
}

func (x *TestPlanCaseRelPagingRequest) GetTimestampSecUpdatedAtBegin() *durationpb.Duration {
	if x != nil {
		return x.TimestampSecUpdatedAtBegin
	}
	return nil
}

func (x *TestPlanCaseRelPagingRequest) GetTimestampSecUpdatedAtEnd() *durationpb.Duration {
	if x != nil {
		return x.TimestampSecUpdatedAtEnd
	}
	return nil
}

func (x *TestPlanCaseRelPagingRequest) GetUpdatedAtBeginInclude() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAtBeginInclude
	}
	return nil
}

func (x *TestPlanCaseRelPagingRequest) GetUpdatedAtEndInclude() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAtEndInclude
	}
	return nil
}

func (x *TestPlanCaseRelPagingRequest) GetOrderFields() []string {
	if x != nil {
		return x.OrderFields
	}
	return nil
}

func (x *TestPlanCaseRelPagingRequest) GetOrderByPriorityAsc() bool {
	if x != nil && x.OrderByPriorityAsc != nil {
		return *x.OrderByPriorityAsc
	}
	return false
}

func (x *TestPlanCaseRelPagingRequest) GetOrderByPriorityDesc() bool {
	if x != nil && x.OrderByPriorityDesc != nil {
		return *x.OrderByPriorityDesc
	}
	return false
}

func (x *TestPlanCaseRelPagingRequest) GetOrderByUpdaterIDAsc() bool {
	if x != nil && x.OrderByUpdaterIDAsc != nil {
		return *x.OrderByUpdaterIDAsc
	}
	return false
}

func (x *TestPlanCaseRelPagingRequest) GetOrderByUpdaterIDDesc() bool {
	if x != nil && x.OrderByUpdaterIDDesc != nil {
		return *x.OrderByUpdaterIDDesc
	}
	return false
}

func (x *TestPlanCaseRelPagingRequest) GetOrderByUpdatedAtAsc() bool {
	if x != nil && x.OrderByUpdatedAtAsc != nil {
		return *x.OrderByUpdatedAtAsc
	}
	return false
}

func (x *TestPlanCaseRelPagingRequest) GetOrderByUpdatedAtDesc() bool {
	if x != nil && x.OrderByUpdatedAtDesc != nil {
		return *x.OrderByUpdatedAtDesc
	}
	return false
}

func (x *TestPlanCaseRelPagingRequest) GetOrderByIDAsc() bool {
	if x != nil && x.OrderByIDAsc != nil {
		return *x.OrderByIDAsc
	}
	return false
}

func (x *TestPlanCaseRelPagingRequest) GetOrderByIDDesc() bool {
	if x != nil && x.OrderByIDDesc != nil {
		return *x.OrderByIDDesc
	}
	return false
}

func (x *TestPlanCaseRelPagingRequest) GetOrderByTestSetIDAsc() bool {
	if x != nil && x.OrderByTestSetIDAsc != nil {
		return *x.OrderByTestSetIDAsc
	}
	return false
}

func (x *TestPlanCaseRelPagingRequest) GetOrderByTestSetIDDesc() bool {
	if x != nil && x.OrderByTestSetIDDesc != nil {
		return *x.OrderByTestSetIDDesc
	}
	return false
}

func (x *TestPlanCaseRelPagingRequest) GetOrderByTestSetNameAsc() bool {
	if x != nil && x.OrderByTestSetNameAsc != nil {
		return *x.OrderByTestSetNameAsc
	}
	return false
}

func (x *TestPlanCaseRelPagingRequest) GetOrderByTestSetNameDesc() bool {
	if x != nil && x.OrderByTestSetNameDesc != nil {
		return *x.OrderByTestSetNameDesc
	}
	return false
}

func (x *TestPlanCaseRelPagingRequest) GetTestPlan() *structpb.Value {
	if x != nil {
		return x.TestPlan
	}
	return nil
}

type TestPlanCaseRelPagingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *TestPlanCaseRelPagingResponse) Reset() {
	*x = TestPlanCaseRelPagingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_rel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCaseRelPagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCaseRelPagingResponse) ProtoMessage() {}

func (x *TestPlanCaseRelPagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_rel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCaseRelPagingResponse.ProtoReflect.Descriptor instead.
func (*TestPlanCaseRelPagingResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_rel_proto_rawDescGZIP(), []int{12}
}

func (x *TestPlanCaseRelPagingResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_testplatform_testplan_rel_proto protoreflect.FileDescriptor

var file_testplatform_testplan_rel_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1b, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x01, 0x0a, 0x21, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x2d, 0x12, 0x21, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x73, 0x12, 0x14, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x2d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x73, 0x22, 0x59, 0x0a, 0x1d, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xce, 0x01, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x1c, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1c, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x6c, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x33, 0x0a, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x19, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x99, 0x01, 0x0a, 0x26, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x49, 0x44, 0x73, 0x12, 0x15, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x2d, 0x12, 0x1c, 0x0a,
	0x11, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x2d, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x29, 0x0a, 0x27, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x29, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x18, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73,
	0x12, 0x15, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x2d, 0x12, 0x1c, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x01, 0x2d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x2c, 0x0a, 0x2a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa2, 0x0e, 0x0a, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x49,
	0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x49, 0x44, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78,
	0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x18, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x02, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a,
	0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x33, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x41, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x41, 0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x13, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x41,
	0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x44, 0x65, 0x73, 0x63, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x41, 0x73, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x13, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x41,
	0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x41, 0x73, 0x63, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x44, 0x41, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x44, 0x44, 0x65, 0x73, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b,
	0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x44, 0x65, 0x73, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x41, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0c, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x49, 0x44, 0x41, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x44, 0x65, 0x73, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0e, 0x52, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52,
	0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x10, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x53, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x41, 0x73, 0x63, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x44, 0x65, 0x73,
	0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x41, 0x73, 0x63, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44,
	0x41, 0x73, 0x63, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x44, 0x44, 0x65, 0x73, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x41, 0x73, 0x63, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x49, 0x44, 0x44, 0x65, 0x73, 0x63, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x63,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x59, 0x0a, 0x1d, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x32, 0xc6, 0x12, 0x0a, 0x19, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65,
	0x6c, 0x12, 0x9f, 0x03, 0x0a, 0x12, 0x41, 0x44, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x43, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xfd, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x22, 0x57, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x98, 0x01, 0x0a, 0x57, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x64, 0x64, 0x2d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x39, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8,
	0xae, 0xa1, 0xe5, 0x88, 0x92, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0xe9, 0x87, 0x8c, 0xe7, 0x9a,
	0x84, 0xe7, 0xbc, 0xba, 0xe9, 0x99, 0xb7, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe5, 0x85, 0xb3,
	0xe7, 0xb3, 0xbb, 0x12, 0xb1, 0x02, 0x0a, 0x0c, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x12, 0x3e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xc8, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22, 0x43, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x78, 0x0a,
	0x43, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6,
	0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0xae, 0xa1, 0xe5, 0x88, 0x92, 0xe7, 0x94, 0xa8, 0xe4, 0xbe,
	0x8b, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0x12, 0x9a, 0x02, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x12, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x30, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x5d, 0x0a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x27, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0xae, 0xa1, 0xe5,
	0x88, 0x92, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x94,
	0xa8, 0xe4, 0xbe, 0x8b, 0x12, 0x98, 0x02, 0x0a, 0x06, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x12,
	0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12,
	0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x5f,
	0x0a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73,
	0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xaf, 0xbc, 0xe5, 0x87,
	0xba, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0xae, 0xa1, 0xe5, 0x88, 0x92, 0xe4, 0xb8, 0x8b,
	0xe7, 0x9a, 0x84, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0x12,
	0xb1, 0x02, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3d, 0x12, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0xfa, 0x81,
	0xf9, 0x1b, 0x70, 0x0a, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d,
	0x32, 0x02, 0x10, 0x01, 0x3a, 0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0xae, 0xa1, 0xe5, 0x88,
	0x92, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe8, 0xaf, 0xa6,
	0xe6, 0x83, 0x85, 0x12, 0xa0, 0x02, 0x0a, 0x06, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x12, 0x39,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81,
	0xf9, 0x1b, 0x63, 0x0a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0xae,
	0xa1, 0xe5, 0x88, 0x92, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xae, 0x03, 0x0a, 0x15, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x12, 0x46, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x83, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x22, 0x5a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x2d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x9b, 0x01, 0x0a, 0x5a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x2d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x39, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0xa7, 0xa3, 0xe9, 0x99, 0xa4, 0xe6, 0xb5, 0x8b,
	0xe8, 0xaf, 0x95, 0xe8, 0xae, 0xa1, 0xe5, 0x88, 0x92, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0xe9,
	0x87, 0x8c, 0xe7, 0x9a, 0x84, 0xe7, 0xbc, 0xba, 0xe9, 0x99, 0xb7, 0xe5, 0x85, 0xb3, 0xe8, 0x81,
	0x94, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0x1a, 0x13, 0xc2, 0xc4, 0xcb, 0x1c, 0x0e, 0x22, 0x0c,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x4e, 0x5a, 0x4c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testplatform_testplan_rel_proto_rawDescOnce sync.Once
	file_testplatform_testplan_rel_proto_rawDescData = file_testplatform_testplan_rel_proto_rawDesc
)

func file_testplatform_testplan_rel_proto_rawDescGZIP() []byte {
	file_testplatform_testplan_rel_proto_rawDescOnce.Do(func() {
		file_testplatform_testplan_rel_proto_rawDescData = protoimpl.X.CompressGZIP(file_testplatform_testplan_rel_proto_rawDescData)
	})
	return file_testplatform_testplan_rel_proto_rawDescData
}

var file_testplatform_testplan_rel_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_testplatform_testplan_rel_proto_goTypes = []interface{}{
	(*TestPlanCaseRelBatchUpdateRequest)(nil),          // 0: erda.openapiv1.testplatform.TestPlanCaseRelBatchUpdateRequest
	(*TestPlanCaseRelCreateRequest)(nil),               // 1: erda.openapiv1.testplatform.TestPlanCaseRelCreateRequest
	(*TestPlanCaseRelCreateResponse)(nil),              // 2: erda.openapiv1.testplatform.TestPlanCaseRelCreateResponse
	(*TestPlanCaseRelExportRequest)(nil),               // 3: erda.openapiv1.testplatform.TestPlanCaseRelExportRequest
	(*TestPlanCaseRelExportResponse)(nil),              // 4: erda.openapiv1.testplatform.TestPlanCaseRelExportResponse
	(*TestPlanCaseRelGetRequest)(nil),                  // 5: erda.openapiv1.testplatform.TestPlanCaseRelGetRequest
	(*TestPlanCaseRelGetResponse)(nil),                 // 6: erda.openapiv1.testplatform.TestPlanCaseRelGetResponse
	(*TestPlanCaseRelIssueRelationAddRequest)(nil),     // 7: erda.openapiv1.testplatform.TestPlanCaseRelIssueRelationAddRequest
	(*TestPlanCaseRelIssueRelationAddResponse)(nil),    // 8: erda.openapiv1.testplatform.TestPlanCaseRelIssueRelationAddResponse
	(*TestPlanCaseRelIssueRelationRemoveRequest)(nil),  // 9: erda.openapiv1.testplatform.TestPlanCaseRelIssueRelationRemoveRequest
	(*TestPlanCaseRelIssueRelationRemoveResponse)(nil), // 10: erda.openapiv1.testplatform.TestPlanCaseRelIssueRelationRemoveResponse
	(*TestPlanCaseRelPagingRequest)(nil),               // 11: erda.openapiv1.testplatform.TestPlanCaseRelPagingRequest
	(*TestPlanCaseRelPagingResponse)(nil),              // 12: erda.openapiv1.testplatform.TestPlanCaseRelPagingResponse
	(*structpb.Value)(nil),                             // 13: google.protobuf.Value
	(*durationpb.Duration)(nil),                        // 14: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                      // 15: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                              // 16: google.protobuf.Empty
}
var file_testplatform_testplan_rel_proto_depIdxs = []int32{
	13, // 0: erda.openapiv1.testplatform.TestPlanCaseRelCreateResponse.data:type_name -> google.protobuf.Value
	13, // 1: erda.openapiv1.testplatform.TestPlanCaseRelExportRequest.testPlanCaseRelPagingRequest:type_name -> google.protobuf.Value
	13, // 2: erda.openapiv1.testplatform.TestPlanCaseRelGetResponse.data:type_name -> google.protobuf.Value
	14, // 3: erda.openapiv1.testplatform.TestPlanCaseRelPagingRequest.timestampSecUpdatedAtBegin:type_name -> google.protobuf.Duration
	14, // 4: erda.openapiv1.testplatform.TestPlanCaseRelPagingRequest.timestampSecUpdatedAtEnd:type_name -> google.protobuf.Duration
	15, // 5: erda.openapiv1.testplatform.TestPlanCaseRelPagingRequest.updatedAtBeginInclude:type_name -> google.protobuf.Timestamp
	15, // 6: erda.openapiv1.testplatform.TestPlanCaseRelPagingRequest.updatedAtEndInclude:type_name -> google.protobuf.Timestamp
	13, // 7: erda.openapiv1.testplatform.TestPlanCaseRelPagingRequest.testPlan:type_name -> google.protobuf.Value
	13, // 8: erda.openapiv1.testplatform.TestPlanCaseRelPagingResponse.data:type_name -> google.protobuf.Value
	7,  // 9: erda.openapiv1.testplatform.testplatform_testplan_rel.ADD_ISSUE_RELATION:input_type -> erda.openapiv1.testplatform.TestPlanCaseRelIssueRelationAddRequest
	0,  // 10: erda.openapiv1.testplatform.testplatform_testplan_rel.BATCH_UPDATE:input_type -> erda.openapiv1.testplatform.TestPlanCaseRelBatchUpdateRequest
	1,  // 11: erda.openapiv1.testplatform.testplatform_testplan_rel.CREATE:input_type -> erda.openapiv1.testplatform.TestPlanCaseRelCreateRequest
	3,  // 12: erda.openapiv1.testplatform.testplatform_testplan_rel.EXPORT:input_type -> erda.openapiv1.testplatform.TestPlanCaseRelExportRequest
	5,  // 13: erda.openapiv1.testplatform.testplatform_testplan_rel.GET:input_type -> erda.openapiv1.testplatform.TestPlanCaseRelGetRequest
	11, // 14: erda.openapiv1.testplatform.testplatform_testplan_rel.PAGING:input_type -> erda.openapiv1.testplatform.TestPlanCaseRelPagingRequest
	9,  // 15: erda.openapiv1.testplatform.testplatform_testplan_rel.REMOVE_ISSUE_RELATION:input_type -> erda.openapiv1.testplatform.TestPlanCaseRelIssueRelationRemoveRequest
	8,  // 16: erda.openapiv1.testplatform.testplatform_testplan_rel.ADD_ISSUE_RELATION:output_type -> erda.openapiv1.testplatform.TestPlanCaseRelIssueRelationAddResponse
	16, // 17: erda.openapiv1.testplatform.testplatform_testplan_rel.BATCH_UPDATE:output_type -> google.protobuf.Empty
	2,  // 18: erda.openapiv1.testplatform.testplatform_testplan_rel.CREATE:output_type -> erda.openapiv1.testplatform.TestPlanCaseRelCreateResponse
	4,  // 19: erda.openapiv1.testplatform.testplatform_testplan_rel.EXPORT:output_type -> erda.openapiv1.testplatform.TestPlanCaseRelExportResponse
	6,  // 20: erda.openapiv1.testplatform.testplatform_testplan_rel.GET:output_type -> erda.openapiv1.testplatform.TestPlanCaseRelGetResponse
	12, // 21: erda.openapiv1.testplatform.testplatform_testplan_rel.PAGING:output_type -> erda.openapiv1.testplatform.TestPlanCaseRelPagingResponse
	10, // 22: erda.openapiv1.testplatform.testplatform_testplan_rel.REMOVE_ISSUE_RELATION:output_type -> erda.openapiv1.testplatform.TestPlanCaseRelIssueRelationRemoveResponse
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_testplatform_testplan_rel_proto_init() }
func file_testplatform_testplan_rel_proto_init() {
	if File_testplatform_testplan_rel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testplatform_testplan_rel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelBatchUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_rel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_rel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_rel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_rel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_rel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_rel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_rel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelIssueRelationAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_rel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelIssueRelationAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_rel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelIssueRelationRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_rel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelIssueRelationRemoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_rel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelPagingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_rel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCaseRelPagingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_testplatform_testplan_rel_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_testplatform_testplan_rel_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_testplatform_testplan_rel_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_testplatform_testplan_rel_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_testplatform_testplan_rel_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testplatform_testplan_rel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_testplatform_testplan_rel_proto_goTypes,
		DependencyIndexes: file_testplatform_testplan_rel_proto_depIdxs,
		MessageInfos:      file_testplatform_testplan_rel_proto_msgTypes,
	}.Build()
	File_testplatform_testplan_rel_proto = out.File
	file_testplatform_testplan_rel_proto_rawDesc = nil
	file_testplatform_testplan_rel_proto_goTypes = nil
	file_testplatform_testplan_rel_proto_depIdxs = nil
}
