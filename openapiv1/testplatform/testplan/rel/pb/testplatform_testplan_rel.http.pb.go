// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: testplatform_testplan_rel.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// TestplatformTestplanRelHandler is the server API for TestplatformTestplanRel service.
type TestplatformTestplanRelHandler interface {
	// POST /api/testplans/{testPlanID}/testcase-relations/{relationID}/actions/add-issue-relations
	ADD_ISSUE_RELATION(context.Context, *TestPlanCaseRelIssueRelationAddRequest) (*TestPlanCaseRelIssueRelationAddResponse, error)
	// POST /api/testplans/{testPlanID}/testcase-relations/actions/batch-update
	BATCH_UPDATE(context.Context, *TestPlanCaseRelBatchUpdateRequest) (*emptypb.Empty, error)
	// POST /api/testplans/{testPlanID}/testcase-relations
	CREATE(context.Context, *TestPlanCaseRelCreateRequest) (*TestPlanCaseRelCreateResponse, error)
	// GET /api/testplans/{testPlanID}/actions/export
	EXPORT(context.Context, *TestPlanCaseRelExportRequest) (*TestPlanCaseRelExportResponse, error)
	// GET /api/testplans/{testPlanID}/testcase-relations/{relationID}
	GET(context.Context, *TestPlanCaseRelGetRequest) (*TestPlanCaseRelGetResponse, error)
	// GET /api/testplans/{testPlanID}/testcase-relations
	PAGING(context.Context, *TestPlanCaseRelPagingRequest) (*TestPlanCaseRelPagingResponse, error)
	// POST /api/testplans/{testPlanID}/testcase-relations/{relationID}/actions/remove-issue-relations
	REMOVE_ISSUE_RELATION(context.Context, *TestPlanCaseRelIssueRelationRemoveRequest) (*TestPlanCaseRelIssueRelationRemoveResponse, error)
}

// RegisterTestplatformTestplanRelHandler register TestplatformTestplanRelHandler to http.Router.
func RegisterTestplatformTestplanRelHandler(r http.Router, srv TestplatformTestplanRelHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_ADD_ISSUE_RELATION := func(method, path string, fn func(context.Context, *TestPlanCaseRelIssueRelationAddRequest) (*TestPlanCaseRelIssueRelationAddResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestPlanCaseRelIssueRelationAddRequest))
		}
		var ADD_ISSUE_RELATION_info transport.ServiceInfo
		if h.Interceptor != nil {
			ADD_ISSUE_RELATION_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan_rel", "ADD_ISSUE_RELATION", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ADD_ISSUE_RELATION_info)
				}
				r = r.WithContext(ctx)
				var in TestPlanCaseRelIssueRelationAddRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testPlanID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.TestPlanID = val
						case "relationID":
							in.RelationID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_BATCH_UPDATE := func(method, path string, fn func(context.Context, *TestPlanCaseRelBatchUpdateRequest) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestPlanCaseRelBatchUpdateRequest))
		}
		var BATCH_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			BATCH_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan_rel", "BATCH_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, BATCH_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in TestPlanCaseRelBatchUpdateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testPlanID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.TestPlanID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CREATE := func(method, path string, fn func(context.Context, *TestPlanCaseRelCreateRequest) (*TestPlanCaseRelCreateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestPlanCaseRelCreateRequest))
		}
		var CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			CREATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan_rel", "CREATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CREATE_info)
				}
				r = r.WithContext(ctx)
				var in TestPlanCaseRelCreateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testPlanID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.TestPlanID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_EXPORT := func(method, path string, fn func(context.Context, *TestPlanCaseRelExportRequest) (*TestPlanCaseRelExportResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestPlanCaseRelExportRequest))
		}
		var EXPORT_info transport.ServiceInfo
		if h.Interceptor != nil {
			EXPORT_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan_rel", "EXPORT", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, EXPORT_info)
				}
				r = r.WithContext(ctx)
				var in TestPlanCaseRelExportRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testPlanID":
							in.TestPlanID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GET := func(method, path string, fn func(context.Context, *TestPlanCaseRelGetRequest) (*TestPlanCaseRelGetResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestPlanCaseRelGetRequest))
		}
		var GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			GET_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan_rel", "GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GET_info)
				}
				r = r.WithContext(ctx)
				var in TestPlanCaseRelGetRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testPlanID":
							in.TestPlanID = val
						case "relationID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.RelationID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_PAGING := func(method, path string, fn func(context.Context, *TestPlanCaseRelPagingRequest) (*TestPlanCaseRelPagingResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestPlanCaseRelPagingRequest))
		}
		var PAGING_info transport.ServiceInfo
		if h.Interceptor != nil {
			PAGING_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan_rel", "PAGING", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, PAGING_info)
				}
				r = r.WithContext(ctx)
				var in TestPlanCaseRelPagingRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testPlanID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.TestPlanID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_REMOVE_ISSUE_RELATION := func(method, path string, fn func(context.Context, *TestPlanCaseRelIssueRelationRemoveRequest) (*TestPlanCaseRelIssueRelationRemoveResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestPlanCaseRelIssueRelationRemoveRequest))
		}
		var REMOVE_ISSUE_RELATION_info transport.ServiceInfo
		if h.Interceptor != nil {
			REMOVE_ISSUE_RELATION_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan_rel", "REMOVE_ISSUE_RELATION", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, REMOVE_ISSUE_RELATION_info)
				}
				r = r.WithContext(ctx)
				var in TestPlanCaseRelIssueRelationRemoveRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testPlanID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.TestPlanID = val
						case "relationID":
							in.RelationID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ADD_ISSUE_RELATION("POST", "/api/testplans/{testPlanID}/testcase-relations/{relationID}/actions/add-issue-relations", srv.ADD_ISSUE_RELATION)
	add_BATCH_UPDATE("POST", "/api/testplans/{testPlanID}/testcase-relations/actions/batch-update", srv.BATCH_UPDATE)
	add_CREATE("POST", "/api/testplans/{testPlanID}/testcase-relations", srv.CREATE)
	add_EXPORT("GET", "/api/testplans/{testPlanID}/actions/export", srv.EXPORT)
	add_GET("GET", "/api/testplans/{testPlanID}/testcase-relations/{relationID}", srv.GET)
	add_PAGING("GET", "/api/testplans/{testPlanID}/testcase-relations", srv.PAGING)
	add_REMOVE_ISSUE_RELATION("POST", "/api/testplans/{testPlanID}/testcase-relations/{relationID}/actions/remove-issue-relations", srv.REMOVE_ISSUE_RELATION)
}
