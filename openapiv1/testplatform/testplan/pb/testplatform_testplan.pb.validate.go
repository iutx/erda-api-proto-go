// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: testplatform_testplan.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AUTOTESTS_TESTPLAN_EXECUTE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AUTOTESTS_TESTPLAN_EXECUTE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AUTOTESTS_TESTPLAN_EXECUTE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AUTOTESTS_TESTPLAN_EXECUTE_RequestMultiError, or nil if none found.
func (m *AUTOTESTS_TESTPLAN_EXECUTE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AUTOTESTS_TESTPLAN_EXECUTE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestPlanID

	if len(errors) > 0 {
		return AUTOTESTS_TESTPLAN_EXECUTE_RequestMultiError(errors)
	}

	return nil
}

// AUTOTESTS_TESTPLAN_EXECUTE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// AUTOTESTS_TESTPLAN_EXECUTE_Request.ValidateAll() if the designated
// constraints aren't met.
type AUTOTESTS_TESTPLAN_EXECUTE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AUTOTESTS_TESTPLAN_EXECUTE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AUTOTESTS_TESTPLAN_EXECUTE_RequestMultiError) AllErrors() []error { return m }

// AUTOTESTS_TESTPLAN_EXECUTE_RequestValidationError is the validation error
// returned by AUTOTESTS_TESTPLAN_EXECUTE_Request.Validate if the designated
// constraints aren't met.
type AUTOTESTS_TESTPLAN_EXECUTE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AUTOTESTS_TESTPLAN_EXECUTE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AUTOTESTS_TESTPLAN_EXECUTE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AUTOTESTS_TESTPLAN_EXECUTE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AUTOTESTS_TESTPLAN_EXECUTE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AUTOTESTS_TESTPLAN_EXECUTE_RequestValidationError) ErrorName() string {
	return "AUTOTESTS_TESTPLAN_EXECUTE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AUTOTESTS_TESTPLAN_EXECUTE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAUTOTESTS_TESTPLAN_EXECUTE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AUTOTESTS_TESTPLAN_EXECUTE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AUTOTESTS_TESTPLAN_EXECUTE_RequestValidationError{}

// Validate checks the field values on AUTOTESTS_TESTPLAN_PAGING_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AUTOTESTS_TESTPLAN_PAGING_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AUTOTESTS_TESTPLAN_PAGING_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AUTOTESTS_TESTPLAN_PAGING_RequestMultiError, or nil if none found.
func (m *AUTOTESTS_TESTPLAN_PAGING_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AUTOTESTS_TESTPLAN_PAGING_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AUTOTESTS_TESTPLAN_PAGING_RequestMultiError(errors)
	}

	return nil
}

// AUTOTESTS_TESTPLAN_PAGING_RequestMultiError is an error wrapping multiple
// validation errors returned by
// AUTOTESTS_TESTPLAN_PAGING_Request.ValidateAll() if the designated
// constraints aren't met.
type AUTOTESTS_TESTPLAN_PAGING_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AUTOTESTS_TESTPLAN_PAGING_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AUTOTESTS_TESTPLAN_PAGING_RequestMultiError) AllErrors() []error { return m }

// AUTOTESTS_TESTPLAN_PAGING_RequestValidationError is the validation error
// returned by AUTOTESTS_TESTPLAN_PAGING_Request.Validate if the designated
// constraints aren't met.
type AUTOTESTS_TESTPLAN_PAGING_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AUTOTESTS_TESTPLAN_PAGING_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AUTOTESTS_TESTPLAN_PAGING_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AUTOTESTS_TESTPLAN_PAGING_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AUTOTESTS_TESTPLAN_PAGING_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AUTOTESTS_TESTPLAN_PAGING_RequestValidationError) ErrorName() string {
	return "AUTOTESTS_TESTPLAN_PAGING_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AUTOTESTS_TESTPLAN_PAGING_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAUTOTESTS_TESTPLAN_PAGING_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AUTOTESTS_TESTPLAN_PAGING_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AUTOTESTS_TESTPLAN_PAGING_RequestValidationError{}

// Validate checks the field values on CANCEL_APITEST_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CANCEL_APITEST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CANCEL_APITEST_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CANCEL_APITEST_RequestMultiError, or nil if none found.
func (m *CANCEL_APITEST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CANCEL_APITEST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestPlanID

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return CANCEL_APITEST_RequestMultiError(errors)
	}

	return nil
}

// CANCEL_APITEST_RequestMultiError is an error wrapping multiple validation
// errors returned by CANCEL_APITEST_Request.ValidateAll() if the designated
// constraints aren't met.
type CANCEL_APITEST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CANCEL_APITEST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CANCEL_APITEST_RequestMultiError) AllErrors() []error { return m }

// CANCEL_APITEST_RequestValidationError is the validation error returned by
// CANCEL_APITEST_Request.Validate if the designated constraints aren't met.
type CANCEL_APITEST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CANCEL_APITEST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CANCEL_APITEST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CANCEL_APITEST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CANCEL_APITEST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CANCEL_APITEST_RequestValidationError) ErrorName() string {
	return "CANCEL_APITEST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CANCEL_APITEST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCANCEL_APITEST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CANCEL_APITEST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CANCEL_APITEST_RequestValidationError{}

// Validate checks the field values on DELETE_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DELETE_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DELETE_RequestMultiError,
// or nil if none found.
func (m *DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DELETE_RequestMultiError(errors)
	}

	return nil
}

// DELETE_RequestMultiError is an error wrapping multiple validation errors
// returned by DELETE_Request.ValidateAll() if the designated constraints
// aren't met.
type DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DELETE_RequestMultiError) AllErrors() []error { return m }

// DELETE_RequestValidationError is the validation error returned by
// DELETE_Request.Validate if the designated constraints aren't met.
type DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DELETE_RequestValidationError) ErrorName() string { return "DELETE_RequestValidationError" }

// Error satisfies the builtin error interface
func (e DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DELETE_RequestValidationError{}

// Validate checks the field values on EXECUTE_APITEST_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EXECUTE_APITEST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EXECUTE_APITEST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EXECUTE_APITEST_RequestMultiError, or nil if none found.
func (m *EXECUTE_APITEST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *EXECUTE_APITEST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestPlanID

	if len(errors) > 0 {
		return EXECUTE_APITEST_RequestMultiError(errors)
	}

	return nil
}

// EXECUTE_APITEST_RequestMultiError is an error wrapping multiple validation
// errors returned by EXECUTE_APITEST_Request.ValidateAll() if the designated
// constraints aren't met.
type EXECUTE_APITEST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EXECUTE_APITEST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EXECUTE_APITEST_RequestMultiError) AllErrors() []error { return m }

// EXECUTE_APITEST_RequestValidationError is the validation error returned by
// EXECUTE_APITEST_Request.Validate if the designated constraints aren't met.
type EXECUTE_APITEST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EXECUTE_APITEST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EXECUTE_APITEST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EXECUTE_APITEST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EXECUTE_APITEST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EXECUTE_APITEST_RequestValidationError) ErrorName() string {
	return "EXECUTE_APITEST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e EXECUTE_APITEST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEXECUTE_APITEST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EXECUTE_APITEST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EXECUTE_APITEST_RequestValidationError{}

// Validate checks the field values on GENERATE_REPORT_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GENERATE_REPORT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GENERATE_REPORT_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GENERATE_REPORT_RequestMultiError, or nil if none found.
func (m *GENERATE_REPORT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GENERATE_REPORT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestPlanID

	if len(errors) > 0 {
		return GENERATE_REPORT_RequestMultiError(errors)
	}

	return nil
}

// GENERATE_REPORT_RequestMultiError is an error wrapping multiple validation
// errors returned by GENERATE_REPORT_Request.ValidateAll() if the designated
// constraints aren't met.
type GENERATE_REPORT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GENERATE_REPORT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GENERATE_REPORT_RequestMultiError) AllErrors() []error { return m }

// GENERATE_REPORT_RequestValidationError is the validation error returned by
// GENERATE_REPORT_Request.Validate if the designated constraints aren't met.
type GENERATE_REPORT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GENERATE_REPORT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GENERATE_REPORT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GENERATE_REPORT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GENERATE_REPORT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GENERATE_REPORT_RequestValidationError) ErrorName() string {
	return "GENERATE_REPORT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GENERATE_REPORT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGENERATE_REPORT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GENERATE_REPORT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GENERATE_REPORT_RequestValidationError{}

// Validate checks the field values on GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GET_RequestMultiError, or
// nil if none found.
func (m *GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GET_RequestMultiError(errors)
	}

	return nil
}

// GET_RequestMultiError is an error wrapping multiple validation errors
// returned by GET_Request.ValidateAll() if the designated constraints aren't met.
type GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GET_RequestMultiError) AllErrors() []error { return m }

// GET_RequestValidationError is the validation error returned by
// GET_Request.Validate if the designated constraints aren't met.
type GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GET_RequestValidationError) ErrorName() string { return "GET_RequestValidationError" }

// Error satisfies the builtin error interface
func (e GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GET_RequestValidationError{}

// Validate checks the field values on TestPlan with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestPlan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlan with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TestPlanMultiError, or nil
// if none found.
func (m *TestPlan) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for OwnerID

	// no validation rules for Status

	// no validation rules for ProjectID

	// no validation rules for CreatorID

	// no validation rules for UpdaterID

	// no validation rules for Summary

	if all {
		switch v := interface{}(m.GetRelsCount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestPlanValidationError{
					field:  "RelsCount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestPlanValidationError{
					field:  "RelsCount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelsCount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestPlanValidationError{
				field:  "RelsCount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Inode

	// no validation rules for IsArchived

	// no validation rules for IterationID

	// no validation rules for IterationName

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StartedAt != nil {

		if all {
			switch v := interface{}(m.GetStartedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanValidationError{
						field:  "StartedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanValidationError{
						field:  "StartedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndedAt != nil {

		if all {
			switch v := interface{}(m.GetEndedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanValidationError{
						field:  "EndedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanValidationError{
						field:  "EndedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanValidationError{
					field:  "EndedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TestPlanMultiError(errors)
	}

	return nil
}

// TestPlanMultiError is an error wrapping multiple validation errors returned
// by TestPlan.ValidateAll() if the designated constraints aren't met.
type TestPlanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanMultiError) AllErrors() []error { return m }

// TestPlanValidationError is the validation error returned by
// TestPlan.Validate if the designated constraints aren't met.
type TestPlanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanValidationError) ErrorName() string { return "TestPlanValidationError" }

// Error satisfies the builtin error interface
func (e TestPlanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanValidationError{}

// Validate checks the field values on TestPlanCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanCreateRequestMultiError, or nil if none found.
func (m *TestPlanCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for OwnerID

	// no validation rules for ProjectID

	// no validation rules for IterationID

	// no validation rules for IsAutoTest

	if len(errors) > 0 {
		return TestPlanCreateRequestMultiError(errors)
	}

	return nil
}

// TestPlanCreateRequestMultiError is an error wrapping multiple validation
// errors returned by TestPlanCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type TestPlanCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCreateRequestMultiError) AllErrors() []error { return m }

// TestPlanCreateRequestValidationError is the validation error returned by
// TestPlanCreateRequest.Validate if the designated constraints aren't met.
type TestPlanCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCreateRequestValidationError) ErrorName() string {
	return "TestPlanCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCreateRequestValidationError{}

// Validate checks the field values on TestPlanCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanCreateResponseMultiError, or nil if none found.
func (m *TestPlanCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return TestPlanCreateResponseMultiError(errors)
	}

	return nil
}

// TestPlanCreateResponseMultiError is an error wrapping multiple validation
// errors returned by TestPlanCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type TestPlanCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanCreateResponseMultiError) AllErrors() []error { return m }

// TestPlanCreateResponseValidationError is the validation error returned by
// TestPlanCreateResponse.Validate if the designated constraints aren't met.
type TestPlanCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanCreateResponseValidationError) ErrorName() string {
	return "TestPlanCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanCreateResponseValidationError{}

// Validate checks the field values on TestPlanGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanGetResponseMultiError, or nil if none found.
func (m *TestPlanGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestPlanGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestPlanGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestPlanGetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TestPlanGetResponseMultiError(errors)
	}

	return nil
}

// TestPlanGetResponseMultiError is an error wrapping multiple validation
// errors returned by TestPlanGetResponse.ValidateAll() if the designated
// constraints aren't met.
type TestPlanGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanGetResponseMultiError) AllErrors() []error { return m }

// TestPlanGetResponseValidationError is the validation error returned by
// TestPlanGetResponse.Validate if the designated constraints aren't met.
type TestPlanGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanGetResponseValidationError) ErrorName() string {
	return "TestPlanGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanGetResponseValidationError{}

// Validate checks the field values on TestPlanPagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanPagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanPagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanPagingRequestMultiError, or nil if none found.
func (m *TestPlanPagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanPagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ProjectID

	// no validation rules for Type

	// no validation rules for PageNo

	// no validation rules for PageSize

	if m.IsArchived != nil {
		// no validation rules for IsArchived
	}

	if len(errors) > 0 {
		return TestPlanPagingRequestMultiError(errors)
	}

	return nil
}

// TestPlanPagingRequestMultiError is an error wrapping multiple validation
// errors returned by TestPlanPagingRequest.ValidateAll() if the designated
// constraints aren't met.
type TestPlanPagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanPagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanPagingRequestMultiError) AllErrors() []error { return m }

// TestPlanPagingRequestValidationError is the validation error returned by
// TestPlanPagingRequest.Validate if the designated constraints aren't met.
type TestPlanPagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanPagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanPagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanPagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanPagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanPagingRequestValidationError) ErrorName() string {
	return "TestPlanPagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanPagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanPagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanPagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanPagingRequestValidationError{}

// Validate checks the field values on TestPlanPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanPagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanPagingResponseMultiError, or nil if none found.
func (m *TestPlanPagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanPagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestPlanPagingResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestPlanPagingResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestPlanPagingResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TestPlanPagingResponseMultiError(errors)
	}

	return nil
}

// TestPlanPagingResponseMultiError is an error wrapping multiple validation
// errors returned by TestPlanPagingResponse.ValidateAll() if the designated
// constraints aren't met.
type TestPlanPagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanPagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanPagingResponseMultiError) AllErrors() []error { return m }

// TestPlanPagingResponseValidationError is the validation error returned by
// TestPlanPagingResponse.Validate if the designated constraints aren't met.
type TestPlanPagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanPagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanPagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanPagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanPagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanPagingResponseValidationError) ErrorName() string {
	return "TestPlanPagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanPagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanPagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanPagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanPagingResponseValidationError{}

// Validate checks the field values on TestPlanPagingResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanPagingResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanPagingResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanPagingResponseDataMultiError, or nil if none found.
func (m *TestPlanPagingResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanPagingResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanPagingResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanPagingResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanPagingResponseDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TestPlanPagingResponseDataMultiError(errors)
	}

	return nil
}

// TestPlanPagingResponseDataMultiError is an error wrapping multiple
// validation errors returned by TestPlanPagingResponseData.ValidateAll() if
// the designated constraints aren't met.
type TestPlanPagingResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanPagingResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanPagingResponseDataMultiError) AllErrors() []error { return m }

// TestPlanPagingResponseDataValidationError is the validation error returned
// by TestPlanPagingResponseData.Validate if the designated constraints aren't met.
type TestPlanPagingResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanPagingResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanPagingResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanPagingResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanPagingResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanPagingResponseDataValidationError) ErrorName() string {
	return "TestPlanPagingResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanPagingResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanPagingResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanPagingResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanPagingResponseDataValidationError{}

// Validate checks the field values on TestPlanRelsCount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TestPlanRelsCount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanRelsCount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanRelsCountMultiError, or nil if none found.
func (m *TestPlanRelsCount) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanRelsCount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Init

	// no validation rules for Succ

	// no validation rules for Fail

	// no validation rules for Block

	if len(errors) > 0 {
		return TestPlanRelsCountMultiError(errors)
	}

	return nil
}

// TestPlanRelsCountMultiError is an error wrapping multiple validation errors
// returned by TestPlanRelsCount.ValidateAll() if the designated constraints
// aren't met.
type TestPlanRelsCountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanRelsCountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanRelsCountMultiError) AllErrors() []error { return m }

// TestPlanRelsCountValidationError is the validation error returned by
// TestPlanRelsCount.Validate if the designated constraints aren't met.
type TestPlanRelsCountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanRelsCountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanRelsCountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanRelsCountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanRelsCountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanRelsCountValidationError) ErrorName() string {
	return "TestPlanRelsCountValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanRelsCountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanRelsCount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanRelsCountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanRelsCountValidationError{}

// Validate checks the field values on TestPlanReportGenerateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanReportGenerateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanReportGenerateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TestPlanReportGenerateResponseMultiError, or nil if none found.
func (m *TestPlanReportGenerateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanReportGenerateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanReportGenerateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanReportGenerateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanReportGenerateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TestPlanReportGenerateResponseMultiError(errors)
	}

	return nil
}

// TestPlanReportGenerateResponseMultiError is an error wrapping multiple
// validation errors returned by TestPlanReportGenerateResponse.ValidateAll()
// if the designated constraints aren't met.
type TestPlanReportGenerateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanReportGenerateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanReportGenerateResponseMultiError) AllErrors() []error { return m }

// TestPlanReportGenerateResponseValidationError is the validation error
// returned by TestPlanReportGenerateResponse.Validate if the designated
// constraints aren't met.
type TestPlanReportGenerateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanReportGenerateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanReportGenerateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanReportGenerateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanReportGenerateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanReportGenerateResponseValidationError) ErrorName() string {
	return "TestPlanReportGenerateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanReportGenerateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanReportGenerateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanReportGenerateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanReportGenerateResponseValidationError{}

// Validate checks the field values on TestPlanTestSetListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanTestSetListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanTestSetListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanTestSetListResponseMultiError, or nil if none found.
func (m *TestPlanTestSetListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanTestSetListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanTestSetListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanTestSetListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanTestSetListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TestPlanTestSetListResponseMultiError(errors)
	}

	return nil
}

// TestPlanTestSetListResponseMultiError is an error wrapping multiple
// validation errors returned by TestPlanTestSetListResponse.ValidateAll() if
// the designated constraints aren't met.
type TestPlanTestSetListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanTestSetListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanTestSetListResponseMultiError) AllErrors() []error { return m }

// TestPlanTestSetListResponseValidationError is the validation error returned
// by TestPlanTestSetListResponse.Validate if the designated constraints
// aren't met.
type TestPlanTestSetListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanTestSetListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanTestSetListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanTestSetListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanTestSetListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanTestSetListResponseValidationError) ErrorName() string {
	return "TestPlanTestSetListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanTestSetListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanTestSetListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanTestSetListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanTestSetListResponseValidationError{}

// Validate checks the field values on TestPlanTestSetsListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanTestSetsListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanTestSetsListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanTestSetsListRequestMultiError, or nil if none found.
func (m *TestPlanTestSetsListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanTestSetsListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestPlanID

	// no validation rules for ParentTestSetID

	if len(errors) > 0 {
		return TestPlanTestSetsListRequestMultiError(errors)
	}

	return nil
}

// TestPlanTestSetsListRequestMultiError is an error wrapping multiple
// validation errors returned by TestPlanTestSetsListRequest.ValidateAll() if
// the designated constraints aren't met.
type TestPlanTestSetsListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanTestSetsListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanTestSetsListRequestMultiError) AllErrors() []error { return m }

// TestPlanTestSetsListRequestValidationError is the validation error returned
// by TestPlanTestSetsListRequest.Validate if the designated constraints
// aren't met.
type TestPlanTestSetsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanTestSetsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanTestSetsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanTestSetsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanTestSetsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanTestSetsListRequestValidationError) ErrorName() string {
	return "TestPlanTestSetsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanTestSetsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanTestSetsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanTestSetsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanTestSetsListRequestValidationError{}

// Validate checks the field values on TestPlanUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestPlanUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestPlanUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestPlanUpdateRequestMultiError, or nil if none found.
func (m *TestPlanUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestPlanUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for OwnerID

	// no validation rules for Status

	// no validation rules for Summary

	// no validation rules for TestPlanID

	// no validation rules for IterationID

	if m.TimestampSecStartedAt != nil {

		if all {
			switch v := interface{}(m.GetTimestampSecStartedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanUpdateRequestValidationError{
						field:  "TimestampSecStartedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanUpdateRequestValidationError{
						field:  "TimestampSecStartedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimestampSecStartedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanUpdateRequestValidationError{
					field:  "TimestampSecStartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TimestampSecEndedAt != nil {

		if all {
			switch v := interface{}(m.GetTimestampSecEndedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestPlanUpdateRequestValidationError{
						field:  "TimestampSecEndedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestPlanUpdateRequestValidationError{
						field:  "TimestampSecEndedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimestampSecEndedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestPlanUpdateRequestValidationError{
					field:  "TimestampSecEndedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.IsArchived != nil {
		// no validation rules for IsArchived
	}

	if len(errors) > 0 {
		return TestPlanUpdateRequestMultiError(errors)
	}

	return nil
}

// TestPlanUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by TestPlanUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type TestPlanUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestPlanUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestPlanUpdateRequestMultiError) AllErrors() []error { return m }

// TestPlanUpdateRequestValidationError is the validation error returned by
// TestPlanUpdateRequest.Validate if the designated constraints aren't met.
type TestPlanUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestPlanUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestPlanUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestPlanUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestPlanUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestPlanUpdateRequestValidationError) ErrorName() string {
	return "TestPlanUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestPlanUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestPlanUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestPlanUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestPlanUpdateRequestValidationError{}

// Validate checks the field values on TestSet with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSet with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TestSetMultiError, or nil if none found.
func (m *TestSet) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for ProjectID

	// no validation rules for ParentID

	// no validation rules for Recycled

	// no validation rules for Directory

	// no validation rules for Order

	// no validation rules for CreatorID

	// no validation rules for UpdaterID

	if len(errors) > 0 {
		return TestSetMultiError(errors)
	}

	return nil
}

// TestSetMultiError is an error wrapping multiple validation errors returned
// by TestSet.ValidateAll() if the designated constraints aren't met.
type TestSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetMultiError) AllErrors() []error { return m }

// TestSetValidationError is the validation error returned by TestSet.Validate
// if the designated constraints aren't met.
type TestSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetValidationError) ErrorName() string { return "TestSetValidationError" }

// Error satisfies the builtin error interface
func (e TestSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetValidationError{}
