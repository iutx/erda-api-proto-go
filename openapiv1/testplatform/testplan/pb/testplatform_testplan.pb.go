// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: testplatform_testplan.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AUTOTESTS_TESTPLAN_EXECUTE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestPlanID string `protobuf:"bytes,1,opt,name=testPlanID,proto3" json:"testPlanID,omitempty"` // generated from path variable: testPlanID. You should change the proto type if necessary.
}

func (x *AUTOTESTS_TESTPLAN_EXECUTE_Request) Reset() {
	*x = AUTOTESTS_TESTPLAN_EXECUTE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AUTOTESTS_TESTPLAN_EXECUTE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AUTOTESTS_TESTPLAN_EXECUTE_Request) ProtoMessage() {}

func (x *AUTOTESTS_TESTPLAN_EXECUTE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AUTOTESTS_TESTPLAN_EXECUTE_Request.ProtoReflect.Descriptor instead.
func (*AUTOTESTS_TESTPLAN_EXECUTE_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{0}
}

func (x *AUTOTESTS_TESTPLAN_EXECUTE_Request) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

type AUTOTESTS_TESTPLAN_PAGING_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AUTOTESTS_TESTPLAN_PAGING_Request) Reset() {
	*x = AUTOTESTS_TESTPLAN_PAGING_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AUTOTESTS_TESTPLAN_PAGING_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AUTOTESTS_TESTPLAN_PAGING_Request) ProtoMessage() {}

func (x *AUTOTESTS_TESTPLAN_PAGING_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AUTOTESTS_TESTPLAN_PAGING_Request.ProtoReflect.Descriptor instead.
func (*AUTOTESTS_TESTPLAN_PAGING_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{1}
}

type CANCEL_APITEST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestPlanID string `protobuf:"bytes,1,opt,name=testPlanID,proto3" json:"testPlanID,omitempty"` // generated from path variable: testPlanID. You should change the proto type if necessary.
	PipelineID string `protobuf:"bytes,2,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"` // generated from path variable: pipelineID. You should change the proto type if necessary.
}

func (x *CANCEL_APITEST_Request) Reset() {
	*x = CANCEL_APITEST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CANCEL_APITEST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CANCEL_APITEST_Request) ProtoMessage() {}

func (x *CANCEL_APITEST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CANCEL_APITEST_Request.ProtoReflect.Descriptor instead.
func (*CANCEL_APITEST_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{2}
}

func (x *CANCEL_APITEST_Request) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

func (x *CANCEL_APITEST_Request) GetPipelineID() string {
	if x != nil {
		return x.PipelineID
	}
	return ""
}

type DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *DELETE_Request) Reset() {
	*x = DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DELETE_Request) ProtoMessage() {}

func (x *DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DELETE_Request.ProtoReflect.Descriptor instead.
func (*DELETE_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{3}
}

func (x *DELETE_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EXECUTE_APITEST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestPlanID string `protobuf:"bytes,1,opt,name=testPlanID,proto3" json:"testPlanID,omitempty"` // generated from path variable: testPlanID. You should change the proto type if necessary.
}

func (x *EXECUTE_APITEST_Request) Reset() {
	*x = EXECUTE_APITEST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EXECUTE_APITEST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EXECUTE_APITEST_Request) ProtoMessage() {}

func (x *EXECUTE_APITEST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EXECUTE_APITEST_Request.ProtoReflect.Descriptor instead.
func (*EXECUTE_APITEST_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{4}
}

func (x *EXECUTE_APITEST_Request) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

type GENERATE_REPORT_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestPlanID string `protobuf:"bytes,1,opt,name=testPlanID,proto3" json:"testPlanID,omitempty"` // generated from path variable: testPlanID. You should change the proto type if necessary.
}

func (x *GENERATE_REPORT_Request) Reset() {
	*x = GENERATE_REPORT_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GENERATE_REPORT_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GENERATE_REPORT_Request) ProtoMessage() {}

func (x *GENERATE_REPORT_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GENERATE_REPORT_Request.ProtoReflect.Descriptor instead.
func (*GENERATE_REPORT_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{5}
}

func (x *GENERATE_REPORT_Request) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

type GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *GET_Request) Reset() {
	*x = GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GET_Request) ProtoMessage() {}

func (x *GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GET_Request.ProtoReflect.Descriptor instead.
func (*GET_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{6}
}

func (x *GET_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TestPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OwnerID       string                 `protobuf:"bytes,3,opt,name=ownerID,proto3" json:"ownerID,omitempty"`
	PartnerIDs    []string               `protobuf:"bytes,4,rep,name=partnerIDs,proto3" json:"partnerIDs,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	ProjectID     uint64                 `protobuf:"varint,6,opt,name=projectID,proto3" json:"projectID,omitempty"`
	CreatorID     string                 `protobuf:"bytes,7,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	UpdaterID     string                 `protobuf:"bytes,8,opt,name=updaterID,proto3" json:"updaterID,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3,oneof" json:"createdAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updatedAt,proto3,oneof" json:"updatedAt,omitempty"`
	Summary       string                 `protobuf:"bytes,11,opt,name=summary,proto3" json:"summary,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=startedAt,proto3,oneof" json:"startedAt,omitempty"`
	EndedAt       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=endedAt,proto3,oneof" json:"endedAt,omitempty"`
	RelsCount     *structpb.Value        `protobuf:"bytes,14,opt,name=relsCount,proto3" json:"relsCount,omitempty"`
	Type          string                 `protobuf:"bytes,15,opt,name=type,proto3" json:"type,omitempty"`
	Inode         string                 `protobuf:"bytes,16,opt,name=inode,proto3" json:"inode,omitempty"`
	IsArchived    bool                   `protobuf:"varint,17,opt,name=isArchived,proto3" json:"isArchived,omitempty"`
	IterationID   uint64                 `protobuf:"varint,18,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	IterationName string                 `protobuf:"bytes,19,opt,name=iterationName,proto3" json:"iterationName,omitempty"`
}

func (x *TestPlan) Reset() {
	*x = TestPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlan) ProtoMessage() {}

func (x *TestPlan) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlan.ProtoReflect.Descriptor instead.
func (*TestPlan) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{7}
}

func (x *TestPlan) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TestPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestPlan) GetOwnerID() string {
	if x != nil {
		return x.OwnerID
	}
	return ""
}

func (x *TestPlan) GetPartnerIDs() []string {
	if x != nil {
		return x.PartnerIDs
	}
	return nil
}

func (x *TestPlan) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestPlan) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *TestPlan) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *TestPlan) GetUpdaterID() string {
	if x != nil {
		return x.UpdaterID
	}
	return ""
}

func (x *TestPlan) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TestPlan) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TestPlan) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *TestPlan) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *TestPlan) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *TestPlan) GetRelsCount() *structpb.Value {
	if x != nil {
		return x.RelsCount
	}
	return nil
}

func (x *TestPlan) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TestPlan) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *TestPlan) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *TestPlan) GetIterationID() uint64 {
	if x != nil {
		return x.IterationID
	}
	return 0
}

func (x *TestPlan) GetIterationName() string {
	if x != nil {
		return x.IterationName
	}
	return ""
}

type TestPlanCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OwnerID     string   `protobuf:"bytes,2,opt,name=ownerID,proto3" json:"ownerID,omitempty"`
	PartnerIDs  []string `protobuf:"bytes,3,rep,name=partnerIDs,proto3" json:"partnerIDs,omitempty"`
	ProjectID   uint64   `protobuf:"varint,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IterationID uint64   `protobuf:"varint,5,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	IsAutoTest  bool     `protobuf:"varint,6,opt,name=isAutoTest,proto3" json:"isAutoTest,omitempty"`
}

func (x *TestPlanCreateRequest) Reset() {
	*x = TestPlanCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCreateRequest) ProtoMessage() {}

func (x *TestPlanCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCreateRequest.ProtoReflect.Descriptor instead.
func (*TestPlanCreateRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{8}
}

func (x *TestPlanCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestPlanCreateRequest) GetOwnerID() string {
	if x != nil {
		return x.OwnerID
	}
	return ""
}

func (x *TestPlanCreateRequest) GetPartnerIDs() []string {
	if x != nil {
		return x.PartnerIDs
	}
	return nil
}

func (x *TestPlanCreateRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *TestPlanCreateRequest) GetIterationID() uint64 {
	if x != nil {
		return x.IterationID
	}
	return 0
}

func (x *TestPlanCreateRequest) GetIsAutoTest() bool {
	if x != nil {
		return x.IsAutoTest
	}
	return false
}

type TestPlanCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TestPlanCreateResponse) Reset() {
	*x = TestPlanCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanCreateResponse) ProtoMessage() {}

func (x *TestPlanCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanCreateResponse.ProtoReflect.Descriptor instead.
func (*TestPlanCreateResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{9}
}

func (x *TestPlanCreateResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type TestPlanGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TestPlanGetResponse) Reset() {
	*x = TestPlanGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanGetResponse) ProtoMessage() {}

func (x *TestPlanGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanGetResponse.ProtoReflect.Descriptor instead.
func (*TestPlanGetResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{10}
}

func (x *TestPlanGetResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestPlanPagingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Statuses     []string `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
	ProjectID    uint64   `protobuf:"varint,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IterationIDs []uint64 `protobuf:"varint,4,rep,packed,name=iterationIDs,proto3" json:"iterationIDs,omitempty"`
	Type         string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	IsArchived   *bool    `protobuf:"varint,6,opt,name=isArchived,proto3,oneof" json:"isArchived,omitempty"`
	OwnerIDs     []string `protobuf:"bytes,7,rep,name=ownerIDs,proto3" json:"ownerIDs,omitempty"`
	PartnerIDs   []string `protobuf:"bytes,8,rep,name=partnerIDs,proto3" json:"partnerIDs,omitempty"`
	UserIDs      []string `protobuf:"bytes,9,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
	PageNo       uint64   `protobuf:"varint,10,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize     uint64   `protobuf:"varint,11,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *TestPlanPagingRequest) Reset() {
	*x = TestPlanPagingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanPagingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanPagingRequest) ProtoMessage() {}

func (x *TestPlanPagingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanPagingRequest.ProtoReflect.Descriptor instead.
func (*TestPlanPagingRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{11}
}

func (x *TestPlanPagingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestPlanPagingRequest) GetStatuses() []string {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *TestPlanPagingRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *TestPlanPagingRequest) GetIterationIDs() []uint64 {
	if x != nil {
		return x.IterationIDs
	}
	return nil
}

func (x *TestPlanPagingRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TestPlanPagingRequest) GetIsArchived() bool {
	if x != nil && x.IsArchived != nil {
		return *x.IsArchived
	}
	return false
}

func (x *TestPlanPagingRequest) GetOwnerIDs() []string {
	if x != nil {
		return x.OwnerIDs
	}
	return nil
}

func (x *TestPlanPagingRequest) GetPartnerIDs() []string {
	if x != nil {
		return x.PartnerIDs
	}
	return nil
}

func (x *TestPlanPagingRequest) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *TestPlanPagingRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *TestPlanPagingRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TestPlanPagingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TestPlanPagingResponse) Reset() {
	*x = TestPlanPagingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanPagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanPagingResponse) ProtoMessage() {}

func (x *TestPlanPagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanPagingResponse.ProtoReflect.Descriptor instead.
func (*TestPlanPagingResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{12}
}

func (x *TestPlanPagingResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestPlanPagingResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List    []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	UserIDs []string          `protobuf:"bytes,3,rep,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *TestPlanPagingResponseData) Reset() {
	*x = TestPlanPagingResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanPagingResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanPagingResponseData) ProtoMessage() {}

func (x *TestPlanPagingResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanPagingResponseData.ProtoReflect.Descriptor instead.
func (*TestPlanPagingResponseData) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{13}
}

func (x *TestPlanPagingResponseData) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TestPlanPagingResponseData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TestPlanPagingResponseData) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type TestPlanRelsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Init  uint64 `protobuf:"varint,2,opt,name=init,proto3" json:"init,omitempty"`
	Succ  uint64 `protobuf:"varint,3,opt,name=succ,proto3" json:"succ,omitempty"`
	Fail  uint64 `protobuf:"varint,4,opt,name=fail,proto3" json:"fail,omitempty"`
	Block uint64 `protobuf:"varint,5,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *TestPlanRelsCount) Reset() {
	*x = TestPlanRelsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanRelsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanRelsCount) ProtoMessage() {}

func (x *TestPlanRelsCount) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanRelsCount.ProtoReflect.Descriptor instead.
func (*TestPlanRelsCount) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{14}
}

func (x *TestPlanRelsCount) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TestPlanRelsCount) GetInit() uint64 {
	if x != nil {
		return x.Init
	}
	return 0
}

func (x *TestPlanRelsCount) GetSucc() uint64 {
	if x != nil {
		return x.Succ
	}
	return 0
}

func (x *TestPlanRelsCount) GetFail() uint64 {
	if x != nil {
		return x.Fail
	}
	return 0
}

func (x *TestPlanRelsCount) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

type TestPlanReportGenerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *TestPlanReportGenerateResponse) Reset() {
	*x = TestPlanReportGenerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanReportGenerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanReportGenerateResponse) ProtoMessage() {}

func (x *TestPlanReportGenerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanReportGenerateResponse.ProtoReflect.Descriptor instead.
func (*TestPlanReportGenerateResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{15}
}

func (x *TestPlanReportGenerateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestPlanTestSetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TestPlanTestSetListResponse) Reset() {
	*x = TestPlanTestSetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanTestSetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanTestSetListResponse) ProtoMessage() {}

func (x *TestPlanTestSetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanTestSetListResponse.ProtoReflect.Descriptor instead.
func (*TestPlanTestSetListResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{16}
}

func (x *TestPlanTestSetListResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestPlanTestSetsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestPlanID      uint64 `protobuf:"varint,1,opt,name=testPlanID,proto3" json:"testPlanID,omitempty"`
	ParentTestSetID uint64 `protobuf:"varint,2,opt,name=parentTestSetID,proto3" json:"parentTestSetID,omitempty"`
}

func (x *TestPlanTestSetsListRequest) Reset() {
	*x = TestPlanTestSetsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanTestSetsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanTestSetsListRequest) ProtoMessage() {}

func (x *TestPlanTestSetsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanTestSetsListRequest.ProtoReflect.Descriptor instead.
func (*TestPlanTestSetsListRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{17}
}

func (x *TestPlanTestSetsListRequest) GetTestPlanID() uint64 {
	if x != nil {
		return x.TestPlanID
	}
	return 0
}

func (x *TestPlanTestSetsListRequest) GetParentTestSetID() uint64 {
	if x != nil {
		return x.ParentTestSetID
	}
	return 0
}

type TestPlanUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OwnerID               string               `protobuf:"bytes,2,opt,name=ownerID,proto3" json:"ownerID,omitempty"`
	PartnerIDs            []string             `protobuf:"bytes,3,rep,name=partnerIDs,proto3" json:"partnerIDs,omitempty"`
	Status                string               `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Summary               string               `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	TimestampSecStartedAt *durationpb.Duration `protobuf:"bytes,6,opt,name=timestampSecStartedAt,proto3,oneof" json:"timestampSecStartedAt,omitempty"`
	TimestampSecEndedAt   *durationpb.Duration `protobuf:"bytes,7,opt,name=timestampSecEndedAt,proto3,oneof" json:"timestampSecEndedAt,omitempty"`
	TestPlanID            uint64               `protobuf:"varint,8,opt,name=testPlanID,json=-,proto3" json:"testPlanID,omitempty"`
	IsArchived            *bool                `protobuf:"varint,9,opt,name=isArchived,proto3,oneof" json:"isArchived,omitempty"`
	IterationID           uint64               `protobuf:"varint,10,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
}

func (x *TestPlanUpdateRequest) Reset() {
	*x = TestPlanUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanUpdateRequest) ProtoMessage() {}

func (x *TestPlanUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanUpdateRequest.ProtoReflect.Descriptor instead.
func (*TestPlanUpdateRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{18}
}

func (x *TestPlanUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestPlanUpdateRequest) GetOwnerID() string {
	if x != nil {
		return x.OwnerID
	}
	return ""
}

func (x *TestPlanUpdateRequest) GetPartnerIDs() []string {
	if x != nil {
		return x.PartnerIDs
	}
	return nil
}

func (x *TestPlanUpdateRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestPlanUpdateRequest) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *TestPlanUpdateRequest) GetTimestampSecStartedAt() *durationpb.Duration {
	if x != nil {
		return x.TimestampSecStartedAt
	}
	return nil
}

func (x *TestPlanUpdateRequest) GetTimestampSecEndedAt() *durationpb.Duration {
	if x != nil {
		return x.TimestampSecEndedAt
	}
	return nil
}

func (x *TestPlanUpdateRequest) GetTestPlanID() uint64 {
	if x != nil {
		return x.TestPlanID
	}
	return 0
}

func (x *TestPlanUpdateRequest) GetIsArchived() bool {
	if x != nil && x.IsArchived != nil {
		return *x.IsArchived
	}
	return false
}

func (x *TestPlanUpdateRequest) GetIterationID() uint64 {
	if x != nil {
		return x.IterationID
	}
	return 0
}

type TestSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint64 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectID uint64 `protobuf:"varint,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ParentID  uint64 `protobuf:"varint,4,opt,name=parentID,proto3" json:"parentID,omitempty"`
	Recycled  bool   `protobuf:"varint,5,opt,name=recycled,proto3" json:"recycled,omitempty"`
	Directory string `protobuf:"bytes,6,opt,name=directory,json=directoryName,proto3" json:"directory,omitempty"`
	Order     int64  `protobuf:"varint,7,opt,name=order,proto3" json:"order,omitempty"`
	CreatorID string `protobuf:"bytes,8,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	UpdaterID string `protobuf:"bytes,9,opt,name=updaterID,proto3" json:"updaterID,omitempty"`
}

func (x *TestSet) Reset() {
	*x = TestSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testplan_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSet) ProtoMessage() {}

func (x *TestSet) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testplan_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSet.ProtoReflect.Descriptor instead.
func (*TestSet) Descriptor() ([]byte, []int) {
	return file_testplatform_testplan_proto_rawDescGZIP(), []int{19}
}

func (x *TestSet) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TestSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestSet) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *TestSet) GetParentID() uint64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *TestSet) GetRecycled() bool {
	if x != nil {
		return x.Recycled
	}
	return false
}

func (x *TestSet) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *TestSet) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *TestSet) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *TestSet) GetUpdaterID() string {
	if x != nil {
		return x.UpdaterID
	}
	return ""
}

var File_testplatform_testplan_proto protoreflect.FileDescriptor

var file_testplatform_testplan_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x45, 0x53, 0x54,
	0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x23, 0x0a, 0x21, 0x41, 0x55,
	0x54, 0x4f, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x50, 0x4c, 0x41, 0x4e,
	0x5f, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x58, 0x0a, 0x16, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x41, 0x50, 0x49, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x22, 0x20, 0x0a, 0x0e, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x17, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x49, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x17, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x22, 0x1d, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xea, 0x05, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3d, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc5, 0x01,
	0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x54,
	0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x75, 0x74,
	0x6f, 0x54, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdb, 0x02, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x22, 0x44, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x78, 0x0a, 0x1a, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x73, 0x22, 0x7b, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x69,
	0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x75, 0x63, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0x5a, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a,
	0x1b, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49,
	0x44, 0x22, 0xde, 0x03, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x15, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x53, 0x65, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x50, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65,
	0x63, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x13, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x2d, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53,
	0x65, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x32, 0x98, 0x14, 0x0a,
	0x15, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x96, 0x02, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x4f, 0x54,
	0x45, 0x53, 0x54, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x45, 0x12, 0x3f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x9e,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75,
	0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0xfa, 0x81,
	0xf9, 0x1b, 0x5c, 0x0a, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x32, 0x06, 0x10, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x3a, 0x1b, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b,
	0xe8, 0xaf, 0x95, 0xe8, 0xae, 0xa1, 0xe5, 0x88, 0x92, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0x12,
	0xd7, 0x01, 0x0a, 0x19, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x12, 0x3e, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x55, 0x54, 0x4f,
	0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x50,
	0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x18, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x3d, 0x0a, 0x18, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x28, 0x01, 0x3a, 0x1b, 0xe8, 0x87,
	0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0xae, 0xa1,
	0xe5, 0x88, 0x92, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x94, 0x02, 0x0a, 0x0e, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x41, 0x50, 0x49, 0x54, 0x45, 0x53, 0x54, 0x12, 0x33, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x5f, 0x41, 0x50, 0x49, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb4, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x41, 0x22, 0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x2d, 0x61,
	0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x68, 0x0a, 0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x2d, 0x61, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x21, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x8f, 0x96, 0xe6, 0xb6, 0x88, 0xe6, 0x89,
	0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95,
	0x12, 0xbf, 0x01, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x32, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b,
	0x31, 0x0a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0xae, 0xa1, 0xe5,
	0x88, 0x92, 0x12, 0xa5, 0x01, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x2b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa,
	0x81, 0xf9, 0x1b, 0x36, 0x0a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0xb5,
	0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0xae, 0xa1, 0xe5, 0x88, 0x92, 0x12, 0xf8, 0x01, 0x0a, 0x0f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x49, 0x54, 0x45, 0x53, 0x54, 0x12, 0x34,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x49, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x96, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x74, 0x65, 0x73, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x56, 0x0a,
	0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x2d, 0x61, 0x70, 0x69,
	0x74, 0x65, 0x73, 0x74, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xe6,
	0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0x12, 0xa9, 0x02, 0x0a, 0x0f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x62, 0x0a,
	0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8,
	0xae, 0xa1, 0xe5, 0x88, 0x92, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe6, 0x8a, 0xa5, 0xe5, 0x91,
	0x8a, 0x12, 0xb9, 0x01, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x36, 0x0a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf,
	0x95, 0xe8, 0xae, 0xa1, 0xe5, 0x88, 0x92, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xbd, 0x01,
	0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x0e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf,
	0x95, 0xe8, 0xae, 0xa1, 0xe5, 0x88, 0x92, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x93, 0x02,
	0x0a, 0x0d, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x53, 0x45, 0x54, 0x53, 0x12,
	0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65,
	0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x5c, 0x0a, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x30, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0xae, 0xa1, 0xe5, 0x88, 0x92, 0xe4, 0xb8,
	0x8b, 0xe7, 0x9a, 0x84, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe9, 0x9b, 0x86, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x12, 0xbc, 0x01, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x32,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x1a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0xfa,
	0x81, 0xf9, 0x1b, 0x3e, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44,
	0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0xae, 0xa1, 0xe5,
	0x88, 0x92, 0x1a, 0x13, 0xc2, 0xc4, 0xcb, 0x1c, 0x0e, 0x22, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testplatform_testplan_proto_rawDescOnce sync.Once
	file_testplatform_testplan_proto_rawDescData = file_testplatform_testplan_proto_rawDesc
)

func file_testplatform_testplan_proto_rawDescGZIP() []byte {
	file_testplatform_testplan_proto_rawDescOnce.Do(func() {
		file_testplatform_testplan_proto_rawDescData = protoimpl.X.CompressGZIP(file_testplatform_testplan_proto_rawDescData)
	})
	return file_testplatform_testplan_proto_rawDescData
}

var file_testplatform_testplan_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_testplatform_testplan_proto_goTypes = []interface{}{
	(*AUTOTESTS_TESTPLAN_EXECUTE_Request)(nil), // 0: erda.openapiv1.testplatform.AUTOTESTS_TESTPLAN_EXECUTE_Request
	(*AUTOTESTS_TESTPLAN_PAGING_Request)(nil),  // 1: erda.openapiv1.testplatform.AUTOTESTS_TESTPLAN_PAGING_Request
	(*CANCEL_APITEST_Request)(nil),             // 2: erda.openapiv1.testplatform.CANCEL_APITEST_Request
	(*DELETE_Request)(nil),                     // 3: erda.openapiv1.testplatform.DELETE_Request
	(*EXECUTE_APITEST_Request)(nil),            // 4: erda.openapiv1.testplatform.EXECUTE_APITEST_Request
	(*GENERATE_REPORT_Request)(nil),            // 5: erda.openapiv1.testplatform.GENERATE_REPORT_Request
	(*GET_Request)(nil),                        // 6: erda.openapiv1.testplatform.GET_Request
	(*TestPlan)(nil),                           // 7: erda.openapiv1.testplatform.TestPlan
	(*TestPlanCreateRequest)(nil),              // 8: erda.openapiv1.testplatform.TestPlanCreateRequest
	(*TestPlanCreateResponse)(nil),             // 9: erda.openapiv1.testplatform.TestPlanCreateResponse
	(*TestPlanGetResponse)(nil),                // 10: erda.openapiv1.testplatform.TestPlanGetResponse
	(*TestPlanPagingRequest)(nil),              // 11: erda.openapiv1.testplatform.TestPlanPagingRequest
	(*TestPlanPagingResponse)(nil),             // 12: erda.openapiv1.testplatform.TestPlanPagingResponse
	(*TestPlanPagingResponseData)(nil),         // 13: erda.openapiv1.testplatform.TestPlanPagingResponseData
	(*TestPlanRelsCount)(nil),                  // 14: erda.openapiv1.testplatform.TestPlanRelsCount
	(*TestPlanReportGenerateResponse)(nil),     // 15: erda.openapiv1.testplatform.TestPlanReportGenerateResponse
	(*TestPlanTestSetListResponse)(nil),        // 16: erda.openapiv1.testplatform.TestPlanTestSetListResponse
	(*TestPlanTestSetsListRequest)(nil),        // 17: erda.openapiv1.testplatform.TestPlanTestSetsListRequest
	(*TestPlanUpdateRequest)(nil),              // 18: erda.openapiv1.testplatform.TestPlanUpdateRequest
	(*TestSet)(nil),                            // 19: erda.openapiv1.testplatform.TestSet
	(*timestamppb.Timestamp)(nil),              // 20: google.protobuf.Timestamp
	(*structpb.Value)(nil),                     // 21: google.protobuf.Value
	(*durationpb.Duration)(nil),                // 22: google.protobuf.Duration
	(*emptypb.Empty)(nil),                      // 23: google.protobuf.Empty
}
var file_testplatform_testplan_proto_depIdxs = []int32{
	20, // 0: erda.openapiv1.testplatform.TestPlan.createdAt:type_name -> google.protobuf.Timestamp
	20, // 1: erda.openapiv1.testplatform.TestPlan.updatedAt:type_name -> google.protobuf.Timestamp
	20, // 2: erda.openapiv1.testplatform.TestPlan.startedAt:type_name -> google.protobuf.Timestamp
	20, // 3: erda.openapiv1.testplatform.TestPlan.endedAt:type_name -> google.protobuf.Timestamp
	21, // 4: erda.openapiv1.testplatform.TestPlan.relsCount:type_name -> google.protobuf.Value
	21, // 5: erda.openapiv1.testplatform.TestPlanGetResponse.data:type_name -> google.protobuf.Value
	21, // 6: erda.openapiv1.testplatform.TestPlanPagingResponse.data:type_name -> google.protobuf.Value
	21, // 7: erda.openapiv1.testplatform.TestPlanPagingResponseData.list:type_name -> google.protobuf.Value
	21, // 8: erda.openapiv1.testplatform.TestPlanReportGenerateResponse.data:type_name -> google.protobuf.Value
	21, // 9: erda.openapiv1.testplatform.TestPlanTestSetListResponse.data:type_name -> google.protobuf.Value
	22, // 10: erda.openapiv1.testplatform.TestPlanUpdateRequest.timestampSecStartedAt:type_name -> google.protobuf.Duration
	22, // 11: erda.openapiv1.testplatform.TestPlanUpdateRequest.timestampSecEndedAt:type_name -> google.protobuf.Duration
	0,  // 12: erda.openapiv1.testplatform.testplatform_testplan.AUTOTESTS_TESTPLAN_EXECUTE:input_type -> erda.openapiv1.testplatform.AUTOTESTS_TESTPLAN_EXECUTE_Request
	1,  // 13: erda.openapiv1.testplatform.testplatform_testplan.AUTOTESTS_TESTPLAN_PAGING:input_type -> erda.openapiv1.testplatform.AUTOTESTS_TESTPLAN_PAGING_Request
	2,  // 14: erda.openapiv1.testplatform.testplatform_testplan.CANCEL_APITEST:input_type -> erda.openapiv1.testplatform.CANCEL_APITEST_Request
	8,  // 15: erda.openapiv1.testplatform.testplatform_testplan.CREATE:input_type -> erda.openapiv1.testplatform.TestPlanCreateRequest
	3,  // 16: erda.openapiv1.testplatform.testplatform_testplan.DELETE:input_type -> erda.openapiv1.testplatform.DELETE_Request
	4,  // 17: erda.openapiv1.testplatform.testplatform_testplan.EXECUTE_APITEST:input_type -> erda.openapiv1.testplatform.EXECUTE_APITEST_Request
	5,  // 18: erda.openapiv1.testplatform.testplatform_testplan.GENERATE_REPORT:input_type -> erda.openapiv1.testplatform.GENERATE_REPORT_Request
	6,  // 19: erda.openapiv1.testplatform.testplatform_testplan.GET:input_type -> erda.openapiv1.testplatform.GET_Request
	11, // 20: erda.openapiv1.testplatform.testplatform_testplan.LIST:input_type -> erda.openapiv1.testplatform.TestPlanPagingRequest
	17, // 21: erda.openapiv1.testplatform.testplatform_testplan.LIST_TESTSETS:input_type -> erda.openapiv1.testplatform.TestPlanTestSetsListRequest
	18, // 22: erda.openapiv1.testplatform.testplatform_testplan.UPDATE:input_type -> erda.openapiv1.testplatform.TestPlanUpdateRequest
	23, // 23: erda.openapiv1.testplatform.testplatform_testplan.AUTOTESTS_TESTPLAN_EXECUTE:output_type -> google.protobuf.Empty
	23, // 24: erda.openapiv1.testplatform.testplatform_testplan.AUTOTESTS_TESTPLAN_PAGING:output_type -> google.protobuf.Empty
	23, // 25: erda.openapiv1.testplatform.testplatform_testplan.CANCEL_APITEST:output_type -> google.protobuf.Empty
	9,  // 26: erda.openapiv1.testplatform.testplatform_testplan.CREATE:output_type -> erda.openapiv1.testplatform.TestPlanCreateResponse
	23, // 27: erda.openapiv1.testplatform.testplatform_testplan.DELETE:output_type -> google.protobuf.Empty
	23, // 28: erda.openapiv1.testplatform.testplatform_testplan.EXECUTE_APITEST:output_type -> google.protobuf.Empty
	15, // 29: erda.openapiv1.testplatform.testplatform_testplan.GENERATE_REPORT:output_type -> erda.openapiv1.testplatform.TestPlanReportGenerateResponse
	10, // 30: erda.openapiv1.testplatform.testplatform_testplan.GET:output_type -> erda.openapiv1.testplatform.TestPlanGetResponse
	12, // 31: erda.openapiv1.testplatform.testplatform_testplan.LIST:output_type -> erda.openapiv1.testplatform.TestPlanPagingResponse
	16, // 32: erda.openapiv1.testplatform.testplatform_testplan.LIST_TESTSETS:output_type -> erda.openapiv1.testplatform.TestPlanTestSetListResponse
	23, // 33: erda.openapiv1.testplatform.testplatform_testplan.UPDATE:output_type -> google.protobuf.Empty
	23, // [23:34] is the sub-list for method output_type
	12, // [12:23] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_testplatform_testplan_proto_init() }
func file_testplatform_testplan_proto_init() {
	if File_testplatform_testplan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testplatform_testplan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AUTOTESTS_TESTPLAN_EXECUTE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AUTOTESTS_TESTPLAN_PAGING_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CANCEL_APITEST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EXECUTE_APITEST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GENERATE_REPORT_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanPagingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanPagingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanPagingResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanRelsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanReportGenerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanTestSetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanTestSetsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testplan_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_testplatform_testplan_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_testplatform_testplan_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_testplatform_testplan_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_testplatform_testplan_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testplatform_testplan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_testplatform_testplan_proto_goTypes,
		DependencyIndexes: file_testplatform_testplan_proto_depIdxs,
		MessageInfos:      file_testplatform_testplan_proto_msgTypes,
	}.Build()
	File_testplatform_testplan_proto = out.File
	file_testplatform_testplan_proto_rawDesc = nil
	file_testplatform_testplan_proto_goTypes = nil
	file_testplatform_testplan_proto_depIdxs = nil
}
