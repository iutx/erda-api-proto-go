// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: testplatform_testplan.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// TestplatformTestplanClient is the client API for TestplatformTestplan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestplatformTestplanClient interface {
	AUTOTESTS_TESTPLAN_EXECUTE(ctx context.Context, in *AUTOTESTS_TESTPLAN_EXECUTE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AUTOTESTS_TESTPLAN_PAGING(ctx context.Context, in *AUTOTESTS_TESTPLAN_PAGING_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CANCEL_APITEST(ctx context.Context, in *CANCEL_APITEST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CREATE(ctx context.Context, in *TestPlanCreateRequest, opts ...grpc.CallOption) (*TestPlanCreateResponse, error)
	DELETE(ctx context.Context, in *DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EXECUTE_APITEST(ctx context.Context, in *EXECUTE_APITEST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GENERATE_REPORT(ctx context.Context, in *GENERATE_REPORT_Request, opts ...grpc.CallOption) (*TestPlanReportGenerateResponse, error)
	GET(ctx context.Context, in *GET_Request, opts ...grpc.CallOption) (*TestPlanGetResponse, error)
	LIST(ctx context.Context, in *TestPlanPagingRequest, opts ...grpc.CallOption) (*TestPlanPagingResponse, error)
	LIST_TESTSETS(ctx context.Context, in *TestPlanTestSetsListRequest, opts ...grpc.CallOption) (*TestPlanTestSetListResponse, error)
	UPDATE(ctx context.Context, in *TestPlanUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type testplatformTestplanClient struct {
	cc grpc1.ClientConnInterface
}

func NewTestplatformTestplanClient(cc grpc1.ClientConnInterface) TestplatformTestplanClient {
	return &testplatformTestplanClient{cc}
}

func (c *testplatformTestplanClient) AUTOTESTS_TESTPLAN_EXECUTE(ctx context.Context, in *AUTOTESTS_TESTPLAN_EXECUTE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testplan/AUTOTESTS_TESTPLAN_EXECUTE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestplanClient) AUTOTESTS_TESTPLAN_PAGING(ctx context.Context, in *AUTOTESTS_TESTPLAN_PAGING_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testplan/AUTOTESTS_TESTPLAN_PAGING", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestplanClient) CANCEL_APITEST(ctx context.Context, in *CANCEL_APITEST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testplan/CANCEL_APITEST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestplanClient) CREATE(ctx context.Context, in *TestPlanCreateRequest, opts ...grpc.CallOption) (*TestPlanCreateResponse, error) {
	out := new(TestPlanCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testplan/CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestplanClient) DELETE(ctx context.Context, in *DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testplan/DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestplanClient) EXECUTE_APITEST(ctx context.Context, in *EXECUTE_APITEST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testplan/EXECUTE_APITEST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestplanClient) GENERATE_REPORT(ctx context.Context, in *GENERATE_REPORT_Request, opts ...grpc.CallOption) (*TestPlanReportGenerateResponse, error) {
	out := new(TestPlanReportGenerateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testplan/GENERATE_REPORT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestplanClient) GET(ctx context.Context, in *GET_Request, opts ...grpc.CallOption) (*TestPlanGetResponse, error) {
	out := new(TestPlanGetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testplan/GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestplanClient) LIST(ctx context.Context, in *TestPlanPagingRequest, opts ...grpc.CallOption) (*TestPlanPagingResponse, error) {
	out := new(TestPlanPagingResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testplan/LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestplanClient) LIST_TESTSETS(ctx context.Context, in *TestPlanTestSetsListRequest, opts ...grpc.CallOption) (*TestPlanTestSetListResponse, error) {
	out := new(TestPlanTestSetListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testplan/LIST_TESTSETS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestplanClient) UPDATE(ctx context.Context, in *TestPlanUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testplan/UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestplatformTestplanServer is the server API for TestplatformTestplan service.
// All implementations should embed UnimplementedTestplatformTestplanServer
// for forward compatibility
type TestplatformTestplanServer interface {
	AUTOTESTS_TESTPLAN_EXECUTE(context.Context, *AUTOTESTS_TESTPLAN_EXECUTE_Request) (*emptypb.Empty, error)
	AUTOTESTS_TESTPLAN_PAGING(context.Context, *AUTOTESTS_TESTPLAN_PAGING_Request) (*emptypb.Empty, error)
	CANCEL_APITEST(context.Context, *CANCEL_APITEST_Request) (*emptypb.Empty, error)
	CREATE(context.Context, *TestPlanCreateRequest) (*TestPlanCreateResponse, error)
	DELETE(context.Context, *DELETE_Request) (*emptypb.Empty, error)
	EXECUTE_APITEST(context.Context, *EXECUTE_APITEST_Request) (*emptypb.Empty, error)
	GENERATE_REPORT(context.Context, *GENERATE_REPORT_Request) (*TestPlanReportGenerateResponse, error)
	GET(context.Context, *GET_Request) (*TestPlanGetResponse, error)
	LIST(context.Context, *TestPlanPagingRequest) (*TestPlanPagingResponse, error)
	LIST_TESTSETS(context.Context, *TestPlanTestSetsListRequest) (*TestPlanTestSetListResponse, error)
	UPDATE(context.Context, *TestPlanUpdateRequest) (*emptypb.Empty, error)
}

// UnimplementedTestplatformTestplanServer should be embedded to have forward compatible implementations.
type UnimplementedTestplatformTestplanServer struct {
}

func (*UnimplementedTestplatformTestplanServer) AUTOTESTS_TESTPLAN_EXECUTE(context.Context, *AUTOTESTS_TESTPLAN_EXECUTE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AUTOTESTS_TESTPLAN_EXECUTE not implemented")
}
func (*UnimplementedTestplatformTestplanServer) AUTOTESTS_TESTPLAN_PAGING(context.Context, *AUTOTESTS_TESTPLAN_PAGING_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AUTOTESTS_TESTPLAN_PAGING not implemented")
}
func (*UnimplementedTestplatformTestplanServer) CANCEL_APITEST(context.Context, *CANCEL_APITEST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CANCEL_APITEST not implemented")
}
func (*UnimplementedTestplatformTestplanServer) CREATE(context.Context, *TestPlanCreateRequest) (*TestPlanCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CREATE not implemented")
}
func (*UnimplementedTestplatformTestplanServer) DELETE(context.Context, *DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DELETE not implemented")
}
func (*UnimplementedTestplatformTestplanServer) EXECUTE_APITEST(context.Context, *EXECUTE_APITEST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EXECUTE_APITEST not implemented")
}
func (*UnimplementedTestplatformTestplanServer) GENERATE_REPORT(context.Context, *GENERATE_REPORT_Request) (*TestPlanReportGenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GENERATE_REPORT not implemented")
}
func (*UnimplementedTestplatformTestplanServer) GET(context.Context, *GET_Request) (*TestPlanGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GET not implemented")
}
func (*UnimplementedTestplatformTestplanServer) LIST(context.Context, *TestPlanPagingRequest) (*TestPlanPagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LIST not implemented")
}
func (*UnimplementedTestplatformTestplanServer) LIST_TESTSETS(context.Context, *TestPlanTestSetsListRequest) (*TestPlanTestSetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LIST_TESTSETS not implemented")
}
func (*UnimplementedTestplatformTestplanServer) UPDATE(context.Context, *TestPlanUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UPDATE not implemented")
}

func RegisterTestplatformTestplanServer(s grpc1.ServiceRegistrar, srv TestplatformTestplanServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_TestplatformTestplan_serviceDesc(srv, opts...), srv)
}

var _TestplatformTestplan_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.testplatform.testplatform_testplan",
	HandlerType: (*TestplatformTestplanServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "testplatform_testplan.proto",
}

func _get_TestplatformTestplan_serviceDesc(srv TestplatformTestplanServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_TestplatformTestplan_AUTOTESTS_TESTPLAN_EXECUTE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.AUTOTESTS_TESTPLAN_EXECUTE(ctx, req.(*AUTOTESTS_TESTPLAN_EXECUTE_Request))
	}
	var _TestplatformTestplan_AUTOTESTS_TESTPLAN_EXECUTE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestplan_AUTOTESTS_TESTPLAN_EXECUTE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "AUTOTESTS_TESTPLAN_EXECUTE", srv)
		_TestplatformTestplan_AUTOTESTS_TESTPLAN_EXECUTE_Handler = h.Interceptor(_TestplatformTestplan_AUTOTESTS_TESTPLAN_EXECUTE_Handler)
	}

	_TestplatformTestplan_AUTOTESTS_TESTPLAN_PAGING_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.AUTOTESTS_TESTPLAN_PAGING(ctx, req.(*AUTOTESTS_TESTPLAN_PAGING_Request))
	}
	var _TestplatformTestplan_AUTOTESTS_TESTPLAN_PAGING_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestplan_AUTOTESTS_TESTPLAN_PAGING_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "AUTOTESTS_TESTPLAN_PAGING", srv)
		_TestplatformTestplan_AUTOTESTS_TESTPLAN_PAGING_Handler = h.Interceptor(_TestplatformTestplan_AUTOTESTS_TESTPLAN_PAGING_Handler)
	}

	_TestplatformTestplan_CANCEL_APITEST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CANCEL_APITEST(ctx, req.(*CANCEL_APITEST_Request))
	}
	var _TestplatformTestplan_CANCEL_APITEST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestplan_CANCEL_APITEST_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "CANCEL_APITEST", srv)
		_TestplatformTestplan_CANCEL_APITEST_Handler = h.Interceptor(_TestplatformTestplan_CANCEL_APITEST_Handler)
	}

	_TestplatformTestplan_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CREATE(ctx, req.(*TestPlanCreateRequest))
	}
	var _TestplatformTestplan_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestplan_CREATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "CREATE", srv)
		_TestplatformTestplan_CREATE_Handler = h.Interceptor(_TestplatformTestplan_CREATE_Handler)
	}

	_TestplatformTestplan_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DELETE(ctx, req.(*DELETE_Request))
	}
	var _TestplatformTestplan_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestplan_DELETE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "DELETE", srv)
		_TestplatformTestplan_DELETE_Handler = h.Interceptor(_TestplatformTestplan_DELETE_Handler)
	}

	_TestplatformTestplan_EXECUTE_APITEST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.EXECUTE_APITEST(ctx, req.(*EXECUTE_APITEST_Request))
	}
	var _TestplatformTestplan_EXECUTE_APITEST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestplan_EXECUTE_APITEST_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "EXECUTE_APITEST", srv)
		_TestplatformTestplan_EXECUTE_APITEST_Handler = h.Interceptor(_TestplatformTestplan_EXECUTE_APITEST_Handler)
	}

	_TestplatformTestplan_GENERATE_REPORT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GENERATE_REPORT(ctx, req.(*GENERATE_REPORT_Request))
	}
	var _TestplatformTestplan_GENERATE_REPORT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestplan_GENERATE_REPORT_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "GENERATE_REPORT", srv)
		_TestplatformTestplan_GENERATE_REPORT_Handler = h.Interceptor(_TestplatformTestplan_GENERATE_REPORT_Handler)
	}

	_TestplatformTestplan_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GET(ctx, req.(*GET_Request))
	}
	var _TestplatformTestplan_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestplan_GET_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "GET", srv)
		_TestplatformTestplan_GET_Handler = h.Interceptor(_TestplatformTestplan_GET_Handler)
	}

	_TestplatformTestplan_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.LIST(ctx, req.(*TestPlanPagingRequest))
	}
	var _TestplatformTestplan_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestplan_LIST_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "LIST", srv)
		_TestplatformTestplan_LIST_Handler = h.Interceptor(_TestplatformTestplan_LIST_Handler)
	}

	_TestplatformTestplan_LIST_TESTSETS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.LIST_TESTSETS(ctx, req.(*TestPlanTestSetsListRequest))
	}
	var _TestplatformTestplan_LIST_TESTSETS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestplan_LIST_TESTSETS_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "LIST_TESTSETS", srv)
		_TestplatformTestplan_LIST_TESTSETS_Handler = h.Interceptor(_TestplatformTestplan_LIST_TESTSETS_Handler)
	}

	_TestplatformTestplan_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UPDATE(ctx, req.(*TestPlanUpdateRequest))
	}
	var _TestplatformTestplan_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestplan_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "UPDATE", srv)
		_TestplatformTestplan_UPDATE_Handler = h.Interceptor(_TestplatformTestplan_UPDATE_Handler)
	}

	var serviceDesc = _TestplatformTestplan_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "AUTOTESTS_TESTPLAN_EXECUTE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AUTOTESTS_TESTPLAN_EXECUTE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestplanServer).AUTOTESTS_TESTPLAN_EXECUTE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestplan_AUTOTESTS_TESTPLAN_EXECUTE_info)
				}
				if interceptor == nil {
					return _TestplatformTestplan_AUTOTESTS_TESTPLAN_EXECUTE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testplan/AUTOTESTS_TESTPLAN_EXECUTE",
				}
				return interceptor(ctx, in, info, _TestplatformTestplan_AUTOTESTS_TESTPLAN_EXECUTE_Handler)
			},
		},
		{
			MethodName: "AUTOTESTS_TESTPLAN_PAGING",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AUTOTESTS_TESTPLAN_PAGING_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestplanServer).AUTOTESTS_TESTPLAN_PAGING(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestplan_AUTOTESTS_TESTPLAN_PAGING_info)
				}
				if interceptor == nil {
					return _TestplatformTestplan_AUTOTESTS_TESTPLAN_PAGING_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testplan/AUTOTESTS_TESTPLAN_PAGING",
				}
				return interceptor(ctx, in, info, _TestplatformTestplan_AUTOTESTS_TESTPLAN_PAGING_Handler)
			},
		},
		{
			MethodName: "CANCEL_APITEST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CANCEL_APITEST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestplanServer).CANCEL_APITEST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestplan_CANCEL_APITEST_info)
				}
				if interceptor == nil {
					return _TestplatformTestplan_CANCEL_APITEST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testplan/CANCEL_APITEST",
				}
				return interceptor(ctx, in, info, _TestplatformTestplan_CANCEL_APITEST_Handler)
			},
		},
		{
			MethodName: "CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestPlanCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestplanServer).CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestplan_CREATE_info)
				}
				if interceptor == nil {
					return _TestplatformTestplan_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testplan/CREATE",
				}
				return interceptor(ctx, in, info, _TestplatformTestplan_CREATE_Handler)
			},
		},
		{
			MethodName: "DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestplanServer).DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestplan_DELETE_info)
				}
				if interceptor == nil {
					return _TestplatformTestplan_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testplan/DELETE",
				}
				return interceptor(ctx, in, info, _TestplatformTestplan_DELETE_Handler)
			},
		},
		{
			MethodName: "EXECUTE_APITEST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(EXECUTE_APITEST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestplanServer).EXECUTE_APITEST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestplan_EXECUTE_APITEST_info)
				}
				if interceptor == nil {
					return _TestplatformTestplan_EXECUTE_APITEST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testplan/EXECUTE_APITEST",
				}
				return interceptor(ctx, in, info, _TestplatformTestplan_EXECUTE_APITEST_Handler)
			},
		},
		{
			MethodName: "GENERATE_REPORT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GENERATE_REPORT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestplanServer).GENERATE_REPORT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestplan_GENERATE_REPORT_info)
				}
				if interceptor == nil {
					return _TestplatformTestplan_GENERATE_REPORT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testplan/GENERATE_REPORT",
				}
				return interceptor(ctx, in, info, _TestplatformTestplan_GENERATE_REPORT_Handler)
			},
		},
		{
			MethodName: "GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestplanServer).GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestplan_GET_info)
				}
				if interceptor == nil {
					return _TestplatformTestplan_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testplan/GET",
				}
				return interceptor(ctx, in, info, _TestplatformTestplan_GET_Handler)
			},
		},
		{
			MethodName: "LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestPlanPagingRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestplanServer).LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestplan_LIST_info)
				}
				if interceptor == nil {
					return _TestplatformTestplan_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testplan/LIST",
				}
				return interceptor(ctx, in, info, _TestplatformTestplan_LIST_Handler)
			},
		},
		{
			MethodName: "LIST_TESTSETS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestPlanTestSetsListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestplanServer).LIST_TESTSETS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestplan_LIST_TESTSETS_info)
				}
				if interceptor == nil {
					return _TestplatformTestplan_LIST_TESTSETS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testplan/LIST_TESTSETS",
				}
				return interceptor(ctx, in, info, _TestplatformTestplan_LIST_TESTSETS_Handler)
			},
		},
		{
			MethodName: "UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestPlanUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestplanServer).UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestplan_UPDATE_info)
				}
				if interceptor == nil {
					return _TestplatformTestplan_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testplan/UPDATE",
				}
				return interceptor(ctx, in, info, _TestplatformTestplan_UPDATE_Handler)
			},
		},
	}
	return &serviceDesc
}
