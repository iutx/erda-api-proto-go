// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: testplatform_testplan.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// TestplatformTestplanHandler is the server API for TestplatformTestplan service.
type TestplatformTestplanHandler interface {
	// POST /api/autotests/testplans/{testPlanID}/actions/execute
	AUTOTESTS_TESTPLAN_EXECUTE(context.Context, *AUTOTESTS_TESTPLAN_EXECUTE_Request) (*emptypb.Empty, error)
	// POST /api/autotests/testplans
	AUTOTESTS_TESTPLAN_PAGING(context.Context, *AUTOTESTS_TESTPLAN_PAGING_Request) (*emptypb.Empty, error)
	// POST /api/testplans/{testPlanID}/actions/cancel-apitest/{pipelineID}
	CANCEL_APITEST(context.Context, *CANCEL_APITEST_Request) (*emptypb.Empty, error)
	// POST /api/testplans
	CREATE(context.Context, *TestPlanCreateRequest) (*TestPlanCreateResponse, error)
	// DELETE /api/testplans/{id}
	DELETE(context.Context, *DELETE_Request) (*emptypb.Empty, error)
	// POST /api/testplans/{testPlanID}/actions/execute-apitest
	EXECUTE_APITEST(context.Context, *EXECUTE_APITEST_Request) (*emptypb.Empty, error)
	// GET /api/testplans/{testPlanID}/actions/generate-report
	GENERATE_REPORT(context.Context, *GENERATE_REPORT_Request) (*TestPlanReportGenerateResponse, error)
	// GET /api/testplans/{id}
	GET(context.Context, *GET_Request) (*TestPlanGetResponse, error)
	// GET /api/testplans
	LIST(context.Context, *TestPlanPagingRequest) (*TestPlanPagingResponse, error)
	// GET /api/testplans/{testPlanID}/testsets
	LIST_TESTSETS(context.Context, *TestPlanTestSetsListRequest) (*TestPlanTestSetListResponse, error)
	// PUT /api/testplans/{testPlanID}
	UPDATE(context.Context, *TestPlanUpdateRequest) (*emptypb.Empty, error)
}

// RegisterTestplatformTestplanHandler register TestplatformTestplanHandler to http.Router.
func RegisterTestplatformTestplanHandler(r http.Router, srv TestplatformTestplanHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_AUTOTESTS_TESTPLAN_EXECUTE := func(method, path string, fn func(context.Context, *AUTOTESTS_TESTPLAN_EXECUTE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*AUTOTESTS_TESTPLAN_EXECUTE_Request))
		}
		var AUTOTESTS_TESTPLAN_EXECUTE_info transport.ServiceInfo
		if h.Interceptor != nil {
			AUTOTESTS_TESTPLAN_EXECUTE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "AUTOTESTS_TESTPLAN_EXECUTE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, AUTOTESTS_TESTPLAN_EXECUTE_info)
				}
				r = r.WithContext(ctx)
				var in AUTOTESTS_TESTPLAN_EXECUTE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testPlanID":
							in.TestPlanID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_AUTOTESTS_TESTPLAN_PAGING := func(method, path string, fn func(context.Context, *AUTOTESTS_TESTPLAN_PAGING_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*AUTOTESTS_TESTPLAN_PAGING_Request))
		}
		var AUTOTESTS_TESTPLAN_PAGING_info transport.ServiceInfo
		if h.Interceptor != nil {
			AUTOTESTS_TESTPLAN_PAGING_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "AUTOTESTS_TESTPLAN_PAGING", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, AUTOTESTS_TESTPLAN_PAGING_info)
				}
				r = r.WithContext(ctx)
				var in AUTOTESTS_TESTPLAN_PAGING_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CANCEL_APITEST := func(method, path string, fn func(context.Context, *CANCEL_APITEST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CANCEL_APITEST_Request))
		}
		var CANCEL_APITEST_info transport.ServiceInfo
		if h.Interceptor != nil {
			CANCEL_APITEST_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "CANCEL_APITEST", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CANCEL_APITEST_info)
				}
				r = r.WithContext(ctx)
				var in CANCEL_APITEST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testPlanID":
							in.TestPlanID = val
						case "pipelineID":
							in.PipelineID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CREATE := func(method, path string, fn func(context.Context, *TestPlanCreateRequest) (*TestPlanCreateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestPlanCreateRequest))
		}
		var CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			CREATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CREATE_info)
				}
				r = r.WithContext(ctx)
				var in TestPlanCreateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DELETE := func(method, path string, fn func(context.Context, *DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*DELETE_Request))
		}
		var DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			DELETE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DELETE_info)
				}
				r = r.WithContext(ctx)
				var in DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_EXECUTE_APITEST := func(method, path string, fn func(context.Context, *EXECUTE_APITEST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*EXECUTE_APITEST_Request))
		}
		var EXECUTE_APITEST_info transport.ServiceInfo
		if h.Interceptor != nil {
			EXECUTE_APITEST_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "EXECUTE_APITEST", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, EXECUTE_APITEST_info)
				}
				r = r.WithContext(ctx)
				var in EXECUTE_APITEST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testPlanID":
							in.TestPlanID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GENERATE_REPORT := func(method, path string, fn func(context.Context, *GENERATE_REPORT_Request) (*TestPlanReportGenerateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GENERATE_REPORT_Request))
		}
		var GENERATE_REPORT_info transport.ServiceInfo
		if h.Interceptor != nil {
			GENERATE_REPORT_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "GENERATE_REPORT", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GENERATE_REPORT_info)
				}
				r = r.WithContext(ctx)
				var in GENERATE_REPORT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testPlanID":
							in.TestPlanID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GET := func(method, path string, fn func(context.Context, *GET_Request) (*TestPlanGetResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GET_Request))
		}
		var GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			GET_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GET_info)
				}
				r = r.WithContext(ctx)
				var in GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_LIST := func(method, path string, fn func(context.Context, *TestPlanPagingRequest) (*TestPlanPagingResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestPlanPagingRequest))
		}
		var LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			LIST_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, LIST_info)
				}
				r = r.WithContext(ctx)
				var in TestPlanPagingRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_LIST_TESTSETS := func(method, path string, fn func(context.Context, *TestPlanTestSetsListRequest) (*TestPlanTestSetListResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestPlanTestSetsListRequest))
		}
		var LIST_TESTSETS_info transport.ServiceInfo
		if h.Interceptor != nil {
			LIST_TESTSETS_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "LIST_TESTSETS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, LIST_TESTSETS_info)
				}
				r = r.WithContext(ctx)
				var in TestPlanTestSetsListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testPlanID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.TestPlanID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UPDATE := func(method, path string, fn func(context.Context, *TestPlanUpdateRequest) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestPlanUpdateRequest))
		}
		var UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			UPDATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testplan", "UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in TestPlanUpdateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testPlanID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.TestPlanID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_AUTOTESTS_TESTPLAN_EXECUTE("POST", "/api/autotests/testplans/{testPlanID}/actions/execute", srv.AUTOTESTS_TESTPLAN_EXECUTE)
	add_AUTOTESTS_TESTPLAN_PAGING("POST", "/api/autotests/testplans", srv.AUTOTESTS_TESTPLAN_PAGING)
	add_CANCEL_APITEST("POST", "/api/testplans/{testPlanID}/actions/cancel-apitest/{pipelineID}", srv.CANCEL_APITEST)
	add_CREATE("POST", "/api/testplans", srv.CREATE)
	add_DELETE("DELETE", "/api/testplans/{id}", srv.DELETE)
	add_EXECUTE_APITEST("POST", "/api/testplans/{testPlanID}/actions/execute-apitest", srv.EXECUTE_APITEST)
	add_GENERATE_REPORT("GET", "/api/testplans/{testPlanID}/actions/generate-report", srv.GENERATE_REPORT)
	add_GET("GET", "/api/testplans/{id}", srv.GET)
	add_LIST("GET", "/api/testplans", srv.LIST)
	add_LIST_TESTSETS("GET", "/api/testplans/{testPlanID}/testsets", srv.LIST_TESTSETS)
	add_UPDATE("PUT", "/api/testplans/{testPlanID}", srv.UPDATE)
}
