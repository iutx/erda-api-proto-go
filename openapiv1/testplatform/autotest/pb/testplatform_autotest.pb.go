// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: testplatform_autotest.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ACTION_LOG_DOWNLOAD_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode string `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"` // generated from path variable: inode. You should change the proto type if necessary.
}

func (x *ACTION_LOG_DOWNLOAD_Request) Reset() {
	*x = ACTION_LOG_DOWNLOAD_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACTION_LOG_DOWNLOAD_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACTION_LOG_DOWNLOAD_Request) ProtoMessage() {}

func (x *ACTION_LOG_DOWNLOAD_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACTION_LOG_DOWNLOAD_Request.ProtoReflect.Descriptor instead.
func (*ACTION_LOG_DOWNLOAD_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{0}
}

func (x *ACTION_LOG_DOWNLOAD_Request) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

type ACTION_LOG_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode string `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"` // generated from path variable: inode. You should change the proto type if necessary.
}

func (x *ACTION_LOG_GET_Request) Reset() {
	*x = ACTION_LOG_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACTION_LOG_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACTION_LOG_GET_Request) ProtoMessage() {}

func (x *ACTION_LOG_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACTION_LOG_GET_Request.ProtoReflect.Descriptor instead.
func (*ACTION_LOG_GET_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{1}
}

func (x *ACTION_LOG_GET_Request) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

type AUTOTESTS_SCENES_CANCEL_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneID string `protobuf:"bytes,1,opt,name=sceneID,proto3" json:"sceneID,omitempty"` // generated from path variable: sceneID. You should change the proto type if necessary.
}

func (x *AUTOTESTS_SCENES_CANCEL_Request) Reset() {
	*x = AUTOTESTS_SCENES_CANCEL_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AUTOTESTS_SCENES_CANCEL_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AUTOTESTS_SCENES_CANCEL_Request) ProtoMessage() {}

func (x *AUTOTESTS_SCENES_CANCEL_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AUTOTESTS_SCENES_CANCEL_Request.ProtoReflect.Descriptor instead.
func (*AUTOTESTS_SCENES_CANCEL_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{2}
}

func (x *AUTOTESTS_SCENES_CANCEL_Request) GetSceneID() string {
	if x != nil {
		return x.SceneID
	}
	return ""
}

type AUTOTESTS_SCENES_EXECUTE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneID string `protobuf:"bytes,1,opt,name=sceneID,proto3" json:"sceneID,omitempty"` // generated from path variable: sceneID. You should change the proto type if necessary.
}

func (x *AUTOTESTS_SCENES_EXECUTE_Request) Reset() {
	*x = AUTOTESTS_SCENES_EXECUTE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AUTOTESTS_SCENES_EXECUTE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AUTOTESTS_SCENES_EXECUTE_Request) ProtoMessage() {}

func (x *AUTOTESTS_SCENES_EXECUTE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AUTOTESTS_SCENES_EXECUTE_Request.ProtoReflect.Descriptor instead.
func (*AUTOTESTS_SCENES_EXECUTE_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{3}
}

func (x *AUTOTESTS_SCENES_EXECUTE_Request) GetSceneID() string {
	if x != nil {
		return x.SceneID
	}
	return ""
}

type AutoTestCaseSavePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode       string            `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"`
	PipelineYml string            `protobuf:"bytes,2,opt,name=pipelineYml,proto3" json:"pipelineYml,omitempty"`
	RunParams   []*structpb.Value `protobuf:"bytes,3,rep,name=runParams,proto3" json:"runParams,omitempty"`
}

func (x *AutoTestCaseSavePipelineRequest) Reset() {
	*x = AutoTestCaseSavePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestCaseSavePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestCaseSavePipelineRequest) ProtoMessage() {}

func (x *AutoTestCaseSavePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestCaseSavePipelineRequest.ProtoReflect.Descriptor instead.
func (*AutoTestCaseSavePipelineRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{4}
}

func (x *AutoTestCaseSavePipelineRequest) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *AutoTestCaseSavePipelineRequest) GetPipelineYml() string {
	if x != nil {
		return x.PipelineYml
	}
	return ""
}

func (x *AutoTestCaseSavePipelineRequest) GetRunParams() []*structpb.Value {
	if x != nil {
		return x.RunParams
	}
	return nil
}

type AutoTestCaseSavePipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *AutoTestCaseSavePipelineResponse) Reset() {
	*x = AutoTestCaseSavePipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestCaseSavePipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestCaseSavePipelineResponse) ProtoMessage() {}

func (x *AutoTestCaseSavePipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestCaseSavePipelineResponse.ProtoReflect.Descriptor instead.
func (*AutoTestCaseSavePipelineResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{5}
}

func (x *AutoTestCaseSavePipelineResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type AutoTestGlobalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope       string                 `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID     string                 `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	Ns          string                 `protobuf:"bytes,3,opt,name=ns,proto3" json:"ns,omitempty"`
	DisplayName string                 `protobuf:"bytes,4,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Desc        string                 `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	CreatorID   string                 `protobuf:"bytes,6,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	UpdaterID   string                 `protobuf:"bytes,7,opt,name=updaterID,proto3" json:"updaterID,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	APIConfig   *structpb.Value        `protobuf:"bytes,10,opt,name=aPIConfig,json=apiConfig,proto3,oneof" json:"aPIConfig,omitempty"`
	UIConfig    *structpb.Value        `protobuf:"bytes,11,opt,name=uIConfig,json=uiConfig,proto3,oneof" json:"uIConfig,omitempty"`
}

func (x *AutoTestGlobalConfig) Reset() {
	*x = AutoTestGlobalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestGlobalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestGlobalConfig) ProtoMessage() {}

func (x *AutoTestGlobalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestGlobalConfig.ProtoReflect.Descriptor instead.
func (*AutoTestGlobalConfig) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{6}
}

func (x *AutoTestGlobalConfig) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AutoTestGlobalConfig) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *AutoTestGlobalConfig) GetNs() string {
	if x != nil {
		return x.Ns
	}
	return ""
}

func (x *AutoTestGlobalConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AutoTestGlobalConfig) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *AutoTestGlobalConfig) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *AutoTestGlobalConfig) GetUpdaterID() string {
	if x != nil {
		return x.UpdaterID
	}
	return ""
}

func (x *AutoTestGlobalConfig) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AutoTestGlobalConfig) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AutoTestGlobalConfig) GetAPIConfig() *structpb.Value {
	if x != nil {
		return x.APIConfig
	}
	return nil
}

func (x *AutoTestGlobalConfig) GetUIConfig() *structpb.Value {
	if x != nil {
		return x.UIConfig
	}
	return nil
}

type AutoTestGlobalConfigCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope       string          `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID     string          `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	DisplayName string          `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Desc        string          `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	APIConfig   *structpb.Value `protobuf:"bytes,5,opt,name=aPIConfig,json=apiConfig,proto3,oneof" json:"aPIConfig,omitempty"`
	UIConfig    *structpb.Value `protobuf:"bytes,6,opt,name=uIConfig,json=uiConfig,proto3,oneof" json:"uIConfig,omitempty"`
}

func (x *AutoTestGlobalConfigCreateRequest) Reset() {
	*x = AutoTestGlobalConfigCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestGlobalConfigCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestGlobalConfigCreateRequest) ProtoMessage() {}

func (x *AutoTestGlobalConfigCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestGlobalConfigCreateRequest.ProtoReflect.Descriptor instead.
func (*AutoTestGlobalConfigCreateRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{7}
}

func (x *AutoTestGlobalConfigCreateRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AutoTestGlobalConfigCreateRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *AutoTestGlobalConfigCreateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AutoTestGlobalConfigCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *AutoTestGlobalConfigCreateRequest) GetAPIConfig() *structpb.Value {
	if x != nil {
		return x.APIConfig
	}
	return nil
}

func (x *AutoTestGlobalConfigCreateRequest) GetUIConfig() *structpb.Value {
	if x != nil {
		return x.UIConfig
	}
	return nil
}

type AutoTestGlobalConfigCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *AutoTestGlobalConfigCreateResponse) Reset() {
	*x = AutoTestGlobalConfigCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestGlobalConfigCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestGlobalConfigCreateResponse) ProtoMessage() {}

func (x *AutoTestGlobalConfigCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestGlobalConfigCreateResponse.ProtoReflect.Descriptor instead.
func (*AutoTestGlobalConfigCreateResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{8}
}

func (x *AutoTestGlobalConfigCreateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type AutoTestGlobalConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineCmsNs string `protobuf:"bytes,1,opt,name=pipelineCmsNs,json=ns,proto3" json:"pipelineCmsNs,omitempty"`
	Ns            string `protobuf:"bytes,2,opt,name=ns,proto3" json:"ns,omitempty"` // generated from path variable: ns. You should change the proto type if necessary.
}

func (x *AutoTestGlobalConfigDeleteRequest) Reset() {
	*x = AutoTestGlobalConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestGlobalConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestGlobalConfigDeleteRequest) ProtoMessage() {}

func (x *AutoTestGlobalConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestGlobalConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*AutoTestGlobalConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{9}
}

func (x *AutoTestGlobalConfigDeleteRequest) GetPipelineCmsNs() string {
	if x != nil {
		return x.PipelineCmsNs
	}
	return ""
}

func (x *AutoTestGlobalConfigDeleteRequest) GetNs() string {
	if x != nil {
		return x.Ns
	}
	return ""
}

type AutoTestGlobalConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *AutoTestGlobalConfigDeleteResponse) Reset() {
	*x = AutoTestGlobalConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestGlobalConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestGlobalConfigDeleteResponse) ProtoMessage() {}

func (x *AutoTestGlobalConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestGlobalConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*AutoTestGlobalConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{10}
}

func (x *AutoTestGlobalConfigDeleteResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type AutoTestGlobalConfigListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID string `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
}

func (x *AutoTestGlobalConfigListRequest) Reset() {
	*x = AutoTestGlobalConfigListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestGlobalConfigListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestGlobalConfigListRequest) ProtoMessage() {}

func (x *AutoTestGlobalConfigListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestGlobalConfigListRequest.ProtoReflect.Descriptor instead.
func (*AutoTestGlobalConfigListRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{11}
}

func (x *AutoTestGlobalConfigListRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AutoTestGlobalConfigListRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type AutoTestGlobalConfigListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AutoTestGlobalConfigListResponse) Reset() {
	*x = AutoTestGlobalConfigListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestGlobalConfigListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestGlobalConfigListResponse) ProtoMessage() {}

func (x *AutoTestGlobalConfigListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestGlobalConfigListResponse.ProtoReflect.Descriptor instead.
func (*AutoTestGlobalConfigListResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{12}
}

func (x *AutoTestGlobalConfigListResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type AutoTestGlobalConfigUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineCmsNs string          `protobuf:"bytes,1,opt,name=pipelineCmsNs,json=ns,proto3" json:"pipelineCmsNs,omitempty"`
	DisplayName   string          `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Desc          string          `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	APIConfig     *structpb.Value `protobuf:"bytes,4,opt,name=aPIConfig,json=apiConfig,proto3,oneof" json:"aPIConfig,omitempty"`
	UIConfig      *structpb.Value `protobuf:"bytes,5,opt,name=uIConfig,json=uiConfig,proto3,oneof" json:"uIConfig,omitempty"`
	Ns            string          `protobuf:"bytes,6,opt,name=ns,proto3" json:"ns,omitempty"` // generated from path variable: ns. You should change the proto type if necessary.
}

func (x *AutoTestGlobalConfigUpdateRequest) Reset() {
	*x = AutoTestGlobalConfigUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestGlobalConfigUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestGlobalConfigUpdateRequest) ProtoMessage() {}

func (x *AutoTestGlobalConfigUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestGlobalConfigUpdateRequest.ProtoReflect.Descriptor instead.
func (*AutoTestGlobalConfigUpdateRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{13}
}

func (x *AutoTestGlobalConfigUpdateRequest) GetPipelineCmsNs() string {
	if x != nil {
		return x.PipelineCmsNs
	}
	return ""
}

func (x *AutoTestGlobalConfigUpdateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AutoTestGlobalConfigUpdateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *AutoTestGlobalConfigUpdateRequest) GetAPIConfig() *structpb.Value {
	if x != nil {
		return x.APIConfig
	}
	return nil
}

func (x *AutoTestGlobalConfigUpdateRequest) GetUIConfig() *structpb.Value {
	if x != nil {
		return x.UIConfig
	}
	return nil
}

func (x *AutoTestGlobalConfigUpdateRequest) GetNs() string {
	if x != nil {
		return x.Ns
	}
	return ""
}

type AutoTestGlobalConfigUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *AutoTestGlobalConfigUpdateResponse) Reset() {
	*x = AutoTestGlobalConfigUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestGlobalConfigUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestGlobalConfigUpdateResponse) ProtoMessage() {}

func (x *AutoTestGlobalConfigUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestGlobalConfigUpdateResponse.ProtoReflect.Descriptor instead.
func (*AutoTestGlobalConfigUpdateResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{14}
}

func (x *AutoTestGlobalConfigUpdateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type AutoTestSceneSetImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	SpaceID   uint64 `protobuf:"varint,2,opt,name=spaceID,proto3" json:"spaceID,omitempty"`
	FileType  string `protobuf:"bytes,3,opt,name=fileType,proto3" json:"fileType,omitempty"`
}

func (x *AutoTestSceneSetImportRequest) Reset() {
	*x = AutoTestSceneSetImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestSceneSetImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestSceneSetImportRequest) ProtoMessage() {}

func (x *AutoTestSceneSetImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestSceneSetImportRequest.ProtoReflect.Descriptor instead.
func (*AutoTestSceneSetImportRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{15}
}

func (x *AutoTestSceneSetImportRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *AutoTestSceneSetImportRequest) GetSpaceID() uint64 {
	if x != nil {
		return x.SpaceID
	}
	return 0
}

func (x *AutoTestSceneSetImportRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

type AutoTestSceneSetImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AutoTestSceneSetImportResponse) Reset() {
	*x = AutoTestSceneSetImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestSceneSetImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestSceneSetImportResponse) ProtoMessage() {}

func (x *AutoTestSceneSetImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestSceneSetImportResponse.ProtoReflect.Descriptor instead.
func (*AutoTestSceneSetImportResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{16}
}

func (x *AutoTestSceneSetImportResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type AutoTestSpaceExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint64 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Locale    string `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
	IsCopy    bool   `protobuf:"varint,3,opt,name=isCopy,json=-,proto3" json:"isCopy,omitempty"`
	FileType  string `protobuf:"bytes,4,opt,name=fileType,proto3" json:"fileType,omitempty"`
	ProjectID uint64 `protobuf:"varint,5,opt,name=projectID,proto3" json:"projectID,omitempty"`
	SpaceName string `protobuf:"bytes,6,opt,name=spaceName,proto3" json:"spaceName,omitempty"`
}

func (x *AutoTestSpaceExportRequest) Reset() {
	*x = AutoTestSpaceExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestSpaceExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestSpaceExportRequest) ProtoMessage() {}

func (x *AutoTestSpaceExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestSpaceExportRequest.ProtoReflect.Descriptor instead.
func (*AutoTestSpaceExportRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{17}
}

func (x *AutoTestSpaceExportRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AutoTestSpaceExportRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *AutoTestSpaceExportRequest) GetIsCopy() bool {
	if x != nil {
		return x.IsCopy
	}
	return false
}

func (x *AutoTestSpaceExportRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *AutoTestSpaceExportRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *AutoTestSpaceExportRequest) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type AutoTestSpaceExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AutoTestSpaceExportResponse) Reset() {
	*x = AutoTestSpaceExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestSpaceExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestSpaceExportResponse) ProtoMessage() {}

func (x *AutoTestSpaceExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestSpaceExportResponse.ProtoReflect.Descriptor instead.
func (*AutoTestSpaceExportResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{18}
}

func (x *AutoTestSpaceExportResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type AutoTestSpaceImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	FileType  string `protobuf:"bytes,2,opt,name=fileType,proto3" json:"fileType,omitempty"`
}

func (x *AutoTestSpaceImportRequest) Reset() {
	*x = AutoTestSpaceImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestSpaceImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestSpaceImportRequest) ProtoMessage() {}

func (x *AutoTestSpaceImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestSpaceImportRequest.ProtoReflect.Descriptor instead.
func (*AutoTestSpaceImportRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{19}
}

func (x *AutoTestSpaceImportRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *AutoTestSpaceImportRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

type AutoTestSpaceImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AutoTestSpaceImportResponse) Reset() {
	*x = AutoTestSpaceImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoTestSpaceImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoTestSpaceImportResponse) ProtoMessage() {}

func (x *AutoTestSpaceImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoTestSpaceImportResponse.ProtoReflect.Descriptor instead.
func (*AutoTestSpaceImportResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{20}
}

func (x *AutoTestSpaceImportResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type CreateTestReportRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTestReportRecordResponse) Reset() {
	*x = CreateTestReportRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestReportRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestReportRecordResponse) ProtoMessage() {}

func (x *CreateTestReportRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestReportRecordResponse.ProtoReflect.Descriptor instead.
func (*CreateTestReportRecordResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{21}
}

func (x *CreateTestReportRecordResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetTestReportRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTestReportRecordResponse) Reset() {
	*x = GetTestReportRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestReportRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestReportRecordResponse) ProtoMessage() {}

func (x *GetTestReportRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestReportRecordResponse.ProtoReflect.Descriptor instead.
func (*GetTestReportRecordResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{22}
}

func (x *GetTestReportRecordResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PipelineRunParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *structpb.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PipelineRunParam) Reset() {
	*x = PipelineRunParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRunParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRunParam) ProtoMessage() {}

func (x *PipelineRunParam) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRunParam.ProtoReflect.Descriptor instead.
func (*PipelineRunParam) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{23}
}

func (x *PipelineRunParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineRunParam) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type QA_REPORTSETS_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID string `protobuf:"bytes,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"` // generated from path variable: pipelineID. You should change the proto type if necessary.
}

func (x *QA_REPORTSETS_LIST_Request) Reset() {
	*x = QA_REPORTSETS_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QA_REPORTSETS_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QA_REPORTSETS_LIST_Request) ProtoMessage() {}

func (x *QA_REPORTSETS_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QA_REPORTSETS_LIST_Request.ProtoReflect.Descriptor instead.
func (*QA_REPORTSETS_LIST_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{24}
}

func (x *QA_REPORTSETS_LIST_Request) GetPipelineID() string {
	if x != nil {
		return x.PipelineID
	}
	return ""
}

type TestReportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueDashboard *structpb.Value `protobuf:"bytes,1,opt,name=issueDashboard,json=issue-dashboard,proto3,oneof" json:"issueDashboard,omitempty"`
	TestDashboard  *structpb.Value `protobuf:"bytes,2,opt,name=testDashboard,json=test-dashboard,proto3,oneof" json:"testDashboard,omitempty"`
}

func (x *TestReportData) Reset() {
	*x = TestReportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportData) ProtoMessage() {}

func (x *TestReportData) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportData.ProtoReflect.Descriptor instead.
func (*TestReportData) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{25}
}

func (x *TestReportData) GetIssueDashboard() *structpb.Value {
	if x != nil {
		return x.IssueDashboard
	}
	return nil
}

func (x *TestReportData) GetTestDashboard() *structpb.Value {
	if x != nil {
		return x.TestDashboard
	}
	return nil
}

type TestReportRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	ProjectID    uint64                 `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	IterationID  uint64                 `protobuf:"varint,3,opt,name=iterationID,proto3" json:"iterationID,omitempty"`
	CreatorID    string                 `protobuf:"bytes,4,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Name         string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Summary      string                 `protobuf:"bytes,8,opt,name=summary,proto3" json:"summary,omitempty"`
	QualityScore float64                `protobuf:"fixed64,9,opt,name=qualityScore,proto3" json:"qualityScore,omitempty"`
	ReportData   *structpb.Value        `protobuf:"bytes,10,opt,name=reportData,proto3" json:"reportData,omitempty"`
}

func (x *TestReportRecord) Reset() {
	*x = TestReportRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportRecord) ProtoMessage() {}

func (x *TestReportRecord) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportRecord.ProtoReflect.Descriptor instead.
func (*TestReportRecord) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{26}
}

func (x *TestReportRecord) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TestReportRecord) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *TestReportRecord) GetIterationID() uint64 {
	if x != nil {
		return x.IterationID
	}
	return 0
}

func (x *TestReportRecord) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *TestReportRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TestReportRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TestReportRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestReportRecord) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *TestReportRecord) GetQualityScore() float64 {
	if x != nil {
		return x.QualityScore
	}
	return 0
}

func (x *TestReportRecord) GetReportData() *structpb.Value {
	if x != nil {
		return x.ReportData
	}
	return nil
}

type UnifiedFileTreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string                     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Inode     string                     `protobuf:"bytes,2,opt,name=inode,proto3" json:"inode,omitempty"`
	Pinode    string                     `protobuf:"bytes,3,opt,name=pinode,proto3" json:"pinode,omitempty"`
	Scope     string                     `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID   string                     `protobuf:"bytes,5,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	Name      string                     `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Desc      string                     `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	CreatorID string                     `protobuf:"bytes,8,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	UpdaterID string                     `protobuf:"bytes,9,opt,name=updaterID,proto3" json:"updaterID,omitempty"`
	CreatedAt *timestamppb.Timestamp     `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp     `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Meta      map[string]*structpb.Value `protobuf:"bytes,12,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UnifiedFileTreeNode) Reset() {
	*x = UnifiedFileTreeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNode) ProtoMessage() {}

func (x *UnifiedFileTreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNode.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNode) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{27}
}

func (x *UnifiedFileTreeNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UnifiedFileTreeNode) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *UnifiedFileTreeNode) GetPinode() string {
	if x != nil {
		return x.Pinode
	}
	return ""
}

func (x *UnifiedFileTreeNode) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnifiedFileTreeNode) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *UnifiedFileTreeNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UnifiedFileTreeNode) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *UnifiedFileTreeNode) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *UnifiedFileTreeNode) GetUpdaterID() string {
	if x != nil {
		return x.UpdaterID
	}
	return ""
}

func (x *UnifiedFileTreeNode) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UnifiedFileTreeNode) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UnifiedFileTreeNode) GetMeta() map[string]*structpb.Value {
	if x != nil {
		return x.Meta
	}
	return nil
}

type UnifiedFileTreeNodeCopyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode  string `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Pinode string `protobuf:"bytes,2,opt,name=pinode,proto3" json:"pinode,omitempty"`
}

func (x *UnifiedFileTreeNodeCopyRequest) Reset() {
	*x = UnifiedFileTreeNodeCopyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeCopyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeCopyRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeCopyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeCopyRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeCopyRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{28}
}

func (x *UnifiedFileTreeNodeCopyRequest) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *UnifiedFileTreeNodeCopyRequest) GetPinode() string {
	if x != nil {
		return x.Pinode
	}
	return ""
}

type UnifiedFileTreeNodeCopyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *UnifiedFileTreeNodeCopyResponse) Reset() {
	*x = UnifiedFileTreeNodeCopyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeCopyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeCopyResponse) ProtoMessage() {}

func (x *UnifiedFileTreeNodeCopyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeCopyResponse.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeCopyResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{29}
}

func (x *UnifiedFileTreeNodeCopyResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type UnifiedFileTreeNodeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID string `protobuf:"bytes,3,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	Pinode  string `protobuf:"bytes,4,opt,name=pinode,proto3" json:"pinode,omitempty"`
	Name    string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Desc    string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *UnifiedFileTreeNodeCreateRequest) Reset() {
	*x = UnifiedFileTreeNodeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeCreateRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeCreateRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeCreateRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{30}
}

func (x *UnifiedFileTreeNodeCreateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UnifiedFileTreeNodeCreateRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnifiedFileTreeNodeCreateRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *UnifiedFileTreeNodeCreateRequest) GetPinode() string {
	if x != nil {
		return x.Pinode
	}
	return ""
}

func (x *UnifiedFileTreeNodeCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UnifiedFileTreeNodeCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type UnifiedFileTreeNodeCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *UnifiedFileTreeNodeCreateResponse) Reset() {
	*x = UnifiedFileTreeNodeCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeCreateResponse) ProtoMessage() {}

func (x *UnifiedFileTreeNodeCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeCreateResponse.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeCreateResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{31}
}

func (x *UnifiedFileTreeNodeCreateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type UnifiedFileTreeNodeDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode   string `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID string `protobuf:"bytes,3,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
}

func (x *UnifiedFileTreeNodeDeleteRequest) Reset() {
	*x = UnifiedFileTreeNodeDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeDeleteRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeDeleteRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeDeleteRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{32}
}

func (x *UnifiedFileTreeNodeDeleteRequest) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *UnifiedFileTreeNodeDeleteRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnifiedFileTreeNodeDeleteRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type UnifiedFileTreeNodeDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *UnifiedFileTreeNodeDeleteResponse) Reset() {
	*x = UnifiedFileTreeNodeDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeDeleteResponse) ProtoMessage() {}

func (x *UnifiedFileTreeNodeDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeDeleteResponse.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeDeleteResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{33}
}

func (x *UnifiedFileTreeNodeDeleteResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type UnifiedFileTreeNodeFindAncestorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode   string `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID string `protobuf:"bytes,3,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
}

func (x *UnifiedFileTreeNodeFindAncestorsRequest) Reset() {
	*x = UnifiedFileTreeNodeFindAncestorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeFindAncestorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeFindAncestorsRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeFindAncestorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeFindAncestorsRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeFindAncestorsRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{34}
}

func (x *UnifiedFileTreeNodeFindAncestorsRequest) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *UnifiedFileTreeNodeFindAncestorsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnifiedFileTreeNodeFindAncestorsRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type UnifiedFileTreeNodeFindAncestorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UnifiedFileTreeNodeFindAncestorsResponse) Reset() {
	*x = UnifiedFileTreeNodeFindAncestorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeFindAncestorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeFindAncestorsResponse) ProtoMessage() {}

func (x *UnifiedFileTreeNodeFindAncestorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeFindAncestorsResponse.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeFindAncestorsResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{35}
}

func (x *UnifiedFileTreeNodeFindAncestorsResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type UnifiedFileTreeNodeFuzzySearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope       string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID     string `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	FromPinode  string `protobuf:"bytes,3,opt,name=fromPinode,proto3" json:"fromPinode,omitempty"`
	Recursive   bool   `protobuf:"varint,4,opt,name=recursive,proto3" json:"recursive,omitempty"`
	PrefixFuzzy string `protobuf:"bytes,5,opt,name=prefixFuzzy,proto3" json:"prefixFuzzy,omitempty"`
	SuffixFuzzy string `protobuf:"bytes,6,opt,name=suffixFuzzy,proto3" json:"suffixFuzzy,omitempty"`
	Fuzzy       string `protobuf:"bytes,7,opt,name=fuzzy,proto3" json:"fuzzy,omitempty"`
	CreatorID   string `protobuf:"bytes,8,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) Reset() {
	*x = UnifiedFileTreeNodeFuzzySearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeFuzzySearchRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeFuzzySearchRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeFuzzySearchRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{36}
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetFromPinode() string {
	if x != nil {
		return x.FromPinode
	}
	return ""
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetPrefixFuzzy() string {
	if x != nil {
		return x.PrefixFuzzy
	}
	return ""
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetSuffixFuzzy() string {
	if x != nil {
		return x.SuffixFuzzy
	}
	return ""
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetFuzzy() string {
	if x != nil {
		return x.Fuzzy
	}
	return ""
}

func (x *UnifiedFileTreeNodeFuzzySearchRequest) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

type UnifiedFileTreeNodeFuzzySearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UnifiedFileTreeNodeFuzzySearchResponse) Reset() {
	*x = UnifiedFileTreeNodeFuzzySearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeFuzzySearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeFuzzySearchResponse) ProtoMessage() {}

func (x *UnifiedFileTreeNodeFuzzySearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeFuzzySearchResponse.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeFuzzySearchResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{37}
}

func (x *UnifiedFileTreeNodeFuzzySearchResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type UnifiedFileTreeNodeGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode   string `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID string `protobuf:"bytes,3,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
}

func (x *UnifiedFileTreeNodeGetRequest) Reset() {
	*x = UnifiedFileTreeNodeGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeGetRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeGetRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeGetRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{38}
}

func (x *UnifiedFileTreeNodeGetRequest) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *UnifiedFileTreeNodeGetRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnifiedFileTreeNodeGetRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

type UnifiedFileTreeNodeGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *UnifiedFileTreeNodeGetResponse) Reset() {
	*x = UnifiedFileTreeNodeGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeGetResponse) ProtoMessage() {}

func (x *UnifiedFileTreeNodeGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeGetResponse.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeGetResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{39}
}

func (x *UnifiedFileTreeNodeGetResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type UnifiedFileTreeNodeHistorySearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode string `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"`
}

func (x *UnifiedFileTreeNodeHistorySearchRequest) Reset() {
	*x = UnifiedFileTreeNodeHistorySearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeHistorySearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeHistorySearchRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeHistorySearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeHistorySearchRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeHistorySearchRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{40}
}

func (x *UnifiedFileTreeNodeHistorySearchRequest) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

type UnifiedFileTreeNodeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope               string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID             string `protobuf:"bytes,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	Pinode              string `protobuf:"bytes,3,opt,name=pinode,proto3" json:"pinode,omitempty"`
	PipelineCategoryKey string `protobuf:"bytes,4,opt,name=pipelineCategoryKey,proto3" json:"pipelineCategoryKey,omitempty"`
}

func (x *UnifiedFileTreeNodeListRequest) Reset() {
	*x = UnifiedFileTreeNodeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeListRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeListRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeListRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{41}
}

func (x *UnifiedFileTreeNodeListRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UnifiedFileTreeNodeListRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *UnifiedFileTreeNodeListRequest) GetPinode() string {
	if x != nil {
		return x.Pinode
	}
	return ""
}

func (x *UnifiedFileTreeNodeListRequest) GetPipelineCategoryKey() string {
	if x != nil {
		return x.PipelineCategoryKey
	}
	return ""
}

type UnifiedFileTreeNodeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UnifiedFileTreeNodeListResponse) Reset() {
	*x = UnifiedFileTreeNodeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeListResponse) ProtoMessage() {}

func (x *UnifiedFileTreeNodeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeListResponse.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeListResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{42}
}

func (x *UnifiedFileTreeNodeListResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type UnifiedFileTreeNodeMoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode  string `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Pinode string `protobuf:"bytes,2,opt,name=pinode,proto3" json:"pinode,omitempty"`
}

func (x *UnifiedFileTreeNodeMoveRequest) Reset() {
	*x = UnifiedFileTreeNodeMoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeMoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeMoveRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeMoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeMoveRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeMoveRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{43}
}

func (x *UnifiedFileTreeNodeMoveRequest) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *UnifiedFileTreeNodeMoveRequest) GetPinode() string {
	if x != nil {
		return x.Pinode
	}
	return ""
}

type UnifiedFileTreeNodeMoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *UnifiedFileTreeNodeMoveResponse) Reset() {
	*x = UnifiedFileTreeNodeMoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeMoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeMoveResponse) ProtoMessage() {}

func (x *UnifiedFileTreeNodeMoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeMoveResponse.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeMoveResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{44}
}

func (x *UnifiedFileTreeNodeMoveResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type UnifiedFileTreeNodeUpdateBasicInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inode string  `protobuf:"bytes,1,opt,name=inode,proto3" json:"inode,omitempty"`
	Name  *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Desc  *string `protobuf:"bytes,3,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
}

func (x *UnifiedFileTreeNodeUpdateBasicInfoRequest) Reset() {
	*x = UnifiedFileTreeNodeUpdateBasicInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeUpdateBasicInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeUpdateBasicInfoRequest) ProtoMessage() {}

func (x *UnifiedFileTreeNodeUpdateBasicInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeUpdateBasicInfoRequest.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeUpdateBasicInfoRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{45}
}

func (x *UnifiedFileTreeNodeUpdateBasicInfoRequest) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *UnifiedFileTreeNodeUpdateBasicInfoRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UnifiedFileTreeNodeUpdateBasicInfoRequest) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

type UnifiedFileTreeNodeUpdateBasicInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *UnifiedFileTreeNodeUpdateBasicInfoResponse) Reset() {
	*x = UnifiedFileTreeNodeUpdateBasicInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_autotest_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnifiedFileTreeNodeUpdateBasicInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedFileTreeNodeUpdateBasicInfoResponse) ProtoMessage() {}

func (x *UnifiedFileTreeNodeUpdateBasicInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_autotest_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedFileTreeNodeUpdateBasicInfoResponse.ProtoReflect.Descriptor instead.
func (*UnifiedFileTreeNodeUpdateBasicInfoResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_autotest_proto_rawDescGZIP(), []int{46}
}

func (x *UnifiedFileTreeNodeUpdateBasicInfoResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_testplatform_autotest_proto protoreflect.FileDescriptor

var file_testplatform_autotest_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x33, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x4f, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x2e, 0x0a, 0x16, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x3b, 0x0a, 0x1f, 0x41, 0x55, 0x54,
	0x4f, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x53, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x22, 0x3c, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x45,
	0x53, 0x54, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x44, 0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x59, 0x6d, 0x6c,
	0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x75, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x5c, 0x0a, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xcb, 0x03, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73,
	0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x08, 0x75, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x08, 0x75, 0x69, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x50, 0x49, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x49, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x98, 0x02, 0x0a, 0x21, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x39,
	0x0a, 0x09, 0x61, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x70, 0x69,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x49, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x08, 0x75, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5e, 0x0a,
	0x22, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a,
	0x21, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6d,
	0x73, 0x4e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x73, 0x22, 0x5e, 0x0a,
	0x22, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a,
	0x1f, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44,
	0x22, 0x4e, 0x0a, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x93, 0x02, 0x0a, 0x21, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6d, 0x73, 0x4e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x50, 0x49, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x08,
	0x75, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x61, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x49,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5e, 0x0a, 0x22, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65,
	0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x73, 0x0a, 0x1d, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x1e, 0x41,
	0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xaf, 0x01, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x11, 0x0a, 0x06, 0x69, 0x73, 0x43, 0x6f,
	0x70, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x2d, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x1b, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x31,
	0x0a, 0x1b, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x30, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54,
	0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x1a, 0x51, 0x41, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x74,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x74, 0x65,
	0x73, 0x74, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x22, 0xfe, 0x02, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x80, 0x04, 0x0a, 0x13, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x4f, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x1e, 0x55, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x70, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x1f, 0x55, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x70, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa6, 0x01, 0x0a, 0x20, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x5d,
	0x0a, 0x21, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x68, 0x0a,
	0x20, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x22, 0x5d, 0x0a, 0x21, 0x55, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x27, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x28, 0x55, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x8d, 0x02, 0x0a, 0x25, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x50, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x50, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x75, 0x7a, 0x7a, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x75, 0x7a, 0x7a,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22,
	0x54, 0x0a, 0x26, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x1d, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x22, 0x5a, 0x0a, 0x1e,
	0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x27, 0x55, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x1e, 0x55, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x4d, 0x0a, 0x1f, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x1e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x1f, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x85, 0x01, 0x0a, 0x29, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x22, 0x66, 0x0a, 0x2a, 0x55, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x32, 0xd9, 0x3b, 0x0a, 0x15, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x12, 0xa0, 0x02, 0x0a,
	0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x4c, 0x4f, 0x41, 0x44, 0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12,
	0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x6f, 0x67, 0xfa, 0x81, 0xf9, 0x1b,
	0x6e, 0x0a, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64,
	0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x6f, 0x67, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x29, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0xe8, 0x87, 0xaa, 0xe5,
	0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0x8a, 0x82, 0xe7, 0x82,
	0xb9, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0x12,
	0x8c, 0x02, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x47,
	0x45, 0x54, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0xac, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65,
	0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x6f, 0x67,
	0xfa, 0x81, 0xf9, 0x1b, 0x69, 0x0a, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67,
	0x65, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x6f, 0x67, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x29, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c, 0x8b, 0xe8, 0x87, 0xaa, 0xe5, 0x8a,
	0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0x12, 0x84,
	0x02, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x12, 0x3c, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x45, 0x53,
	0x54, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x92, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x2f, 0x7b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0xfa, 0x81, 0xf9, 0x1b, 0x57, 0x0a, 0x2e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x21, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b,
	0xe8, 0xaf, 0x95, 0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe5, 0x8f, 0x96, 0xe6, 0xb6, 0x88, 0xe6,
	0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0x12, 0x84, 0x02, 0x0a, 0x18, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x45,
	0x53, 0x54, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x45, 0x12, 0x3d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x31, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x54, 0x0a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x2f,
	0x7b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x1b, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95,
	0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0x12, 0xc1, 0x02, 0x0a,
	0x21, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x49, 0x50,
	0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x4e, 0x49, 0x50, 0x50, 0x45, 0x54, 0x5f, 0x59, 0x41,
	0x4d, 0x4c, 0x12, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x61, 0x76,
	0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xc5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x42, 0x22, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x2d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x2d,
	0x79, 0x6d, 0x6c, 0xfa, 0x81, 0xf9, 0x1b, 0x78, 0x0a, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x73,
	0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x2d, 0x79, 0x6d, 0x6c, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x30,
	0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x87, 0xaa, 0xe5,
	0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x94, 0xa8, 0xe4, 0xbe,
	0x8b, 0xe6, 0xb5, 0x81, 0xe6, 0xb0, 0xb4, 0xe7, 0xba, 0xbf, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6,
	0x12, 0xa3, 0x02, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x12, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x91, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x2c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0xfa, 0x81, 0xf9, 0x1b, 0x58, 0x0a, 0x2c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x24, 0xe5, 0xa4, 0x8d, 0xe5, 0x88, 0xb6, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c,
	0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe6, 0xa0, 0x91,
	0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x12, 0xfe, 0x01, 0x0a, 0x14, 0x46, 0x49, 0x4c, 0x45, 0x54,
	0x52, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12,
	0x3d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74,
	0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0xfa,
	0x81, 0xf9, 0x1b, 0x43, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x24, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5,
	0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe6, 0xa0,
	0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x12, 0x8e, 0x02, 0x0a, 0x14, 0x46, 0x49, 0x4c, 0x45,
	0x54, 0x52, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x12, 0x3d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75,
	0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65,
	0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x4b, 0x0a, 0x1f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x24, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8,
	0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe6,
	0xa0, 0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x12, 0xd3, 0x02, 0x0a, 0x1c, 0x46, 0x49, 0x4c,
	0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x5f,
	0x41, 0x4e, 0x43, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x53, 0x12, 0x44, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x45, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12,
	0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x2d, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x62, 0x0a, 0x36, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x2d, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x24, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8,
	0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe6,
	0xa0, 0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xaf, 0xbb, 0xe7, 0xa5, 0x96, 0x12, 0xbf,
	0x02, 0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x46, 0x55, 0x5a, 0x5a, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x12, 0x42, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46,
	0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x43, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12,
	0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0xfa, 0x81, 0xf9,
	0x1b, 0x5e, 0x0a, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x32, 0x02, 0x10, 0x01, 0x3a, 0x2a, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6,
	0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe6, 0xa0, 0x91, 0xe8, 0x8a,
	0x82, 0xe7, 0x82, 0xb9, 0xe6, 0xa8, 0xa1, 0xe7, 0xb3, 0x8a, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2,
	0x12, 0x8b, 0x02, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75,
	0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65,
	0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x51, 0x0a, 0x1f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x2a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8,
	0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe6,
	0xa0, 0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xa0,
	0x02, 0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x44, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa3, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69,
	0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65,
	0x74, 0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x61,
	0x0a, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x24, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8,
	0xaf, 0x95, 0xe7, 0x9a, 0x84, 0xe5, 0x8e, 0x86, 0xe5, 0x8f, 0xb2, 0xe8, 0xae, 0xb0, 0xe5, 0xbd,
	0x95, 0x12, 0xfe, 0x01, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x74, 0x72, 0x65, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x49, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72,
	0x65, 0x65, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x2a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x87,
	0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x9b, 0xae,
	0xe5, 0xbd, 0x95, 0xe6, 0xa0, 0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x12, 0xa9, 0x02, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x12, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x2c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x6f, 0x76, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x5e,
	0x0a, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x6f, 0x76, 0x65, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x2a, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa8, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8,
	0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe6,
	0xa0, 0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x12, 0xc0,
	0x02, 0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x12, 0x3c,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69,
	0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x61,
	0x76, 0x65, 0x2d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x61,
	0x0a, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x2d, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x24, 0xe4, 0xbf, 0x9d,
	0xe5, 0xad, 0x98, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8,
	0xaf, 0x95, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0xe6, 0xb5, 0x81, 0xe6, 0xb0, 0xb4, 0xe7, 0xba,
	0xbf, 0x12, 0xb8, 0x02, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x46, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x1a,
	0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d,
	0xfa, 0x81, 0xf9, 0x1b, 0x57, 0x0a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x7b,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x30, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf,
	0x95, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe6, 0xa0, 0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9,
	0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0x89, 0x02, 0x0a,
	0x14, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x3e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x46, 0x0a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x21, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x87, 0xaa,
	0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe5, 0x85, 0xa8, 0xe5,
	0xb1, 0x80, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x12, 0x93, 0x02, 0x0a, 0x14, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x12, 0x3e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x73, 0x7d, 0xfa, 0x81,
	0xf9, 0x1b, 0x4b, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x73, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x21, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8,
	0xaf, 0x95, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x12, 0x89,
	0x02, 0x0a, 0x12, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x4c, 0x0a, 0x1d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x27, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5,
	0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x93, 0x02, 0x0a, 0x14, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x12, 0x3e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x1a, 0x22, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x73, 0x7d,
	0xfa, 0x81, 0xf9, 0x1b, 0x4b, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x73, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x21, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5,
	0x8b, 0xe8, 0xaf, 0x95, 0xe5, 0x85, 0xa8, 0xe5, 0xb1, 0x80, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0x12, 0xcb, 0x01, 0x0a, 0x12, 0x51, 0x41, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x45,
	0x54, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x51, 0x41, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53,
	0x45, 0x54, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81,
	0xf9, 0x1b, 0x3b, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x17, 0x51, 0x41, 0xe7, 0x9a, 0x84, 0xe4, 0xb8, 0x8a, 0xe6,
	0x8a, 0xa5, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x12, 0xa9,
	0x02, 0x0a, 0x1b, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x53, 0x4e, 0x49, 0x50, 0x50, 0x45, 0x54, 0x5f, 0x59, 0x41, 0x4d, 0x4c, 0x12, 0x3c,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x61, 0x76, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0xb3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22, 0x3a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x73, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x2d, 0x79, 0x6d, 0x6c, 0xfa, 0x81, 0xf9, 0x1b, 0x6c, 0x0a, 0x3a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2d, 0x73,
	0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x2d, 0x79, 0x6d, 0x6c, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x2a,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6,
	0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0xe6, 0xb5, 0x81, 0xe6, 0xb0,
	0xb4, 0xe7, 0xba, 0xbf, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x12, 0x82, 0x02, 0x0a, 0x0d, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x2d, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x3b, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x51, 0x0a, 0x26,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0xb5, 0x8b,
	0xe8, 0xaf, 0x95, 0xe6, 0x8a, 0xa5, 0xe5, 0x91, 0x8a, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x12,
	0x8c, 0x02, 0x0a, 0x0a, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x2d,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x38, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9,
	0x1b, 0x5c, 0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0xe6, 0xb5, 0x8b, 0xe8,
	0xaf, 0x95, 0xe6, 0x8a, 0xa5, 0xe5, 0x91, 0x8a, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x12, 0x98,
	0x02, 0x0a, 0x10, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4d, 0x50,
	0x4f, 0x52, 0x54, 0x12, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53,
	0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0xfa, 0x81,
	0xf9, 0x1b, 0x56, 0x0a, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xaf, 0xbc, 0xe5, 0x85,
	0xa5, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95,
	0xe5, 0x9c, 0xba, 0xe6, 0x99, 0xaf, 0xe9, 0x9b, 0x86, 0x12, 0x85, 0x02, 0x0a, 0x0c, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74,
	0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0xfa, 0x81, 0xf9, 0x1b,
	0x50, 0x0a, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xaf, 0xbc, 0xe5, 0x87, 0xba, 0xe8, 0x87, 0xaa, 0xe5,
	0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0x12, 0x85, 0x02, 0x0a, 0x0c, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4f,
	0x52, 0x54, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x24,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x50, 0x0a, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x32,
	0x02, 0x10, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xaf,
	0xbc, 0xe5, 0x85, 0xa5, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe5, 0x8c, 0x96, 0xe6, 0xb5, 0x8b,
	0xe8, 0xaf, 0x95, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x13, 0xc2, 0xc4, 0xcb, 0x1c, 0x0e,
	0x22, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x4a,
	0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64,
	0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61,
	0x75, 0x74, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_testplatform_autotest_proto_rawDescOnce sync.Once
	file_testplatform_autotest_proto_rawDescData = file_testplatform_autotest_proto_rawDesc
)

func file_testplatform_autotest_proto_rawDescGZIP() []byte {
	file_testplatform_autotest_proto_rawDescOnce.Do(func() {
		file_testplatform_autotest_proto_rawDescData = protoimpl.X.CompressGZIP(file_testplatform_autotest_proto_rawDescData)
	})
	return file_testplatform_autotest_proto_rawDescData
}

var file_testplatform_autotest_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_testplatform_autotest_proto_goTypes = []interface{}{
	(*ACTION_LOG_DOWNLOAD_Request)(nil),                // 0: erda.openapiv1.testplatform.ACTION_LOG_DOWNLOAD_Request
	(*ACTION_LOG_GET_Request)(nil),                     // 1: erda.openapiv1.testplatform.ACTION_LOG_GET_Request
	(*AUTOTESTS_SCENES_CANCEL_Request)(nil),            // 2: erda.openapiv1.testplatform.AUTOTESTS_SCENES_CANCEL_Request
	(*AUTOTESTS_SCENES_EXECUTE_Request)(nil),           // 3: erda.openapiv1.testplatform.AUTOTESTS_SCENES_EXECUTE_Request
	(*AutoTestCaseSavePipelineRequest)(nil),            // 4: erda.openapiv1.testplatform.AutoTestCaseSavePipelineRequest
	(*AutoTestCaseSavePipelineResponse)(nil),           // 5: erda.openapiv1.testplatform.AutoTestCaseSavePipelineResponse
	(*AutoTestGlobalConfig)(nil),                       // 6: erda.openapiv1.testplatform.AutoTestGlobalConfig
	(*AutoTestGlobalConfigCreateRequest)(nil),          // 7: erda.openapiv1.testplatform.AutoTestGlobalConfigCreateRequest
	(*AutoTestGlobalConfigCreateResponse)(nil),         // 8: erda.openapiv1.testplatform.AutoTestGlobalConfigCreateResponse
	(*AutoTestGlobalConfigDeleteRequest)(nil),          // 9: erda.openapiv1.testplatform.AutoTestGlobalConfigDeleteRequest
	(*AutoTestGlobalConfigDeleteResponse)(nil),         // 10: erda.openapiv1.testplatform.AutoTestGlobalConfigDeleteResponse
	(*AutoTestGlobalConfigListRequest)(nil),            // 11: erda.openapiv1.testplatform.AutoTestGlobalConfigListRequest
	(*AutoTestGlobalConfigListResponse)(nil),           // 12: erda.openapiv1.testplatform.AutoTestGlobalConfigListResponse
	(*AutoTestGlobalConfigUpdateRequest)(nil),          // 13: erda.openapiv1.testplatform.AutoTestGlobalConfigUpdateRequest
	(*AutoTestGlobalConfigUpdateResponse)(nil),         // 14: erda.openapiv1.testplatform.AutoTestGlobalConfigUpdateResponse
	(*AutoTestSceneSetImportRequest)(nil),              // 15: erda.openapiv1.testplatform.AutoTestSceneSetImportRequest
	(*AutoTestSceneSetImportResponse)(nil),             // 16: erda.openapiv1.testplatform.AutoTestSceneSetImportResponse
	(*AutoTestSpaceExportRequest)(nil),                 // 17: erda.openapiv1.testplatform.AutoTestSpaceExportRequest
	(*AutoTestSpaceExportResponse)(nil),                // 18: erda.openapiv1.testplatform.AutoTestSpaceExportResponse
	(*AutoTestSpaceImportRequest)(nil),                 // 19: erda.openapiv1.testplatform.AutoTestSpaceImportRequest
	(*AutoTestSpaceImportResponse)(nil),                // 20: erda.openapiv1.testplatform.AutoTestSpaceImportResponse
	(*CreateTestReportRecordResponse)(nil),             // 21: erda.openapiv1.testplatform.CreateTestReportRecordResponse
	(*GetTestReportRecordResponse)(nil),                // 22: erda.openapiv1.testplatform.GetTestReportRecordResponse
	(*PipelineRunParam)(nil),                           // 23: erda.openapiv1.testplatform.PipelineRunParam
	(*QA_REPORTSETS_LIST_Request)(nil),                 // 24: erda.openapiv1.testplatform.QA_REPORTSETS_LIST_Request
	(*TestReportData)(nil),                             // 25: erda.openapiv1.testplatform.TestReportData
	(*TestReportRecord)(nil),                           // 26: erda.openapiv1.testplatform.TestReportRecord
	(*UnifiedFileTreeNode)(nil),                        // 27: erda.openapiv1.testplatform.UnifiedFileTreeNode
	(*UnifiedFileTreeNodeCopyRequest)(nil),             // 28: erda.openapiv1.testplatform.UnifiedFileTreeNodeCopyRequest
	(*UnifiedFileTreeNodeCopyResponse)(nil),            // 29: erda.openapiv1.testplatform.UnifiedFileTreeNodeCopyResponse
	(*UnifiedFileTreeNodeCreateRequest)(nil),           // 30: erda.openapiv1.testplatform.UnifiedFileTreeNodeCreateRequest
	(*UnifiedFileTreeNodeCreateResponse)(nil),          // 31: erda.openapiv1.testplatform.UnifiedFileTreeNodeCreateResponse
	(*UnifiedFileTreeNodeDeleteRequest)(nil),           // 32: erda.openapiv1.testplatform.UnifiedFileTreeNodeDeleteRequest
	(*UnifiedFileTreeNodeDeleteResponse)(nil),          // 33: erda.openapiv1.testplatform.UnifiedFileTreeNodeDeleteResponse
	(*UnifiedFileTreeNodeFindAncestorsRequest)(nil),    // 34: erda.openapiv1.testplatform.UnifiedFileTreeNodeFindAncestorsRequest
	(*UnifiedFileTreeNodeFindAncestorsResponse)(nil),   // 35: erda.openapiv1.testplatform.UnifiedFileTreeNodeFindAncestorsResponse
	(*UnifiedFileTreeNodeFuzzySearchRequest)(nil),      // 36: erda.openapiv1.testplatform.UnifiedFileTreeNodeFuzzySearchRequest
	(*UnifiedFileTreeNodeFuzzySearchResponse)(nil),     // 37: erda.openapiv1.testplatform.UnifiedFileTreeNodeFuzzySearchResponse
	(*UnifiedFileTreeNodeGetRequest)(nil),              // 38: erda.openapiv1.testplatform.UnifiedFileTreeNodeGetRequest
	(*UnifiedFileTreeNodeGetResponse)(nil),             // 39: erda.openapiv1.testplatform.UnifiedFileTreeNodeGetResponse
	(*UnifiedFileTreeNodeHistorySearchRequest)(nil),    // 40: erda.openapiv1.testplatform.UnifiedFileTreeNodeHistorySearchRequest
	(*UnifiedFileTreeNodeListRequest)(nil),             // 41: erda.openapiv1.testplatform.UnifiedFileTreeNodeListRequest
	(*UnifiedFileTreeNodeListResponse)(nil),            // 42: erda.openapiv1.testplatform.UnifiedFileTreeNodeListResponse
	(*UnifiedFileTreeNodeMoveRequest)(nil),             // 43: erda.openapiv1.testplatform.UnifiedFileTreeNodeMoveRequest
	(*UnifiedFileTreeNodeMoveResponse)(nil),            // 44: erda.openapiv1.testplatform.UnifiedFileTreeNodeMoveResponse
	(*UnifiedFileTreeNodeUpdateBasicInfoRequest)(nil),  // 45: erda.openapiv1.testplatform.UnifiedFileTreeNodeUpdateBasicInfoRequest
	(*UnifiedFileTreeNodeUpdateBasicInfoResponse)(nil), // 46: erda.openapiv1.testplatform.UnifiedFileTreeNodeUpdateBasicInfoResponse
	nil,                           // 47: erda.openapiv1.testplatform.UnifiedFileTreeNode.MetaEntry
	(*structpb.Value)(nil),        // 48: google.protobuf.Value
	(*timestamppb.Timestamp)(nil), // 49: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 50: google.protobuf.Empty
}
var file_testplatform_autotest_proto_depIdxs = []int32{
	48, // 0: erda.openapiv1.testplatform.AutoTestCaseSavePipelineRequest.runParams:type_name -> google.protobuf.Value
	48, // 1: erda.openapiv1.testplatform.AutoTestCaseSavePipelineResponse.data:type_name -> google.protobuf.Value
	49, // 2: erda.openapiv1.testplatform.AutoTestGlobalConfig.createdAt:type_name -> google.protobuf.Timestamp
	49, // 3: erda.openapiv1.testplatform.AutoTestGlobalConfig.updatedAt:type_name -> google.protobuf.Timestamp
	48, // 4: erda.openapiv1.testplatform.AutoTestGlobalConfig.aPIConfig:type_name -> google.protobuf.Value
	48, // 5: erda.openapiv1.testplatform.AutoTestGlobalConfig.uIConfig:type_name -> google.protobuf.Value
	48, // 6: erda.openapiv1.testplatform.AutoTestGlobalConfigCreateRequest.aPIConfig:type_name -> google.protobuf.Value
	48, // 7: erda.openapiv1.testplatform.AutoTestGlobalConfigCreateRequest.uIConfig:type_name -> google.protobuf.Value
	48, // 8: erda.openapiv1.testplatform.AutoTestGlobalConfigCreateResponse.data:type_name -> google.protobuf.Value
	48, // 9: erda.openapiv1.testplatform.AutoTestGlobalConfigDeleteResponse.data:type_name -> google.protobuf.Value
	48, // 10: erda.openapiv1.testplatform.AutoTestGlobalConfigListResponse.data:type_name -> google.protobuf.Value
	48, // 11: erda.openapiv1.testplatform.AutoTestGlobalConfigUpdateRequest.aPIConfig:type_name -> google.protobuf.Value
	48, // 12: erda.openapiv1.testplatform.AutoTestGlobalConfigUpdateRequest.uIConfig:type_name -> google.protobuf.Value
	48, // 13: erda.openapiv1.testplatform.AutoTestGlobalConfigUpdateResponse.data:type_name -> google.protobuf.Value
	48, // 14: erda.openapiv1.testplatform.GetTestReportRecordResponse.data:type_name -> google.protobuf.Value
	48, // 15: erda.openapiv1.testplatform.PipelineRunParam.value:type_name -> google.protobuf.Value
	48, // 16: erda.openapiv1.testplatform.TestReportData.issueDashboard:type_name -> google.protobuf.Value
	48, // 17: erda.openapiv1.testplatform.TestReportData.testDashboard:type_name -> google.protobuf.Value
	49, // 18: erda.openapiv1.testplatform.TestReportRecord.createdAt:type_name -> google.protobuf.Timestamp
	49, // 19: erda.openapiv1.testplatform.TestReportRecord.updatedAt:type_name -> google.protobuf.Timestamp
	48, // 20: erda.openapiv1.testplatform.TestReportRecord.reportData:type_name -> google.protobuf.Value
	49, // 21: erda.openapiv1.testplatform.UnifiedFileTreeNode.createdAt:type_name -> google.protobuf.Timestamp
	49, // 22: erda.openapiv1.testplatform.UnifiedFileTreeNode.updatedAt:type_name -> google.protobuf.Timestamp
	47, // 23: erda.openapiv1.testplatform.UnifiedFileTreeNode.meta:type_name -> erda.openapiv1.testplatform.UnifiedFileTreeNode.MetaEntry
	48, // 24: erda.openapiv1.testplatform.UnifiedFileTreeNodeCopyResponse.data:type_name -> google.protobuf.Value
	48, // 25: erda.openapiv1.testplatform.UnifiedFileTreeNodeCreateResponse.data:type_name -> google.protobuf.Value
	48, // 26: erda.openapiv1.testplatform.UnifiedFileTreeNodeDeleteResponse.data:type_name -> google.protobuf.Value
	48, // 27: erda.openapiv1.testplatform.UnifiedFileTreeNodeFindAncestorsResponse.data:type_name -> google.protobuf.Value
	48, // 28: erda.openapiv1.testplatform.UnifiedFileTreeNodeFuzzySearchResponse.data:type_name -> google.protobuf.Value
	48, // 29: erda.openapiv1.testplatform.UnifiedFileTreeNodeGetResponse.data:type_name -> google.protobuf.Value
	48, // 30: erda.openapiv1.testplatform.UnifiedFileTreeNodeListResponse.data:type_name -> google.protobuf.Value
	48, // 31: erda.openapiv1.testplatform.UnifiedFileTreeNodeMoveResponse.data:type_name -> google.protobuf.Value
	48, // 32: erda.openapiv1.testplatform.UnifiedFileTreeNodeUpdateBasicInfoResponse.data:type_name -> google.protobuf.Value
	48, // 33: erda.openapiv1.testplatform.UnifiedFileTreeNode.MetaEntry.value:type_name -> google.protobuf.Value
	0,  // 34: erda.openapiv1.testplatform.testplatform_autotest.ACTION_LOG_DOWNLOAD:input_type -> erda.openapiv1.testplatform.ACTION_LOG_DOWNLOAD_Request
	1,  // 35: erda.openapiv1.testplatform.testplatform_autotest.ACTION_LOG_GET:input_type -> erda.openapiv1.testplatform.ACTION_LOG_GET_Request
	2,  // 36: erda.openapiv1.testplatform.testplatform_autotest.AUTOTESTS_SCENES_CANCEL:input_type -> erda.openapiv1.testplatform.AUTOTESTS_SCENES_CANCEL_Request
	3,  // 37: erda.openapiv1.testplatform.testplatform_autotest.AUTOTESTS_SCENES_EXECUTE:input_type -> erda.openapiv1.testplatform.AUTOTESTS_SCENES_EXECUTE_Request
	4,  // 38: erda.openapiv1.testplatform.testplatform_autotest.BATCH_QUERY_PIPELINE_SNIPPET_YAML:input_type -> erda.openapiv1.testplatform.AutoTestCaseSavePipelineRequest
	28, // 39: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_COPY:input_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeCopyRequest
	30, // 40: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_CREATE:input_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeCreateRequest
	32, // 41: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_DELETE:input_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeDeleteRequest
	34, // 42: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_FIND_ANCESTORS:input_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeFindAncestorsRequest
	36, // 43: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_FUZZY_SEARCH:input_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeFuzzySearchRequest
	38, // 44: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_GET:input_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeGetRequest
	40, // 45: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_HISTORY_LIST:input_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeHistorySearchRequest
	41, // 46: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_LIST:input_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeListRequest
	43, // 47: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_MOVE:input_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeMoveRequest
	4,  // 48: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_SAVE_PIPELINE:input_type -> erda.openapiv1.testplatform.AutoTestCaseSavePipelineRequest
	45, // 49: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_UPDATE_BASIC_INFO:input_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeUpdateBasicInfoRequest
	7,  // 50: erda.openapiv1.testplatform.testplatform_autotest.GLOBAL_CONFIG_CREATE:input_type -> erda.openapiv1.testplatform.AutoTestGlobalConfigCreateRequest
	9,  // 51: erda.openapiv1.testplatform.testplatform_autotest.GLOBAL_CONFIG_DELETE:input_type -> erda.openapiv1.testplatform.AutoTestGlobalConfigDeleteRequest
	11, // 52: erda.openapiv1.testplatform.testplatform_autotest.GLOBAL_CONFIG_LIST:input_type -> erda.openapiv1.testplatform.AutoTestGlobalConfigListRequest
	13, // 53: erda.openapiv1.testplatform.testplatform_autotest.GLOBAL_CONFIG_UPDATE:input_type -> erda.openapiv1.testplatform.AutoTestGlobalConfigUpdateRequest
	24, // 54: erda.openapiv1.testplatform.testplatform_autotest.QA_REPORTSETS_LIST:input_type -> erda.openapiv1.testplatform.QA_REPORTSETS_LIST_Request
	4,  // 55: erda.openapiv1.testplatform.testplatform_autotest.QUERY_PIPELINE_SNIPPET_YAML:input_type -> erda.openapiv1.testplatform.AutoTestCaseSavePipelineRequest
	26, // 56: erda.openapiv1.testplatform.testplatform_autotest.REPORT_CREATE:input_type -> erda.openapiv1.testplatform.TestReportRecord
	26, // 57: erda.openapiv1.testplatform.testplatform_autotest.REPORT_GET:input_type -> erda.openapiv1.testplatform.TestReportRecord
	15, // 58: erda.openapiv1.testplatform.testplatform_autotest.SCENE_SET_IMPORT:input_type -> erda.openapiv1.testplatform.AutoTestSceneSetImportRequest
	17, // 59: erda.openapiv1.testplatform.testplatform_autotest.SPACE_EXPORT:input_type -> erda.openapiv1.testplatform.AutoTestSpaceExportRequest
	19, // 60: erda.openapiv1.testplatform.testplatform_autotest.SPACE_IMPORT:input_type -> erda.openapiv1.testplatform.AutoTestSpaceImportRequest
	50, // 61: erda.openapiv1.testplatform.testplatform_autotest.ACTION_LOG_DOWNLOAD:output_type -> google.protobuf.Empty
	50, // 62: erda.openapiv1.testplatform.testplatform_autotest.ACTION_LOG_GET:output_type -> google.protobuf.Empty
	50, // 63: erda.openapiv1.testplatform.testplatform_autotest.AUTOTESTS_SCENES_CANCEL:output_type -> google.protobuf.Empty
	50, // 64: erda.openapiv1.testplatform.testplatform_autotest.AUTOTESTS_SCENES_EXECUTE:output_type -> google.protobuf.Empty
	50, // 65: erda.openapiv1.testplatform.testplatform_autotest.BATCH_QUERY_PIPELINE_SNIPPET_YAML:output_type -> google.protobuf.Empty
	29, // 66: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_COPY:output_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeCopyResponse
	31, // 67: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_CREATE:output_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeCreateResponse
	33, // 68: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_DELETE:output_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeDeleteResponse
	35, // 69: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_FIND_ANCESTORS:output_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeFindAncestorsResponse
	37, // 70: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_FUZZY_SEARCH:output_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeFuzzySearchResponse
	39, // 71: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_GET:output_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeGetResponse
	50, // 72: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_HISTORY_LIST:output_type -> google.protobuf.Empty
	42, // 73: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_LIST:output_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeListResponse
	44, // 74: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_MOVE:output_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeMoveResponse
	5,  // 75: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_SAVE_PIPELINE:output_type -> erda.openapiv1.testplatform.AutoTestCaseSavePipelineResponse
	46, // 76: erda.openapiv1.testplatform.testplatform_autotest.FILETREE_NODE_UPDATE_BASIC_INFO:output_type -> erda.openapiv1.testplatform.UnifiedFileTreeNodeUpdateBasicInfoResponse
	8,  // 77: erda.openapiv1.testplatform.testplatform_autotest.GLOBAL_CONFIG_CREATE:output_type -> erda.openapiv1.testplatform.AutoTestGlobalConfigCreateResponse
	10, // 78: erda.openapiv1.testplatform.testplatform_autotest.GLOBAL_CONFIG_DELETE:output_type -> erda.openapiv1.testplatform.AutoTestGlobalConfigDeleteResponse
	12, // 79: erda.openapiv1.testplatform.testplatform_autotest.GLOBAL_CONFIG_LIST:output_type -> erda.openapiv1.testplatform.AutoTestGlobalConfigListResponse
	14, // 80: erda.openapiv1.testplatform.testplatform_autotest.GLOBAL_CONFIG_UPDATE:output_type -> erda.openapiv1.testplatform.AutoTestGlobalConfigUpdateResponse
	50, // 81: erda.openapiv1.testplatform.testplatform_autotest.QA_REPORTSETS_LIST:output_type -> google.protobuf.Empty
	50, // 82: erda.openapiv1.testplatform.testplatform_autotest.QUERY_PIPELINE_SNIPPET_YAML:output_type -> google.protobuf.Empty
	21, // 83: erda.openapiv1.testplatform.testplatform_autotest.REPORT_CREATE:output_type -> erda.openapiv1.testplatform.CreateTestReportRecordResponse
	22, // 84: erda.openapiv1.testplatform.testplatform_autotest.REPORT_GET:output_type -> erda.openapiv1.testplatform.GetTestReportRecordResponse
	16, // 85: erda.openapiv1.testplatform.testplatform_autotest.SCENE_SET_IMPORT:output_type -> erda.openapiv1.testplatform.AutoTestSceneSetImportResponse
	18, // 86: erda.openapiv1.testplatform.testplatform_autotest.SPACE_EXPORT:output_type -> erda.openapiv1.testplatform.AutoTestSpaceExportResponse
	20, // 87: erda.openapiv1.testplatform.testplatform_autotest.SPACE_IMPORT:output_type -> erda.openapiv1.testplatform.AutoTestSpaceImportResponse
	61, // [61:88] is the sub-list for method output_type
	34, // [34:61] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_testplatform_autotest_proto_init() }
func file_testplatform_autotest_proto_init() {
	if File_testplatform_autotest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testplatform_autotest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACTION_LOG_DOWNLOAD_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACTION_LOG_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AUTOTESTS_SCENES_CANCEL_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AUTOTESTS_SCENES_EXECUTE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestCaseSavePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestCaseSavePipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestGlobalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestGlobalConfigCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestGlobalConfigCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestGlobalConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestGlobalConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestGlobalConfigListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestGlobalConfigListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestGlobalConfigUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestGlobalConfigUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestSceneSetImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestSceneSetImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestSpaceExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestSpaceExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestSpaceImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoTestSpaceImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestReportRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestReportRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRunParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QA_REPORTSETS_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeCopyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeCopyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeFindAncestorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeFindAncestorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeFuzzySearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeFuzzySearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeHistorySearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeMoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeMoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeUpdateBasicInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_autotest_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnifiedFileTreeNodeUpdateBasicInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_testplatform_autotest_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_testplatform_autotest_proto_msgTypes[46].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testplatform_autotest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_testplatform_autotest_proto_goTypes,
		DependencyIndexes: file_testplatform_autotest_proto_depIdxs,
		MessageInfos:      file_testplatform_autotest_proto_msgTypes,
	}.Build()
	File_testplatform_autotest_proto = out.File
	file_testplatform_autotest_proto_rawDesc = nil
	file_testplatform_autotest_proto_goTypes = nil
	file_testplatform_autotest_proto_depIdxs = nil
}
