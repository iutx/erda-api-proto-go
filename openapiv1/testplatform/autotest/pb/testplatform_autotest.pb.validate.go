// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: testplatform_autotest.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ACTION_LOG_DOWNLOAD_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ACTION_LOG_DOWNLOAD_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ACTION_LOG_DOWNLOAD_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ACTION_LOG_DOWNLOAD_RequestMultiError, or nil if none found.
func (m *ACTION_LOG_DOWNLOAD_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ACTION_LOG_DOWNLOAD_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	if len(errors) > 0 {
		return ACTION_LOG_DOWNLOAD_RequestMultiError(errors)
	}

	return nil
}

// ACTION_LOG_DOWNLOAD_RequestMultiError is an error wrapping multiple
// validation errors returned by ACTION_LOG_DOWNLOAD_Request.ValidateAll() if
// the designated constraints aren't met.
type ACTION_LOG_DOWNLOAD_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ACTION_LOG_DOWNLOAD_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ACTION_LOG_DOWNLOAD_RequestMultiError) AllErrors() []error { return m }

// ACTION_LOG_DOWNLOAD_RequestValidationError is the validation error returned
// by ACTION_LOG_DOWNLOAD_Request.Validate if the designated constraints
// aren't met.
type ACTION_LOG_DOWNLOAD_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ACTION_LOG_DOWNLOAD_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ACTION_LOG_DOWNLOAD_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ACTION_LOG_DOWNLOAD_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ACTION_LOG_DOWNLOAD_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ACTION_LOG_DOWNLOAD_RequestValidationError) ErrorName() string {
	return "ACTION_LOG_DOWNLOAD_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ACTION_LOG_DOWNLOAD_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sACTION_LOG_DOWNLOAD_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ACTION_LOG_DOWNLOAD_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ACTION_LOG_DOWNLOAD_RequestValidationError{}

// Validate checks the field values on ACTION_LOG_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ACTION_LOG_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ACTION_LOG_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ACTION_LOG_GET_RequestMultiError, or nil if none found.
func (m *ACTION_LOG_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ACTION_LOG_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	if len(errors) > 0 {
		return ACTION_LOG_GET_RequestMultiError(errors)
	}

	return nil
}

// ACTION_LOG_GET_RequestMultiError is an error wrapping multiple validation
// errors returned by ACTION_LOG_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type ACTION_LOG_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ACTION_LOG_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ACTION_LOG_GET_RequestMultiError) AllErrors() []error { return m }

// ACTION_LOG_GET_RequestValidationError is the validation error returned by
// ACTION_LOG_GET_Request.Validate if the designated constraints aren't met.
type ACTION_LOG_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ACTION_LOG_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ACTION_LOG_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ACTION_LOG_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ACTION_LOG_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ACTION_LOG_GET_RequestValidationError) ErrorName() string {
	return "ACTION_LOG_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ACTION_LOG_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sACTION_LOG_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ACTION_LOG_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ACTION_LOG_GET_RequestValidationError{}

// Validate checks the field values on AUTOTESTS_SCENES_CANCEL_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AUTOTESTS_SCENES_CANCEL_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AUTOTESTS_SCENES_CANCEL_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AUTOTESTS_SCENES_CANCEL_RequestMultiError, or nil if none found.
func (m *AUTOTESTS_SCENES_CANCEL_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AUTOTESTS_SCENES_CANCEL_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SceneID

	if len(errors) > 0 {
		return AUTOTESTS_SCENES_CANCEL_RequestMultiError(errors)
	}

	return nil
}

// AUTOTESTS_SCENES_CANCEL_RequestMultiError is an error wrapping multiple
// validation errors returned by AUTOTESTS_SCENES_CANCEL_Request.ValidateAll()
// if the designated constraints aren't met.
type AUTOTESTS_SCENES_CANCEL_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AUTOTESTS_SCENES_CANCEL_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AUTOTESTS_SCENES_CANCEL_RequestMultiError) AllErrors() []error { return m }

// AUTOTESTS_SCENES_CANCEL_RequestValidationError is the validation error
// returned by AUTOTESTS_SCENES_CANCEL_Request.Validate if the designated
// constraints aren't met.
type AUTOTESTS_SCENES_CANCEL_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AUTOTESTS_SCENES_CANCEL_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AUTOTESTS_SCENES_CANCEL_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AUTOTESTS_SCENES_CANCEL_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AUTOTESTS_SCENES_CANCEL_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AUTOTESTS_SCENES_CANCEL_RequestValidationError) ErrorName() string {
	return "AUTOTESTS_SCENES_CANCEL_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AUTOTESTS_SCENES_CANCEL_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAUTOTESTS_SCENES_CANCEL_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AUTOTESTS_SCENES_CANCEL_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AUTOTESTS_SCENES_CANCEL_RequestValidationError{}

// Validate checks the field values on AUTOTESTS_SCENES_EXECUTE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AUTOTESTS_SCENES_EXECUTE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AUTOTESTS_SCENES_EXECUTE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AUTOTESTS_SCENES_EXECUTE_RequestMultiError, or nil if none found.
func (m *AUTOTESTS_SCENES_EXECUTE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AUTOTESTS_SCENES_EXECUTE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SceneID

	if len(errors) > 0 {
		return AUTOTESTS_SCENES_EXECUTE_RequestMultiError(errors)
	}

	return nil
}

// AUTOTESTS_SCENES_EXECUTE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// AUTOTESTS_SCENES_EXECUTE_Request.ValidateAll() if the designated
// constraints aren't met.
type AUTOTESTS_SCENES_EXECUTE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AUTOTESTS_SCENES_EXECUTE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AUTOTESTS_SCENES_EXECUTE_RequestMultiError) AllErrors() []error { return m }

// AUTOTESTS_SCENES_EXECUTE_RequestValidationError is the validation error
// returned by AUTOTESTS_SCENES_EXECUTE_Request.Validate if the designated
// constraints aren't met.
type AUTOTESTS_SCENES_EXECUTE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AUTOTESTS_SCENES_EXECUTE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AUTOTESTS_SCENES_EXECUTE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AUTOTESTS_SCENES_EXECUTE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AUTOTESTS_SCENES_EXECUTE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AUTOTESTS_SCENES_EXECUTE_RequestValidationError) ErrorName() string {
	return "AUTOTESTS_SCENES_EXECUTE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AUTOTESTS_SCENES_EXECUTE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAUTOTESTS_SCENES_EXECUTE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AUTOTESTS_SCENES_EXECUTE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AUTOTESTS_SCENES_EXECUTE_RequestValidationError{}

// Validate checks the field values on AutoTestCaseSavePipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoTestCaseSavePipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestCaseSavePipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AutoTestCaseSavePipelineRequestMultiError, or nil if none found.
func (m *AutoTestCaseSavePipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestCaseSavePipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	// no validation rules for PipelineYml

	for idx, item := range m.GetRunParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoTestCaseSavePipelineRequestValidationError{
						field:  fmt.Sprintf("RunParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoTestCaseSavePipelineRequestValidationError{
						field:  fmt.Sprintf("RunParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoTestCaseSavePipelineRequestValidationError{
					field:  fmt.Sprintf("RunParams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AutoTestCaseSavePipelineRequestMultiError(errors)
	}

	return nil
}

// AutoTestCaseSavePipelineRequestMultiError is an error wrapping multiple
// validation errors returned by AutoTestCaseSavePipelineRequest.ValidateAll()
// if the designated constraints aren't met.
type AutoTestCaseSavePipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestCaseSavePipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestCaseSavePipelineRequestMultiError) AllErrors() []error { return m }

// AutoTestCaseSavePipelineRequestValidationError is the validation error
// returned by AutoTestCaseSavePipelineRequest.Validate if the designated
// constraints aren't met.
type AutoTestCaseSavePipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestCaseSavePipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestCaseSavePipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestCaseSavePipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestCaseSavePipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestCaseSavePipelineRequestValidationError) ErrorName() string {
	return "AutoTestCaseSavePipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestCaseSavePipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestCaseSavePipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestCaseSavePipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestCaseSavePipelineRequestValidationError{}

// Validate checks the field values on AutoTestCaseSavePipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AutoTestCaseSavePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestCaseSavePipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AutoTestCaseSavePipelineResponseMultiError, or nil if none found.
func (m *AutoTestCaseSavePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestCaseSavePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoTestCaseSavePipelineResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoTestCaseSavePipelineResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoTestCaseSavePipelineResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AutoTestCaseSavePipelineResponseMultiError(errors)
	}

	return nil
}

// AutoTestCaseSavePipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// AutoTestCaseSavePipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type AutoTestCaseSavePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestCaseSavePipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestCaseSavePipelineResponseMultiError) AllErrors() []error { return m }

// AutoTestCaseSavePipelineResponseValidationError is the validation error
// returned by AutoTestCaseSavePipelineResponse.Validate if the designated
// constraints aren't met.
type AutoTestCaseSavePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestCaseSavePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestCaseSavePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestCaseSavePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestCaseSavePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestCaseSavePipelineResponseValidationError) ErrorName() string {
	return "AutoTestCaseSavePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestCaseSavePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestCaseSavePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestCaseSavePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestCaseSavePipelineResponseValidationError{}

// Validate checks the field values on AutoTestGlobalConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoTestGlobalConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestGlobalConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoTestGlobalConfigMultiError, or nil if none found.
func (m *AutoTestGlobalConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestGlobalConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for Ns

	// no validation rules for DisplayName

	// no validation rules for Desc

	// no validation rules for CreatorID

	// no validation rules for UpdaterID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoTestGlobalConfigValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoTestGlobalConfigValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoTestGlobalConfigValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoTestGlobalConfigValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoTestGlobalConfigValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoTestGlobalConfigValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.APIConfig != nil {

		if all {
			switch v := interface{}(m.GetAPIConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoTestGlobalConfigValidationError{
						field:  "APIConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoTestGlobalConfigValidationError{
						field:  "APIConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAPIConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoTestGlobalConfigValidationError{
					field:  "APIConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UIConfig != nil {

		if all {
			switch v := interface{}(m.GetUIConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoTestGlobalConfigValidationError{
						field:  "UIConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoTestGlobalConfigValidationError{
						field:  "UIConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUIConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoTestGlobalConfigValidationError{
					field:  "UIConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AutoTestGlobalConfigMultiError(errors)
	}

	return nil
}

// AutoTestGlobalConfigMultiError is an error wrapping multiple validation
// errors returned by AutoTestGlobalConfig.ValidateAll() if the designated
// constraints aren't met.
type AutoTestGlobalConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestGlobalConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestGlobalConfigMultiError) AllErrors() []error { return m }

// AutoTestGlobalConfigValidationError is the validation error returned by
// AutoTestGlobalConfig.Validate if the designated constraints aren't met.
type AutoTestGlobalConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestGlobalConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestGlobalConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestGlobalConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestGlobalConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestGlobalConfigValidationError) ErrorName() string {
	return "AutoTestGlobalConfigValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestGlobalConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestGlobalConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestGlobalConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestGlobalConfigValidationError{}

// Validate checks the field values on AutoTestGlobalConfigCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AutoTestGlobalConfigCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestGlobalConfigCreateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AutoTestGlobalConfigCreateRequestMultiError, or nil if none found.
func (m *AutoTestGlobalConfigCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestGlobalConfigCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for DisplayName

	// no validation rules for Desc

	if m.APIConfig != nil {

		if all {
			switch v := interface{}(m.GetAPIConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoTestGlobalConfigCreateRequestValidationError{
						field:  "APIConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoTestGlobalConfigCreateRequestValidationError{
						field:  "APIConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAPIConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoTestGlobalConfigCreateRequestValidationError{
					field:  "APIConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UIConfig != nil {

		if all {
			switch v := interface{}(m.GetUIConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoTestGlobalConfigCreateRequestValidationError{
						field:  "UIConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoTestGlobalConfigCreateRequestValidationError{
						field:  "UIConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUIConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoTestGlobalConfigCreateRequestValidationError{
					field:  "UIConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AutoTestGlobalConfigCreateRequestMultiError(errors)
	}

	return nil
}

// AutoTestGlobalConfigCreateRequestMultiError is an error wrapping multiple
// validation errors returned by
// AutoTestGlobalConfigCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type AutoTestGlobalConfigCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestGlobalConfigCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestGlobalConfigCreateRequestMultiError) AllErrors() []error { return m }

// AutoTestGlobalConfigCreateRequestValidationError is the validation error
// returned by AutoTestGlobalConfigCreateRequest.Validate if the designated
// constraints aren't met.
type AutoTestGlobalConfigCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestGlobalConfigCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestGlobalConfigCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestGlobalConfigCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestGlobalConfigCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestGlobalConfigCreateRequestValidationError) ErrorName() string {
	return "AutoTestGlobalConfigCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestGlobalConfigCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestGlobalConfigCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestGlobalConfigCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestGlobalConfigCreateRequestValidationError{}

// Validate checks the field values on AutoTestGlobalConfigCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AutoTestGlobalConfigCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestGlobalConfigCreateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AutoTestGlobalConfigCreateResponseMultiError, or nil if none found.
func (m *AutoTestGlobalConfigCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestGlobalConfigCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoTestGlobalConfigCreateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoTestGlobalConfigCreateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoTestGlobalConfigCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AutoTestGlobalConfigCreateResponseMultiError(errors)
	}

	return nil
}

// AutoTestGlobalConfigCreateResponseMultiError is an error wrapping multiple
// validation errors returned by
// AutoTestGlobalConfigCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type AutoTestGlobalConfigCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestGlobalConfigCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestGlobalConfigCreateResponseMultiError) AllErrors() []error { return m }

// AutoTestGlobalConfigCreateResponseValidationError is the validation error
// returned by AutoTestGlobalConfigCreateResponse.Validate if the designated
// constraints aren't met.
type AutoTestGlobalConfigCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestGlobalConfigCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestGlobalConfigCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestGlobalConfigCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestGlobalConfigCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestGlobalConfigCreateResponseValidationError) ErrorName() string {
	return "AutoTestGlobalConfigCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestGlobalConfigCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestGlobalConfigCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestGlobalConfigCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestGlobalConfigCreateResponseValidationError{}

// Validate checks the field values on AutoTestGlobalConfigDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AutoTestGlobalConfigDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestGlobalConfigDeleteRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AutoTestGlobalConfigDeleteRequestMultiError, or nil if none found.
func (m *AutoTestGlobalConfigDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestGlobalConfigDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineCmsNs

	// no validation rules for Ns

	if len(errors) > 0 {
		return AutoTestGlobalConfigDeleteRequestMultiError(errors)
	}

	return nil
}

// AutoTestGlobalConfigDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by
// AutoTestGlobalConfigDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type AutoTestGlobalConfigDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestGlobalConfigDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestGlobalConfigDeleteRequestMultiError) AllErrors() []error { return m }

// AutoTestGlobalConfigDeleteRequestValidationError is the validation error
// returned by AutoTestGlobalConfigDeleteRequest.Validate if the designated
// constraints aren't met.
type AutoTestGlobalConfigDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestGlobalConfigDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestGlobalConfigDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestGlobalConfigDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestGlobalConfigDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestGlobalConfigDeleteRequestValidationError) ErrorName() string {
	return "AutoTestGlobalConfigDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestGlobalConfigDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestGlobalConfigDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestGlobalConfigDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestGlobalConfigDeleteRequestValidationError{}

// Validate checks the field values on AutoTestGlobalConfigDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AutoTestGlobalConfigDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestGlobalConfigDeleteResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AutoTestGlobalConfigDeleteResponseMultiError, or nil if none found.
func (m *AutoTestGlobalConfigDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestGlobalConfigDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoTestGlobalConfigDeleteResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoTestGlobalConfigDeleteResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoTestGlobalConfigDeleteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AutoTestGlobalConfigDeleteResponseMultiError(errors)
	}

	return nil
}

// AutoTestGlobalConfigDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by
// AutoTestGlobalConfigDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type AutoTestGlobalConfigDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestGlobalConfigDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestGlobalConfigDeleteResponseMultiError) AllErrors() []error { return m }

// AutoTestGlobalConfigDeleteResponseValidationError is the validation error
// returned by AutoTestGlobalConfigDeleteResponse.Validate if the designated
// constraints aren't met.
type AutoTestGlobalConfigDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestGlobalConfigDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestGlobalConfigDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestGlobalConfigDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestGlobalConfigDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestGlobalConfigDeleteResponseValidationError) ErrorName() string {
	return "AutoTestGlobalConfigDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestGlobalConfigDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestGlobalConfigDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestGlobalConfigDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestGlobalConfigDeleteResponseValidationError{}

// Validate checks the field values on AutoTestGlobalConfigListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoTestGlobalConfigListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestGlobalConfigListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AutoTestGlobalConfigListRequestMultiError, or nil if none found.
func (m *AutoTestGlobalConfigListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestGlobalConfigListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeID

	if len(errors) > 0 {
		return AutoTestGlobalConfigListRequestMultiError(errors)
	}

	return nil
}

// AutoTestGlobalConfigListRequestMultiError is an error wrapping multiple
// validation errors returned by AutoTestGlobalConfigListRequest.ValidateAll()
// if the designated constraints aren't met.
type AutoTestGlobalConfigListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestGlobalConfigListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestGlobalConfigListRequestMultiError) AllErrors() []error { return m }

// AutoTestGlobalConfigListRequestValidationError is the validation error
// returned by AutoTestGlobalConfigListRequest.Validate if the designated
// constraints aren't met.
type AutoTestGlobalConfigListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestGlobalConfigListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestGlobalConfigListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestGlobalConfigListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestGlobalConfigListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestGlobalConfigListRequestValidationError) ErrorName() string {
	return "AutoTestGlobalConfigListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestGlobalConfigListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestGlobalConfigListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestGlobalConfigListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestGlobalConfigListRequestValidationError{}

// Validate checks the field values on AutoTestGlobalConfigListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AutoTestGlobalConfigListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestGlobalConfigListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AutoTestGlobalConfigListResponseMultiError, or nil if none found.
func (m *AutoTestGlobalConfigListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestGlobalConfigListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoTestGlobalConfigListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoTestGlobalConfigListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoTestGlobalConfigListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AutoTestGlobalConfigListResponseMultiError(errors)
	}

	return nil
}

// AutoTestGlobalConfigListResponseMultiError is an error wrapping multiple
// validation errors returned by
// AutoTestGlobalConfigListResponse.ValidateAll() if the designated
// constraints aren't met.
type AutoTestGlobalConfigListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestGlobalConfigListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestGlobalConfigListResponseMultiError) AllErrors() []error { return m }

// AutoTestGlobalConfigListResponseValidationError is the validation error
// returned by AutoTestGlobalConfigListResponse.Validate if the designated
// constraints aren't met.
type AutoTestGlobalConfigListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestGlobalConfigListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestGlobalConfigListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestGlobalConfigListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestGlobalConfigListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestGlobalConfigListResponseValidationError) ErrorName() string {
	return "AutoTestGlobalConfigListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestGlobalConfigListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestGlobalConfigListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestGlobalConfigListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestGlobalConfigListResponseValidationError{}

// Validate checks the field values on AutoTestGlobalConfigUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AutoTestGlobalConfigUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestGlobalConfigUpdateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AutoTestGlobalConfigUpdateRequestMultiError, or nil if none found.
func (m *AutoTestGlobalConfigUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestGlobalConfigUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineCmsNs

	// no validation rules for DisplayName

	// no validation rules for Desc

	// no validation rules for Ns

	if m.APIConfig != nil {

		if all {
			switch v := interface{}(m.GetAPIConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoTestGlobalConfigUpdateRequestValidationError{
						field:  "APIConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoTestGlobalConfigUpdateRequestValidationError{
						field:  "APIConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAPIConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoTestGlobalConfigUpdateRequestValidationError{
					field:  "APIConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UIConfig != nil {

		if all {
			switch v := interface{}(m.GetUIConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoTestGlobalConfigUpdateRequestValidationError{
						field:  "UIConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoTestGlobalConfigUpdateRequestValidationError{
						field:  "UIConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUIConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoTestGlobalConfigUpdateRequestValidationError{
					field:  "UIConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AutoTestGlobalConfigUpdateRequestMultiError(errors)
	}

	return nil
}

// AutoTestGlobalConfigUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by
// AutoTestGlobalConfigUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type AutoTestGlobalConfigUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestGlobalConfigUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestGlobalConfigUpdateRequestMultiError) AllErrors() []error { return m }

// AutoTestGlobalConfigUpdateRequestValidationError is the validation error
// returned by AutoTestGlobalConfigUpdateRequest.Validate if the designated
// constraints aren't met.
type AutoTestGlobalConfigUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestGlobalConfigUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestGlobalConfigUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestGlobalConfigUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestGlobalConfigUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestGlobalConfigUpdateRequestValidationError) ErrorName() string {
	return "AutoTestGlobalConfigUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestGlobalConfigUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestGlobalConfigUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestGlobalConfigUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestGlobalConfigUpdateRequestValidationError{}

// Validate checks the field values on AutoTestGlobalConfigUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AutoTestGlobalConfigUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestGlobalConfigUpdateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AutoTestGlobalConfigUpdateResponseMultiError, or nil if none found.
func (m *AutoTestGlobalConfigUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestGlobalConfigUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoTestGlobalConfigUpdateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoTestGlobalConfigUpdateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoTestGlobalConfigUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AutoTestGlobalConfigUpdateResponseMultiError(errors)
	}

	return nil
}

// AutoTestGlobalConfigUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by
// AutoTestGlobalConfigUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type AutoTestGlobalConfigUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestGlobalConfigUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestGlobalConfigUpdateResponseMultiError) AllErrors() []error { return m }

// AutoTestGlobalConfigUpdateResponseValidationError is the validation error
// returned by AutoTestGlobalConfigUpdateResponse.Validate if the designated
// constraints aren't met.
type AutoTestGlobalConfigUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestGlobalConfigUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestGlobalConfigUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestGlobalConfigUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestGlobalConfigUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestGlobalConfigUpdateResponseValidationError) ErrorName() string {
	return "AutoTestGlobalConfigUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestGlobalConfigUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestGlobalConfigUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestGlobalConfigUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestGlobalConfigUpdateResponseValidationError{}

// Validate checks the field values on AutoTestSceneSetImportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoTestSceneSetImportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestSceneSetImportRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AutoTestSceneSetImportRequestMultiError, or nil if none found.
func (m *AutoTestSceneSetImportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestSceneSetImportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for SpaceID

	// no validation rules for FileType

	if len(errors) > 0 {
		return AutoTestSceneSetImportRequestMultiError(errors)
	}

	return nil
}

// AutoTestSceneSetImportRequestMultiError is an error wrapping multiple
// validation errors returned by AutoTestSceneSetImportRequest.ValidateAll()
// if the designated constraints aren't met.
type AutoTestSceneSetImportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestSceneSetImportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestSceneSetImportRequestMultiError) AllErrors() []error { return m }

// AutoTestSceneSetImportRequestValidationError is the validation error
// returned by AutoTestSceneSetImportRequest.Validate if the designated
// constraints aren't met.
type AutoTestSceneSetImportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestSceneSetImportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestSceneSetImportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestSceneSetImportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestSceneSetImportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestSceneSetImportRequestValidationError) ErrorName() string {
	return "AutoTestSceneSetImportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestSceneSetImportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestSceneSetImportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestSceneSetImportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestSceneSetImportRequestValidationError{}

// Validate checks the field values on AutoTestSceneSetImportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoTestSceneSetImportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestSceneSetImportResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AutoTestSceneSetImportResponseMultiError, or nil if none found.
func (m *AutoTestSceneSetImportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestSceneSetImportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return AutoTestSceneSetImportResponseMultiError(errors)
	}

	return nil
}

// AutoTestSceneSetImportResponseMultiError is an error wrapping multiple
// validation errors returned by AutoTestSceneSetImportResponse.ValidateAll()
// if the designated constraints aren't met.
type AutoTestSceneSetImportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestSceneSetImportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestSceneSetImportResponseMultiError) AllErrors() []error { return m }

// AutoTestSceneSetImportResponseValidationError is the validation error
// returned by AutoTestSceneSetImportResponse.Validate if the designated
// constraints aren't met.
type AutoTestSceneSetImportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestSceneSetImportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestSceneSetImportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestSceneSetImportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestSceneSetImportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestSceneSetImportResponseValidationError) ErrorName() string {
	return "AutoTestSceneSetImportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestSceneSetImportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestSceneSetImportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestSceneSetImportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestSceneSetImportResponseValidationError{}

// Validate checks the field values on AutoTestSpaceExportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoTestSpaceExportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestSpaceExportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoTestSpaceExportRequestMultiError, or nil if none found.
func (m *AutoTestSpaceExportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestSpaceExportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Locale

	// no validation rules for IsCopy

	// no validation rules for FileType

	// no validation rules for ProjectID

	// no validation rules for SpaceName

	if len(errors) > 0 {
		return AutoTestSpaceExportRequestMultiError(errors)
	}

	return nil
}

// AutoTestSpaceExportRequestMultiError is an error wrapping multiple
// validation errors returned by AutoTestSpaceExportRequest.ValidateAll() if
// the designated constraints aren't met.
type AutoTestSpaceExportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestSpaceExportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestSpaceExportRequestMultiError) AllErrors() []error { return m }

// AutoTestSpaceExportRequestValidationError is the validation error returned
// by AutoTestSpaceExportRequest.Validate if the designated constraints aren't met.
type AutoTestSpaceExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestSpaceExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestSpaceExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestSpaceExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestSpaceExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestSpaceExportRequestValidationError) ErrorName() string {
	return "AutoTestSpaceExportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestSpaceExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestSpaceExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestSpaceExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestSpaceExportRequestValidationError{}

// Validate checks the field values on AutoTestSpaceExportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoTestSpaceExportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestSpaceExportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoTestSpaceExportResponseMultiError, or nil if none found.
func (m *AutoTestSpaceExportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestSpaceExportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return AutoTestSpaceExportResponseMultiError(errors)
	}

	return nil
}

// AutoTestSpaceExportResponseMultiError is an error wrapping multiple
// validation errors returned by AutoTestSpaceExportResponse.ValidateAll() if
// the designated constraints aren't met.
type AutoTestSpaceExportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestSpaceExportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestSpaceExportResponseMultiError) AllErrors() []error { return m }

// AutoTestSpaceExportResponseValidationError is the validation error returned
// by AutoTestSpaceExportResponse.Validate if the designated constraints
// aren't met.
type AutoTestSpaceExportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestSpaceExportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestSpaceExportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestSpaceExportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestSpaceExportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestSpaceExportResponseValidationError) ErrorName() string {
	return "AutoTestSpaceExportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestSpaceExportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestSpaceExportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestSpaceExportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestSpaceExportResponseValidationError{}

// Validate checks the field values on AutoTestSpaceImportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoTestSpaceImportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestSpaceImportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoTestSpaceImportRequestMultiError, or nil if none found.
func (m *AutoTestSpaceImportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestSpaceImportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for FileType

	if len(errors) > 0 {
		return AutoTestSpaceImportRequestMultiError(errors)
	}

	return nil
}

// AutoTestSpaceImportRequestMultiError is an error wrapping multiple
// validation errors returned by AutoTestSpaceImportRequest.ValidateAll() if
// the designated constraints aren't met.
type AutoTestSpaceImportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestSpaceImportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestSpaceImportRequestMultiError) AllErrors() []error { return m }

// AutoTestSpaceImportRequestValidationError is the validation error returned
// by AutoTestSpaceImportRequest.Validate if the designated constraints aren't met.
type AutoTestSpaceImportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestSpaceImportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestSpaceImportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestSpaceImportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestSpaceImportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestSpaceImportRequestValidationError) ErrorName() string {
	return "AutoTestSpaceImportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestSpaceImportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestSpaceImportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestSpaceImportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestSpaceImportRequestValidationError{}

// Validate checks the field values on AutoTestSpaceImportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoTestSpaceImportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoTestSpaceImportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoTestSpaceImportResponseMultiError, or nil if none found.
func (m *AutoTestSpaceImportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoTestSpaceImportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return AutoTestSpaceImportResponseMultiError(errors)
	}

	return nil
}

// AutoTestSpaceImportResponseMultiError is an error wrapping multiple
// validation errors returned by AutoTestSpaceImportResponse.ValidateAll() if
// the designated constraints aren't met.
type AutoTestSpaceImportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoTestSpaceImportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoTestSpaceImportResponseMultiError) AllErrors() []error { return m }

// AutoTestSpaceImportResponseValidationError is the validation error returned
// by AutoTestSpaceImportResponse.Validate if the designated constraints
// aren't met.
type AutoTestSpaceImportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoTestSpaceImportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoTestSpaceImportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoTestSpaceImportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoTestSpaceImportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoTestSpaceImportResponseValidationError) ErrorName() string {
	return "AutoTestSpaceImportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AutoTestSpaceImportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoTestSpaceImportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoTestSpaceImportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoTestSpaceImportResponseValidationError{}

// Validate checks the field values on CreateTestReportRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTestReportRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTestReportRecordResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTestReportRecordResponseMultiError, or nil if none found.
func (m *CreateTestReportRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTestReportRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTestReportRecordResponseMultiError(errors)
	}

	return nil
}

// CreateTestReportRecordResponseMultiError is an error wrapping multiple
// validation errors returned by CreateTestReportRecordResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateTestReportRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTestReportRecordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTestReportRecordResponseMultiError) AllErrors() []error { return m }

// CreateTestReportRecordResponseValidationError is the validation error
// returned by CreateTestReportRecordResponse.Validate if the designated
// constraints aren't met.
type CreateTestReportRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTestReportRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTestReportRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTestReportRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTestReportRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTestReportRecordResponseValidationError) ErrorName() string {
	return "CreateTestReportRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTestReportRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTestReportRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTestReportRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTestReportRecordResponseValidationError{}

// Validate checks the field values on GetTestReportRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTestReportRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestReportRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestReportRecordResponseMultiError, or nil if none found.
func (m *GetTestReportRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestReportRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTestReportRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTestReportRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTestReportRecordResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTestReportRecordResponseMultiError(errors)
	}

	return nil
}

// GetTestReportRecordResponseMultiError is an error wrapping multiple
// validation errors returned by GetTestReportRecordResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTestReportRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestReportRecordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestReportRecordResponseMultiError) AllErrors() []error { return m }

// GetTestReportRecordResponseValidationError is the validation error returned
// by GetTestReportRecordResponse.Validate if the designated constraints
// aren't met.
type GetTestReportRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestReportRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestReportRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestReportRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestReportRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestReportRecordResponseValidationError) ErrorName() string {
	return "GetTestReportRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTestReportRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestReportRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestReportRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestReportRecordResponseValidationError{}

// Validate checks the field values on PipelineRunParam with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineRunParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRunParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineRunParamMultiError, or nil if none found.
func (m *PipelineRunParam) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRunParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineRunParamValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineRunParamValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineRunParamValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineRunParamMultiError(errors)
	}

	return nil
}

// PipelineRunParamMultiError is an error wrapping multiple validation errors
// returned by PipelineRunParam.ValidateAll() if the designated constraints
// aren't met.
type PipelineRunParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRunParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRunParamMultiError) AllErrors() []error { return m }

// PipelineRunParamValidationError is the validation error returned by
// PipelineRunParam.Validate if the designated constraints aren't met.
type PipelineRunParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRunParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRunParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRunParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRunParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRunParamValidationError) ErrorName() string { return "PipelineRunParamValidationError" }

// Error satisfies the builtin error interface
func (e PipelineRunParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRunParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRunParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRunParamValidationError{}

// Validate checks the field values on QA_REPORTSETS_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QA_REPORTSETS_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QA_REPORTSETS_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QA_REPORTSETS_LIST_RequestMultiError, or nil if none found.
func (m *QA_REPORTSETS_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QA_REPORTSETS_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return QA_REPORTSETS_LIST_RequestMultiError(errors)
	}

	return nil
}

// QA_REPORTSETS_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by QA_REPORTSETS_LIST_Request.ValidateAll() if
// the designated constraints aren't met.
type QA_REPORTSETS_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QA_REPORTSETS_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QA_REPORTSETS_LIST_RequestMultiError) AllErrors() []error { return m }

// QA_REPORTSETS_LIST_RequestValidationError is the validation error returned
// by QA_REPORTSETS_LIST_Request.Validate if the designated constraints aren't met.
type QA_REPORTSETS_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QA_REPORTSETS_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QA_REPORTSETS_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QA_REPORTSETS_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QA_REPORTSETS_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QA_REPORTSETS_LIST_RequestValidationError) ErrorName() string {
	return "QA_REPORTSETS_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QA_REPORTSETS_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQA_REPORTSETS_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QA_REPORTSETS_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QA_REPORTSETS_LIST_RequestValidationError{}

// Validate checks the field values on TestReportData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestReportData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestReportData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TestReportDataMultiError,
// or nil if none found.
func (m *TestReportData) ValidateAll() error {
	return m.validate(true)
}

func (m *TestReportData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.IssueDashboard != nil {

		if all {
			switch v := interface{}(m.GetIssueDashboard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestReportDataValidationError{
						field:  "IssueDashboard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestReportDataValidationError{
						field:  "IssueDashboard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIssueDashboard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestReportDataValidationError{
					field:  "IssueDashboard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TestDashboard != nil {

		if all {
			switch v := interface{}(m.GetTestDashboard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestReportDataValidationError{
						field:  "TestDashboard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestReportDataValidationError{
						field:  "TestDashboard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTestDashboard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestReportDataValidationError{
					field:  "TestDashboard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TestReportDataMultiError(errors)
	}

	return nil
}

// TestReportDataMultiError is an error wrapping multiple validation errors
// returned by TestReportData.ValidateAll() if the designated constraints
// aren't met.
type TestReportDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestReportDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestReportDataMultiError) AllErrors() []error { return m }

// TestReportDataValidationError is the validation error returned by
// TestReportData.Validate if the designated constraints aren't met.
type TestReportDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestReportDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestReportDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestReportDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestReportDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestReportDataValidationError) ErrorName() string { return "TestReportDataValidationError" }

// Error satisfies the builtin error interface
func (e TestReportDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestReportData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestReportDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestReportDataValidationError{}

// Validate checks the field values on TestReportRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TestReportRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestReportRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestReportRecordMultiError, or nil if none found.
func (m *TestReportRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *TestReportRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for ProjectID

	// no validation rules for IterationID

	// no validation rules for CreatorID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestReportRecordValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestReportRecordValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestReportRecordValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestReportRecordValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestReportRecordValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestReportRecordValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Summary

	// no validation rules for QualityScore

	if all {
		switch v := interface{}(m.GetReportData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestReportRecordValidationError{
					field:  "ReportData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestReportRecordValidationError{
					field:  "ReportData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestReportRecordValidationError{
				field:  "ReportData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TestReportRecordMultiError(errors)
	}

	return nil
}

// TestReportRecordMultiError is an error wrapping multiple validation errors
// returned by TestReportRecord.ValidateAll() if the designated constraints
// aren't met.
type TestReportRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestReportRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestReportRecordMultiError) AllErrors() []error { return m }

// TestReportRecordValidationError is the validation error returned by
// TestReportRecord.Validate if the designated constraints aren't met.
type TestReportRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestReportRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestReportRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestReportRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestReportRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestReportRecordValidationError) ErrorName() string { return "TestReportRecordValidationError" }

// Error satisfies the builtin error interface
func (e TestReportRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestReportRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestReportRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestReportRecordValidationError{}

// Validate checks the field values on UnifiedFileTreeNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnifiedFileTreeNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeMultiError, or nil if none found.
func (m *UnifiedFileTreeNode) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Inode

	// no validation rules for Pinode

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for CreatorID

	// no validation rules for UpdaterID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnifiedFileTreeNodeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnifiedFileTreeNodeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnifiedFileTreeNodeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnifiedFileTreeNodeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnifiedFileTreeNodeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnifiedFileTreeNodeValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetMeta()))
		i := 0
		for key := range m.GetMeta() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMeta()[key]
			_ = val

			// no validation rules for Meta[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UnifiedFileTreeNodeValidationError{
							field:  fmt.Sprintf("Meta[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UnifiedFileTreeNodeValidationError{
							field:  fmt.Sprintf("Meta[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UnifiedFileTreeNodeValidationError{
						field:  fmt.Sprintf("Meta[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return UnifiedFileTreeNodeMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeMultiError is an error wrapping multiple validation
// errors returned by UnifiedFileTreeNode.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeValidationError is the validation error returned by
// UnifiedFileTreeNode.Validate if the designated constraints aren't met.
type UnifiedFileTreeNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeCopyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnifiedFileTreeNodeCopyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeCopyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeCopyRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeCopyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeCopyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	// no validation rules for Pinode

	if len(errors) > 0 {
		return UnifiedFileTreeNodeCopyRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeCopyRequestMultiError is an error wrapping multiple
// validation errors returned by UnifiedFileTreeNodeCopyRequest.ValidateAll()
// if the designated constraints aren't met.
type UnifiedFileTreeNodeCopyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeCopyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeCopyRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeCopyRequestValidationError is the validation error
// returned by UnifiedFileTreeNodeCopyRequest.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeCopyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeCopyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeCopyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeCopyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeCopyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeCopyRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeCopyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeCopyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeCopyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeCopyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeCopyRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeCopyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnifiedFileTreeNodeCopyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeCopyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeCopyResponseMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeCopyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeCopyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeCopyResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeCopyResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnifiedFileTreeNodeCopyResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnifiedFileTreeNodeCopyResponseMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeCopyResponseMultiError is an error wrapping multiple
// validation errors returned by UnifiedFileTreeNodeCopyResponse.ValidateAll()
// if the designated constraints aren't met.
type UnifiedFileTreeNodeCopyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeCopyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeCopyResponseMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeCopyResponseValidationError is the validation error
// returned by UnifiedFileTreeNodeCopyResponse.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeCopyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeCopyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeCopyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeCopyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeCopyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeCopyResponseValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeCopyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeCopyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeCopyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeCopyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeCopyResponseValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnifiedFileTreeNodeCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeCreateRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for Pinode

	// no validation rules for Name

	// no validation rules for Desc

	if len(errors) > 0 {
		return UnifiedFileTreeNodeCreateRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeCreateRequestMultiError is an error wrapping multiple
// validation errors returned by
// UnifiedFileTreeNodeCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeCreateRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeCreateRequestValidationError is the validation error
// returned by UnifiedFileTreeNodeCreateRequest.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeCreateRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeCreateRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnifiedFileTreeNodeCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeCreateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeCreateResponseMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeCreateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeCreateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnifiedFileTreeNodeCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnifiedFileTreeNodeCreateResponseMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeCreateResponseMultiError is an error wrapping multiple
// validation errors returned by
// UnifiedFileTreeNodeCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeCreateResponseMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeCreateResponseValidationError is the validation error
// returned by UnifiedFileTreeNodeCreateResponse.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeCreateResponseValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeCreateResponseValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnifiedFileTreeNodeDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeDeleteRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	// no validation rules for Scope

	// no validation rules for ScopeID

	if len(errors) > 0 {
		return UnifiedFileTreeNodeDeleteRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by
// UnifiedFileTreeNodeDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeDeleteRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeDeleteRequestValidationError is the validation error
// returned by UnifiedFileTreeNodeDeleteRequest.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeDeleteRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeDeleteRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnifiedFileTreeNodeDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeDeleteResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeDeleteResponseMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeDeleteResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeDeleteResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnifiedFileTreeNodeDeleteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnifiedFileTreeNodeDeleteResponseMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by
// UnifiedFileTreeNodeDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeDeleteResponseMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeDeleteResponseValidationError is the validation error
// returned by UnifiedFileTreeNodeDeleteResponse.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeDeleteResponseValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeDeleteResponseValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeFindAncestorsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UnifiedFileTreeNodeFindAncestorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnifiedFileTreeNodeFindAncestorsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UnifiedFileTreeNodeFindAncestorsRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeFindAncestorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeFindAncestorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	// no validation rules for Scope

	// no validation rules for ScopeID

	if len(errors) > 0 {
		return UnifiedFileTreeNodeFindAncestorsRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeFindAncestorsRequestMultiError is an error wrapping
// multiple validation errors returned by
// UnifiedFileTreeNodeFindAncestorsRequest.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeFindAncestorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeFindAncestorsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeFindAncestorsRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeFindAncestorsRequestValidationError is the validation
// error returned by UnifiedFileTreeNodeFindAncestorsRequest.Validate if the
// designated constraints aren't met.
type UnifiedFileTreeNodeFindAncestorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeFindAncestorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeFindAncestorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeFindAncestorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeFindAncestorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeFindAncestorsRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeFindAncestorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeFindAncestorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeFindAncestorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeFindAncestorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeFindAncestorsRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeFindAncestorsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UnifiedFileTreeNodeFindAncestorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnifiedFileTreeNodeFindAncestorsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UnifiedFileTreeNodeFindAncestorsResponseMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeFindAncestorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeFindAncestorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeFindAncestorsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeFindAncestorsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnifiedFileTreeNodeFindAncestorsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnifiedFileTreeNodeFindAncestorsResponseMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeFindAncestorsResponseMultiError is an error wrapping
// multiple validation errors returned by
// UnifiedFileTreeNodeFindAncestorsResponse.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeFindAncestorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeFindAncestorsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeFindAncestorsResponseMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeFindAncestorsResponseValidationError is the validation
// error returned by UnifiedFileTreeNodeFindAncestorsResponse.Validate if the
// designated constraints aren't met.
type UnifiedFileTreeNodeFindAncestorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeFindAncestorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeFindAncestorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeFindAncestorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeFindAncestorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeFindAncestorsResponseValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeFindAncestorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeFindAncestorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeFindAncestorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeFindAncestorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeFindAncestorsResponseValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeFuzzySearchRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UnifiedFileTreeNodeFuzzySearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeFuzzySearchRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeFuzzySearchRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeFuzzySearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeFuzzySearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for FromPinode

	// no validation rules for Recursive

	// no validation rules for PrefixFuzzy

	// no validation rules for SuffixFuzzy

	// no validation rules for Fuzzy

	// no validation rules for CreatorID

	if len(errors) > 0 {
		return UnifiedFileTreeNodeFuzzySearchRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeFuzzySearchRequestMultiError is an error wrapping
// multiple validation errors returned by
// UnifiedFileTreeNodeFuzzySearchRequest.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeFuzzySearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeFuzzySearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeFuzzySearchRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeFuzzySearchRequestValidationError is the validation error
// returned by UnifiedFileTreeNodeFuzzySearchRequest.Validate if the
// designated constraints aren't met.
type UnifiedFileTreeNodeFuzzySearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeFuzzySearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeFuzzySearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeFuzzySearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeFuzzySearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeFuzzySearchRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeFuzzySearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeFuzzySearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeFuzzySearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeFuzzySearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeFuzzySearchRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeFuzzySearchResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UnifiedFileTreeNodeFuzzySearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnifiedFileTreeNodeFuzzySearchResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UnifiedFileTreeNodeFuzzySearchResponseMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeFuzzySearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeFuzzySearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeFuzzySearchResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeFuzzySearchResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnifiedFileTreeNodeFuzzySearchResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnifiedFileTreeNodeFuzzySearchResponseMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeFuzzySearchResponseMultiError is an error wrapping
// multiple validation errors returned by
// UnifiedFileTreeNodeFuzzySearchResponse.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeFuzzySearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeFuzzySearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeFuzzySearchResponseMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeFuzzySearchResponseValidationError is the validation
// error returned by UnifiedFileTreeNodeFuzzySearchResponse.Validate if the
// designated constraints aren't met.
type UnifiedFileTreeNodeFuzzySearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeFuzzySearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeFuzzySearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeFuzzySearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeFuzzySearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeFuzzySearchResponseValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeFuzzySearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeFuzzySearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeFuzzySearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeFuzzySearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeFuzzySearchResponseValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnifiedFileTreeNodeGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeGetRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	// no validation rules for Scope

	// no validation rules for ScopeID

	if len(errors) > 0 {
		return UnifiedFileTreeNodeGetRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeGetRequestMultiError is an error wrapping multiple
// validation errors returned by UnifiedFileTreeNodeGetRequest.ValidateAll()
// if the designated constraints aren't met.
type UnifiedFileTreeNodeGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeGetRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeGetRequestValidationError is the validation error
// returned by UnifiedFileTreeNodeGetRequest.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeGetRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeGetRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnifiedFileTreeNodeGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeGetResponseMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnifiedFileTreeNodeGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnifiedFileTreeNodeGetResponseMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeGetResponseMultiError is an error wrapping multiple
// validation errors returned by UnifiedFileTreeNodeGetResponse.ValidateAll()
// if the designated constraints aren't met.
type UnifiedFileTreeNodeGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeGetResponseMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeGetResponseValidationError is the validation error
// returned by UnifiedFileTreeNodeGetResponse.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeGetResponseValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeGetResponseValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeHistorySearchRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UnifiedFileTreeNodeHistorySearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnifiedFileTreeNodeHistorySearchRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UnifiedFileTreeNodeHistorySearchRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeHistorySearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeHistorySearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	if len(errors) > 0 {
		return UnifiedFileTreeNodeHistorySearchRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeHistorySearchRequestMultiError is an error wrapping
// multiple validation errors returned by
// UnifiedFileTreeNodeHistorySearchRequest.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeHistorySearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeHistorySearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeHistorySearchRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeHistorySearchRequestValidationError is the validation
// error returned by UnifiedFileTreeNodeHistorySearchRequest.Validate if the
// designated constraints aren't met.
type UnifiedFileTreeNodeHistorySearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeHistorySearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeHistorySearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeHistorySearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeHistorySearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeHistorySearchRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeHistorySearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeHistorySearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeHistorySearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeHistorySearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeHistorySearchRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnifiedFileTreeNodeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeListRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for Pinode

	// no validation rules for PipelineCategoryKey

	if len(errors) > 0 {
		return UnifiedFileTreeNodeListRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeListRequestMultiError is an error wrapping multiple
// validation errors returned by UnifiedFileTreeNodeListRequest.ValidateAll()
// if the designated constraints aren't met.
type UnifiedFileTreeNodeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeListRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeListRequestValidationError is the validation error
// returned by UnifiedFileTreeNodeListRequest.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeListRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeListRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnifiedFileTreeNodeListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeListResponseMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnifiedFileTreeNodeListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnifiedFileTreeNodeListResponseMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeListResponseMultiError is an error wrapping multiple
// validation errors returned by UnifiedFileTreeNodeListResponse.ValidateAll()
// if the designated constraints aren't met.
type UnifiedFileTreeNodeListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeListResponseMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeListResponseValidationError is the validation error
// returned by UnifiedFileTreeNodeListResponse.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeListResponseValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeListResponseValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeMoveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnifiedFileTreeNodeMoveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeMoveRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeMoveRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeMoveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeMoveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	// no validation rules for Pinode

	if len(errors) > 0 {
		return UnifiedFileTreeNodeMoveRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeMoveRequestMultiError is an error wrapping multiple
// validation errors returned by UnifiedFileTreeNodeMoveRequest.ValidateAll()
// if the designated constraints aren't met.
type UnifiedFileTreeNodeMoveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeMoveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeMoveRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeMoveRequestValidationError is the validation error
// returned by UnifiedFileTreeNodeMoveRequest.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeMoveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeMoveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeMoveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeMoveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeMoveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeMoveRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeMoveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeMoveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeMoveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeMoveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeMoveRequestValidationError{}

// Validate checks the field values on UnifiedFileTreeNodeMoveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnifiedFileTreeNodeMoveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnifiedFileTreeNodeMoveResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnifiedFileTreeNodeMoveResponseMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeMoveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeMoveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeMoveResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeMoveResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnifiedFileTreeNodeMoveResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnifiedFileTreeNodeMoveResponseMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeMoveResponseMultiError is an error wrapping multiple
// validation errors returned by UnifiedFileTreeNodeMoveResponse.ValidateAll()
// if the designated constraints aren't met.
type UnifiedFileTreeNodeMoveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeMoveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeMoveResponseMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeMoveResponseValidationError is the validation error
// returned by UnifiedFileTreeNodeMoveResponse.Validate if the designated
// constraints aren't met.
type UnifiedFileTreeNodeMoveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeMoveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeMoveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeMoveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeMoveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeMoveResponseValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeMoveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeMoveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeMoveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeMoveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeMoveResponseValidationError{}

// Validate checks the field values on
// UnifiedFileTreeNodeUpdateBasicInfoRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnifiedFileTreeNodeUpdateBasicInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnifiedFileTreeNodeUpdateBasicInfoRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UnifiedFileTreeNodeUpdateBasicInfoRequestMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeUpdateBasicInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeUpdateBasicInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Inode

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Desc != nil {
		// no validation rules for Desc
	}

	if len(errors) > 0 {
		return UnifiedFileTreeNodeUpdateBasicInfoRequestMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeUpdateBasicInfoRequestMultiError is an error wrapping
// multiple validation errors returned by
// UnifiedFileTreeNodeUpdateBasicInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeUpdateBasicInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeUpdateBasicInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeUpdateBasicInfoRequestMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeUpdateBasicInfoRequestValidationError is the validation
// error returned by UnifiedFileTreeNodeUpdateBasicInfoRequest.Validate if the
// designated constraints aren't met.
type UnifiedFileTreeNodeUpdateBasicInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeUpdateBasicInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeUpdateBasicInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeUpdateBasicInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeUpdateBasicInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeUpdateBasicInfoRequestValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeUpdateBasicInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeUpdateBasicInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeUpdateBasicInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeUpdateBasicInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeUpdateBasicInfoRequestValidationError{}

// Validate checks the field values on
// UnifiedFileTreeNodeUpdateBasicInfoResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnifiedFileTreeNodeUpdateBasicInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnifiedFileTreeNodeUpdateBasicInfoResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UnifiedFileTreeNodeUpdateBasicInfoResponseMultiError, or nil if none found.
func (m *UnifiedFileTreeNodeUpdateBasicInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnifiedFileTreeNodeUpdateBasicInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnifiedFileTreeNodeUpdateBasicInfoResponseMultiError(errors)
	}

	return nil
}

// UnifiedFileTreeNodeUpdateBasicInfoResponseMultiError is an error wrapping
// multiple validation errors returned by
// UnifiedFileTreeNodeUpdateBasicInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type UnifiedFileTreeNodeUpdateBasicInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnifiedFileTreeNodeUpdateBasicInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnifiedFileTreeNodeUpdateBasicInfoResponseMultiError) AllErrors() []error { return m }

// UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError is the validation
// error returned by UnifiedFileTreeNodeUpdateBasicInfoResponse.Validate if
// the designated constraints aren't met.
type UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError) ErrorName() string {
	return "UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnifiedFileTreeNodeUpdateBasicInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnifiedFileTreeNodeUpdateBasicInfoResponseValidationError{}
