// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: testplatform_autotest.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// TestplatformAutotestClient is the client API for TestplatformAutotest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestplatformAutotestClient interface {
	ACTION_LOG_DOWNLOAD(ctx context.Context, in *ACTION_LOG_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ACTION_LOG_GET(ctx context.Context, in *ACTION_LOG_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AUTOTESTS_SCENES_CANCEL(ctx context.Context, in *AUTOTESTS_SCENES_CANCEL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AUTOTESTS_SCENES_EXECUTE(ctx context.Context, in *AUTOTESTS_SCENES_EXECUTE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BATCH_QUERY_PIPELINE_SNIPPET_YAML(ctx context.Context, in *AutoTestCaseSavePipelineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FILETREE_NODE_COPY(ctx context.Context, in *UnifiedFileTreeNodeCopyRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeCopyResponse, error)
	FILETREE_NODE_CREATE(ctx context.Context, in *UnifiedFileTreeNodeCreateRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeCreateResponse, error)
	FILETREE_NODE_DELETE(ctx context.Context, in *UnifiedFileTreeNodeDeleteRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeDeleteResponse, error)
	FILETREE_NODE_FIND_ANCESTORS(ctx context.Context, in *UnifiedFileTreeNodeFindAncestorsRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeFindAncestorsResponse, error)
	FILETREE_NODE_FUZZY_SEARCH(ctx context.Context, in *UnifiedFileTreeNodeFuzzySearchRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeFuzzySearchResponse, error)
	FILETREE_NODE_GET(ctx context.Context, in *UnifiedFileTreeNodeGetRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeGetResponse, error)
	FILETREE_NODE_HISTORY_LIST(ctx context.Context, in *UnifiedFileTreeNodeHistorySearchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FILETREE_NODE_LIST(ctx context.Context, in *UnifiedFileTreeNodeListRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeListResponse, error)
	FILETREE_NODE_MOVE(ctx context.Context, in *UnifiedFileTreeNodeMoveRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeMoveResponse, error)
	FILETREE_NODE_SAVE_PIPELINE(ctx context.Context, in *AutoTestCaseSavePipelineRequest, opts ...grpc.CallOption) (*AutoTestCaseSavePipelineResponse, error)
	FILETREE_NODE_UPDATE_BASIC_INFO(ctx context.Context, in *UnifiedFileTreeNodeUpdateBasicInfoRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeUpdateBasicInfoResponse, error)
	GLOBAL_CONFIG_CREATE(ctx context.Context, in *AutoTestGlobalConfigCreateRequest, opts ...grpc.CallOption) (*AutoTestGlobalConfigCreateResponse, error)
	GLOBAL_CONFIG_DELETE(ctx context.Context, in *AutoTestGlobalConfigDeleteRequest, opts ...grpc.CallOption) (*AutoTestGlobalConfigDeleteResponse, error)
	GLOBAL_CONFIG_LIST(ctx context.Context, in *AutoTestGlobalConfigListRequest, opts ...grpc.CallOption) (*AutoTestGlobalConfigListResponse, error)
	GLOBAL_CONFIG_UPDATE(ctx context.Context, in *AutoTestGlobalConfigUpdateRequest, opts ...grpc.CallOption) (*AutoTestGlobalConfigUpdateResponse, error)
	QA_REPORTSETS_LIST(ctx context.Context, in *QA_REPORTSETS_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QUERY_PIPELINE_SNIPPET_YAML(ctx context.Context, in *AutoTestCaseSavePipelineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	REPORT_CREATE(ctx context.Context, in *TestReportRecord, opts ...grpc.CallOption) (*CreateTestReportRecordResponse, error)
	REPORT_GET(ctx context.Context, in *TestReportRecord, opts ...grpc.CallOption) (*GetTestReportRecordResponse, error)
	SCENE_SET_IMPORT(ctx context.Context, in *AutoTestSceneSetImportRequest, opts ...grpc.CallOption) (*AutoTestSceneSetImportResponse, error)
	SPACE_EXPORT(ctx context.Context, in *AutoTestSpaceExportRequest, opts ...grpc.CallOption) (*AutoTestSpaceExportResponse, error)
	SPACE_IMPORT(ctx context.Context, in *AutoTestSpaceImportRequest, opts ...grpc.CallOption) (*AutoTestSpaceImportResponse, error)
}

type testplatformAutotestClient struct {
	cc grpc1.ClientConnInterface
}

func NewTestplatformAutotestClient(cc grpc1.ClientConnInterface) TestplatformAutotestClient {
	return &testplatformAutotestClient{cc}
}

func (c *testplatformAutotestClient) ACTION_LOG_DOWNLOAD(ctx context.Context, in *ACTION_LOG_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/ACTION_LOG_DOWNLOAD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) ACTION_LOG_GET(ctx context.Context, in *ACTION_LOG_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/ACTION_LOG_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) AUTOTESTS_SCENES_CANCEL(ctx context.Context, in *AUTOTESTS_SCENES_CANCEL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/AUTOTESTS_SCENES_CANCEL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) AUTOTESTS_SCENES_EXECUTE(ctx context.Context, in *AUTOTESTS_SCENES_EXECUTE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/AUTOTESTS_SCENES_EXECUTE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) BATCH_QUERY_PIPELINE_SNIPPET_YAML(ctx context.Context, in *AutoTestCaseSavePipelineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/BATCH_QUERY_PIPELINE_SNIPPET_YAML", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) FILETREE_NODE_COPY(ctx context.Context, in *UnifiedFileTreeNodeCopyRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeCopyResponse, error) {
	out := new(UnifiedFileTreeNodeCopyResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_COPY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) FILETREE_NODE_CREATE(ctx context.Context, in *UnifiedFileTreeNodeCreateRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeCreateResponse, error) {
	out := new(UnifiedFileTreeNodeCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) FILETREE_NODE_DELETE(ctx context.Context, in *UnifiedFileTreeNodeDeleteRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeDeleteResponse, error) {
	out := new(UnifiedFileTreeNodeDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) FILETREE_NODE_FIND_ANCESTORS(ctx context.Context, in *UnifiedFileTreeNodeFindAncestorsRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeFindAncestorsResponse, error) {
	out := new(UnifiedFileTreeNodeFindAncestorsResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_FIND_ANCESTORS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) FILETREE_NODE_FUZZY_SEARCH(ctx context.Context, in *UnifiedFileTreeNodeFuzzySearchRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeFuzzySearchResponse, error) {
	out := new(UnifiedFileTreeNodeFuzzySearchResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_FUZZY_SEARCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) FILETREE_NODE_GET(ctx context.Context, in *UnifiedFileTreeNodeGetRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeGetResponse, error) {
	out := new(UnifiedFileTreeNodeGetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) FILETREE_NODE_HISTORY_LIST(ctx context.Context, in *UnifiedFileTreeNodeHistorySearchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_HISTORY_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) FILETREE_NODE_LIST(ctx context.Context, in *UnifiedFileTreeNodeListRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeListResponse, error) {
	out := new(UnifiedFileTreeNodeListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) FILETREE_NODE_MOVE(ctx context.Context, in *UnifiedFileTreeNodeMoveRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeMoveResponse, error) {
	out := new(UnifiedFileTreeNodeMoveResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_MOVE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) FILETREE_NODE_SAVE_PIPELINE(ctx context.Context, in *AutoTestCaseSavePipelineRequest, opts ...grpc.CallOption) (*AutoTestCaseSavePipelineResponse, error) {
	out := new(AutoTestCaseSavePipelineResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_SAVE_PIPELINE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) FILETREE_NODE_UPDATE_BASIC_INFO(ctx context.Context, in *UnifiedFileTreeNodeUpdateBasicInfoRequest, opts ...grpc.CallOption) (*UnifiedFileTreeNodeUpdateBasicInfoResponse, error) {
	out := new(UnifiedFileTreeNodeUpdateBasicInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_UPDATE_BASIC_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) GLOBAL_CONFIG_CREATE(ctx context.Context, in *AutoTestGlobalConfigCreateRequest, opts ...grpc.CallOption) (*AutoTestGlobalConfigCreateResponse, error) {
	out := new(AutoTestGlobalConfigCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/GLOBAL_CONFIG_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) GLOBAL_CONFIG_DELETE(ctx context.Context, in *AutoTestGlobalConfigDeleteRequest, opts ...grpc.CallOption) (*AutoTestGlobalConfigDeleteResponse, error) {
	out := new(AutoTestGlobalConfigDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/GLOBAL_CONFIG_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) GLOBAL_CONFIG_LIST(ctx context.Context, in *AutoTestGlobalConfigListRequest, opts ...grpc.CallOption) (*AutoTestGlobalConfigListResponse, error) {
	out := new(AutoTestGlobalConfigListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/GLOBAL_CONFIG_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) GLOBAL_CONFIG_UPDATE(ctx context.Context, in *AutoTestGlobalConfigUpdateRequest, opts ...grpc.CallOption) (*AutoTestGlobalConfigUpdateResponse, error) {
	out := new(AutoTestGlobalConfigUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/GLOBAL_CONFIG_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) QA_REPORTSETS_LIST(ctx context.Context, in *QA_REPORTSETS_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/QA_REPORTSETS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) QUERY_PIPELINE_SNIPPET_YAML(ctx context.Context, in *AutoTestCaseSavePipelineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/QUERY_PIPELINE_SNIPPET_YAML", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) REPORT_CREATE(ctx context.Context, in *TestReportRecord, opts ...grpc.CallOption) (*CreateTestReportRecordResponse, error) {
	out := new(CreateTestReportRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/REPORT_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) REPORT_GET(ctx context.Context, in *TestReportRecord, opts ...grpc.CallOption) (*GetTestReportRecordResponse, error) {
	out := new(GetTestReportRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/REPORT_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) SCENE_SET_IMPORT(ctx context.Context, in *AutoTestSceneSetImportRequest, opts ...grpc.CallOption) (*AutoTestSceneSetImportResponse, error) {
	out := new(AutoTestSceneSetImportResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/SCENE_SET_IMPORT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) SPACE_EXPORT(ctx context.Context, in *AutoTestSpaceExportRequest, opts ...grpc.CallOption) (*AutoTestSpaceExportResponse, error) {
	out := new(AutoTestSpaceExportResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/SPACE_EXPORT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformAutotestClient) SPACE_IMPORT(ctx context.Context, in *AutoTestSpaceImportRequest, opts ...grpc.CallOption) (*AutoTestSpaceImportResponse, error) {
	out := new(AutoTestSpaceImportResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_autotest/SPACE_IMPORT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestplatformAutotestServer is the server API for TestplatformAutotest service.
// All implementations should embed UnimplementedTestplatformAutotestServer
// for forward compatibility
type TestplatformAutotestServer interface {
	ACTION_LOG_DOWNLOAD(context.Context, *ACTION_LOG_DOWNLOAD_Request) (*emptypb.Empty, error)
	ACTION_LOG_GET(context.Context, *ACTION_LOG_GET_Request) (*emptypb.Empty, error)
	AUTOTESTS_SCENES_CANCEL(context.Context, *AUTOTESTS_SCENES_CANCEL_Request) (*emptypb.Empty, error)
	AUTOTESTS_SCENES_EXECUTE(context.Context, *AUTOTESTS_SCENES_EXECUTE_Request) (*emptypb.Empty, error)
	BATCH_QUERY_PIPELINE_SNIPPET_YAML(context.Context, *AutoTestCaseSavePipelineRequest) (*emptypb.Empty, error)
	FILETREE_NODE_COPY(context.Context, *UnifiedFileTreeNodeCopyRequest) (*UnifiedFileTreeNodeCopyResponse, error)
	FILETREE_NODE_CREATE(context.Context, *UnifiedFileTreeNodeCreateRequest) (*UnifiedFileTreeNodeCreateResponse, error)
	FILETREE_NODE_DELETE(context.Context, *UnifiedFileTreeNodeDeleteRequest) (*UnifiedFileTreeNodeDeleteResponse, error)
	FILETREE_NODE_FIND_ANCESTORS(context.Context, *UnifiedFileTreeNodeFindAncestorsRequest) (*UnifiedFileTreeNodeFindAncestorsResponse, error)
	FILETREE_NODE_FUZZY_SEARCH(context.Context, *UnifiedFileTreeNodeFuzzySearchRequest) (*UnifiedFileTreeNodeFuzzySearchResponse, error)
	FILETREE_NODE_GET(context.Context, *UnifiedFileTreeNodeGetRequest) (*UnifiedFileTreeNodeGetResponse, error)
	FILETREE_NODE_HISTORY_LIST(context.Context, *UnifiedFileTreeNodeHistorySearchRequest) (*emptypb.Empty, error)
	FILETREE_NODE_LIST(context.Context, *UnifiedFileTreeNodeListRequest) (*UnifiedFileTreeNodeListResponse, error)
	FILETREE_NODE_MOVE(context.Context, *UnifiedFileTreeNodeMoveRequest) (*UnifiedFileTreeNodeMoveResponse, error)
	FILETREE_NODE_SAVE_PIPELINE(context.Context, *AutoTestCaseSavePipelineRequest) (*AutoTestCaseSavePipelineResponse, error)
	FILETREE_NODE_UPDATE_BASIC_INFO(context.Context, *UnifiedFileTreeNodeUpdateBasicInfoRequest) (*UnifiedFileTreeNodeUpdateBasicInfoResponse, error)
	GLOBAL_CONFIG_CREATE(context.Context, *AutoTestGlobalConfigCreateRequest) (*AutoTestGlobalConfigCreateResponse, error)
	GLOBAL_CONFIG_DELETE(context.Context, *AutoTestGlobalConfigDeleteRequest) (*AutoTestGlobalConfigDeleteResponse, error)
	GLOBAL_CONFIG_LIST(context.Context, *AutoTestGlobalConfigListRequest) (*AutoTestGlobalConfigListResponse, error)
	GLOBAL_CONFIG_UPDATE(context.Context, *AutoTestGlobalConfigUpdateRequest) (*AutoTestGlobalConfigUpdateResponse, error)
	QA_REPORTSETS_LIST(context.Context, *QA_REPORTSETS_LIST_Request) (*emptypb.Empty, error)
	QUERY_PIPELINE_SNIPPET_YAML(context.Context, *AutoTestCaseSavePipelineRequest) (*emptypb.Empty, error)
	REPORT_CREATE(context.Context, *TestReportRecord) (*CreateTestReportRecordResponse, error)
	REPORT_GET(context.Context, *TestReportRecord) (*GetTestReportRecordResponse, error)
	SCENE_SET_IMPORT(context.Context, *AutoTestSceneSetImportRequest) (*AutoTestSceneSetImportResponse, error)
	SPACE_EXPORT(context.Context, *AutoTestSpaceExportRequest) (*AutoTestSpaceExportResponse, error)
	SPACE_IMPORT(context.Context, *AutoTestSpaceImportRequest) (*AutoTestSpaceImportResponse, error)
}

// UnimplementedTestplatformAutotestServer should be embedded to have forward compatible implementations.
type UnimplementedTestplatformAutotestServer struct {
}

func (*UnimplementedTestplatformAutotestServer) ACTION_LOG_DOWNLOAD(context.Context, *ACTION_LOG_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ACTION_LOG_DOWNLOAD not implemented")
}
func (*UnimplementedTestplatformAutotestServer) ACTION_LOG_GET(context.Context, *ACTION_LOG_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ACTION_LOG_GET not implemented")
}
func (*UnimplementedTestplatformAutotestServer) AUTOTESTS_SCENES_CANCEL(context.Context, *AUTOTESTS_SCENES_CANCEL_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AUTOTESTS_SCENES_CANCEL not implemented")
}
func (*UnimplementedTestplatformAutotestServer) AUTOTESTS_SCENES_EXECUTE(context.Context, *AUTOTESTS_SCENES_EXECUTE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AUTOTESTS_SCENES_EXECUTE not implemented")
}
func (*UnimplementedTestplatformAutotestServer) BATCH_QUERY_PIPELINE_SNIPPET_YAML(context.Context, *AutoTestCaseSavePipelineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BATCH_QUERY_PIPELINE_SNIPPET_YAML not implemented")
}
func (*UnimplementedTestplatformAutotestServer) FILETREE_NODE_COPY(context.Context, *UnifiedFileTreeNodeCopyRequest) (*UnifiedFileTreeNodeCopyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FILETREE_NODE_COPY not implemented")
}
func (*UnimplementedTestplatformAutotestServer) FILETREE_NODE_CREATE(context.Context, *UnifiedFileTreeNodeCreateRequest) (*UnifiedFileTreeNodeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FILETREE_NODE_CREATE not implemented")
}
func (*UnimplementedTestplatformAutotestServer) FILETREE_NODE_DELETE(context.Context, *UnifiedFileTreeNodeDeleteRequest) (*UnifiedFileTreeNodeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FILETREE_NODE_DELETE not implemented")
}
func (*UnimplementedTestplatformAutotestServer) FILETREE_NODE_FIND_ANCESTORS(context.Context, *UnifiedFileTreeNodeFindAncestorsRequest) (*UnifiedFileTreeNodeFindAncestorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FILETREE_NODE_FIND_ANCESTORS not implemented")
}
func (*UnimplementedTestplatformAutotestServer) FILETREE_NODE_FUZZY_SEARCH(context.Context, *UnifiedFileTreeNodeFuzzySearchRequest) (*UnifiedFileTreeNodeFuzzySearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FILETREE_NODE_FUZZY_SEARCH not implemented")
}
func (*UnimplementedTestplatformAutotestServer) FILETREE_NODE_GET(context.Context, *UnifiedFileTreeNodeGetRequest) (*UnifiedFileTreeNodeGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FILETREE_NODE_GET not implemented")
}
func (*UnimplementedTestplatformAutotestServer) FILETREE_NODE_HISTORY_LIST(context.Context, *UnifiedFileTreeNodeHistorySearchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FILETREE_NODE_HISTORY_LIST not implemented")
}
func (*UnimplementedTestplatformAutotestServer) FILETREE_NODE_LIST(context.Context, *UnifiedFileTreeNodeListRequest) (*UnifiedFileTreeNodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FILETREE_NODE_LIST not implemented")
}
func (*UnimplementedTestplatformAutotestServer) FILETREE_NODE_MOVE(context.Context, *UnifiedFileTreeNodeMoveRequest) (*UnifiedFileTreeNodeMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FILETREE_NODE_MOVE not implemented")
}
func (*UnimplementedTestplatformAutotestServer) FILETREE_NODE_SAVE_PIPELINE(context.Context, *AutoTestCaseSavePipelineRequest) (*AutoTestCaseSavePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FILETREE_NODE_SAVE_PIPELINE not implemented")
}
func (*UnimplementedTestplatformAutotestServer) FILETREE_NODE_UPDATE_BASIC_INFO(context.Context, *UnifiedFileTreeNodeUpdateBasicInfoRequest) (*UnifiedFileTreeNodeUpdateBasicInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FILETREE_NODE_UPDATE_BASIC_INFO not implemented")
}
func (*UnimplementedTestplatformAutotestServer) GLOBAL_CONFIG_CREATE(context.Context, *AutoTestGlobalConfigCreateRequest) (*AutoTestGlobalConfigCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GLOBAL_CONFIG_CREATE not implemented")
}
func (*UnimplementedTestplatformAutotestServer) GLOBAL_CONFIG_DELETE(context.Context, *AutoTestGlobalConfigDeleteRequest) (*AutoTestGlobalConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GLOBAL_CONFIG_DELETE not implemented")
}
func (*UnimplementedTestplatformAutotestServer) GLOBAL_CONFIG_LIST(context.Context, *AutoTestGlobalConfigListRequest) (*AutoTestGlobalConfigListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GLOBAL_CONFIG_LIST not implemented")
}
func (*UnimplementedTestplatformAutotestServer) GLOBAL_CONFIG_UPDATE(context.Context, *AutoTestGlobalConfigUpdateRequest) (*AutoTestGlobalConfigUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GLOBAL_CONFIG_UPDATE not implemented")
}
func (*UnimplementedTestplatformAutotestServer) QA_REPORTSETS_LIST(context.Context, *QA_REPORTSETS_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QA_REPORTSETS_LIST not implemented")
}
func (*UnimplementedTestplatformAutotestServer) QUERY_PIPELINE_SNIPPET_YAML(context.Context, *AutoTestCaseSavePipelineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QUERY_PIPELINE_SNIPPET_YAML not implemented")
}
func (*UnimplementedTestplatformAutotestServer) REPORT_CREATE(context.Context, *TestReportRecord) (*CreateTestReportRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method REPORT_CREATE not implemented")
}
func (*UnimplementedTestplatformAutotestServer) REPORT_GET(context.Context, *TestReportRecord) (*GetTestReportRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method REPORT_GET not implemented")
}
func (*UnimplementedTestplatformAutotestServer) SCENE_SET_IMPORT(context.Context, *AutoTestSceneSetImportRequest) (*AutoTestSceneSetImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SCENE_SET_IMPORT not implemented")
}
func (*UnimplementedTestplatformAutotestServer) SPACE_EXPORT(context.Context, *AutoTestSpaceExportRequest) (*AutoTestSpaceExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPACE_EXPORT not implemented")
}
func (*UnimplementedTestplatformAutotestServer) SPACE_IMPORT(context.Context, *AutoTestSpaceImportRequest) (*AutoTestSpaceImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPACE_IMPORT not implemented")
}

func RegisterTestplatformAutotestServer(s grpc1.ServiceRegistrar, srv TestplatformAutotestServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_TestplatformAutotest_serviceDesc(srv, opts...), srv)
}

var _TestplatformAutotest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.testplatform.testplatform_autotest",
	HandlerType: (*TestplatformAutotestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "testplatform_autotest.proto",
}

func _get_TestplatformAutotest_serviceDesc(srv TestplatformAutotestServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_TestplatformAutotest_ACTION_LOG_DOWNLOAD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ACTION_LOG_DOWNLOAD(ctx, req.(*ACTION_LOG_DOWNLOAD_Request))
	}
	var _TestplatformAutotest_ACTION_LOG_DOWNLOAD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_ACTION_LOG_DOWNLOAD_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "ACTION_LOG_DOWNLOAD", srv)
		_TestplatformAutotest_ACTION_LOG_DOWNLOAD_Handler = h.Interceptor(_TestplatformAutotest_ACTION_LOG_DOWNLOAD_Handler)
	}

	_TestplatformAutotest_ACTION_LOG_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ACTION_LOG_GET(ctx, req.(*ACTION_LOG_GET_Request))
	}
	var _TestplatformAutotest_ACTION_LOG_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_ACTION_LOG_GET_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "ACTION_LOG_GET", srv)
		_TestplatformAutotest_ACTION_LOG_GET_Handler = h.Interceptor(_TestplatformAutotest_ACTION_LOG_GET_Handler)
	}

	_TestplatformAutotest_AUTOTESTS_SCENES_CANCEL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.AUTOTESTS_SCENES_CANCEL(ctx, req.(*AUTOTESTS_SCENES_CANCEL_Request))
	}
	var _TestplatformAutotest_AUTOTESTS_SCENES_CANCEL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_AUTOTESTS_SCENES_CANCEL_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "AUTOTESTS_SCENES_CANCEL", srv)
		_TestplatformAutotest_AUTOTESTS_SCENES_CANCEL_Handler = h.Interceptor(_TestplatformAutotest_AUTOTESTS_SCENES_CANCEL_Handler)
	}

	_TestplatformAutotest_AUTOTESTS_SCENES_EXECUTE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.AUTOTESTS_SCENES_EXECUTE(ctx, req.(*AUTOTESTS_SCENES_EXECUTE_Request))
	}
	var _TestplatformAutotest_AUTOTESTS_SCENES_EXECUTE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_AUTOTESTS_SCENES_EXECUTE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "AUTOTESTS_SCENES_EXECUTE", srv)
		_TestplatformAutotest_AUTOTESTS_SCENES_EXECUTE_Handler = h.Interceptor(_TestplatformAutotest_AUTOTESTS_SCENES_EXECUTE_Handler)
	}

	_TestplatformAutotest_BATCH_QUERY_PIPELINE_SNIPPET_YAML_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.BATCH_QUERY_PIPELINE_SNIPPET_YAML(ctx, req.(*AutoTestCaseSavePipelineRequest))
	}
	var _TestplatformAutotest_BATCH_QUERY_PIPELINE_SNIPPET_YAML_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_BATCH_QUERY_PIPELINE_SNIPPET_YAML_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "BATCH_QUERY_PIPELINE_SNIPPET_YAML", srv)
		_TestplatformAutotest_BATCH_QUERY_PIPELINE_SNIPPET_YAML_Handler = h.Interceptor(_TestplatformAutotest_BATCH_QUERY_PIPELINE_SNIPPET_YAML_Handler)
	}

	_TestplatformAutotest_FILETREE_NODE_COPY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FILETREE_NODE_COPY(ctx, req.(*UnifiedFileTreeNodeCopyRequest))
	}
	var _TestplatformAutotest_FILETREE_NODE_COPY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_FILETREE_NODE_COPY_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "FILETREE_NODE_COPY", srv)
		_TestplatformAutotest_FILETREE_NODE_COPY_Handler = h.Interceptor(_TestplatformAutotest_FILETREE_NODE_COPY_Handler)
	}

	_TestplatformAutotest_FILETREE_NODE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FILETREE_NODE_CREATE(ctx, req.(*UnifiedFileTreeNodeCreateRequest))
	}
	var _TestplatformAutotest_FILETREE_NODE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_FILETREE_NODE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "FILETREE_NODE_CREATE", srv)
		_TestplatformAutotest_FILETREE_NODE_CREATE_Handler = h.Interceptor(_TestplatformAutotest_FILETREE_NODE_CREATE_Handler)
	}

	_TestplatformAutotest_FILETREE_NODE_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FILETREE_NODE_DELETE(ctx, req.(*UnifiedFileTreeNodeDeleteRequest))
	}
	var _TestplatformAutotest_FILETREE_NODE_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_FILETREE_NODE_DELETE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "FILETREE_NODE_DELETE", srv)
		_TestplatformAutotest_FILETREE_NODE_DELETE_Handler = h.Interceptor(_TestplatformAutotest_FILETREE_NODE_DELETE_Handler)
	}

	_TestplatformAutotest_FILETREE_NODE_FIND_ANCESTORS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FILETREE_NODE_FIND_ANCESTORS(ctx, req.(*UnifiedFileTreeNodeFindAncestorsRequest))
	}
	var _TestplatformAutotest_FILETREE_NODE_FIND_ANCESTORS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_FILETREE_NODE_FIND_ANCESTORS_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "FILETREE_NODE_FIND_ANCESTORS", srv)
		_TestplatformAutotest_FILETREE_NODE_FIND_ANCESTORS_Handler = h.Interceptor(_TestplatformAutotest_FILETREE_NODE_FIND_ANCESTORS_Handler)
	}

	_TestplatformAutotest_FILETREE_NODE_FUZZY_SEARCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FILETREE_NODE_FUZZY_SEARCH(ctx, req.(*UnifiedFileTreeNodeFuzzySearchRequest))
	}
	var _TestplatformAutotest_FILETREE_NODE_FUZZY_SEARCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_FILETREE_NODE_FUZZY_SEARCH_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "FILETREE_NODE_FUZZY_SEARCH", srv)
		_TestplatformAutotest_FILETREE_NODE_FUZZY_SEARCH_Handler = h.Interceptor(_TestplatformAutotest_FILETREE_NODE_FUZZY_SEARCH_Handler)
	}

	_TestplatformAutotest_FILETREE_NODE_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FILETREE_NODE_GET(ctx, req.(*UnifiedFileTreeNodeGetRequest))
	}
	var _TestplatformAutotest_FILETREE_NODE_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_FILETREE_NODE_GET_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "FILETREE_NODE_GET", srv)
		_TestplatformAutotest_FILETREE_NODE_GET_Handler = h.Interceptor(_TestplatformAutotest_FILETREE_NODE_GET_Handler)
	}

	_TestplatformAutotest_FILETREE_NODE_HISTORY_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FILETREE_NODE_HISTORY_LIST(ctx, req.(*UnifiedFileTreeNodeHistorySearchRequest))
	}
	var _TestplatformAutotest_FILETREE_NODE_HISTORY_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_FILETREE_NODE_HISTORY_LIST_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "FILETREE_NODE_HISTORY_LIST", srv)
		_TestplatformAutotest_FILETREE_NODE_HISTORY_LIST_Handler = h.Interceptor(_TestplatformAutotest_FILETREE_NODE_HISTORY_LIST_Handler)
	}

	_TestplatformAutotest_FILETREE_NODE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FILETREE_NODE_LIST(ctx, req.(*UnifiedFileTreeNodeListRequest))
	}
	var _TestplatformAutotest_FILETREE_NODE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_FILETREE_NODE_LIST_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "FILETREE_NODE_LIST", srv)
		_TestplatformAutotest_FILETREE_NODE_LIST_Handler = h.Interceptor(_TestplatformAutotest_FILETREE_NODE_LIST_Handler)
	}

	_TestplatformAutotest_FILETREE_NODE_MOVE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FILETREE_NODE_MOVE(ctx, req.(*UnifiedFileTreeNodeMoveRequest))
	}
	var _TestplatformAutotest_FILETREE_NODE_MOVE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_FILETREE_NODE_MOVE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "FILETREE_NODE_MOVE", srv)
		_TestplatformAutotest_FILETREE_NODE_MOVE_Handler = h.Interceptor(_TestplatformAutotest_FILETREE_NODE_MOVE_Handler)
	}

	_TestplatformAutotest_FILETREE_NODE_SAVE_PIPELINE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FILETREE_NODE_SAVE_PIPELINE(ctx, req.(*AutoTestCaseSavePipelineRequest))
	}
	var _TestplatformAutotest_FILETREE_NODE_SAVE_PIPELINE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_FILETREE_NODE_SAVE_PIPELINE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "FILETREE_NODE_SAVE_PIPELINE", srv)
		_TestplatformAutotest_FILETREE_NODE_SAVE_PIPELINE_Handler = h.Interceptor(_TestplatformAutotest_FILETREE_NODE_SAVE_PIPELINE_Handler)
	}

	_TestplatformAutotest_FILETREE_NODE_UPDATE_BASIC_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.FILETREE_NODE_UPDATE_BASIC_INFO(ctx, req.(*UnifiedFileTreeNodeUpdateBasicInfoRequest))
	}
	var _TestplatformAutotest_FILETREE_NODE_UPDATE_BASIC_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_FILETREE_NODE_UPDATE_BASIC_INFO_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "FILETREE_NODE_UPDATE_BASIC_INFO", srv)
		_TestplatformAutotest_FILETREE_NODE_UPDATE_BASIC_INFO_Handler = h.Interceptor(_TestplatformAutotest_FILETREE_NODE_UPDATE_BASIC_INFO_Handler)
	}

	_TestplatformAutotest_GLOBAL_CONFIG_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GLOBAL_CONFIG_CREATE(ctx, req.(*AutoTestGlobalConfigCreateRequest))
	}
	var _TestplatformAutotest_GLOBAL_CONFIG_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_GLOBAL_CONFIG_CREATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "GLOBAL_CONFIG_CREATE", srv)
		_TestplatformAutotest_GLOBAL_CONFIG_CREATE_Handler = h.Interceptor(_TestplatformAutotest_GLOBAL_CONFIG_CREATE_Handler)
	}

	_TestplatformAutotest_GLOBAL_CONFIG_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GLOBAL_CONFIG_DELETE(ctx, req.(*AutoTestGlobalConfigDeleteRequest))
	}
	var _TestplatformAutotest_GLOBAL_CONFIG_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_GLOBAL_CONFIG_DELETE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "GLOBAL_CONFIG_DELETE", srv)
		_TestplatformAutotest_GLOBAL_CONFIG_DELETE_Handler = h.Interceptor(_TestplatformAutotest_GLOBAL_CONFIG_DELETE_Handler)
	}

	_TestplatformAutotest_GLOBAL_CONFIG_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GLOBAL_CONFIG_LIST(ctx, req.(*AutoTestGlobalConfigListRequest))
	}
	var _TestplatformAutotest_GLOBAL_CONFIG_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_GLOBAL_CONFIG_LIST_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "GLOBAL_CONFIG_LIST", srv)
		_TestplatformAutotest_GLOBAL_CONFIG_LIST_Handler = h.Interceptor(_TestplatformAutotest_GLOBAL_CONFIG_LIST_Handler)
	}

	_TestplatformAutotest_GLOBAL_CONFIG_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GLOBAL_CONFIG_UPDATE(ctx, req.(*AutoTestGlobalConfigUpdateRequest))
	}
	var _TestplatformAutotest_GLOBAL_CONFIG_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_GLOBAL_CONFIG_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "GLOBAL_CONFIG_UPDATE", srv)
		_TestplatformAutotest_GLOBAL_CONFIG_UPDATE_Handler = h.Interceptor(_TestplatformAutotest_GLOBAL_CONFIG_UPDATE_Handler)
	}

	_TestplatformAutotest_QA_REPORTSETS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QA_REPORTSETS_LIST(ctx, req.(*QA_REPORTSETS_LIST_Request))
	}
	var _TestplatformAutotest_QA_REPORTSETS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_QA_REPORTSETS_LIST_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "QA_REPORTSETS_LIST", srv)
		_TestplatformAutotest_QA_REPORTSETS_LIST_Handler = h.Interceptor(_TestplatformAutotest_QA_REPORTSETS_LIST_Handler)
	}

	_TestplatformAutotest_QUERY_PIPELINE_SNIPPET_YAML_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QUERY_PIPELINE_SNIPPET_YAML(ctx, req.(*AutoTestCaseSavePipelineRequest))
	}
	var _TestplatformAutotest_QUERY_PIPELINE_SNIPPET_YAML_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_QUERY_PIPELINE_SNIPPET_YAML_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "QUERY_PIPELINE_SNIPPET_YAML", srv)
		_TestplatformAutotest_QUERY_PIPELINE_SNIPPET_YAML_Handler = h.Interceptor(_TestplatformAutotest_QUERY_PIPELINE_SNIPPET_YAML_Handler)
	}

	_TestplatformAutotest_REPORT_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.REPORT_CREATE(ctx, req.(*TestReportRecord))
	}
	var _TestplatformAutotest_REPORT_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_REPORT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "REPORT_CREATE", srv)
		_TestplatformAutotest_REPORT_CREATE_Handler = h.Interceptor(_TestplatformAutotest_REPORT_CREATE_Handler)
	}

	_TestplatformAutotest_REPORT_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.REPORT_GET(ctx, req.(*TestReportRecord))
	}
	var _TestplatformAutotest_REPORT_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_REPORT_GET_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "REPORT_GET", srv)
		_TestplatformAutotest_REPORT_GET_Handler = h.Interceptor(_TestplatformAutotest_REPORT_GET_Handler)
	}

	_TestplatformAutotest_SCENE_SET_IMPORT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SCENE_SET_IMPORT(ctx, req.(*AutoTestSceneSetImportRequest))
	}
	var _TestplatformAutotest_SCENE_SET_IMPORT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_SCENE_SET_IMPORT_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "SCENE_SET_IMPORT", srv)
		_TestplatformAutotest_SCENE_SET_IMPORT_Handler = h.Interceptor(_TestplatformAutotest_SCENE_SET_IMPORT_Handler)
	}

	_TestplatformAutotest_SPACE_EXPORT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPACE_EXPORT(ctx, req.(*AutoTestSpaceExportRequest))
	}
	var _TestplatformAutotest_SPACE_EXPORT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_SPACE_EXPORT_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "SPACE_EXPORT", srv)
		_TestplatformAutotest_SPACE_EXPORT_Handler = h.Interceptor(_TestplatformAutotest_SPACE_EXPORT_Handler)
	}

	_TestplatformAutotest_SPACE_IMPORT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPACE_IMPORT(ctx, req.(*AutoTestSpaceImportRequest))
	}
	var _TestplatformAutotest_SPACE_IMPORT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformAutotest_SPACE_IMPORT_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_autotest", "SPACE_IMPORT", srv)
		_TestplatformAutotest_SPACE_IMPORT_Handler = h.Interceptor(_TestplatformAutotest_SPACE_IMPORT_Handler)
	}

	var serviceDesc = _TestplatformAutotest_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ACTION_LOG_DOWNLOAD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ACTION_LOG_DOWNLOAD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).ACTION_LOG_DOWNLOAD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_ACTION_LOG_DOWNLOAD_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_ACTION_LOG_DOWNLOAD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/ACTION_LOG_DOWNLOAD",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_ACTION_LOG_DOWNLOAD_Handler)
			},
		},
		{
			MethodName: "ACTION_LOG_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ACTION_LOG_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).ACTION_LOG_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_ACTION_LOG_GET_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_ACTION_LOG_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/ACTION_LOG_GET",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_ACTION_LOG_GET_Handler)
			},
		},
		{
			MethodName: "AUTOTESTS_SCENES_CANCEL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AUTOTESTS_SCENES_CANCEL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).AUTOTESTS_SCENES_CANCEL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_AUTOTESTS_SCENES_CANCEL_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_AUTOTESTS_SCENES_CANCEL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/AUTOTESTS_SCENES_CANCEL",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_AUTOTESTS_SCENES_CANCEL_Handler)
			},
		},
		{
			MethodName: "AUTOTESTS_SCENES_EXECUTE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AUTOTESTS_SCENES_EXECUTE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).AUTOTESTS_SCENES_EXECUTE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_AUTOTESTS_SCENES_EXECUTE_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_AUTOTESTS_SCENES_EXECUTE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/AUTOTESTS_SCENES_EXECUTE",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_AUTOTESTS_SCENES_EXECUTE_Handler)
			},
		},
		{
			MethodName: "BATCH_QUERY_PIPELINE_SNIPPET_YAML",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AutoTestCaseSavePipelineRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).BATCH_QUERY_PIPELINE_SNIPPET_YAML(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_BATCH_QUERY_PIPELINE_SNIPPET_YAML_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_BATCH_QUERY_PIPELINE_SNIPPET_YAML_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/BATCH_QUERY_PIPELINE_SNIPPET_YAML",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_BATCH_QUERY_PIPELINE_SNIPPET_YAML_Handler)
			},
		},
		{
			MethodName: "FILETREE_NODE_COPY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeCopyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).FILETREE_NODE_COPY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_FILETREE_NODE_COPY_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_FILETREE_NODE_COPY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_COPY",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_FILETREE_NODE_COPY_Handler)
			},
		},
		{
			MethodName: "FILETREE_NODE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).FILETREE_NODE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_FILETREE_NODE_CREATE_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_FILETREE_NODE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_CREATE",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_FILETREE_NODE_CREATE_Handler)
			},
		},
		{
			MethodName: "FILETREE_NODE_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).FILETREE_NODE_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_FILETREE_NODE_DELETE_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_FILETREE_NODE_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_DELETE",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_FILETREE_NODE_DELETE_Handler)
			},
		},
		{
			MethodName: "FILETREE_NODE_FIND_ANCESTORS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeFindAncestorsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).FILETREE_NODE_FIND_ANCESTORS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_FILETREE_NODE_FIND_ANCESTORS_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_FILETREE_NODE_FIND_ANCESTORS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_FIND_ANCESTORS",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_FILETREE_NODE_FIND_ANCESTORS_Handler)
			},
		},
		{
			MethodName: "FILETREE_NODE_FUZZY_SEARCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeFuzzySearchRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).FILETREE_NODE_FUZZY_SEARCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_FILETREE_NODE_FUZZY_SEARCH_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_FILETREE_NODE_FUZZY_SEARCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_FUZZY_SEARCH",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_FILETREE_NODE_FUZZY_SEARCH_Handler)
			},
		},
		{
			MethodName: "FILETREE_NODE_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeGetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).FILETREE_NODE_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_FILETREE_NODE_GET_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_FILETREE_NODE_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_GET",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_FILETREE_NODE_GET_Handler)
			},
		},
		{
			MethodName: "FILETREE_NODE_HISTORY_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeHistorySearchRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).FILETREE_NODE_HISTORY_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_FILETREE_NODE_HISTORY_LIST_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_FILETREE_NODE_HISTORY_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_HISTORY_LIST",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_FILETREE_NODE_HISTORY_LIST_Handler)
			},
		},
		{
			MethodName: "FILETREE_NODE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).FILETREE_NODE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_FILETREE_NODE_LIST_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_FILETREE_NODE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_LIST",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_FILETREE_NODE_LIST_Handler)
			},
		},
		{
			MethodName: "FILETREE_NODE_MOVE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeMoveRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).FILETREE_NODE_MOVE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_FILETREE_NODE_MOVE_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_FILETREE_NODE_MOVE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_MOVE",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_FILETREE_NODE_MOVE_Handler)
			},
		},
		{
			MethodName: "FILETREE_NODE_SAVE_PIPELINE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AutoTestCaseSavePipelineRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).FILETREE_NODE_SAVE_PIPELINE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_FILETREE_NODE_SAVE_PIPELINE_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_FILETREE_NODE_SAVE_PIPELINE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_SAVE_PIPELINE",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_FILETREE_NODE_SAVE_PIPELINE_Handler)
			},
		},
		{
			MethodName: "FILETREE_NODE_UPDATE_BASIC_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UnifiedFileTreeNodeUpdateBasicInfoRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).FILETREE_NODE_UPDATE_BASIC_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_FILETREE_NODE_UPDATE_BASIC_INFO_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_FILETREE_NODE_UPDATE_BASIC_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/FILETREE_NODE_UPDATE_BASIC_INFO",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_FILETREE_NODE_UPDATE_BASIC_INFO_Handler)
			},
		},
		{
			MethodName: "GLOBAL_CONFIG_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AutoTestGlobalConfigCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).GLOBAL_CONFIG_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_GLOBAL_CONFIG_CREATE_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_GLOBAL_CONFIG_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/GLOBAL_CONFIG_CREATE",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_GLOBAL_CONFIG_CREATE_Handler)
			},
		},
		{
			MethodName: "GLOBAL_CONFIG_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AutoTestGlobalConfigDeleteRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).GLOBAL_CONFIG_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_GLOBAL_CONFIG_DELETE_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_GLOBAL_CONFIG_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/GLOBAL_CONFIG_DELETE",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_GLOBAL_CONFIG_DELETE_Handler)
			},
		},
		{
			MethodName: "GLOBAL_CONFIG_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AutoTestGlobalConfigListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).GLOBAL_CONFIG_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_GLOBAL_CONFIG_LIST_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_GLOBAL_CONFIG_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/GLOBAL_CONFIG_LIST",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_GLOBAL_CONFIG_LIST_Handler)
			},
		},
		{
			MethodName: "GLOBAL_CONFIG_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AutoTestGlobalConfigUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).GLOBAL_CONFIG_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_GLOBAL_CONFIG_UPDATE_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_GLOBAL_CONFIG_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/GLOBAL_CONFIG_UPDATE",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_GLOBAL_CONFIG_UPDATE_Handler)
			},
		},
		{
			MethodName: "QA_REPORTSETS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QA_REPORTSETS_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).QA_REPORTSETS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_QA_REPORTSETS_LIST_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_QA_REPORTSETS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/QA_REPORTSETS_LIST",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_QA_REPORTSETS_LIST_Handler)
			},
		},
		{
			MethodName: "QUERY_PIPELINE_SNIPPET_YAML",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AutoTestCaseSavePipelineRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).QUERY_PIPELINE_SNIPPET_YAML(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_QUERY_PIPELINE_SNIPPET_YAML_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_QUERY_PIPELINE_SNIPPET_YAML_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/QUERY_PIPELINE_SNIPPET_YAML",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_QUERY_PIPELINE_SNIPPET_YAML_Handler)
			},
		},
		{
			MethodName: "REPORT_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestReportRecord)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).REPORT_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_REPORT_CREATE_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_REPORT_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/REPORT_CREATE",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_REPORT_CREATE_Handler)
			},
		},
		{
			MethodName: "REPORT_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestReportRecord)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).REPORT_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_REPORT_GET_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_REPORT_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/REPORT_GET",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_REPORT_GET_Handler)
			},
		},
		{
			MethodName: "SCENE_SET_IMPORT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AutoTestSceneSetImportRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).SCENE_SET_IMPORT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_SCENE_SET_IMPORT_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_SCENE_SET_IMPORT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/SCENE_SET_IMPORT",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_SCENE_SET_IMPORT_Handler)
			},
		},
		{
			MethodName: "SPACE_EXPORT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AutoTestSpaceExportRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).SPACE_EXPORT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_SPACE_EXPORT_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_SPACE_EXPORT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/SPACE_EXPORT",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_SPACE_EXPORT_Handler)
			},
		},
		{
			MethodName: "SPACE_IMPORT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AutoTestSpaceImportRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformAutotestServer).SPACE_IMPORT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformAutotest_SPACE_IMPORT_info)
				}
				if interceptor == nil {
					return _TestplatformAutotest_SPACE_IMPORT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_autotest/SPACE_IMPORT",
				}
				return interceptor(ctx, in, info, _TestplatformAutotest_SPACE_IMPORT_Handler)
			},
		},
	}
	return &serviceDesc
}
