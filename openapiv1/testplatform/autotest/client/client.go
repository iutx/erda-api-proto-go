// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: testplatform_autotest.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/testplatform/autotest/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// TestplatformAutotest testplatform_autotest.proto
	TestplatformAutotest() pb.TestplatformAutotestClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		testplatformAutotest: pb.NewTestplatformAutotestClient(cc),
	}
}

type serviceClients struct {
	testplatformAutotest pb.TestplatformAutotestClient
}

func (c *serviceClients) TestplatformAutotest() pb.TestplatformAutotestClient {
	return c.testplatformAutotest
}

type testplatformAutotestWrapper struct {
	client pb.TestplatformAutotestClient
	opts   []grpc1.CallOption
}

func (s *testplatformAutotestWrapper) ACTION_LOG_DOWNLOAD(ctx context.Context, req *pb.ACTION_LOG_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return s.client.ACTION_LOG_DOWNLOAD(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) ACTION_LOG_GET(ctx context.Context, req *pb.ACTION_LOG_GET_Request) (*emptypb.Empty, error) {
	return s.client.ACTION_LOG_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) AUTOTESTS_SCENES_CANCEL(ctx context.Context, req *pb.AUTOTESTS_SCENES_CANCEL_Request) (*emptypb.Empty, error) {
	return s.client.AUTOTESTS_SCENES_CANCEL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) AUTOTESTS_SCENES_EXECUTE(ctx context.Context, req *pb.AUTOTESTS_SCENES_EXECUTE_Request) (*emptypb.Empty, error) {
	return s.client.AUTOTESTS_SCENES_EXECUTE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) BATCH_QUERY_PIPELINE_SNIPPET_YAML(ctx context.Context, req *pb.AutoTestCaseSavePipelineRequest) (*emptypb.Empty, error) {
	return s.client.BATCH_QUERY_PIPELINE_SNIPPET_YAML(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) FILETREE_NODE_COPY(ctx context.Context, req *pb.UnifiedFileTreeNodeCopyRequest) (*pb.UnifiedFileTreeNodeCopyResponse, error) {
	return s.client.FILETREE_NODE_COPY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) FILETREE_NODE_CREATE(ctx context.Context, req *pb.UnifiedFileTreeNodeCreateRequest) (*pb.UnifiedFileTreeNodeCreateResponse, error) {
	return s.client.FILETREE_NODE_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) FILETREE_NODE_DELETE(ctx context.Context, req *pb.UnifiedFileTreeNodeDeleteRequest) (*pb.UnifiedFileTreeNodeDeleteResponse, error) {
	return s.client.FILETREE_NODE_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) FILETREE_NODE_FIND_ANCESTORS(ctx context.Context, req *pb.UnifiedFileTreeNodeFindAncestorsRequest) (*pb.UnifiedFileTreeNodeFindAncestorsResponse, error) {
	return s.client.FILETREE_NODE_FIND_ANCESTORS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) FILETREE_NODE_FUZZY_SEARCH(ctx context.Context, req *pb.UnifiedFileTreeNodeFuzzySearchRequest) (*pb.UnifiedFileTreeNodeFuzzySearchResponse, error) {
	return s.client.FILETREE_NODE_FUZZY_SEARCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) FILETREE_NODE_GET(ctx context.Context, req *pb.UnifiedFileTreeNodeGetRequest) (*pb.UnifiedFileTreeNodeGetResponse, error) {
	return s.client.FILETREE_NODE_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) FILETREE_NODE_HISTORY_LIST(ctx context.Context, req *pb.UnifiedFileTreeNodeHistorySearchRequest) (*emptypb.Empty, error) {
	return s.client.FILETREE_NODE_HISTORY_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) FILETREE_NODE_LIST(ctx context.Context, req *pb.UnifiedFileTreeNodeListRequest) (*pb.UnifiedFileTreeNodeListResponse, error) {
	return s.client.FILETREE_NODE_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) FILETREE_NODE_MOVE(ctx context.Context, req *pb.UnifiedFileTreeNodeMoveRequest) (*pb.UnifiedFileTreeNodeMoveResponse, error) {
	return s.client.FILETREE_NODE_MOVE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) FILETREE_NODE_SAVE_PIPELINE(ctx context.Context, req *pb.AutoTestCaseSavePipelineRequest) (*pb.AutoTestCaseSavePipelineResponse, error) {
	return s.client.FILETREE_NODE_SAVE_PIPELINE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) FILETREE_NODE_UPDATE_BASIC_INFO(ctx context.Context, req *pb.UnifiedFileTreeNodeUpdateBasicInfoRequest) (*pb.UnifiedFileTreeNodeUpdateBasicInfoResponse, error) {
	return s.client.FILETREE_NODE_UPDATE_BASIC_INFO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) GLOBAL_CONFIG_CREATE(ctx context.Context, req *pb.AutoTestGlobalConfigCreateRequest) (*pb.AutoTestGlobalConfigCreateResponse, error) {
	return s.client.GLOBAL_CONFIG_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) GLOBAL_CONFIG_DELETE(ctx context.Context, req *pb.AutoTestGlobalConfigDeleteRequest) (*pb.AutoTestGlobalConfigDeleteResponse, error) {
	return s.client.GLOBAL_CONFIG_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) GLOBAL_CONFIG_LIST(ctx context.Context, req *pb.AutoTestGlobalConfigListRequest) (*pb.AutoTestGlobalConfigListResponse, error) {
	return s.client.GLOBAL_CONFIG_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) GLOBAL_CONFIG_UPDATE(ctx context.Context, req *pb.AutoTestGlobalConfigUpdateRequest) (*pb.AutoTestGlobalConfigUpdateResponse, error) {
	return s.client.GLOBAL_CONFIG_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) QA_REPORTSETS_LIST(ctx context.Context, req *pb.QA_REPORTSETS_LIST_Request) (*emptypb.Empty, error) {
	return s.client.QA_REPORTSETS_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) QUERY_PIPELINE_SNIPPET_YAML(ctx context.Context, req *pb.AutoTestCaseSavePipelineRequest) (*emptypb.Empty, error) {
	return s.client.QUERY_PIPELINE_SNIPPET_YAML(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) REPORT_CREATE(ctx context.Context, req *pb.TestReportRecord) (*pb.CreateTestReportRecordResponse, error) {
	return s.client.REPORT_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) REPORT_GET(ctx context.Context, req *pb.TestReportRecord) (*pb.GetTestReportRecordResponse, error) {
	return s.client.REPORT_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) SCENE_SET_IMPORT(ctx context.Context, req *pb.AutoTestSceneSetImportRequest) (*pb.AutoTestSceneSetImportResponse, error) {
	return s.client.SCENE_SET_IMPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) SPACE_EXPORT(ctx context.Context, req *pb.AutoTestSpaceExportRequest) (*pb.AutoTestSpaceExportResponse, error) {
	return s.client.SPACE_EXPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformAutotestWrapper) SPACE_IMPORT(ctx context.Context, req *pb.AutoTestSpaceImportRequest) (*pb.AutoTestSpaceImportResponse, error) {
	return s.client.SPACE_IMPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
