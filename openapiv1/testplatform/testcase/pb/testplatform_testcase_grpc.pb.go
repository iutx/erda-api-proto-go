// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: testplatform_testcase.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// TestplatformTestcaseClient is the client API for TestplatformTestcase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestplatformTestcaseClient interface {
	BATCH_CLEAN_FROM_RECYCLE_BIN(ctx context.Context, in *TestCaseBatchCleanFromRecycleBinRequest, opts ...grpc.CallOption) (*TestCaseBatchCleanFromRecycleBinResponse, error)
	BATCH_COPY(ctx context.Context, in *TestCaseBatchCopyRequest, opts ...grpc.CallOption) (*TestCaseBatchCopyResponse, error)
	BATCH_UPDATE(ctx context.Context, in *TestCaseBatchUpdateRequest, opts ...grpc.CallOption) (*TestCaseBatchUpdateResponse, error)
	CREATE(ctx context.Context, in *TestCaseCreateRequest, opts ...grpc.CallOption) (*TestCaseCreateResponse, error)
	EXPORT(ctx context.Context, in *TestCaseExportRequest, opts ...grpc.CallOption) (*TestCaseExportResponse, error)
	GET(ctx context.Context, in *GET_Request, opts ...grpc.CallOption) (*TestCaseGetResponse, error)
	Import(ctx context.Context, in *TestCaseImportRequest, opts ...grpc.CallOption) (*TestCaseImportResponse, error)
	PAGING(ctx context.Context, in *TestCasePagingRequest, opts ...grpc.CallOption) (*TestCasePagingResponse, error)
	UPDATE(ctx context.Context, in *TestCaseUpdateRequest, opts ...grpc.CallOption) (*TestCaseUpdateResponse, error)
}

type testplatformTestcaseClient struct {
	cc grpc1.ClientConnInterface
}

func NewTestplatformTestcaseClient(cc grpc1.ClientConnInterface) TestplatformTestcaseClient {
	return &testplatformTestcaseClient{cc}
}

func (c *testplatformTestcaseClient) BATCH_CLEAN_FROM_RECYCLE_BIN(ctx context.Context, in *TestCaseBatchCleanFromRecycleBinRequest, opts ...grpc.CallOption) (*TestCaseBatchCleanFromRecycleBinResponse, error) {
	out := new(TestCaseBatchCleanFromRecycleBinResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testcase/BATCH_CLEAN_FROM_RECYCLE_BIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestcaseClient) BATCH_COPY(ctx context.Context, in *TestCaseBatchCopyRequest, opts ...grpc.CallOption) (*TestCaseBatchCopyResponse, error) {
	out := new(TestCaseBatchCopyResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testcase/BATCH_COPY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestcaseClient) BATCH_UPDATE(ctx context.Context, in *TestCaseBatchUpdateRequest, opts ...grpc.CallOption) (*TestCaseBatchUpdateResponse, error) {
	out := new(TestCaseBatchUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testcase/BATCH_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestcaseClient) CREATE(ctx context.Context, in *TestCaseCreateRequest, opts ...grpc.CallOption) (*TestCaseCreateResponse, error) {
	out := new(TestCaseCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testcase/CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestcaseClient) EXPORT(ctx context.Context, in *TestCaseExportRequest, opts ...grpc.CallOption) (*TestCaseExportResponse, error) {
	out := new(TestCaseExportResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testcase/EXPORT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestcaseClient) GET(ctx context.Context, in *GET_Request, opts ...grpc.CallOption) (*TestCaseGetResponse, error) {
	out := new(TestCaseGetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testcase/GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestcaseClient) Import(ctx context.Context, in *TestCaseImportRequest, opts ...grpc.CallOption) (*TestCaseImportResponse, error) {
	out := new(TestCaseImportResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testcase/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestcaseClient) PAGING(ctx context.Context, in *TestCasePagingRequest, opts ...grpc.CallOption) (*TestCasePagingResponse, error) {
	out := new(TestCasePagingResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testcase/PAGING", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestcaseClient) UPDATE(ctx context.Context, in *TestCaseUpdateRequest, opts ...grpc.CallOption) (*TestCaseUpdateResponse, error) {
	out := new(TestCaseUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testcase/UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestplatformTestcaseServer is the server API for TestplatformTestcase service.
// All implementations should embed UnimplementedTestplatformTestcaseServer
// for forward compatibility
type TestplatformTestcaseServer interface {
	BATCH_CLEAN_FROM_RECYCLE_BIN(context.Context, *TestCaseBatchCleanFromRecycleBinRequest) (*TestCaseBatchCleanFromRecycleBinResponse, error)
	BATCH_COPY(context.Context, *TestCaseBatchCopyRequest) (*TestCaseBatchCopyResponse, error)
	BATCH_UPDATE(context.Context, *TestCaseBatchUpdateRequest) (*TestCaseBatchUpdateResponse, error)
	CREATE(context.Context, *TestCaseCreateRequest) (*TestCaseCreateResponse, error)
	EXPORT(context.Context, *TestCaseExportRequest) (*TestCaseExportResponse, error)
	GET(context.Context, *GET_Request) (*TestCaseGetResponse, error)
	Import(context.Context, *TestCaseImportRequest) (*TestCaseImportResponse, error)
	PAGING(context.Context, *TestCasePagingRequest) (*TestCasePagingResponse, error)
	UPDATE(context.Context, *TestCaseUpdateRequest) (*TestCaseUpdateResponse, error)
}

// UnimplementedTestplatformTestcaseServer should be embedded to have forward compatible implementations.
type UnimplementedTestplatformTestcaseServer struct {
}

func (*UnimplementedTestplatformTestcaseServer) BATCH_CLEAN_FROM_RECYCLE_BIN(context.Context, *TestCaseBatchCleanFromRecycleBinRequest) (*TestCaseBatchCleanFromRecycleBinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BATCH_CLEAN_FROM_RECYCLE_BIN not implemented")
}
func (*UnimplementedTestplatformTestcaseServer) BATCH_COPY(context.Context, *TestCaseBatchCopyRequest) (*TestCaseBatchCopyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BATCH_COPY not implemented")
}
func (*UnimplementedTestplatformTestcaseServer) BATCH_UPDATE(context.Context, *TestCaseBatchUpdateRequest) (*TestCaseBatchUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BATCH_UPDATE not implemented")
}
func (*UnimplementedTestplatformTestcaseServer) CREATE(context.Context, *TestCaseCreateRequest) (*TestCaseCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CREATE not implemented")
}
func (*UnimplementedTestplatformTestcaseServer) EXPORT(context.Context, *TestCaseExportRequest) (*TestCaseExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EXPORT not implemented")
}
func (*UnimplementedTestplatformTestcaseServer) GET(context.Context, *GET_Request) (*TestCaseGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GET not implemented")
}
func (*UnimplementedTestplatformTestcaseServer) Import(context.Context, *TestCaseImportRequest) (*TestCaseImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (*UnimplementedTestplatformTestcaseServer) PAGING(context.Context, *TestCasePagingRequest) (*TestCasePagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PAGING not implemented")
}
func (*UnimplementedTestplatformTestcaseServer) UPDATE(context.Context, *TestCaseUpdateRequest) (*TestCaseUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UPDATE not implemented")
}

func RegisterTestplatformTestcaseServer(s grpc1.ServiceRegistrar, srv TestplatformTestcaseServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_TestplatformTestcase_serviceDesc(srv, opts...), srv)
}

var _TestplatformTestcase_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.testplatform.testplatform_testcase",
	HandlerType: (*TestplatformTestcaseServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "testplatform_testcase.proto",
}

func _get_TestplatformTestcase_serviceDesc(srv TestplatformTestcaseServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_TestplatformTestcase_BATCH_CLEAN_FROM_RECYCLE_BIN_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.BATCH_CLEAN_FROM_RECYCLE_BIN(ctx, req.(*TestCaseBatchCleanFromRecycleBinRequest))
	}
	var _TestplatformTestcase_BATCH_CLEAN_FROM_RECYCLE_BIN_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestcase_BATCH_CLEAN_FROM_RECYCLE_BIN_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "BATCH_CLEAN_FROM_RECYCLE_BIN", srv)
		_TestplatformTestcase_BATCH_CLEAN_FROM_RECYCLE_BIN_Handler = h.Interceptor(_TestplatformTestcase_BATCH_CLEAN_FROM_RECYCLE_BIN_Handler)
	}

	_TestplatformTestcase_BATCH_COPY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.BATCH_COPY(ctx, req.(*TestCaseBatchCopyRequest))
	}
	var _TestplatformTestcase_BATCH_COPY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestcase_BATCH_COPY_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "BATCH_COPY", srv)
		_TestplatformTestcase_BATCH_COPY_Handler = h.Interceptor(_TestplatformTestcase_BATCH_COPY_Handler)
	}

	_TestplatformTestcase_BATCH_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.BATCH_UPDATE(ctx, req.(*TestCaseBatchUpdateRequest))
	}
	var _TestplatformTestcase_BATCH_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestcase_BATCH_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "BATCH_UPDATE", srv)
		_TestplatformTestcase_BATCH_UPDATE_Handler = h.Interceptor(_TestplatformTestcase_BATCH_UPDATE_Handler)
	}

	_TestplatformTestcase_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CREATE(ctx, req.(*TestCaseCreateRequest))
	}
	var _TestplatformTestcase_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestcase_CREATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "CREATE", srv)
		_TestplatformTestcase_CREATE_Handler = h.Interceptor(_TestplatformTestcase_CREATE_Handler)
	}

	_TestplatformTestcase_EXPORT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.EXPORT(ctx, req.(*TestCaseExportRequest))
	}
	var _TestplatformTestcase_EXPORT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestcase_EXPORT_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "EXPORT", srv)
		_TestplatformTestcase_EXPORT_Handler = h.Interceptor(_TestplatformTestcase_EXPORT_Handler)
	}

	_TestplatformTestcase_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GET(ctx, req.(*GET_Request))
	}
	var _TestplatformTestcase_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestcase_GET_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "GET", srv)
		_TestplatformTestcase_GET_Handler = h.Interceptor(_TestplatformTestcase_GET_Handler)
	}

	_TestplatformTestcase_Import_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.Import(ctx, req.(*TestCaseImportRequest))
	}
	var _TestplatformTestcase_Import_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestcase_Import_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "Import", srv)
		_TestplatformTestcase_Import_Handler = h.Interceptor(_TestplatformTestcase_Import_Handler)
	}

	_TestplatformTestcase_PAGING_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PAGING(ctx, req.(*TestCasePagingRequest))
	}
	var _TestplatformTestcase_PAGING_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestcase_PAGING_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "PAGING", srv)
		_TestplatformTestcase_PAGING_Handler = h.Interceptor(_TestplatformTestcase_PAGING_Handler)
	}

	_TestplatformTestcase_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UPDATE(ctx, req.(*TestCaseUpdateRequest))
	}
	var _TestplatformTestcase_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestcase_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "UPDATE", srv)
		_TestplatformTestcase_UPDATE_Handler = h.Interceptor(_TestplatformTestcase_UPDATE_Handler)
	}

	var serviceDesc = _TestplatformTestcase_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "BATCH_CLEAN_FROM_RECYCLE_BIN",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestCaseBatchCleanFromRecycleBinRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestcaseServer).BATCH_CLEAN_FROM_RECYCLE_BIN(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestcase_BATCH_CLEAN_FROM_RECYCLE_BIN_info)
				}
				if interceptor == nil {
					return _TestplatformTestcase_BATCH_CLEAN_FROM_RECYCLE_BIN_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testcase/BATCH_CLEAN_FROM_RECYCLE_BIN",
				}
				return interceptor(ctx, in, info, _TestplatformTestcase_BATCH_CLEAN_FROM_RECYCLE_BIN_Handler)
			},
		},
		{
			MethodName: "BATCH_COPY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestCaseBatchCopyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestcaseServer).BATCH_COPY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestcase_BATCH_COPY_info)
				}
				if interceptor == nil {
					return _TestplatformTestcase_BATCH_COPY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testcase/BATCH_COPY",
				}
				return interceptor(ctx, in, info, _TestplatformTestcase_BATCH_COPY_Handler)
			},
		},
		{
			MethodName: "BATCH_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestCaseBatchUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestcaseServer).BATCH_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestcase_BATCH_UPDATE_info)
				}
				if interceptor == nil {
					return _TestplatformTestcase_BATCH_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testcase/BATCH_UPDATE",
				}
				return interceptor(ctx, in, info, _TestplatformTestcase_BATCH_UPDATE_Handler)
			},
		},
		{
			MethodName: "CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestCaseCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestcaseServer).CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestcase_CREATE_info)
				}
				if interceptor == nil {
					return _TestplatformTestcase_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testcase/CREATE",
				}
				return interceptor(ctx, in, info, _TestplatformTestcase_CREATE_Handler)
			},
		},
		{
			MethodName: "EXPORT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestCaseExportRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestcaseServer).EXPORT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestcase_EXPORT_info)
				}
				if interceptor == nil {
					return _TestplatformTestcase_EXPORT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testcase/EXPORT",
				}
				return interceptor(ctx, in, info, _TestplatformTestcase_EXPORT_Handler)
			},
		},
		{
			MethodName: "GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestcaseServer).GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestcase_GET_info)
				}
				if interceptor == nil {
					return _TestplatformTestcase_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testcase/GET",
				}
				return interceptor(ctx, in, info, _TestplatformTestcase_GET_Handler)
			},
		},
		{
			MethodName: "Import",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestCaseImportRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestcaseServer).Import(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestcase_Import_info)
				}
				if interceptor == nil {
					return _TestplatformTestcase_Import_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testcase/Import",
				}
				return interceptor(ctx, in, info, _TestplatformTestcase_Import_Handler)
			},
		},
		{
			MethodName: "PAGING",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestCasePagingRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestcaseServer).PAGING(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestcase_PAGING_info)
				}
				if interceptor == nil {
					return _TestplatformTestcase_PAGING_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testcase/PAGING",
				}
				return interceptor(ctx, in, info, _TestplatformTestcase_PAGING_Handler)
			},
		},
		{
			MethodName: "UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestCaseUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestcaseServer).UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestcase_UPDATE_info)
				}
				if interceptor == nil {
					return _TestplatformTestcase_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testcase/UPDATE",
				}
				return interceptor(ctx, in, info, _TestplatformTestcase_UPDATE_Handler)
			},
		},
	}
	return &serviceDesc
}
