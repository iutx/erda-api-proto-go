// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: testplatform_testcase.proto

package pb

import (
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GET_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseBatchCleanFromRecycleBinRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseBatchCleanFromRecycleBinResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseBatchCopyRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseBatchCopyResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseBatchUpdateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseBatchUpdateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseCreateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseExportRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseExportResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseGetResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseImportRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseImportResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCasePagingRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCasePagingResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseStepAndResult)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseUpdateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TestCaseUpdateResponse)(nil)

// GET_Request implement urlenc.URLValuesUnmarshaler.
func (m *GET_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "testCaseID":
				m.TestCaseID = vals[0]
			}
		}
	}
	return nil
}

// TestCaseBatchCleanFromRecycleBinRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseBatchCleanFromRecycleBinRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "testCaseIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.TestCaseIDs = list
			}
		}
	}
	return nil
}

// TestCaseBatchCleanFromRecycleBinResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseBatchCleanFromRecycleBinResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// TestCaseBatchCopyRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseBatchCopyRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "copyToTestSetID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CopyToTestSetID = val
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "testCaseIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.TestCaseIDs = list
			}
		}
	}
	return nil
}

// TestCaseBatchCopyResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseBatchCopyResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.Data = list
			}
		}
	}
	return nil
}

// TestCaseBatchUpdateRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseBatchUpdateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "priority":
				m.Priority = vals[0]
			case "recycled":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Recycled = &val
			case "moveToTestSetID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MoveToTestSetID = &val
			case "testCaseIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.TestCaseIDs = list
			}
		}
	}
	return nil
}

// TestCaseBatchUpdateResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseBatchUpdateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// TestCaseCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "testSetID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TestSetID = val
			case "name":
				m.Name = vals[0]
			case "preCondition":
				m.PreCondition = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "priority":
				m.Priority = vals[0]
			case "labelIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.LabelIDs = list
			}
		}
	}
	return nil
}

// TestCaseCreateResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseCreateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// TestCaseExportRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseExportRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "testCasePagingRequest":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.TestCasePagingRequest = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.TestCasePagingRequest = val
					} else {
						m.TestCasePagingRequest = structpb.NewStringValue(vals[0])
					}
				}
			case "fileType":
				m.FileType = vals[0]
			case "locale":
				m.Locale = vals[0]
			}
		}
	}
	return nil
}

// TestCaseExportResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseExportResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}

// TestCaseGetResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseGetResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// TestCaseImportRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseImportRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "testSetID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TestSetID = val
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "fileType":
				m.FileType = vals[0]
			}
		}
	}
	return nil
}

// TestCaseImportResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseImportResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// TestCasePagingRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestCasePagingRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "testSetID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TestSetID = val
			case "noSubTestSet":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.NoSubTestSet = val
			case "notInTestPlanIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.NotInTestPlanIDs = list
			case "testCaseIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.TestCaseIDs = list
			case "notInTestCaseIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.NotInTestCaseIDs = list
			case "query":
				m.Query = vals[0]
			case "priorities":
				m.Priorities = vals
			case "updaterIDs":
				m.UpdaterIDs = vals
			case "timestampSecUpdatedAtBegin":
				if m.TimestampSecUpdatedAtBegin == nil {
					m.TimestampSecUpdatedAtBegin = &durationpb.Duration{}
				}
			case "timestampSecUpdatedAtBegin.seconds":
				if m.TimestampSecUpdatedAtBegin == nil {
					m.TimestampSecUpdatedAtBegin = &durationpb.Duration{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimestampSecUpdatedAtBegin.Seconds = val
			case "timestampSecUpdatedAtBegin.nanos":
				if m.TimestampSecUpdatedAtBegin == nil {
					m.TimestampSecUpdatedAtBegin = &durationpb.Duration{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimestampSecUpdatedAtBegin.Nanos = int32(val)
			case "timestampSecUpdatedAtEnd":
				if m.TimestampSecUpdatedAtEnd == nil {
					m.TimestampSecUpdatedAtEnd = &durationpb.Duration{}
				}
			case "timestampSecUpdatedAtEnd.seconds":
				if m.TimestampSecUpdatedAtEnd == nil {
					m.TimestampSecUpdatedAtEnd = &durationpb.Duration{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimestampSecUpdatedAtEnd.Seconds = val
			case "timestampSecUpdatedAtEnd.nanos":
				if m.TimestampSecUpdatedAtEnd == nil {
					m.TimestampSecUpdatedAtEnd = &durationpb.Duration{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimestampSecUpdatedAtEnd.Nanos = int32(val)
			case "updatedAtBeginInclude":
				if m.UpdatedAtBeginInclude == nil {
					m.UpdatedAtBeginInclude = &timestamppb.Timestamp{}
				}
			case "updatedAtBeginInclude.seconds":
				if m.UpdatedAtBeginInclude == nil {
					m.UpdatedAtBeginInclude = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAtBeginInclude.Seconds = val
			case "updatedAtBeginInclude.nanos":
				if m.UpdatedAtBeginInclude == nil {
					m.UpdatedAtBeginInclude = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAtBeginInclude.Nanos = int32(val)
			case "updatedAtEndInclude":
				if m.UpdatedAtEndInclude == nil {
					m.UpdatedAtEndInclude = &timestamppb.Timestamp{}
				}
			case "updatedAtEndInclude.seconds":
				if m.UpdatedAtEndInclude == nil {
					m.UpdatedAtEndInclude = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAtEndInclude.Seconds = val
			case "updatedAtEndInclude.nanos":
				if m.UpdatedAtEndInclude == nil {
					m.UpdatedAtEndInclude = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAtEndInclude.Nanos = int32(val)
			case "labels":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.Labels = list
			case "recycled":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Recycled = val
			case "orderFields":
				m.OrderFields = vals
			case "orderByPriorityAsc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByPriorityAsc = &val
			case "orderByPriorityDesc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByPriorityDesc = &val
			case "orderByUpdaterIDAsc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByUpdaterIDAsc = &val
			case "orderByUpdaterIDDesc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByUpdaterIDDesc = &val
			case "orderByUpdatedAtAsc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByUpdatedAtAsc = &val
			case "orderByUpdatedAtDesc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByUpdatedAtDesc = &val
			case "orderByIDAsc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByIDAsc = &val
			case "orderByIDDesc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByIDDesc = &val
			case "orderByTestSetIDAsc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByTestSetIDAsc = &val
			case "orderByTestSetIDDesc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByTestSetIDDesc = &val
			case "orderByTestSetNameAsc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByTestSetNameAsc = &val
			case "orderByTestSetNameDesc":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.OrderByTestSetNameDesc = &val
			}
		}
	}
	return nil
}

// TestCasePagingResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestCasePagingResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// TestCaseStepAndResult implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseStepAndResult) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "step":
				m.Step = vals[0]
			case "result":
				m.Result = vals[0]
			}
		}
	}
	return nil
}

// TestCaseUpdateRequest implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseUpdateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "name":
				m.Name = vals[0]
			case "priority":
				m.Priority = vals[0]
			case "preCondition":
				m.PreCondition = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "labelIDs":
				list := make([]uint64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseUint(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.LabelIDs = list
			case "testCaseID":
				m.TestCaseID = vals[0]
			}
		}
	}
	return nil
}

// TestCaseUpdateResponse implement urlenc.URLValuesUnmarshaler.
func (m *TestCaseUpdateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
