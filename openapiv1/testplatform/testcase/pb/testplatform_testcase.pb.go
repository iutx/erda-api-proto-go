// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: testplatform_testcase.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseID string `protobuf:"bytes,1,opt,name=testCaseID,proto3" json:"testCaseID,omitempty"` // generated from path variable: testCaseID. You should change the proto type if necessary.
}

func (x *GET_Request) Reset() {
	*x = GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GET_Request) ProtoMessage() {}

func (x *GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GET_Request.ProtoReflect.Descriptor instead.
func (*GET_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{0}
}

func (x *GET_Request) GetTestCaseID() string {
	if x != nil {
		return x.TestCaseID
	}
	return ""
}

type TestCaseBatchCleanFromRecycleBinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseIDs []uint64 `protobuf:"varint,1,rep,packed,name=testCaseIDs,proto3" json:"testCaseIDs,omitempty"`
}

func (x *TestCaseBatchCleanFromRecycleBinRequest) Reset() {
	*x = TestCaseBatchCleanFromRecycleBinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseBatchCleanFromRecycleBinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseBatchCleanFromRecycleBinRequest) ProtoMessage() {}

func (x *TestCaseBatchCleanFromRecycleBinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseBatchCleanFromRecycleBinRequest.ProtoReflect.Descriptor instead.
func (*TestCaseBatchCleanFromRecycleBinRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{1}
}

func (x *TestCaseBatchCleanFromRecycleBinRequest) GetTestCaseIDs() []uint64 {
	if x != nil {
		return x.TestCaseIDs
	}
	return nil
}

type TestCaseBatchCleanFromRecycleBinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestCaseBatchCleanFromRecycleBinResponse) Reset() {
	*x = TestCaseBatchCleanFromRecycleBinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseBatchCleanFromRecycleBinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseBatchCleanFromRecycleBinResponse) ProtoMessage() {}

func (x *TestCaseBatchCleanFromRecycleBinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseBatchCleanFromRecycleBinResponse.ProtoReflect.Descriptor instead.
func (*TestCaseBatchCleanFromRecycleBinResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{2}
}

type TestCaseBatchCopyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyToTestSetID uint64   `protobuf:"varint,1,opt,name=copyToTestSetID,proto3" json:"copyToTestSetID,omitempty"`
	ProjectID       uint64   `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	TestCaseIDs     []uint64 `protobuf:"varint,3,rep,packed,name=testCaseIDs,proto3" json:"testCaseIDs,omitempty"`
}

func (x *TestCaseBatchCopyRequest) Reset() {
	*x = TestCaseBatchCopyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseBatchCopyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseBatchCopyRequest) ProtoMessage() {}

func (x *TestCaseBatchCopyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseBatchCopyRequest.ProtoReflect.Descriptor instead.
func (*TestCaseBatchCopyRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{3}
}

func (x *TestCaseBatchCopyRequest) GetCopyToTestSetID() uint64 {
	if x != nil {
		return x.CopyToTestSetID
	}
	return 0
}

func (x *TestCaseBatchCopyRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *TestCaseBatchCopyRequest) GetTestCaseIDs() []uint64 {
	if x != nil {
		return x.TestCaseIDs
	}
	return nil
}

type TestCaseBatchCopyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []uint64 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *TestCaseBatchCopyResponse) Reset() {
	*x = TestCaseBatchCopyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseBatchCopyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseBatchCopyResponse) ProtoMessage() {}

func (x *TestCaseBatchCopyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseBatchCopyResponse.ProtoReflect.Descriptor instead.
func (*TestCaseBatchCopyResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{4}
}

func (x *TestCaseBatchCopyResponse) GetData() []uint64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestCaseBatchUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority        string   `protobuf:"bytes,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Recycled        *bool    `protobuf:"varint,2,opt,name=recycled,proto3,oneof" json:"recycled,omitempty"`
	MoveToTestSetID *uint64  `protobuf:"varint,3,opt,name=moveToTestSetID,proto3,oneof" json:"moveToTestSetID,omitempty"`
	TestCaseIDs     []uint64 `protobuf:"varint,4,rep,packed,name=testCaseIDs,proto3" json:"testCaseIDs,omitempty"`
}

func (x *TestCaseBatchUpdateRequest) Reset() {
	*x = TestCaseBatchUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseBatchUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseBatchUpdateRequest) ProtoMessage() {}

func (x *TestCaseBatchUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseBatchUpdateRequest.ProtoReflect.Descriptor instead.
func (*TestCaseBatchUpdateRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{5}
}

func (x *TestCaseBatchUpdateRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *TestCaseBatchUpdateRequest) GetRecycled() bool {
	if x != nil && x.Recycled != nil {
		return *x.Recycled
	}
	return false
}

func (x *TestCaseBatchUpdateRequest) GetMoveToTestSetID() uint64 {
	if x != nil && x.MoveToTestSetID != nil {
		return *x.MoveToTestSetID
	}
	return 0
}

func (x *TestCaseBatchUpdateRequest) GetTestCaseIDs() []uint64 {
	if x != nil {
		return x.TestCaseIDs
	}
	return nil
}

type TestCaseBatchUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data bool `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TestCaseBatchUpdateResponse) Reset() {
	*x = TestCaseBatchUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseBatchUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseBatchUpdateResponse) ProtoMessage() {}

func (x *TestCaseBatchUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseBatchUpdateResponse.ProtoReflect.Descriptor instead.
func (*TestCaseBatchUpdateResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{6}
}

func (x *TestCaseBatchUpdateResponse) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

type TestCaseCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID      uint64            `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	TestSetID      uint64            `protobuf:"varint,2,opt,name=testSetID,proto3" json:"testSetID,omitempty"`
	Name           string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PreCondition   string            `protobuf:"bytes,4,opt,name=preCondition,proto3" json:"preCondition,omitempty"`
	StepAndResults []*structpb.Value `protobuf:"bytes,5,rep,name=stepAndResults,proto3" json:"stepAndResults,omitempty"`
	APIs           []*structpb.Value `protobuf:"bytes,6,rep,name=aPIs,json=apis,proto3" json:"aPIs,omitempty"`
	Desc           string            `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	Priority       string            `protobuf:"bytes,8,opt,name=priority,proto3" json:"priority,omitempty"`
	LabelIDs       []uint64          `protobuf:"varint,9,rep,packed,name=labelIDs,proto3" json:"labelIDs,omitempty"`
}

func (x *TestCaseCreateRequest) Reset() {
	*x = TestCaseCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseCreateRequest) ProtoMessage() {}

func (x *TestCaseCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseCreateRequest.ProtoReflect.Descriptor instead.
func (*TestCaseCreateRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{7}
}

func (x *TestCaseCreateRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *TestCaseCreateRequest) GetTestSetID() uint64 {
	if x != nil {
		return x.TestSetID
	}
	return 0
}

func (x *TestCaseCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestCaseCreateRequest) GetPreCondition() string {
	if x != nil {
		return x.PreCondition
	}
	return ""
}

func (x *TestCaseCreateRequest) GetStepAndResults() []*structpb.Value {
	if x != nil {
		return x.StepAndResults
	}
	return nil
}

func (x *TestCaseCreateRequest) GetAPIs() []*structpb.Value {
	if x != nil {
		return x.APIs
	}
	return nil
}

func (x *TestCaseCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *TestCaseCreateRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *TestCaseCreateRequest) GetLabelIDs() []uint64 {
	if x != nil {
		return x.LabelIDs
	}
	return nil
}

type TestCaseCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TestCaseCreateResponse) Reset() {
	*x = TestCaseCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseCreateResponse) ProtoMessage() {}

func (x *TestCaseCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseCreateResponse.ProtoReflect.Descriptor instead.
func (*TestCaseCreateResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{8}
}

func (x *TestCaseCreateResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type TestCaseExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCasePagingRequest *structpb.Value `protobuf:"bytes,1,opt,name=testCasePagingRequest,proto3" json:"testCasePagingRequest,omitempty"`
	FileType              string          `protobuf:"bytes,2,opt,name=fileType,proto3" json:"fileType,omitempty"`
	Locale                string          `protobuf:"bytes,3,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *TestCaseExportRequest) Reset() {
	*x = TestCaseExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseExportRequest) ProtoMessage() {}

func (x *TestCaseExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseExportRequest.ProtoReflect.Descriptor instead.
func (*TestCaseExportRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{9}
}

func (x *TestCaseExportRequest) GetTestCasePagingRequest() *structpb.Value {
	if x != nil {
		return x.TestCasePagingRequest
	}
	return nil
}

func (x *TestCaseExportRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *TestCaseExportRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type TestCaseExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TestCaseExportResponse) Reset() {
	*x = TestCaseExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseExportResponse) ProtoMessage() {}

func (x *TestCaseExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseExportResponse.ProtoReflect.Descriptor instead.
func (*TestCaseExportResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{10}
}

func (x *TestCaseExportResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type TestCaseGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *TestCaseGetResponse) Reset() {
	*x = TestCaseGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseGetResponse) ProtoMessage() {}

func (x *TestCaseGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseGetResponse.ProtoReflect.Descriptor instead.
func (*TestCaseGetResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{11}
}

func (x *TestCaseGetResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestCaseImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSetID uint64 `protobuf:"varint,1,opt,name=testSetID,proto3" json:"testSetID,omitempty"`
	ProjectID uint64 `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	FileType  string `protobuf:"bytes,3,opt,name=fileType,proto3" json:"fileType,omitempty"`
}

func (x *TestCaseImportRequest) Reset() {
	*x = TestCaseImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseImportRequest) ProtoMessage() {}

func (x *TestCaseImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseImportRequest.ProtoReflect.Descriptor instead.
func (*TestCaseImportRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{12}
}

func (x *TestCaseImportRequest) GetTestSetID() uint64 {
	if x != nil {
		return x.TestSetID
	}
	return 0
}

func (x *TestCaseImportRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *TestCaseImportRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

type TestCaseImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *TestCaseImportResponse) Reset() {
	*x = TestCaseImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseImportResponse) ProtoMessage() {}

func (x *TestCaseImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseImportResponse.ProtoReflect.Descriptor instead.
func (*TestCaseImportResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{13}
}

func (x *TestCaseImportResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestCasePagingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo                     int64                      `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize                   int64                      `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	ProjectID                  uint64                     `protobuf:"varint,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	TestSetID                  uint64                     `protobuf:"varint,4,opt,name=testSetID,proto3" json:"testSetID,omitempty"`
	NoSubTestSet               bool                       `protobuf:"varint,5,opt,name=noSubTestSet,proto3" json:"noSubTestSet,omitempty"`
	NotInTestPlanIDs           []uint64                   `protobuf:"varint,6,rep,packed,name=notInTestPlanIDs,proto3" json:"notInTestPlanIDs,omitempty"`
	TestCaseIDs                []uint64                   `protobuf:"varint,7,rep,packed,name=testCaseIDs,proto3" json:"testCaseIDs,omitempty"`
	NotInTestCaseIDs           []uint64                   `protobuf:"varint,8,rep,packed,name=notInTestCaseIDs,proto3" json:"notInTestCaseIDs,omitempty"`
	TestSetCaseMap             map[uint64]*structpb.Value `protobuf:"bytes,9,rep,name=testSetCaseMap,proto3" json:"testSetCaseMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Query                      string                     `protobuf:"bytes,10,opt,name=query,proto3" json:"query,omitempty"`
	Priorities                 []string                   `protobuf:"bytes,11,rep,name=priorities,proto3" json:"priorities,omitempty"`
	UpdaterIDs                 []string                   `protobuf:"bytes,12,rep,name=updaterIDs,proto3" json:"updaterIDs,omitempty"`
	TimestampSecUpdatedAtBegin *durationpb.Duration       `protobuf:"bytes,13,opt,name=timestampSecUpdatedAtBegin,proto3,oneof" json:"timestampSecUpdatedAtBegin,omitempty"`
	TimestampSecUpdatedAtEnd   *durationpb.Duration       `protobuf:"bytes,14,opt,name=timestampSecUpdatedAtEnd,proto3,oneof" json:"timestampSecUpdatedAtEnd,omitempty"`
	UpdatedAtBeginInclude      *timestamppb.Timestamp     `protobuf:"bytes,15,opt,name=updatedAtBeginInclude,proto3,oneof" json:"updatedAtBeginInclude,omitempty"`
	UpdatedAtEndInclude        *timestamppb.Timestamp     `protobuf:"bytes,16,opt,name=updatedAtEndInclude,proto3,oneof" json:"updatedAtEndInclude,omitempty"`
	Labels                     []uint64                   `protobuf:"varint,17,rep,packed,name=labels,proto3" json:"labels,omitempty"`
	Recycled                   bool                       `protobuf:"varint,18,opt,name=recycled,proto3" json:"recycled,omitempty"`
	OrderFields                []string                   `protobuf:"bytes,19,rep,name=orderFields,proto3" json:"orderFields,omitempty"`
	OrderByPriorityAsc         *bool                      `protobuf:"varint,20,opt,name=orderByPriorityAsc,proto3,oneof" json:"orderByPriorityAsc,omitempty"`
	OrderByPriorityDesc        *bool                      `protobuf:"varint,21,opt,name=orderByPriorityDesc,proto3,oneof" json:"orderByPriorityDesc,omitempty"`
	OrderByUpdaterIDAsc        *bool                      `protobuf:"varint,22,opt,name=orderByUpdaterIDAsc,proto3,oneof" json:"orderByUpdaterIDAsc,omitempty"`
	OrderByUpdaterIDDesc       *bool                      `protobuf:"varint,23,opt,name=orderByUpdaterIDDesc,proto3,oneof" json:"orderByUpdaterIDDesc,omitempty"`
	OrderByUpdatedAtAsc        *bool                      `protobuf:"varint,24,opt,name=orderByUpdatedAtAsc,proto3,oneof" json:"orderByUpdatedAtAsc,omitempty"`
	OrderByUpdatedAtDesc       *bool                      `protobuf:"varint,25,opt,name=orderByUpdatedAtDesc,proto3,oneof" json:"orderByUpdatedAtDesc,omitempty"`
	OrderByIDAsc               *bool                      `protobuf:"varint,26,opt,name=orderByIDAsc,proto3,oneof" json:"orderByIDAsc,omitempty"`
	OrderByIDDesc              *bool                      `protobuf:"varint,27,opt,name=orderByIDDesc,proto3,oneof" json:"orderByIDDesc,omitempty"`
	OrderByTestSetIDAsc        *bool                      `protobuf:"varint,28,opt,name=orderByTestSetIDAsc,proto3,oneof" json:"orderByTestSetIDAsc,omitempty"`
	OrderByTestSetIDDesc       *bool                      `protobuf:"varint,29,opt,name=orderByTestSetIDDesc,proto3,oneof" json:"orderByTestSetIDDesc,omitempty"`
	OrderByTestSetNameAsc      *bool                      `protobuf:"varint,30,opt,name=orderByTestSetNameAsc,proto3,oneof" json:"orderByTestSetNameAsc,omitempty"`
	OrderByTestSetNameDesc     *bool                      `protobuf:"varint,31,opt,name=orderByTestSetNameDesc,proto3,oneof" json:"orderByTestSetNameDesc,omitempty"`
}

func (x *TestCasePagingRequest) Reset() {
	*x = TestCasePagingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCasePagingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCasePagingRequest) ProtoMessage() {}

func (x *TestCasePagingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCasePagingRequest.ProtoReflect.Descriptor instead.
func (*TestCasePagingRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{14}
}

func (x *TestCasePagingRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *TestCasePagingRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TestCasePagingRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *TestCasePagingRequest) GetTestSetID() uint64 {
	if x != nil {
		return x.TestSetID
	}
	return 0
}

func (x *TestCasePagingRequest) GetNoSubTestSet() bool {
	if x != nil {
		return x.NoSubTestSet
	}
	return false
}

func (x *TestCasePagingRequest) GetNotInTestPlanIDs() []uint64 {
	if x != nil {
		return x.NotInTestPlanIDs
	}
	return nil
}

func (x *TestCasePagingRequest) GetTestCaseIDs() []uint64 {
	if x != nil {
		return x.TestCaseIDs
	}
	return nil
}

func (x *TestCasePagingRequest) GetNotInTestCaseIDs() []uint64 {
	if x != nil {
		return x.NotInTestCaseIDs
	}
	return nil
}

func (x *TestCasePagingRequest) GetTestSetCaseMap() map[uint64]*structpb.Value {
	if x != nil {
		return x.TestSetCaseMap
	}
	return nil
}

func (x *TestCasePagingRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *TestCasePagingRequest) GetPriorities() []string {
	if x != nil {
		return x.Priorities
	}
	return nil
}

func (x *TestCasePagingRequest) GetUpdaterIDs() []string {
	if x != nil {
		return x.UpdaterIDs
	}
	return nil
}

func (x *TestCasePagingRequest) GetTimestampSecUpdatedAtBegin() *durationpb.Duration {
	if x != nil {
		return x.TimestampSecUpdatedAtBegin
	}
	return nil
}

func (x *TestCasePagingRequest) GetTimestampSecUpdatedAtEnd() *durationpb.Duration {
	if x != nil {
		return x.TimestampSecUpdatedAtEnd
	}
	return nil
}

func (x *TestCasePagingRequest) GetUpdatedAtBeginInclude() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAtBeginInclude
	}
	return nil
}

func (x *TestCasePagingRequest) GetUpdatedAtEndInclude() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAtEndInclude
	}
	return nil
}

func (x *TestCasePagingRequest) GetLabels() []uint64 {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TestCasePagingRequest) GetRecycled() bool {
	if x != nil {
		return x.Recycled
	}
	return false
}

func (x *TestCasePagingRequest) GetOrderFields() []string {
	if x != nil {
		return x.OrderFields
	}
	return nil
}

func (x *TestCasePagingRequest) GetOrderByPriorityAsc() bool {
	if x != nil && x.OrderByPriorityAsc != nil {
		return *x.OrderByPriorityAsc
	}
	return false
}

func (x *TestCasePagingRequest) GetOrderByPriorityDesc() bool {
	if x != nil && x.OrderByPriorityDesc != nil {
		return *x.OrderByPriorityDesc
	}
	return false
}

func (x *TestCasePagingRequest) GetOrderByUpdaterIDAsc() bool {
	if x != nil && x.OrderByUpdaterIDAsc != nil {
		return *x.OrderByUpdaterIDAsc
	}
	return false
}

func (x *TestCasePagingRequest) GetOrderByUpdaterIDDesc() bool {
	if x != nil && x.OrderByUpdaterIDDesc != nil {
		return *x.OrderByUpdaterIDDesc
	}
	return false
}

func (x *TestCasePagingRequest) GetOrderByUpdatedAtAsc() bool {
	if x != nil && x.OrderByUpdatedAtAsc != nil {
		return *x.OrderByUpdatedAtAsc
	}
	return false
}

func (x *TestCasePagingRequest) GetOrderByUpdatedAtDesc() bool {
	if x != nil && x.OrderByUpdatedAtDesc != nil {
		return *x.OrderByUpdatedAtDesc
	}
	return false
}

func (x *TestCasePagingRequest) GetOrderByIDAsc() bool {
	if x != nil && x.OrderByIDAsc != nil {
		return *x.OrderByIDAsc
	}
	return false
}

func (x *TestCasePagingRequest) GetOrderByIDDesc() bool {
	if x != nil && x.OrderByIDDesc != nil {
		return *x.OrderByIDDesc
	}
	return false
}

func (x *TestCasePagingRequest) GetOrderByTestSetIDAsc() bool {
	if x != nil && x.OrderByTestSetIDAsc != nil {
		return *x.OrderByTestSetIDAsc
	}
	return false
}

func (x *TestCasePagingRequest) GetOrderByTestSetIDDesc() bool {
	if x != nil && x.OrderByTestSetIDDesc != nil {
		return *x.OrderByTestSetIDDesc
	}
	return false
}

func (x *TestCasePagingRequest) GetOrderByTestSetNameAsc() bool {
	if x != nil && x.OrderByTestSetNameAsc != nil {
		return *x.OrderByTestSetNameAsc
	}
	return false
}

func (x *TestCasePagingRequest) GetOrderByTestSetNameDesc() bool {
	if x != nil && x.OrderByTestSetNameDesc != nil {
		return *x.OrderByTestSetNameDesc
	}
	return false
}

type TestCasePagingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *TestCasePagingResponse) Reset() {
	*x = TestCasePagingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCasePagingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCasePagingResponse) ProtoMessage() {}

func (x *TestCasePagingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCasePagingResponse.ProtoReflect.Descriptor instead.
func (*TestCasePagingResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{15}
}

func (x *TestCasePagingResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestCaseStepAndResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step   string `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Result string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TestCaseStepAndResult) Reset() {
	*x = TestCaseStepAndResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseStepAndResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseStepAndResult) ProtoMessage() {}

func (x *TestCaseStepAndResult) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseStepAndResult.ProtoReflect.Descriptor instead.
func (*TestCaseStepAndResult) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{16}
}

func (x *TestCaseStepAndResult) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *TestCaseStepAndResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type TestCaseUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint64            `protobuf:"varint,1,opt,name=ID,json=-,proto3" json:"ID,omitempty"`
	Name           string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Priority       string            `protobuf:"bytes,3,opt,name=priority,proto3" json:"priority,omitempty"`
	PreCondition   string            `protobuf:"bytes,4,opt,name=preCondition,proto3" json:"preCondition,omitempty"`
	StepAndResults []*structpb.Value `protobuf:"bytes,5,rep,name=stepAndResults,proto3" json:"stepAndResults,omitempty"`
	APIs           []*structpb.Value `protobuf:"bytes,6,rep,name=aPIs,json=apis,proto3" json:"aPIs,omitempty"`
	Desc           string            `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	LabelIDs       []uint64          `protobuf:"varint,8,rep,packed,name=labelIDs,proto3" json:"labelIDs,omitempty"`
	TestCaseID     string            `protobuf:"bytes,9,opt,name=testCaseID,proto3" json:"testCaseID,omitempty"` // generated from path variable: testCaseID. You should change the proto type if necessary.
}

func (x *TestCaseUpdateRequest) Reset() {
	*x = TestCaseUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseUpdateRequest) ProtoMessage() {}

func (x *TestCaseUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseUpdateRequest.ProtoReflect.Descriptor instead.
func (*TestCaseUpdateRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{17}
}

func (x *TestCaseUpdateRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TestCaseUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestCaseUpdateRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *TestCaseUpdateRequest) GetPreCondition() string {
	if x != nil {
		return x.PreCondition
	}
	return ""
}

func (x *TestCaseUpdateRequest) GetStepAndResults() []*structpb.Value {
	if x != nil {
		return x.StepAndResults
	}
	return nil
}

func (x *TestCaseUpdateRequest) GetAPIs() []*structpb.Value {
	if x != nil {
		return x.APIs
	}
	return nil
}

func (x *TestCaseUpdateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *TestCaseUpdateRequest) GetLabelIDs() []uint64 {
	if x != nil {
		return x.LabelIDs
	}
	return nil
}

func (x *TestCaseUpdateRequest) GetTestCaseID() string {
	if x != nil {
		return x.TestCaseID
	}
	return ""
}

type TestCaseUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestCaseUpdateResponse) Reset() {
	*x = TestCaseUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testcase_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseUpdateResponse) ProtoMessage() {}

func (x *TestCaseUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testcase_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseUpdateResponse.ProtoReflect.Descriptor instead.
func (*TestCaseUpdateResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testcase_proto_rawDescGZIP(), []int{18}
}

var File_testplatform_testcase_proto protoreflect.FileDescriptor

var file_testplatform_testcase_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x27, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x73,
	0x22, 0x2a, 0x0a, 0x28, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x0a,
	0x18, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x70, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x70,
	0x79, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xcb, 0x01, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x0f, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x49, 0x44, 0x22, 0x31, 0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc3, 0x02, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x61, 0x50, 0x49, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x70, 0x69, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x15, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x10, 0x0a, 0x15, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x53, 0x75, 0x62, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x53, 0x75, 0x62,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x49, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x10, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x73, 0x12, 0x6e, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x4d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x45, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x53, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x45, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02,
	0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x13, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x45, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x04, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x41, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x41, 0x73, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x13,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x41, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x44, 0x65, 0x73, 0x63, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x41, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x13,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x41, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x41, 0x73, 0x63, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x44, 0x41, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x44, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0b, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x44, 0x65, 0x73, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x41, 0x73, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0c, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x49, 0x44, 0x41, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x44, 0x65, 0x73, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x63, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0e, 0x52, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f,
	0x52, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x1a, 0x59, 0x0a, 0x13, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x45,
	0x6e, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x41, 0x73, 0x63, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x44, 0x65, 0x73, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x41, 0x73, 0x63, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x44, 0x41, 0x73, 0x63, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x44, 0x44, 0x65, 0x73, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x41, 0x73, 0x63,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x49, 0x44, 0x44, 0x65, 0x73, 0x63, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x41, 0x73, 0x63, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x22, 0x52,
	0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x43, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0d, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x2d,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x61, 0x50, 0x49, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x70, 0x69, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x44, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x44, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x22, 0x18, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x8a, 0x11, 0x0a, 0x15, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x12, 0xd6, 0x02, 0x0a, 0x1c, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x59, 0x43, 0x4c,
	0x45, 0x5f, 0x42, 0x49, 0x4e, 0x12, 0x44, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d,
	0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x2a, 0x33, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x2d,
	0x66, 0x72, 0x6f, 0x6d, 0x2d, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2d, 0x62, 0x69, 0x6e,
	0xfa, 0x81, 0xf9, 0x1b, 0x68, 0x0a, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x2d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x2d, 0x66, 0x72, 0x6f, 0x6d, 0x2d, 0x72,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2d, 0x62, 0x69, 0x6e, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x2d,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe4, 0xbb, 0x8e, 0xe5, 0x9b, 0x9e, 0xe6,
	0x94, 0xb6, 0xe7, 0xab, 0x99, 0xe5, 0xbd, 0xbb, 0xe5, 0xba, 0x95, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0x12, 0x88, 0x02,
	0x0a, 0x0a, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x12, 0x35, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x70, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x63, 0x6f, 0x70, 0x79, 0xfa, 0x81, 0xf9, 0x1b, 0x5c, 0x0a, 0x21, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x63, 0x6f, 0x70, 0x79, 0x32,
	0x02, 0x10, 0x01, 0x3a, 0x33, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x89,
	0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0xa4, 0x8d, 0xe5, 0x88, 0xb6, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95,
	0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0xe5, 0x88, 0xb0, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6,
	0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe9, 0x9b, 0x86, 0x12, 0xff, 0x01, 0x0a, 0x0c, 0x42, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x4c, 0x0a, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0xb5,
	0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0x12, 0xbf, 0x01, 0x0a, 0x06, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x0e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a,
	0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0x12, 0xdd, 0x01, 0x0a,
	0x06, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x40, 0x0a, 0x1d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x02, 0x10, 0x01, 0x3a,
	0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0xaf, 0xbc, 0xe5, 0x87, 0xba,
	0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0x12, 0xd5, 0x01, 0x0a,
	0x03, 0x47, 0x45, 0x54, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x4a, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x27, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8c, 0x87, 0xe5,
	0xae, 0x9a, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0xe8, 0xaf,
	0xa6, 0xe6, 0x83, 0x85, 0x12, 0xdd, 0x01, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0xfa,
	0x81, 0xf9, 0x1b, 0x40, 0x0a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x94,
	0xa8, 0xe4, 0xbe, 0x8b, 0x12, 0xbf, 0x01, 0x0a, 0x06, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x12,
	0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b,
	0xe5, 0x88, 0x86, 0xe9, 0xa1, 0xb5, 0x12, 0xd9, 0x01, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x1a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x7d, 0xfa,
	0x81, 0xf9, 0x1b, 0x3e, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x94, 0xa8, 0xe4,
	0xbe, 0x8b, 0x1a, 0x13, 0xc2, 0xc4, 0xcb, 0x1c, 0x0e, 0x22, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testplatform_testcase_proto_rawDescOnce sync.Once
	file_testplatform_testcase_proto_rawDescData = file_testplatform_testcase_proto_rawDesc
)

func file_testplatform_testcase_proto_rawDescGZIP() []byte {
	file_testplatform_testcase_proto_rawDescOnce.Do(func() {
		file_testplatform_testcase_proto_rawDescData = protoimpl.X.CompressGZIP(file_testplatform_testcase_proto_rawDescData)
	})
	return file_testplatform_testcase_proto_rawDescData
}

var file_testplatform_testcase_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_testplatform_testcase_proto_goTypes = []interface{}{
	(*GET_Request)(nil),                              // 0: erda.openapiv1.testplatform.GET_Request
	(*TestCaseBatchCleanFromRecycleBinRequest)(nil),  // 1: erda.openapiv1.testplatform.TestCaseBatchCleanFromRecycleBinRequest
	(*TestCaseBatchCleanFromRecycleBinResponse)(nil), // 2: erda.openapiv1.testplatform.TestCaseBatchCleanFromRecycleBinResponse
	(*TestCaseBatchCopyRequest)(nil),                 // 3: erda.openapiv1.testplatform.TestCaseBatchCopyRequest
	(*TestCaseBatchCopyResponse)(nil),                // 4: erda.openapiv1.testplatform.TestCaseBatchCopyResponse
	(*TestCaseBatchUpdateRequest)(nil),               // 5: erda.openapiv1.testplatform.TestCaseBatchUpdateRequest
	(*TestCaseBatchUpdateResponse)(nil),              // 6: erda.openapiv1.testplatform.TestCaseBatchUpdateResponse
	(*TestCaseCreateRequest)(nil),                    // 7: erda.openapiv1.testplatform.TestCaseCreateRequest
	(*TestCaseCreateResponse)(nil),                   // 8: erda.openapiv1.testplatform.TestCaseCreateResponse
	(*TestCaseExportRequest)(nil),                    // 9: erda.openapiv1.testplatform.TestCaseExportRequest
	(*TestCaseExportResponse)(nil),                   // 10: erda.openapiv1.testplatform.TestCaseExportResponse
	(*TestCaseGetResponse)(nil),                      // 11: erda.openapiv1.testplatform.TestCaseGetResponse
	(*TestCaseImportRequest)(nil),                    // 12: erda.openapiv1.testplatform.TestCaseImportRequest
	(*TestCaseImportResponse)(nil),                   // 13: erda.openapiv1.testplatform.TestCaseImportResponse
	(*TestCasePagingRequest)(nil),                    // 14: erda.openapiv1.testplatform.TestCasePagingRequest
	(*TestCasePagingResponse)(nil),                   // 15: erda.openapiv1.testplatform.TestCasePagingResponse
	(*TestCaseStepAndResult)(nil),                    // 16: erda.openapiv1.testplatform.TestCaseStepAndResult
	(*TestCaseUpdateRequest)(nil),                    // 17: erda.openapiv1.testplatform.TestCaseUpdateRequest
	(*TestCaseUpdateResponse)(nil),                   // 18: erda.openapiv1.testplatform.TestCaseUpdateResponse
	nil,                                              // 19: erda.openapiv1.testplatform.TestCasePagingRequest.TestSetCaseMapEntry
	(*structpb.Value)(nil),                           // 20: google.protobuf.Value
	(*durationpb.Duration)(nil),                      // 21: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                    // 22: google.protobuf.Timestamp
}
var file_testplatform_testcase_proto_depIdxs = []int32{
	20, // 0: erda.openapiv1.testplatform.TestCaseCreateRequest.stepAndResults:type_name -> google.protobuf.Value
	20, // 1: erda.openapiv1.testplatform.TestCaseCreateRequest.aPIs:type_name -> google.protobuf.Value
	20, // 2: erda.openapiv1.testplatform.TestCaseExportRequest.testCasePagingRequest:type_name -> google.protobuf.Value
	20, // 3: erda.openapiv1.testplatform.TestCaseGetResponse.data:type_name -> google.protobuf.Value
	20, // 4: erda.openapiv1.testplatform.TestCaseImportResponse.data:type_name -> google.protobuf.Value
	19, // 5: erda.openapiv1.testplatform.TestCasePagingRequest.testSetCaseMap:type_name -> erda.openapiv1.testplatform.TestCasePagingRequest.TestSetCaseMapEntry
	21, // 6: erda.openapiv1.testplatform.TestCasePagingRequest.timestampSecUpdatedAtBegin:type_name -> google.protobuf.Duration
	21, // 7: erda.openapiv1.testplatform.TestCasePagingRequest.timestampSecUpdatedAtEnd:type_name -> google.protobuf.Duration
	22, // 8: erda.openapiv1.testplatform.TestCasePagingRequest.updatedAtBeginInclude:type_name -> google.protobuf.Timestamp
	22, // 9: erda.openapiv1.testplatform.TestCasePagingRequest.updatedAtEndInclude:type_name -> google.protobuf.Timestamp
	20, // 10: erda.openapiv1.testplatform.TestCasePagingResponse.data:type_name -> google.protobuf.Value
	20, // 11: erda.openapiv1.testplatform.TestCaseUpdateRequest.stepAndResults:type_name -> google.protobuf.Value
	20, // 12: erda.openapiv1.testplatform.TestCaseUpdateRequest.aPIs:type_name -> google.protobuf.Value
	20, // 13: erda.openapiv1.testplatform.TestCasePagingRequest.TestSetCaseMapEntry.value:type_name -> google.protobuf.Value
	1,  // 14: erda.openapiv1.testplatform.testplatform_testcase.BATCH_CLEAN_FROM_RECYCLE_BIN:input_type -> erda.openapiv1.testplatform.TestCaseBatchCleanFromRecycleBinRequest
	3,  // 15: erda.openapiv1.testplatform.testplatform_testcase.BATCH_COPY:input_type -> erda.openapiv1.testplatform.TestCaseBatchCopyRequest
	5,  // 16: erda.openapiv1.testplatform.testplatform_testcase.BATCH_UPDATE:input_type -> erda.openapiv1.testplatform.TestCaseBatchUpdateRequest
	7,  // 17: erda.openapiv1.testplatform.testplatform_testcase.CREATE:input_type -> erda.openapiv1.testplatform.TestCaseCreateRequest
	9,  // 18: erda.openapiv1.testplatform.testplatform_testcase.EXPORT:input_type -> erda.openapiv1.testplatform.TestCaseExportRequest
	0,  // 19: erda.openapiv1.testplatform.testplatform_testcase.GET:input_type -> erda.openapiv1.testplatform.GET_Request
	12, // 20: erda.openapiv1.testplatform.testplatform_testcase.Import:input_type -> erda.openapiv1.testplatform.TestCaseImportRequest
	14, // 21: erda.openapiv1.testplatform.testplatform_testcase.PAGING:input_type -> erda.openapiv1.testplatform.TestCasePagingRequest
	17, // 22: erda.openapiv1.testplatform.testplatform_testcase.UPDATE:input_type -> erda.openapiv1.testplatform.TestCaseUpdateRequest
	2,  // 23: erda.openapiv1.testplatform.testplatform_testcase.BATCH_CLEAN_FROM_RECYCLE_BIN:output_type -> erda.openapiv1.testplatform.TestCaseBatchCleanFromRecycleBinResponse
	4,  // 24: erda.openapiv1.testplatform.testplatform_testcase.BATCH_COPY:output_type -> erda.openapiv1.testplatform.TestCaseBatchCopyResponse
	6,  // 25: erda.openapiv1.testplatform.testplatform_testcase.BATCH_UPDATE:output_type -> erda.openapiv1.testplatform.TestCaseBatchUpdateResponse
	8,  // 26: erda.openapiv1.testplatform.testplatform_testcase.CREATE:output_type -> erda.openapiv1.testplatform.TestCaseCreateResponse
	10, // 27: erda.openapiv1.testplatform.testplatform_testcase.EXPORT:output_type -> erda.openapiv1.testplatform.TestCaseExportResponse
	11, // 28: erda.openapiv1.testplatform.testplatform_testcase.GET:output_type -> erda.openapiv1.testplatform.TestCaseGetResponse
	13, // 29: erda.openapiv1.testplatform.testplatform_testcase.Import:output_type -> erda.openapiv1.testplatform.TestCaseImportResponse
	15, // 30: erda.openapiv1.testplatform.testplatform_testcase.PAGING:output_type -> erda.openapiv1.testplatform.TestCasePagingResponse
	18, // 31: erda.openapiv1.testplatform.testplatform_testcase.UPDATE:output_type -> erda.openapiv1.testplatform.TestCaseUpdateResponse
	23, // [23:32] is the sub-list for method output_type
	14, // [14:23] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_testplatform_testcase_proto_init() }
func file_testplatform_testcase_proto_init() {
	if File_testplatform_testcase_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testplatform_testcase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseBatchCleanFromRecycleBinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseBatchCleanFromRecycleBinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseBatchCopyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseBatchCopyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseBatchUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseBatchUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCasePagingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCasePagingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseStepAndResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testcase_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_testplatform_testcase_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_testplatform_testcase_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_testplatform_testcase_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_testplatform_testcase_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_testplatform_testcase_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testplatform_testcase_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_testplatform_testcase_proto_goTypes,
		DependencyIndexes: file_testplatform_testcase_proto_depIdxs,
		MessageInfos:      file_testplatform_testcase_proto_msgTypes,
	}.Build()
	File_testplatform_testcase_proto = out.File
	file_testplatform_testcase_proto_rawDesc = nil
	file_testplatform_testcase_proto_goTypes = nil
	file_testplatform_testcase_proto_depIdxs = nil
}
