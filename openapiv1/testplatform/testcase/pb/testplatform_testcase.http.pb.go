// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: testplatform_testcase.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// TestplatformTestcaseHandler is the server API for TestplatformTestcase service.
type TestplatformTestcaseHandler interface {
	// DELETE /api/testcases/actions/batch-clean-from-recycle-bin
	BATCH_CLEAN_FROM_RECYCLE_BIN(context.Context, *TestCaseBatchCleanFromRecycleBinRequest) (*TestCaseBatchCleanFromRecycleBinResponse, error)
	// POST /api/testcases/actions/batch-copy
	BATCH_COPY(context.Context, *TestCaseBatchCopyRequest) (*TestCaseBatchCopyResponse, error)
	// POST /api/testcases/actions/batch-update
	BATCH_UPDATE(context.Context, *TestCaseBatchUpdateRequest) (*TestCaseBatchUpdateResponse, error)
	// POST /api/testcases
	CREATE(context.Context, *TestCaseCreateRequest) (*TestCaseCreateResponse, error)
	// GET /api/testcases/actions/export
	EXPORT(context.Context, *TestCaseExportRequest) (*TestCaseExportResponse, error)
	// GET /api/testcases/{testCaseID}
	GET(context.Context, *GET_Request) (*TestCaseGetResponse, error)
	// POST /api/testcases/actions/import
	Import(context.Context, *TestCaseImportRequest) (*TestCaseImportResponse, error)
	// GET /api/testcases
	PAGING(context.Context, *TestCasePagingRequest) (*TestCasePagingResponse, error)
	// PUT /api/testcases/{testCaseID}
	UPDATE(context.Context, *TestCaseUpdateRequest) (*TestCaseUpdateResponse, error)
}

// RegisterTestplatformTestcaseHandler register TestplatformTestcaseHandler to http.Router.
func RegisterTestplatformTestcaseHandler(r http.Router, srv TestplatformTestcaseHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_BATCH_CLEAN_FROM_RECYCLE_BIN := func(method, path string, fn func(context.Context, *TestCaseBatchCleanFromRecycleBinRequest) (*TestCaseBatchCleanFromRecycleBinResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestCaseBatchCleanFromRecycleBinRequest))
		}
		var BATCH_CLEAN_FROM_RECYCLE_BIN_info transport.ServiceInfo
		if h.Interceptor != nil {
			BATCH_CLEAN_FROM_RECYCLE_BIN_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "BATCH_CLEAN_FROM_RECYCLE_BIN", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, BATCH_CLEAN_FROM_RECYCLE_BIN_info)
				}
				r = r.WithContext(ctx)
				var in TestCaseBatchCleanFromRecycleBinRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_BATCH_COPY := func(method, path string, fn func(context.Context, *TestCaseBatchCopyRequest) (*TestCaseBatchCopyResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestCaseBatchCopyRequest))
		}
		var BATCH_COPY_info transport.ServiceInfo
		if h.Interceptor != nil {
			BATCH_COPY_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "BATCH_COPY", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, BATCH_COPY_info)
				}
				r = r.WithContext(ctx)
				var in TestCaseBatchCopyRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_BATCH_UPDATE := func(method, path string, fn func(context.Context, *TestCaseBatchUpdateRequest) (*TestCaseBatchUpdateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestCaseBatchUpdateRequest))
		}
		var BATCH_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			BATCH_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "BATCH_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, BATCH_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in TestCaseBatchUpdateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CREATE := func(method, path string, fn func(context.Context, *TestCaseCreateRequest) (*TestCaseCreateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestCaseCreateRequest))
		}
		var CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			CREATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CREATE_info)
				}
				r = r.WithContext(ctx)
				var in TestCaseCreateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_EXPORT := func(method, path string, fn func(context.Context, *TestCaseExportRequest) (*TestCaseExportResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestCaseExportRequest))
		}
		var EXPORT_info transport.ServiceInfo
		if h.Interceptor != nil {
			EXPORT_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "EXPORT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, EXPORT_info)
				}
				r = r.WithContext(ctx)
				var in TestCaseExportRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GET := func(method, path string, fn func(context.Context, *GET_Request) (*TestCaseGetResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GET_Request))
		}
		var GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			GET_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GET_info)
				}
				r = r.WithContext(ctx)
				var in GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testCaseID":
							in.TestCaseID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_Import := func(method, path string, fn func(context.Context, *TestCaseImportRequest) (*TestCaseImportResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestCaseImportRequest))
		}
		var Import_info transport.ServiceInfo
		if h.Interceptor != nil {
			Import_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "Import", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, Import_info)
				}
				r = r.WithContext(ctx)
				var in TestCaseImportRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_PAGING := func(method, path string, fn func(context.Context, *TestCasePagingRequest) (*TestCasePagingResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestCasePagingRequest))
		}
		var PAGING_info transport.ServiceInfo
		if h.Interceptor != nil {
			PAGING_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "PAGING", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, PAGING_info)
				}
				r = r.WithContext(ctx)
				var in TestCasePagingRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UPDATE := func(method, path string, fn func(context.Context, *TestCaseUpdateRequest) (*TestCaseUpdateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestCaseUpdateRequest))
		}
		var UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			UPDATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testcase", "UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in TestCaseUpdateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testCaseID":
							in.TestCaseID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_BATCH_CLEAN_FROM_RECYCLE_BIN("DELETE", "/api/testcases/actions/batch-clean-from-recycle-bin", srv.BATCH_CLEAN_FROM_RECYCLE_BIN)
	add_BATCH_COPY("POST", "/api/testcases/actions/batch-copy", srv.BATCH_COPY)
	add_BATCH_UPDATE("POST", "/api/testcases/actions/batch-update", srv.BATCH_UPDATE)
	add_CREATE("POST", "/api/testcases", srv.CREATE)
	add_EXPORT("GET", "/api/testcases/actions/export", srv.EXPORT)
	add_GET("GET", "/api/testcases/{testCaseID}", srv.GET)
	add_Import("POST", "/api/testcases/actions/import", srv.Import)
	add_PAGING("GET", "/api/testcases", srv.PAGING)
	add_UPDATE("PUT", "/api/testcases/{testCaseID}", srv.UPDATE)
}
