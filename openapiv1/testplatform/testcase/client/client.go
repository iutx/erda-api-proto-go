// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: testplatform_testcase.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/testplatform/testcase/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// TestplatformTestcase testplatform_testcase.proto
	TestplatformTestcase() pb.TestplatformTestcaseClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		testplatformTestcase: pb.NewTestplatformTestcaseClient(cc),
	}
}

type serviceClients struct {
	testplatformTestcase pb.TestplatformTestcaseClient
}

func (c *serviceClients) TestplatformTestcase() pb.TestplatformTestcaseClient {
	return c.testplatformTestcase
}

type testplatformTestcaseWrapper struct {
	client pb.TestplatformTestcaseClient
	opts   []grpc1.CallOption
}

func (s *testplatformTestcaseWrapper) BATCH_CLEAN_FROM_RECYCLE_BIN(ctx context.Context, req *pb.TestCaseBatchCleanFromRecycleBinRequest) (*pb.TestCaseBatchCleanFromRecycleBinResponse, error) {
	return s.client.BATCH_CLEAN_FROM_RECYCLE_BIN(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestcaseWrapper) BATCH_COPY(ctx context.Context, req *pb.TestCaseBatchCopyRequest) (*pb.TestCaseBatchCopyResponse, error) {
	return s.client.BATCH_COPY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestcaseWrapper) BATCH_UPDATE(ctx context.Context, req *pb.TestCaseBatchUpdateRequest) (*pb.TestCaseBatchUpdateResponse, error) {
	return s.client.BATCH_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestcaseWrapper) CREATE(ctx context.Context, req *pb.TestCaseCreateRequest) (*pb.TestCaseCreateResponse, error) {
	return s.client.CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestcaseWrapper) EXPORT(ctx context.Context, req *pb.TestCaseExportRequest) (*pb.TestCaseExportResponse, error) {
	return s.client.EXPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestcaseWrapper) GET(ctx context.Context, req *pb.GET_Request) (*pb.TestCaseGetResponse, error) {
	return s.client.GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestcaseWrapper) Import(ctx context.Context, req *pb.TestCaseImportRequest) (*pb.TestCaseImportResponse, error) {
	return s.client.Import(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestcaseWrapper) PAGING(ctx context.Context, req *pb.TestCasePagingRequest) (*pb.TestCasePagingResponse, error) {
	return s.client.PAGING(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestcaseWrapper) UPDATE(ctx context.Context, req *pb.TestCaseUpdateRequest) (*pb.TestCaseUpdateResponse, error) {
	return s.client.UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
