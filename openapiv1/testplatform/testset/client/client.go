// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: testplatform_testset.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/testplatform/testset/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// TestplatformTestset testplatform_testset.proto
	TestplatformTestset() pb.TestplatformTestsetClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		testplatformTestset: pb.NewTestplatformTestsetClient(cc),
	}
}

type serviceClients struct {
	testplatformTestset pb.TestplatformTestsetClient
}

func (c *serviceClients) TestplatformTestset() pb.TestplatformTestsetClient {
	return c.testplatformTestset
}

type testplatformTestsetWrapper struct {
	client pb.TestplatformTestsetClient
	opts   []grpc1.CallOption
}

func (s *testplatformTestsetWrapper) CLEAN_FROM_RECYCLE_BIN(ctx context.Context, req *pb.TestSetCleanFromRecycleBinRequest) (*pb.TestSetCleanFromRecycleBinResponse, error) {
	return s.client.CLEAN_FROM_RECYCLE_BIN(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestsetWrapper) COPY(ctx context.Context, req *pb.TestSetCopyRequest) (*pb.TestSetCopyResponse, error) {
	return s.client.COPY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestsetWrapper) CREATE(ctx context.Context, req *pb.TestSetCreateRequest) (*pb.TestSetCreateResponse, error) {
	return s.client.CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestsetWrapper) GET(ctx context.Context, req *pb.GET_Request) (*pb.TestSetGetResponse, error) {
	return s.client.GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestsetWrapper) LIST(ctx context.Context, req *pb.TestSetListRequest) (*pb.TestSetListResponse, error) {
	return s.client.LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestsetWrapper) RECOVER_FROM_RECYCLE_BIN(ctx context.Context, req *pb.TestSetRecoverFromRecycleBinRequest) (*pb.TestSetRecoverFromRecycleBinResponse, error) {
	return s.client.RECOVER_FROM_RECYCLE_BIN(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestsetWrapper) RECYCLE(ctx context.Context, req *pb.TestSetRecycleRequest) (*pb.TestSetRecycleResponse, error) {
	return s.client.RECYCLE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *testplatformTestsetWrapper) UPDATE(ctx context.Context, req *pb.TestSetUpdateRequest) (*emptypb.Empty, error) {
	return s.client.UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
