// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: testplatform_testset.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GET_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GET_RequestMultiError, or
// nil if none found.
func (m *GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestSetID

	if len(errors) > 0 {
		return GET_RequestMultiError(errors)
	}

	return nil
}

// GET_RequestMultiError is an error wrapping multiple validation errors
// returned by GET_Request.ValidateAll() if the designated constraints aren't met.
type GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GET_RequestMultiError) AllErrors() []error { return m }

// GET_RequestValidationError is the validation error returned by
// GET_Request.Validate if the designated constraints aren't met.
type GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GET_RequestValidationError) ErrorName() string { return "GET_RequestValidationError" }

// Error satisfies the builtin error interface
func (e GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GET_RequestValidationError{}

// Validate checks the field values on TestSet with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSet with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TestSetMultiError, or nil if none found.
func (m *TestSet) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for ProjectID

	// no validation rules for ParentID

	// no validation rules for Recycled

	// no validation rules for Directory

	// no validation rules for Order

	// no validation rules for CreatorID

	// no validation rules for UpdaterID

	if len(errors) > 0 {
		return TestSetMultiError(errors)
	}

	return nil
}

// TestSetMultiError is an error wrapping multiple validation errors returned
// by TestSet.ValidateAll() if the designated constraints aren't met.
type TestSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetMultiError) AllErrors() []error { return m }

// TestSetValidationError is the validation error returned by TestSet.Validate
// if the designated constraints aren't met.
type TestSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetValidationError) ErrorName() string { return "TestSetValidationError" }

// Error satisfies the builtin error interface
func (e TestSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetValidationError{}

// Validate checks the field values on TestSetCleanFromRecycleBinRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TestSetCleanFromRecycleBinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetCleanFromRecycleBinRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TestSetCleanFromRecycleBinRequestMultiError, or nil if none found.
func (m *TestSetCleanFromRecycleBinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetCleanFromRecycleBinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestSetID

	if len(errors) > 0 {
		return TestSetCleanFromRecycleBinRequestMultiError(errors)
	}

	return nil
}

// TestSetCleanFromRecycleBinRequestMultiError is an error wrapping multiple
// validation errors returned by
// TestSetCleanFromRecycleBinRequest.ValidateAll() if the designated
// constraints aren't met.
type TestSetCleanFromRecycleBinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetCleanFromRecycleBinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetCleanFromRecycleBinRequestMultiError) AllErrors() []error { return m }

// TestSetCleanFromRecycleBinRequestValidationError is the validation error
// returned by TestSetCleanFromRecycleBinRequest.Validate if the designated
// constraints aren't met.
type TestSetCleanFromRecycleBinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetCleanFromRecycleBinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetCleanFromRecycleBinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetCleanFromRecycleBinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetCleanFromRecycleBinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetCleanFromRecycleBinRequestValidationError) ErrorName() string {
	return "TestSetCleanFromRecycleBinRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetCleanFromRecycleBinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetCleanFromRecycleBinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetCleanFromRecycleBinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetCleanFromRecycleBinRequestValidationError{}

// Validate checks the field values on TestSetCleanFromRecycleBinResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TestSetCleanFromRecycleBinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetCleanFromRecycleBinResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TestSetCleanFromRecycleBinResponseMultiError, or nil if none found.
func (m *TestSetCleanFromRecycleBinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetCleanFromRecycleBinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TestSetCleanFromRecycleBinResponseMultiError(errors)
	}

	return nil
}

// TestSetCleanFromRecycleBinResponseMultiError is an error wrapping multiple
// validation errors returned by
// TestSetCleanFromRecycleBinResponse.ValidateAll() if the designated
// constraints aren't met.
type TestSetCleanFromRecycleBinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetCleanFromRecycleBinResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetCleanFromRecycleBinResponseMultiError) AllErrors() []error { return m }

// TestSetCleanFromRecycleBinResponseValidationError is the validation error
// returned by TestSetCleanFromRecycleBinResponse.Validate if the designated
// constraints aren't met.
type TestSetCleanFromRecycleBinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetCleanFromRecycleBinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetCleanFromRecycleBinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetCleanFromRecycleBinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetCleanFromRecycleBinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetCleanFromRecycleBinResponseValidationError) ErrorName() string {
	return "TestSetCleanFromRecycleBinResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetCleanFromRecycleBinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetCleanFromRecycleBinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetCleanFromRecycleBinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetCleanFromRecycleBinResponseValidationError{}

// Validate checks the field values on TestSetCopyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestSetCopyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetCopyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestSetCopyRequestMultiError, or nil if none found.
func (m *TestSetCopyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetCopyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CopyToTestSetID

	// no validation rules for TestSetID

	if len(errors) > 0 {
		return TestSetCopyRequestMultiError(errors)
	}

	return nil
}

// TestSetCopyRequestMultiError is an error wrapping multiple validation errors
// returned by TestSetCopyRequest.ValidateAll() if the designated constraints
// aren't met.
type TestSetCopyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetCopyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetCopyRequestMultiError) AllErrors() []error { return m }

// TestSetCopyRequestValidationError is the validation error returned by
// TestSetCopyRequest.Validate if the designated constraints aren't met.
type TestSetCopyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetCopyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetCopyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetCopyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetCopyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetCopyRequestValidationError) ErrorName() string {
	return "TestSetCopyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetCopyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetCopyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetCopyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetCopyRequestValidationError{}

// Validate checks the field values on TestSetCopyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestSetCopyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetCopyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestSetCopyResponseMultiError, or nil if none found.
func (m *TestSetCopyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetCopyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return TestSetCopyResponseMultiError(errors)
	}

	return nil
}

// TestSetCopyResponseMultiError is an error wrapping multiple validation
// errors returned by TestSetCopyResponse.ValidateAll() if the designated
// constraints aren't met.
type TestSetCopyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetCopyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetCopyResponseMultiError) AllErrors() []error { return m }

// TestSetCopyResponseValidationError is the validation error returned by
// TestSetCopyResponse.Validate if the designated constraints aren't met.
type TestSetCopyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetCopyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetCopyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetCopyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetCopyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetCopyResponseValidationError) ErrorName() string {
	return "TestSetCopyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetCopyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetCopyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetCopyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetCopyResponseValidationError{}

// Validate checks the field values on TestSetCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestSetCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestSetCreateRequestMultiError, or nil if none found.
func (m *TestSetCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.ProjectID != nil {
		// no validation rules for ProjectID
	}

	if m.ParentID != nil {
		// no validation rules for ParentID
	}

	if len(errors) > 0 {
		return TestSetCreateRequestMultiError(errors)
	}

	return nil
}

// TestSetCreateRequestMultiError is an error wrapping multiple validation
// errors returned by TestSetCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type TestSetCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetCreateRequestMultiError) AllErrors() []error { return m }

// TestSetCreateRequestValidationError is the validation error returned by
// TestSetCreateRequest.Validate if the designated constraints aren't met.
type TestSetCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetCreateRequestValidationError) ErrorName() string {
	return "TestSetCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetCreateRequestValidationError{}

// Validate checks the field values on TestSetCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestSetCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestSetCreateResponseMultiError, or nil if none found.
func (m *TestSetCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestSetCreateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestSetCreateResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestSetCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TestSetCreateResponseMultiError(errors)
	}

	return nil
}

// TestSetCreateResponseMultiError is an error wrapping multiple validation
// errors returned by TestSetCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type TestSetCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetCreateResponseMultiError) AllErrors() []error { return m }

// TestSetCreateResponseValidationError is the validation error returned by
// TestSetCreateResponse.Validate if the designated constraints aren't met.
type TestSetCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetCreateResponseValidationError) ErrorName() string {
	return "TestSetCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetCreateResponseValidationError{}

// Validate checks the field values on TestSetGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestSetGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestSetGetResponseMultiError, or nil if none found.
func (m *TestSetGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestSetGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestSetGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestSetGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TestSetGetResponseMultiError(errors)
	}

	return nil
}

// TestSetGetResponseMultiError is an error wrapping multiple validation errors
// returned by TestSetGetResponse.ValidateAll() if the designated constraints
// aren't met.
type TestSetGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetGetResponseMultiError) AllErrors() []error { return m }

// TestSetGetResponseValidationError is the validation error returned by
// TestSetGetResponse.Validate if the designated constraints aren't met.
type TestSetGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetGetResponseValidationError) ErrorName() string {
	return "TestSetGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetGetResponseValidationError{}

// Validate checks the field values on TestSetListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestSetListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestSetListRequestMultiError, or nil if none found.
func (m *TestSetListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Recycled

	// no validation rules for NoSubTestSets

	if m.ParentID != nil {
		// no validation rules for ParentID
	}

	if m.ProjectID != nil {
		// no validation rules for ProjectID
	}

	if len(errors) > 0 {
		return TestSetListRequestMultiError(errors)
	}

	return nil
}

// TestSetListRequestMultiError is an error wrapping multiple validation errors
// returned by TestSetListRequest.ValidateAll() if the designated constraints
// aren't met.
type TestSetListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetListRequestMultiError) AllErrors() []error { return m }

// TestSetListRequestValidationError is the validation error returned by
// TestSetListRequest.Validate if the designated constraints aren't met.
type TestSetListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetListRequestValidationError) ErrorName() string {
	return "TestSetListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetListRequestValidationError{}

// Validate checks the field values on TestSetListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestSetListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestSetListResponseMultiError, or nil if none found.
func (m *TestSetListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TestSetListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TestSetListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TestSetListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TestSetListResponseMultiError(errors)
	}

	return nil
}

// TestSetListResponseMultiError is an error wrapping multiple validation
// errors returned by TestSetListResponse.ValidateAll() if the designated
// constraints aren't met.
type TestSetListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetListResponseMultiError) AllErrors() []error { return m }

// TestSetListResponseValidationError is the validation error returned by
// TestSetListResponse.Validate if the designated constraints aren't met.
type TestSetListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetListResponseValidationError) ErrorName() string {
	return "TestSetListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetListResponseValidationError{}

// Validate checks the field values on TestSetRecoverFromRecycleBinRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TestSetRecoverFromRecycleBinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetRecoverFromRecycleBinRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TestSetRecoverFromRecycleBinRequestMultiError, or nil if none found.
func (m *TestSetRecoverFromRecycleBinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetRecoverFromRecycleBinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestSetID

	if m.RecoverToTestSetID != nil {
		// no validation rules for RecoverToTestSetID
	}

	if len(errors) > 0 {
		return TestSetRecoverFromRecycleBinRequestMultiError(errors)
	}

	return nil
}

// TestSetRecoverFromRecycleBinRequestMultiError is an error wrapping multiple
// validation errors returned by
// TestSetRecoverFromRecycleBinRequest.ValidateAll() if the designated
// constraints aren't met.
type TestSetRecoverFromRecycleBinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetRecoverFromRecycleBinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetRecoverFromRecycleBinRequestMultiError) AllErrors() []error { return m }

// TestSetRecoverFromRecycleBinRequestValidationError is the validation error
// returned by TestSetRecoverFromRecycleBinRequest.Validate if the designated
// constraints aren't met.
type TestSetRecoverFromRecycleBinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetRecoverFromRecycleBinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetRecoverFromRecycleBinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetRecoverFromRecycleBinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetRecoverFromRecycleBinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetRecoverFromRecycleBinRequestValidationError) ErrorName() string {
	return "TestSetRecoverFromRecycleBinRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetRecoverFromRecycleBinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetRecoverFromRecycleBinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetRecoverFromRecycleBinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetRecoverFromRecycleBinRequestValidationError{}

// Validate checks the field values on TestSetRecoverFromRecycleBinResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TestSetRecoverFromRecycleBinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetRecoverFromRecycleBinResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TestSetRecoverFromRecycleBinResponseMultiError, or nil if none found.
func (m *TestSetRecoverFromRecycleBinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetRecoverFromRecycleBinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TestSetRecoverFromRecycleBinResponseMultiError(errors)
	}

	return nil
}

// TestSetRecoverFromRecycleBinResponseMultiError is an error wrapping multiple
// validation errors returned by
// TestSetRecoverFromRecycleBinResponse.ValidateAll() if the designated
// constraints aren't met.
type TestSetRecoverFromRecycleBinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetRecoverFromRecycleBinResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetRecoverFromRecycleBinResponseMultiError) AllErrors() []error { return m }

// TestSetRecoverFromRecycleBinResponseValidationError is the validation error
// returned by TestSetRecoverFromRecycleBinResponse.Validate if the designated
// constraints aren't met.
type TestSetRecoverFromRecycleBinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetRecoverFromRecycleBinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetRecoverFromRecycleBinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetRecoverFromRecycleBinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetRecoverFromRecycleBinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetRecoverFromRecycleBinResponseValidationError) ErrorName() string {
	return "TestSetRecoverFromRecycleBinResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetRecoverFromRecycleBinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetRecoverFromRecycleBinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetRecoverFromRecycleBinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetRecoverFromRecycleBinResponseValidationError{}

// Validate checks the field values on TestSetRecycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestSetRecycleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetRecycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestSetRecycleRequestMultiError, or nil if none found.
func (m *TestSetRecycleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetRecycleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestSetID

	// no validation rules for IsRoot

	if len(errors) > 0 {
		return TestSetRecycleRequestMultiError(errors)
	}

	return nil
}

// TestSetRecycleRequestMultiError is an error wrapping multiple validation
// errors returned by TestSetRecycleRequest.ValidateAll() if the designated
// constraints aren't met.
type TestSetRecycleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetRecycleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetRecycleRequestMultiError) AllErrors() []error { return m }

// TestSetRecycleRequestValidationError is the validation error returned by
// TestSetRecycleRequest.Validate if the designated constraints aren't met.
type TestSetRecycleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetRecycleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetRecycleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetRecycleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetRecycleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetRecycleRequestValidationError) ErrorName() string {
	return "TestSetRecycleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetRecycleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetRecycleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetRecycleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetRecycleRequestValidationError{}

// Validate checks the field values on TestSetRecycleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestSetRecycleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetRecycleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestSetRecycleResponseMultiError, or nil if none found.
func (m *TestSetRecycleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetRecycleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TestSetRecycleResponseMultiError(errors)
	}

	return nil
}

// TestSetRecycleResponseMultiError is an error wrapping multiple validation
// errors returned by TestSetRecycleResponse.ValidateAll() if the designated
// constraints aren't met.
type TestSetRecycleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetRecycleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetRecycleResponseMultiError) AllErrors() []error { return m }

// TestSetRecycleResponseValidationError is the validation error returned by
// TestSetRecycleResponse.Validate if the designated constraints aren't met.
type TestSetRecycleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetRecycleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetRecycleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetRecycleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetRecycleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetRecycleResponseValidationError) ErrorName() string {
	return "TestSetRecycleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetRecycleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetRecycleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetRecycleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetRecycleResponseValidationError{}

// Validate checks the field values on TestSetUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestSetUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestSetUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestSetUpdateRequestMultiError, or nil if none found.
func (m *TestSetUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestSetUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TestSetID

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.MoveToParentID != nil {
		// no validation rules for MoveToParentID
	}

	if len(errors) > 0 {
		return TestSetUpdateRequestMultiError(errors)
	}

	return nil
}

// TestSetUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by TestSetUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type TestSetUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestSetUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestSetUpdateRequestMultiError) AllErrors() []error { return m }

// TestSetUpdateRequestValidationError is the validation error returned by
// TestSetUpdateRequest.Validate if the designated constraints aren't met.
type TestSetUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestSetUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestSetUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestSetUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestSetUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestSetUpdateRequestValidationError) ErrorName() string {
	return "TestSetUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestSetUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestSetUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestSetUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestSetUpdateRequestValidationError{}
