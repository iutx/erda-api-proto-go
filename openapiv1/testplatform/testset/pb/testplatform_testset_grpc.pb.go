// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: testplatform_testset.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// TestplatformTestsetClient is the client API for TestplatformTestset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestplatformTestsetClient interface {
	CLEAN_FROM_RECYCLE_BIN(ctx context.Context, in *TestSetCleanFromRecycleBinRequest, opts ...grpc.CallOption) (*TestSetCleanFromRecycleBinResponse, error)
	COPY(ctx context.Context, in *TestSetCopyRequest, opts ...grpc.CallOption) (*TestSetCopyResponse, error)
	CREATE(ctx context.Context, in *TestSetCreateRequest, opts ...grpc.CallOption) (*TestSetCreateResponse, error)
	GET(ctx context.Context, in *GET_Request, opts ...grpc.CallOption) (*TestSetGetResponse, error)
	LIST(ctx context.Context, in *TestSetListRequest, opts ...grpc.CallOption) (*TestSetListResponse, error)
	RECOVER_FROM_RECYCLE_BIN(ctx context.Context, in *TestSetRecoverFromRecycleBinRequest, opts ...grpc.CallOption) (*TestSetRecoverFromRecycleBinResponse, error)
	RECYCLE(ctx context.Context, in *TestSetRecycleRequest, opts ...grpc.CallOption) (*TestSetRecycleResponse, error)
	UPDATE(ctx context.Context, in *TestSetUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type testplatformTestsetClient struct {
	cc grpc1.ClientConnInterface
}

func NewTestplatformTestsetClient(cc grpc1.ClientConnInterface) TestplatformTestsetClient {
	return &testplatformTestsetClient{cc}
}

func (c *testplatformTestsetClient) CLEAN_FROM_RECYCLE_BIN(ctx context.Context, in *TestSetCleanFromRecycleBinRequest, opts ...grpc.CallOption) (*TestSetCleanFromRecycleBinResponse, error) {
	out := new(TestSetCleanFromRecycleBinResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testset/CLEAN_FROM_RECYCLE_BIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestsetClient) COPY(ctx context.Context, in *TestSetCopyRequest, opts ...grpc.CallOption) (*TestSetCopyResponse, error) {
	out := new(TestSetCopyResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testset/COPY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestsetClient) CREATE(ctx context.Context, in *TestSetCreateRequest, opts ...grpc.CallOption) (*TestSetCreateResponse, error) {
	out := new(TestSetCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testset/CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestsetClient) GET(ctx context.Context, in *GET_Request, opts ...grpc.CallOption) (*TestSetGetResponse, error) {
	out := new(TestSetGetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testset/GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestsetClient) LIST(ctx context.Context, in *TestSetListRequest, opts ...grpc.CallOption) (*TestSetListResponse, error) {
	out := new(TestSetListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testset/LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestsetClient) RECOVER_FROM_RECYCLE_BIN(ctx context.Context, in *TestSetRecoverFromRecycleBinRequest, opts ...grpc.CallOption) (*TestSetRecoverFromRecycleBinResponse, error) {
	out := new(TestSetRecoverFromRecycleBinResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testset/RECOVER_FROM_RECYCLE_BIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestsetClient) RECYCLE(ctx context.Context, in *TestSetRecycleRequest, opts ...grpc.CallOption) (*TestSetRecycleResponse, error) {
	out := new(TestSetRecycleResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testset/RECYCLE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testplatformTestsetClient) UPDATE(ctx context.Context, in *TestSetUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.testplatform.testplatform_testset/UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestplatformTestsetServer is the server API for TestplatformTestset service.
// All implementations should embed UnimplementedTestplatformTestsetServer
// for forward compatibility
type TestplatformTestsetServer interface {
	CLEAN_FROM_RECYCLE_BIN(context.Context, *TestSetCleanFromRecycleBinRequest) (*TestSetCleanFromRecycleBinResponse, error)
	COPY(context.Context, *TestSetCopyRequest) (*TestSetCopyResponse, error)
	CREATE(context.Context, *TestSetCreateRequest) (*TestSetCreateResponse, error)
	GET(context.Context, *GET_Request) (*TestSetGetResponse, error)
	LIST(context.Context, *TestSetListRequest) (*TestSetListResponse, error)
	RECOVER_FROM_RECYCLE_BIN(context.Context, *TestSetRecoverFromRecycleBinRequest) (*TestSetRecoverFromRecycleBinResponse, error)
	RECYCLE(context.Context, *TestSetRecycleRequest) (*TestSetRecycleResponse, error)
	UPDATE(context.Context, *TestSetUpdateRequest) (*emptypb.Empty, error)
}

// UnimplementedTestplatformTestsetServer should be embedded to have forward compatible implementations.
type UnimplementedTestplatformTestsetServer struct {
}

func (*UnimplementedTestplatformTestsetServer) CLEAN_FROM_RECYCLE_BIN(context.Context, *TestSetCleanFromRecycleBinRequest) (*TestSetCleanFromRecycleBinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CLEAN_FROM_RECYCLE_BIN not implemented")
}
func (*UnimplementedTestplatformTestsetServer) COPY(context.Context, *TestSetCopyRequest) (*TestSetCopyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method COPY not implemented")
}
func (*UnimplementedTestplatformTestsetServer) CREATE(context.Context, *TestSetCreateRequest) (*TestSetCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CREATE not implemented")
}
func (*UnimplementedTestplatformTestsetServer) GET(context.Context, *GET_Request) (*TestSetGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GET not implemented")
}
func (*UnimplementedTestplatformTestsetServer) LIST(context.Context, *TestSetListRequest) (*TestSetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LIST not implemented")
}
func (*UnimplementedTestplatformTestsetServer) RECOVER_FROM_RECYCLE_BIN(context.Context, *TestSetRecoverFromRecycleBinRequest) (*TestSetRecoverFromRecycleBinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RECOVER_FROM_RECYCLE_BIN not implemented")
}
func (*UnimplementedTestplatformTestsetServer) RECYCLE(context.Context, *TestSetRecycleRequest) (*TestSetRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RECYCLE not implemented")
}
func (*UnimplementedTestplatformTestsetServer) UPDATE(context.Context, *TestSetUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UPDATE not implemented")
}

func RegisterTestplatformTestsetServer(s grpc1.ServiceRegistrar, srv TestplatformTestsetServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_TestplatformTestset_serviceDesc(srv, opts...), srv)
}

var _TestplatformTestset_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.testplatform.testplatform_testset",
	HandlerType: (*TestplatformTestsetServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "testplatform_testset.proto",
}

func _get_TestplatformTestset_serviceDesc(srv TestplatformTestsetServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_TestplatformTestset_CLEAN_FROM_RECYCLE_BIN_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CLEAN_FROM_RECYCLE_BIN(ctx, req.(*TestSetCleanFromRecycleBinRequest))
	}
	var _TestplatformTestset_CLEAN_FROM_RECYCLE_BIN_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestset_CLEAN_FROM_RECYCLE_BIN_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "CLEAN_FROM_RECYCLE_BIN", srv)
		_TestplatformTestset_CLEAN_FROM_RECYCLE_BIN_Handler = h.Interceptor(_TestplatformTestset_CLEAN_FROM_RECYCLE_BIN_Handler)
	}

	_TestplatformTestset_COPY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.COPY(ctx, req.(*TestSetCopyRequest))
	}
	var _TestplatformTestset_COPY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestset_COPY_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "COPY", srv)
		_TestplatformTestset_COPY_Handler = h.Interceptor(_TestplatformTestset_COPY_Handler)
	}

	_TestplatformTestset_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CREATE(ctx, req.(*TestSetCreateRequest))
	}
	var _TestplatformTestset_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestset_CREATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "CREATE", srv)
		_TestplatformTestset_CREATE_Handler = h.Interceptor(_TestplatformTestset_CREATE_Handler)
	}

	_TestplatformTestset_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GET(ctx, req.(*GET_Request))
	}
	var _TestplatformTestset_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestset_GET_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "GET", srv)
		_TestplatformTestset_GET_Handler = h.Interceptor(_TestplatformTestset_GET_Handler)
	}

	_TestplatformTestset_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.LIST(ctx, req.(*TestSetListRequest))
	}
	var _TestplatformTestset_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestset_LIST_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "LIST", srv)
		_TestplatformTestset_LIST_Handler = h.Interceptor(_TestplatformTestset_LIST_Handler)
	}

	_TestplatformTestset_RECOVER_FROM_RECYCLE_BIN_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.RECOVER_FROM_RECYCLE_BIN(ctx, req.(*TestSetRecoverFromRecycleBinRequest))
	}
	var _TestplatformTestset_RECOVER_FROM_RECYCLE_BIN_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestset_RECOVER_FROM_RECYCLE_BIN_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "RECOVER_FROM_RECYCLE_BIN", srv)
		_TestplatformTestset_RECOVER_FROM_RECYCLE_BIN_Handler = h.Interceptor(_TestplatformTestset_RECOVER_FROM_RECYCLE_BIN_Handler)
	}

	_TestplatformTestset_RECYCLE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.RECYCLE(ctx, req.(*TestSetRecycleRequest))
	}
	var _TestplatformTestset_RECYCLE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestset_RECYCLE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "RECYCLE", srv)
		_TestplatformTestset_RECYCLE_Handler = h.Interceptor(_TestplatformTestset_RECYCLE_Handler)
	}

	_TestplatformTestset_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UPDATE(ctx, req.(*TestSetUpdateRequest))
	}
	var _TestplatformTestset_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_TestplatformTestset_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "UPDATE", srv)
		_TestplatformTestset_UPDATE_Handler = h.Interceptor(_TestplatformTestset_UPDATE_Handler)
	}

	var serviceDesc = _TestplatformTestset_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CLEAN_FROM_RECYCLE_BIN",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestSetCleanFromRecycleBinRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestsetServer).CLEAN_FROM_RECYCLE_BIN(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestset_CLEAN_FROM_RECYCLE_BIN_info)
				}
				if interceptor == nil {
					return _TestplatformTestset_CLEAN_FROM_RECYCLE_BIN_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testset/CLEAN_FROM_RECYCLE_BIN",
				}
				return interceptor(ctx, in, info, _TestplatformTestset_CLEAN_FROM_RECYCLE_BIN_Handler)
			},
		},
		{
			MethodName: "COPY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestSetCopyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestsetServer).COPY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestset_COPY_info)
				}
				if interceptor == nil {
					return _TestplatformTestset_COPY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testset/COPY",
				}
				return interceptor(ctx, in, info, _TestplatformTestset_COPY_Handler)
			},
		},
		{
			MethodName: "CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestSetCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestsetServer).CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestset_CREATE_info)
				}
				if interceptor == nil {
					return _TestplatformTestset_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testset/CREATE",
				}
				return interceptor(ctx, in, info, _TestplatformTestset_CREATE_Handler)
			},
		},
		{
			MethodName: "GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestsetServer).GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestset_GET_info)
				}
				if interceptor == nil {
					return _TestplatformTestset_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testset/GET",
				}
				return interceptor(ctx, in, info, _TestplatformTestset_GET_Handler)
			},
		},
		{
			MethodName: "LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestSetListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestsetServer).LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestset_LIST_info)
				}
				if interceptor == nil {
					return _TestplatformTestset_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testset/LIST",
				}
				return interceptor(ctx, in, info, _TestplatformTestset_LIST_Handler)
			},
		},
		{
			MethodName: "RECOVER_FROM_RECYCLE_BIN",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestSetRecoverFromRecycleBinRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestsetServer).RECOVER_FROM_RECYCLE_BIN(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestset_RECOVER_FROM_RECYCLE_BIN_info)
				}
				if interceptor == nil {
					return _TestplatformTestset_RECOVER_FROM_RECYCLE_BIN_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testset/RECOVER_FROM_RECYCLE_BIN",
				}
				return interceptor(ctx, in, info, _TestplatformTestset_RECOVER_FROM_RECYCLE_BIN_Handler)
			},
		},
		{
			MethodName: "RECYCLE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestSetRecycleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestsetServer).RECYCLE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestset_RECYCLE_info)
				}
				if interceptor == nil {
					return _TestplatformTestset_RECYCLE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testset/RECYCLE",
				}
				return interceptor(ctx, in, info, _TestplatformTestset_RECYCLE_Handler)
			},
		},
		{
			MethodName: "UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TestSetUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(TestplatformTestsetServer).UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _TestplatformTestset_UPDATE_info)
				}
				if interceptor == nil {
					return _TestplatformTestset_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.testplatform.testplatform_testset/UPDATE",
				}
				return interceptor(ctx, in, info, _TestplatformTestset_UPDATE_Handler)
			},
		},
	}
	return &serviceDesc
}
