// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: testplatform_testset.proto

package pb

import (
	context "context"
	http1 "net/http"
	strconv "strconv"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// TestplatformTestsetHandler is the server API for TestplatformTestset service.
type TestplatformTestsetHandler interface {
	// DELETE /api/testsets/{testSetID}/actions/clean-from-recycle-bin
	CLEAN_FROM_RECYCLE_BIN(context.Context, *TestSetCleanFromRecycleBinRequest) (*TestSetCleanFromRecycleBinResponse, error)
	// POST /api/testsets/{testSetID}/actions/copy
	COPY(context.Context, *TestSetCopyRequest) (*TestSetCopyResponse, error)
	// POST /api/testsets
	CREATE(context.Context, *TestSetCreateRequest) (*TestSetCreateResponse, error)
	// GET /api/testsets/{testSetID}
	GET(context.Context, *GET_Request) (*TestSetGetResponse, error)
	// GET /api/testsets
	LIST(context.Context, *TestSetListRequest) (*TestSetListResponse, error)
	// POST /api/testsets/{testSetID}/actions/recover-from-recycle-bin
	RECOVER_FROM_RECYCLE_BIN(context.Context, *TestSetRecoverFromRecycleBinRequest) (*TestSetRecoverFromRecycleBinResponse, error)
	// POST /api/testsets/{testSetID}/actions/recycle
	RECYCLE(context.Context, *TestSetRecycleRequest) (*TestSetRecycleResponse, error)
	// PUT /api/testsets/{testSetID}
	UPDATE(context.Context, *TestSetUpdateRequest) (*emptypb.Empty, error)
}

// RegisterTestplatformTestsetHandler register TestplatformTestsetHandler to http.Router.
func RegisterTestplatformTestsetHandler(r http.Router, srv TestplatformTestsetHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_CLEAN_FROM_RECYCLE_BIN := func(method, path string, fn func(context.Context, *TestSetCleanFromRecycleBinRequest) (*TestSetCleanFromRecycleBinResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestSetCleanFromRecycleBinRequest))
		}
		var CLEAN_FROM_RECYCLE_BIN_info transport.ServiceInfo
		if h.Interceptor != nil {
			CLEAN_FROM_RECYCLE_BIN_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "CLEAN_FROM_RECYCLE_BIN", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CLEAN_FROM_RECYCLE_BIN_info)
				}
				r = r.WithContext(ctx)
				var in TestSetCleanFromRecycleBinRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testSetID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.TestSetID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_COPY := func(method, path string, fn func(context.Context, *TestSetCopyRequest) (*TestSetCopyResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestSetCopyRequest))
		}
		var COPY_info transport.ServiceInfo
		if h.Interceptor != nil {
			COPY_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "COPY", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, COPY_info)
				}
				r = r.WithContext(ctx)
				var in TestSetCopyRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testSetID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.TestSetID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CREATE := func(method, path string, fn func(context.Context, *TestSetCreateRequest) (*TestSetCreateResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestSetCreateRequest))
		}
		var CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			CREATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CREATE_info)
				}
				r = r.WithContext(ctx)
				var in TestSetCreateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GET := func(method, path string, fn func(context.Context, *GET_Request) (*TestSetGetResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GET_Request))
		}
		var GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			GET_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GET_info)
				}
				r = r.WithContext(ctx)
				var in GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testSetID":
							in.TestSetID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_LIST := func(method, path string, fn func(context.Context, *TestSetListRequest) (*TestSetListResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestSetListRequest))
		}
		var LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			LIST_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, LIST_info)
				}
				r = r.WithContext(ctx)
				var in TestSetListRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_RECOVER_FROM_RECYCLE_BIN := func(method, path string, fn func(context.Context, *TestSetRecoverFromRecycleBinRequest) (*TestSetRecoverFromRecycleBinResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestSetRecoverFromRecycleBinRequest))
		}
		var RECOVER_FROM_RECYCLE_BIN_info transport.ServiceInfo
		if h.Interceptor != nil {
			RECOVER_FROM_RECYCLE_BIN_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "RECOVER_FROM_RECYCLE_BIN", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, RECOVER_FROM_RECYCLE_BIN_info)
				}
				r = r.WithContext(ctx)
				var in TestSetRecoverFromRecycleBinRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testSetID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.TestSetID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_RECYCLE := func(method, path string, fn func(context.Context, *TestSetRecycleRequest) (*TestSetRecycleResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestSetRecycleRequest))
		}
		var RECYCLE_info transport.ServiceInfo
		if h.Interceptor != nil {
			RECYCLE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "RECYCLE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, RECYCLE_info)
				}
				r = r.WithContext(ctx)
				var in TestSetRecycleRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testSetID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.TestSetID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UPDATE := func(method, path string, fn func(context.Context, *TestSetUpdateRequest) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TestSetUpdateRequest))
		}
		var UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			UPDATE_info = transport.NewServiceInfo("erda.openapiv1.testplatform.testplatform_testset", "UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in TestSetUpdateRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "testSetID":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.TestSetID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CLEAN_FROM_RECYCLE_BIN("DELETE", "/api/testsets/{testSetID}/actions/clean-from-recycle-bin", srv.CLEAN_FROM_RECYCLE_BIN)
	add_COPY("POST", "/api/testsets/{testSetID}/actions/copy", srv.COPY)
	add_CREATE("POST", "/api/testsets", srv.CREATE)
	add_GET("GET", "/api/testsets/{testSetID}", srv.GET)
	add_LIST("GET", "/api/testsets", srv.LIST)
	add_RECOVER_FROM_RECYCLE_BIN("POST", "/api/testsets/{testSetID}/actions/recover-from-recycle-bin", srv.RECOVER_FROM_RECYCLE_BIN)
	add_RECYCLE("POST", "/api/testsets/{testSetID}/actions/recycle", srv.RECYCLE)
	add_UPDATE("PUT", "/api/testsets/{testSetID}", srv.UPDATE)
}
