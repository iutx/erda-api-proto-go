// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: testplatform_testset.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSetID string `protobuf:"bytes,1,opt,name=testSetID,proto3" json:"testSetID,omitempty"` // generated from path variable: testSetID. You should change the proto type if necessary.
}

func (x *GET_Request) Reset() {
	*x = GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GET_Request) ProtoMessage() {}

func (x *GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GET_Request.ProtoReflect.Descriptor instead.
func (*GET_Request) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{0}
}

func (x *GET_Request) GetTestSetID() string {
	if x != nil {
		return x.TestSetID
	}
	return ""
}

type TestSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint64 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectID uint64 `protobuf:"varint,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ParentID  uint64 `protobuf:"varint,4,opt,name=parentID,proto3" json:"parentID,omitempty"`
	Recycled  bool   `protobuf:"varint,5,opt,name=recycled,proto3" json:"recycled,omitempty"`
	Directory string `protobuf:"bytes,6,opt,name=directory,json=directoryName,proto3" json:"directory,omitempty"`
	Order     int64  `protobuf:"varint,7,opt,name=order,proto3" json:"order,omitempty"`
	CreatorID string `protobuf:"bytes,8,opt,name=creatorID,proto3" json:"creatorID,omitempty"`
	UpdaterID string `protobuf:"bytes,9,opt,name=updaterID,proto3" json:"updaterID,omitempty"`
}

func (x *TestSet) Reset() {
	*x = TestSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSet) ProtoMessage() {}

func (x *TestSet) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSet.ProtoReflect.Descriptor instead.
func (*TestSet) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{1}
}

func (x *TestSet) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TestSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestSet) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *TestSet) GetParentID() uint64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *TestSet) GetRecycled() bool {
	if x != nil {
		return x.Recycled
	}
	return false
}

func (x *TestSet) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *TestSet) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *TestSet) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *TestSet) GetUpdaterID() string {
	if x != nil {
		return x.UpdaterID
	}
	return ""
}

type TestSetCleanFromRecycleBinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSetID uint64 `protobuf:"varint,1,opt,name=testSetID,json=-,proto3" json:"testSetID,omitempty"`
}

func (x *TestSetCleanFromRecycleBinRequest) Reset() {
	*x = TestSetCleanFromRecycleBinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetCleanFromRecycleBinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetCleanFromRecycleBinRequest) ProtoMessage() {}

func (x *TestSetCleanFromRecycleBinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetCleanFromRecycleBinRequest.ProtoReflect.Descriptor instead.
func (*TestSetCleanFromRecycleBinRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{2}
}

func (x *TestSetCleanFromRecycleBinRequest) GetTestSetID() uint64 {
	if x != nil {
		return x.TestSetID
	}
	return 0
}

type TestSetCleanFromRecycleBinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestSetCleanFromRecycleBinResponse) Reset() {
	*x = TestSetCleanFromRecycleBinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetCleanFromRecycleBinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetCleanFromRecycleBinResponse) ProtoMessage() {}

func (x *TestSetCleanFromRecycleBinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetCleanFromRecycleBinResponse.ProtoReflect.Descriptor instead.
func (*TestSetCleanFromRecycleBinResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{3}
}

type TestSetCopyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopyToTestSetID uint64 `protobuf:"varint,1,opt,name=copyToTestSetID,proto3" json:"copyToTestSetID,omitempty"`
	TestSetID       uint64 `protobuf:"varint,2,opt,name=testSetID,json=-,proto3" json:"testSetID,omitempty"`
}

func (x *TestSetCopyRequest) Reset() {
	*x = TestSetCopyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetCopyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetCopyRequest) ProtoMessage() {}

func (x *TestSetCopyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetCopyRequest.ProtoReflect.Descriptor instead.
func (*TestSetCopyRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{4}
}

func (x *TestSetCopyRequest) GetCopyToTestSetID() uint64 {
	if x != nil {
		return x.CopyToTestSetID
	}
	return 0
}

func (x *TestSetCopyRequest) GetTestSetID() uint64 {
	if x != nil {
		return x.TestSetID
	}
	return 0
}

type TestSetCopyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TestSetCopyResponse) Reset() {
	*x = TestSetCopyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetCopyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetCopyResponse) ProtoMessage() {}

func (x *TestSetCopyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetCopyResponse.ProtoReflect.Descriptor instead.
func (*TestSetCopyResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{5}
}

func (x *TestSetCopyResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type TestSetCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID *uint64 `protobuf:"varint,1,opt,name=projectID,proto3,oneof" json:"projectID,omitempty"`
	ParentID  *uint64 `protobuf:"varint,2,opt,name=parentID,proto3,oneof" json:"parentID,omitempty"`
	Name      string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TestSetCreateRequest) Reset() {
	*x = TestSetCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetCreateRequest) ProtoMessage() {}

func (x *TestSetCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetCreateRequest.ProtoReflect.Descriptor instead.
func (*TestSetCreateRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{6}
}

func (x *TestSetCreateRequest) GetProjectID() uint64 {
	if x != nil && x.ProjectID != nil {
		return *x.ProjectID
	}
	return 0
}

func (x *TestSetCreateRequest) GetParentID() uint64 {
	if x != nil && x.ParentID != nil {
		return *x.ParentID
	}
	return 0
}

func (x *TestSetCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TestSetCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *TestSetCreateResponse) Reset() {
	*x = TestSetCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetCreateResponse) ProtoMessage() {}

func (x *TestSetCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetCreateResponse.ProtoReflect.Descriptor instead.
func (*TestSetCreateResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{7}
}

func (x *TestSetCreateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestSetGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *TestSetGetResponse) Reset() {
	*x = TestSetGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetGetResponse) ProtoMessage() {}

func (x *TestSetGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetGetResponse.ProtoReflect.Descriptor instead.
func (*TestSetGetResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{8}
}

func (x *TestSetGetResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestSetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recycled      bool     `protobuf:"varint,1,opt,name=recycled,proto3" json:"recycled,omitempty"`
	ParentID      *uint64  `protobuf:"varint,2,opt,name=parentID,proto3,oneof" json:"parentID,omitempty"`
	ProjectID     *uint64  `protobuf:"varint,3,opt,name=projectID,proto3,oneof" json:"projectID,omitempty"`
	TestSetIDs    []uint64 `protobuf:"varint,4,rep,packed,name=testSetIDs,proto3" json:"testSetIDs,omitempty"`
	NoSubTestSets bool     `protobuf:"varint,5,opt,name=noSubTestSets,proto3" json:"noSubTestSets,omitempty"`
}

func (x *TestSetListRequest) Reset() {
	*x = TestSetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetListRequest) ProtoMessage() {}

func (x *TestSetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetListRequest.ProtoReflect.Descriptor instead.
func (*TestSetListRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{9}
}

func (x *TestSetListRequest) GetRecycled() bool {
	if x != nil {
		return x.Recycled
	}
	return false
}

func (x *TestSetListRequest) GetParentID() uint64 {
	if x != nil && x.ParentID != nil {
		return *x.ParentID
	}
	return 0
}

func (x *TestSetListRequest) GetProjectID() uint64 {
	if x != nil && x.ProjectID != nil {
		return *x.ProjectID
	}
	return 0
}

func (x *TestSetListRequest) GetTestSetIDs() []uint64 {
	if x != nil {
		return x.TestSetIDs
	}
	return nil
}

func (x *TestSetListRequest) GetNoSubTestSets() bool {
	if x != nil {
		return x.NoSubTestSets
	}
	return false
}

type TestSetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TestSetListResponse) Reset() {
	*x = TestSetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetListResponse) ProtoMessage() {}

func (x *TestSetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetListResponse.ProtoReflect.Descriptor instead.
func (*TestSetListResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{10}
}

func (x *TestSetListResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestSetRecoverFromRecycleBinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSetID          uint64  `protobuf:"varint,1,opt,name=testSetID,json=-,proto3" json:"testSetID,omitempty"`
	RecoverToTestSetID *uint64 `protobuf:"varint,2,opt,name=recoverToTestSetID,proto3,oneof" json:"recoverToTestSetID,omitempty"`
}

func (x *TestSetRecoverFromRecycleBinRequest) Reset() {
	*x = TestSetRecoverFromRecycleBinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetRecoverFromRecycleBinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetRecoverFromRecycleBinRequest) ProtoMessage() {}

func (x *TestSetRecoverFromRecycleBinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetRecoverFromRecycleBinRequest.ProtoReflect.Descriptor instead.
func (*TestSetRecoverFromRecycleBinRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{11}
}

func (x *TestSetRecoverFromRecycleBinRequest) GetTestSetID() uint64 {
	if x != nil {
		return x.TestSetID
	}
	return 0
}

func (x *TestSetRecoverFromRecycleBinRequest) GetRecoverToTestSetID() uint64 {
	if x != nil && x.RecoverToTestSetID != nil {
		return *x.RecoverToTestSetID
	}
	return 0
}

type TestSetRecoverFromRecycleBinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestSetRecoverFromRecycleBinResponse) Reset() {
	*x = TestSetRecoverFromRecycleBinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetRecoverFromRecycleBinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetRecoverFromRecycleBinResponse) ProtoMessage() {}

func (x *TestSetRecoverFromRecycleBinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetRecoverFromRecycleBinResponse.ProtoReflect.Descriptor instead.
func (*TestSetRecoverFromRecycleBinResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{12}
}

type TestSetRecycleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSetID uint64 `protobuf:"varint,1,opt,name=testSetID,json=-,proto3" json:"testSetID,omitempty"`
	IsRoot    bool   `protobuf:"varint,2,opt,name=isRoot,json=-,proto3" json:"isRoot,omitempty"`
}

func (x *TestSetRecycleRequest) Reset() {
	*x = TestSetRecycleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetRecycleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetRecycleRequest) ProtoMessage() {}

func (x *TestSetRecycleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetRecycleRequest.ProtoReflect.Descriptor instead.
func (*TestSetRecycleRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{13}
}

func (x *TestSetRecycleRequest) GetTestSetID() uint64 {
	if x != nil {
		return x.TestSetID
	}
	return 0
}

func (x *TestSetRecycleRequest) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

type TestSetRecycleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestSetRecycleResponse) Reset() {
	*x = TestSetRecycleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetRecycleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetRecycleResponse) ProtoMessage() {}

func (x *TestSetRecycleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetRecycleResponse.ProtoReflect.Descriptor instead.
func (*TestSetRecycleResponse) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{14}
}

type TestSetUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSetID      uint64  `protobuf:"varint,1,opt,name=testSetID,json=testsetID,proto3" json:"testSetID,omitempty"`
	Name           *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	MoveToParentID *uint64 `protobuf:"varint,3,opt,name=moveToParentID,proto3,oneof" json:"moveToParentID,omitempty"`
}

func (x *TestSetUpdateRequest) Reset() {
	*x = TestSetUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testplatform_testset_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSetUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSetUpdateRequest) ProtoMessage() {}

func (x *TestSetUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testplatform_testset_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSetUpdateRequest.ProtoReflect.Descriptor instead.
func (*TestSetUpdateRequest) Descriptor() ([]byte, []int) {
	return file_testplatform_testset_proto_rawDescGZIP(), []int{15}
}

func (x *TestSetUpdateRequest) GetTestSetID() uint64 {
	if x != nil {
		return x.TestSetID
	}
	return 0
}

func (x *TestSetUpdateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TestSetUpdateRequest) GetMoveToParentID() uint64 {
	if x != nil && x.MoveToParentID != nil {
		return *x.MoveToParentID
	}
	return 0
}

var File_testplatform_testset_proto protoreflect.FileDescriptor

var file_testplatform_testset_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44,
	0x22, 0xf7, 0x01, 0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x21, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x01, 0x2d, 0x22, 0x24, 0x0a, 0x22, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x12, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x70, 0x79,
	0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x09, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01,
	0x2d, 0x22, 0x29, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x01, 0x0a,
	0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x51, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x12, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd5, 0x01, 0x0a, 0x12,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49,
	0x44, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x53, 0x75, 0x62, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x53, 0x75, 0x62,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x22, 0x41, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x23, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x01, 0x2d, 0x12, 0x33, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54,
	0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44,
	0x22, 0x26, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x2d, 0x12, 0x11, 0x0a, 0x06, 0x69, 0x73, 0x52, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x2d, 0x22, 0x18, 0x0a, 0x16, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0e,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x32, 0x96, 0x10,
	0x0a, 0x14, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x12, 0xd5, 0x02, 0x0a, 0x16, 0x43, 0x4c, 0x45, 0x41, 0x4e,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x42, 0x49,
	0x4e, 0x12, 0x3e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d,
	0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d,
	0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xb9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x2a, 0x38, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x2d, 0x66, 0x72, 0x6f, 0x6d, 0x2d, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x2d, 0x62, 0x69, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x74, 0x0a, 0x38, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c,
	0x65, 0x61, 0x6e, 0x2d, 0x66, 0x72, 0x6f, 0x6d, 0x2d, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x2d, 0x62, 0x69, 0x6e, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x32, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe4, 0xbb, 0x8e, 0xe5, 0x9b, 0x9e, 0xe6, 0x94, 0xb6, 0xe7, 0xab,
	0x99, 0xe5, 0xbd, 0xbb, 0xe5, 0xba, 0x95, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0xb5, 0x8b,
	0xe8, 0xaf, 0x95, 0xe9, 0x9b, 0x86, 0x28, 0xe9, 0x80, 0x92, 0xe5, 0xbd, 0x92, 0x29, 0x12, 0x91,
	0x02, 0x0a, 0x04, 0x43, 0x4f, 0x50, 0x59, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x70,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x70, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0xfa, 0x81, 0xf9, 0x1b, 0x72,
	0x0a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x42,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe9,
	0x9b, 0x86, 0xe5, 0xa4, 0x8d, 0xe5, 0x88, 0xb6, 0xef, 0xbc, 0x8c, 0xe9, 0x80, 0x92, 0xe5, 0xbd,
	0x92, 0xe5, 0xa4, 0x8d, 0xe5, 0x88, 0xb6, 0xe5, 0xad, 0x90, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95,
	0xe9, 0x9b, 0x86, 0xe5, 0x92, 0x8c, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0x94, 0xa8, 0xe4,
	0xbe, 0x8b, 0x12, 0xba, 0x01, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x31, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2f,
	0x0a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe9, 0x9b, 0x86, 0x12,
	0xc3, 0x01, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x3b, 0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe9, 0x9b, 0x86, 0xe8,
	0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xb4, 0x01, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x2f,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2f, 0x0a, 0x0d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0xb5, 0x8b,
	0xe8, 0xaf, 0x95, 0xe9, 0x9b, 0x86, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xd9, 0x02, 0x0a,
	0x18, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x52, 0x45,
	0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x12, 0x40, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2d, 0x66, 0x72, 0x6f, 0x6d, 0x2d, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2d,
	0x62, 0x69, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x70, 0x0a, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x6f, 0x6d, 0x2d, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x2d, 0x62, 0x69, 0x6e, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x2c, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe4, 0xbb, 0x8e, 0xe5, 0x9b, 0x9e, 0xe6, 0x94, 0xb6, 0xe7, 0xab,
	0x99, 0xe6, 0x81, 0xa2, 0xe5, 0xa4, 0x8d, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe9, 0x9b, 0x86,
	0x28, 0xe9, 0x80, 0x92, 0xe5, 0xbd, 0x92, 0x29, 0x12, 0xad, 0x02, 0x0a, 0x07, 0x52, 0x45, 0x43,
	0x59, 0x43, 0x4c, 0x45, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x81, 0x01, 0x0a, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x4e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe5, 0x9b, 0x9e, 0xe6, 0x94, 0xb6, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe9,
	0x9b, 0x86, 0xe8, 0x87, 0xb3, 0xe5, 0x9b, 0x9e, 0xe6, 0x94, 0xb6, 0xe7, 0xab, 0x99, 0xef, 0xbc,
	0x8c, 0xe9, 0x80, 0x92, 0xe5, 0xbd, 0x92, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe5, 0xad, 0x90,
	0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe9, 0x9b, 0x86, 0xe5, 0x92, 0x8c, 0xe6, 0xb5, 0x8b, 0xe8,
	0xaf, 0x95, 0xe7, 0x94, 0xa8, 0xe4, 0xbe, 0x8b, 0x12, 0xb6, 0x01, 0x0a, 0x06, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x61,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44,
	0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x3b, 0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44,
	0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe9, 0x9b,
	0x86, 0x1a, 0x13, 0xc2, 0xc4, 0xcb, 0x1c, 0x0e, 0x22, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testplatform_testset_proto_rawDescOnce sync.Once
	file_testplatform_testset_proto_rawDescData = file_testplatform_testset_proto_rawDesc
)

func file_testplatform_testset_proto_rawDescGZIP() []byte {
	file_testplatform_testset_proto_rawDescOnce.Do(func() {
		file_testplatform_testset_proto_rawDescData = protoimpl.X.CompressGZIP(file_testplatform_testset_proto_rawDescData)
	})
	return file_testplatform_testset_proto_rawDescData
}

var file_testplatform_testset_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_testplatform_testset_proto_goTypes = []interface{}{
	(*GET_Request)(nil),                          // 0: erda.openapiv1.testplatform.GET_Request
	(*TestSet)(nil),                              // 1: erda.openapiv1.testplatform.TestSet
	(*TestSetCleanFromRecycleBinRequest)(nil),    // 2: erda.openapiv1.testplatform.TestSetCleanFromRecycleBinRequest
	(*TestSetCleanFromRecycleBinResponse)(nil),   // 3: erda.openapiv1.testplatform.TestSetCleanFromRecycleBinResponse
	(*TestSetCopyRequest)(nil),                   // 4: erda.openapiv1.testplatform.TestSetCopyRequest
	(*TestSetCopyResponse)(nil),                  // 5: erda.openapiv1.testplatform.TestSetCopyResponse
	(*TestSetCreateRequest)(nil),                 // 6: erda.openapiv1.testplatform.TestSetCreateRequest
	(*TestSetCreateResponse)(nil),                // 7: erda.openapiv1.testplatform.TestSetCreateResponse
	(*TestSetGetResponse)(nil),                   // 8: erda.openapiv1.testplatform.TestSetGetResponse
	(*TestSetListRequest)(nil),                   // 9: erda.openapiv1.testplatform.TestSetListRequest
	(*TestSetListResponse)(nil),                  // 10: erda.openapiv1.testplatform.TestSetListResponse
	(*TestSetRecoverFromRecycleBinRequest)(nil),  // 11: erda.openapiv1.testplatform.TestSetRecoverFromRecycleBinRequest
	(*TestSetRecoverFromRecycleBinResponse)(nil), // 12: erda.openapiv1.testplatform.TestSetRecoverFromRecycleBinResponse
	(*TestSetRecycleRequest)(nil),                // 13: erda.openapiv1.testplatform.TestSetRecycleRequest
	(*TestSetRecycleResponse)(nil),               // 14: erda.openapiv1.testplatform.TestSetRecycleResponse
	(*TestSetUpdateRequest)(nil),                 // 15: erda.openapiv1.testplatform.TestSetUpdateRequest
	(*structpb.Value)(nil),                       // 16: google.protobuf.Value
	(*emptypb.Empty)(nil),                        // 17: google.protobuf.Empty
}
var file_testplatform_testset_proto_depIdxs = []int32{
	16, // 0: erda.openapiv1.testplatform.TestSetCreateResponse.data:type_name -> google.protobuf.Value
	16, // 1: erda.openapiv1.testplatform.TestSetGetResponse.data:type_name -> google.protobuf.Value
	16, // 2: erda.openapiv1.testplatform.TestSetListResponse.data:type_name -> google.protobuf.Value
	2,  // 3: erda.openapiv1.testplatform.testplatform_testset.CLEAN_FROM_RECYCLE_BIN:input_type -> erda.openapiv1.testplatform.TestSetCleanFromRecycleBinRequest
	4,  // 4: erda.openapiv1.testplatform.testplatform_testset.COPY:input_type -> erda.openapiv1.testplatform.TestSetCopyRequest
	6,  // 5: erda.openapiv1.testplatform.testplatform_testset.CREATE:input_type -> erda.openapiv1.testplatform.TestSetCreateRequest
	0,  // 6: erda.openapiv1.testplatform.testplatform_testset.GET:input_type -> erda.openapiv1.testplatform.GET_Request
	9,  // 7: erda.openapiv1.testplatform.testplatform_testset.LIST:input_type -> erda.openapiv1.testplatform.TestSetListRequest
	11, // 8: erda.openapiv1.testplatform.testplatform_testset.RECOVER_FROM_RECYCLE_BIN:input_type -> erda.openapiv1.testplatform.TestSetRecoverFromRecycleBinRequest
	13, // 9: erda.openapiv1.testplatform.testplatform_testset.RECYCLE:input_type -> erda.openapiv1.testplatform.TestSetRecycleRequest
	15, // 10: erda.openapiv1.testplatform.testplatform_testset.UPDATE:input_type -> erda.openapiv1.testplatform.TestSetUpdateRequest
	3,  // 11: erda.openapiv1.testplatform.testplatform_testset.CLEAN_FROM_RECYCLE_BIN:output_type -> erda.openapiv1.testplatform.TestSetCleanFromRecycleBinResponse
	5,  // 12: erda.openapiv1.testplatform.testplatform_testset.COPY:output_type -> erda.openapiv1.testplatform.TestSetCopyResponse
	7,  // 13: erda.openapiv1.testplatform.testplatform_testset.CREATE:output_type -> erda.openapiv1.testplatform.TestSetCreateResponse
	8,  // 14: erda.openapiv1.testplatform.testplatform_testset.GET:output_type -> erda.openapiv1.testplatform.TestSetGetResponse
	10, // 15: erda.openapiv1.testplatform.testplatform_testset.LIST:output_type -> erda.openapiv1.testplatform.TestSetListResponse
	12, // 16: erda.openapiv1.testplatform.testplatform_testset.RECOVER_FROM_RECYCLE_BIN:output_type -> erda.openapiv1.testplatform.TestSetRecoverFromRecycleBinResponse
	14, // 17: erda.openapiv1.testplatform.testplatform_testset.RECYCLE:output_type -> erda.openapiv1.testplatform.TestSetRecycleResponse
	17, // 18: erda.openapiv1.testplatform.testplatform_testset.UPDATE:output_type -> google.protobuf.Empty
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_testplatform_testset_proto_init() }
func file_testplatform_testset_proto_init() {
	if File_testplatform_testset_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testplatform_testset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetCleanFromRecycleBinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetCleanFromRecycleBinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetCopyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetCopyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetRecoverFromRecycleBinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetRecoverFromRecycleBinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetRecycleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetRecycleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testplatform_testset_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSetUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_testplatform_testset_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_testplatform_testset_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_testplatform_testset_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_testplatform_testset_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_testplatform_testset_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_testplatform_testset_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testplatform_testset_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_testplatform_testset_proto_goTypes,
		DependencyIndexes: file_testplatform_testset_proto_depIdxs,
		MessageInfos:      file_testplatform_testset_proto_msgTypes,
	}.Build()
	File_testplatform_testset_proto = out.File
	file_testplatform_testset_proto_rawDesc = nil
	file_testplatform_testset_proto_goTypes = nil
	file_testplatform_testset_proto_depIdxs = nil
}
