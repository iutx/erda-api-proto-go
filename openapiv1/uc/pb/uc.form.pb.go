// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: uc.proto

package pb

import (
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*PwdSecurityConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PwdSecurityConfigGetResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PwdSecurityConfigUpdateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PwdSecurityConfigUpdateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UC_PWD_SECURITY_CONFIG_GET_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UC_USER_LIST_LOGIN_METHOD_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserBatchFreezeRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserBatchFreezeResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserBatchUnFreezeRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserBatchUnFreezeResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserBatchUpdateLoginMethodRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserBatchUpdateLoginMethodResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserCreateItem)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserCreateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserFreezeRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserFreezeResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserListLoginMethodData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserListLoginMethodResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserPagingRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserPagingResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserUnfreezeRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserUnfreezeResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserUpdateInfoRequset)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserUpdateInfoResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserUpdateLoginMethodRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UserUpdateLoginMethodResponse)(nil)

// PwdSecurityConfig implement urlenc.URLValuesUnmarshaler.
func (m *PwdSecurityConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "captchaChallengeNumber":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CaptchaChallengeNumber = val
			case "continuousPwdErrorNumber":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ContinuousPwdErrorNumber = val
			case "maxPwdErrorNumber":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MaxPwdErrorNumber = val
			case "resetPassWordPeriod":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ResetPassWordPeriod = val
			}
		}
	}
	return nil
}

// PwdSecurityConfigGetResponse implement urlenc.URLValuesUnmarshaler.
func (m *PwdSecurityConfigGetResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// PwdSecurityConfigUpdateRequest implement urlenc.URLValuesUnmarshaler.
func (m *PwdSecurityConfigUpdateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pwdSecurityConfig":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.PwdSecurityConfig = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.PwdSecurityConfig = val
					} else {
						m.PwdSecurityConfig = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// PwdSecurityConfigUpdateResponse implement urlenc.URLValuesUnmarshaler.
func (m *PwdSecurityConfigUpdateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UC_PWD_SECURITY_CONFIG_GET_Request implement urlenc.URLValuesUnmarshaler.
func (m *UC_PWD_SECURITY_CONFIG_GET_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UC_USER_LIST_LOGIN_METHOD_Request implement urlenc.URLValuesUnmarshaler.
func (m *UC_USER_LIST_LOGIN_METHOD_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UserBatchFreezeRequest implement urlenc.URLValuesUnmarshaler.
func (m *UserBatchFreezeRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "userIDs":
				m.UserIDs = vals
			}
		}
	}
	return nil
}

// UserBatchFreezeResponse implement urlenc.URLValuesUnmarshaler.
func (m *UserBatchFreezeResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UserBatchUnFreezeRequest implement urlenc.URLValuesUnmarshaler.
func (m *UserBatchUnFreezeRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "userIDs":
				m.UserIDs = vals
			}
		}
	}
	return nil
}

// UserBatchUnFreezeResponse implement urlenc.URLValuesUnmarshaler.
func (m *UserBatchUnFreezeResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UserBatchUpdateLoginMethodRequest implement urlenc.URLValuesUnmarshaler.
func (m *UserBatchUpdateLoginMethodRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "userIDs":
				m.UserIDs = vals
			case "source":
				m.Source = vals[0]
			}
		}
	}
	return nil
}

// UserBatchUpdateLoginMethodResponse implement urlenc.URLValuesUnmarshaler.
func (m *UserBatchUpdateLoginMethodResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UserCreateItem implement urlenc.URLValuesUnmarshaler.
func (m *UserCreateItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "nick":
				m.Nick = vals[0]
			case "phone":
				m.Phone = vals[0]
			case "email":
				m.Email = vals[0]
			case "password":
				m.Password = vals[0]
			}
		}
	}
	return nil
}

// UserCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *UserCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UserCreateResponse implement urlenc.URLValuesUnmarshaler.
func (m *UserCreateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UserFreezeRequest implement urlenc.URLValuesUnmarshaler.
func (m *UserFreezeRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "userID":
				m.UserID = vals[0]
			}
		}
	}
	return nil
}

// UserFreezeResponse implement urlenc.URLValuesUnmarshaler.
func (m *UserFreezeResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UserListLoginMethodData implement urlenc.URLValuesUnmarshaler.
func (m *UserListLoginMethodData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "displayName":
				m.DisplayName = vals[0]
			case "value":
				m.Value = vals[0]
			}
		}
	}
	return nil
}

// UserListLoginMethodResponse implement urlenc.URLValuesUnmarshaler.
func (m *UserListLoginMethodResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UserPagingRequest implement urlenc.URLValuesUnmarshaler.
func (m *UserPagingRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "nick":
				m.Nick = vals[0]
			case "phone":
				m.Phone = vals[0]
			case "email":
				m.Email = vals[0]
			case "locked":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Locked = &val
			case "source":
				m.Source = vals[0]
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			}
		}
	}
	return nil
}

// UserPagingResponse implement urlenc.URLValuesUnmarshaler.
func (m *UserPagingResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// UserUnfreezeRequest implement urlenc.URLValuesUnmarshaler.
func (m *UserUnfreezeRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "userID":
				m.UserID = vals[0]
			}
		}
	}
	return nil
}

// UserUnfreezeResponse implement urlenc.URLValuesUnmarshaler.
func (m *UserUnfreezeResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UserUpdateInfoRequset implement urlenc.URLValuesUnmarshaler.
func (m *UserUpdateInfoRequset) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "userID":
				m.UserID = vals[0]
			case "name":
				m.Name = vals[0]
			case "nick":
				m.Nick = vals[0]
			case "mobile":
				m.Mobile = vals[0]
			case "email":
				m.Email = vals[0]
			}
		}
	}
	return nil
}

// UserUpdateInfoResponse implement urlenc.URLValuesUnmarshaler.
func (m *UserUpdateInfoResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// UserUpdateLoginMethodRequest implement urlenc.URLValuesUnmarshaler.
func (m *UserUpdateLoginMethodRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "source":
				m.Source = vals[0]
			case "userID":
				m.UserID = vals[0]
			}
		}
	}
	return nil
}

// UserUpdateLoginMethodResponse implement urlenc.URLValuesUnmarshaler.
func (m *UserUpdateLoginMethodResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
