// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: uc.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PwdSecurityConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PwdSecurityConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PwdSecurityConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PwdSecurityConfigMultiError, or nil if none found.
func (m *PwdSecurityConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PwdSecurityConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaptchaChallengeNumber

	// no validation rules for ContinuousPwdErrorNumber

	// no validation rules for MaxPwdErrorNumber

	// no validation rules for ResetPassWordPeriod

	if len(errors) > 0 {
		return PwdSecurityConfigMultiError(errors)
	}

	return nil
}

// PwdSecurityConfigMultiError is an error wrapping multiple validation errors
// returned by PwdSecurityConfig.ValidateAll() if the designated constraints
// aren't met.
type PwdSecurityConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PwdSecurityConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PwdSecurityConfigMultiError) AllErrors() []error { return m }

// PwdSecurityConfigValidationError is the validation error returned by
// PwdSecurityConfig.Validate if the designated constraints aren't met.
type PwdSecurityConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PwdSecurityConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PwdSecurityConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PwdSecurityConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PwdSecurityConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PwdSecurityConfigValidationError) ErrorName() string {
	return "PwdSecurityConfigValidationError"
}

// Error satisfies the builtin error interface
func (e PwdSecurityConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPwdSecurityConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PwdSecurityConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PwdSecurityConfigValidationError{}

// Validate checks the field values on PwdSecurityConfigGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PwdSecurityConfigGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PwdSecurityConfigGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PwdSecurityConfigGetResponseMultiError, or nil if none found.
func (m *PwdSecurityConfigGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PwdSecurityConfigGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PwdSecurityConfigGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PwdSecurityConfigGetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PwdSecurityConfigGetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PwdSecurityConfigGetResponseMultiError(errors)
	}

	return nil
}

// PwdSecurityConfigGetResponseMultiError is an error wrapping multiple
// validation errors returned by PwdSecurityConfigGetResponse.ValidateAll() if
// the designated constraints aren't met.
type PwdSecurityConfigGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PwdSecurityConfigGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PwdSecurityConfigGetResponseMultiError) AllErrors() []error { return m }

// PwdSecurityConfigGetResponseValidationError is the validation error returned
// by PwdSecurityConfigGetResponse.Validate if the designated constraints
// aren't met.
type PwdSecurityConfigGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PwdSecurityConfigGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PwdSecurityConfigGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PwdSecurityConfigGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PwdSecurityConfigGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PwdSecurityConfigGetResponseValidationError) ErrorName() string {
	return "PwdSecurityConfigGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PwdSecurityConfigGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPwdSecurityConfigGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PwdSecurityConfigGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PwdSecurityConfigGetResponseValidationError{}

// Validate checks the field values on PwdSecurityConfigUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PwdSecurityConfigUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PwdSecurityConfigUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PwdSecurityConfigUpdateRequestMultiError, or nil if none found.
func (m *PwdSecurityConfigUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PwdSecurityConfigUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPwdSecurityConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PwdSecurityConfigUpdateRequestValidationError{
					field:  "PwdSecurityConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PwdSecurityConfigUpdateRequestValidationError{
					field:  "PwdSecurityConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPwdSecurityConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PwdSecurityConfigUpdateRequestValidationError{
				field:  "PwdSecurityConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PwdSecurityConfigUpdateRequestMultiError(errors)
	}

	return nil
}

// PwdSecurityConfigUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by PwdSecurityConfigUpdateRequest.ValidateAll()
// if the designated constraints aren't met.
type PwdSecurityConfigUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PwdSecurityConfigUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PwdSecurityConfigUpdateRequestMultiError) AllErrors() []error { return m }

// PwdSecurityConfigUpdateRequestValidationError is the validation error
// returned by PwdSecurityConfigUpdateRequest.Validate if the designated
// constraints aren't met.
type PwdSecurityConfigUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PwdSecurityConfigUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PwdSecurityConfigUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PwdSecurityConfigUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PwdSecurityConfigUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PwdSecurityConfigUpdateRequestValidationError) ErrorName() string {
	return "PwdSecurityConfigUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PwdSecurityConfigUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPwdSecurityConfigUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PwdSecurityConfigUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PwdSecurityConfigUpdateRequestValidationError{}

// Validate checks the field values on PwdSecurityConfigUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PwdSecurityConfigUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PwdSecurityConfigUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PwdSecurityConfigUpdateResponseMultiError, or nil if none found.
func (m *PwdSecurityConfigUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PwdSecurityConfigUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PwdSecurityConfigUpdateResponseMultiError(errors)
	}

	return nil
}

// PwdSecurityConfigUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by PwdSecurityConfigUpdateResponse.ValidateAll()
// if the designated constraints aren't met.
type PwdSecurityConfigUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PwdSecurityConfigUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PwdSecurityConfigUpdateResponseMultiError) AllErrors() []error { return m }

// PwdSecurityConfigUpdateResponseValidationError is the validation error
// returned by PwdSecurityConfigUpdateResponse.Validate if the designated
// constraints aren't met.
type PwdSecurityConfigUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PwdSecurityConfigUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PwdSecurityConfigUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PwdSecurityConfigUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PwdSecurityConfigUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PwdSecurityConfigUpdateResponseValidationError) ErrorName() string {
	return "PwdSecurityConfigUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PwdSecurityConfigUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPwdSecurityConfigUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PwdSecurityConfigUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PwdSecurityConfigUpdateResponseValidationError{}

// Validate checks the field values on UC_PWD_SECURITY_CONFIG_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UC_PWD_SECURITY_CONFIG_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UC_PWD_SECURITY_CONFIG_GET_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UC_PWD_SECURITY_CONFIG_GET_RequestMultiError, or nil if none found.
func (m *UC_PWD_SECURITY_CONFIG_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UC_PWD_SECURITY_CONFIG_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UC_PWD_SECURITY_CONFIG_GET_RequestMultiError(errors)
	}

	return nil
}

// UC_PWD_SECURITY_CONFIG_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by
// UC_PWD_SECURITY_CONFIG_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type UC_PWD_SECURITY_CONFIG_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UC_PWD_SECURITY_CONFIG_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UC_PWD_SECURITY_CONFIG_GET_RequestMultiError) AllErrors() []error { return m }

// UC_PWD_SECURITY_CONFIG_GET_RequestValidationError is the validation error
// returned by UC_PWD_SECURITY_CONFIG_GET_Request.Validate if the designated
// constraints aren't met.
type UC_PWD_SECURITY_CONFIG_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UC_PWD_SECURITY_CONFIG_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UC_PWD_SECURITY_CONFIG_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UC_PWD_SECURITY_CONFIG_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UC_PWD_SECURITY_CONFIG_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UC_PWD_SECURITY_CONFIG_GET_RequestValidationError) ErrorName() string {
	return "UC_PWD_SECURITY_CONFIG_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UC_PWD_SECURITY_CONFIG_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUC_PWD_SECURITY_CONFIG_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UC_PWD_SECURITY_CONFIG_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UC_PWD_SECURITY_CONFIG_GET_RequestValidationError{}

// Validate checks the field values on UC_USER_LIST_LOGIN_METHOD_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UC_USER_LIST_LOGIN_METHOD_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UC_USER_LIST_LOGIN_METHOD_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UC_USER_LIST_LOGIN_METHOD_RequestMultiError, or nil if none found.
func (m *UC_USER_LIST_LOGIN_METHOD_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UC_USER_LIST_LOGIN_METHOD_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UC_USER_LIST_LOGIN_METHOD_RequestMultiError(errors)
	}

	return nil
}

// UC_USER_LIST_LOGIN_METHOD_RequestMultiError is an error wrapping multiple
// validation errors returned by
// UC_USER_LIST_LOGIN_METHOD_Request.ValidateAll() if the designated
// constraints aren't met.
type UC_USER_LIST_LOGIN_METHOD_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UC_USER_LIST_LOGIN_METHOD_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UC_USER_LIST_LOGIN_METHOD_RequestMultiError) AllErrors() []error { return m }

// UC_USER_LIST_LOGIN_METHOD_RequestValidationError is the validation error
// returned by UC_USER_LIST_LOGIN_METHOD_Request.Validate if the designated
// constraints aren't met.
type UC_USER_LIST_LOGIN_METHOD_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UC_USER_LIST_LOGIN_METHOD_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UC_USER_LIST_LOGIN_METHOD_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UC_USER_LIST_LOGIN_METHOD_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UC_USER_LIST_LOGIN_METHOD_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UC_USER_LIST_LOGIN_METHOD_RequestValidationError) ErrorName() string {
	return "UC_USER_LIST_LOGIN_METHOD_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UC_USER_LIST_LOGIN_METHOD_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUC_USER_LIST_LOGIN_METHOD_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UC_USER_LIST_LOGIN_METHOD_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UC_USER_LIST_LOGIN_METHOD_RequestValidationError{}

// Validate checks the field values on UserBatchFreezeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserBatchFreezeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserBatchFreezeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserBatchFreezeRequestMultiError, or nil if none found.
func (m *UserBatchFreezeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserBatchFreezeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserBatchFreezeRequestMultiError(errors)
	}

	return nil
}

// UserBatchFreezeRequestMultiError is an error wrapping multiple validation
// errors returned by UserBatchFreezeRequest.ValidateAll() if the designated
// constraints aren't met.
type UserBatchFreezeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserBatchFreezeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserBatchFreezeRequestMultiError) AllErrors() []error { return m }

// UserBatchFreezeRequestValidationError is the validation error returned by
// UserBatchFreezeRequest.Validate if the designated constraints aren't met.
type UserBatchFreezeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserBatchFreezeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserBatchFreezeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserBatchFreezeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserBatchFreezeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserBatchFreezeRequestValidationError) ErrorName() string {
	return "UserBatchFreezeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserBatchFreezeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserBatchFreezeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserBatchFreezeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserBatchFreezeRequestValidationError{}

// Validate checks the field values on UserBatchFreezeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserBatchFreezeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserBatchFreezeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserBatchFreezeResponseMultiError, or nil if none found.
func (m *UserBatchFreezeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserBatchFreezeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserBatchFreezeResponseMultiError(errors)
	}

	return nil
}

// UserBatchFreezeResponseMultiError is an error wrapping multiple validation
// errors returned by UserBatchFreezeResponse.ValidateAll() if the designated
// constraints aren't met.
type UserBatchFreezeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserBatchFreezeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserBatchFreezeResponseMultiError) AllErrors() []error { return m }

// UserBatchFreezeResponseValidationError is the validation error returned by
// UserBatchFreezeResponse.Validate if the designated constraints aren't met.
type UserBatchFreezeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserBatchFreezeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserBatchFreezeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserBatchFreezeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserBatchFreezeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserBatchFreezeResponseValidationError) ErrorName() string {
	return "UserBatchFreezeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserBatchFreezeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserBatchFreezeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserBatchFreezeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserBatchFreezeResponseValidationError{}

// Validate checks the field values on UserBatchUnFreezeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserBatchUnFreezeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserBatchUnFreezeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserBatchUnFreezeRequestMultiError, or nil if none found.
func (m *UserBatchUnFreezeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserBatchUnFreezeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserBatchUnFreezeRequestMultiError(errors)
	}

	return nil
}

// UserBatchUnFreezeRequestMultiError is an error wrapping multiple validation
// errors returned by UserBatchUnFreezeRequest.ValidateAll() if the designated
// constraints aren't met.
type UserBatchUnFreezeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserBatchUnFreezeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserBatchUnFreezeRequestMultiError) AllErrors() []error { return m }

// UserBatchUnFreezeRequestValidationError is the validation error returned by
// UserBatchUnFreezeRequest.Validate if the designated constraints aren't met.
type UserBatchUnFreezeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserBatchUnFreezeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserBatchUnFreezeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserBatchUnFreezeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserBatchUnFreezeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserBatchUnFreezeRequestValidationError) ErrorName() string {
	return "UserBatchUnFreezeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserBatchUnFreezeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserBatchUnFreezeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserBatchUnFreezeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserBatchUnFreezeRequestValidationError{}

// Validate checks the field values on UserBatchUnFreezeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserBatchUnFreezeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserBatchUnFreezeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserBatchUnFreezeResponseMultiError, or nil if none found.
func (m *UserBatchUnFreezeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserBatchUnFreezeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserBatchUnFreezeResponseMultiError(errors)
	}

	return nil
}

// UserBatchUnFreezeResponseMultiError is an error wrapping multiple validation
// errors returned by UserBatchUnFreezeResponse.ValidateAll() if the
// designated constraints aren't met.
type UserBatchUnFreezeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserBatchUnFreezeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserBatchUnFreezeResponseMultiError) AllErrors() []error { return m }

// UserBatchUnFreezeResponseValidationError is the validation error returned by
// UserBatchUnFreezeResponse.Validate if the designated constraints aren't met.
type UserBatchUnFreezeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserBatchUnFreezeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserBatchUnFreezeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserBatchUnFreezeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserBatchUnFreezeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserBatchUnFreezeResponseValidationError) ErrorName() string {
	return "UserBatchUnFreezeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserBatchUnFreezeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserBatchUnFreezeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserBatchUnFreezeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserBatchUnFreezeResponseValidationError{}

// Validate checks the field values on UserBatchUpdateLoginMethodRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UserBatchUpdateLoginMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserBatchUpdateLoginMethodRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UserBatchUpdateLoginMethodRequestMultiError, or nil if none found.
func (m *UserBatchUpdateLoginMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserBatchUpdateLoginMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	if len(errors) > 0 {
		return UserBatchUpdateLoginMethodRequestMultiError(errors)
	}

	return nil
}

// UserBatchUpdateLoginMethodRequestMultiError is an error wrapping multiple
// validation errors returned by
// UserBatchUpdateLoginMethodRequest.ValidateAll() if the designated
// constraints aren't met.
type UserBatchUpdateLoginMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserBatchUpdateLoginMethodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserBatchUpdateLoginMethodRequestMultiError) AllErrors() []error { return m }

// UserBatchUpdateLoginMethodRequestValidationError is the validation error
// returned by UserBatchUpdateLoginMethodRequest.Validate if the designated
// constraints aren't met.
type UserBatchUpdateLoginMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserBatchUpdateLoginMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserBatchUpdateLoginMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserBatchUpdateLoginMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserBatchUpdateLoginMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserBatchUpdateLoginMethodRequestValidationError) ErrorName() string {
	return "UserBatchUpdateLoginMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserBatchUpdateLoginMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserBatchUpdateLoginMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserBatchUpdateLoginMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserBatchUpdateLoginMethodRequestValidationError{}

// Validate checks the field values on UserBatchUpdateLoginMethodResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UserBatchUpdateLoginMethodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserBatchUpdateLoginMethodResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UserBatchUpdateLoginMethodResponseMultiError, or nil if none found.
func (m *UserBatchUpdateLoginMethodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserBatchUpdateLoginMethodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserBatchUpdateLoginMethodResponseMultiError(errors)
	}

	return nil
}

// UserBatchUpdateLoginMethodResponseMultiError is an error wrapping multiple
// validation errors returned by
// UserBatchUpdateLoginMethodResponse.ValidateAll() if the designated
// constraints aren't met.
type UserBatchUpdateLoginMethodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserBatchUpdateLoginMethodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserBatchUpdateLoginMethodResponseMultiError) AllErrors() []error { return m }

// UserBatchUpdateLoginMethodResponseValidationError is the validation error
// returned by UserBatchUpdateLoginMethodResponse.Validate if the designated
// constraints aren't met.
type UserBatchUpdateLoginMethodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserBatchUpdateLoginMethodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserBatchUpdateLoginMethodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserBatchUpdateLoginMethodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserBatchUpdateLoginMethodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserBatchUpdateLoginMethodResponseValidationError) ErrorName() string {
	return "UserBatchUpdateLoginMethodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserBatchUpdateLoginMethodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserBatchUpdateLoginMethodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserBatchUpdateLoginMethodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserBatchUpdateLoginMethodResponseValidationError{}

// Validate checks the field values on UserCreateItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserCreateItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreateItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserCreateItemMultiError,
// or nil if none found.
func (m *UserCreateItem) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreateItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Nick

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return UserCreateItemMultiError(errors)
	}

	return nil
}

// UserCreateItemMultiError is an error wrapping multiple validation errors
// returned by UserCreateItem.ValidateAll() if the designated constraints
// aren't met.
type UserCreateItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateItemMultiError) AllErrors() []error { return m }

// UserCreateItemValidationError is the validation error returned by
// UserCreateItem.Validate if the designated constraints aren't met.
type UserCreateItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateItemValidationError) ErrorName() string { return "UserCreateItemValidationError" }

// Error satisfies the builtin error interface
func (e UserCreateItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateItemValidationError{}

// Validate checks the field values on UserCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCreateRequestMultiError, or nil if none found.
func (m *UserCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserCreateRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserCreateRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserCreateRequestValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserCreateRequestMultiError(errors)
	}

	return nil
}

// UserCreateRequestMultiError is an error wrapping multiple validation errors
// returned by UserCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type UserCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateRequestMultiError) AllErrors() []error { return m }

// UserCreateRequestValidationError is the validation error returned by
// UserCreateRequest.Validate if the designated constraints aren't met.
type UserCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateRequestValidationError) ErrorName() string {
	return "UserCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateRequestValidationError{}

// Validate checks the field values on UserCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCreateResponseMultiError, or nil if none found.
func (m *UserCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserCreateResponseMultiError(errors)
	}

	return nil
}

// UserCreateResponseMultiError is an error wrapping multiple validation errors
// returned by UserCreateResponse.ValidateAll() if the designated constraints
// aren't met.
type UserCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateResponseMultiError) AllErrors() []error { return m }

// UserCreateResponseValidationError is the validation error returned by
// UserCreateResponse.Validate if the designated constraints aren't met.
type UserCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateResponseValidationError) ErrorName() string {
	return "UserCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateResponseValidationError{}

// Validate checks the field values on UserFreezeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserFreezeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFreezeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFreezeRequestMultiError, or nil if none found.
func (m *UserFreezeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFreezeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return UserFreezeRequestMultiError(errors)
	}

	return nil
}

// UserFreezeRequestMultiError is an error wrapping multiple validation errors
// returned by UserFreezeRequest.ValidateAll() if the designated constraints
// aren't met.
type UserFreezeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFreezeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFreezeRequestMultiError) AllErrors() []error { return m }

// UserFreezeRequestValidationError is the validation error returned by
// UserFreezeRequest.Validate if the designated constraints aren't met.
type UserFreezeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFreezeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFreezeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFreezeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFreezeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFreezeRequestValidationError) ErrorName() string {
	return "UserFreezeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserFreezeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFreezeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFreezeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFreezeRequestValidationError{}

// Validate checks the field values on UserFreezeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserFreezeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFreezeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserFreezeResponseMultiError, or nil if none found.
func (m *UserFreezeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFreezeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserFreezeResponseMultiError(errors)
	}

	return nil
}

// UserFreezeResponseMultiError is an error wrapping multiple validation errors
// returned by UserFreezeResponse.ValidateAll() if the designated constraints
// aren't met.
type UserFreezeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFreezeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFreezeResponseMultiError) AllErrors() []error { return m }

// UserFreezeResponseValidationError is the validation error returned by
// UserFreezeResponse.Validate if the designated constraints aren't met.
type UserFreezeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFreezeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFreezeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFreezeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFreezeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFreezeResponseValidationError) ErrorName() string {
	return "UserFreezeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserFreezeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFreezeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFreezeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFreezeResponseValidationError{}

// Validate checks the field values on UserListLoginMethodData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserListLoginMethodData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListLoginMethodData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserListLoginMethodDataMultiError, or nil if none found.
func (m *UserListLoginMethodData) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListLoginMethodData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for Value

	if len(errors) > 0 {
		return UserListLoginMethodDataMultiError(errors)
	}

	return nil
}

// UserListLoginMethodDataMultiError is an error wrapping multiple validation
// errors returned by UserListLoginMethodData.ValidateAll() if the designated
// constraints aren't met.
type UserListLoginMethodDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListLoginMethodDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListLoginMethodDataMultiError) AllErrors() []error { return m }

// UserListLoginMethodDataValidationError is the validation error returned by
// UserListLoginMethodData.Validate if the designated constraints aren't met.
type UserListLoginMethodDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListLoginMethodDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListLoginMethodDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListLoginMethodDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListLoginMethodDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListLoginMethodDataValidationError) ErrorName() string {
	return "UserListLoginMethodDataValidationError"
}

// Error satisfies the builtin error interface
func (e UserListLoginMethodDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListLoginMethodData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListLoginMethodDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListLoginMethodDataValidationError{}

// Validate checks the field values on UserListLoginMethodResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserListLoginMethodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListLoginMethodResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserListLoginMethodResponseMultiError, or nil if none found.
func (m *UserListLoginMethodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListLoginMethodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserListLoginMethodResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserListLoginMethodResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserListLoginMethodResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserListLoginMethodResponseMultiError(errors)
	}

	return nil
}

// UserListLoginMethodResponseMultiError is an error wrapping multiple
// validation errors returned by UserListLoginMethodResponse.ValidateAll() if
// the designated constraints aren't met.
type UserListLoginMethodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListLoginMethodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListLoginMethodResponseMultiError) AllErrors() []error { return m }

// UserListLoginMethodResponseValidationError is the validation error returned
// by UserListLoginMethodResponse.Validate if the designated constraints
// aren't met.
type UserListLoginMethodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListLoginMethodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListLoginMethodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListLoginMethodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListLoginMethodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListLoginMethodResponseValidationError) ErrorName() string {
	return "UserListLoginMethodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserListLoginMethodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListLoginMethodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListLoginMethodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListLoginMethodResponseValidationError{}

// Validate checks the field values on UserPagingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserPagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPagingRequestMultiError, or nil if none found.
func (m *UserPagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Nick

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Source

	// no validation rules for PageNo

	// no validation rules for PageSize

	if m.Locked != nil {
		// no validation rules for Locked
	}

	if len(errors) > 0 {
		return UserPagingRequestMultiError(errors)
	}

	return nil
}

// UserPagingRequestMultiError is an error wrapping multiple validation errors
// returned by UserPagingRequest.ValidateAll() if the designated constraints
// aren't met.
type UserPagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPagingRequestMultiError) AllErrors() []error { return m }

// UserPagingRequestValidationError is the validation error returned by
// UserPagingRequest.Validate if the designated constraints aren't met.
type UserPagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPagingRequestValidationError) ErrorName() string {
	return "UserPagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserPagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPagingRequestValidationError{}

// Validate checks the field values on UserPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserPagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPagingResponseMultiError, or nil if none found.
func (m *UserPagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserPagingResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserPagingResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserPagingResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserPagingResponseMultiError(errors)
	}

	return nil
}

// UserPagingResponseMultiError is an error wrapping multiple validation errors
// returned by UserPagingResponse.ValidateAll() if the designated constraints
// aren't met.
type UserPagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPagingResponseMultiError) AllErrors() []error { return m }

// UserPagingResponseValidationError is the validation error returned by
// UserPagingResponse.Validate if the designated constraints aren't met.
type UserPagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPagingResponseValidationError) ErrorName() string {
	return "UserPagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserPagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPagingResponseValidationError{}

// Validate checks the field values on UserUnfreezeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUnfreezeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUnfreezeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUnfreezeRequestMultiError, or nil if none found.
func (m *UserUnfreezeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUnfreezeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	if len(errors) > 0 {
		return UserUnfreezeRequestMultiError(errors)
	}

	return nil
}

// UserUnfreezeRequestMultiError is an error wrapping multiple validation
// errors returned by UserUnfreezeRequest.ValidateAll() if the designated
// constraints aren't met.
type UserUnfreezeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUnfreezeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUnfreezeRequestMultiError) AllErrors() []error { return m }

// UserUnfreezeRequestValidationError is the validation error returned by
// UserUnfreezeRequest.Validate if the designated constraints aren't met.
type UserUnfreezeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUnfreezeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUnfreezeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUnfreezeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUnfreezeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUnfreezeRequestValidationError) ErrorName() string {
	return "UserUnfreezeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserUnfreezeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUnfreezeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUnfreezeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUnfreezeRequestValidationError{}

// Validate checks the field values on UserUnfreezeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUnfreezeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUnfreezeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUnfreezeResponseMultiError, or nil if none found.
func (m *UserUnfreezeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUnfreezeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserUnfreezeResponseMultiError(errors)
	}

	return nil
}

// UserUnfreezeResponseMultiError is an error wrapping multiple validation
// errors returned by UserUnfreezeResponse.ValidateAll() if the designated
// constraints aren't met.
type UserUnfreezeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUnfreezeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUnfreezeResponseMultiError) AllErrors() []error { return m }

// UserUnfreezeResponseValidationError is the validation error returned by
// UserUnfreezeResponse.Validate if the designated constraints aren't met.
type UserUnfreezeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUnfreezeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUnfreezeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUnfreezeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUnfreezeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUnfreezeResponseValidationError) ErrorName() string {
	return "UserUnfreezeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserUnfreezeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUnfreezeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUnfreezeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUnfreezeResponseValidationError{}

// Validate checks the field values on UserUpdateInfoRequset with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateInfoRequset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateInfoRequset with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateInfoRequsetMultiError, or nil if none found.
func (m *UserUpdateInfoRequset) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateInfoRequset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Name

	// no validation rules for Nick

	// no validation rules for Mobile

	// no validation rules for Email

	if len(errors) > 0 {
		return UserUpdateInfoRequsetMultiError(errors)
	}

	return nil
}

// UserUpdateInfoRequsetMultiError is an error wrapping multiple validation
// errors returned by UserUpdateInfoRequset.ValidateAll() if the designated
// constraints aren't met.
type UserUpdateInfoRequsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateInfoRequsetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateInfoRequsetMultiError) AllErrors() []error { return m }

// UserUpdateInfoRequsetValidationError is the validation error returned by
// UserUpdateInfoRequset.Validate if the designated constraints aren't met.
type UserUpdateInfoRequsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateInfoRequsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateInfoRequsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateInfoRequsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateInfoRequsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateInfoRequsetValidationError) ErrorName() string {
	return "UserUpdateInfoRequsetValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateInfoRequsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateInfoRequset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateInfoRequsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateInfoRequsetValidationError{}

// Validate checks the field values on UserUpdateInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateInfoResponseMultiError, or nil if none found.
func (m *UserUpdateInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserUpdateInfoResponseMultiError(errors)
	}

	return nil
}

// UserUpdateInfoResponseMultiError is an error wrapping multiple validation
// errors returned by UserUpdateInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type UserUpdateInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateInfoResponseMultiError) AllErrors() []error { return m }

// UserUpdateInfoResponseValidationError is the validation error returned by
// UserUpdateInfoResponse.Validate if the designated constraints aren't met.
type UserUpdateInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateInfoResponseValidationError) ErrorName() string {
	return "UserUpdateInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateInfoResponseValidationError{}

// Validate checks the field values on UserUpdateLoginMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateLoginMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateLoginMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateLoginMethodRequestMultiError, or nil if none found.
func (m *UserUpdateLoginMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateLoginMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Source

	// no validation rules for UserID

	if len(errors) > 0 {
		return UserUpdateLoginMethodRequestMultiError(errors)
	}

	return nil
}

// UserUpdateLoginMethodRequestMultiError is an error wrapping multiple
// validation errors returned by UserUpdateLoginMethodRequest.ValidateAll() if
// the designated constraints aren't met.
type UserUpdateLoginMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateLoginMethodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateLoginMethodRequestMultiError) AllErrors() []error { return m }

// UserUpdateLoginMethodRequestValidationError is the validation error returned
// by UserUpdateLoginMethodRequest.Validate if the designated constraints
// aren't met.
type UserUpdateLoginMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateLoginMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateLoginMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateLoginMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateLoginMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateLoginMethodRequestValidationError) ErrorName() string {
	return "UserUpdateLoginMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateLoginMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateLoginMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateLoginMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateLoginMethodRequestValidationError{}

// Validate checks the field values on UserUpdateLoginMethodResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateLoginMethodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateLoginMethodResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UserUpdateLoginMethodResponseMultiError, or nil if none found.
func (m *UserUpdateLoginMethodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateLoginMethodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserUpdateLoginMethodResponseMultiError(errors)
	}

	return nil
}

// UserUpdateLoginMethodResponseMultiError is an error wrapping multiple
// validation errors returned by UserUpdateLoginMethodResponse.ValidateAll()
// if the designated constraints aren't met.
type UserUpdateLoginMethodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateLoginMethodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateLoginMethodResponseMultiError) AllErrors() []error { return m }

// UserUpdateLoginMethodResponseValidationError is the validation error
// returned by UserUpdateLoginMethodResponse.Validate if the designated
// constraints aren't met.
type UserUpdateLoginMethodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateLoginMethodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateLoginMethodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateLoginMethodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateLoginMethodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateLoginMethodResponseValidationError) ErrorName() string {
	return "UserUpdateLoginMethodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateLoginMethodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateLoginMethodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateLoginMethodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateLoginMethodResponseValidationError{}
