// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: uc.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// UcClient is the client API for Uc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UcClient interface {
	UC_PWD_SECURITY_CONFIG_GET(ctx context.Context, in *UC_PWD_SECURITY_CONFIG_GET_Request, opts ...grpc.CallOption) (*PwdSecurityConfigGetResponse, error)
	UC_PWD_SECURITY_CONFIG_UPDATE(ctx context.Context, in *PwdSecurityConfigUpdateRequest, opts ...grpc.CallOption) (*PwdSecurityConfigUpdateResponse, error)
	UC_USER_BATCH_FREEZE(ctx context.Context, in *UserBatchFreezeRequest, opts ...grpc.CallOption) (*UserBatchFreezeResponse, error)
	UC_USER_BATCH_UNFREEZE(ctx context.Context, in *UserBatchUnFreezeRequest, opts ...grpc.CallOption) (*UserBatchUnFreezeResponse, error)
	UC_USER_BATCH_UPDATE_LOGIN_METHOD(ctx context.Context, in *UserBatchUpdateLoginMethodRequest, opts ...grpc.CallOption) (*UserBatchUpdateLoginMethodResponse, error)
	UC_USER_CREATE(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error)
	UC_USER_EXPORT(ctx context.Context, in *UserPagingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UC_USER_FREEZE(ctx context.Context, in *UserFreezeRequest, opts ...grpc.CallOption) (*UserFreezeResponse, error)
	UC_USER_LIST_LOGIN_METHOD(ctx context.Context, in *UC_USER_LIST_LOGIN_METHOD_Request, opts ...grpc.CallOption) (*UserListLoginMethodResponse, error)
	UC_USER_PAGING(ctx context.Context, in *UserPagingRequest, opts ...grpc.CallOption) (*UserPagingResponse, error)
	UC_USER_UNFREEZE(ctx context.Context, in *UserUnfreezeRequest, opts ...grpc.CallOption) (*UserUnfreezeResponse, error)
	UC_USER_UPDATE_LOGIN_METHOD(ctx context.Context, in *UserUpdateLoginMethodRequest, opts ...grpc.CallOption) (*UserUpdateLoginMethodResponse, error)
	UC_USER_UPDATE_USERINFO(ctx context.Context, in *UserUpdateInfoRequset, opts ...grpc.CallOption) (*UserUpdateInfoResponse, error)
}

type ucClient struct {
	cc grpc1.ClientConnInterface
}

func NewUcClient(cc grpc1.ClientConnInterface) UcClient {
	return &ucClient{cc}
}

func (c *ucClient) UC_PWD_SECURITY_CONFIG_GET(ctx context.Context, in *UC_PWD_SECURITY_CONFIG_GET_Request, opts ...grpc.CallOption) (*PwdSecurityConfigGetResponse, error) {
	out := new(PwdSecurityConfigGetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.uc.uc/UC_PWD_SECURITY_CONFIG_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) UC_PWD_SECURITY_CONFIG_UPDATE(ctx context.Context, in *PwdSecurityConfigUpdateRequest, opts ...grpc.CallOption) (*PwdSecurityConfigUpdateResponse, error) {
	out := new(PwdSecurityConfigUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.uc.uc/UC_PWD_SECURITY_CONFIG_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) UC_USER_BATCH_FREEZE(ctx context.Context, in *UserBatchFreezeRequest, opts ...grpc.CallOption) (*UserBatchFreezeResponse, error) {
	out := new(UserBatchFreezeResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.uc.uc/UC_USER_BATCH_FREEZE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) UC_USER_BATCH_UNFREEZE(ctx context.Context, in *UserBatchUnFreezeRequest, opts ...grpc.CallOption) (*UserBatchUnFreezeResponse, error) {
	out := new(UserBatchUnFreezeResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.uc.uc/UC_USER_BATCH_UNFREEZE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) UC_USER_BATCH_UPDATE_LOGIN_METHOD(ctx context.Context, in *UserBatchUpdateLoginMethodRequest, opts ...grpc.CallOption) (*UserBatchUpdateLoginMethodResponse, error) {
	out := new(UserBatchUpdateLoginMethodResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.uc.uc/UC_USER_BATCH_UPDATE_LOGIN_METHOD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) UC_USER_CREATE(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error) {
	out := new(UserCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.uc.uc/UC_USER_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) UC_USER_EXPORT(ctx context.Context, in *UserPagingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.uc.uc/UC_USER_EXPORT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) UC_USER_FREEZE(ctx context.Context, in *UserFreezeRequest, opts ...grpc.CallOption) (*UserFreezeResponse, error) {
	out := new(UserFreezeResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.uc.uc/UC_USER_FREEZE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) UC_USER_LIST_LOGIN_METHOD(ctx context.Context, in *UC_USER_LIST_LOGIN_METHOD_Request, opts ...grpc.CallOption) (*UserListLoginMethodResponse, error) {
	out := new(UserListLoginMethodResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.uc.uc/UC_USER_LIST_LOGIN_METHOD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) UC_USER_PAGING(ctx context.Context, in *UserPagingRequest, opts ...grpc.CallOption) (*UserPagingResponse, error) {
	out := new(UserPagingResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.uc.uc/UC_USER_PAGING", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) UC_USER_UNFREEZE(ctx context.Context, in *UserUnfreezeRequest, opts ...grpc.CallOption) (*UserUnfreezeResponse, error) {
	out := new(UserUnfreezeResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.uc.uc/UC_USER_UNFREEZE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) UC_USER_UPDATE_LOGIN_METHOD(ctx context.Context, in *UserUpdateLoginMethodRequest, opts ...grpc.CallOption) (*UserUpdateLoginMethodResponse, error) {
	out := new(UserUpdateLoginMethodResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.uc.uc/UC_USER_UPDATE_LOGIN_METHOD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucClient) UC_USER_UPDATE_USERINFO(ctx context.Context, in *UserUpdateInfoRequset, opts ...grpc.CallOption) (*UserUpdateInfoResponse, error) {
	out := new(UserUpdateInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.uc.uc/UC_USER_UPDATE_USERINFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UcServer is the server API for Uc service.
// All implementations should embed UnimplementedUcServer
// for forward compatibility
type UcServer interface {
	UC_PWD_SECURITY_CONFIG_GET(context.Context, *UC_PWD_SECURITY_CONFIG_GET_Request) (*PwdSecurityConfigGetResponse, error)
	UC_PWD_SECURITY_CONFIG_UPDATE(context.Context, *PwdSecurityConfigUpdateRequest) (*PwdSecurityConfigUpdateResponse, error)
	UC_USER_BATCH_FREEZE(context.Context, *UserBatchFreezeRequest) (*UserBatchFreezeResponse, error)
	UC_USER_BATCH_UNFREEZE(context.Context, *UserBatchUnFreezeRequest) (*UserBatchUnFreezeResponse, error)
	UC_USER_BATCH_UPDATE_LOGIN_METHOD(context.Context, *UserBatchUpdateLoginMethodRequest) (*UserBatchUpdateLoginMethodResponse, error)
	UC_USER_CREATE(context.Context, *UserCreateRequest) (*UserCreateResponse, error)
	UC_USER_EXPORT(context.Context, *UserPagingRequest) (*emptypb.Empty, error)
	UC_USER_FREEZE(context.Context, *UserFreezeRequest) (*UserFreezeResponse, error)
	UC_USER_LIST_LOGIN_METHOD(context.Context, *UC_USER_LIST_LOGIN_METHOD_Request) (*UserListLoginMethodResponse, error)
	UC_USER_PAGING(context.Context, *UserPagingRequest) (*UserPagingResponse, error)
	UC_USER_UNFREEZE(context.Context, *UserUnfreezeRequest) (*UserUnfreezeResponse, error)
	UC_USER_UPDATE_LOGIN_METHOD(context.Context, *UserUpdateLoginMethodRequest) (*UserUpdateLoginMethodResponse, error)
	UC_USER_UPDATE_USERINFO(context.Context, *UserUpdateInfoRequset) (*UserUpdateInfoResponse, error)
}

// UnimplementedUcServer should be embedded to have forward compatible implementations.
type UnimplementedUcServer struct {
}

func (*UnimplementedUcServer) UC_PWD_SECURITY_CONFIG_GET(context.Context, *UC_PWD_SECURITY_CONFIG_GET_Request) (*PwdSecurityConfigGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UC_PWD_SECURITY_CONFIG_GET not implemented")
}
func (*UnimplementedUcServer) UC_PWD_SECURITY_CONFIG_UPDATE(context.Context, *PwdSecurityConfigUpdateRequest) (*PwdSecurityConfigUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UC_PWD_SECURITY_CONFIG_UPDATE not implemented")
}
func (*UnimplementedUcServer) UC_USER_BATCH_FREEZE(context.Context, *UserBatchFreezeRequest) (*UserBatchFreezeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UC_USER_BATCH_FREEZE not implemented")
}
func (*UnimplementedUcServer) UC_USER_BATCH_UNFREEZE(context.Context, *UserBatchUnFreezeRequest) (*UserBatchUnFreezeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UC_USER_BATCH_UNFREEZE not implemented")
}
func (*UnimplementedUcServer) UC_USER_BATCH_UPDATE_LOGIN_METHOD(context.Context, *UserBatchUpdateLoginMethodRequest) (*UserBatchUpdateLoginMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UC_USER_BATCH_UPDATE_LOGIN_METHOD not implemented")
}
func (*UnimplementedUcServer) UC_USER_CREATE(context.Context, *UserCreateRequest) (*UserCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UC_USER_CREATE not implemented")
}
func (*UnimplementedUcServer) UC_USER_EXPORT(context.Context, *UserPagingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UC_USER_EXPORT not implemented")
}
func (*UnimplementedUcServer) UC_USER_FREEZE(context.Context, *UserFreezeRequest) (*UserFreezeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UC_USER_FREEZE not implemented")
}
func (*UnimplementedUcServer) UC_USER_LIST_LOGIN_METHOD(context.Context, *UC_USER_LIST_LOGIN_METHOD_Request) (*UserListLoginMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UC_USER_LIST_LOGIN_METHOD not implemented")
}
func (*UnimplementedUcServer) UC_USER_PAGING(context.Context, *UserPagingRequest) (*UserPagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UC_USER_PAGING not implemented")
}
func (*UnimplementedUcServer) UC_USER_UNFREEZE(context.Context, *UserUnfreezeRequest) (*UserUnfreezeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UC_USER_UNFREEZE not implemented")
}
func (*UnimplementedUcServer) UC_USER_UPDATE_LOGIN_METHOD(context.Context, *UserUpdateLoginMethodRequest) (*UserUpdateLoginMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UC_USER_UPDATE_LOGIN_METHOD not implemented")
}
func (*UnimplementedUcServer) UC_USER_UPDATE_USERINFO(context.Context, *UserUpdateInfoRequset) (*UserUpdateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UC_USER_UPDATE_USERINFO not implemented")
}

func RegisterUcServer(s grpc1.ServiceRegistrar, srv UcServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Uc_serviceDesc(srv, opts...), srv)
}

var _Uc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.uc.uc",
	HandlerType: (*UcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "uc.proto",
}

func _get_Uc_serviceDesc(srv UcServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Uc_UC_PWD_SECURITY_CONFIG_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UC_PWD_SECURITY_CONFIG_GET(ctx, req.(*UC_PWD_SECURITY_CONFIG_GET_Request))
	}
	var _Uc_UC_PWD_SECURITY_CONFIG_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Uc_UC_PWD_SECURITY_CONFIG_GET_info = transport.NewServiceInfo("erda.openapiv1.uc.uc", "UC_PWD_SECURITY_CONFIG_GET", srv)
		_Uc_UC_PWD_SECURITY_CONFIG_GET_Handler = h.Interceptor(_Uc_UC_PWD_SECURITY_CONFIG_GET_Handler)
	}

	_Uc_UC_PWD_SECURITY_CONFIG_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UC_PWD_SECURITY_CONFIG_UPDATE(ctx, req.(*PwdSecurityConfigUpdateRequest))
	}
	var _Uc_UC_PWD_SECURITY_CONFIG_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Uc_UC_PWD_SECURITY_CONFIG_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.uc.uc", "UC_PWD_SECURITY_CONFIG_UPDATE", srv)
		_Uc_UC_PWD_SECURITY_CONFIG_UPDATE_Handler = h.Interceptor(_Uc_UC_PWD_SECURITY_CONFIG_UPDATE_Handler)
	}

	_Uc_UC_USER_BATCH_FREEZE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UC_USER_BATCH_FREEZE(ctx, req.(*UserBatchFreezeRequest))
	}
	var _Uc_UC_USER_BATCH_FREEZE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Uc_UC_USER_BATCH_FREEZE_info = transport.NewServiceInfo("erda.openapiv1.uc.uc", "UC_USER_BATCH_FREEZE", srv)
		_Uc_UC_USER_BATCH_FREEZE_Handler = h.Interceptor(_Uc_UC_USER_BATCH_FREEZE_Handler)
	}

	_Uc_UC_USER_BATCH_UNFREEZE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UC_USER_BATCH_UNFREEZE(ctx, req.(*UserBatchUnFreezeRequest))
	}
	var _Uc_UC_USER_BATCH_UNFREEZE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Uc_UC_USER_BATCH_UNFREEZE_info = transport.NewServiceInfo("erda.openapiv1.uc.uc", "UC_USER_BATCH_UNFREEZE", srv)
		_Uc_UC_USER_BATCH_UNFREEZE_Handler = h.Interceptor(_Uc_UC_USER_BATCH_UNFREEZE_Handler)
	}

	_Uc_UC_USER_BATCH_UPDATE_LOGIN_METHOD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UC_USER_BATCH_UPDATE_LOGIN_METHOD(ctx, req.(*UserBatchUpdateLoginMethodRequest))
	}
	var _Uc_UC_USER_BATCH_UPDATE_LOGIN_METHOD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Uc_UC_USER_BATCH_UPDATE_LOGIN_METHOD_info = transport.NewServiceInfo("erda.openapiv1.uc.uc", "UC_USER_BATCH_UPDATE_LOGIN_METHOD", srv)
		_Uc_UC_USER_BATCH_UPDATE_LOGIN_METHOD_Handler = h.Interceptor(_Uc_UC_USER_BATCH_UPDATE_LOGIN_METHOD_Handler)
	}

	_Uc_UC_USER_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UC_USER_CREATE(ctx, req.(*UserCreateRequest))
	}
	var _Uc_UC_USER_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Uc_UC_USER_CREATE_info = transport.NewServiceInfo("erda.openapiv1.uc.uc", "UC_USER_CREATE", srv)
		_Uc_UC_USER_CREATE_Handler = h.Interceptor(_Uc_UC_USER_CREATE_Handler)
	}

	_Uc_UC_USER_EXPORT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UC_USER_EXPORT(ctx, req.(*UserPagingRequest))
	}
	var _Uc_UC_USER_EXPORT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Uc_UC_USER_EXPORT_info = transport.NewServiceInfo("erda.openapiv1.uc.uc", "UC_USER_EXPORT", srv)
		_Uc_UC_USER_EXPORT_Handler = h.Interceptor(_Uc_UC_USER_EXPORT_Handler)
	}

	_Uc_UC_USER_FREEZE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UC_USER_FREEZE(ctx, req.(*UserFreezeRequest))
	}
	var _Uc_UC_USER_FREEZE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Uc_UC_USER_FREEZE_info = transport.NewServiceInfo("erda.openapiv1.uc.uc", "UC_USER_FREEZE", srv)
		_Uc_UC_USER_FREEZE_Handler = h.Interceptor(_Uc_UC_USER_FREEZE_Handler)
	}

	_Uc_UC_USER_LIST_LOGIN_METHOD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UC_USER_LIST_LOGIN_METHOD(ctx, req.(*UC_USER_LIST_LOGIN_METHOD_Request))
	}
	var _Uc_UC_USER_LIST_LOGIN_METHOD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Uc_UC_USER_LIST_LOGIN_METHOD_info = transport.NewServiceInfo("erda.openapiv1.uc.uc", "UC_USER_LIST_LOGIN_METHOD", srv)
		_Uc_UC_USER_LIST_LOGIN_METHOD_Handler = h.Interceptor(_Uc_UC_USER_LIST_LOGIN_METHOD_Handler)
	}

	_Uc_UC_USER_PAGING_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UC_USER_PAGING(ctx, req.(*UserPagingRequest))
	}
	var _Uc_UC_USER_PAGING_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Uc_UC_USER_PAGING_info = transport.NewServiceInfo("erda.openapiv1.uc.uc", "UC_USER_PAGING", srv)
		_Uc_UC_USER_PAGING_Handler = h.Interceptor(_Uc_UC_USER_PAGING_Handler)
	}

	_Uc_UC_USER_UNFREEZE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UC_USER_UNFREEZE(ctx, req.(*UserUnfreezeRequest))
	}
	var _Uc_UC_USER_UNFREEZE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Uc_UC_USER_UNFREEZE_info = transport.NewServiceInfo("erda.openapiv1.uc.uc", "UC_USER_UNFREEZE", srv)
		_Uc_UC_USER_UNFREEZE_Handler = h.Interceptor(_Uc_UC_USER_UNFREEZE_Handler)
	}

	_Uc_UC_USER_UPDATE_LOGIN_METHOD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UC_USER_UPDATE_LOGIN_METHOD(ctx, req.(*UserUpdateLoginMethodRequest))
	}
	var _Uc_UC_USER_UPDATE_LOGIN_METHOD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Uc_UC_USER_UPDATE_LOGIN_METHOD_info = transport.NewServiceInfo("erda.openapiv1.uc.uc", "UC_USER_UPDATE_LOGIN_METHOD", srv)
		_Uc_UC_USER_UPDATE_LOGIN_METHOD_Handler = h.Interceptor(_Uc_UC_USER_UPDATE_LOGIN_METHOD_Handler)
	}

	_Uc_UC_USER_UPDATE_USERINFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UC_USER_UPDATE_USERINFO(ctx, req.(*UserUpdateInfoRequset))
	}
	var _Uc_UC_USER_UPDATE_USERINFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Uc_UC_USER_UPDATE_USERINFO_info = transport.NewServiceInfo("erda.openapiv1.uc.uc", "UC_USER_UPDATE_USERINFO", srv)
		_Uc_UC_USER_UPDATE_USERINFO_Handler = h.Interceptor(_Uc_UC_USER_UPDATE_USERINFO_Handler)
	}

	var serviceDesc = _Uc_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "UC_PWD_SECURITY_CONFIG_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UC_PWD_SECURITY_CONFIG_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UcServer).UC_PWD_SECURITY_CONFIG_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Uc_UC_PWD_SECURITY_CONFIG_GET_info)
				}
				if interceptor == nil {
					return _Uc_UC_PWD_SECURITY_CONFIG_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.uc.uc/UC_PWD_SECURITY_CONFIG_GET",
				}
				return interceptor(ctx, in, info, _Uc_UC_PWD_SECURITY_CONFIG_GET_Handler)
			},
		},
		{
			MethodName: "UC_PWD_SECURITY_CONFIG_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PwdSecurityConfigUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UcServer).UC_PWD_SECURITY_CONFIG_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Uc_UC_PWD_SECURITY_CONFIG_UPDATE_info)
				}
				if interceptor == nil {
					return _Uc_UC_PWD_SECURITY_CONFIG_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.uc.uc/UC_PWD_SECURITY_CONFIG_UPDATE",
				}
				return interceptor(ctx, in, info, _Uc_UC_PWD_SECURITY_CONFIG_UPDATE_Handler)
			},
		},
		{
			MethodName: "UC_USER_BATCH_FREEZE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UserBatchFreezeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UcServer).UC_USER_BATCH_FREEZE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Uc_UC_USER_BATCH_FREEZE_info)
				}
				if interceptor == nil {
					return _Uc_UC_USER_BATCH_FREEZE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.uc.uc/UC_USER_BATCH_FREEZE",
				}
				return interceptor(ctx, in, info, _Uc_UC_USER_BATCH_FREEZE_Handler)
			},
		},
		{
			MethodName: "UC_USER_BATCH_UNFREEZE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UserBatchUnFreezeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UcServer).UC_USER_BATCH_UNFREEZE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Uc_UC_USER_BATCH_UNFREEZE_info)
				}
				if interceptor == nil {
					return _Uc_UC_USER_BATCH_UNFREEZE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.uc.uc/UC_USER_BATCH_UNFREEZE",
				}
				return interceptor(ctx, in, info, _Uc_UC_USER_BATCH_UNFREEZE_Handler)
			},
		},
		{
			MethodName: "UC_USER_BATCH_UPDATE_LOGIN_METHOD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UserBatchUpdateLoginMethodRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UcServer).UC_USER_BATCH_UPDATE_LOGIN_METHOD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Uc_UC_USER_BATCH_UPDATE_LOGIN_METHOD_info)
				}
				if interceptor == nil {
					return _Uc_UC_USER_BATCH_UPDATE_LOGIN_METHOD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.uc.uc/UC_USER_BATCH_UPDATE_LOGIN_METHOD",
				}
				return interceptor(ctx, in, info, _Uc_UC_USER_BATCH_UPDATE_LOGIN_METHOD_Handler)
			},
		},
		{
			MethodName: "UC_USER_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UserCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UcServer).UC_USER_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Uc_UC_USER_CREATE_info)
				}
				if interceptor == nil {
					return _Uc_UC_USER_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.uc.uc/UC_USER_CREATE",
				}
				return interceptor(ctx, in, info, _Uc_UC_USER_CREATE_Handler)
			},
		},
		{
			MethodName: "UC_USER_EXPORT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UserPagingRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UcServer).UC_USER_EXPORT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Uc_UC_USER_EXPORT_info)
				}
				if interceptor == nil {
					return _Uc_UC_USER_EXPORT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.uc.uc/UC_USER_EXPORT",
				}
				return interceptor(ctx, in, info, _Uc_UC_USER_EXPORT_Handler)
			},
		},
		{
			MethodName: "UC_USER_FREEZE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UserFreezeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UcServer).UC_USER_FREEZE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Uc_UC_USER_FREEZE_info)
				}
				if interceptor == nil {
					return _Uc_UC_USER_FREEZE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.uc.uc/UC_USER_FREEZE",
				}
				return interceptor(ctx, in, info, _Uc_UC_USER_FREEZE_Handler)
			},
		},
		{
			MethodName: "UC_USER_LIST_LOGIN_METHOD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UC_USER_LIST_LOGIN_METHOD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UcServer).UC_USER_LIST_LOGIN_METHOD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Uc_UC_USER_LIST_LOGIN_METHOD_info)
				}
				if interceptor == nil {
					return _Uc_UC_USER_LIST_LOGIN_METHOD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.uc.uc/UC_USER_LIST_LOGIN_METHOD",
				}
				return interceptor(ctx, in, info, _Uc_UC_USER_LIST_LOGIN_METHOD_Handler)
			},
		},
		{
			MethodName: "UC_USER_PAGING",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UserPagingRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UcServer).UC_USER_PAGING(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Uc_UC_USER_PAGING_info)
				}
				if interceptor == nil {
					return _Uc_UC_USER_PAGING_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.uc.uc/UC_USER_PAGING",
				}
				return interceptor(ctx, in, info, _Uc_UC_USER_PAGING_Handler)
			},
		},
		{
			MethodName: "UC_USER_UNFREEZE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UserUnfreezeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UcServer).UC_USER_UNFREEZE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Uc_UC_USER_UNFREEZE_info)
				}
				if interceptor == nil {
					return _Uc_UC_USER_UNFREEZE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.uc.uc/UC_USER_UNFREEZE",
				}
				return interceptor(ctx, in, info, _Uc_UC_USER_UNFREEZE_Handler)
			},
		},
		{
			MethodName: "UC_USER_UPDATE_LOGIN_METHOD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UserUpdateLoginMethodRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UcServer).UC_USER_UPDATE_LOGIN_METHOD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Uc_UC_USER_UPDATE_LOGIN_METHOD_info)
				}
				if interceptor == nil {
					return _Uc_UC_USER_UPDATE_LOGIN_METHOD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.uc.uc/UC_USER_UPDATE_LOGIN_METHOD",
				}
				return interceptor(ctx, in, info, _Uc_UC_USER_UPDATE_LOGIN_METHOD_Handler)
			},
		},
		{
			MethodName: "UC_USER_UPDATE_USERINFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UserUpdateInfoRequset)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(UcServer).UC_USER_UPDATE_USERINFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Uc_UC_USER_UPDATE_USERINFO_info)
				}
				if interceptor == nil {
					return _Uc_UC_USER_UPDATE_USERINFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.uc.uc/UC_USER_UPDATE_USERINFO",
				}
				return interceptor(ctx, in, info, _Uc_UC_USER_UPDATE_USERINFO_Handler)
			},
		},
	}
	return &serviceDesc
}
