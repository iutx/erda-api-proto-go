// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cmp.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddNodesData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddNodesData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNodesData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddNodesDataMultiError, or
// nil if none found.
func (m *AddNodesData) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNodesData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecordID

	if len(errors) > 0 {
		return AddNodesDataMultiError(errors)
	}

	return nil
}

// AddNodesDataMultiError is an error wrapping multiple validation errors
// returned by AddNodesData.ValidateAll() if the designated constraints aren't met.
type AddNodesDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNodesDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNodesDataMultiError) AllErrors() []error { return m }

// AddNodesDataValidationError is the validation error returned by
// AddNodesData.Validate if the designated constraints aren't met.
type AddNodesDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNodesDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNodesDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNodesDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNodesDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNodesDataValidationError) ErrorName() string { return "AddNodesDataValidationError" }

// Error satisfies the builtin error interface
func (e AddNodesDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNodesData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNodesDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNodesDataValidationError{}

// Validate checks the field values on AddNodesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNodesRequestMultiError, or nil if none found.
func (m *AddNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for OrgID

	// no validation rules for Port

	// no validation rules for User

	// no validation rules for Password

	// no validation rules for SudoHasPassword

	// no validation rules for DataDiskDevice

	// no validation rules for Source

	// no validation rules for Detail

	if len(errors) > 0 {
		return AddNodesRequestMultiError(errors)
	}

	return nil
}

// AddNodesRequestMultiError is an error wrapping multiple validation errors
// returned by AddNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type AddNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNodesRequestMultiError) AllErrors() []error { return m }

// AddNodesRequestValidationError is the validation error returned by
// AddNodesRequest.Validate if the designated constraints aren't met.
type AddNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNodesRequestValidationError) ErrorName() string { return "AddNodesRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNodesRequestValidationError{}

// Validate checks the field values on AddNodesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNodesResponseMultiError, or nil if none found.
func (m *AddNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddNodesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddNodesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddNodesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddNodesResponseMultiError(errors)
	}

	return nil
}

// AddNodesResponseMultiError is an error wrapping multiple validation errors
// returned by AddNodesResponse.ValidateAll() if the designated constraints
// aren't met.
type AddNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNodesResponseMultiError) AllErrors() []error { return m }

// AddNodesResponseValidationError is the validation error returned by
// AddNodesResponse.Validate if the designated constraints aren't met.
type AddNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNodesResponseValidationError) ErrorName() string { return "AddNodesResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNodesResponseValidationError{}

// Validate checks the field values on AddonConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonConfigRequestMultiError, or nil if none found.
func (m *AddonConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	if len(errors) > 0 {
		return AddonConfigRequestMultiError(errors)
	}

	return nil
}

// AddonConfigRequestMultiError is an error wrapping multiple validation errors
// returned by AddonConfigRequest.ValidateAll() if the designated constraints
// aren't met.
type AddonConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonConfigRequestMultiError) AllErrors() []error { return m }

// AddonConfigRequestValidationError is the validation error returned by
// AddonConfigRequest.Validate if the designated constraints aren't met.
type AddonConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonConfigRequestValidationError) ErrorName() string {
	return "AddonConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddonConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonConfigRequestValidationError{}

// Validate checks the field values on AddonConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonConfigResponseMultiError, or nil if none found.
func (m *AddonConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddonConfigResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddonConfigResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddonConfigResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddonConfigResponseMultiError(errors)
	}

	return nil
}

// AddonConfigResponseMultiError is an error wrapping multiple validation
// errors returned by AddonConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type AddonConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonConfigResponseMultiError) AllErrors() []error { return m }

// AddonConfigResponseValidationError is the validation error returned by
// AddonConfigResponse.Validate if the designated constraints aren't met.
type AddonConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonConfigResponseValidationError) ErrorName() string {
	return "AddonConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddonConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonConfigResponseValidationError{}

// Validate checks the field values on AddonConfigUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonConfigUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonConfigUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonConfigUpdateRequestMultiError, or nil if none found.
func (m *AddonConfigUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonConfigUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAddonOpsBaseRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddonConfigUpdateRequestValidationError{
					field:  "AddonOpsBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddonConfigUpdateRequestValidationError{
					field:  "AddonOpsBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddonOpsBaseRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddonConfigUpdateRequestValidationError{
				field:  "AddonOpsBaseRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Config

	if len(errors) > 0 {
		return AddonConfigUpdateRequestMultiError(errors)
	}

	return nil
}

// AddonConfigUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by AddonConfigUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type AddonConfigUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonConfigUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonConfigUpdateRequestMultiError) AllErrors() []error { return m }

// AddonConfigUpdateRequestValidationError is the validation error returned by
// AddonConfigUpdateRequest.Validate if the designated constraints aren't met.
type AddonConfigUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonConfigUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonConfigUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonConfigUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonConfigUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonConfigUpdateRequestValidationError) ErrorName() string {
	return "AddonConfigUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddonConfigUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonConfigUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonConfigUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonConfigUpdateRequestValidationError{}

// Validate checks the field values on AddonConfigUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonConfigUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonConfigUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonConfigUpdateResponseMultiError, or nil if none found.
func (m *AddonConfigUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonConfigUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddonConfigUpdateResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddonConfigUpdateResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddonConfigUpdateResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddonConfigUpdateResponseMultiError(errors)
	}

	return nil
}

// AddonConfigUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by AddonConfigUpdateResponse.ValidateAll() if the
// designated constraints aren't met.
type AddonConfigUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonConfigUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonConfigUpdateResponseMultiError) AllErrors() []error { return m }

// AddonConfigUpdateResponseValidationError is the validation error returned by
// AddonConfigUpdateResponse.Validate if the designated constraints aren't met.
type AddonConfigUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonConfigUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonConfigUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonConfigUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonConfigUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonConfigUpdateResponseValidationError) ErrorName() string {
	return "AddonConfigUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddonConfigUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonConfigUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonConfigUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonConfigUpdateResponseValidationError{}

// Validate checks the field values on AddonOpsBaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonOpsBaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonOpsBaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonOpsBaseRequestMultiError, or nil if none found.
func (m *AddonOpsBaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonOpsBaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for ProjectName

	// no validation rules for ProjectID

	// no validation rules for AddonID

	// no validation rules for AddonName

	if len(errors) > 0 {
		return AddonOpsBaseRequestMultiError(errors)
	}

	return nil
}

// AddonOpsBaseRequestMultiError is an error wrapping multiple validation
// errors returned by AddonOpsBaseRequest.ValidateAll() if the designated
// constraints aren't met.
type AddonOpsBaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonOpsBaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonOpsBaseRequestMultiError) AllErrors() []error { return m }

// AddonOpsBaseRequestValidationError is the validation error returned by
// AddonOpsBaseRequest.Validate if the designated constraints aren't met.
type AddonOpsBaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonOpsBaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonOpsBaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonOpsBaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonOpsBaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonOpsBaseRequestValidationError) ErrorName() string {
	return "AddonOpsBaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddonOpsBaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonOpsBaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonOpsBaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonOpsBaseRequestValidationError{}

// Validate checks the field values on AddonScaleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddonScaleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonScaleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonScaleRequestMultiError, or nil if none found.
func (m *AddonScaleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonScaleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAddonOpsBaseRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddonScaleRequestValidationError{
					field:  "AddonOpsBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddonScaleRequestValidationError{
					field:  "AddonOpsBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddonOpsBaseRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddonScaleRequestValidationError{
				field:  "AddonOpsBaseRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CPU

	// no validation rules for Mem

	// no validation rules for Nodes

	if len(errors) > 0 {
		return AddonScaleRequestMultiError(errors)
	}

	return nil
}

// AddonScaleRequestMultiError is an error wrapping multiple validation errors
// returned by AddonScaleRequest.ValidateAll() if the designated constraints
// aren't met.
type AddonScaleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonScaleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonScaleRequestMultiError) AllErrors() []error { return m }

// AddonScaleRequestValidationError is the validation error returned by
// AddonScaleRequest.Validate if the designated constraints aren't met.
type AddonScaleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonScaleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonScaleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonScaleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonScaleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonScaleRequestValidationError) ErrorName() string {
	return "AddonScaleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddonScaleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonScaleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonScaleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonScaleRequestValidationError{}

// Validate checks the field values on AddonScaleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonScaleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonScaleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonScaleResponseMultiError, or nil if none found.
func (m *AddonScaleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonScaleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddonScaleResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddonScaleResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddonScaleResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddonScaleResponseMultiError(errors)
	}

	return nil
}

// AddonScaleResponseMultiError is an error wrapping multiple validation errors
// returned by AddonScaleResponse.ValidateAll() if the designated constraints
// aren't met.
type AddonScaleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonScaleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonScaleResponseMultiError) AllErrors() []error { return m }

// AddonScaleResponseValidationError is the validation error returned by
// AddonScaleResponse.Validate if the designated constraints aren't met.
type AddonScaleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonScaleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonScaleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonScaleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonScaleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonScaleResponseValidationError) ErrorName() string {
	return "AddonScaleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddonScaleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonScaleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonScaleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonScaleResponseValidationError{}

// Validate checks the field values on ApiGatewayInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiGatewayInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiGatewayInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiGatewayInfoMultiError,
// or nil if none found.
func (m *ApiGatewayInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiGatewayInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	if len(errors) > 0 {
		return ApiGatewayInfoMultiError(errors)
	}

	return nil
}

// ApiGatewayInfoMultiError is an error wrapping multiple validation errors
// returned by ApiGatewayInfo.ValidateAll() if the designated constraints
// aren't met.
type ApiGatewayInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiGatewayInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiGatewayInfoMultiError) AllErrors() []error { return m }

// ApiGatewayInfoValidationError is the validation error returned by
// ApiGatewayInfo.Validate if the designated constraints aren't met.
type ApiGatewayInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiGatewayInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiGatewayInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiGatewayInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiGatewayInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiGatewayInfoValidationError) ErrorName() string { return "ApiGatewayInfoValidationError" }

// Error satisfies the builtin error interface
func (e ApiGatewayInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiGatewayInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiGatewayInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiGatewayInfoValidationError{}

// Validate checks the field values on AutoRenewCloudResourceEcsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AutoRenewCloudResourceEcsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoRenewCloudResourceEcsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AutoRenewCloudResourceEcsRequestMultiError, or nil if none found.
func (m *AutoRenewCloudResourceEcsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoRenewCloudResourceEcsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for Duration

	// no validation rules for Switch

	if len(errors) > 0 {
		return AutoRenewCloudResourceEcsRequestMultiError(errors)
	}

	return nil
}

// AutoRenewCloudResourceEcsRequestMultiError is an error wrapping multiple
// validation errors returned by
// AutoRenewCloudResourceEcsRequest.ValidateAll() if the designated
// constraints aren't met.
type AutoRenewCloudResourceEcsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoRenewCloudResourceEcsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoRenewCloudResourceEcsRequestMultiError) AllErrors() []error { return m }

// AutoRenewCloudResourceEcsRequestValidationError is the validation error
// returned by AutoRenewCloudResourceEcsRequest.Validate if the designated
// constraints aren't met.
type AutoRenewCloudResourceEcsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoRenewCloudResourceEcsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoRenewCloudResourceEcsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoRenewCloudResourceEcsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoRenewCloudResourceEcsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoRenewCloudResourceEcsRequestValidationError) ErrorName() string {
	return "AutoRenewCloudResourceEcsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AutoRenewCloudResourceEcsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoRenewCloudResourceEcsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoRenewCloudResourceEcsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoRenewCloudResourceEcsRequestValidationError{}

// Validate checks the field values on BatchUpgradeEdgeClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchUpgradeEdgeClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchUpgradeEdgeClusterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BatchUpgradeEdgeClusterRequestMultiError, or nil if none found.
func (m *BatchUpgradeEdgeClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchUpgradeEdgeClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchUpgradeEdgeClusterRequestValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchUpgradeEdgeClusterRequestValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchUpgradeEdgeClusterRequestValidationError{
					field:  fmt.Sprintf("Clusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchUpgradeEdgeClusterRequestMultiError(errors)
	}

	return nil
}

// BatchUpgradeEdgeClusterRequestMultiError is an error wrapping multiple
// validation errors returned by BatchUpgradeEdgeClusterRequest.ValidateAll()
// if the designated constraints aren't met.
type BatchUpgradeEdgeClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchUpgradeEdgeClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchUpgradeEdgeClusterRequestMultiError) AllErrors() []error { return m }

// BatchUpgradeEdgeClusterRequestValidationError is the validation error
// returned by BatchUpgradeEdgeClusterRequest.Validate if the designated
// constraints aren't met.
type BatchUpgradeEdgeClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchUpgradeEdgeClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchUpgradeEdgeClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchUpgradeEdgeClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchUpgradeEdgeClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchUpgradeEdgeClusterRequestValidationError) ErrorName() string {
	return "BatchUpgradeEdgeClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchUpgradeEdgeClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchUpgradeEdgeClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchUpgradeEdgeClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchUpgradeEdgeClusterRequestValidationError{}

// Validate checks the field values on BatchUpgradeEdgeClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchUpgradeEdgeClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchUpgradeEdgeClusterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BatchUpgradeEdgeClusterResponseMultiError, or nil if none found.
func (m *BatchUpgradeEdgeClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchUpgradeEdgeClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchUpgradeEdgeClusterResponseMultiError(errors)
	}

	return nil
}

// BatchUpgradeEdgeClusterResponseMultiError is an error wrapping multiple
// validation errors returned by BatchUpgradeEdgeClusterResponse.ValidateAll()
// if the designated constraints aren't met.
type BatchUpgradeEdgeClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchUpgradeEdgeClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchUpgradeEdgeClusterResponseMultiError) AllErrors() []error { return m }

// BatchUpgradeEdgeClusterResponseValidationError is the validation error
// returned by BatchUpgradeEdgeClusterResponse.Validate if the designated
// constraints aren't met.
type BatchUpgradeEdgeClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchUpgradeEdgeClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchUpgradeEdgeClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchUpgradeEdgeClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchUpgradeEdgeClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchUpgradeEdgeClusterResponseValidationError) ErrorName() string {
	return "BatchUpgradeEdgeClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchUpgradeEdgeClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchUpgradeEdgeClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchUpgradeEdgeClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchUpgradeEdgeClusterResponseValidationError{}

// Validate checks the field values on CMP_ALERT_CONDITIONS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_ALERT_CONDITIONS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_ALERT_CONDITIONS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_ALERT_CONDITIONS_RequestMultiError, or nil if none found.
func (m *CMP_ALERT_CONDITIONS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_ALERT_CONDITIONS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_ALERT_CONDITIONS_RequestMultiError(errors)
	}

	return nil
}

// CMP_ALERT_CONDITIONS_RequestMultiError is an error wrapping multiple
// validation errors returned by CMP_ALERT_CONDITIONS_Request.ValidateAll() if
// the designated constraints aren't met.
type CMP_ALERT_CONDITIONS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_ALERT_CONDITIONS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_ALERT_CONDITIONS_RequestMultiError) AllErrors() []error { return m }

// CMP_ALERT_CONDITIONS_RequestValidationError is the validation error returned
// by CMP_ALERT_CONDITIONS_Request.Validate if the designated constraints
// aren't met.
type CMP_ALERT_CONDITIONS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_ALERT_CONDITIONS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_ALERT_CONDITIONS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_ALERT_CONDITIONS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_ALERT_CONDITIONS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_ALERT_CONDITIONS_RequestValidationError) ErrorName() string {
	return "CMP_ALERT_CONDITIONS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_ALERT_CONDITIONS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_ALERT_CONDITIONS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_ALERT_CONDITIONS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_ALERT_CONDITIONS_RequestValidationError{}

// Validate checks the field values on CMP_ALERT_CONDITIONS_VALUE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CMP_ALERT_CONDITIONS_VALUE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_ALERT_CONDITIONS_VALUE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CMP_ALERT_CONDITIONS_VALUE_RequestMultiError, or nil if none found.
func (m *CMP_ALERT_CONDITIONS_VALUE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_ALERT_CONDITIONS_VALUE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_ALERT_CONDITIONS_VALUE_RequestMultiError(errors)
	}

	return nil
}

// CMP_ALERT_CONDITIONS_VALUE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// CMP_ALERT_CONDITIONS_VALUE_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_ALERT_CONDITIONS_VALUE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_ALERT_CONDITIONS_VALUE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_ALERT_CONDITIONS_VALUE_RequestMultiError) AllErrors() []error { return m }

// CMP_ALERT_CONDITIONS_VALUE_RequestValidationError is the validation error
// returned by CMP_ALERT_CONDITIONS_VALUE_Request.Validate if the designated
// constraints aren't met.
type CMP_ALERT_CONDITIONS_VALUE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_ALERT_CONDITIONS_VALUE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_ALERT_CONDITIONS_VALUE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_ALERT_CONDITIONS_VALUE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_ALERT_CONDITIONS_VALUE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_ALERT_CONDITIONS_VALUE_RequestValidationError) ErrorName() string {
	return "CMP_ALERT_CONDITIONS_VALUE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_ALERT_CONDITIONS_VALUE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_ALERT_CONDITIONS_VALUE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_ALERT_CONDITIONS_VALUE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_ALERT_CONDITIONS_VALUE_RequestValidationError{}

// Validate checks the field values on CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestMultiError, or nil if none found.
func (m *CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestMultiError(errors)
	}

	return nil
}

// CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestMultiError is an error wrapping
// multiple validation errors returned by
// CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestMultiError) AllErrors() []error { return m }

// CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestValidationError is the validation
// error returned by CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request.Validate if the
// designated constraints aren't met.
type CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestValidationError) ErrorName() string {
	return "CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_CLOUD_RESOURCE_ACCOUNT_LIST_RequestValidationError{}

// Validate checks the field values on CMP_CLOUD_RESOURCE_ECS_TREND_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CMP_CLOUD_RESOURCE_ECS_TREND_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_CLOUD_RESOURCE_ECS_TREND_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CMP_CLOUD_RESOURCE_ECS_TREND_RequestMultiError, or nil if none found.
func (m *CMP_CLOUD_RESOURCE_ECS_TREND_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_CLOUD_RESOURCE_ECS_TREND_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_CLOUD_RESOURCE_ECS_TREND_RequestMultiError(errors)
	}

	return nil
}

// CMP_CLOUD_RESOURCE_ECS_TREND_RequestMultiError is an error wrapping multiple
// validation errors returned by
// CMP_CLOUD_RESOURCE_ECS_TREND_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_CLOUD_RESOURCE_ECS_TREND_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_CLOUD_RESOURCE_ECS_TREND_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_CLOUD_RESOURCE_ECS_TREND_RequestMultiError) AllErrors() []error { return m }

// CMP_CLOUD_RESOURCE_ECS_TREND_RequestValidationError is the validation error
// returned by CMP_CLOUD_RESOURCE_ECS_TREND_Request.Validate if the designated
// constraints aren't met.
type CMP_CLOUD_RESOURCE_ECS_TREND_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_CLOUD_RESOURCE_ECS_TREND_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_CLOUD_RESOURCE_ECS_TREND_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_CLOUD_RESOURCE_ECS_TREND_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_CLOUD_RESOURCE_ECS_TREND_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_CLOUD_RESOURCE_ECS_TREND_RequestValidationError) ErrorName() string {
	return "CMP_CLOUD_RESOURCE_ECS_TREND_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_CLOUD_RESOURCE_ECS_TREND_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_CLOUD_RESOURCE_ECS_TREND_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_CLOUD_RESOURCE_ECS_TREND_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_CLOUD_RESOURCE_ECS_TREND_RequestValidationError{}

// Validate checks the field values on CMP_CLOUD_RESOURCE_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_CLOUD_RESOURCE_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_CLOUD_RESOURCE_LIST_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMP_CLOUD_RESOURCE_LIST_RequestMultiError, or nil if none found.
func (m *CMP_CLOUD_RESOURCE_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_CLOUD_RESOURCE_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_CLOUD_RESOURCE_LIST_RequestMultiError(errors)
	}

	return nil
}

// CMP_CLOUD_RESOURCE_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by CMP_CLOUD_RESOURCE_LIST_Request.ValidateAll()
// if the designated constraints aren't met.
type CMP_CLOUD_RESOURCE_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_CLOUD_RESOURCE_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_CLOUD_RESOURCE_LIST_RequestMultiError) AllErrors() []error { return m }

// CMP_CLOUD_RESOURCE_LIST_RequestValidationError is the validation error
// returned by CMP_CLOUD_RESOURCE_LIST_Request.Validate if the designated
// constraints aren't met.
type CMP_CLOUD_RESOURCE_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_CLOUD_RESOURCE_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_CLOUD_RESOURCE_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_CLOUD_RESOURCE_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_CLOUD_RESOURCE_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_CLOUD_RESOURCE_LIST_RequestValidationError) ErrorName() string {
	return "CMP_CLOUD_RESOURCE_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_CLOUD_RESOURCE_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_CLOUD_RESOURCE_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_CLOUD_RESOURCE_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_CLOUD_RESOURCE_LIST_RequestValidationError{}

// Validate checks the field values on CMP_CLOUD_RESOURCE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_CLOUD_RESOURCE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_CLOUD_RESOURCE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_CLOUD_RESOURCE_RequestMultiError, or nil if none found.
func (m *CMP_CLOUD_RESOURCE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_CLOUD_RESOURCE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_CLOUD_RESOURCE_RequestMultiError(errors)
	}

	return nil
}

// CMP_CLOUD_RESOURCE_RequestMultiError is an error wrapping multiple
// validation errors returned by CMP_CLOUD_RESOURCE_Request.ValidateAll() if
// the designated constraints aren't met.
type CMP_CLOUD_RESOURCE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_CLOUD_RESOURCE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_CLOUD_RESOURCE_RequestMultiError) AllErrors() []error { return m }

// CMP_CLOUD_RESOURCE_RequestValidationError is the validation error returned
// by CMP_CLOUD_RESOURCE_Request.Validate if the designated constraints aren't met.
type CMP_CLOUD_RESOURCE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_CLOUD_RESOURCE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_CLOUD_RESOURCE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_CLOUD_RESOURCE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_CLOUD_RESOURCE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_CLOUD_RESOURCE_RequestValidationError) ErrorName() string {
	return "CMP_CLOUD_RESOURCE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_CLOUD_RESOURCE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_CLOUD_RESOURCE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_CLOUD_RESOURCE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_CLOUD_RESOURCE_RequestValidationError{}

// Validate checks the field values on CMP_CLUSTER_IMPORT_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_CLUSTER_IMPORT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_CLUSTER_IMPORT_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_CLUSTER_IMPORT_RequestMultiError, or nil if none found.
func (m *CMP_CLUSTER_IMPORT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_CLUSTER_IMPORT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_CLUSTER_IMPORT_RequestMultiError(errors)
	}

	return nil
}

// CMP_CLUSTER_IMPORT_RequestMultiError is an error wrapping multiple
// validation errors returned by CMP_CLUSTER_IMPORT_Request.ValidateAll() if
// the designated constraints aren't met.
type CMP_CLUSTER_IMPORT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_CLUSTER_IMPORT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_CLUSTER_IMPORT_RequestMultiError) AllErrors() []error { return m }

// CMP_CLUSTER_IMPORT_RequestValidationError is the validation error returned
// by CMP_CLUSTER_IMPORT_Request.Validate if the designated constraints aren't met.
type CMP_CLUSTER_IMPORT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_CLUSTER_IMPORT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_CLUSTER_IMPORT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_CLUSTER_IMPORT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_CLUSTER_IMPORT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_CLUSTER_IMPORT_RequestValidationError) ErrorName() string {
	return "CMP_CLUSTER_IMPORT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_CLUSTER_IMPORT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_CLUSTER_IMPORT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_CLUSTER_IMPORT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_CLUSTER_IMPORT_RequestValidationError{}

// Validate checks the field values on CMP_CLUSTER_INFO_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_CLUSTER_INFO_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_CLUSTER_INFO_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_CLUSTER_INFO_RequestMultiError, or nil if none found.
func (m *CMP_CLUSTER_INFO_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_CLUSTER_INFO_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_CLUSTER_INFO_RequestMultiError(errors)
	}

	return nil
}

// CMP_CLUSTER_INFO_RequestMultiError is an error wrapping multiple validation
// errors returned by CMP_CLUSTER_INFO_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_CLUSTER_INFO_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_CLUSTER_INFO_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_CLUSTER_INFO_RequestMultiError) AllErrors() []error { return m }

// CMP_CLUSTER_INFO_RequestValidationError is the validation error returned by
// CMP_CLUSTER_INFO_Request.Validate if the designated constraints aren't met.
type CMP_CLUSTER_INFO_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_CLUSTER_INFO_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_CLUSTER_INFO_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_CLUSTER_INFO_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_CLUSTER_INFO_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_CLUSTER_INFO_RequestValidationError) ErrorName() string {
	return "CMP_CLUSTER_INFO_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_CLUSTER_INFO_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_CLUSTER_INFO_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_CLUSTER_INFO_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_CLUSTER_INFO_RequestValidationError{}

// Validate checks the field values on CMP_CLUSTER_INIT_COMMAND_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CMP_CLUSTER_INIT_COMMAND_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_CLUSTER_INIT_COMMAND_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMP_CLUSTER_INIT_COMMAND_RequestMultiError, or nil if none found.
func (m *CMP_CLUSTER_INIT_COMMAND_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_CLUSTER_INIT_COMMAND_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_CLUSTER_INIT_COMMAND_RequestMultiError(errors)
	}

	return nil
}

// CMP_CLUSTER_INIT_COMMAND_RequestMultiError is an error wrapping multiple
// validation errors returned by
// CMP_CLUSTER_INIT_COMMAND_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_CLUSTER_INIT_COMMAND_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_CLUSTER_INIT_COMMAND_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_CLUSTER_INIT_COMMAND_RequestMultiError) AllErrors() []error { return m }

// CMP_CLUSTER_INIT_COMMAND_RequestValidationError is the validation error
// returned by CMP_CLUSTER_INIT_COMMAND_Request.Validate if the designated
// constraints aren't met.
type CMP_CLUSTER_INIT_COMMAND_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_CLUSTER_INIT_COMMAND_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_CLUSTER_INIT_COMMAND_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_CLUSTER_INIT_COMMAND_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_CLUSTER_INIT_COMMAND_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_CLUSTER_INIT_COMMAND_RequestValidationError) ErrorName() string {
	return "CMP_CLUSTER_INIT_COMMAND_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_CLUSTER_INIT_COMMAND_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_CLUSTER_INIT_COMMAND_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_CLUSTER_INIT_COMMAND_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_CLUSTER_INIT_COMMAND_RequestValidationError{}

// Validate checks the field values on CMP_CLUSTER_INIT_RETRY_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_CLUSTER_INIT_RETRY_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_CLUSTER_INIT_RETRY_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMP_CLUSTER_INIT_RETRY_RequestMultiError, or nil if none found.
func (m *CMP_CLUSTER_INIT_RETRY_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_CLUSTER_INIT_RETRY_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_CLUSTER_INIT_RETRY_RequestMultiError(errors)
	}

	return nil
}

// CMP_CLUSTER_INIT_RETRY_RequestMultiError is an error wrapping multiple
// validation errors returned by CMP_CLUSTER_INIT_RETRY_Request.ValidateAll()
// if the designated constraints aren't met.
type CMP_CLUSTER_INIT_RETRY_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_CLUSTER_INIT_RETRY_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_CLUSTER_INIT_RETRY_RequestMultiError) AllErrors() []error { return m }

// CMP_CLUSTER_INIT_RETRY_RequestValidationError is the validation error
// returned by CMP_CLUSTER_INIT_RETRY_Request.Validate if the designated
// constraints aren't met.
type CMP_CLUSTER_INIT_RETRY_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_CLUSTER_INIT_RETRY_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_CLUSTER_INIT_RETRY_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_CLUSTER_INIT_RETRY_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_CLUSTER_INIT_RETRY_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_CLUSTER_INIT_RETRY_RequestValidationError) ErrorName() string {
	return "CMP_CLUSTER_INIT_RETRY_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_CLUSTER_INIT_RETRY_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_CLUSTER_INIT_RETRY_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_CLUSTER_INIT_RETRY_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_CLUSTER_INIT_RETRY_RequestValidationError{}

// Validate checks the field values on CMP_CLUSTER_PREVIEW_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_CLUSTER_PREVIEW_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_CLUSTER_PREVIEW_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_CLUSTER_PREVIEW_RequestMultiError, or nil if none found.
func (m *CMP_CLUSTER_PREVIEW_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_CLUSTER_PREVIEW_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_CLUSTER_PREVIEW_RequestMultiError(errors)
	}

	return nil
}

// CMP_CLUSTER_PREVIEW_RequestMultiError is an error wrapping multiple
// validation errors returned by CMP_CLUSTER_PREVIEW_Request.ValidateAll() if
// the designated constraints aren't met.
type CMP_CLUSTER_PREVIEW_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_CLUSTER_PREVIEW_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_CLUSTER_PREVIEW_RequestMultiError) AllErrors() []error { return m }

// CMP_CLUSTER_PREVIEW_RequestValidationError is the validation error returned
// by CMP_CLUSTER_PREVIEW_Request.Validate if the designated constraints
// aren't met.
type CMP_CLUSTER_PREVIEW_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_CLUSTER_PREVIEW_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_CLUSTER_PREVIEW_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_CLUSTER_PREVIEW_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_CLUSTER_PREVIEW_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_CLUSTER_PREVIEW_RequestValidationError) ErrorName() string {
	return "CMP_CLUSTER_PREVIEW_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_CLUSTER_PREVIEW_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_CLUSTER_PREVIEW_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_CLUSTER_PREVIEW_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_CLUSTER_PREVIEW_RequestValidationError{}

// Validate checks the field values on CMP_CREDENTIAL_ACCESSKEY_CREATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CMP_CREDENTIAL_ACCESSKEY_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CMP_CREDENTIAL_ACCESSKEY_CREATE_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestMultiError, or nil if none found.
func (m *CMP_CREDENTIAL_ACCESSKEY_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_CREDENTIAL_ACCESSKEY_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestMultiError(errors)
	}

	return nil
}

// CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// CMP_CREDENTIAL_ACCESSKEY_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestMultiError) AllErrors() []error { return m }

// CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestValidationError is the validation
// error returned by CMP_CREDENTIAL_ACCESSKEY_CREATE_Request.Validate if the
// designated constraints aren't met.
type CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestValidationError) ErrorName() string {
	return "CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_CREDENTIAL_ACCESSKEY_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_CREDENTIAL_ACCESSKEY_CREATE_RequestValidationError{}

// Validate checks the field values on CMP_CREDENTIAL_ACCESSKEY_GET_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CMP_CREDENTIAL_ACCESSKEY_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_CREDENTIAL_ACCESSKEY_GET_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CMP_CREDENTIAL_ACCESSKEY_GET_RequestMultiError, or nil if none found.
func (m *CMP_CREDENTIAL_ACCESSKEY_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_CREDENTIAL_ACCESSKEY_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_CREDENTIAL_ACCESSKEY_GET_RequestMultiError(errors)
	}

	return nil
}

// CMP_CREDENTIAL_ACCESSKEY_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by
// CMP_CREDENTIAL_ACCESSKEY_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_CREDENTIAL_ACCESSKEY_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_CREDENTIAL_ACCESSKEY_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_CREDENTIAL_ACCESSKEY_GET_RequestMultiError) AllErrors() []error { return m }

// CMP_CREDENTIAL_ACCESSKEY_GET_RequestValidationError is the validation error
// returned by CMP_CREDENTIAL_ACCESSKEY_GET_Request.Validate if the designated
// constraints aren't met.
type CMP_CREDENTIAL_ACCESSKEY_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_CREDENTIAL_ACCESSKEY_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_CREDENTIAL_ACCESSKEY_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_CREDENTIAL_ACCESSKEY_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_CREDENTIAL_ACCESSKEY_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_CREDENTIAL_ACCESSKEY_GET_RequestValidationError) ErrorName() string {
	return "CMP_CREDENTIAL_ACCESSKEY_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_CREDENTIAL_ACCESSKEY_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_CREDENTIAL_ACCESSKEY_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_CREDENTIAL_ACCESSKEY_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_CREDENTIAL_ACCESSKEY_GET_RequestValidationError{}

// Validate checks the field values on CMP_CREDENTIAL_ACCESSKEY_RESET_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CMP_CREDENTIAL_ACCESSKEY_RESET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CMP_CREDENTIAL_ACCESSKEY_RESET_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CMP_CREDENTIAL_ACCESSKEY_RESET_RequestMultiError, or nil if none found.
func (m *CMP_CREDENTIAL_ACCESSKEY_RESET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_CREDENTIAL_ACCESSKEY_RESET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_CREDENTIAL_ACCESSKEY_RESET_RequestMultiError(errors)
	}

	return nil
}

// CMP_CREDENTIAL_ACCESSKEY_RESET_RequestMultiError is an error wrapping
// multiple validation errors returned by
// CMP_CREDENTIAL_ACCESSKEY_RESET_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_CREDENTIAL_ACCESSKEY_RESET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_CREDENTIAL_ACCESSKEY_RESET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_CREDENTIAL_ACCESSKEY_RESET_RequestMultiError) AllErrors() []error { return m }

// CMP_CREDENTIAL_ACCESSKEY_RESET_RequestValidationError is the validation
// error returned by CMP_CREDENTIAL_ACCESSKEY_RESET_Request.Validate if the
// designated constraints aren't met.
type CMP_CREDENTIAL_ACCESSKEY_RESET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_CREDENTIAL_ACCESSKEY_RESET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_CREDENTIAL_ACCESSKEY_RESET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_CREDENTIAL_ACCESSKEY_RESET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_CREDENTIAL_ACCESSKEY_RESET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_CREDENTIAL_ACCESSKEY_RESET_RequestValidationError) ErrorName() string {
	return "CMP_CREDENTIAL_ACCESSKEY_RESET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_CREDENTIAL_ACCESSKEY_RESET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_CREDENTIAL_ACCESSKEY_RESET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_CREDENTIAL_ACCESSKEY_RESET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_CREDENTIAL_ACCESSKEY_RESET_RequestValidationError{}

// Validate checks the field values on CMP_K8S_CLUSTERS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_K8S_CLUSTERS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_K8S_CLUSTERS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_K8S_CLUSTERS_RequestMultiError, or nil if none found.
func (m *CMP_K8S_CLUSTERS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_K8S_CLUSTERS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_K8S_CLUSTERS_RequestMultiError(errors)
	}

	return nil
}

// CMP_K8S_CLUSTERS_RequestMultiError is an error wrapping multiple validation
// errors returned by CMP_K8S_CLUSTERS_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_K8S_CLUSTERS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_K8S_CLUSTERS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_K8S_CLUSTERS_RequestMultiError) AllErrors() []error { return m }

// CMP_K8S_CLUSTERS_RequestValidationError is the validation error returned by
// CMP_K8S_CLUSTERS_Request.Validate if the designated constraints aren't met.
type CMP_K8S_CLUSTERS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_K8S_CLUSTERS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_K8S_CLUSTERS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_K8S_CLUSTERS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_K8S_CLUSTERS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_K8S_CLUSTERS_RequestValidationError) ErrorName() string {
	return "CMP_K8S_CLUSTERS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_K8S_CLUSTERS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_K8S_CLUSTERS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_K8S_CLUSTERS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_K8S_CLUSTERS_RequestValidationError{}

// Validate checks the field values on CMP_NODE_LABELS_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_NODE_LABELS_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_NODE_LABELS_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_NODE_LABELS_LIST_RequestMultiError, or nil if none found.
func (m *CMP_NODE_LABELS_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_NODE_LABELS_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_NODE_LABELS_LIST_RequestMultiError(errors)
	}

	return nil
}

// CMP_NODE_LABELS_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by CMP_NODE_LABELS_LIST_Request.ValidateAll() if
// the designated constraints aren't met.
type CMP_NODE_LABELS_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_NODE_LABELS_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_NODE_LABELS_LIST_RequestMultiError) AllErrors() []error { return m }

// CMP_NODE_LABELS_LIST_RequestValidationError is the validation error returned
// by CMP_NODE_LABELS_LIST_Request.Validate if the designated constraints
// aren't met.
type CMP_NODE_LABELS_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_NODE_LABELS_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_NODE_LABELS_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_NODE_LABELS_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_NODE_LABELS_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_NODE_LABELS_LIST_RequestValidationError) ErrorName() string {
	return "CMP_NODE_LABELS_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_NODE_LABELS_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_NODE_LABELS_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_NODE_LABELS_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_NODE_LABELS_LIST_RequestValidationError{}

// Validate checks the field values on CMP_NODE_LOGS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_NODE_LOGS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_NODE_LOGS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_NODE_LOGS_RequestMultiError, or nil if none found.
func (m *CMP_NODE_LOGS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_NODE_LOGS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_NODE_LOGS_RequestMultiError(errors)
	}

	return nil
}

// CMP_NODE_LOGS_RequestMultiError is an error wrapping multiple validation
// errors returned by CMP_NODE_LOGS_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_NODE_LOGS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_NODE_LOGS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_NODE_LOGS_RequestMultiError) AllErrors() []error { return m }

// CMP_NODE_LOGS_RequestValidationError is the validation error returned by
// CMP_NODE_LOGS_Request.Validate if the designated constraints aren't met.
type CMP_NODE_LOGS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_NODE_LOGS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_NODE_LOGS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_NODE_LOGS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_NODE_LOGS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_NODE_LOGS_RequestValidationError) ErrorName() string {
	return "CMP_NODE_LOGS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_NODE_LOGS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_NODE_LOGS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_NODE_LOGS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_NODE_LOGS_RequestValidationError{}

// Validate checks the field values on CMP_RECORDS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_RECORDS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_RECORDS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_RECORDS_RequestMultiError, or nil if none found.
func (m *CMP_RECORDS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_RECORDS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_RECORDS_RequestMultiError(errors)
	}

	return nil
}

// CMP_RECORDS_RequestMultiError is an error wrapping multiple validation
// errors returned by CMP_RECORDS_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_RECORDS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_RECORDS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_RECORDS_RequestMultiError) AllErrors() []error { return m }

// CMP_RECORDS_RequestValidationError is the validation error returned by
// CMP_RECORDS_Request.Validate if the designated constraints aren't met.
type CMP_RECORDS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_RECORDS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_RECORDS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_RECORDS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_RECORDS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_RECORDS_RequestValidationError) ErrorName() string {
	return "CMP_RECORDS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_RECORDS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_RECORDS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_RECORDS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_RECORDS_RequestValidationError{}

// Validate checks the field values on CMP_RECORDTYPES_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_RECORDTYPES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_RECORDTYPES_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_RECORDTYPES_RequestMultiError, or nil if none found.
func (m *CMP_RECORDTYPES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_RECORDTYPES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_RECORDTYPES_RequestMultiError(errors)
	}

	return nil
}

// CMP_RECORDTYPES_RequestMultiError is an error wrapping multiple validation
// errors returned by CMP_RECORDTYPES_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_RECORDTYPES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_RECORDTYPES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_RECORDTYPES_RequestMultiError) AllErrors() []error { return m }

// CMP_RECORDTYPES_RequestValidationError is the validation error returned by
// CMP_RECORDTYPES_Request.Validate if the designated constraints aren't met.
type CMP_RECORDTYPES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_RECORDTYPES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_RECORDTYPES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_RECORDTYPES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_RECORDTYPES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_RECORDTYPES_RequestValidationError) ErrorName() string {
	return "CMP_RECORDTYPES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_RECORDTYPES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_RECORDTYPES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_RECORDTYPES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_RECORDTYPES_RequestValidationError{}

// Validate checks the field values on CMP_RESOURCE_OVERVIEW_CLASS_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CMP_RESOURCE_OVERVIEW_CLASS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_RESOURCE_OVERVIEW_CLASS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CMP_RESOURCE_OVERVIEW_CLASS_RequestMultiError, or nil if none found.
func (m *CMP_RESOURCE_OVERVIEW_CLASS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_RESOURCE_OVERVIEW_CLASS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_RESOURCE_OVERVIEW_CLASS_RequestMultiError(errors)
	}

	return nil
}

// CMP_RESOURCE_OVERVIEW_CLASS_RequestMultiError is an error wrapping multiple
// validation errors returned by
// CMP_RESOURCE_OVERVIEW_CLASS_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_RESOURCE_OVERVIEW_CLASS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_RESOURCE_OVERVIEW_CLASS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_RESOURCE_OVERVIEW_CLASS_RequestMultiError) AllErrors() []error { return m }

// CMP_RESOURCE_OVERVIEW_CLASS_RequestValidationError is the validation error
// returned by CMP_RESOURCE_OVERVIEW_CLASS_Request.Validate if the designated
// constraints aren't met.
type CMP_RESOURCE_OVERVIEW_CLASS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_RESOURCE_OVERVIEW_CLASS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_RESOURCE_OVERVIEW_CLASS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_RESOURCE_OVERVIEW_CLASS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_RESOURCE_OVERVIEW_CLASS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_RESOURCE_OVERVIEW_CLASS_RequestValidationError) ErrorName() string {
	return "CMP_RESOURCE_OVERVIEW_CLASS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_RESOURCE_OVERVIEW_CLASS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_RESOURCE_OVERVIEW_CLASS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_RESOURCE_OVERVIEW_CLASS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_RESOURCE_OVERVIEW_CLASS_RequestValidationError{}

// Validate checks the field values on
// CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestMultiError, or nil if none found.
func (m *CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestMultiError(errors)
	}

	return nil
}

// CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestMultiError is an error wrapping
// multiple validation errors returned by
// CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestMultiError) AllErrors() []error { return m }

// CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestValidationError is the validation
// error returned by CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request.Validate if
// the designated constraints aren't met.
type CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestValidationError) ErrorName() string {
	return "CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_RequestValidationError{}

// Validate checks the field values on CMP_RESOURCE_OVERVIEW_GAUGE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CMP_RESOURCE_OVERVIEW_GAUGE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_RESOURCE_OVERVIEW_GAUGE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CMP_RESOURCE_OVERVIEW_GAUGE_RequestMultiError, or nil if none found.
func (m *CMP_RESOURCE_OVERVIEW_GAUGE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_RESOURCE_OVERVIEW_GAUGE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_RESOURCE_OVERVIEW_GAUGE_RequestMultiError(errors)
	}

	return nil
}

// CMP_RESOURCE_OVERVIEW_GAUGE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// CMP_RESOURCE_OVERVIEW_GAUGE_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_RESOURCE_OVERVIEW_GAUGE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_RESOURCE_OVERVIEW_GAUGE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_RESOURCE_OVERVIEW_GAUGE_RequestMultiError) AllErrors() []error { return m }

// CMP_RESOURCE_OVERVIEW_GAUGE_RequestValidationError is the validation error
// returned by CMP_RESOURCE_OVERVIEW_GAUGE_Request.Validate if the designated
// constraints aren't met.
type CMP_RESOURCE_OVERVIEW_GAUGE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_RESOURCE_OVERVIEW_GAUGE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_RESOURCE_OVERVIEW_GAUGE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_RESOURCE_OVERVIEW_GAUGE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_RESOURCE_OVERVIEW_GAUGE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_RESOURCE_OVERVIEW_GAUGE_RequestValidationError) ErrorName() string {
	return "CMP_RESOURCE_OVERVIEW_GAUGE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_RESOURCE_OVERVIEW_GAUGE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_RESOURCE_OVERVIEW_GAUGE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_RESOURCE_OVERVIEW_GAUGE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_RESOURCE_OVERVIEW_GAUGE_RequestValidationError{}

// Validate checks the field values on
// CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestMultiError, or nil if none found.
func (m *CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestMultiError(errors)
	}

	return nil
}

// CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestMultiError is an error wrapping
// multiple validation errors returned by
// CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestMultiError) AllErrors() []error { return m }

// CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestValidationError is the validation
// error returned by CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request.Validate if
// the designated constraints aren't met.
type CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestValidationError) ErrorName() string {
	return "CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_RESOURCE_OVERVIEW_PROJECT_TREND_RequestValidationError{}

// Validate checks the field values on CMP_RESOURCE_OVERVIEW_REPORT_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CMP_RESOURCE_OVERVIEW_REPORT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_RESOURCE_OVERVIEW_REPORT_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CMP_RESOURCE_OVERVIEW_REPORT_RequestMultiError, or nil if none found.
func (m *CMP_RESOURCE_OVERVIEW_REPORT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_RESOURCE_OVERVIEW_REPORT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_RESOURCE_OVERVIEW_REPORT_RequestMultiError(errors)
	}

	return nil
}

// CMP_RESOURCE_OVERVIEW_REPORT_RequestMultiError is an error wrapping multiple
// validation errors returned by
// CMP_RESOURCE_OVERVIEW_REPORT_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_RESOURCE_OVERVIEW_REPORT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_RESOURCE_OVERVIEW_REPORT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_RESOURCE_OVERVIEW_REPORT_RequestMultiError) AllErrors() []error { return m }

// CMP_RESOURCE_OVERVIEW_REPORT_RequestValidationError is the validation error
// returned by CMP_RESOURCE_OVERVIEW_REPORT_Request.Validate if the designated
// constraints aren't met.
type CMP_RESOURCE_OVERVIEW_REPORT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_RESOURCE_OVERVIEW_REPORT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_RESOURCE_OVERVIEW_REPORT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_RESOURCE_OVERVIEW_REPORT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_RESOURCE_OVERVIEW_REPORT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_RESOURCE_OVERVIEW_REPORT_RequestValidationError) ErrorName() string {
	return "CMP_RESOURCE_OVERVIEW_REPORT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_RESOURCE_OVERVIEW_REPORT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_RESOURCE_OVERVIEW_REPORT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_RESOURCE_OVERVIEW_REPORT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_RESOURCE_OVERVIEW_REPORT_RequestValidationError{}

// Validate checks the field values on CMP_STEVE_CREATE_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_STEVE_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_STEVE_CREATE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_STEVE_CREATE_RequestMultiError, or nil if none found.
func (m *CMP_STEVE_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_STEVE_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_STEVE_CREATE_RequestMultiError(errors)
	}

	return nil
}

// CMP_STEVE_CREATE_RequestMultiError is an error wrapping multiple validation
// errors returned by CMP_STEVE_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_STEVE_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_STEVE_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_STEVE_CREATE_RequestMultiError) AllErrors() []error { return m }

// CMP_STEVE_CREATE_RequestValidationError is the validation error returned by
// CMP_STEVE_CREATE_Request.Validate if the designated constraints aren't met.
type CMP_STEVE_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_STEVE_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_STEVE_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_STEVE_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_STEVE_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_STEVE_CREATE_RequestValidationError) ErrorName() string {
	return "CMP_STEVE_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_STEVE_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_STEVE_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_STEVE_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_STEVE_CREATE_RequestValidationError{}

// Validate checks the field values on CMP_STEVE_DELETE_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_STEVE_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_STEVE_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_STEVE_DELETE_RequestMultiError, or nil if none found.
func (m *CMP_STEVE_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_STEVE_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_STEVE_DELETE_RequestMultiError(errors)
	}

	return nil
}

// CMP_STEVE_DELETE_RequestMultiError is an error wrapping multiple validation
// errors returned by CMP_STEVE_DELETE_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_STEVE_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_STEVE_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_STEVE_DELETE_RequestMultiError) AllErrors() []error { return m }

// CMP_STEVE_DELETE_RequestValidationError is the validation error returned by
// CMP_STEVE_DELETE_Request.Validate if the designated constraints aren't met.
type CMP_STEVE_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_STEVE_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_STEVE_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_STEVE_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_STEVE_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_STEVE_DELETE_RequestValidationError) ErrorName() string {
	return "CMP_STEVE_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_STEVE_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_STEVE_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_STEVE_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_STEVE_DELETE_RequestValidationError{}

// Validate checks the field values on CMP_STEVE_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_STEVE_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_STEVE_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_STEVE_GET_RequestMultiError, or nil if none found.
func (m *CMP_STEVE_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_STEVE_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_STEVE_GET_RequestMultiError(errors)
	}

	return nil
}

// CMP_STEVE_GET_RequestMultiError is an error wrapping multiple validation
// errors returned by CMP_STEVE_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_STEVE_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_STEVE_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_STEVE_GET_RequestMultiError) AllErrors() []error { return m }

// CMP_STEVE_GET_RequestValidationError is the validation error returned by
// CMP_STEVE_GET_Request.Validate if the designated constraints aren't met.
type CMP_STEVE_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_STEVE_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_STEVE_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_STEVE_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_STEVE_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_STEVE_GET_RequestValidationError) ErrorName() string {
	return "CMP_STEVE_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_STEVE_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_STEVE_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_STEVE_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_STEVE_GET_RequestValidationError{}

// Validate checks the field values on CMP_STEVE_PATCH_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_STEVE_PATCH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_STEVE_PATCH_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_STEVE_PATCH_RequestMultiError, or nil if none found.
func (m *CMP_STEVE_PATCH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_STEVE_PATCH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_STEVE_PATCH_RequestMultiError(errors)
	}

	return nil
}

// CMP_STEVE_PATCH_RequestMultiError is an error wrapping multiple validation
// errors returned by CMP_STEVE_PATCH_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_STEVE_PATCH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_STEVE_PATCH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_STEVE_PATCH_RequestMultiError) AllErrors() []error { return m }

// CMP_STEVE_PATCH_RequestValidationError is the validation error returned by
// CMP_STEVE_PATCH_Request.Validate if the designated constraints aren't met.
type CMP_STEVE_PATCH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_STEVE_PATCH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_STEVE_PATCH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_STEVE_PATCH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_STEVE_PATCH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_STEVE_PATCH_RequestValidationError) ErrorName() string {
	return "CMP_STEVE_PATCH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_STEVE_PATCH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_STEVE_PATCH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_STEVE_PATCH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_STEVE_PATCH_RequestValidationError{}

// Validate checks the field values on CMP_STEVE_UPDATE_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_STEVE_UPDATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_STEVE_UPDATE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_STEVE_UPDATE_RequestMultiError, or nil if none found.
func (m *CMP_STEVE_UPDATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_STEVE_UPDATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_STEVE_UPDATE_RequestMultiError(errors)
	}

	return nil
}

// CMP_STEVE_UPDATE_RequestMultiError is an error wrapping multiple validation
// errors returned by CMP_STEVE_UPDATE_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_STEVE_UPDATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_STEVE_UPDATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_STEVE_UPDATE_RequestMultiError) AllErrors() []error { return m }

// CMP_STEVE_UPDATE_RequestValidationError is the validation error returned by
// CMP_STEVE_UPDATE_Request.Validate if the designated constraints aren't met.
type CMP_STEVE_UPDATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_STEVE_UPDATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_STEVE_UPDATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_STEVE_UPDATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_STEVE_UPDATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_STEVE_UPDATE_RequestValidationError) ErrorName() string {
	return "CMP_STEVE_UPDATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_STEVE_UPDATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_STEVE_UPDATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_STEVE_UPDATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_STEVE_UPDATE_RequestValidationError{}

// Validate checks the field values on CMP_STEVE_WS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMP_STEVE_WS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMP_STEVE_WS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMP_STEVE_WS_RequestMultiError, or nil if none found.
func (m *CMP_STEVE_WS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMP_STEVE_WS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMP_STEVE_WS_RequestMultiError(errors)
	}

	return nil
}

// CMP_STEVE_WS_RequestMultiError is an error wrapping multiple validation
// errors returned by CMP_STEVE_WS_Request.ValidateAll() if the designated
// constraints aren't met.
type CMP_STEVE_WS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMP_STEVE_WS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMP_STEVE_WS_RequestMultiError) AllErrors() []error { return m }

// CMP_STEVE_WS_RequestValidationError is the validation error returned by
// CMP_STEVE_WS_Request.Validate if the designated constraints aren't met.
type CMP_STEVE_WS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMP_STEVE_WS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMP_STEVE_WS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMP_STEVE_WS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMP_STEVE_WS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMP_STEVE_WS_RequestValidationError) ErrorName() string {
	return "CMP_STEVE_WS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMP_STEVE_WS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMP_STEVE_WS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMP_STEVE_WS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMP_STEVE_WS_RequestValidationError{}

// Validate checks the field values on CloudAddonResourceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAddonResourceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAddonResourceDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloudAddonResourceDeleteRequestMultiError, or nil if none found.
func (m *CloudAddonResourceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAddonResourceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for RecordID

	// no validation rules for ProjectID

	// no validation rules for AddonID

	// no validation rules for InstanceID

	// no validation rules for Vendor

	// no validation rules for Region

	if len(errors) > 0 {
		return CloudAddonResourceDeleteRequestMultiError(errors)
	}

	return nil
}

// CloudAddonResourceDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by CloudAddonResourceDeleteRequest.ValidateAll()
// if the designated constraints aren't met.
type CloudAddonResourceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAddonResourceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAddonResourceDeleteRequestMultiError) AllErrors() []error { return m }

// CloudAddonResourceDeleteRequestValidationError is the validation error
// returned by CloudAddonResourceDeleteRequest.Validate if the designated
// constraints aren't met.
type CloudAddonResourceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAddonResourceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAddonResourceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAddonResourceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAddonResourceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAddonResourceDeleteRequestValidationError) ErrorName() string {
	return "CloudAddonResourceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAddonResourceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAddonResourceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAddonResourceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAddonResourceDeleteRequestValidationError{}

// Validate checks the field values on CloudAddonResourceDeleteRespnse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudAddonResourceDeleteRespnse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudAddonResourceDeleteRespnse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloudAddonResourceDeleteRespnseMultiError, or nil if none found.
func (m *CloudAddonResourceDeleteRespnse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudAddonResourceDeleteRespnse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloudAddonResourceDeleteRespnseMultiError(errors)
	}

	return nil
}

// CloudAddonResourceDeleteRespnseMultiError is an error wrapping multiple
// validation errors returned by CloudAddonResourceDeleteRespnse.ValidateAll()
// if the designated constraints aren't met.
type CloudAddonResourceDeleteRespnseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudAddonResourceDeleteRespnseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudAddonResourceDeleteRespnseMultiError) AllErrors() []error { return m }

// CloudAddonResourceDeleteRespnseValidationError is the validation error
// returned by CloudAddonResourceDeleteRespnse.Validate if the designated
// constraints aren't met.
type CloudAddonResourceDeleteRespnseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudAddonResourceDeleteRespnseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudAddonResourceDeleteRespnseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudAddonResourceDeleteRespnseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudAddonResourceDeleteRespnseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudAddonResourceDeleteRespnseValidationError) ErrorName() string {
	return "CloudAddonResourceDeleteRespnseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudAddonResourceDeleteRespnseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudAddonResourceDeleteRespnse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudAddonResourceDeleteRespnseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudAddonResourceDeleteRespnseValidationError{}

// Validate checks the field values on CloudClusterContainerInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudClusterContainerInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudClusterContainerInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudClusterContainerInfoMultiError, or nil if none found.
func (m *CloudClusterContainerInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudClusterContainerInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DockerRoot

	// no validation rules for ExecRoot

	// no validation rules for ServiceCIDR

	// no validation rules for PodCIDR

	// no validation rules for DockerCIDR

	// no validation rules for DockerBip

	if len(errors) > 0 {
		return CloudClusterContainerInfoMultiError(errors)
	}

	return nil
}

// CloudClusterContainerInfoMultiError is an error wrapping multiple validation
// errors returned by CloudClusterContainerInfo.ValidateAll() if the
// designated constraints aren't met.
type CloudClusterContainerInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudClusterContainerInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudClusterContainerInfoMultiError) AllErrors() []error { return m }

// CloudClusterContainerInfoValidationError is the validation error returned by
// CloudClusterContainerInfo.Validate if the designated constraints aren't met.
type CloudClusterContainerInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudClusterContainerInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudClusterContainerInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudClusterContainerInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudClusterContainerInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudClusterContainerInfoValidationError) ErrorName() string {
	return "CloudClusterContainerInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CloudClusterContainerInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudClusterContainerInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudClusterContainerInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudClusterContainerInfoValidationError{}

// Validate checks the field values on CloudClusterGlusterfs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudClusterGlusterfs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudClusterGlusterfs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudClusterGlusterfsMultiError, or nil if none found.
func (m *CloudClusterGlusterfs) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudClusterGlusterfs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GlusterfsIps

	if len(errors) > 0 {
		return CloudClusterGlusterfsMultiError(errors)
	}

	return nil
}

// CloudClusterGlusterfsMultiError is an error wrapping multiple validation
// errors returned by CloudClusterGlusterfs.ValidateAll() if the designated
// constraints aren't met.
type CloudClusterGlusterfsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudClusterGlusterfsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudClusterGlusterfsMultiError) AllErrors() []error { return m }

// CloudClusterGlusterfsValidationError is the validation error returned by
// CloudClusterGlusterfs.Validate if the designated constraints aren't met.
type CloudClusterGlusterfsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudClusterGlusterfsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudClusterGlusterfsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudClusterGlusterfsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudClusterGlusterfsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudClusterGlusterfsValidationError) ErrorName() string {
	return "CloudClusterGlusterfsValidationError"
}

// Error satisfies the builtin error interface
func (e CloudClusterGlusterfsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudClusterGlusterfs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudClusterGlusterfsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudClusterGlusterfsValidationError{}

// Validate checks the field values on CloudClusterHostsInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudClusterHostsInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudClusterHostsInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudClusterHostsInfoMultiError, or nil if none found.
func (m *CloudClusterHostsInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudClusterHostsInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HostIps

	// no validation rules for Device

	// no validation rules for DataPath

	if len(errors) > 0 {
		return CloudClusterHostsInfoMultiError(errors)
	}

	return nil
}

// CloudClusterHostsInfoMultiError is an error wrapping multiple validation
// errors returned by CloudClusterHostsInfo.ValidateAll() if the designated
// constraints aren't met.
type CloudClusterHostsInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudClusterHostsInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudClusterHostsInfoMultiError) AllErrors() []error { return m }

// CloudClusterHostsInfoValidationError is the validation error returned by
// CloudClusterHostsInfo.Validate if the designated constraints aren't met.
type CloudClusterHostsInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudClusterHostsInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudClusterHostsInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudClusterHostsInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudClusterHostsInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudClusterHostsInfoValidationError) ErrorName() string {
	return "CloudClusterHostsInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CloudClusterHostsInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudClusterHostsInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudClusterHostsInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudClusterHostsInfoValidationError{}

// Validate checks the field values on CloudClusterInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloudClusterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudClusterInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudClusterInfoMultiError, or nil if none found.
func (m *CloudClusterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudClusterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for ClusterAccessKey

	// no validation rules for DisplayName

	// no validation rules for RootDomain

	// no validation rules for EnableHttps

	// no validation rules for ClusterSize

	// no validation rules for Nameservers

	// no validation rules for CollectorURL

	// no validation rules for OpenAPI

	// no validation rules for ClusterDialer

	if len(errors) > 0 {
		return CloudClusterInfoMultiError(errors)
	}

	return nil
}

// CloudClusterInfoMultiError is an error wrapping multiple validation errors
// returned by CloudClusterInfo.ValidateAll() if the designated constraints
// aren't met.
type CloudClusterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudClusterInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudClusterInfoMultiError) AllErrors() []error { return m }

// CloudClusterInfoValidationError is the validation error returned by
// CloudClusterInfo.Validate if the designated constraints aren't met.
type CloudClusterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudClusterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudClusterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudClusterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudClusterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudClusterInfoValidationError) ErrorName() string { return "CloudClusterInfoValidationError" }

// Error satisfies the builtin error interface
func (e CloudClusterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudClusterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudClusterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudClusterInfoValidationError{}

// Validate checks the field values on CloudClusterInstaller with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudClusterInstaller) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudClusterInstaller with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudClusterInstallerMultiError, or nil if none found.
func (m *CloudClusterInstaller) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudClusterInstaller) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstallerIp

	// no validation rules for User

	// no validation rules for Password

	// no validation rules for Port

	if len(errors) > 0 {
		return CloudClusterInstallerMultiError(errors)
	}

	return nil
}

// CloudClusterInstallerMultiError is an error wrapping multiple validation
// errors returned by CloudClusterInstaller.ValidateAll() if the designated
// constraints aren't met.
type CloudClusterInstallerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudClusterInstallerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudClusterInstallerMultiError) AllErrors() []error { return m }

// CloudClusterInstallerValidationError is the validation error returned by
// CloudClusterInstaller.Validate if the designated constraints aren't met.
type CloudClusterInstallerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudClusterInstallerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudClusterInstallerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudClusterInstallerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudClusterInstallerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudClusterInstallerValidationError) ErrorName() string {
	return "CloudClusterInstallerValidationError"
}

// Error satisfies the builtin error interface
func (e CloudClusterInstallerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudClusterInstaller.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudClusterInstallerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudClusterInstallerValidationError{}

// Validate checks the field values on CloudClusterNas with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloudClusterNas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudClusterNas with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudClusterNasMultiError, or nil if none found.
func (m *CloudClusterNas) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudClusterNas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NasDomain

	// no validation rules for NasPath

	if len(errors) > 0 {
		return CloudClusterNasMultiError(errors)
	}

	return nil
}

// CloudClusterNasMultiError is an error wrapping multiple validation errors
// returned by CloudClusterNas.ValidateAll() if the designated constraints
// aren't met.
type CloudClusterNasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudClusterNasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudClusterNasMultiError) AllErrors() []error { return m }

// CloudClusterNasValidationError is the validation error returned by
// CloudClusterNas.Validate if the designated constraints aren't met.
type CloudClusterNasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudClusterNasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudClusterNasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudClusterNasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudClusterNasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudClusterNasValidationError) ErrorName() string { return "CloudClusterNasValidationError" }

// Error satisfies the builtin error interface
func (e CloudClusterNasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudClusterNas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudClusterNasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudClusterNasValidationError{}

// Validate checks the field values on CloudClusterNewCreateInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudClusterNewCreateInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudClusterNewCreateInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudClusterNewCreateInfoMultiError, or nil if none found.
func (m *CloudClusterNewCreateInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudClusterNewCreateInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudVendor

	// no validation rules for CloudVendorName

	// no validation rules for CloudBasicRsc

	// no validation rules for Region

	// no validation rules for ClusterType

	// no validation rules for ClusterSpec

	// no validation rules for ChargeType

	// no validation rules for ChargePeriod

	// no validation rules for AppNodeNum

	// no validation rules for AccessKey

	// no validation rules for SecretKey

	// no validation rules for VpcID

	// no validation rules for VpcCIDR

	// no validation rules for VSwitchID

	// no validation rules for VSwitchCIDR

	// no validation rules for NatGatewayID

	// no validation rules for ForwardTableID

	// no validation rules for SnatTableID

	// no validation rules for K8SVersion

	// no validation rules for EcsInstType

	// no validation rules for Terraform

	if len(errors) > 0 {
		return CloudClusterNewCreateInfoMultiError(errors)
	}

	return nil
}

// CloudClusterNewCreateInfoMultiError is an error wrapping multiple validation
// errors returned by CloudClusterNewCreateInfo.ValidateAll() if the
// designated constraints aren't met.
type CloudClusterNewCreateInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudClusterNewCreateInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudClusterNewCreateInfoMultiError) AllErrors() []error { return m }

// CloudClusterNewCreateInfoValidationError is the validation error returned by
// CloudClusterNewCreateInfo.Validate if the designated constraints aren't met.
type CloudClusterNewCreateInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudClusterNewCreateInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudClusterNewCreateInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudClusterNewCreateInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudClusterNewCreateInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudClusterNewCreateInfoValidationError) ErrorName() string {
	return "CloudClusterNewCreateInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CloudClusterNewCreateInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudClusterNewCreateInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudClusterNewCreateInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudClusterNewCreateInfoValidationError{}

// Validate checks the field values on CloudClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudClusterRequestMultiError, or nil if none found.
func (m *CloudClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for OrgName

	// no validation rules for DiceVersion

	// no validation rules for CentralClusterName

	// no validation rules for CentralRootDomain

	// no validation rules for CentralDiceProtocol

	if all {
		switch v := interface{}(m.GetCloudClusterInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudClusterInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudClusterRequestValidationError{
				field:  "CloudClusterInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCloudClusterContainerInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterContainerInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterContainerInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudClusterContainerInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudClusterRequestValidationError{
				field:  "CloudClusterContainerInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCloudClusterNewCreateInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterNewCreateInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterNewCreateInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudClusterNewCreateInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudClusterRequestValidationError{
				field:  "CloudClusterNewCreateInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCloudClusterInstaller()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterInstaller",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterInstaller",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudClusterInstaller()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudClusterRequestValidationError{
				field:  "CloudClusterInstaller",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCloudClusterNas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterNas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterNas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudClusterNas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudClusterRequestValidationError{
				field:  "CloudClusterNas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCloudClusterGlusterfs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterGlusterfs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterGlusterfs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudClusterGlusterfs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudClusterRequestValidationError{
				field:  "CloudClusterGlusterfs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCloudClusterHostsInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterHostsInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudClusterRequestValidationError{
					field:  "CloudClusterHostsInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudClusterHostsInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudClusterRequestValidationError{
				field:  "CloudClusterHostsInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloudClusterRequestMultiError(errors)
	}

	return nil
}

// CloudClusterRequestMultiError is an error wrapping multiple validation
// errors returned by CloudClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type CloudClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudClusterRequestMultiError) AllErrors() []error { return m }

// CloudClusterRequestValidationError is the validation error returned by
// CloudClusterRequest.Validate if the designated constraints aren't met.
type CloudClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudClusterRequestValidationError) ErrorName() string {
	return "CloudClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudClusterRequestValidationError{}

// Validate checks the field values on CloudClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudClusterResponseMultiError, or nil if none found.
func (m *CloudClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudClusterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudClusterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudClusterResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloudClusterResponseMultiError(errors)
	}

	return nil
}

// CloudClusterResponseMultiError is an error wrapping multiple validation
// errors returned by CloudClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type CloudClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudClusterResponseMultiError) AllErrors() []error { return m }

// CloudClusterResponseValidationError is the validation error returned by
// CloudClusterResponse.Validate if the designated constraints aren't met.
type CloudClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudClusterResponseValidationError) ErrorName() string {
	return "CloudClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudClusterResponseValidationError{}

// Validate checks the field values on CloudNodesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloudNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudNodesRequestMultiError, or nil if none found.
func (m *CloudNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for OrgID

	// no validation rules for CloudVendor

	// no validation rules for AvailabilityZone

	// no validation rules for Region

	// no validation rules for ChargeType

	// no validation rules for ChargePeriod

	// no validation rules for AccessKey

	// no validation rules for SecretKey

	// no validation rules for CloudResource

	// no validation rules for InstancePassword

	// no validation rules for InstanceNum

	// no validation rules for InstanceType

	// no validation rules for DiskType

	// no validation rules for DiskSize

	// no validation rules for VSwitchId

	// no validation rules for Terraform

	if len(errors) > 0 {
		return CloudNodesRequestMultiError(errors)
	}

	return nil
}

// CloudNodesRequestMultiError is an error wrapping multiple validation errors
// returned by CloudNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type CloudNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudNodesRequestMultiError) AllErrors() []error { return m }

// CloudNodesRequestValidationError is the validation error returned by
// CloudNodesRequest.Validate if the designated constraints aren't met.
type CloudNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudNodesRequestValidationError) ErrorName() string {
	return "CloudNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudNodesRequestValidationError{}

// Validate checks the field values on CloudNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudNodesResponseMultiError, or nil if none found.
func (m *CloudNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudNodesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudNodesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudNodesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloudNodesResponseMultiError(errors)
	}

	return nil
}

// CloudNodesResponseMultiError is an error wrapping multiple validation errors
// returned by CloudNodesResponse.ValidateAll() if the designated constraints
// aren't met.
type CloudNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudNodesResponseMultiError) AllErrors() []error { return m }

// CloudNodesResponseValidationError is the validation error returned by
// CloudNodesResponse.Validate if the designated constraints aren't met.
type CloudNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudNodesResponseValidationError) ErrorName() string {
	return "CloudNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudNodesResponseValidationError{}

// Validate checks the field values on CloudResourceDetailInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceDetailInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceDetailInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceDetailInfoMultiError, or nil if none found.
func (m *CloudResourceDetailInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceDetailInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudResourceDetailInfoValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudResourceDetailInfoValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudResourceDetailInfoValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudResourceDetailInfoMultiError(errors)
	}

	return nil
}

// CloudResourceDetailInfoMultiError is an error wrapping multiple validation
// errors returned by CloudResourceDetailInfo.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceDetailInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceDetailInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceDetailInfoMultiError) AllErrors() []error { return m }

// CloudResourceDetailInfoValidationError is the validation error returned by
// CloudResourceDetailInfo.Validate if the designated constraints aren't met.
type CloudResourceDetailInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceDetailInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceDetailInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceDetailInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceDetailInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceDetailInfoValidationError) ErrorName() string {
	return "CloudResourceDetailInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceDetailInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceDetailInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceDetailInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceDetailInfoValidationError{}

// Validate checks the field values on CloudResourceDetailItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceDetailItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceDetailItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceDetailItemMultiError, or nil if none found.
func (m *CloudResourceDetailItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceDetailItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Value

	if len(errors) > 0 {
		return CloudResourceDetailItemMultiError(errors)
	}

	return nil
}

// CloudResourceDetailItemMultiError is an error wrapping multiple validation
// errors returned by CloudResourceDetailItem.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceDetailItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceDetailItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceDetailItemMultiError) AllErrors() []error { return m }

// CloudResourceDetailItemValidationError is the validation error returned by
// CloudResourceDetailItem.Validate if the designated constraints aren't met.
type CloudResourceDetailItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceDetailItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceDetailItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceDetailItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceDetailItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceDetailItemValidationError) ErrorName() string {
	return "CloudResourceDetailItemValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceDetailItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceDetailItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceDetailItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceDetailItemValidationError{}

// Validate checks the field values on CloudResourceMysqlAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceMysqlAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlAccount with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlAccountMultiError, or nil if none found.
func (m *CloudResourceMysqlAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for AccountPrivilege

	if len(errors) > 0 {
		return CloudResourceMysqlAccountMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlAccountMultiError is an error wrapping multiple validation
// errors returned by CloudResourceMysqlAccount.ValidateAll() if the
// designated constraints aren't met.
type CloudResourceMysqlAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlAccountMultiError) AllErrors() []error { return m }

// CloudResourceMysqlAccountValidationError is the validation error returned by
// CloudResourceMysqlAccount.Validate if the designated constraints aren't met.
type CloudResourceMysqlAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlAccountValidationError) ErrorName() string {
	return "CloudResourceMysqlAccountValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlAccountValidationError{}

// Validate checks the field values on CloudResourceMysqlAccountPrivileges with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceMysqlAccountPrivileges) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlAccountPrivileges
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlAccountPrivilegesMultiError, or nil if none found.
func (m *CloudResourceMysqlAccountPrivileges) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlAccountPrivileges) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DBName

	// no validation rules for AccountPrivilege

	if len(errors) > 0 {
		return CloudResourceMysqlAccountPrivilegesMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlAccountPrivilegesMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceMysqlAccountPrivileges.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceMysqlAccountPrivilegesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlAccountPrivilegesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlAccountPrivilegesMultiError) AllErrors() []error { return m }

// CloudResourceMysqlAccountPrivilegesValidationError is the validation error
// returned by CloudResourceMysqlAccountPrivileges.Validate if the designated
// constraints aren't met.
type CloudResourceMysqlAccountPrivilegesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlAccountPrivilegesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlAccountPrivilegesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlAccountPrivilegesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlAccountPrivilegesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlAccountPrivilegesValidationError) ErrorName() string {
	return "CloudResourceMysqlAccountPrivilegesValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlAccountPrivilegesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlAccountPrivileges.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlAccountPrivilegesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlAccountPrivilegesValidationError{}

// Validate checks the field values on CloudResourceMysqlBasicData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceMysqlBasicData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlBasicData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlBasicDataMultiError, or nil if none found.
func (m *CloudResourceMysqlBasicData) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlBasicData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Region

	// no validation rules for Category

	// no validation rules for Spec

	// no validation rules for Version

	// no validation rules for Status

	// no validation rules for ChargeType

	// no validation rules for CreateTime

	// no validation rules for ExpireTime

	// no validation rules for Tag

	if len(errors) > 0 {
		return CloudResourceMysqlBasicDataMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlBasicDataMultiError is an error wrapping multiple
// validation errors returned by CloudResourceMysqlBasicData.ValidateAll() if
// the designated constraints aren't met.
type CloudResourceMysqlBasicDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlBasicDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlBasicDataMultiError) AllErrors() []error { return m }

// CloudResourceMysqlBasicDataValidationError is the validation error returned
// by CloudResourceMysqlBasicData.Validate if the designated constraints
// aren't met.
type CloudResourceMysqlBasicDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlBasicDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlBasicDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlBasicDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlBasicDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlBasicDataValidationError) ErrorName() string {
	return "CloudResourceMysqlBasicDataValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlBasicDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlBasicData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlBasicDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlBasicDataValidationError{}

// Validate checks the field values on CloudResourceMysqlDB with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceMysqlDB) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlDB with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlDBMultiError, or nil if none found.
func (m *CloudResourceMysqlDB) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlDB) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DBName

	// no validation rules for AddonID

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudResourceMysqlDBValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudResourceMysqlDBValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudResourceMysqlDBValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudResourceMysqlDBMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlDBMultiError is an error wrapping multiple validation
// errors returned by CloudResourceMysqlDB.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceMysqlDBMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlDBMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlDBMultiError) AllErrors() []error { return m }

// CloudResourceMysqlDBValidationError is the validation error returned by
// CloudResourceMysqlDB.Validate if the designated constraints aren't met.
type CloudResourceMysqlDBValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlDBValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlDBValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlDBValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlDBValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlDBValidationError) ErrorName() string {
	return "CloudResourceMysqlDBValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlDBValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlDB.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlDBValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlDBValidationError{}

// Validate checks the field values on CloudResourceMysqlDBInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceMysqlDBInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlDBInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlDBInfoMultiError, or nil if none found.
func (m *CloudResourceMysqlDBInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlDBInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for InstanceID

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudResourceMysqlDBInfoValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudResourceMysqlDBInfoValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudResourceMysqlDBInfoValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudResourceMysqlDBInfoMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlDBInfoMultiError is an error wrapping multiple validation
// errors returned by CloudResourceMysqlDBInfo.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceMysqlDBInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlDBInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlDBInfoMultiError) AllErrors() []error { return m }

// CloudResourceMysqlDBInfoValidationError is the validation error returned by
// CloudResourceMysqlDBInfo.Validate if the designated constraints aren't met.
type CloudResourceMysqlDBInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlDBInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlDBInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlDBInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlDBInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlDBInfoValidationError) ErrorName() string {
	return "CloudResourceMysqlDBInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlDBInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlDBInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlDBInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlDBInfoValidationError{}

// Validate checks the field values on CloudResourceMysqlDBRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceMysqlDBRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlDBRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlDBRequestMultiError, or nil if none found.
func (m *CloudResourceMysqlDBRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlDBRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCloudResourceMysqlDetailInfoRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudResourceMysqlDBRequestValidationError{
					field:  "CloudResourceMysqlDetailInfoRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudResourceMysqlDBRequestValidationError{
					field:  "CloudResourceMysqlDetailInfoRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudResourceMysqlDetailInfoRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudResourceMysqlDBRequestValidationError{
				field:  "CloudResourceMysqlDetailInfoRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DBName

	// no validation rules for InstanceID

	if len(errors) > 0 {
		return CloudResourceMysqlDBRequestMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlDBRequestMultiError is an error wrapping multiple
// validation errors returned by CloudResourceMysqlDBRequest.ValidateAll() if
// the designated constraints aren't met.
type CloudResourceMysqlDBRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlDBRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlDBRequestMultiError) AllErrors() []error { return m }

// CloudResourceMysqlDBRequestValidationError is the validation error returned
// by CloudResourceMysqlDBRequest.Validate if the designated constraints
// aren't met.
type CloudResourceMysqlDBRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlDBRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlDBRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlDBRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlDBRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlDBRequestValidationError) ErrorName() string {
	return "CloudResourceMysqlDBRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlDBRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlDBRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlDBRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlDBRequestValidationError{}

// Validate checks the field values on CloudResourceMysqlDBResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceMysqlDBResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlDBResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlDBResponseMultiError, or nil if none found.
func (m *CloudResourceMysqlDBResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlDBResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudResourceMysqlDBResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudResourceMysqlDBResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudResourceMysqlDBResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloudResourceMysqlDBResponseMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlDBResponseMultiError is an error wrapping multiple
// validation errors returned by CloudResourceMysqlDBResponse.ValidateAll() if
// the designated constraints aren't met.
type CloudResourceMysqlDBResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlDBResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlDBResponseMultiError) AllErrors() []error { return m }

// CloudResourceMysqlDBResponseValidationError is the validation error returned
// by CloudResourceMysqlDBResponse.Validate if the designated constraints
// aren't met.
type CloudResourceMysqlDBResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlDBResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlDBResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlDBResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlDBResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlDBResponseValidationError) ErrorName() string {
	return "CloudResourceMysqlDBResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlDBResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlDBResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlDBResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlDBResponseValidationError{}

// Validate checks the field values on CloudResourceMysqlData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceMysqlData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlDataMultiError, or nil if none found.
func (m *CloudResourceMysqlData) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudResourceMysqlDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudResourceMysqlDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudResourceMysqlDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudResourceMysqlDataMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlDataMultiError is an error wrapping multiple validation
// errors returned by CloudResourceMysqlData.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceMysqlDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlDataMultiError) AllErrors() []error { return m }

// CloudResourceMysqlDataValidationError is the validation error returned by
// CloudResourceMysqlData.Validate if the designated constraints aren't met.
type CloudResourceMysqlDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlDataValidationError) ErrorName() string {
	return "CloudResourceMysqlDataValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlDataValidationError{}

// Validate checks the field values on CloudResourceMysqlDetailInfoData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceMysqlDetailInfoData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlDetailInfoData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlDetailInfoDataMultiError, or nil if none found.
func (m *CloudResourceMysqlDetailInfoData) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlDetailInfoData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Category

	// no validation rules for RegionId

	// no validation rules for VpcId

	// no validation rules for VSwitchId

	// no validation rules for ZoneId

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for Memory

	// no validation rules for StorageSize

	// no validation rules for StorageType

	// no validation rules for Status

	if len(errors) > 0 {
		return CloudResourceMysqlDetailInfoDataMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlDetailInfoDataMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceMysqlDetailInfoData.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceMysqlDetailInfoDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlDetailInfoDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlDetailInfoDataMultiError) AllErrors() []error { return m }

// CloudResourceMysqlDetailInfoDataValidationError is the validation error
// returned by CloudResourceMysqlDetailInfoData.Validate if the designated
// constraints aren't met.
type CloudResourceMysqlDetailInfoDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlDetailInfoDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlDetailInfoDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlDetailInfoDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlDetailInfoDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlDetailInfoDataValidationError) ErrorName() string {
	return "CloudResourceMysqlDetailInfoDataValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlDetailInfoDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlDetailInfoData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlDetailInfoDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlDetailInfoDataValidationError{}

// Validate checks the field values on CloudResourceMysqlDetailInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceMysqlDetailInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlDetailInfoRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlDetailInfoRequestMultiError, or nil if none found.
func (m *CloudResourceMysqlDetailInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlDetailInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for InstanceID

	// no validation rules for Idorname

	if len(errors) > 0 {
		return CloudResourceMysqlDetailInfoRequestMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlDetailInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceMysqlDetailInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceMysqlDetailInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlDetailInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlDetailInfoRequestMultiError) AllErrors() []error { return m }

// CloudResourceMysqlDetailInfoRequestValidationError is the validation error
// returned by CloudResourceMysqlDetailInfoRequest.Validate if the designated
// constraints aren't met.
type CloudResourceMysqlDetailInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlDetailInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlDetailInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlDetailInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlDetailInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlDetailInfoRequestValidationError) ErrorName() string {
	return "CloudResourceMysqlDetailInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlDetailInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlDetailInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlDetailInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlDetailInfoRequestValidationError{}

// Validate checks the field values on CloudResourceMysqlDetailInfoResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CloudResourceMysqlDetailInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlDetailInfoResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlDetailInfoResponseMultiError, or nil if none found.
func (m *CloudResourceMysqlDetailInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlDetailInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudResourceMysqlDetailInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudResourceMysqlDetailInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudResourceMysqlDetailInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloudResourceMysqlDetailInfoResponseMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlDetailInfoResponseMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceMysqlDetailInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceMysqlDetailInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlDetailInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlDetailInfoResponseMultiError) AllErrors() []error { return m }

// CloudResourceMysqlDetailInfoResponseValidationError is the validation error
// returned by CloudResourceMysqlDetailInfoResponse.Validate if the designated
// constraints aren't met.
type CloudResourceMysqlDetailInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlDetailInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlDetailInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlDetailInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlDetailInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlDetailInfoResponseValidationError) ErrorName() string {
	return "CloudResourceMysqlDetailInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlDetailInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlDetailInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlDetailInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlDetailInfoResponseValidationError{}

// Validate checks the field values on CloudResourceMysqlListAccountData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceMysqlListAccountData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlListAccountData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlListAccountDataMultiError, or nil if none found.
func (m *CloudResourceMysqlListAccountData) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlListAccountData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudResourceMysqlListAccountDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudResourceMysqlListAccountDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudResourceMysqlListAccountDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudResourceMysqlListAccountDataMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlListAccountDataMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceMysqlListAccountData.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceMysqlListAccountDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlListAccountDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlListAccountDataMultiError) AllErrors() []error { return m }

// CloudResourceMysqlListAccountDataValidationError is the validation error
// returned by CloudResourceMysqlListAccountData.Validate if the designated
// constraints aren't met.
type CloudResourceMysqlListAccountDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlListAccountDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlListAccountDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlListAccountDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlListAccountDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlListAccountDataValidationError) ErrorName() string {
	return "CloudResourceMysqlListAccountDataValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlListAccountDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlListAccountData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlListAccountDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlListAccountDataValidationError{}

// Validate checks the field values on CloudResourceMysqlListAccountItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceMysqlListAccountItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlListAccountItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlListAccountItemMultiError, or nil if none found.
func (m *CloudResourceMysqlListAccountItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlListAccountItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountName

	// no validation rules for AccountStatus

	// no validation rules for AccountType

	// no validation rules for AccountDescription

	for idx, item := range m.GetDatabasePrivileges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudResourceMysqlListAccountItemValidationError{
						field:  fmt.Sprintf("DatabasePrivileges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudResourceMysqlListAccountItemValidationError{
						field:  fmt.Sprintf("DatabasePrivileges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudResourceMysqlListAccountItemValidationError{
					field:  fmt.Sprintf("DatabasePrivileges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudResourceMysqlListAccountItemMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlListAccountItemMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceMysqlListAccountItem.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceMysqlListAccountItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlListAccountItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlListAccountItemMultiError) AllErrors() []error { return m }

// CloudResourceMysqlListAccountItemValidationError is the validation error
// returned by CloudResourceMysqlListAccountItem.Validate if the designated
// constraints aren't met.
type CloudResourceMysqlListAccountItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlListAccountItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlListAccountItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlListAccountItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlListAccountItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlListAccountItemValidationError) ErrorName() string {
	return "CloudResourceMysqlListAccountItemValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlListAccountItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlListAccountItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlListAccountItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlListAccountItemValidationError{}

// Validate checks the field values on CloudResourceMysqlListAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CloudResourceMysqlListAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlListAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlListAccountRequestMultiError, or nil if none found.
func (m *CloudResourceMysqlListAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlListAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for InstanceID

	if len(errors) > 0 {
		return CloudResourceMysqlListAccountRequestMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlListAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceMysqlListAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceMysqlListAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlListAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlListAccountRequestMultiError) AllErrors() []error { return m }

// CloudResourceMysqlListAccountRequestValidationError is the validation error
// returned by CloudResourceMysqlListAccountRequest.Validate if the designated
// constraints aren't met.
type CloudResourceMysqlListAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlListAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlListAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlListAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlListAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlListAccountRequestValidationError) ErrorName() string {
	return "CloudResourceMysqlListAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlListAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlListAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlListAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlListAccountRequestValidationError{}

// Validate checks the field values on CloudResourceMysqlListAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CloudResourceMysqlListAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceMysqlListAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceMysqlListAccountResponseMultiError, or nil if none found.
func (m *CloudResourceMysqlListAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceMysqlListAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudResourceMysqlListAccountResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudResourceMysqlListAccountResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudResourceMysqlListAccountResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloudResourceMysqlListAccountResponseMultiError(errors)
	}

	return nil
}

// CloudResourceMysqlListAccountResponseMultiError is an error wrapping
// multiple validation errors returned by
// CloudResourceMysqlListAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceMysqlListAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceMysqlListAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceMysqlListAccountResponseMultiError) AllErrors() []error { return m }

// CloudResourceMysqlListAccountResponseValidationError is the validation error
// returned by CloudResourceMysqlListAccountResponse.Validate if the
// designated constraints aren't met.
type CloudResourceMysqlListAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceMysqlListAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceMysqlListAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceMysqlListAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceMysqlListAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceMysqlListAccountResponseValidationError) ErrorName() string {
	return "CloudResourceMysqlListAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceMysqlListAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceMysqlListAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceMysqlListAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceMysqlListAccountResponseValidationError{}

// Validate checks the field values on CloudResourceOnsBasicData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceOnsBasicData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOnsBasicData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceOnsBasicDataMultiError, or nil if none found.
func (m *CloudResourceOnsBasicData) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOnsBasicData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for InstanceType

	// no validation rules for Status

	// no validation rules for Tags

	if len(errors) > 0 {
		return CloudResourceOnsBasicDataMultiError(errors)
	}

	return nil
}

// CloudResourceOnsBasicDataMultiError is an error wrapping multiple validation
// errors returned by CloudResourceOnsBasicData.ValidateAll() if the
// designated constraints aren't met.
type CloudResourceOnsBasicDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOnsBasicDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOnsBasicDataMultiError) AllErrors() []error { return m }

// CloudResourceOnsBasicDataValidationError is the validation error returned by
// CloudResourceOnsBasicData.Validate if the designated constraints aren't met.
type CloudResourceOnsBasicDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOnsBasicDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOnsBasicDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOnsBasicDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOnsBasicDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOnsBasicDataValidationError) ErrorName() string {
	return "CloudResourceOnsBasicDataValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOnsBasicDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOnsBasicData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOnsBasicDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOnsBasicDataValidationError{}

// Validate checks the field values on CloudResourceOnsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceOnsData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOnsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceOnsDataMultiError, or nil if none found.
func (m *CloudResourceOnsData) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOnsData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudResourceOnsDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudResourceOnsDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudResourceOnsDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudResourceOnsDataMultiError(errors)
	}

	return nil
}

// CloudResourceOnsDataMultiError is an error wrapping multiple validation
// errors returned by CloudResourceOnsData.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceOnsDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOnsDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOnsDataMultiError) AllErrors() []error { return m }

// CloudResourceOnsDataValidationError is the validation error returned by
// CloudResourceOnsData.Validate if the designated constraints aren't met.
type CloudResourceOnsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOnsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOnsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOnsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOnsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOnsDataValidationError) ErrorName() string {
	return "CloudResourceOnsDataValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOnsDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOnsData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOnsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOnsDataValidationError{}

// Validate checks the field values on CloudResourceOnsDetailInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceOnsDetailInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOnsDetailInfoRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceOnsDetailInfoRequestMultiError, or nil if none found.
func (m *CloudResourceOnsDetailInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOnsDetailInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for InstanceID

	if len(errors) > 0 {
		return CloudResourceOnsDetailInfoRequestMultiError(errors)
	}

	return nil
}

// CloudResourceOnsDetailInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceOnsDetailInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceOnsDetailInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOnsDetailInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOnsDetailInfoRequestMultiError) AllErrors() []error { return m }

// CloudResourceOnsDetailInfoRequestValidationError is the validation error
// returned by CloudResourceOnsDetailInfoRequest.Validate if the designated
// constraints aren't met.
type CloudResourceOnsDetailInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOnsDetailInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOnsDetailInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOnsDetailInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOnsDetailInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOnsDetailInfoRequestValidationError) ErrorName() string {
	return "CloudResourceOnsDetailInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOnsDetailInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOnsDetailInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOnsDetailInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOnsDetailInfoRequestValidationError{}

// Validate checks the field values on CloudResourceOnsDetailInfoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceOnsDetailInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOnsDetailInfoResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceOnsDetailInfoResponseMultiError, or nil if none found.
func (m *CloudResourceOnsDetailInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOnsDetailInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudResourceOnsDetailInfoResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudResourceOnsDetailInfoResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudResourceOnsDetailInfoResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudResourceOnsDetailInfoResponseMultiError(errors)
	}

	return nil
}

// CloudResourceOnsDetailInfoResponseMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceOnsDetailInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceOnsDetailInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOnsDetailInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOnsDetailInfoResponseMultiError) AllErrors() []error { return m }

// CloudResourceOnsDetailInfoResponseValidationError is the validation error
// returned by CloudResourceOnsDetailInfoResponse.Validate if the designated
// constraints aren't met.
type CloudResourceOnsDetailInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOnsDetailInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOnsDetailInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOnsDetailInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOnsDetailInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOnsDetailInfoResponseValidationError) ErrorName() string {
	return "CloudResourceOnsDetailInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOnsDetailInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOnsDetailInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOnsDetailInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOnsDetailInfoResponseValidationError{}

// Validate checks the field values on CloudResourceOnsGroupBaseInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceOnsGroupBaseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOnsGroupBaseInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloudResourceOnsGroupBaseInfoMultiError, or nil if none found.
func (m *CloudResourceOnsGroupBaseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOnsGroupBaseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for GroupType

	// no validation rules for Remark

	if len(errors) > 0 {
		return CloudResourceOnsGroupBaseInfoMultiError(errors)
	}

	return nil
}

// CloudResourceOnsGroupBaseInfoMultiError is an error wrapping multiple
// validation errors returned by CloudResourceOnsGroupBaseInfo.ValidateAll()
// if the designated constraints aren't met.
type CloudResourceOnsGroupBaseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOnsGroupBaseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOnsGroupBaseInfoMultiError) AllErrors() []error { return m }

// CloudResourceOnsGroupBaseInfoValidationError is the validation error
// returned by CloudResourceOnsGroupBaseInfo.Validate if the designated
// constraints aren't met.
type CloudResourceOnsGroupBaseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOnsGroupBaseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOnsGroupBaseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOnsGroupBaseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOnsGroupBaseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOnsGroupBaseInfoValidationError) ErrorName() string {
	return "CloudResourceOnsGroupBaseInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOnsGroupBaseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOnsGroupBaseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOnsGroupBaseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOnsGroupBaseInfoValidationError{}

// Validate checks the field values on CloudResourceOnsGroupBasicData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceOnsGroupBasicData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOnsGroupBasicData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloudResourceOnsGroupBasicDataMultiError, or nil if none found.
func (m *CloudResourceOnsGroupBasicData) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOnsGroupBasicData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Remark

	// no validation rules for InstanceId

	// no validation rules for GroupType

	// no validation rules for CreateTime

	// no validation rules for Tags

	if len(errors) > 0 {
		return CloudResourceOnsGroupBasicDataMultiError(errors)
	}

	return nil
}

// CloudResourceOnsGroupBasicDataMultiError is an error wrapping multiple
// validation errors returned by CloudResourceOnsGroupBasicData.ValidateAll()
// if the designated constraints aren't met.
type CloudResourceOnsGroupBasicDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOnsGroupBasicDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOnsGroupBasicDataMultiError) AllErrors() []error { return m }

// CloudResourceOnsGroupBasicDataValidationError is the validation error
// returned by CloudResourceOnsGroupBasicData.Validate if the designated
// constraints aren't met.
type CloudResourceOnsGroupBasicDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOnsGroupBasicDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOnsGroupBasicDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOnsGroupBasicDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOnsGroupBasicDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOnsGroupBasicDataValidationError) ErrorName() string {
	return "CloudResourceOnsGroupBasicDataValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOnsGroupBasicDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOnsGroupBasicData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOnsGroupBasicDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOnsGroupBasicDataValidationError{}

// Validate checks the field values on CloudResourceOnsGroupInfoData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceOnsGroupInfoData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOnsGroupInfoData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloudResourceOnsGroupInfoDataMultiError, or nil if none found.
func (m *CloudResourceOnsGroupInfoData) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOnsGroupInfoData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudResourceOnsGroupInfoDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudResourceOnsGroupInfoDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudResourceOnsGroupInfoDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudResourceOnsGroupInfoDataMultiError(errors)
	}

	return nil
}

// CloudResourceOnsGroupInfoDataMultiError is an error wrapping multiple
// validation errors returned by CloudResourceOnsGroupInfoData.ValidateAll()
// if the designated constraints aren't met.
type CloudResourceOnsGroupInfoDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOnsGroupInfoDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOnsGroupInfoDataMultiError) AllErrors() []error { return m }

// CloudResourceOnsGroupInfoDataValidationError is the validation error
// returned by CloudResourceOnsGroupInfoData.Validate if the designated
// constraints aren't met.
type CloudResourceOnsGroupInfoDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOnsGroupInfoDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOnsGroupInfoDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOnsGroupInfoDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOnsGroupInfoDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOnsGroupInfoDataValidationError) ErrorName() string {
	return "CloudResourceOnsGroupInfoDataValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOnsGroupInfoDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOnsGroupInfoData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOnsGroupInfoDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOnsGroupInfoDataValidationError{}

// Validate checks the field values on CloudResourceOnsGroupInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceOnsGroupInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOnsGroupInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloudResourceOnsGroupInfoRequestMultiError, or nil if none found.
func (m *CloudResourceOnsGroupInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOnsGroupInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for InstanceID

	// no validation rules for GroupID

	// no validation rules for GroupType

	if len(errors) > 0 {
		return CloudResourceOnsGroupInfoRequestMultiError(errors)
	}

	return nil
}

// CloudResourceOnsGroupInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceOnsGroupInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceOnsGroupInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOnsGroupInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOnsGroupInfoRequestMultiError) AllErrors() []error { return m }

// CloudResourceOnsGroupInfoRequestValidationError is the validation error
// returned by CloudResourceOnsGroupInfoRequest.Validate if the designated
// constraints aren't met.
type CloudResourceOnsGroupInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOnsGroupInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOnsGroupInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOnsGroupInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOnsGroupInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOnsGroupInfoRequestValidationError) ErrorName() string {
	return "CloudResourceOnsGroupInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOnsGroupInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOnsGroupInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOnsGroupInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOnsGroupInfoRequestValidationError{}

// Validate checks the field values on CloudResourceOnsGroupInfoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceOnsGroupInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOnsGroupInfoResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceOnsGroupInfoResponseMultiError, or nil if none found.
func (m *CloudResourceOnsGroupInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOnsGroupInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudResourceOnsGroupInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudResourceOnsGroupInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudResourceOnsGroupInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloudResourceOnsGroupInfoResponseMultiError(errors)
	}

	return nil
}

// CloudResourceOnsGroupInfoResponseMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceOnsGroupInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceOnsGroupInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOnsGroupInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOnsGroupInfoResponseMultiError) AllErrors() []error { return m }

// CloudResourceOnsGroupInfoResponseValidationError is the validation error
// returned by CloudResourceOnsGroupInfoResponse.Validate if the designated
// constraints aren't met.
type CloudResourceOnsGroupInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOnsGroupInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOnsGroupInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOnsGroupInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOnsGroupInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOnsGroupInfoResponseValidationError) ErrorName() string {
	return "CloudResourceOnsGroupInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOnsGroupInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOnsGroupInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOnsGroupInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOnsGroupInfoResponseValidationError{}

// Validate checks the field values on CloudResourceOnsTopicAndGroup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceOnsTopicAndGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOnsTopicAndGroup with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloudResourceOnsTopicAndGroupMultiError, or nil if none found.
func (m *CloudResourceOnsTopicAndGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOnsTopicAndGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCloudResourceOnsGroupBaseInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudResourceOnsTopicAndGroupValidationError{
					field:  "CloudResourceOnsGroupBaseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudResourceOnsTopicAndGroupValidationError{
					field:  "CloudResourceOnsGroupBaseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudResourceOnsGroupBaseInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudResourceOnsTopicAndGroupValidationError{
				field:  "CloudResourceOnsGroupBaseInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TopicName

	// no validation rules for AddonID

	// no validation rules for MessageType

	// no validation rules for Remark

	if len(errors) > 0 {
		return CloudResourceOnsTopicAndGroupMultiError(errors)
	}

	return nil
}

// CloudResourceOnsTopicAndGroupMultiError is an error wrapping multiple
// validation errors returned by CloudResourceOnsTopicAndGroup.ValidateAll()
// if the designated constraints aren't met.
type CloudResourceOnsTopicAndGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOnsTopicAndGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOnsTopicAndGroupMultiError) AllErrors() []error { return m }

// CloudResourceOnsTopicAndGroupValidationError is the validation error
// returned by CloudResourceOnsTopicAndGroup.Validate if the designated
// constraints aren't met.
type CloudResourceOnsTopicAndGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOnsTopicAndGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOnsTopicAndGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOnsTopicAndGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOnsTopicAndGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOnsTopicAndGroupValidationError) ErrorName() string {
	return "CloudResourceOnsTopicAndGroupValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOnsTopicAndGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOnsTopicAndGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOnsTopicAndGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOnsTopicAndGroupValidationError{}

// Validate checks the field values on CloudResourceOnsTopicInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceOnsTopicInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOnsTopicInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceOnsTopicInfoMultiError, or nil if none found.
func (m *CloudResourceOnsTopicInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOnsTopicInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudResourceOnsTopicInfoValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudResourceOnsTopicInfoValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudResourceOnsTopicInfoValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudResourceOnsTopicInfoMultiError(errors)
	}

	return nil
}

// CloudResourceOnsTopicInfoMultiError is an error wrapping multiple validation
// errors returned by CloudResourceOnsTopicInfo.ValidateAll() if the
// designated constraints aren't met.
type CloudResourceOnsTopicInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOnsTopicInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOnsTopicInfoMultiError) AllErrors() []error { return m }

// CloudResourceOnsTopicInfoValidationError is the validation error returned by
// CloudResourceOnsTopicInfo.Validate if the designated constraints aren't met.
type CloudResourceOnsTopicInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOnsTopicInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOnsTopicInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOnsTopicInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOnsTopicInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOnsTopicInfoValidationError) ErrorName() string {
	return "CloudResourceOnsTopicInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOnsTopicInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOnsTopicInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOnsTopicInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOnsTopicInfoValidationError{}

// Validate checks the field values on CloudResourceOnsTopicInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceOnsTopicInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOnsTopicInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloudResourceOnsTopicInfoRequestMultiError, or nil if none found.
func (m *CloudResourceOnsTopicInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOnsTopicInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCloudResourceMysqlDetailInfoRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudResourceOnsTopicInfoRequestValidationError{
					field:  "CloudResourceMysqlDetailInfoRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudResourceOnsTopicInfoRequestValidationError{
					field:  "CloudResourceMysqlDetailInfoRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudResourceMysqlDetailInfoRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudResourceOnsTopicInfoRequestValidationError{
				field:  "CloudResourceMysqlDetailInfoRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TopicName

	if len(errors) > 0 {
		return CloudResourceOnsTopicInfoRequestMultiError(errors)
	}

	return nil
}

// CloudResourceOnsTopicInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceOnsTopicInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceOnsTopicInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOnsTopicInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOnsTopicInfoRequestMultiError) AllErrors() []error { return m }

// CloudResourceOnsTopicInfoRequestValidationError is the validation error
// returned by CloudResourceOnsTopicInfoRequest.Validate if the designated
// constraints aren't met.
type CloudResourceOnsTopicInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOnsTopicInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOnsTopicInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOnsTopicInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOnsTopicInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOnsTopicInfoRequestValidationError) ErrorName() string {
	return "CloudResourceOnsTopicInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOnsTopicInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOnsTopicInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOnsTopicInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOnsTopicInfoRequestValidationError{}

// Validate checks the field values on CloudResourceOnsTopicInfoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceOnsTopicInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOnsTopicInfoResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceOnsTopicInfoResponseMultiError, or nil if none found.
func (m *CloudResourceOnsTopicInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOnsTopicInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudResourceOnsTopicInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudResourceOnsTopicInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudResourceOnsTopicInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloudResourceOnsTopicInfoResponseMultiError(errors)
	}

	return nil
}

// CloudResourceOnsTopicInfoResponseMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceOnsTopicInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceOnsTopicInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOnsTopicInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOnsTopicInfoResponseMultiError) AllErrors() []error { return m }

// CloudResourceOnsTopicInfoResponseValidationError is the validation error
// returned by CloudResourceOnsTopicInfoResponse.Validate if the designated
// constraints aren't met.
type CloudResourceOnsTopicInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOnsTopicInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOnsTopicInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOnsTopicInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOnsTopicInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOnsTopicInfoResponseValidationError) ErrorName() string {
	return "CloudResourceOnsTopicInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOnsTopicInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOnsTopicInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOnsTopicInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOnsTopicInfoResponseValidationError{}

// Validate checks the field values on CloudResourceOssBasicData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceOssBasicData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOssBasicData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceOssBasicDataMultiError, or nil if none found.
func (m *CloudResourceOssBasicData) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOssBasicData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Location

	// no validation rules for CreateDate

	// no validation rules for StorageClass

	// no validation rules for Tags

	if len(errors) > 0 {
		return CloudResourceOssBasicDataMultiError(errors)
	}

	return nil
}

// CloudResourceOssBasicDataMultiError is an error wrapping multiple validation
// errors returned by CloudResourceOssBasicData.ValidateAll() if the
// designated constraints aren't met.
type CloudResourceOssBasicDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOssBasicDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOssBasicDataMultiError) AllErrors() []error { return m }

// CloudResourceOssBasicDataValidationError is the validation error returned by
// CloudResourceOssBasicData.Validate if the designated constraints aren't met.
type CloudResourceOssBasicDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOssBasicDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOssBasicDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOssBasicDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOssBasicDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOssBasicDataValidationError) ErrorName() string {
	return "CloudResourceOssBasicDataValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOssBasicDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOssBasicData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOssBasicDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOssBasicDataValidationError{}

// Validate checks the field values on CloudResourceOssData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceOssData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOssData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceOssDataMultiError, or nil if none found.
func (m *CloudResourceOssData) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOssData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudResourceOssDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudResourceOssDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudResourceOssDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudResourceOssDataMultiError(errors)
	}

	return nil
}

// CloudResourceOssDataMultiError is an error wrapping multiple validation
// errors returned by CloudResourceOssData.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceOssDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOssDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOssDataMultiError) AllErrors() []error { return m }

// CloudResourceOssDataValidationError is the validation error returned by
// CloudResourceOssData.Validate if the designated constraints aren't met.
type CloudResourceOssDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOssDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOssDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOssDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOssDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOssDataValidationError) ErrorName() string {
	return "CloudResourceOssDataValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOssDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOssData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOssDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOssDataValidationError{}

// Validate checks the field values on CloudResourceOssDetailInfoData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceOssDetailInfoData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOssDetailInfoData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloudResourceOssDetailInfoDataMultiError, or nil if none found.
func (m *CloudResourceOssDetailInfoData) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOssDetailInfoData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BucketName

	// no validation rules for InternetEndpoint

	// no validation rules for IntranetEndpoint

	// no validation rules for Location

	// no validation rules for Acl

	if len(errors) > 0 {
		return CloudResourceOssDetailInfoDataMultiError(errors)
	}

	return nil
}

// CloudResourceOssDetailInfoDataMultiError is an error wrapping multiple
// validation errors returned by CloudResourceOssDetailInfoData.ValidateAll()
// if the designated constraints aren't met.
type CloudResourceOssDetailInfoDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOssDetailInfoDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOssDetailInfoDataMultiError) AllErrors() []error { return m }

// CloudResourceOssDetailInfoDataValidationError is the validation error
// returned by CloudResourceOssDetailInfoData.Validate if the designated
// constraints aren't met.
type CloudResourceOssDetailInfoDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOssDetailInfoDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOssDetailInfoDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOssDetailInfoDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOssDetailInfoDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOssDetailInfoDataValidationError) ErrorName() string {
	return "CloudResourceOssDetailInfoDataValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOssDetailInfoDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOssDetailInfoData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOssDetailInfoDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOssDetailInfoDataValidationError{}

// Validate checks the field values on CloudResourceOssDetailInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceOssDetailInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOssDetailInfoRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceOssDetailInfoRequestMultiError, or nil if none found.
func (m *CloudResourceOssDetailInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOssDetailInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for Name

	// no validation rules for Bucketname

	if len(errors) > 0 {
		return CloudResourceOssDetailInfoRequestMultiError(errors)
	}

	return nil
}

// CloudResourceOssDetailInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceOssDetailInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceOssDetailInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOssDetailInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOssDetailInfoRequestMultiError) AllErrors() []error { return m }

// CloudResourceOssDetailInfoRequestValidationError is the validation error
// returned by CloudResourceOssDetailInfoRequest.Validate if the designated
// constraints aren't met.
type CloudResourceOssDetailInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOssDetailInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOssDetailInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOssDetailInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOssDetailInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOssDetailInfoRequestValidationError) ErrorName() string {
	return "CloudResourceOssDetailInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOssDetailInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOssDetailInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOssDetailInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOssDetailInfoRequestValidationError{}

// Validate checks the field values on CloudResourceOssDetailInfoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceOssDetailInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOssDetailInfoResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceOssDetailInfoResponseMultiError, or nil if none found.
func (m *CloudResourceOssDetailInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOssDetailInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloudResourceOssDetailInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloudResourceOssDetailInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudResourceOssDetailInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloudResourceOssDetailInfoResponseMultiError(errors)
	}

	return nil
}

// CloudResourceOssDetailInfoResponseMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceOssDetailInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceOssDetailInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOssDetailInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOssDetailInfoResponseMultiError) AllErrors() []error { return m }

// CloudResourceOssDetailInfoResponseValidationError is the validation error
// returned by CloudResourceOssDetailInfoResponse.Validate if the designated
// constraints aren't met.
type CloudResourceOssDetailInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOssDetailInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOssDetailInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOssDetailInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOssDetailInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOssDetailInfoResponseValidationError) ErrorName() string {
	return "CloudResourceOssDetailInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOssDetailInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOssDetailInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOssDetailInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOssDetailInfoResponseValidationError{}

// Validate checks the field values on CloudResourceOverviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceOverviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOverviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceOverviewRequestMultiError, or nil if none found.
func (m *CloudResourceOverviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOverviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	if len(errors) > 0 {
		return CloudResourceOverviewRequestMultiError(errors)
	}

	return nil
}

// CloudResourceOverviewRequestMultiError is an error wrapping multiple
// validation errors returned by CloudResourceOverviewRequest.ValidateAll() if
// the designated constraints aren't met.
type CloudResourceOverviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOverviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOverviewRequestMultiError) AllErrors() []error { return m }

// CloudResourceOverviewRequestValidationError is the validation error returned
// by CloudResourceOverviewRequest.Validate if the designated constraints
// aren't met.
type CloudResourceOverviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOverviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOverviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOverviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOverviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOverviewRequestValidationError) ErrorName() string {
	return "CloudResourceOverviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOverviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOverviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOverviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOverviewRequestValidationError{}

// Validate checks the field values on CloudResourceOverviewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceOverviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceOverviewResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloudResourceOverviewResponseMultiError, or nil if none found.
func (m *CloudResourceOverviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceOverviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CloudResourceOverviewResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CloudResourceOverviewResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CloudResourceOverviewResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CloudResourceOverviewResponseMultiError(errors)
	}

	return nil
}

// CloudResourceOverviewResponseMultiError is an error wrapping multiple
// validation errors returned by CloudResourceOverviewResponse.ValidateAll()
// if the designated constraints aren't met.
type CloudResourceOverviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceOverviewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceOverviewResponseMultiError) AllErrors() []error { return m }

// CloudResourceOverviewResponseValidationError is the validation error
// returned by CloudResourceOverviewResponse.Validate if the designated
// constraints aren't met.
type CloudResourceOverviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceOverviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceOverviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceOverviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceOverviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceOverviewResponseValidationError) ErrorName() string {
	return "CloudResourceOverviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceOverviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceOverviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceOverviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceOverviewResponseValidationError{}

// Validate checks the field values on CloudResourceRedisBasicData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceRedisBasicData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceRedisBasicData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceRedisBasicDataMultiError, or nil if none found.
func (m *CloudResourceRedisBasicData) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceRedisBasicData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Region

	// no validation rules for Spec

	// no validation rules for Version

	// no validation rules for Capacity

	// no validation rules for Status

	// no validation rules for Tags

	// no validation rules for ChargeType

	// no validation rules for ExpireTime

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return CloudResourceRedisBasicDataMultiError(errors)
	}

	return nil
}

// CloudResourceRedisBasicDataMultiError is an error wrapping multiple
// validation errors returned by CloudResourceRedisBasicData.ValidateAll() if
// the designated constraints aren't met.
type CloudResourceRedisBasicDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceRedisBasicDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceRedisBasicDataMultiError) AllErrors() []error { return m }

// CloudResourceRedisBasicDataValidationError is the validation error returned
// by CloudResourceRedisBasicData.Validate if the designated constraints
// aren't met.
type CloudResourceRedisBasicDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceRedisBasicDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceRedisBasicDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceRedisBasicDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceRedisBasicDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceRedisBasicDataValidationError) ErrorName() string {
	return "CloudResourceRedisBasicDataValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceRedisBasicDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceRedisBasicData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceRedisBasicDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceRedisBasicDataValidationError{}

// Validate checks the field values on CloudResourceRedisDetailInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloudResourceRedisDetailInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceRedisDetailInfoRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceRedisDetailInfoRequestMultiError, or nil if none found.
func (m *CloudResourceRedisDetailInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceRedisDetailInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for InstanceID

	if len(errors) > 0 {
		return CloudResourceRedisDetailInfoRequestMultiError(errors)
	}

	return nil
}

// CloudResourceRedisDetailInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceRedisDetailInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceRedisDetailInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceRedisDetailInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceRedisDetailInfoRequestMultiError) AllErrors() []error { return m }

// CloudResourceRedisDetailInfoRequestValidationError is the validation error
// returned by CloudResourceRedisDetailInfoRequest.Validate if the designated
// constraints aren't met.
type CloudResourceRedisDetailInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceRedisDetailInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceRedisDetailInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceRedisDetailInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceRedisDetailInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceRedisDetailInfoRequestValidationError) ErrorName() string {
	return "CloudResourceRedisDetailInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceRedisDetailInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceRedisDetailInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceRedisDetailInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceRedisDetailInfoRequestValidationError{}

// Validate checks the field values on CloudResourceRedisDetailInfoResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CloudResourceRedisDetailInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceRedisDetailInfoResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloudResourceRedisDetailInfoResponseMultiError, or nil if none found.
func (m *CloudResourceRedisDetailInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceRedisDetailInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudResourceRedisDetailInfoResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudResourceRedisDetailInfoResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudResourceRedisDetailInfoResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudResourceRedisDetailInfoResponseMultiError(errors)
	}

	return nil
}

// CloudResourceRedisDetailInfoResponseMultiError is an error wrapping multiple
// validation errors returned by
// CloudResourceRedisDetailInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceRedisDetailInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceRedisDetailInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceRedisDetailInfoResponseMultiError) AllErrors() []error { return m }

// CloudResourceRedisDetailInfoResponseValidationError is the validation error
// returned by CloudResourceRedisDetailInfoResponse.Validate if the designated
// constraints aren't met.
type CloudResourceRedisDetailInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceRedisDetailInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceRedisDetailInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceRedisDetailInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceRedisDetailInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceRedisDetailInfoResponseValidationError) ErrorName() string {
	return "CloudResourceRedisDetailInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceRedisDetailInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceRedisDetailInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceRedisDetailInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceRedisDetailInfoResponseValidationError{}

// Validate checks the field values on CloudResourceSetTagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceSetTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceSetTagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceSetTagRequestMultiError, or nil if none found.
func (m *CloudResourceSetTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceSetTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	// no validation rules for InstanceID

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudResourceSetTagRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudResourceSetTagRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudResourceSetTagRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudResourceSetTagRequestMultiError(errors)
	}

	return nil
}

// CloudResourceSetTagRequestMultiError is an error wrapping multiple
// validation errors returned by CloudResourceSetTagRequest.ValidateAll() if
// the designated constraints aren't met.
type CloudResourceSetTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceSetTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceSetTagRequestMultiError) AllErrors() []error { return m }

// CloudResourceSetTagRequestValidationError is the validation error returned
// by CloudResourceSetTagRequest.Validate if the designated constraints aren't met.
type CloudResourceSetTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceSetTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceSetTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceSetTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceSetTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceSetTagRequestValidationError) ErrorName() string {
	return "CloudResourceSetTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceSetTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceSetTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceSetTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceSetTagRequestValidationError{}

// Validate checks the field values on CloudResourceSetTagResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceSetTagResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceSetTagResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceSetTagResponseMultiError, or nil if none found.
func (m *CloudResourceSetTagResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceSetTagResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloudResourceSetTagResponseMultiError(errors)
	}

	return nil
}

// CloudResourceSetTagResponseMultiError is an error wrapping multiple
// validation errors returned by CloudResourceSetTagResponse.ValidateAll() if
// the designated constraints aren't met.
type CloudResourceSetTagResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceSetTagResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceSetTagResponseMultiError) AllErrors() []error { return m }

// CloudResourceSetTagResponseValidationError is the validation error returned
// by CloudResourceSetTagResponse.Validate if the designated constraints
// aren't met.
type CloudResourceSetTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceSetTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceSetTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceSetTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceSetTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceSetTagResponseValidationError) ErrorName() string {
	return "CloudResourceSetTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceSetTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceSetTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceSetTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceSetTagResponseValidationError{}

// Validate checks the field values on CloudResourceTagItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudResourceTagItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudResourceTagItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudResourceTagItemMultiError, or nil if none found.
func (m *CloudResourceTagItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudResourceTagItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for ResourceID

	if len(errors) > 0 {
		return CloudResourceTagItemMultiError(errors)
	}

	return nil
}

// CloudResourceTagItemMultiError is an error wrapping multiple validation
// errors returned by CloudResourceTagItem.ValidateAll() if the designated
// constraints aren't met.
type CloudResourceTagItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudResourceTagItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudResourceTagItemMultiError) AllErrors() []error { return m }

// CloudResourceTagItemValidationError is the validation error returned by
// CloudResourceTagItem.Validate if the designated constraints aren't met.
type CloudResourceTagItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudResourceTagItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudResourceTagItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudResourceTagItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudResourceTagItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudResourceTagItemValidationError) ErrorName() string {
	return "CloudResourceTagItemValidationError"
}

// Error satisfies the builtin error interface
func (e CloudResourceTagItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudResourceTagItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudResourceTagItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudResourceTagItemValidationError{}

// Validate checks the field values on ClusterUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterUpdateRequestMultiError, or nil if none found.
func (m *ClusterUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Type

	// no validation rules for CloudVendor

	// no validation rules for Logo

	// no validation rules for Description

	// no validation rules for WildcardDomain

	// no validation rules for OrgID

	// no validation rules for URLs

	if m.SchedulerConfig != nil {

		if all {
			switch v := interface{}(m.GetSchedulerConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterUpdateRequestValidationError{
						field:  "SchedulerConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterUpdateRequestValidationError{
						field:  "SchedulerConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSchedulerConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterUpdateRequestValidationError{
					field:  "SchedulerConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.OpsConfig != nil {

		if all {
			switch v := interface{}(m.GetOpsConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterUpdateRequestValidationError{
						field:  "OpsConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterUpdateRequestValidationError{
						field:  "OpsConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOpsConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterUpdateRequestValidationError{
					field:  "OpsConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.SysConfig != nil {

		if all {
			switch v := interface{}(m.GetSysConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterUpdateRequestValidationError{
						field:  "SysConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterUpdateRequestValidationError{
						field:  "SysConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSysConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterUpdateRequestValidationError{
					field:  "SysConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ManageConfig != nil {

		if all {
			switch v := interface{}(m.GetManageConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterUpdateRequestValidationError{
						field:  "ManageConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterUpdateRequestValidationError{
						field:  "ManageConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetManageConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterUpdateRequestValidationError{
					field:  "ManageConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterUpdateRequestMultiError(errors)
	}

	return nil
}

// ClusterUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ClusterUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type ClusterUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterUpdateRequestMultiError) AllErrors() []error { return m }

// ClusterUpdateRequestValidationError is the validation error returned by
// ClusterUpdateRequest.Validate if the designated constraints aren't met.
type ClusterUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterUpdateRequestValidationError) ErrorName() string {
	return "ClusterUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterUpdateRequestValidationError{}

// Validate checks the field values on ClusterUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterUpdateResponseMultiError, or nil if none found.
func (m *ClusterUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterUpdateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClusterUpdateResponseMultiError(errors)
	}

	return nil
}

// ClusterUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by ClusterUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type ClusterUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterUpdateResponseMultiError) AllErrors() []error { return m }

// ClusterUpdateResponseValidationError is the validation error returned by
// ClusterUpdateResponse.Validate if the designated constraints aren't met.
type ClusterUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterUpdateResponseValidationError) ErrorName() string {
	return "ClusterUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterUpdateResponseValidationError{}

// Validate checks the field values on ClustersData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClustersData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClustersData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClustersDataMultiError, or
// nil if none found.
func (m *ClustersData) ValidateAll() error {
	return m.validate(true)
}

func (m *ClustersData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ClustersDataMultiError(errors)
	}

	return nil
}

// ClustersDataMultiError is an error wrapping multiple validation errors
// returned by ClustersData.ValidateAll() if the designated constraints aren't met.
type ClustersDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClustersDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClustersDataMultiError) AllErrors() []error { return m }

// ClustersDataValidationError is the validation error returned by
// ClustersData.Validate if the designated constraints aren't met.
type ClustersDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClustersDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClustersDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClustersDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClustersDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClustersDataValidationError) ErrorName() string { return "ClustersDataValidationError" }

// Error satisfies the builtin error interface
func (e ClustersDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClustersData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClustersDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClustersDataValidationError{}

// Validate checks the field values on CreateCloudAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCloudAccountRequestMultiError, or nil if none found.
func (m *CreateCloudAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for AccessKey

	// no validation rules for Secret

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateCloudAccountRequestMultiError(errors)
	}

	return nil
}

// CreateCloudAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCloudAccountRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateCloudAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudAccountRequestMultiError) AllErrors() []error { return m }

// CreateCloudAccountRequestValidationError is the validation error returned by
// CreateCloudAccountRequest.Validate if the designated constraints aren't met.
type CreateCloudAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudAccountRequestValidationError) ErrorName() string {
	return "CreateCloudAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudAccountRequestValidationError{}

// Validate checks the field values on CreateCloudAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCloudAccountResponseMultiError, or nil if none found.
func (m *CreateCloudAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateCloudAccountResponseMultiError(errors)
	}

	return nil
}

// CreateCloudAccountResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCloudAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateCloudAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudAccountResponseMultiError) AllErrors() []error { return m }

// CreateCloudAccountResponseValidationError is the validation error returned
// by CreateCloudAccountResponse.Validate if the designated constraints aren't met.
type CreateCloudAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudAccountResponseValidationError) ErrorName() string {
	return "CreateCloudAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudAccountResponseValidationError{}

// Validate checks the field values on CreateCloudResourceBaseInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudResourceBaseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceBaseInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCloudResourceBaseInfoMultiError, or nil if none found.
func (m *CreateCloudResourceBaseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceBaseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for VpcID

	// no validation rules for VSwitchID

	// no validation rules for ZoneID

	// no validation rules for OrgID

	// no validation rules for UserID

	// no validation rules for ClusterName

	// no validation rules for ProjectID

	// no validation rules for Source

	// no validation rules for ClientToken

	if len(errors) > 0 {
		return CreateCloudResourceBaseInfoMultiError(errors)
	}

	return nil
}

// CreateCloudResourceBaseInfoMultiError is an error wrapping multiple
// validation errors returned by CreateCloudResourceBaseInfo.ValidateAll() if
// the designated constraints aren't met.
type CreateCloudResourceBaseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceBaseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceBaseInfoMultiError) AllErrors() []error { return m }

// CreateCloudResourceBaseInfoValidationError is the validation error returned
// by CreateCloudResourceBaseInfo.Validate if the designated constraints
// aren't met.
type CreateCloudResourceBaseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceBaseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceBaseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceBaseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceBaseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceBaseInfoValidationError) ErrorName() string {
	return "CreateCloudResourceBaseInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceBaseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceBaseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceBaseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceBaseInfoValidationError{}

// Validate checks the field values on CreateCloudResourceBaseResponseData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCloudResourceBaseResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceBaseResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceBaseResponseDataMultiError, or nil if none found.
func (m *CreateCloudResourceBaseResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceBaseResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecordID

	if len(errors) > 0 {
		return CreateCloudResourceBaseResponseDataMultiError(errors)
	}

	return nil
}

// CreateCloudResourceBaseResponseDataMultiError is an error wrapping multiple
// validation errors returned by
// CreateCloudResourceBaseResponseData.ValidateAll() if the designated
// constraints aren't met.
type CreateCloudResourceBaseResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceBaseResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceBaseResponseDataMultiError) AllErrors() []error { return m }

// CreateCloudResourceBaseResponseDataValidationError is the validation error
// returned by CreateCloudResourceBaseResponseData.Validate if the designated
// constraints aren't met.
type CreateCloudResourceBaseResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceBaseResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceBaseResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceBaseResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceBaseResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceBaseResponseDataValidationError) ErrorName() string {
	return "CreateCloudResourceBaseResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceBaseResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceBaseResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceBaseResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceBaseResponseDataValidationError{}

// Validate checks the field values on CreateCloudResourceMysqlAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateCloudResourceMysqlAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateCloudResourceMysqlAccountRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateCloudResourceMysqlAccountRequestMultiError, or nil if none found.
func (m *CreateCloudResourceMysqlAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceMysqlAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for InstanceID

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateCloudResourceMysqlAccountRequestMultiError(errors)
	}

	return nil
}

// CreateCloudResourceMysqlAccountRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateCloudResourceMysqlAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCloudResourceMysqlAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceMysqlAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceMysqlAccountRequestMultiError) AllErrors() []error { return m }

// CreateCloudResourceMysqlAccountRequestValidationError is the validation
// error returned by CreateCloudResourceMysqlAccountRequest.Validate if the
// designated constraints aren't met.
type CreateCloudResourceMysqlAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceMysqlAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceMysqlAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceMysqlAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceMysqlAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceMysqlAccountRequestValidationError) ErrorName() string {
	return "CreateCloudResourceMysqlAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceMysqlAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceMysqlAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceMysqlAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceMysqlAccountRequestValidationError{}

// Validate checks the field values on CreateCloudResourceMysqlAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateCloudResourceMysqlAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateCloudResourceMysqlAccountResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateCloudResourceMysqlAccountResponseMultiError, or nil if none found.
func (m *CreateCloudResourceMysqlAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceMysqlAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCloudResourceMysqlAccountResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCloudResourceMysqlAccountResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudResourceMysqlAccountResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCloudResourceMysqlAccountResponseMultiError(errors)
	}

	return nil
}

// CreateCloudResourceMysqlAccountResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateCloudResourceMysqlAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCloudResourceMysqlAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceMysqlAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceMysqlAccountResponseMultiError) AllErrors() []error { return m }

// CreateCloudResourceMysqlAccountResponseValidationError is the validation
// error returned by CreateCloudResourceMysqlAccountResponse.Validate if the
// designated constraints aren't met.
type CreateCloudResourceMysqlAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceMysqlAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceMysqlAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceMysqlAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceMysqlAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceMysqlAccountResponseValidationError) ErrorName() string {
	return "CreateCloudResourceMysqlAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceMysqlAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceMysqlAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceMysqlAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceMysqlAccountResponseValidationError{}

// Validate checks the field values on CreateCloudResourceMysqlDBRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCloudResourceMysqlDBRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceMysqlDBRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceMysqlDBRequestMultiError, or nil if none found.
func (m *CreateCloudResourceMysqlDBRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceMysqlDBRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateCloudResourceBaseInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCloudResourceMysqlDBRequestValidationError{
					field:  "CreateCloudResourceBaseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCloudResourceMysqlDBRequestValidationError{
					field:  "CreateCloudResourceBaseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateCloudResourceBaseInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudResourceMysqlDBRequestValidationError{
				field:  "CreateCloudResourceBaseInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InstanceID

	for idx, item := range m.GetDatabases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCloudResourceMysqlDBRequestValidationError{
						field:  fmt.Sprintf("Databases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCloudResourceMysqlDBRequestValidationError{
						field:  fmt.Sprintf("Databases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCloudResourceMysqlDBRequestValidationError{
					field:  fmt.Sprintf("Databases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCloudResourceMysqlDBRequestMultiError(errors)
	}

	return nil
}

// CreateCloudResourceMysqlDBRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateCloudResourceMysqlDBRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCloudResourceMysqlDBRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceMysqlDBRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceMysqlDBRequestMultiError) AllErrors() []error { return m }

// CreateCloudResourceMysqlDBRequestValidationError is the validation error
// returned by CreateCloudResourceMysqlDBRequest.Validate if the designated
// constraints aren't met.
type CreateCloudResourceMysqlDBRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceMysqlDBRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceMysqlDBRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceMysqlDBRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceMysqlDBRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceMysqlDBRequestValidationError) ErrorName() string {
	return "CreateCloudResourceMysqlDBRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceMysqlDBRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceMysqlDBRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceMysqlDBRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceMysqlDBRequestValidationError{}

// Validate checks the field values on CreateCloudResourceMysqlDBResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCloudResourceMysqlDBResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceMysqlDBResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceMysqlDBResponseMultiError, or nil if none found.
func (m *CreateCloudResourceMysqlDBResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceMysqlDBResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCloudResourceMysqlDBResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCloudResourceMysqlDBResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudResourceMysqlDBResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCloudResourceMysqlDBResponseMultiError(errors)
	}

	return nil
}

// CreateCloudResourceMysqlDBResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateCloudResourceMysqlDBResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCloudResourceMysqlDBResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceMysqlDBResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceMysqlDBResponseMultiError) AllErrors() []error { return m }

// CreateCloudResourceMysqlDBResponseValidationError is the validation error
// returned by CreateCloudResourceMysqlDBResponse.Validate if the designated
// constraints aren't met.
type CreateCloudResourceMysqlDBResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceMysqlDBResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceMysqlDBResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceMysqlDBResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceMysqlDBResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceMysqlDBResponseValidationError) ErrorName() string {
	return "CreateCloudResourceMysqlDBResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceMysqlDBResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceMysqlDBResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceMysqlDBResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceMysqlDBResponseValidationError{}

// Validate checks the field values on CreateCloudResourceMysqlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudResourceMysqlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceMysqlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceMysqlRequestMultiError, or nil if none found.
func (m *CreateCloudResourceMysqlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceMysqlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for SpecType

	// no validation rules for SpecSize

	// no validation rules for StorageType

	// no validation rules for StorageSize

	// no validation rules for SecurityIPList

	for idx, item := range m.GetDatabases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCloudResourceMysqlRequestValidationError{
						field:  fmt.Sprintf("Databases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCloudResourceMysqlRequestValidationError{
						field:  fmt.Sprintf("Databases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCloudResourceMysqlRequestValidationError{
					field:  fmt.Sprintf("Databases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CreateCloudResourceBaseRequest != nil {

		if all {
			switch v := interface{}(m.GetCreateCloudResourceBaseRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCloudResourceMysqlRequestValidationError{
						field:  "CreateCloudResourceBaseRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCloudResourceMysqlRequestValidationError{
						field:  "CreateCloudResourceBaseRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateCloudResourceBaseRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCloudResourceMysqlRequestValidationError{
					field:  "CreateCloudResourceBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCloudResourceMysqlRequestMultiError(errors)
	}

	return nil
}

// CreateCloudResourceMysqlRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCloudResourceMysqlRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateCloudResourceMysqlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceMysqlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceMysqlRequestMultiError) AllErrors() []error { return m }

// CreateCloudResourceMysqlRequestValidationError is the validation error
// returned by CreateCloudResourceMysqlRequest.Validate if the designated
// constraints aren't met.
type CreateCloudResourceMysqlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceMysqlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceMysqlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceMysqlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceMysqlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceMysqlRequestValidationError) ErrorName() string {
	return "CreateCloudResourceMysqlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceMysqlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceMysqlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceMysqlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceMysqlRequestValidationError{}

// Validate checks the field values on CreateCloudResourceMysqlResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCloudResourceMysqlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceMysqlResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceMysqlResponseMultiError, or nil if none found.
func (m *CreateCloudResourceMysqlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceMysqlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCloudResourceMysqlResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCloudResourceMysqlResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudResourceMysqlResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCloudResourceMysqlResponseMultiError(errors)
	}

	return nil
}

// CreateCloudResourceMysqlResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateCloudResourceMysqlResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCloudResourceMysqlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceMysqlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceMysqlResponseMultiError) AllErrors() []error { return m }

// CreateCloudResourceMysqlResponseValidationError is the validation error
// returned by CreateCloudResourceMysqlResponse.Validate if the designated
// constraints aren't met.
type CreateCloudResourceMysqlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceMysqlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceMysqlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceMysqlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceMysqlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceMysqlResponseValidationError) ErrorName() string {
	return "CreateCloudResourceMysqlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceMysqlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceMysqlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceMysqlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceMysqlResponseValidationError{}

// Validate checks the field values on CreateCloudResourceOnsGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCloudResourceOnsGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceOnsGroupRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceOnsGroupRequestMultiError, or nil if none found.
func (m *CreateCloudResourceOnsGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceOnsGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for InstanceID

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCloudResourceOnsGroupRequestValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCloudResourceOnsGroupRequestValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCloudResourceOnsGroupRequestValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCloudResourceOnsGroupRequestMultiError(errors)
	}

	return nil
}

// CreateCloudResourceOnsGroupRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateCloudResourceOnsGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCloudResourceOnsGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceOnsGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceOnsGroupRequestMultiError) AllErrors() []error { return m }

// CreateCloudResourceOnsGroupRequestValidationError is the validation error
// returned by CreateCloudResourceOnsGroupRequest.Validate if the designated
// constraints aren't met.
type CreateCloudResourceOnsGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceOnsGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceOnsGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceOnsGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceOnsGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceOnsGroupRequestValidationError) ErrorName() string {
	return "CreateCloudResourceOnsGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceOnsGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceOnsGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceOnsGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceOnsGroupRequestValidationError{}

// Validate checks the field values on CreateCloudResourceOnsGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCloudResourceOnsGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceOnsGroupResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceOnsGroupResponseMultiError, or nil if none found.
func (m *CreateCloudResourceOnsGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceOnsGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateCloudResourceOnsGroupResponseMultiError(errors)
	}

	return nil
}

// CreateCloudResourceOnsGroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateCloudResourceOnsGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCloudResourceOnsGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceOnsGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceOnsGroupResponseMultiError) AllErrors() []error { return m }

// CreateCloudResourceOnsGroupResponseValidationError is the validation error
// returned by CreateCloudResourceOnsGroupResponse.Validate if the designated
// constraints aren't met.
type CreateCloudResourceOnsGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceOnsGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceOnsGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceOnsGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceOnsGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceOnsGroupResponseValidationError) ErrorName() string {
	return "CreateCloudResourceOnsGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceOnsGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceOnsGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceOnsGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceOnsGroupResponseValidationError{}

// Validate checks the field values on CreateCloudResourceOnsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudResourceOnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceOnsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceOnsRequestMultiError, or nil if none found.
func (m *CreateCloudResourceOnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceOnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Remark

	for idx, item := range m.GetTopics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCloudResourceOnsRequestValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCloudResourceOnsRequestValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCloudResourceOnsRequestValidationError{
					field:  fmt.Sprintf("Topics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CreateCloudResourceBaseInfo != nil {

		if all {
			switch v := interface{}(m.GetCreateCloudResourceBaseInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCloudResourceOnsRequestValidationError{
						field:  "CreateCloudResourceBaseInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCloudResourceOnsRequestValidationError{
						field:  "CreateCloudResourceBaseInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateCloudResourceBaseInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCloudResourceOnsRequestValidationError{
					field:  "CreateCloudResourceBaseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCloudResourceOnsRequestMultiError(errors)
	}

	return nil
}

// CreateCloudResourceOnsRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCloudResourceOnsRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateCloudResourceOnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceOnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceOnsRequestMultiError) AllErrors() []error { return m }

// CreateCloudResourceOnsRequestValidationError is the validation error
// returned by CreateCloudResourceOnsRequest.Validate if the designated
// constraints aren't met.
type CreateCloudResourceOnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceOnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceOnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceOnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceOnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceOnsRequestValidationError) ErrorName() string {
	return "CreateCloudResourceOnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceOnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceOnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceOnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceOnsRequestValidationError{}

// Validate checks the field values on CreateCloudResourceOnsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudResourceOnsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceOnsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceOnsResponseMultiError, or nil if none found.
func (m *CreateCloudResourceOnsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceOnsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCloudResourceOnsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCloudResourceOnsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudResourceOnsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCloudResourceOnsResponseMultiError(errors)
	}

	return nil
}

// CreateCloudResourceOnsResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCloudResourceOnsResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateCloudResourceOnsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceOnsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceOnsResponseMultiError) AllErrors() []error { return m }

// CreateCloudResourceOnsResponseValidationError is the validation error
// returned by CreateCloudResourceOnsResponse.Validate if the designated
// constraints aren't met.
type CreateCloudResourceOnsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceOnsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceOnsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceOnsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceOnsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceOnsResponseValidationError) ErrorName() string {
	return "CreateCloudResourceOnsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceOnsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceOnsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceOnsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceOnsResponseValidationError{}

// Validate checks the field values on CreateCloudResourceOnsTopicRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCloudResourceOnsTopicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceOnsTopicRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceOnsTopicRequestMultiError, or nil if none found.
func (m *CreateCloudResourceOnsTopicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceOnsTopicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateCloudResourceBaseInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCloudResourceOnsTopicRequestValidationError{
					field:  "CreateCloudResourceBaseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCloudResourceOnsTopicRequestValidationError{
					field:  "CreateCloudResourceBaseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateCloudResourceBaseInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudResourceOnsTopicRequestValidationError{
				field:  "CreateCloudResourceBaseInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InstanceID

	for idx, item := range m.GetTopics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCloudResourceOnsTopicRequestValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCloudResourceOnsTopicRequestValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCloudResourceOnsTopicRequestValidationError{
					field:  fmt.Sprintf("Topics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCloudResourceOnsTopicRequestMultiError(errors)
	}

	return nil
}

// CreateCloudResourceOnsTopicRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateCloudResourceOnsTopicRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCloudResourceOnsTopicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceOnsTopicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceOnsTopicRequestMultiError) AllErrors() []error { return m }

// CreateCloudResourceOnsTopicRequestValidationError is the validation error
// returned by CreateCloudResourceOnsTopicRequest.Validate if the designated
// constraints aren't met.
type CreateCloudResourceOnsTopicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceOnsTopicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceOnsTopicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceOnsTopicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceOnsTopicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceOnsTopicRequestValidationError) ErrorName() string {
	return "CreateCloudResourceOnsTopicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceOnsTopicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceOnsTopicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceOnsTopicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceOnsTopicRequestValidationError{}

// Validate checks the field values on CreateCloudResourceOnsTopicResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCloudResourceOnsTopicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceOnsTopicResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceOnsTopicResponseMultiError, or nil if none found.
func (m *CreateCloudResourceOnsTopicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceOnsTopicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCloudResourceOnsTopicResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCloudResourceOnsTopicResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudResourceOnsTopicResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCloudResourceOnsTopicResponseMultiError(errors)
	}

	return nil
}

// CreateCloudResourceOnsTopicResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateCloudResourceOnsTopicResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCloudResourceOnsTopicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceOnsTopicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceOnsTopicResponseMultiError) AllErrors() []error { return m }

// CreateCloudResourceOnsTopicResponseValidationError is the validation error
// returned by CreateCloudResourceOnsTopicResponse.Validate if the designated
// constraints aren't met.
type CreateCloudResourceOnsTopicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceOnsTopicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceOnsTopicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceOnsTopicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceOnsTopicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceOnsTopicResponseValidationError) ErrorName() string {
	return "CreateCloudResourceOnsTopicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceOnsTopicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceOnsTopicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceOnsTopicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceOnsTopicResponseValidationError{}

// Validate checks the field values on CreateCloudResourceOssRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudResourceOssRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceOssRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceOssRequestMultiError, or nil if none found.
func (m *CreateCloudResourceOssRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceOssRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBuckets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCloudResourceOssRequestValidationError{
						field:  fmt.Sprintf("Buckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCloudResourceOssRequestValidationError{
						field:  fmt.Sprintf("Buckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCloudResourceOssRequestValidationError{
					field:  fmt.Sprintf("Buckets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CreateCloudResourceBaseInfo != nil {

		if all {
			switch v := interface{}(m.GetCreateCloudResourceBaseInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCloudResourceOssRequestValidationError{
						field:  "CreateCloudResourceBaseInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCloudResourceOssRequestValidationError{
						field:  "CreateCloudResourceBaseInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateCloudResourceBaseInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCloudResourceOssRequestValidationError{
					field:  "CreateCloudResourceBaseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCloudResourceOssRequestMultiError(errors)
	}

	return nil
}

// CreateCloudResourceOssRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCloudResourceOssRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateCloudResourceOssRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceOssRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceOssRequestMultiError) AllErrors() []error { return m }

// CreateCloudResourceOssRequestValidationError is the validation error
// returned by CreateCloudResourceOssRequest.Validate if the designated
// constraints aren't met.
type CreateCloudResourceOssRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceOssRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceOssRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceOssRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceOssRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceOssRequestValidationError) ErrorName() string {
	return "CreateCloudResourceOssRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceOssRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceOssRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceOssRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceOssRequestValidationError{}

// Validate checks the field values on CreateCloudResourceOssResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudResourceOssResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceOssResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceOssResponseMultiError, or nil if none found.
func (m *CreateCloudResourceOssResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceOssResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCloudResourceOssResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCloudResourceOssResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudResourceOssResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCloudResourceOssResponseMultiError(errors)
	}

	return nil
}

// CreateCloudResourceOssResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCloudResourceOssResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateCloudResourceOssResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceOssResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceOssResponseMultiError) AllErrors() []error { return m }

// CreateCloudResourceOssResponseValidationError is the validation error
// returned by CreateCloudResourceOssResponse.Validate if the designated
// constraints aren't met.
type CreateCloudResourceOssResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceOssResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceOssResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceOssResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceOssResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceOssResponseValidationError) ErrorName() string {
	return "CreateCloudResourceOssResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceOssResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceOssResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceOssResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceOssResponseValidationError{}

// Validate checks the field values on CreateCloudResourceRedisRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudResourceRedisRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceRedisRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceRedisRequestMultiError, or nil if none found.
func (m *CreateCloudResourceRedisRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceRedisRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Spec

	// no validation rules for Password

	// no validation rules for AddonID

	if m.CreateCloudResourceBaseRequest != nil {

		if all {
			switch v := interface{}(m.GetCreateCloudResourceBaseRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCloudResourceRedisRequestValidationError{
						field:  "CreateCloudResourceBaseRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCloudResourceRedisRequestValidationError{
						field:  "CreateCloudResourceBaseRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateCloudResourceBaseRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCloudResourceRedisRequestValidationError{
					field:  "CreateCloudResourceBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCloudResourceRedisRequestMultiError(errors)
	}

	return nil
}

// CreateCloudResourceRedisRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCloudResourceRedisRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateCloudResourceRedisRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceRedisRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceRedisRequestMultiError) AllErrors() []error { return m }

// CreateCloudResourceRedisRequestValidationError is the validation error
// returned by CreateCloudResourceRedisRequest.Validate if the designated
// constraints aren't met.
type CreateCloudResourceRedisRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceRedisRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceRedisRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceRedisRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceRedisRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceRedisRequestValidationError) ErrorName() string {
	return "CreateCloudResourceRedisRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceRedisRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceRedisRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceRedisRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceRedisRequestValidationError{}

// Validate checks the field values on CreateCloudResourceRedisResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCloudResourceRedisResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceRedisResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceRedisResponseMultiError, or nil if none found.
func (m *CreateCloudResourceRedisResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceRedisResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCloudResourceRedisResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCloudResourceRedisResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudResourceRedisResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCloudResourceRedisResponseMultiError(errors)
	}

	return nil
}

// CreateCloudResourceRedisResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateCloudResourceRedisResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCloudResourceRedisResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceRedisResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceRedisResponseMultiError) AllErrors() []error { return m }

// CreateCloudResourceRedisResponseValidationError is the validation error
// returned by CreateCloudResourceRedisResponse.Validate if the designated
// constraints aren't met.
type CreateCloudResourceRedisResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceRedisResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceRedisResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceRedisResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceRedisResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceRedisResponseValidationError) ErrorName() string {
	return "CreateCloudResourceRedisResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceRedisResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceRedisResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceRedisResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceRedisResponseValidationError{}

// Validate checks the field values on CreateCloudResourceVPC with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudResourceVPC) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceVPC with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCloudResourceVPCMultiError, or nil if none found.
func (m *CreateCloudResourceVPC) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceVPC) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VPCID

	if len(errors) > 0 {
		return CreateCloudResourceVPCMultiError(errors)
	}

	return nil
}

// CreateCloudResourceVPCMultiError is an error wrapping multiple validation
// errors returned by CreateCloudResourceVPC.ValidateAll() if the designated
// constraints aren't met.
type CreateCloudResourceVPCMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceVPCMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceVPCMultiError) AllErrors() []error { return m }

// CreateCloudResourceVPCValidationError is the validation error returned by
// CreateCloudResourceVPC.Validate if the designated constraints aren't met.
type CreateCloudResourceVPCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceVPCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceVPCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceVPCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceVPCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceVPCValidationError) ErrorName() string {
	return "CreateCloudResourceVPCValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceVPCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceVPC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceVPCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceVPCValidationError{}

// Validate checks the field values on CreateCloudResourceVPCRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudResourceVPCRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceVPCRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceVPCRequestMultiError, or nil if none found.
func (m *CreateCloudResourceVPCRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceVPCRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for VPCName

	// no validation rules for CidrBlock

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateCloudResourceVPCRequestMultiError(errors)
	}

	return nil
}

// CreateCloudResourceVPCRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCloudResourceVPCRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateCloudResourceVPCRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceVPCRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceVPCRequestMultiError) AllErrors() []error { return m }

// CreateCloudResourceVPCRequestValidationError is the validation error
// returned by CreateCloudResourceVPCRequest.Validate if the designated
// constraints aren't met.
type CreateCloudResourceVPCRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceVPCRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceVPCRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceVPCRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceVPCRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceVPCRequestValidationError) ErrorName() string {
	return "CreateCloudResourceVPCRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceVPCRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceVPCRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceVPCRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceVPCRequestValidationError{}

// Validate checks the field values on CreateCloudResourceVPCResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudResourceVPCResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceVPCResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceVPCResponseMultiError, or nil if none found.
func (m *CreateCloudResourceVPCResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceVPCResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCloudResourceVPCResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCloudResourceVPCResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudResourceVPCResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCloudResourceVPCResponseMultiError(errors)
	}

	return nil
}

// CreateCloudResourceVPCResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCloudResourceVPCResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateCloudResourceVPCResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceVPCResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceVPCResponseMultiError) AllErrors() []error { return m }

// CreateCloudResourceVPCResponseValidationError is the validation error
// returned by CreateCloudResourceVPCResponse.Validate if the designated
// constraints aren't met.
type CreateCloudResourceVPCResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceVPCResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceVPCResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceVPCResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceVPCResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceVPCResponseValidationError) ErrorName() string {
	return "CreateCloudResourceVPCResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceVPCResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceVPCResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceVPCResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceVPCResponseValidationError{}

// Validate checks the field values on CreateCloudResourceVSW with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudResourceVSW) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceVSW with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCloudResourceVSWMultiError, or nil if none found.
func (m *CreateCloudResourceVSW) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceVSW) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VSWID

	if len(errors) > 0 {
		return CreateCloudResourceVSWMultiError(errors)
	}

	return nil
}

// CreateCloudResourceVSWMultiError is an error wrapping multiple validation
// errors returned by CreateCloudResourceVSW.ValidateAll() if the designated
// constraints aren't met.
type CreateCloudResourceVSWMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceVSWMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceVSWMultiError) AllErrors() []error { return m }

// CreateCloudResourceVSWValidationError is the validation error returned by
// CreateCloudResourceVSW.Validate if the designated constraints aren't met.
type CreateCloudResourceVSWValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceVSWValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceVSWValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceVSWValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceVSWValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceVSWValidationError) ErrorName() string {
	return "CreateCloudResourceVSWValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceVSWValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceVSW.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceVSWValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceVSWValidationError{}

// Validate checks the field values on CreateCloudResourceVSWRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudResourceVSWRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceVSWRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceVSWRequestMultiError, or nil if none found.
func (m *CreateCloudResourceVSWRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceVSWRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for VSWName

	// no validation rules for VPCID

	// no validation rules for CidrBlock

	// no validation rules for ZoneID

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateCloudResourceVSWRequestMultiError(errors)
	}

	return nil
}

// CreateCloudResourceVSWRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCloudResourceVSWRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateCloudResourceVSWRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceVSWRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceVSWRequestMultiError) AllErrors() []error { return m }

// CreateCloudResourceVSWRequestValidationError is the validation error
// returned by CreateCloudResourceVSWRequest.Validate if the designated
// constraints aren't met.
type CreateCloudResourceVSWRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceVSWRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceVSWRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceVSWRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceVSWRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceVSWRequestValidationError) ErrorName() string {
	return "CreateCloudResourceVSWRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceVSWRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceVSWRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceVSWRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceVSWRequestValidationError{}

// Validate checks the field values on CreateCloudResourceVSWResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudResourceVSWResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudResourceVSWResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCloudResourceVSWResponseMultiError, or nil if none found.
func (m *CreateCloudResourceVSWResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudResourceVSWResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCloudResourceVSWResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCloudResourceVSWResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudResourceVSWResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCloudResourceVSWResponseMultiError(errors)
	}

	return nil
}

// CreateCloudResourceVSWResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCloudResourceVSWResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateCloudResourceVSWResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudResourceVSWResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudResourceVSWResponseMultiError) AllErrors() []error { return m }

// CreateCloudResourceVSWResponseValidationError is the validation error
// returned by CreateCloudResourceVSWResponse.Validate if the designated
// constraints aren't met.
type CreateCloudResourceVSWResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudResourceVSWResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudResourceVSWResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudResourceVSWResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudResourceVSWResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudResourceVSWResponseValidationError) ErrorName() string {
	return "CreateCloudResourceVSWResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudResourceVSWResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudResourceVSWResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudResourceVSWResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudResourceVSWResponseValidationError{}

// Validate checks the field values on DeleteCloudAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCloudAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCloudAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCloudAccountRequestMultiError, or nil if none found.
func (m *DeleteCloudAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCloudAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for AccessKey

	if len(errors) > 0 {
		return DeleteCloudAccountRequestMultiError(errors)
	}

	return nil
}

// DeleteCloudAccountRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCloudAccountRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteCloudAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCloudAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCloudAccountRequestMultiError) AllErrors() []error { return m }

// DeleteCloudAccountRequestValidationError is the validation error returned by
// DeleteCloudAccountRequest.Validate if the designated constraints aren't met.
type DeleteCloudAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudAccountRequestValidationError) ErrorName() string {
	return "DeleteCloudAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudAccountRequestValidationError{}

// Validate checks the field values on DeleteCloudAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCloudAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCloudAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCloudAccountResponseMultiError, or nil if none found.
func (m *DeleteCloudAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCloudAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCloudAccountResponseMultiError(errors)
	}

	return nil
}

// DeleteCloudAccountResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCloudAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteCloudAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCloudAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCloudAccountResponseMultiError) AllErrors() []error { return m }

// DeleteCloudAccountResponseValidationError is the validation error returned
// by DeleteCloudAccountResponse.Validate if the designated constraints aren't met.
type DeleteCloudAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudAccountResponseValidationError) ErrorName() string {
	return "DeleteCloudAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudAccountResponseValidationError{}

// Validate checks the field values on DeleteCloudResourceMysqlDBRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteCloudResourceMysqlDBRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCloudResourceMysqlDBRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteCloudResourceMysqlDBRequestMultiError, or nil if none found.
func (m *DeleteCloudResourceMysqlDBRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCloudResourceMysqlDBRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCloudAddonResourceDeleteRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCloudResourceMysqlDBRequestValidationError{
					field:  "CloudAddonResourceDeleteRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCloudResourceMysqlDBRequestValidationError{
					field:  "CloudAddonResourceDeleteRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudAddonResourceDeleteRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCloudResourceMysqlDBRequestValidationError{
				field:  "CloudAddonResourceDeleteRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DatabaseName

	if len(errors) > 0 {
		return DeleteCloudResourceMysqlDBRequestMultiError(errors)
	}

	return nil
}

// DeleteCloudResourceMysqlDBRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteCloudResourceMysqlDBRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCloudResourceMysqlDBRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCloudResourceMysqlDBRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCloudResourceMysqlDBRequestMultiError) AllErrors() []error { return m }

// DeleteCloudResourceMysqlDBRequestValidationError is the validation error
// returned by DeleteCloudResourceMysqlDBRequest.Validate if the designated
// constraints aren't met.
type DeleteCloudResourceMysqlDBRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudResourceMysqlDBRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudResourceMysqlDBRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudResourceMysqlDBRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudResourceMysqlDBRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudResourceMysqlDBRequestValidationError) ErrorName() string {
	return "DeleteCloudResourceMysqlDBRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudResourceMysqlDBRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudResourceMysqlDBRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudResourceMysqlDBRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudResourceMysqlDBRequestValidationError{}

// Validate checks the field values on DeleteCloudResourceMysqlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCloudResourceMysqlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCloudResourceMysqlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCloudResourceMysqlRequestMultiError, or nil if none found.
func (m *DeleteCloudResourceMysqlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCloudResourceMysqlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for RecordID

	// no validation rules for ProjectID

	// no validation rules for AddonID

	// no validation rules for InstanceID

	// no validation rules for Vendor

	// no validation rules for Region

	if len(errors) > 0 {
		return DeleteCloudResourceMysqlRequestMultiError(errors)
	}

	return nil
}

// DeleteCloudResourceMysqlRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCloudResourceMysqlRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteCloudResourceMysqlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCloudResourceMysqlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCloudResourceMysqlRequestMultiError) AllErrors() []error { return m }

// DeleteCloudResourceMysqlRequestValidationError is the validation error
// returned by DeleteCloudResourceMysqlRequest.Validate if the designated
// constraints aren't met.
type DeleteCloudResourceMysqlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudResourceMysqlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudResourceMysqlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudResourceMysqlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudResourceMysqlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudResourceMysqlRequestValidationError) ErrorName() string {
	return "DeleteCloudResourceMysqlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudResourceMysqlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudResourceMysqlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudResourceMysqlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudResourceMysqlRequestValidationError{}

// Validate checks the field values on DeleteCloudResourceOnsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCloudResourceOnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCloudResourceOnsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCloudResourceOnsRequestMultiError, or nil if none found.
func (m *DeleteCloudResourceOnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCloudResourceOnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for RecordID

	// no validation rules for ProjectID

	// no validation rules for AddonID

	// no validation rules for InstanceID

	// no validation rules for Vendor

	// no validation rules for Region

	if len(errors) > 0 {
		return DeleteCloudResourceOnsRequestMultiError(errors)
	}

	return nil
}

// DeleteCloudResourceOnsRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCloudResourceOnsRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteCloudResourceOnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCloudResourceOnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCloudResourceOnsRequestMultiError) AllErrors() []error { return m }

// DeleteCloudResourceOnsRequestValidationError is the validation error
// returned by DeleteCloudResourceOnsRequest.Validate if the designated
// constraints aren't met.
type DeleteCloudResourceOnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudResourceOnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudResourceOnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudResourceOnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudResourceOnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudResourceOnsRequestValidationError) ErrorName() string {
	return "DeleteCloudResourceOnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudResourceOnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudResourceOnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudResourceOnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudResourceOnsRequestValidationError{}

// Validate checks the field values on DeleteCloudResourceOssRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCloudResourceOssRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCloudResourceOssRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCloudResourceOssRequestMultiError, or nil if none found.
func (m *DeleteCloudResourceOssRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCloudResourceOssRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for RecordID

	// no validation rules for ProjectID

	// no validation rules for AddonID

	// no validation rules for InstanceID

	// no validation rules for Vendor

	// no validation rules for Region

	if len(errors) > 0 {
		return DeleteCloudResourceOssRequestMultiError(errors)
	}

	return nil
}

// DeleteCloudResourceOssRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCloudResourceOssRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteCloudResourceOssRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCloudResourceOssRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCloudResourceOssRequestMultiError) AllErrors() []error { return m }

// DeleteCloudResourceOssRequestValidationError is the validation error
// returned by DeleteCloudResourceOssRequest.Validate if the designated
// constraints aren't met.
type DeleteCloudResourceOssRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudResourceOssRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudResourceOssRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudResourceOssRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudResourceOssRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudResourceOssRequestValidationError) ErrorName() string {
	return "DeleteCloudResourceOssRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudResourceOssRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudResourceOssRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudResourceOssRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudResourceOssRequestValidationError{}

// Validate checks the field values on DeleteCloudResourceRedisRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCloudResourceRedisRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCloudResourceRedisRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCloudResourceRedisRequestMultiError, or nil if none found.
func (m *DeleteCloudResourceRedisRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCloudResourceRedisRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for RecordID

	// no validation rules for ProjectID

	// no validation rules for AddonID

	// no validation rules for InstanceID

	// no validation rules for Vendor

	// no validation rules for Region

	if len(errors) > 0 {
		return DeleteCloudResourceRedisRequestMultiError(errors)
	}

	return nil
}

// DeleteCloudResourceRedisRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCloudResourceRedisRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteCloudResourceRedisRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCloudResourceRedisRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCloudResourceRedisRequestMultiError) AllErrors() []error { return m }

// DeleteCloudResourceRedisRequestValidationError is the validation error
// returned by DeleteCloudResourceRedisRequest.Validate if the designated
// constraints aren't met.
type DeleteCloudResourceRedisRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudResourceRedisRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudResourceRedisRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudResourceRedisRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudResourceRedisRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudResourceRedisRequestValidationError) ErrorName() string {
	return "DeleteCloudResourceRedisRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudResourceRedisRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudResourceRedisRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudResourceRedisRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudResourceRedisRequestValidationError{}

// Validate checks the field values on EdgeHostOffline with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EdgeHostOffline) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EdgeHostOffline with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EdgeHostOfflineMultiError, or nil if none found.
func (m *EdgeHostOffline) ValidateAll() error {
	return m.validate(true)
}

func (m *EdgeHostOffline) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SiteIP

	// no validation rules for ID

	if len(errors) > 0 {
		return EdgeHostOfflineMultiError(errors)
	}

	return nil
}

// EdgeHostOfflineMultiError is an error wrapping multiple validation errors
// returned by EdgeHostOffline.ValidateAll() if the designated constraints
// aren't met.
type EdgeHostOfflineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EdgeHostOfflineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EdgeHostOfflineMultiError) AllErrors() []error { return m }

// EdgeHostOfflineValidationError is the validation error returned by
// EdgeHostOffline.Validate if the designated constraints aren't met.
type EdgeHostOfflineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EdgeHostOfflineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EdgeHostOfflineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EdgeHostOfflineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EdgeHostOfflineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EdgeHostOfflineValidationError) ErrorName() string { return "EdgeHostOfflineValidationError" }

// Error satisfies the builtin error interface
func (e EdgeHostOfflineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEdgeHostOffline.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EdgeHostOfflineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EdgeHostOfflineValidationError{}

// Validate checks the field values on ErrorResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorResponseMultiError, or
// nil if none found.
func (m *ErrorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetCtx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorResponseValidationError{
					field:  "Ctx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorResponseValidationError{
					field:  "Ctx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorResponseValidationError{
				field:  "Ctx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ErrorResponseMultiError(errors)
	}

	return nil
}

// ErrorResponseMultiError is an error wrapping multiple validation errors
// returned by ErrorResponse.ValidateAll() if the designated constraints
// aren't met.
type ErrorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorResponseMultiError) AllErrors() []error { return m }

// ErrorResponseValidationError is the validation error returned by
// ErrorResponse.Validate if the designated constraints aren't met.
type ErrorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorResponseValidationError) ErrorName() string { return "ErrorResponseValidationError" }

// Error satisfies the builtin error interface
func (e ErrorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorResponseValidationError{}

// Validate checks the field values on GetCloudResourceECSTrendResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCloudResourceECSTrendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCloudResourceECSTrendResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCloudResourceECSTrendResponseMultiError, or nil if none found.
func (m *GetCloudResourceECSTrendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCloudResourceECSTrendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCloudResourceECSTrendResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCloudResourceECSTrendResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCloudResourceECSTrendResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCloudResourceECSTrendResponseMultiError(errors)
	}

	return nil
}

// GetCloudResourceECSTrendResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetCloudResourceECSTrendResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCloudResourceECSTrendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCloudResourceECSTrendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCloudResourceECSTrendResponseMultiError) AllErrors() []error { return m }

// GetCloudResourceECSTrendResponseValidationError is the validation error
// returned by GetCloudResourceECSTrendResponse.Validate if the designated
// constraints aren't met.
type GetCloudResourceECSTrendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloudResourceECSTrendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloudResourceECSTrendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloudResourceECSTrendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloudResourceECSTrendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloudResourceECSTrendResponseValidationError) ErrorName() string {
	return "GetCloudResourceECSTrendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloudResourceECSTrendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloudResourceECSTrendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloudResourceECSTrendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloudResourceECSTrendResponseValidationError{}

// Validate checks the field values on GrantMysqlAccountPrivilegeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GrantMysqlAccountPrivilegeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantMysqlAccountPrivilegeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GrantMysqlAccountPrivilegeRequestMultiError, or nil if none found.
func (m *GrantMysqlAccountPrivilegeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantMysqlAccountPrivilegeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for InstanceID

	// no validation rules for Account

	for idx, item := range m.GetAccountPrivileges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantMysqlAccountPrivilegeRequestValidationError{
						field:  fmt.Sprintf("AccountPrivileges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantMysqlAccountPrivilegeRequestValidationError{
						field:  fmt.Sprintf("AccountPrivileges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantMysqlAccountPrivilegeRequestValidationError{
					field:  fmt.Sprintf("AccountPrivileges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GrantMysqlAccountPrivilegeRequestMultiError(errors)
	}

	return nil
}

// GrantMysqlAccountPrivilegeRequestMultiError is an error wrapping multiple
// validation errors returned by
// GrantMysqlAccountPrivilegeRequest.ValidateAll() if the designated
// constraints aren't met.
type GrantMysqlAccountPrivilegeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantMysqlAccountPrivilegeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantMysqlAccountPrivilegeRequestMultiError) AllErrors() []error { return m }

// GrantMysqlAccountPrivilegeRequestValidationError is the validation error
// returned by GrantMysqlAccountPrivilegeRequest.Validate if the designated
// constraints aren't met.
type GrantMysqlAccountPrivilegeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantMysqlAccountPrivilegeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantMysqlAccountPrivilegeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantMysqlAccountPrivilegeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantMysqlAccountPrivilegeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantMysqlAccountPrivilegeRequestValidationError) ErrorName() string {
	return "GrantMysqlAccountPrivilegeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantMysqlAccountPrivilegeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantMysqlAccountPrivilegeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantMysqlAccountPrivilegeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantMysqlAccountPrivilegeRequestValidationError{}

// Validate checks the field values on GrantMysqlAccountPrivilegeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GrantMysqlAccountPrivilegeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantMysqlAccountPrivilegeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GrantMysqlAccountPrivilegeResponseMultiError, or nil if none found.
func (m *GrantMysqlAccountPrivilegeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantMysqlAccountPrivilegeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantMysqlAccountPrivilegeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantMysqlAccountPrivilegeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantMysqlAccountPrivilegeResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GrantMysqlAccountPrivilegeResponseMultiError(errors)
	}

	return nil
}

// GrantMysqlAccountPrivilegeResponseMultiError is an error wrapping multiple
// validation errors returned by
// GrantMysqlAccountPrivilegeResponse.ValidateAll() if the designated
// constraints aren't met.
type GrantMysqlAccountPrivilegeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantMysqlAccountPrivilegeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantMysqlAccountPrivilegeResponseMultiError) AllErrors() []error { return m }

// GrantMysqlAccountPrivilegeResponseValidationError is the validation error
// returned by GrantMysqlAccountPrivilegeResponse.Validate if the designated
// constraints aren't met.
type GrantMysqlAccountPrivilegeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantMysqlAccountPrivilegeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantMysqlAccountPrivilegeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantMysqlAccountPrivilegeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantMysqlAccountPrivilegeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantMysqlAccountPrivilegeResponseValidationError) ErrorName() string {
	return "GrantMysqlAccountPrivilegeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantMysqlAccountPrivilegeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantMysqlAccountPrivilegeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantMysqlAccountPrivilegeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantMysqlAccountPrivilegeResponseValidationError{}

// Validate checks the field values on HandleCloudResourceECSData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleCloudResourceECSData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleCloudResourceECSData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleCloudResourceECSDataMultiError, or nil if none found.
func (m *HandleCloudResourceECSData) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleCloudResourceECSData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFailedInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HandleCloudResourceECSDataValidationError{
						field:  fmt.Sprintf("FailedInstances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HandleCloudResourceECSDataValidationError{
						field:  fmt.Sprintf("FailedInstances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HandleCloudResourceECSDataValidationError{
					field:  fmt.Sprintf("FailedInstances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HandleCloudResourceECSDataMultiError(errors)
	}

	return nil
}

// HandleCloudResourceECSDataMultiError is an error wrapping multiple
// validation errors returned by HandleCloudResourceECSData.ValidateAll() if
// the designated constraints aren't met.
type HandleCloudResourceECSDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleCloudResourceECSDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleCloudResourceECSDataMultiError) AllErrors() []error { return m }

// HandleCloudResourceECSDataValidationError is the validation error returned
// by HandleCloudResourceECSData.Validate if the designated constraints aren't met.
type HandleCloudResourceECSDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleCloudResourceECSDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleCloudResourceECSDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleCloudResourceECSDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleCloudResourceECSDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleCloudResourceECSDataValidationError) ErrorName() string {
	return "HandleCloudResourceECSDataValidationError"
}

// Error satisfies the builtin error interface
func (e HandleCloudResourceECSDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleCloudResourceECSData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleCloudResourceECSDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleCloudResourceECSDataValidationError{}

// Validate checks the field values on HandleCloudResourceECSDataResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *HandleCloudResourceECSDataResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleCloudResourceECSDataResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// HandleCloudResourceECSDataResultMultiError, or nil if none found.
func (m *HandleCloudResourceECSDataResult) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleCloudResourceECSDataResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return HandleCloudResourceECSDataResultMultiError(errors)
	}

	return nil
}

// HandleCloudResourceECSDataResultMultiError is an error wrapping multiple
// validation errors returned by
// HandleCloudResourceECSDataResult.ValidateAll() if the designated
// constraints aren't met.
type HandleCloudResourceECSDataResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleCloudResourceECSDataResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleCloudResourceECSDataResultMultiError) AllErrors() []error { return m }

// HandleCloudResourceECSDataResultValidationError is the validation error
// returned by HandleCloudResourceECSDataResult.Validate if the designated
// constraints aren't met.
type HandleCloudResourceECSDataResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleCloudResourceECSDataResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleCloudResourceECSDataResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleCloudResourceECSDataResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleCloudResourceECSDataResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleCloudResourceECSDataResultValidationError) ErrorName() string {
	return "HandleCloudResourceECSDataResultValidationError"
}

// Error satisfies the builtin error interface
func (e HandleCloudResourceECSDataResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleCloudResourceECSDataResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleCloudResourceECSDataResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleCloudResourceECSDataResultValidationError{}

// Validate checks the field values on HandleCloudResourceECSResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleCloudResourceECSResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleCloudResourceECSResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// HandleCloudResourceECSResponseMultiError, or nil if none found.
func (m *HandleCloudResourceECSResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleCloudResourceECSResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HandleCloudResourceECSResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HandleCloudResourceECSResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HandleCloudResourceECSResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HandleCloudResourceECSResponseMultiError(errors)
	}

	return nil
}

// HandleCloudResourceECSResponseMultiError is an error wrapping multiple
// validation errors returned by HandleCloudResourceECSResponse.ValidateAll()
// if the designated constraints aren't met.
type HandleCloudResourceECSResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleCloudResourceECSResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleCloudResourceECSResponseMultiError) AllErrors() []error { return m }

// HandleCloudResourceECSResponseValidationError is the validation error
// returned by HandleCloudResourceECSResponse.Validate if the designated
// constraints aren't met.
type HandleCloudResourceECSResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleCloudResourceECSResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleCloudResourceECSResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleCloudResourceECSResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleCloudResourceECSResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleCloudResourceECSResponseValidationError) ErrorName() string {
	return "HandleCloudResourceECSResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HandleCloudResourceECSResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleCloudResourceECSResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleCloudResourceECSResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleCloudResourceECSResponseValidationError{}

// Validate checks the field values on HandleCloudResourceEcsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleCloudResourceEcsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleCloudResourceEcsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// HandleCloudResourceEcsRequestMultiError, or nil if none found.
func (m *HandleCloudResourceEcsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleCloudResourceEcsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	if len(errors) > 0 {
		return HandleCloudResourceEcsRequestMultiError(errors)
	}

	return nil
}

// HandleCloudResourceEcsRequestMultiError is an error wrapping multiple
// validation errors returned by HandleCloudResourceEcsRequest.ValidateAll()
// if the designated constraints aren't met.
type HandleCloudResourceEcsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleCloudResourceEcsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleCloudResourceEcsRequestMultiError) AllErrors() []error { return m }

// HandleCloudResourceEcsRequestValidationError is the validation error
// returned by HandleCloudResourceEcsRequest.Validate if the designated
// constraints aren't met.
type HandleCloudResourceEcsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleCloudResourceEcsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleCloudResourceEcsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleCloudResourceEcsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleCloudResourceEcsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleCloudResourceEcsRequestValidationError) ErrorName() string {
	return "HandleCloudResourceEcsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HandleCloudResourceEcsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleCloudResourceEcsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleCloudResourceEcsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleCloudResourceEcsRequestValidationError{}

// Validate checks the field values on K8SClusters with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *K8SClusters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on K8SClusters with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in K8SClustersMultiError, or
// nil if none found.
func (m *K8SClusters) ValidateAll() error {
	return m.validate(true)
}

func (m *K8SClusters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, K8SClustersValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, K8SClustersValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return K8SClustersValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return K8SClustersMultiError(errors)
	}

	return nil
}

// K8SClustersMultiError is an error wrapping multiple validation errors
// returned by K8SClusters.ValidateAll() if the designated constraints aren't met.
type K8SClustersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m K8SClustersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m K8SClustersMultiError) AllErrors() []error { return m }

// K8SClustersValidationError is the validation error returned by
// K8SClusters.Validate if the designated constraints aren't met.
type K8SClustersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e K8SClustersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e K8SClustersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e K8SClustersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e K8SClustersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e K8SClustersValidationError) ErrorName() string { return "K8SClustersValidationError" }

// Error satisfies the builtin error interface
func (e K8SClustersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sK8SClusters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = K8SClustersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = K8SClustersValidationError{}

// Validate checks the field values on ListCloudAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCloudAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudAccountMultiError, or nil if none found.
func (m *ListCloudAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for Vendor

	// no validation rules for AccessKey

	// no validation rules for Description

	if len(errors) > 0 {
		return ListCloudAccountMultiError(errors)
	}

	return nil
}

// ListCloudAccountMultiError is an error wrapping multiple validation errors
// returned by ListCloudAccount.ValidateAll() if the designated constraints
// aren't met.
type ListCloudAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudAccountMultiError) AllErrors() []error { return m }

// ListCloudAccountValidationError is the validation error returned by
// ListCloudAccount.Validate if the designated constraints aren't met.
type ListCloudAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudAccountValidationError) ErrorName() string { return "ListCloudAccountValidationError" }

// Error satisfies the builtin error interface
func (e ListCloudAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudAccountValidationError{}

// Validate checks the field values on ListCloudAccountData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudAccountData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudAccountData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudAccountDataMultiError, or nil if none found.
func (m *ListCloudAccountData) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudAccountData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCloudAccountDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCloudAccountDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudAccountDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCloudAccountDataMultiError(errors)
	}

	return nil
}

// ListCloudAccountDataMultiError is an error wrapping multiple validation
// errors returned by ListCloudAccountData.ValidateAll() if the designated
// constraints aren't met.
type ListCloudAccountDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudAccountDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudAccountDataMultiError) AllErrors() []error { return m }

// ListCloudAccountDataValidationError is the validation error returned by
// ListCloudAccountData.Validate if the designated constraints aren't met.
type ListCloudAccountDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudAccountDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudAccountDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudAccountDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudAccountDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudAccountDataValidationError) ErrorName() string {
	return "ListCloudAccountDataValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudAccountDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudAccountData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudAccountDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudAccountDataValidationError{}

// Validate checks the field values on ListCloudAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudAccountResponseMultiError, or nil if none found.
func (m *ListCloudAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCloudAccountResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCloudAccountResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudAccountResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCloudAccountResponseMultiError(errors)
	}

	return nil
}

// ListCloudAccountResponseMultiError is an error wrapping multiple validation
// errors returned by ListCloudAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCloudAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudAccountResponseMultiError) AllErrors() []error { return m }

// ListCloudAccountResponseValidationError is the validation error returned by
// ListCloudAccountResponse.Validate if the designated constraints aren't met.
type ListCloudAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudAccountResponseValidationError) ErrorName() string {
	return "ListCloudAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudAccountResponseValidationError{}

// Validate checks the field values on ListCloudGateway with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCloudGateway) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudGateway with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudGatewayMultiError, or nil if none found.
func (m *ListCloudGateway) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudGateway) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSlbs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCloudGatewayValidationError{
						field:  fmt.Sprintf("Slbs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCloudGatewayValidationError{
						field:  fmt.Sprintf("Slbs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudGatewayValidationError{
					field:  fmt.Sprintf("Slbs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetGateways() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCloudGatewayValidationError{
						field:  fmt.Sprintf("Gateways[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCloudGatewayValidationError{
						field:  fmt.Sprintf("Gateways[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudGatewayValidationError{
					field:  fmt.Sprintf("Gateways[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCloudGatewayMultiError(errors)
	}

	return nil
}

// ListCloudGatewayMultiError is an error wrapping multiple validation errors
// returned by ListCloudGateway.ValidateAll() if the designated constraints
// aren't met.
type ListCloudGatewayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudGatewayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudGatewayMultiError) AllErrors() []error { return m }

// ListCloudGatewayValidationError is the validation error returned by
// ListCloudGateway.Validate if the designated constraints aren't met.
type ListCloudGatewayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudGatewayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudGatewayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudGatewayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudGatewayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudGatewayValidationError) ErrorName() string { return "ListCloudGatewayValidationError" }

// Error satisfies the builtin error interface
func (e ListCloudGatewayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudGateway.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudGatewayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudGatewayValidationError{}

// Validate checks the field values on ListCloudResourceECS with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceECS) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceECS with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceECSMultiError, or nil if none found.
func (m *ListCloudResourceECS) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceECS) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for StartTime

	// no validation rules for RegionID

	// no validation rules for RegionName

	// no validation rules for ChargeType

	// no validation rules for Vendor

	// no validation rules for InnerIpAddress

	// no validation rules for HostName

	// no validation rules for Memory

	// no validation rules for CPU

	// no validation rules for ExpireTime

	// no validation rules for OsName

	// no validation rules for Status

	// no validation rules for Tag

	if len(errors) > 0 {
		return ListCloudResourceECSMultiError(errors)
	}

	return nil
}

// ListCloudResourceECSMultiError is an error wrapping multiple validation
// errors returned by ListCloudResourceECS.ValidateAll() if the designated
// constraints aren't met.
type ListCloudResourceECSMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceECSMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceECSMultiError) AllErrors() []error { return m }

// ListCloudResourceECSValidationError is the validation error returned by
// ListCloudResourceECS.Validate if the designated constraints aren't met.
type ListCloudResourceECSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceECSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceECSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceECSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceECSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceECSValidationError) ErrorName() string {
	return "ListCloudResourceECSValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceECSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceECS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceECSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceECSValidationError{}

// Validate checks the field values on ListCloudResourceECSData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceECSData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceECSData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceECSDataMultiError, or nil if none found.
func (m *ListCloudResourceECSData) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceECSData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCloudResourceECSDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCloudResourceECSDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudResourceECSDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCloudResourceECSDataMultiError(errors)
	}

	return nil
}

// ListCloudResourceECSDataMultiError is an error wrapping multiple validation
// errors returned by ListCloudResourceECSData.ValidateAll() if the designated
// constraints aren't met.
type ListCloudResourceECSDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceECSDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceECSDataMultiError) AllErrors() []error { return m }

// ListCloudResourceECSDataValidationError is the validation error returned by
// ListCloudResourceECSData.Validate if the designated constraints aren't met.
type ListCloudResourceECSDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceECSDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceECSDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceECSDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceECSDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceECSDataValidationError) ErrorName() string {
	return "ListCloudResourceECSDataValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceECSDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceECSData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceECSDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceECSDataValidationError{}

// Validate checks the field values on ListCloudResourceECSRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceECSRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceECSRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceECSRequestMultiError, or nil if none found.
func (m *ListCloudResourceECSRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceECSRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for Cluster

	// no validation rules for InnerIpAddress

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListCloudResourceECSRequestMultiError(errors)
	}

	return nil
}

// ListCloudResourceECSRequestMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceECSRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCloudResourceECSRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceECSRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceECSRequestMultiError) AllErrors() []error { return m }

// ListCloudResourceECSRequestValidationError is the validation error returned
// by ListCloudResourceECSRequest.Validate if the designated constraints
// aren't met.
type ListCloudResourceECSRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceECSRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceECSRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceECSRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceECSRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceECSRequestValidationError) ErrorName() string {
	return "ListCloudResourceECSRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceECSRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceECSRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceECSRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceECSRequestValidationError{}

// Validate checks the field values on ListCloudResourceECSResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceECSResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceECSResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceECSResponseMultiError, or nil if none found.
func (m *ListCloudResourceECSResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceECSResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCloudResourceECSResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCloudResourceECSResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudResourceECSResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCloudResourceECSResponseMultiError(errors)
	}

	return nil
}

// ListCloudResourceECSResponseMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceECSResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCloudResourceECSResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceECSResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceECSResponseMultiError) AllErrors() []error { return m }

// ListCloudResourceECSResponseValidationError is the validation error returned
// by ListCloudResourceECSResponse.Validate if the designated constraints
// aren't met.
type ListCloudResourceECSResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceECSResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceECSResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceECSResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceECSResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceECSResponseValidationError) ErrorName() string {
	return "ListCloudResourceECSResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceECSResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceECSResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceECSResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceECSResponseValidationError{}

// Validate checks the field values on ListCloudResourceGatewayRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceGatewayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceGatewayRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCloudResourceGatewayRequestMultiError, or nil if none found.
func (m *ListCloudResourceGatewayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceGatewayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for VpcID

	// no validation rules for ProjectID

	// no validation rules for Workspace

	if len(errors) > 0 {
		return ListCloudResourceGatewayRequestMultiError(errors)
	}

	return nil
}

// ListCloudResourceGatewayRequestMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceGatewayRequest.ValidateAll()
// if the designated constraints aren't met.
type ListCloudResourceGatewayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceGatewayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceGatewayRequestMultiError) AllErrors() []error { return m }

// ListCloudResourceGatewayRequestValidationError is the validation error
// returned by ListCloudResourceGatewayRequest.Validate if the designated
// constraints aren't met.
type ListCloudResourceGatewayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceGatewayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceGatewayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceGatewayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceGatewayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceGatewayRequestValidationError) ErrorName() string {
	return "ListCloudResourceGatewayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceGatewayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceGatewayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceGatewayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceGatewayRequestValidationError{}

// Validate checks the field values on ListCloudResourceGatewayResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCloudResourceGatewayResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceGatewayResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCloudResourceGatewayResponseMultiError, or nil if none found.
func (m *ListCloudResourceGatewayResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceGatewayResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCloudResourceGatewayResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCloudResourceGatewayResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudResourceGatewayResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCloudResourceGatewayResponseMultiError(errors)
	}

	return nil
}

// ListCloudResourceGatewayResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListCloudResourceGatewayResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCloudResourceGatewayResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceGatewayResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceGatewayResponseMultiError) AllErrors() []error { return m }

// ListCloudResourceGatewayResponseValidationError is the validation error
// returned by ListCloudResourceGatewayResponse.Validate if the designated
// constraints aren't met.
type ListCloudResourceGatewayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceGatewayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceGatewayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceGatewayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceGatewayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceGatewayResponseValidationError) ErrorName() string {
	return "ListCloudResourceGatewayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceGatewayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceGatewayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceGatewayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceGatewayResponseValidationError{}

// Validate checks the field values on ListCloudResourceMysqlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceMysqlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceMysqlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCloudResourceMysqlRequestMultiError, or nil if none found.
func (m *ListCloudResourceMysqlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceMysqlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for VpcID

	// no validation rules for ProjectID

	// no validation rules for Workspace

	if len(errors) > 0 {
		return ListCloudResourceMysqlRequestMultiError(errors)
	}

	return nil
}

// ListCloudResourceMysqlRequestMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceMysqlRequest.ValidateAll()
// if the designated constraints aren't met.
type ListCloudResourceMysqlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceMysqlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceMysqlRequestMultiError) AllErrors() []error { return m }

// ListCloudResourceMysqlRequestValidationError is the validation error
// returned by ListCloudResourceMysqlRequest.Validate if the designated
// constraints aren't met.
type ListCloudResourceMysqlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceMysqlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceMysqlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceMysqlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceMysqlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceMysqlRequestValidationError) ErrorName() string {
	return "ListCloudResourceMysqlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceMysqlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceMysqlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceMysqlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceMysqlRequestValidationError{}

// Validate checks the field values on ListCloudResourceMysqlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceMysqlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceMysqlResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCloudResourceMysqlResponseMultiError, or nil if none found.
func (m *ListCloudResourceMysqlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceMysqlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCloudResourceMysqlResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCloudResourceMysqlResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudResourceMysqlResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCloudResourceMysqlResponseMultiError(errors)
	}

	return nil
}

// ListCloudResourceMysqlResponseMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceMysqlResponse.ValidateAll()
// if the designated constraints aren't met.
type ListCloudResourceMysqlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceMysqlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceMysqlResponseMultiError) AllErrors() []error { return m }

// ListCloudResourceMysqlResponseValidationError is the validation error
// returned by ListCloudResourceMysqlResponse.Validate if the designated
// constraints aren't met.
type ListCloudResourceMysqlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceMysqlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceMysqlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceMysqlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceMysqlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceMysqlResponseValidationError) ErrorName() string {
	return "ListCloudResourceMysqlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceMysqlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceMysqlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceMysqlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceMysqlResponseValidationError{}

// Validate checks the field values on ListCloudResourceOnsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceOnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceOnsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceOnsRequestMultiError, or nil if none found.
func (m *ListCloudResourceOnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceOnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for VpcID

	// no validation rules for ProjectID

	// no validation rules for Workspace

	if len(errors) > 0 {
		return ListCloudResourceOnsRequestMultiError(errors)
	}

	return nil
}

// ListCloudResourceOnsRequestMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceOnsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCloudResourceOnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceOnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceOnsRequestMultiError) AllErrors() []error { return m }

// ListCloudResourceOnsRequestValidationError is the validation error returned
// by ListCloudResourceOnsRequest.Validate if the designated constraints
// aren't met.
type ListCloudResourceOnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceOnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceOnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceOnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceOnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceOnsRequestValidationError) ErrorName() string {
	return "ListCloudResourceOnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceOnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceOnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceOnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceOnsRequestValidationError{}

// Validate checks the field values on ListCloudResourceOnsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceOnsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceOnsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceOnsResponseMultiError, or nil if none found.
func (m *ListCloudResourceOnsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceOnsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCloudResourceOnsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCloudResourceOnsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudResourceOnsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCloudResourceOnsResponseMultiError(errors)
	}

	return nil
}

// ListCloudResourceOnsResponseMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceOnsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCloudResourceOnsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceOnsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceOnsResponseMultiError) AllErrors() []error { return m }

// ListCloudResourceOnsResponseValidationError is the validation error returned
// by ListCloudResourceOnsResponse.Validate if the designated constraints
// aren't met.
type ListCloudResourceOnsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceOnsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceOnsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceOnsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceOnsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceOnsResponseValidationError) ErrorName() string {
	return "ListCloudResourceOnsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceOnsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceOnsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceOnsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceOnsResponseValidationError{}

// Validate checks the field values on ListCloudResourceOssRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceOssRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceOssRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceOssRequestMultiError, or nil if none found.
func (m *ListCloudResourceOssRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceOssRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Name

	if len(errors) > 0 {
		return ListCloudResourceOssRequestMultiError(errors)
	}

	return nil
}

// ListCloudResourceOssRequestMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceOssRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCloudResourceOssRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceOssRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceOssRequestMultiError) AllErrors() []error { return m }

// ListCloudResourceOssRequestValidationError is the validation error returned
// by ListCloudResourceOssRequest.Validate if the designated constraints
// aren't met.
type ListCloudResourceOssRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceOssRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceOssRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceOssRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceOssRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceOssRequestValidationError) ErrorName() string {
	return "ListCloudResourceOssRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceOssRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceOssRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceOssRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceOssRequestValidationError{}

// Validate checks the field values on ListCloudResourceOssResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceOssResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceOssResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceOssResponseMultiError, or nil if none found.
func (m *ListCloudResourceOssResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceOssResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCloudResourceOssResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCloudResourceOssResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudResourceOssResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCloudResourceOssResponseMultiError(errors)
	}

	return nil
}

// ListCloudResourceOssResponseMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceOssResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCloudResourceOssResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceOssResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceOssResponseMultiError) AllErrors() []error { return m }

// ListCloudResourceOssResponseValidationError is the validation error returned
// by ListCloudResourceOssResponse.Validate if the designated constraints
// aren't met.
type ListCloudResourceOssResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceOssResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceOssResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceOssResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceOssResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceOssResponseValidationError) ErrorName() string {
	return "ListCloudResourceOssResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceOssResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceOssResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceOssResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceOssResponseValidationError{}

// Validate checks the field values on ListCloudResourceRedisData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceRedisData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceRedisData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceRedisDataMultiError, or nil if none found.
func (m *ListCloudResourceRedisData) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceRedisData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCloudResourceRedisDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCloudResourceRedisDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudResourceRedisDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCloudResourceRedisDataMultiError(errors)
	}

	return nil
}

// ListCloudResourceRedisDataMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceRedisData.ValidateAll() if
// the designated constraints aren't met.
type ListCloudResourceRedisDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceRedisDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceRedisDataMultiError) AllErrors() []error { return m }

// ListCloudResourceRedisDataValidationError is the validation error returned
// by ListCloudResourceRedisData.Validate if the designated constraints aren't met.
type ListCloudResourceRedisDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceRedisDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceRedisDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceRedisDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceRedisDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceRedisDataValidationError) ErrorName() string {
	return "ListCloudResourceRedisDataValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceRedisDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceRedisData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceRedisDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceRedisDataValidationError{}

// Validate checks the field values on ListCloudResourceRedisRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceRedisRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceRedisRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCloudResourceRedisRequestMultiError, or nil if none found.
func (m *ListCloudResourceRedisRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceRedisRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for VpcID

	// no validation rules for ProjectID

	// no validation rules for Workspace

	if len(errors) > 0 {
		return ListCloudResourceRedisRequestMultiError(errors)
	}

	return nil
}

// ListCloudResourceRedisRequestMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceRedisRequest.ValidateAll()
// if the designated constraints aren't met.
type ListCloudResourceRedisRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceRedisRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceRedisRequestMultiError) AllErrors() []error { return m }

// ListCloudResourceRedisRequestValidationError is the validation error
// returned by ListCloudResourceRedisRequest.Validate if the designated
// constraints aren't met.
type ListCloudResourceRedisRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceRedisRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceRedisRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceRedisRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceRedisRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceRedisRequestValidationError) ErrorName() string {
	return "ListCloudResourceRedisRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceRedisRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceRedisRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceRedisRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceRedisRequestValidationError{}

// Validate checks the field values on ListCloudResourceRedisResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceRedisResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceRedisResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCloudResourceRedisResponseMultiError, or nil if none found.
func (m *ListCloudResourceRedisResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceRedisResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCloudResourceRedisResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCloudResourceRedisResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudResourceRedisResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCloudResourceRedisResponseMultiError(errors)
	}

	return nil
}

// ListCloudResourceRedisResponseMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceRedisResponse.ValidateAll()
// if the designated constraints aren't met.
type ListCloudResourceRedisResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceRedisResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceRedisResponseMultiError) AllErrors() []error { return m }

// ListCloudResourceRedisResponseValidationError is the validation error
// returned by ListCloudResourceRedisResponse.Validate if the designated
// constraints aren't met.
type ListCloudResourceRedisResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceRedisResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceRedisResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceRedisResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceRedisResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceRedisResponseValidationError) ErrorName() string {
	return "ListCloudResourceRedisResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceRedisResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceRedisResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceRedisResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceRedisResponseValidationError{}

// Validate checks the field values on ListCloudResourceRegion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceRegion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceRegion with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceRegionMultiError, or nil if none found.
func (m *ListCloudResourceRegion) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceRegion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegionID

	// no validation rules for LocalName

	if len(errors) > 0 {
		return ListCloudResourceRegionMultiError(errors)
	}

	return nil
}

// ListCloudResourceRegionMultiError is an error wrapping multiple validation
// errors returned by ListCloudResourceRegion.ValidateAll() if the designated
// constraints aren't met.
type ListCloudResourceRegionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceRegionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceRegionMultiError) AllErrors() []error { return m }

// ListCloudResourceRegionValidationError is the validation error returned by
// ListCloudResourceRegion.Validate if the designated constraints aren't met.
type ListCloudResourceRegionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceRegionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceRegionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceRegionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceRegionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceRegionValidationError) ErrorName() string {
	return "ListCloudResourceRegionValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceRegionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceRegion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceRegionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceRegionValidationError{}

// Validate checks the field values on ListCloudResourceRegionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceRegionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceRegionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCloudResourceRegionRequestMultiError, or nil if none found.
func (m *ListCloudResourceRegionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceRegionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	if len(errors) > 0 {
		return ListCloudResourceRegionRequestMultiError(errors)
	}

	return nil
}

// ListCloudResourceRegionRequestMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceRegionRequest.ValidateAll()
// if the designated constraints aren't met.
type ListCloudResourceRegionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceRegionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceRegionRequestMultiError) AllErrors() []error { return m }

// ListCloudResourceRegionRequestValidationError is the validation error
// returned by ListCloudResourceRegionRequest.Validate if the designated
// constraints aren't met.
type ListCloudResourceRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceRegionRequestValidationError) ErrorName() string {
	return "ListCloudResourceRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceRegionRequestValidationError{}

// Validate checks the field values on ListCloudResourceRegionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceRegionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceRegionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCloudResourceRegionResponseMultiError, or nil if none found.
func (m *ListCloudResourceRegionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceRegionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCloudResourceRegionResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCloudResourceRegionResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudResourceRegionResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCloudResourceRegionResponseMultiError(errors)
	}

	return nil
}

// ListCloudResourceRegionResponseMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceRegionResponse.ValidateAll()
// if the designated constraints aren't met.
type ListCloudResourceRegionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceRegionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceRegionResponseMultiError) AllErrors() []error { return m }

// ListCloudResourceRegionResponseValidationError is the validation error
// returned by ListCloudResourceRegionResponse.Validate if the designated
// constraints aren't met.
type ListCloudResourceRegionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceRegionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceRegionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceRegionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceRegionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceRegionResponseValidationError) ErrorName() string {
	return "ListCloudResourceRegionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceRegionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceRegionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceRegionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceRegionResponseValidationError{}

// Validate checks the field values on ListCloudResourceVPC with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceVPC) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceVPC with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceVPCMultiError, or nil if none found.
func (m *ListCloudResourceVPC) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceVPC) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Status

	// no validation rules for RegionID

	// no validation rules for RegionName

	// no validation rules for VpcID

	// no validation rules for VpcName

	// no validation rules for CidrBlock

	// no validation rules for VswNum

	// no validation rules for Tags

	if len(errors) > 0 {
		return ListCloudResourceVPCMultiError(errors)
	}

	return nil
}

// ListCloudResourceVPCMultiError is an error wrapping multiple validation
// errors returned by ListCloudResourceVPC.ValidateAll() if the designated
// constraints aren't met.
type ListCloudResourceVPCMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceVPCMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceVPCMultiError) AllErrors() []error { return m }

// ListCloudResourceVPCValidationError is the validation error returned by
// ListCloudResourceVPC.Validate if the designated constraints aren't met.
type ListCloudResourceVPCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceVPCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceVPCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceVPCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceVPCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceVPCValidationError) ErrorName() string {
	return "ListCloudResourceVPCValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceVPCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceVPC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceVPCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceVPCValidationError{}

// Validate checks the field values on ListCloudResourceVPCData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceVPCData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceVPCData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceVPCDataMultiError, or nil if none found.
func (m *ListCloudResourceVPCData) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceVPCData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCloudResourceVPCDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCloudResourceVPCDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudResourceVPCDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCloudResourceVPCDataMultiError(errors)
	}

	return nil
}

// ListCloudResourceVPCDataMultiError is an error wrapping multiple validation
// errors returned by ListCloudResourceVPCData.ValidateAll() if the designated
// constraints aren't met.
type ListCloudResourceVPCDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceVPCDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceVPCDataMultiError) AllErrors() []error { return m }

// ListCloudResourceVPCDataValidationError is the validation error returned by
// ListCloudResourceVPCData.Validate if the designated constraints aren't met.
type ListCloudResourceVPCDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceVPCDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceVPCDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceVPCDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceVPCDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceVPCDataValidationError) ErrorName() string {
	return "ListCloudResourceVPCDataValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceVPCDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceVPCData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceVPCDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceVPCDataValidationError{}

// Validate checks the field values on ListCloudResourceVPCRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceVPCRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceVPCRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceVPCRequestMultiError, or nil if none found.
func (m *ListCloudResourceVPCRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceVPCRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for Cluster

	if len(errors) > 0 {
		return ListCloudResourceVPCRequestMultiError(errors)
	}

	return nil
}

// ListCloudResourceVPCRequestMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceVPCRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCloudResourceVPCRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceVPCRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceVPCRequestMultiError) AllErrors() []error { return m }

// ListCloudResourceVPCRequestValidationError is the validation error returned
// by ListCloudResourceVPCRequest.Validate if the designated constraints
// aren't met.
type ListCloudResourceVPCRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceVPCRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceVPCRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceVPCRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceVPCRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceVPCRequestValidationError) ErrorName() string {
	return "ListCloudResourceVPCRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceVPCRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceVPCRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceVPCRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceVPCRequestValidationError{}

// Validate checks the field values on ListCloudResourceVPCResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceVPCResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceVPCResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceVPCResponseMultiError, or nil if none found.
func (m *ListCloudResourceVPCResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceVPCResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCloudResourceVPCResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCloudResourceVPCResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudResourceVPCResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCloudResourceVPCResponseMultiError(errors)
	}

	return nil
}

// ListCloudResourceVPCResponseMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceVPCResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCloudResourceVPCResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceVPCResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceVPCResponseMultiError) AllErrors() []error { return m }

// ListCloudResourceVPCResponseValidationError is the validation error returned
// by ListCloudResourceVPCResponse.Validate if the designated constraints
// aren't met.
type ListCloudResourceVPCResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceVPCResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceVPCResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceVPCResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceVPCResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceVPCResponseValidationError) ErrorName() string {
	return "ListCloudResourceVPCResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceVPCResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceVPCResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceVPCResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceVPCResponseValidationError{}

// Validate checks the field values on ListCloudResourceVSW with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceVSW) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceVSW with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceVSWMultiError, or nil if none found.
func (m *ListCloudResourceVSW) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceVSW) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VswName

	// no validation rules for VSwitchID

	// no validation rules for CidrBlock

	// no validation rules for VpcID

	// no validation rules for Status

	// no validation rules for Region

	// no validation rules for ZoneID

	// no validation rules for ZoneName

	// no validation rules for Tags

	if len(errors) > 0 {
		return ListCloudResourceVSWMultiError(errors)
	}

	return nil
}

// ListCloudResourceVSWMultiError is an error wrapping multiple validation
// errors returned by ListCloudResourceVSW.ValidateAll() if the designated
// constraints aren't met.
type ListCloudResourceVSWMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceVSWMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceVSWMultiError) AllErrors() []error { return m }

// ListCloudResourceVSWValidationError is the validation error returned by
// ListCloudResourceVSW.Validate if the designated constraints aren't met.
type ListCloudResourceVSWValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceVSWValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceVSWValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceVSWValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceVSWValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceVSWValidationError) ErrorName() string {
	return "ListCloudResourceVSWValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceVSWValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceVSW.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceVSWValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceVSWValidationError{}

// Validate checks the field values on ListCloudResourceVSWData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceVSWData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceVSWData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceVSWDataMultiError, or nil if none found.
func (m *ListCloudResourceVSWData) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceVSWData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCloudResourceVSWDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCloudResourceVSWDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudResourceVSWDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCloudResourceVSWDataMultiError(errors)
	}

	return nil
}

// ListCloudResourceVSWDataMultiError is an error wrapping multiple validation
// errors returned by ListCloudResourceVSWData.ValidateAll() if the designated
// constraints aren't met.
type ListCloudResourceVSWDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceVSWDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceVSWDataMultiError) AllErrors() []error { return m }

// ListCloudResourceVSWDataValidationError is the validation error returned by
// ListCloudResourceVSWData.Validate if the designated constraints aren't met.
type ListCloudResourceVSWDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceVSWDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceVSWDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceVSWDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceVSWDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceVSWDataValidationError) ErrorName() string {
	return "ListCloudResourceVSWDataValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceVSWDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceVSWData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceVSWDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceVSWDataValidationError{}

// Validate checks the field values on ListCloudResourceVSWRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceVSWRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceVSWRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceVSWRequestMultiError, or nil if none found.
func (m *ListCloudResourceVSWRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceVSWRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	// no validation rules for Cluster

	// no validation rules for InnerIpAddress

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListCloudResourceVSWRequestMultiError(errors)
	}

	return nil
}

// ListCloudResourceVSWRequestMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceVSWRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCloudResourceVSWRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceVSWRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceVSWRequestMultiError) AllErrors() []error { return m }

// ListCloudResourceVSWRequestValidationError is the validation error returned
// by ListCloudResourceVSWRequest.Validate if the designated constraints
// aren't met.
type ListCloudResourceVSWRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceVSWRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceVSWRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceVSWRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceVSWRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceVSWRequestValidationError) ErrorName() string {
	return "ListCloudResourceVSWRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceVSWRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceVSWRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceVSWRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceVSWRequestValidationError{}

// Validate checks the field values on ListCloudResourceVSWResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceVSWResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceVSWResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceVSWResponseMultiError, or nil if none found.
func (m *ListCloudResourceVSWResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceVSWResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCloudResourceVSWResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCloudResourceVSWResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudResourceVSWResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCloudResourceVSWResponseMultiError(errors)
	}

	return nil
}

// ListCloudResourceVSWResponseMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceVSWResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCloudResourceVSWResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceVSWResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceVSWResponseMultiError) AllErrors() []error { return m }

// ListCloudResourceVSWResponseValidationError is the validation error returned
// by ListCloudResourceVSWResponse.Validate if the designated constraints
// aren't met.
type ListCloudResourceVSWResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceVSWResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceVSWResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceVSWResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceVSWResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceVSWResponseValidationError) ErrorName() string {
	return "ListCloudResourceVSWResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceVSWResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceVSWResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceVSWResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceVSWResponseValidationError{}

// Validate checks the field values on ListCloudResourceZone with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceZone) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceZone with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceZoneMultiError, or nil if none found.
func (m *ListCloudResourceZone) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceZone) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ZoneID

	// no validation rules for LocalName

	if len(errors) > 0 {
		return ListCloudResourceZoneMultiError(errors)
	}

	return nil
}

// ListCloudResourceZoneMultiError is an error wrapping multiple validation
// errors returned by ListCloudResourceZone.ValidateAll() if the designated
// constraints aren't met.
type ListCloudResourceZoneMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceZoneMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceZoneMultiError) AllErrors() []error { return m }

// ListCloudResourceZoneValidationError is the validation error returned by
// ListCloudResourceZone.Validate if the designated constraints aren't met.
type ListCloudResourceZoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceZoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceZoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceZoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceZoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceZoneValidationError) ErrorName() string {
	return "ListCloudResourceZoneValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceZoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceZone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceZoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceZoneValidationError{}

// Validate checks the field values on ListCloudResourceZoneRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceZoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceZoneRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudResourceZoneRequestMultiError, or nil if none found.
func (m *ListCloudResourceZoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceZoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vendor

	// no validation rules for Region

	if len(errors) > 0 {
		return ListCloudResourceZoneRequestMultiError(errors)
	}

	return nil
}

// ListCloudResourceZoneRequestMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceZoneRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCloudResourceZoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceZoneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceZoneRequestMultiError) AllErrors() []error { return m }

// ListCloudResourceZoneRequestValidationError is the validation error returned
// by ListCloudResourceZoneRequest.Validate if the designated constraints
// aren't met.
type ListCloudResourceZoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceZoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceZoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceZoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceZoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceZoneRequestValidationError) ErrorName() string {
	return "ListCloudResourceZoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceZoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceZoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceZoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceZoneRequestValidationError{}

// Validate checks the field values on ListCloudResourceZoneResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudResourceZoneResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudResourceZoneResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCloudResourceZoneResponseMultiError, or nil if none found.
func (m *ListCloudResourceZoneResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudResourceZoneResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCloudResourceZoneResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCloudResourceZoneResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudResourceZoneResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCloudResourceZoneResponseMultiError(errors)
	}

	return nil
}

// ListCloudResourceZoneResponseMultiError is an error wrapping multiple
// validation errors returned by ListCloudResourceZoneResponse.ValidateAll()
// if the designated constraints aren't met.
type ListCloudResourceZoneResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudResourceZoneResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudResourceZoneResponseMultiError) AllErrors() []error { return m }

// ListCloudResourceZoneResponseValidationError is the validation error
// returned by ListCloudResourceZoneResponse.Validate if the designated
// constraints aren't met.
type ListCloudResourceZoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudResourceZoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudResourceZoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudResourceZoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudResourceZoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudResourceZoneResponseValidationError) ErrorName() string {
	return "ListCloudResourceZoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudResourceZoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudResourceZoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudResourceZoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudResourceZoneResponseValidationError{}

// Validate checks the field values on MonthAddTrend with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MonthAddTrend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonthAddTrend with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MonthAddTrendMultiError, or
// nil if none found.
func (m *MonthAddTrend) ValidateAll() error {
	return m.validate(true)
}

func (m *MonthAddTrend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MonthAddTrendValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MonthAddTrendValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MonthAddTrendValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Title

	if len(errors) > 0 {
		return MonthAddTrendMultiError(errors)
	}

	return nil
}

// MonthAddTrendMultiError is an error wrapping multiple validation errors
// returned by MonthAddTrend.ValidateAll() if the designated constraints
// aren't met.
type MonthAddTrendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonthAddTrendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonthAddTrendMultiError) AllErrors() []error { return m }

// MonthAddTrendValidationError is the validation error returned by
// MonthAddTrend.Validate if the designated constraints aren't met.
type MonthAddTrendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonthAddTrendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonthAddTrendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonthAddTrendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonthAddTrendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonthAddTrendValidationError) ErrorName() string { return "MonthAddTrendValidationError" }

// Error satisfies the builtin error interface
func (e MonthAddTrendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonthAddTrend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonthAddTrendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonthAddTrendValidationError{}

// Validate checks the field values on MonthAddTrendData_0 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MonthAddTrendData_0) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonthAddTrendData_0 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MonthAddTrendData_0MultiError, or nil if none found.
func (m *MonthAddTrendData_0) ValidateAll() error {
	return m.validate(true)
}

func (m *MonthAddTrendData_0) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MonthAddTrendData_0ValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MonthAddTrendData_0ValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MonthAddTrendData_0ValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MonthAddTrendData_0MultiError(errors)
	}

	return nil
}

// MonthAddTrendData_0MultiError is an error wrapping multiple validation
// errors returned by MonthAddTrendData_0.ValidateAll() if the designated
// constraints aren't met.
type MonthAddTrendData_0MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonthAddTrendData_0MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonthAddTrendData_0MultiError) AllErrors() []error { return m }

// MonthAddTrendData_0ValidationError is the validation error returned by
// MonthAddTrendData_0.Validate if the designated constraints aren't met.
type MonthAddTrendData_0ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonthAddTrendData_0ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonthAddTrendData_0ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonthAddTrendData_0ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonthAddTrendData_0ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonthAddTrendData_0ValidationError) ErrorName() string {
	return "MonthAddTrendData_0ValidationError"
}

// Error satisfies the builtin error interface
func (e MonthAddTrendData_0ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonthAddTrendData_0.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonthAddTrendData_0ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonthAddTrendData_0ValidationError{}

// Validate checks the field values on MysqlAccountPrivilege with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MysqlAccountPrivilege) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MysqlAccountPrivilege with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MysqlAccountPrivilegeMultiError, or nil if none found.
func (m *MysqlAccountPrivilege) ValidateAll() error {
	return m.validate(true)
}

func (m *MysqlAccountPrivilege) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DBName

	// no validation rules for AccountPrivilege

	if len(errors) > 0 {
		return MysqlAccountPrivilegeMultiError(errors)
	}

	return nil
}

// MysqlAccountPrivilegeMultiError is an error wrapping multiple validation
// errors returned by MysqlAccountPrivilege.ValidateAll() if the designated
// constraints aren't met.
type MysqlAccountPrivilegeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MysqlAccountPrivilegeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MysqlAccountPrivilegeMultiError) AllErrors() []error { return m }

// MysqlAccountPrivilegeValidationError is the validation error returned by
// MysqlAccountPrivilege.Validate if the designated constraints aren't met.
type MysqlAccountPrivilegeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MysqlAccountPrivilegeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MysqlAccountPrivilegeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MysqlAccountPrivilegeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MysqlAccountPrivilegeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MysqlAccountPrivilegeValidationError) ErrorName() string {
	return "MysqlAccountPrivilegeValidationError"
}

// Error satisfies the builtin error interface
func (e MysqlAccountPrivilegeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMysqlAccountPrivilege.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MysqlAccountPrivilegeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MysqlAccountPrivilegeValidationError{}

// Validate checks the field values on MysqlDataBaseInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MysqlDataBaseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MysqlDataBaseInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MysqlDataBaseInfoMultiError, or nil if none found.
func (m *MysqlDataBaseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MysqlDataBaseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DBName

	// no validation rules for AddonID

	// no validation rules for CharacterSetName

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCloudResourceMysqlAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MysqlDataBaseInfoValidationError{
					field:  "CloudResourceMysqlAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MysqlDataBaseInfoValidationError{
					field:  "CloudResourceMysqlAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudResourceMysqlAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MysqlDataBaseInfoValidationError{
				field:  "CloudResourceMysqlAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MysqlDataBaseInfoMultiError(errors)
	}

	return nil
}

// MysqlDataBaseInfoMultiError is an error wrapping multiple validation errors
// returned by MysqlDataBaseInfo.ValidateAll() if the designated constraints
// aren't met.
type MysqlDataBaseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MysqlDataBaseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MysqlDataBaseInfoMultiError) AllErrors() []error { return m }

// MysqlDataBaseInfoValidationError is the validation error returned by
// MysqlDataBaseInfo.Validate if the designated constraints aren't met.
type MysqlDataBaseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MysqlDataBaseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MysqlDataBaseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MysqlDataBaseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MysqlDataBaseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MysqlDataBaseInfoValidationError) ErrorName() string {
	return "MysqlDataBaseInfoValidationError"
}

// Error satisfies the builtin error interface
func (e MysqlDataBaseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMysqlDataBaseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MysqlDataBaseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MysqlDataBaseInfoValidationError{}

// Validate checks the field values on OfflineEdgeClusterData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OfflineEdgeClusterData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfflineEdgeClusterData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OfflineEdgeClusterDataMultiError, or nil if none found.
func (m *OfflineEdgeClusterData) ValidateAll() error {
	return m.validate(true)
}

func (m *OfflineEdgeClusterData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecordID

	// no validation rules for PreCheckHint

	if len(errors) > 0 {
		return OfflineEdgeClusterDataMultiError(errors)
	}

	return nil
}

// OfflineEdgeClusterDataMultiError is an error wrapping multiple validation
// errors returned by OfflineEdgeClusterData.ValidateAll() if the designated
// constraints aren't met.
type OfflineEdgeClusterDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfflineEdgeClusterDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfflineEdgeClusterDataMultiError) AllErrors() []error { return m }

// OfflineEdgeClusterDataValidationError is the validation error returned by
// OfflineEdgeClusterData.Validate if the designated constraints aren't met.
type OfflineEdgeClusterDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfflineEdgeClusterDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfflineEdgeClusterDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfflineEdgeClusterDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfflineEdgeClusterDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfflineEdgeClusterDataValidationError) ErrorName() string {
	return "OfflineEdgeClusterDataValidationError"
}

// Error satisfies the builtin error interface
func (e OfflineEdgeClusterDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfflineEdgeClusterData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfflineEdgeClusterDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfflineEdgeClusterDataValidationError{}

// Validate checks the field values on OfflineEdgeClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OfflineEdgeClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfflineEdgeClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OfflineEdgeClusterRequestMultiError, or nil if none found.
func (m *OfflineEdgeClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OfflineEdgeClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ClusterName

	// no validation rules for PreCheck

	// no validation rules for Force

	if len(errors) > 0 {
		return OfflineEdgeClusterRequestMultiError(errors)
	}

	return nil
}

// OfflineEdgeClusterRequestMultiError is an error wrapping multiple validation
// errors returned by OfflineEdgeClusterRequest.ValidateAll() if the
// designated constraints aren't met.
type OfflineEdgeClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfflineEdgeClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfflineEdgeClusterRequestMultiError) AllErrors() []error { return m }

// OfflineEdgeClusterRequestValidationError is the validation error returned by
// OfflineEdgeClusterRequest.Validate if the designated constraints aren't met.
type OfflineEdgeClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfflineEdgeClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfflineEdgeClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfflineEdgeClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfflineEdgeClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfflineEdgeClusterRequestValidationError) ErrorName() string {
	return "OfflineEdgeClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OfflineEdgeClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfflineEdgeClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfflineEdgeClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfflineEdgeClusterRequestValidationError{}

// Validate checks the field values on OfflineEdgeClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OfflineEdgeClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfflineEdgeClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OfflineEdgeClusterResponseMultiError, or nil if none found.
func (m *OfflineEdgeClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OfflineEdgeClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfflineEdgeClusterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfflineEdgeClusterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfflineEdgeClusterResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OfflineEdgeClusterResponseMultiError(errors)
	}

	return nil
}

// OfflineEdgeClusterResponseMultiError is an error wrapping multiple
// validation errors returned by OfflineEdgeClusterResponse.ValidateAll() if
// the designated constraints aren't met.
type OfflineEdgeClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfflineEdgeClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfflineEdgeClusterResponseMultiError) AllErrors() []error { return m }

// OfflineEdgeClusterResponseValidationError is the validation error returned
// by OfflineEdgeClusterResponse.Validate if the designated constraints aren't met.
type OfflineEdgeClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfflineEdgeClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfflineEdgeClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfflineEdgeClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfflineEdgeClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfflineEdgeClusterResponseValidationError) ErrorName() string {
	return "OfflineEdgeClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OfflineEdgeClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfflineEdgeClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfflineEdgeClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfflineEdgeClusterResponseValidationError{}

// Validate checks the field values on OnsTopic with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OnsTopic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnsTopic with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OnsTopicMultiError, or nil
// if none found.
func (m *OnsTopic) ValidateAll() error {
	return m.validate(true)
}

func (m *OnsTopic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TopicName

	// no validation rules for MessageType

	// no validation rules for Relation

	// no validation rules for RelationName

	// no validation rules for Remark

	// no validation rules for CreateTime

	// no validation rules for Tags

	if len(errors) > 0 {
		return OnsTopicMultiError(errors)
	}

	return nil
}

// OnsTopicMultiError is an error wrapping multiple validation errors returned
// by OnsTopic.ValidateAll() if the designated constraints aren't met.
type OnsTopicMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnsTopicMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnsTopicMultiError) AllErrors() []error { return m }

// OnsTopicValidationError is the validation error returned by
// OnsTopic.Validate if the designated constraints aren't met.
type OnsTopicValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnsTopicValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnsTopicValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnsTopicValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnsTopicValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnsTopicValidationError) ErrorName() string { return "OnsTopicValidationError" }

// Error satisfies the builtin error interface
func (e OnsTopicValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnsTopic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnsTopicValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnsTopicValidationError{}

// Validate checks the field values on OpsAddonStatusData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpsAddonStatusData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpsAddonStatusData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpsAddonStatusDataMultiError, or nil if none found.
func (m *OpsAddonStatusData) ValidateAll() error {
	return m.validate(true)
}

func (m *OpsAddonStatusData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return OpsAddonStatusDataMultiError(errors)
	}

	return nil
}

// OpsAddonStatusDataMultiError is an error wrapping multiple validation errors
// returned by OpsAddonStatusData.ValidateAll() if the designated constraints
// aren't met.
type OpsAddonStatusDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpsAddonStatusDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpsAddonStatusDataMultiError) AllErrors() []error { return m }

// OpsAddonStatusDataValidationError is the validation error returned by
// OpsAddonStatusData.Validate if the designated constraints aren't met.
type OpsAddonStatusDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpsAddonStatusDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpsAddonStatusDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpsAddonStatusDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpsAddonStatusDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpsAddonStatusDataValidationError) ErrorName() string {
	return "OpsAddonStatusDataValidationError"
}

// Error satisfies the builtin error interface
func (e OpsAddonStatusDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpsAddonStatusData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpsAddonStatusDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpsAddonStatusDataValidationError{}

// Validate checks the field values on OpsAddonStatusQueryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpsAddonStatusQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpsAddonStatusQueryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpsAddonStatusQueryRequestMultiError, or nil if none found.
func (m *OpsAddonStatusQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OpsAddonStatusQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonName

	// no validation rules for AddonID

	if len(errors) > 0 {
		return OpsAddonStatusQueryRequestMultiError(errors)
	}

	return nil
}

// OpsAddonStatusQueryRequestMultiError is an error wrapping multiple
// validation errors returned by OpsAddonStatusQueryRequest.ValidateAll() if
// the designated constraints aren't met.
type OpsAddonStatusQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpsAddonStatusQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpsAddonStatusQueryRequestMultiError) AllErrors() []error { return m }

// OpsAddonStatusQueryRequestValidationError is the validation error returned
// by OpsAddonStatusQueryRequest.Validate if the designated constraints aren't met.
type OpsAddonStatusQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpsAddonStatusQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpsAddonStatusQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpsAddonStatusQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpsAddonStatusQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpsAddonStatusQueryRequestValidationError) ErrorName() string {
	return "OpsAddonStatusQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OpsAddonStatusQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpsAddonStatusQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpsAddonStatusQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpsAddonStatusQueryRequestValidationError{}

// Validate checks the field values on OpsAddonStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpsAddonStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpsAddonStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpsAddonStatusResponseMultiError, or nil if none found.
func (m *OpsAddonStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OpsAddonStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpsAddonStatusResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpsAddonStatusResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpsAddonStatusResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OpsAddonStatusResponseMultiError(errors)
	}

	return nil
}

// OpsAddonStatusResponseMultiError is an error wrapping multiple validation
// errors returned by OpsAddonStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type OpsAddonStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpsAddonStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpsAddonStatusResponseMultiError) AllErrors() []error { return m }

// OpsAddonStatusResponseValidationError is the validation error returned by
// OpsAddonStatusResponse.Validate if the designated constraints aren't met.
type OpsAddonStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpsAddonStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpsAddonStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpsAddonStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpsAddonStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpsAddonStatusResponseValidationError) ErrorName() string {
	return "OpsAddonStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OpsAddonStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpsAddonStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpsAddonStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpsAddonStatusResponseValidationError{}

// Validate checks the field values on OrgClusterInfoBasicData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgClusterInfoBasicData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgClusterInfoBasicData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgClusterInfoBasicDataMultiError, or nil if none found.
func (m *OrgClusterInfoBasicData) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgClusterInfoBasicData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for OrgID

	// no validation rules for OrgName

	// no validation rules for OrgDisplayName

	// no validation rules for ClusterType

	// no validation rules for Version

	// no validation rules for CreateTime

	// no validation rules for IsCentralCluster

	if len(errors) > 0 {
		return OrgClusterInfoBasicDataMultiError(errors)
	}

	return nil
}

// OrgClusterInfoBasicDataMultiError is an error wrapping multiple validation
// errors returned by OrgClusterInfoBasicData.ValidateAll() if the designated
// constraints aren't met.
type OrgClusterInfoBasicDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgClusterInfoBasicDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgClusterInfoBasicDataMultiError) AllErrors() []error { return m }

// OrgClusterInfoBasicDataValidationError is the validation error returned by
// OrgClusterInfoBasicData.Validate if the designated constraints aren't met.
type OrgClusterInfoBasicDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgClusterInfoBasicDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgClusterInfoBasicDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgClusterInfoBasicDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgClusterInfoBasicDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgClusterInfoBasicDataValidationError) ErrorName() string {
	return "OrgClusterInfoBasicDataValidationError"
}

// Error satisfies the builtin error interface
func (e OrgClusterInfoBasicDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgClusterInfoBasicData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgClusterInfoBasicDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgClusterInfoBasicDataValidationError{}

// Validate checks the field values on OrgClusterInfoData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgClusterInfoData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgClusterInfoData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgClusterInfoDataMultiError, or nil if none found.
func (m *OrgClusterInfoData) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgClusterInfoData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrgClusterInfoDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrgClusterInfoDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrgClusterInfoDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrgClusterInfoDataMultiError(errors)
	}

	return nil
}

// OrgClusterInfoDataMultiError is an error wrapping multiple validation errors
// returned by OrgClusterInfoData.ValidateAll() if the designated constraints
// aren't met.
type OrgClusterInfoDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgClusterInfoDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgClusterInfoDataMultiError) AllErrors() []error { return m }

// OrgClusterInfoDataValidationError is the validation error returned by
// OrgClusterInfoData.Validate if the designated constraints aren't met.
type OrgClusterInfoDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgClusterInfoDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgClusterInfoDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgClusterInfoDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgClusterInfoDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgClusterInfoDataValidationError) ErrorName() string {
	return "OrgClusterInfoDataValidationError"
}

// Error satisfies the builtin error interface
func (e OrgClusterInfoDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgClusterInfoData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgClusterInfoDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgClusterInfoDataValidationError{}

// Validate checks the field values on OrgClusterInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgClusterInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgClusterInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgClusterInfoRequestMultiError, or nil if none found.
func (m *OrgClusterInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgClusterInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for OrgName

	// no validation rules for ClusterType

	if len(errors) > 0 {
		return OrgClusterInfoRequestMultiError(errors)
	}

	return nil
}

// OrgClusterInfoRequestMultiError is an error wrapping multiple validation
// errors returned by OrgClusterInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type OrgClusterInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgClusterInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgClusterInfoRequestMultiError) AllErrors() []error { return m }

// OrgClusterInfoRequestValidationError is the validation error returned by
// OrgClusterInfoRequest.Validate if the designated constraints aren't met.
type OrgClusterInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgClusterInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgClusterInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgClusterInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgClusterInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgClusterInfoRequestValidationError) ErrorName() string {
	return "OrgClusterInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrgClusterInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgClusterInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgClusterInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgClusterInfoRequestValidationError{}

// Validate checks the field values on OrgClusterInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgClusterInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgClusterInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgClusterInfoResponseMultiError, or nil if none found.
func (m *OrgClusterInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgClusterInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgClusterInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgClusterInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgClusterInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrgClusterInfoResponseMultiError(errors)
	}

	return nil
}

// OrgClusterInfoResponseMultiError is an error wrapping multiple validation
// errors returned by OrgClusterInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type OrgClusterInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgClusterInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgClusterInfoResponseMultiError) AllErrors() []error { return m }

// OrgClusterInfoResponseValidationError is the validation error returned by
// OrgClusterInfoResponse.Validate if the designated constraints aren't met.
type OrgClusterInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgClusterInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgClusterInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgClusterInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgClusterInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgClusterInfoResponseValidationError) ErrorName() string {
	return "OrgClusterInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrgClusterInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgClusterInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgClusterInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgClusterInfoResponseValidationError{}

// Validate checks the field values on OrgRunningTasks with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrgRunningTasks) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgRunningTasks with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgRunningTasksMultiError, or nil if none found.
func (m *OrgRunningTasks) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgRunningTasks) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ApplicationID

	// no validation rules for PipelineID

	// no validation rules for TaskID

	// no validation rules for QueueTimeSec

	// no validation rules for CostTimeSec

	// no validation rules for ProjectName

	// no validation rules for ApplicationName

	// no validation rules for TaskName

	// no validation rules for Status

	// no validation rules for Env

	// no validation rules for ClusterName

	// no validation rules for TaskType

	// no validation rules for UserID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgRunningTasksValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgRunningTasksValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgRunningTasksValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RuntimeID

	// no validation rules for ReleaseID

	if len(errors) > 0 {
		return OrgRunningTasksMultiError(errors)
	}

	return nil
}

// OrgRunningTasksMultiError is an error wrapping multiple validation errors
// returned by OrgRunningTasks.ValidateAll() if the designated constraints
// aren't met.
type OrgRunningTasksMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgRunningTasksMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgRunningTasksMultiError) AllErrors() []error { return m }

// OrgRunningTasksValidationError is the validation error returned by
// OrgRunningTasks.Validate if the designated constraints aren't met.
type OrgRunningTasksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgRunningTasksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgRunningTasksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgRunningTasksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgRunningTasksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgRunningTasksValidationError) ErrorName() string { return "OrgRunningTasksValidationError" }

// Error satisfies the builtin error interface
func (e OrgRunningTasksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgRunningTasks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgRunningTasksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgRunningTasksValidationError{}

// Validate checks the field values on OrgRunningTasksData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgRunningTasksData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgRunningTasksData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgRunningTasksDataMultiError, or nil if none found.
func (m *OrgRunningTasksData) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgRunningTasksData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrgRunningTasksDataValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrgRunningTasksDataValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrgRunningTasksDataValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrgRunningTasksDataMultiError(errors)
	}

	return nil
}

// OrgRunningTasksDataMultiError is an error wrapping multiple validation
// errors returned by OrgRunningTasksData.ValidateAll() if the designated
// constraints aren't met.
type OrgRunningTasksDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgRunningTasksDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgRunningTasksDataMultiError) AllErrors() []error { return m }

// OrgRunningTasksDataValidationError is the validation error returned by
// OrgRunningTasksData.Validate if the designated constraints aren't met.
type OrgRunningTasksDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgRunningTasksDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgRunningTasksDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgRunningTasksDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgRunningTasksDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgRunningTasksDataValidationError) ErrorName() string {
	return "OrgRunningTasksDataValidationError"
}

// Error satisfies the builtin error interface
func (e OrgRunningTasksDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgRunningTasksData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgRunningTasksDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgRunningTasksDataValidationError{}

// Validate checks the field values on OrgRunningTasksListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgRunningTasksListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgRunningTasksListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgRunningTasksListRequestMultiError, or nil if none found.
func (m *OrgRunningTasksListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgRunningTasksListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cluster

	// no validation rules for ProjectName

	// no validation rules for AppName

	// no validation rules for PipelineID

	// no validation rules for Status

	// no validation rules for UserID

	// no validation rules for Env

	// no validation rules for Type

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return OrgRunningTasksListRequestMultiError(errors)
	}

	return nil
}

// OrgRunningTasksListRequestMultiError is an error wrapping multiple
// validation errors returned by OrgRunningTasksListRequest.ValidateAll() if
// the designated constraints aren't met.
type OrgRunningTasksListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgRunningTasksListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgRunningTasksListRequestMultiError) AllErrors() []error { return m }

// OrgRunningTasksListRequestValidationError is the validation error returned
// by OrgRunningTasksListRequest.Validate if the designated constraints aren't met.
type OrgRunningTasksListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgRunningTasksListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgRunningTasksListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgRunningTasksListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgRunningTasksListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgRunningTasksListRequestValidationError) ErrorName() string {
	return "OrgRunningTasksListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrgRunningTasksListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgRunningTasksListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgRunningTasksListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgRunningTasksListRequestValidationError{}

// Validate checks the field values on OrgRunningTasksListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgRunningTasksListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgRunningTasksListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgRunningTasksListResponseMultiError, or nil if none found.
func (m *OrgRunningTasksListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgRunningTasksListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgRunningTasksListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgRunningTasksListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgRunningTasksListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrgRunningTasksListResponseMultiError(errors)
	}

	return nil
}

// OrgRunningTasksListResponseMultiError is an error wrapping multiple
// validation errors returned by OrgRunningTasksListResponse.ValidateAll() if
// the designated constraints aren't met.
type OrgRunningTasksListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgRunningTasksListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgRunningTasksListResponseMultiError) AllErrors() []error { return m }

// OrgRunningTasksListResponseValidationError is the validation error returned
// by OrgRunningTasksListResponse.Validate if the designated constraints
// aren't met.
type OrgRunningTasksListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgRunningTasksListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgRunningTasksListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgRunningTasksListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgRunningTasksListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgRunningTasksListResponseValidationError) ErrorName() string {
	return "OrgRunningTasksListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrgRunningTasksListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgRunningTasksListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgRunningTasksListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgRunningTasksListResponseValidationError{}

// Validate checks the field values on OssBucketInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OssBucketInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OssBucketInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OssBucketInfoMultiError, or
// nil if none found.
func (m *OssBucketInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *OssBucketInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	// no validation rules for Name

	// no validation rules for Acl

	if len(errors) > 0 {
		return OssBucketInfoMultiError(errors)
	}

	return nil
}

// OssBucketInfoMultiError is an error wrapping multiple validation errors
// returned by OssBucketInfo.ValidateAll() if the designated constraints
// aren't met.
type OssBucketInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OssBucketInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OssBucketInfoMultiError) AllErrors() []error { return m }

// OssBucketInfoValidationError is the validation error returned by
// OssBucketInfo.Validate if the designated constraints aren't met.
type OssBucketInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OssBucketInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OssBucketInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OssBucketInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OssBucketInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OssBucketInfoValidationError) ErrorName() string { return "OssBucketInfoValidationError" }

// Error satisfies the builtin error interface
func (e OssBucketInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOssBucketInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OssBucketInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OssBucketInfoValidationError{}

// Validate checks the field values on PrivateSlbInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PrivateSlbInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrivateSlbInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PrivateSlbInfoMultiError,
// or nil if none found.
func (m *PrivateSlbInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PrivateSlbInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Port

	if len(errors) > 0 {
		return PrivateSlbInfoMultiError(errors)
	}

	return nil
}

// PrivateSlbInfoMultiError is an error wrapping multiple validation errors
// returned by PrivateSlbInfo.ValidateAll() if the designated constraints
// aren't met.
type PrivateSlbInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrivateSlbInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrivateSlbInfoMultiError) AllErrors() []error { return m }

// PrivateSlbInfoValidationError is the validation error returned by
// PrivateSlbInfo.Validate if the designated constraints aren't met.
type PrivateSlbInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrivateSlbInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrivateSlbInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrivateSlbInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrivateSlbInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrivateSlbInfoValidationError) ErrorName() string { return "PrivateSlbInfoValidationError" }

// Error satisfies the builtin error interface
func (e PrivateSlbInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrivateSlbInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrivateSlbInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrivateSlbInfoValidationError{}

// Validate checks the field values on RmNodesData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RmNodesData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RmNodesData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RmNodesDataMultiError, or
// nil if none found.
func (m *RmNodesData) ValidateAll() error {
	return m.validate(true)
}

func (m *RmNodesData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecordID

	if len(errors) > 0 {
		return RmNodesDataMultiError(errors)
	}

	return nil
}

// RmNodesDataMultiError is an error wrapping multiple validation errors
// returned by RmNodesData.ValidateAll() if the designated constraints aren't met.
type RmNodesDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RmNodesDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RmNodesDataMultiError) AllErrors() []error { return m }

// RmNodesDataValidationError is the validation error returned by
// RmNodesData.Validate if the designated constraints aren't met.
type RmNodesDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RmNodesDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RmNodesDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RmNodesDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RmNodesDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RmNodesDataValidationError) ErrorName() string { return "RmNodesDataValidationError" }

// Error satisfies the builtin error interface
func (e RmNodesDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRmNodesData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RmNodesDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RmNodesDataValidationError{}

// Validate checks the field values on RmNodesRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RmNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RmNodesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RmNodesRequestMultiError,
// or nil if none found.
func (m *RmNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RmNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for OrgID

	// no validation rules for Password

	// no validation rules for Force

	if len(errors) > 0 {
		return RmNodesRequestMultiError(errors)
	}

	return nil
}

// RmNodesRequestMultiError is an error wrapping multiple validation errors
// returned by RmNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type RmNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RmNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RmNodesRequestMultiError) AllErrors() []error { return m }

// RmNodesRequestValidationError is the validation error returned by
// RmNodesRequest.Validate if the designated constraints aren't met.
type RmNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RmNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RmNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RmNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RmNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RmNodesRequestValidationError) ErrorName() string { return "RmNodesRequestValidationError" }

// Error satisfies the builtin error interface
func (e RmNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRmNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RmNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RmNodesRequestValidationError{}

// Validate checks the field values on RmNodesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RmNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RmNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RmNodesResponseMultiError, or nil if none found.
func (m *RmNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RmNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RmNodesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RmNodesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RmNodesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RmNodesResponseMultiError(errors)
	}

	return nil
}

// RmNodesResponseMultiError is an error wrapping multiple validation errors
// returned by RmNodesResponse.ValidateAll() if the designated constraints
// aren't met.
type RmNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RmNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RmNodesResponseMultiError) AllErrors() []error { return m }

// RmNodesResponseValidationError is the validation error returned by
// RmNodesResponse.Validate if the designated constraints aren't met.
type RmNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RmNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RmNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RmNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RmNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RmNodesResponseValidationError) ErrorName() string { return "RmNodesResponseValidationError" }

// Error satisfies the builtin error interface
func (e RmNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRmNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RmNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RmNodesResponseValidationError{}

// Validate checks the field values on UpdateLabelsData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateLabelsData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLabelsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLabelsDataMultiError, or nil if none found.
func (m *UpdateLabelsData) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLabelsData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecordID

	if len(errors) > 0 {
		return UpdateLabelsDataMultiError(errors)
	}

	return nil
}

// UpdateLabelsDataMultiError is an error wrapping multiple validation errors
// returned by UpdateLabelsData.ValidateAll() if the designated constraints
// aren't met.
type UpdateLabelsDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLabelsDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLabelsDataMultiError) AllErrors() []error { return m }

// UpdateLabelsDataValidationError is the validation error returned by
// UpdateLabelsData.Validate if the designated constraints aren't met.
type UpdateLabelsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLabelsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLabelsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLabelsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLabelsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLabelsDataValidationError) ErrorName() string { return "UpdateLabelsDataValidationError" }

// Error satisfies the builtin error interface
func (e UpdateLabelsDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLabelsData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLabelsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLabelsDataValidationError{}

// Validate checks the field values on UpdateLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLabelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLabelsRequestMultiError, or nil if none found.
func (m *UpdateLabelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLabelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for OrgID

	// no validation rules for LabelsWithValue

	if len(errors) > 0 {
		return UpdateLabelsRequestMultiError(errors)
	}

	return nil
}

// UpdateLabelsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateLabelsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLabelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLabelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLabelsRequestMultiError) AllErrors() []error { return m }

// UpdateLabelsRequestValidationError is the validation error returned by
// UpdateLabelsRequest.Validate if the designated constraints aren't met.
type UpdateLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLabelsRequestValidationError) ErrorName() string {
	return "UpdateLabelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLabelsRequestValidationError{}

// Validate checks the field values on UpdateLabelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLabelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLabelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLabelsResponseMultiError, or nil if none found.
func (m *UpdateLabelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLabelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLabelsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLabelsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLabelsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateLabelsResponseMultiError(errors)
	}

	return nil
}

// UpdateLabelsResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateLabelsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateLabelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLabelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLabelsResponseMultiError) AllErrors() []error { return m }

// UpdateLabelsResponseValidationError is the validation error returned by
// UpdateLabelsResponse.Validate if the designated constraints aren't met.
type UpdateLabelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLabelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLabelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLabelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLabelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLabelsResponseValidationError) ErrorName() string {
	return "UpdateLabelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLabelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLabelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLabelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLabelsResponseValidationError{}

// Validate checks the field values on UpgradeClusterInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpgradeClusterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpgradeClusterInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpgradeClusterInfoMultiError, or nil if none found.
func (m *UpgradeClusterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UpgradeClusterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ClusterName

	// no validation rules for ClusterType

	// no validation rules for Version

	// no validation rules for IsCentralCluster

	if len(errors) > 0 {
		return UpgradeClusterInfoMultiError(errors)
	}

	return nil
}

// UpgradeClusterInfoMultiError is an error wrapping multiple validation errors
// returned by UpgradeClusterInfo.ValidateAll() if the designated constraints
// aren't met.
type UpgradeClusterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpgradeClusterInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpgradeClusterInfoMultiError) AllErrors() []error { return m }

// UpgradeClusterInfoValidationError is the validation error returned by
// UpgradeClusterInfo.Validate if the designated constraints aren't met.
type UpgradeClusterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradeClusterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradeClusterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradeClusterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradeClusterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradeClusterInfoValidationError) ErrorName() string {
	return "UpgradeClusterInfoValidationError"
}

// Error satisfies the builtin error interface
func (e UpgradeClusterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradeClusterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradeClusterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradeClusterInfoValidationError{}

// Validate checks the field values on UpgradeEdgeClusterData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpgradeEdgeClusterData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpgradeEdgeClusterData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpgradeEdgeClusterDataMultiError, or nil if none found.
func (m *UpgradeEdgeClusterData) ValidateAll() error {
	return m.validate(true)
}

func (m *UpgradeEdgeClusterData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecordID

	// no validation rules for Status

	// no validation rules for PrecheckHint

	if len(errors) > 0 {
		return UpgradeEdgeClusterDataMultiError(errors)
	}

	return nil
}

// UpgradeEdgeClusterDataMultiError is an error wrapping multiple validation
// errors returned by UpgradeEdgeClusterData.ValidateAll() if the designated
// constraints aren't met.
type UpgradeEdgeClusterDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpgradeEdgeClusterDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpgradeEdgeClusterDataMultiError) AllErrors() []error { return m }

// UpgradeEdgeClusterDataValidationError is the validation error returned by
// UpgradeEdgeClusterData.Validate if the designated constraints aren't met.
type UpgradeEdgeClusterDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradeEdgeClusterDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradeEdgeClusterDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradeEdgeClusterDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradeEdgeClusterDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradeEdgeClusterDataValidationError) ErrorName() string {
	return "UpgradeEdgeClusterDataValidationError"
}

// Error satisfies the builtin error interface
func (e UpgradeEdgeClusterDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradeEdgeClusterData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradeEdgeClusterDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradeEdgeClusterDataValidationError{}

// Validate checks the field values on UpgradeEdgeClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpgradeEdgeClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpgradeEdgeClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpgradeEdgeClusterRequestMultiError, or nil if none found.
func (m *UpgradeEdgeClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpgradeEdgeClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ClusterName

	// no validation rules for PreCheck

	if len(errors) > 0 {
		return UpgradeEdgeClusterRequestMultiError(errors)
	}

	return nil
}

// UpgradeEdgeClusterRequestMultiError is an error wrapping multiple validation
// errors returned by UpgradeEdgeClusterRequest.ValidateAll() if the
// designated constraints aren't met.
type UpgradeEdgeClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpgradeEdgeClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpgradeEdgeClusterRequestMultiError) AllErrors() []error { return m }

// UpgradeEdgeClusterRequestValidationError is the validation error returned by
// UpgradeEdgeClusterRequest.Validate if the designated constraints aren't met.
type UpgradeEdgeClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradeEdgeClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradeEdgeClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradeEdgeClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradeEdgeClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradeEdgeClusterRequestValidationError) ErrorName() string {
	return "UpgradeEdgeClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpgradeEdgeClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradeEdgeClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradeEdgeClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradeEdgeClusterRequestValidationError{}

// Validate checks the field values on UpgradeEdgeClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpgradeEdgeClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpgradeEdgeClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpgradeEdgeClusterResponseMultiError, or nil if none found.
func (m *UpgradeEdgeClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpgradeEdgeClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpgradeEdgeClusterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpgradeEdgeClusterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpgradeEdgeClusterResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpgradeEdgeClusterResponseMultiError(errors)
	}

	return nil
}

// UpgradeEdgeClusterResponseMultiError is an error wrapping multiple
// validation errors returned by UpgradeEdgeClusterResponse.ValidateAll() if
// the designated constraints aren't met.
type UpgradeEdgeClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpgradeEdgeClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpgradeEdgeClusterResponseMultiError) AllErrors() []error { return m }

// UpgradeEdgeClusterResponseValidationError is the validation error returned
// by UpgradeEdgeClusterResponse.Validate if the designated constraints aren't met.
type UpgradeEdgeClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradeEdgeClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradeEdgeClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradeEdgeClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradeEdgeClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradeEdgeClusterResponseValidationError) ErrorName() string {
	return "UpgradeEdgeClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpgradeEdgeClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradeEdgeClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradeEdgeClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradeEdgeClusterResponseValidationError{}
