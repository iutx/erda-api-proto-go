// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: cmp.proto

package pb

import (
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*AddNodesData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddNodesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddNodesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonConfigRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonConfigResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonConfigUpdateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonConfigUpdateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonOpsBaseRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonScaleRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonScaleResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ApiGatewayInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AutoRenewCloudResourceEcsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BatchUpgradeEdgeClusterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*BatchUpgradeEdgeClusterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_ALERT_CONDITIONS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_ALERT_CONDITIONS_VALUE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_CLOUD_RESOURCE_ECS_TREND_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_CLOUD_RESOURCE_LIST_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_CLOUD_RESOURCE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_CLUSTER_IMPORT_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_CLUSTER_INFO_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_CLUSTER_INIT_COMMAND_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_CLUSTER_INIT_RETRY_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_CLUSTER_PREVIEW_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_CREDENTIAL_ACCESSKEY_CREATE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_CREDENTIAL_ACCESSKEY_GET_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_CREDENTIAL_ACCESSKEY_RESET_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_K8S_CLUSTERS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_NODE_LABELS_LIST_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_NODE_LOGS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_RECORDS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_RECORDTYPES_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_RESOURCE_OVERVIEW_CLASS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_RESOURCE_OVERVIEW_GAUGE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_RESOURCE_OVERVIEW_REPORT_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_STEVE_CREATE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_STEVE_DELETE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_STEVE_GET_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_STEVE_PATCH_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_STEVE_UPDATE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CMP_STEVE_WS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudAddonResourceDeleteRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudAddonResourceDeleteRespnse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudClusterContainerInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudClusterGlusterfs)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudClusterHostsInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudClusterInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudClusterInstaller)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudClusterNas)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudClusterNewCreateInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudClusterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudClusterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudNodesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudNodesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceDetailInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceDetailItem)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlAccount)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlAccountPrivileges)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlBasicData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlDB)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlDBInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlDBRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlDBResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlDetailInfoData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlDetailInfoRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlDetailInfoResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlListAccountData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlListAccountItem)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlListAccountRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceMysqlListAccountResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOnsBasicData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOnsData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOnsDetailInfoRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOnsDetailInfoResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOnsGroupBaseInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOnsGroupBasicData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOnsGroupInfoData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOnsGroupInfoRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOnsGroupInfoResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOnsTopicAndGroup)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOnsTopicInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOnsTopicInfoRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOnsTopicInfoResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOssBasicData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOssData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOssDetailInfoData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOssDetailInfoRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOssDetailInfoResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOverviewRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceOverviewResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceRedisBasicData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceRedisDetailInfoRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceRedisDetailInfoResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceSetTagRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceSetTagResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CloudResourceTagItem)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ClusterUpdateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ClusterUpdateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ClustersData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudAccountRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudAccountResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceBaseInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceBaseResponseData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceMysqlAccountRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceMysqlAccountResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceMysqlDBRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceMysqlDBResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceMysqlRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceMysqlResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceOnsGroupRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceOnsGroupResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceOnsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceOnsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceOnsTopicRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceOnsTopicResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceOssRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceOssResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceRedisRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceRedisResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceVPC)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceVPCRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceVPCResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceVSW)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceVSWRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateCloudResourceVSWResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteCloudAccountRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteCloudAccountResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteCloudResourceMysqlDBRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteCloudResourceMysqlRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteCloudResourceOnsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteCloudResourceOssRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteCloudResourceRedisRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*EdgeHostOffline)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ErrorResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetCloudResourceECSTrendResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GrantMysqlAccountPrivilegeRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GrantMysqlAccountPrivilegeResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*HandleCloudResourceECSData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*HandleCloudResourceECSDataResult)(nil)
var _ urlenc.URLValuesUnmarshaler = (*HandleCloudResourceECSResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*HandleCloudResourceEcsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*K8SClusters)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudAccount)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudAccountData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudAccountResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudGateway)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceECS)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceECSData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceECSRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceECSResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceGatewayRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceGatewayResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceMysqlRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceMysqlResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceOnsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceOnsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceOssRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceOssResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceRedisData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceRedisRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceRedisResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceRegion)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceRegionRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceRegionResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceVPC)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceVPCData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceVPCRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceVPCResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceVSW)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceVSWData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceVSWRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceVSWResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceZone)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceZoneRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListCloudResourceZoneResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MonthAddTrend)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MonthAddTrendData_0)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MysqlAccountPrivilege)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MysqlDataBaseInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OfflineEdgeClusterData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OfflineEdgeClusterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OfflineEdgeClusterResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OnsTopic)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OpsAddonStatusData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OpsAddonStatusQueryRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OpsAddonStatusResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OrgClusterInfoBasicData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OrgClusterInfoData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OrgClusterInfoRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OrgClusterInfoResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OrgRunningTasks)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OrgRunningTasksData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OrgRunningTasksListRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OrgRunningTasksListResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*OssBucketInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PrivateSlbInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RmNodesData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RmNodesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RmNodesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateLabelsData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateLabelsRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateLabelsResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpgradeClusterInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpgradeEdgeClusterData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpgradeEdgeClusterRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpgradeEdgeClusterResponse)(nil)

// AddNodesData implement urlenc.URLValuesUnmarshaler.
func (m *AddNodesData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "recordID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RecordID = val
			}
		}
	}
	return nil
}

// AddNodesRequest implement urlenc.URLValuesUnmarshaler.
func (m *AddNodesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "clusterName":
				m.ClusterName = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "hosts":
				m.Hosts = vals
			case "labels":
				m.Labels = vals
			case "port":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Port = val
			case "user":
				m.User = vals[0]
			case "password":
				m.Password = vals[0]
			case "sudoHasPassword":
				m.SudoHasPassword = vals[0]
			case "dataDiskDevice":
				m.DataDiskDevice = vals[0]
			case "source":
				m.Source = vals[0]
			case "detail":
				m.Detail = vals[0]
			}
		}
	}
	return nil
}

// AddNodesResponse implement urlenc.URLValuesUnmarshaler.
func (m *AddNodesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// AddonConfigRequest implement urlenc.URLValuesUnmarshaler.
func (m *AddonConfigRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addonID":
				m.AddonID = vals[0]
			}
		}
	}
	return nil
}

// AddonConfigResponse implement urlenc.URLValuesUnmarshaler.
func (m *AddonConfigResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// AddonConfigUpdateRequest implement urlenc.URLValuesUnmarshaler.
func (m *AddonConfigUpdateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addonOpsBaseRequest":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.AddonOpsBaseRequest = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.AddonOpsBaseRequest = val
					} else {
						m.AddonOpsBaseRequest = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// AddonConfigUpdateResponse implement urlenc.URLValuesUnmarshaler.
func (m *AddonConfigUpdateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			case "error":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error = val
					} else {
						m.Error = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// AddonOpsBaseRequest implement urlenc.URLValuesUnmarshaler.
func (m *AddonOpsBaseRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "clusterName":
				m.ClusterName = vals[0]
			case "projectName":
				m.ProjectName = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "addonID":
				m.AddonID = vals[0]
			case "addonName":
				m.AddonName = vals[0]
			}
		}
	}
	return nil
}

// AddonScaleRequest implement urlenc.URLValuesUnmarshaler.
func (m *AddonScaleRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addonOpsBaseRequest":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.AddonOpsBaseRequest = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.AddonOpsBaseRequest = val
					} else {
						m.AddonOpsBaseRequest = structpb.NewStringValue(vals[0])
					}
				}
			case "cPU":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.CPU = val
			case "mem":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Mem = val
			case "nodes":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Nodes = val
			}
		}
	}
	return nil
}

// AddonScaleResponse implement urlenc.URLValuesUnmarshaler.
func (m *AddonScaleResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			case "error":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Error = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Error = val
					} else {
						m.Error = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ApiGatewayInfo implement urlenc.URLValuesUnmarshaler.
func (m *ApiGatewayInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "name":
				m.Name = vals[0]
			}
		}
	}
	return nil
}

// AutoRenewCloudResourceEcsRequest implement urlenc.URLValuesUnmarshaler.
func (m *AutoRenewCloudResourceEcsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "instanceIds":
				m.InstanceIds = vals
			case "duration":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Duration = val
			case "switch":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Switch = val
			}
		}
	}
	return nil
}

// BatchUpgradeEdgeClusterRequest implement urlenc.URLValuesUnmarshaler.
func (m *BatchUpgradeEdgeClusterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// BatchUpgradeEdgeClusterResponse implement urlenc.URLValuesUnmarshaler.
func (m *BatchUpgradeEdgeClusterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_ALERT_CONDITIONS_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_ALERT_CONDITIONS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_ALERT_CONDITIONS_VALUE_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_ALERT_CONDITIONS_VALUE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_CLOUD_RESOURCE_ECS_TREND_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_CLOUD_RESOURCE_ECS_TREND_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_CLOUD_RESOURCE_LIST_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_CLOUD_RESOURCE_LIST_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_CLOUD_RESOURCE_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_CLOUD_RESOURCE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_CLUSTER_IMPORT_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_CLUSTER_IMPORT_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_CLUSTER_INFO_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_CLUSTER_INFO_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_CLUSTER_INIT_COMMAND_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_CLUSTER_INIT_COMMAND_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_CLUSTER_INIT_RETRY_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_CLUSTER_INIT_RETRY_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_CLUSTER_PREVIEW_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_CLUSTER_PREVIEW_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_CREDENTIAL_ACCESSKEY_CREATE_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_CREDENTIAL_ACCESSKEY_CREATE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_CREDENTIAL_ACCESSKEY_GET_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_CREDENTIAL_ACCESSKEY_GET_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_CREDENTIAL_ACCESSKEY_RESET_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_CREDENTIAL_ACCESSKEY_RESET_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_K8S_CLUSTERS_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_K8S_CLUSTERS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_NODE_LABELS_LIST_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_NODE_LABELS_LIST_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_NODE_LOGS_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_NODE_LOGS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_RECORDS_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_RECORDS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_RECORDTYPES_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_RECORDTYPES_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_RESOURCE_OVERVIEW_CLASS_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_RESOURCE_OVERVIEW_CLASS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_RESOURCE_OVERVIEW_GAUGE_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_RESOURCE_OVERVIEW_GAUGE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_RESOURCE_OVERVIEW_REPORT_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_RESOURCE_OVERVIEW_REPORT_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_STEVE_CREATE_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_STEVE_CREATE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_STEVE_DELETE_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_STEVE_DELETE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_STEVE_GET_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_STEVE_GET_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_STEVE_PATCH_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_STEVE_PATCH_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_STEVE_UPDATE_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_STEVE_UPDATE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CMP_STEVE_WS_Request implement urlenc.URLValuesUnmarshaler.
func (m *CMP_STEVE_WS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CloudAddonResourceDeleteRequest implement urlenc.URLValuesUnmarshaler.
func (m *CloudAddonResourceDeleteRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "source":
				m.Source = vals[0]
			case "recordID":
				m.RecordID = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "addonID":
				m.AddonID = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			}
		}
	}
	return nil
}

// CloudAddonResourceDeleteRespnse implement urlenc.URLValuesUnmarshaler.
func (m *CloudAddonResourceDeleteRespnse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CloudClusterContainerInfo implement urlenc.URLValuesUnmarshaler.
func (m *CloudClusterContainerInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "dockerRoot":
				m.DockerRoot = vals[0]
			case "execRoot":
				m.ExecRoot = vals[0]
			case "serviceCIDR":
				m.ServiceCIDR = vals[0]
			case "podCIDR":
				m.PodCIDR = vals[0]
			case "dockerCIDR":
				m.DockerCIDR = vals[0]
			case "dockerBip":
				m.DockerBip = vals[0]
			}
		}
	}
	return nil
}

// CloudClusterGlusterfs implement urlenc.URLValuesUnmarshaler.
func (m *CloudClusterGlusterfs) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "glusterfsIps":
				m.GlusterfsIps = vals[0]
			}
		}
	}
	return nil
}

// CloudClusterHostsInfo implement urlenc.URLValuesUnmarshaler.
func (m *CloudClusterHostsInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "hostIps":
				m.HostIps = vals[0]
			case "device":
				m.Device = vals[0]
			case "dataPath":
				m.DataPath = vals[0]
			}
		}
	}
	return nil
}

// CloudClusterInfo implement urlenc.URLValuesUnmarshaler.
func (m *CloudClusterInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "clusterName":
				m.ClusterName = vals[0]
			case "clusterAccessKey":
				m.ClusterAccessKey = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "rootDomain":
				m.RootDomain = vals[0]
			case "enableHttps":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.EnableHttps = val
			case "clusterSize":
				m.ClusterSize = vals[0]
			case "nameservers":
				m.Nameservers = vals[0]
			case "collectorURL":
				m.CollectorURL = vals[0]
			case "openAPI":
				m.OpenAPI = vals[0]
			case "clusterDialer":
				m.ClusterDialer = vals[0]
			}
		}
	}
	return nil
}

// CloudClusterInstaller implement urlenc.URLValuesUnmarshaler.
func (m *CloudClusterInstaller) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "installerIp":
				m.InstallerIp = vals[0]
			case "user":
				m.User = vals[0]
			case "password":
				m.Password = vals[0]
			case "port":
				m.Port = vals[0]
			}
		}
	}
	return nil
}

// CloudClusterNas implement urlenc.URLValuesUnmarshaler.
func (m *CloudClusterNas) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "nasDomain":
				m.NasDomain = vals[0]
			case "nasPath":
				m.NasPath = vals[0]
			}
		}
	}
	return nil
}

// CloudClusterNewCreateInfo implement urlenc.URLValuesUnmarshaler.
func (m *CloudClusterNewCreateInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cloudVendor":
				m.CloudVendor = vals[0]
			case "cloudVendorName":
				m.CloudVendorName = vals[0]
			case "cloudBasicRsc":
				m.CloudBasicRsc = vals[0]
			case "region":
				m.Region = vals[0]
			case "clusterType":
				m.ClusterType = vals[0]
			case "clusterSpec":
				m.ClusterSpec = vals[0]
			case "chargeType":
				m.ChargeType = vals[0]
			case "chargePeriod":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ChargePeriod = val
			case "appNodeNum":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AppNodeNum = val
			case "accessKey":
				m.AccessKey = vals[0]
			case "secretKey":
				m.SecretKey = vals[0]
			case "vpcID":
				m.VpcID = vals[0]
			case "vpcCIDR":
				m.VpcCIDR = vals[0]
			case "vSwitchID":
				m.VSwitchID = vals[0]
			case "vSwitchCIDR":
				m.VSwitchCIDR = vals[0]
			case "natGatewayID":
				m.NatGatewayID = vals[0]
			case "forwardTableID":
				m.ForwardTableID = vals[0]
			case "snatTableID":
				m.SnatTableID = vals[0]
			case "k8sVersion":
				m.K8SVersion = vals[0]
			case "ecsInstType":
				m.EcsInstType = vals[0]
			case "terraform":
				m.Terraform = vals[0]
			}
		}
	}
	return nil
}

// CloudClusterRequest implement urlenc.URLValuesUnmarshaler.
func (m *CloudClusterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "orgName":
				m.OrgName = vals[0]
			case "diceVersion":
				m.DiceVersion = vals[0]
			case "centralClusterName":
				m.CentralClusterName = vals[0]
			case "centralRootDomain":
				m.CentralRootDomain = vals[0]
			case "centralDiceProtocol":
				m.CentralDiceProtocol = vals[0]
			case "cloudClusterInfo":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CloudClusterInfo = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CloudClusterInfo = val
					} else {
						m.CloudClusterInfo = structpb.NewStringValue(vals[0])
					}
				}
			case "cloudClusterContainerInfo":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CloudClusterContainerInfo = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CloudClusterContainerInfo = val
					} else {
						m.CloudClusterContainerInfo = structpb.NewStringValue(vals[0])
					}
				}
			case "cloudClusterNewCreateInfo":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CloudClusterNewCreateInfo = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CloudClusterNewCreateInfo = val
					} else {
						m.CloudClusterNewCreateInfo = structpb.NewStringValue(vals[0])
					}
				}
			case "cloudClusterInstaller":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CloudClusterInstaller = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CloudClusterInstaller = val
					} else {
						m.CloudClusterInstaller = structpb.NewStringValue(vals[0])
					}
				}
			case "cloudClusterNas":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CloudClusterNas = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CloudClusterNas = val
					} else {
						m.CloudClusterNas = structpb.NewStringValue(vals[0])
					}
				}
			case "cloudClusterGlusterfs":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CloudClusterGlusterfs = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CloudClusterGlusterfs = val
					} else {
						m.CloudClusterGlusterfs = structpb.NewStringValue(vals[0])
					}
				}
			case "cloudClusterHostsInfo":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CloudClusterHostsInfo = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CloudClusterHostsInfo = val
					} else {
						m.CloudClusterHostsInfo = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CloudClusterResponse implement urlenc.URLValuesUnmarshaler.
func (m *CloudClusterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CloudNodesRequest implement urlenc.URLValuesUnmarshaler.
func (m *CloudNodesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "clusterName":
				m.ClusterName = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "cloudVendor":
				m.CloudVendor = vals[0]
			case "availabilityZone":
				m.AvailabilityZone = vals[0]
			case "region":
				m.Region = vals[0]
			case "chargeType":
				m.ChargeType = vals[0]
			case "chargePeriod":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ChargePeriod = val
			case "accessKey":
				m.AccessKey = vals[0]
			case "secretKey":
				m.SecretKey = vals[0]
			case "cloudResource":
				m.CloudResource = vals[0]
			case "instancePassword":
				m.InstancePassword = vals[0]
			case "instanceNum":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.InstanceNum = val
			case "instanceType":
				m.InstanceType = vals[0]
			case "diskType":
				m.DiskType = vals[0]
			case "diskSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.DiskSize = val
			case "securityGroupIds":
				m.SecurityGroupIds = vals
			case "vSwitchId":
				m.VSwitchId = vals[0]
			case "labels":
				m.Labels = vals
			case "terraform":
				m.Terraform = vals[0]
			}
		}
	}
	return nil
}

// CloudNodesResponse implement urlenc.URLValuesUnmarshaler.
func (m *CloudNodesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CloudResourceDetailInfo implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceDetailInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "label":
				m.Label = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceDetailItem implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceDetailItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "value":
				m.Value = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceMysqlAccount implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlAccount) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "account":
				m.Account = vals[0]
			case "password":
				m.Password = vals[0]
			case "accountPrivilege":
				m.AccountPrivilege = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceMysqlAccountPrivileges implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlAccountPrivileges) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "dBName":
				m.DBName = vals[0]
			case "accountPrivilege":
				m.AccountPrivilege = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceMysqlBasicData implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlBasicData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "name":
				m.Name = vals[0]
			case "region":
				m.Region = vals[0]
			case "category":
				m.Category = vals[0]
			case "spec":
				m.Spec = vals[0]
			case "version":
				m.Version = vals[0]
			case "status":
				m.Status = vals[0]
			case "chargeType":
				m.ChargeType = vals[0]
			case "createTime":
				m.CreateTime = vals[0]
			case "expireTime":
				m.ExpireTime = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceMysqlDB implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlDB) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "dBName":
				m.DBName = vals[0]
			case "addonID":
				m.AddonID = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceMysqlDBInfo implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlDBInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			case "instanceID":
				m.InstanceID = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceMysqlDBRequest implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlDBRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cloudResourceMysqlDetailInfoRequest":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CloudResourceMysqlDetailInfoRequest = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CloudResourceMysqlDetailInfoRequest = val
					} else {
						m.CloudResourceMysqlDetailInfoRequest = structpb.NewStringValue(vals[0])
					}
				}
			case "dBName":
				m.DBName = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceMysqlDBResponse implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlDBResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CloudResourceMysqlData implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// CloudResourceMysqlDetailInfoData implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlDetailInfoData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "name":
				m.Name = vals[0]
			case "category":
				m.Category = vals[0]
			case "regionId":
				m.RegionId = vals[0]
			case "vpcId":
				m.VpcId = vals[0]
			case "vSwitchId":
				m.VSwitchId = vals[0]
			case "zoneId":
				m.ZoneId = vals[0]
			case "host":
				m.Host = vals[0]
			case "port":
				m.Port = vals[0]
			case "memory":
				m.Memory = vals[0]
			case "storageSize":
				m.StorageSize = vals[0]
			case "storageType":
				m.StorageType = vals[0]
			case "status":
				m.Status = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceMysqlDetailInfoRequest implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlDetailInfoRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			case "idorname":
				m.Idorname = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceMysqlDetailInfoResponse implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlDetailInfoResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CloudResourceMysqlListAccountData implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlListAccountData) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CloudResourceMysqlListAccountItem implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlListAccountItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "accountName":
				m.AccountName = vals[0]
			case "accountStatus":
				m.AccountStatus = vals[0]
			case "accountType":
				m.AccountType = vals[0]
			case "accountDescription":
				m.AccountDescription = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceMysqlListAccountRequest implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlListAccountRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceMysqlListAccountResponse implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceMysqlListAccountResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CloudResourceOnsBasicData implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOnsBasicData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "region":
				m.Region = vals[0]
			case "ID":
				m.ID = vals[0]
			case "name":
				m.Name = vals[0]
			case "instanceType":
				m.InstanceType = vals[0]
			case "status":
				m.Status = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceOnsData implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOnsData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// CloudResourceOnsDetailInfoRequest implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOnsDetailInfoRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceOnsDetailInfoResponse implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOnsDetailInfoResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CloudResourceOnsGroupBaseInfo implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOnsGroupBaseInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "groupId":
				m.GroupId = vals[0]
			case "groupType":
				m.GroupType = vals[0]
			case "remark":
				m.Remark = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceOnsGroupBasicData implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOnsGroupBasicData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "groupId":
				m.GroupId = vals[0]
			case "remark":
				m.Remark = vals[0]
			case "instanceId":
				m.InstanceId = vals[0]
			case "groupType":
				m.GroupType = vals[0]
			case "createTime":
				m.CreateTime = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceOnsGroupInfoData implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOnsGroupInfoData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// CloudResourceOnsGroupInfoRequest implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOnsGroupInfoRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			case "groupID":
				m.GroupID = vals[0]
			case "groupType":
				m.GroupType = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceOnsGroupInfoResponse implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOnsGroupInfoResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CloudResourceOnsTopicAndGroup implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOnsTopicAndGroup) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cloudResourceOnsGroupBaseInfo":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CloudResourceOnsGroupBaseInfo = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CloudResourceOnsGroupBaseInfo = val
					} else {
						m.CloudResourceOnsGroupBaseInfo = structpb.NewStringValue(vals[0])
					}
				}
			case "topicName":
				m.TopicName = vals[0]
			case "addonID":
				m.AddonID = vals[0]
			case "messageType":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MessageType = val
			case "remark":
				m.Remark = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceOnsTopicInfo implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOnsTopicInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// CloudResourceOnsTopicInfoRequest implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOnsTopicInfoRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cloudResourceMysqlDetailInfoRequest":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CloudResourceMysqlDetailInfoRequest = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CloudResourceMysqlDetailInfoRequest = val
					} else {
						m.CloudResourceMysqlDetailInfoRequest = structpb.NewStringValue(vals[0])
					}
				}
			case "topicName":
				m.TopicName = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceOnsTopicInfoResponse implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOnsTopicInfoResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CloudResourceOssBasicData implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOssBasicData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "location":
				m.Location = vals[0]
			case "createDate":
				m.CreateDate = vals[0]
			case "storageClass":
				m.StorageClass = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceOssData implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOssData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// CloudResourceOssDetailInfoData implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOssDetailInfoData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "bucketName":
				m.BucketName = vals[0]
			case "internetEndpoint":
				m.InternetEndpoint = vals[0]
			case "intranetEndpoint":
				m.IntranetEndpoint = vals[0]
			case "location":
				m.Location = vals[0]
			case "acl":
				m.Acl = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceOssDetailInfoRequest implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOssDetailInfoRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "name":
				m.Name = vals[0]
			case "bucketname":
				m.Bucketname = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceOssDetailInfoResponse implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOssDetailInfoResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CloudResourceOverviewRequest implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOverviewRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceOverviewResponse implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceOverviewResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CloudResourceRedisBasicData implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceRedisBasicData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "name":
				m.Name = vals[0]
			case "region":
				m.Region = vals[0]
			case "spec":
				m.Spec = vals[0]
			case "version":
				m.Version = vals[0]
			case "capacity":
				m.Capacity = vals[0]
			case "status":
				m.Status = vals[0]
			case "chargeType":
				m.ChargeType = vals[0]
			case "expireTime":
				m.ExpireTime = vals[0]
			case "createTime":
				m.CreateTime = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceRedisDetailInfoRequest implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceRedisDetailInfoRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceRedisDetailInfoResponse implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceRedisDetailInfoResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CloudResourceSetTagRequest implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceSetTagRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tags":
				m.Tags = vals
			case "resourceType":
				m.ResourceType = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			}
		}
	}
	return nil
}

// CloudResourceSetTagResponse implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceSetTagResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CloudResourceTagItem implement urlenc.URLValuesUnmarshaler.
func (m *CloudResourceTagItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "resourceID":
				m.ResourceID = vals[0]
			case "oldTags":
				m.OldTags = vals
			}
		}
	}
	return nil
}

// ClusterUpdateRequest implement urlenc.URLValuesUnmarshaler.
func (m *ClusterUpdateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "type":
				m.Type = vals[0]
			case "cloudVendor":
				m.CloudVendor = vals[0]
			case "logo":
				m.Logo = vals[0]
			case "description":
				m.Description = vals[0]
			case "wildcardDomain":
				m.WildcardDomain = vals[0]
			case "schedulerConfig":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.SchedulerConfig = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.SchedulerConfig = val
					} else {
						m.SchedulerConfig = structpb.NewStringValue(vals[0])
					}
				}
			case "opsConfig":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.OpsConfig = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.OpsConfig = val
					} else {
						m.OpsConfig = structpb.NewStringValue(vals[0])
					}
				}
			case "sysConfig":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.SysConfig = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.SysConfig = val
					} else {
						m.SysConfig = structpb.NewStringValue(vals[0])
					}
				}
			case "manageConfig":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.ManageConfig = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.ManageConfig = val
					} else {
						m.ManageConfig = structpb.NewStringValue(vals[0])
					}
				}
			case "orgID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			}
		}
	}
	return nil
}

// ClusterUpdateResponse implement urlenc.URLValuesUnmarshaler.
func (m *ClusterUpdateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ClustersData implement urlenc.URLValuesUnmarshaler.
func (m *ClustersData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ready":
				m.Ready = vals
			case "unReady":
				m.UnReady = vals
			}
		}
	}
	return nil
}

// CreateCloudAccountRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudAccountRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "accessKey":
				m.AccessKey = vals[0]
			case "secret":
				m.Secret = vals[0]
			case "description":
				m.Description = vals[0]
			}
		}
	}
	return nil
}

// CreateCloudAccountResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudAccountResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CreateCloudResourceBaseInfo implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceBaseInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "vpcID":
				m.VpcID = vals[0]
			case "vSwitchID":
				m.VSwitchID = vals[0]
			case "zoneID":
				m.ZoneID = vals[0]
			case "orgID":
				m.OrgID = vals[0]
			case "userID":
				m.UserID = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "source":
				m.Source = vals[0]
			case "clientToken":
				m.ClientToken = vals[0]
			}
		}
	}
	return nil
}

// CreateCloudResourceBaseResponseData implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceBaseResponseData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "recordID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RecordID = val
			}
		}
	}
	return nil
}

// CreateCloudResourceMysqlAccountRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceMysqlAccountRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			case "account":
				m.Account = vals[0]
			case "password":
				m.Password = vals[0]
			case "description":
				m.Description = vals[0]
			}
		}
	}
	return nil
}

// CreateCloudResourceMysqlAccountResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceMysqlAccountResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CreateCloudResourceMysqlDBRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceMysqlDBRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "createCloudResourceBaseInfo":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CreateCloudResourceBaseInfo = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CreateCloudResourceBaseInfo = val
					} else {
						m.CreateCloudResourceBaseInfo = structpb.NewStringValue(vals[0])
					}
				}
			case "instanceID":
				m.InstanceID = vals[0]
			}
		}
	}
	return nil
}

// CreateCloudResourceMysqlDBResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceMysqlDBResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CreateCloudResourceMysqlRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceMysqlRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "createCloudResourceBaseRequest":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CreateCloudResourceBaseRequest = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CreateCloudResourceBaseRequest = val
					} else {
						m.CreateCloudResourceBaseRequest = structpb.NewStringValue(vals[0])
					}
				}
			case "version":
				m.Version = vals[0]
			case "specType":
				m.SpecType = vals[0]
			case "specSize":
				m.SpecSize = vals[0]
			case "storageType":
				m.StorageType = vals[0]
			case "storageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.StorageSize = val
			case "securityIPList":
				m.SecurityIPList = vals[0]
			}
		}
	}
	return nil
}

// CreateCloudResourceMysqlResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceMysqlResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CreateCloudResourceOnsGroupRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceOnsGroupRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			}
		}
	}
	return nil
}

// CreateCloudResourceOnsGroupResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceOnsGroupResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CreateCloudResourceOnsRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceOnsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "createCloudResourceBaseInfo":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CreateCloudResourceBaseInfo = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CreateCloudResourceBaseInfo = val
					} else {
						m.CreateCloudResourceBaseInfo = structpb.NewStringValue(vals[0])
					}
				}
			case "name":
				m.Name = vals[0]
			case "remark":
				m.Remark = vals[0]
			}
		}
	}
	return nil
}

// CreateCloudResourceOnsResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceOnsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CreateCloudResourceOnsTopicRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceOnsTopicRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "createCloudResourceBaseInfo":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CreateCloudResourceBaseInfo = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CreateCloudResourceBaseInfo = val
					} else {
						m.CreateCloudResourceBaseInfo = structpb.NewStringValue(vals[0])
					}
				}
			case "instanceID":
				m.InstanceID = vals[0]
			}
		}
	}
	return nil
}

// CreateCloudResourceOnsTopicResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceOnsTopicResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CreateCloudResourceOssRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceOssRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "createCloudResourceBaseInfo":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CreateCloudResourceBaseInfo = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CreateCloudResourceBaseInfo = val
					} else {
						m.CreateCloudResourceBaseInfo = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CreateCloudResourceOssResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceOssResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CreateCloudResourceRedisRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceRedisRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "createCloudResourceBaseRequest":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CreateCloudResourceBaseRequest = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CreateCloudResourceBaseRequest = val
					} else {
						m.CreateCloudResourceBaseRequest = structpb.NewStringValue(vals[0])
					}
				}
			case "version":
				m.Version = vals[0]
			case "spec":
				m.Spec = vals[0]
			case "password":
				m.Password = vals[0]
			case "addonID":
				m.AddonID = vals[0]
			}
		}
	}
	return nil
}

// CreateCloudResourceRedisResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceRedisResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CreateCloudResourceVPC implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceVPC) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vPCID":
				m.VPCID = vals[0]
			}
		}
	}
	return nil
}

// CreateCloudResourceVPCRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceVPCRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "vPCName":
				m.VPCName = vals[0]
			case "cidrBlock":
				m.CidrBlock = vals[0]
			case "description":
				m.Description = vals[0]
			}
		}
	}
	return nil
}

// CreateCloudResourceVPCResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceVPCResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// CreateCloudResourceVSW implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceVSW) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vSWID":
				m.VSWID = vals[0]
			}
		}
	}
	return nil
}

// CreateCloudResourceVSWRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceVSWRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "vSWName":
				m.VSWName = vals[0]
			case "vPCID":
				m.VPCID = vals[0]
			case "cidrBlock":
				m.CidrBlock = vals[0]
			case "zoneID":
				m.ZoneID = vals[0]
			case "description":
				m.Description = vals[0]
			}
		}
	}
	return nil
}

// CreateCloudResourceVSWResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateCloudResourceVSWResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// DeleteCloudAccountRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteCloudAccountRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "accessKey":
				m.AccessKey = vals[0]
			}
		}
	}
	return nil
}

// DeleteCloudAccountResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteCloudAccountResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// DeleteCloudResourceMysqlDBRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteCloudResourceMysqlDBRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cloudAddonResourceDeleteRequest":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CloudAddonResourceDeleteRequest = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CloudAddonResourceDeleteRequest = val
					} else {
						m.CloudAddonResourceDeleteRequest = structpb.NewStringValue(vals[0])
					}
				}
			case "databaseName":
				m.DatabaseName = vals[0]
			}
		}
	}
	return nil
}

// DeleteCloudResourceMysqlRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteCloudResourceMysqlRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "source":
				m.Source = vals[0]
			case "recordID":
				m.RecordID = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "addonID":
				m.AddonID = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			}
		}
	}
	return nil
}

// DeleteCloudResourceOnsRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteCloudResourceOnsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "source":
				m.Source = vals[0]
			case "recordID":
				m.RecordID = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "addonID":
				m.AddonID = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			}
		}
	}
	return nil
}

// DeleteCloudResourceOssRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteCloudResourceOssRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "source":
				m.Source = vals[0]
			case "recordID":
				m.RecordID = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "addonID":
				m.AddonID = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			}
		}
	}
	return nil
}

// DeleteCloudResourceRedisRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteCloudResourceRedisRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "source":
				m.Source = vals[0]
			case "recordID":
				m.RecordID = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "addonID":
				m.AddonID = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			}
		}
	}
	return nil
}

// EdgeHostOffline implement urlenc.URLValuesUnmarshaler.
func (m *EdgeHostOffline) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "siteIP":
				m.SiteIP = vals[0]
			case "ID":
				m.ID = vals[0]
			}
		}
	}
	return nil
}

// ErrorResponse implement urlenc.URLValuesUnmarshaler.
func (m *ErrorResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "code":
				m.Code = vals[0]
			case "msg":
				m.Msg = vals[0]
			case "ctx":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Ctx = val
					} else {
						m.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// GetCloudResourceECSTrendResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetCloudResourceECSTrendResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// GrantMysqlAccountPrivilegeRequest implement urlenc.URLValuesUnmarshaler.
func (m *GrantMysqlAccountPrivilegeRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			case "account":
				m.Account = vals[0]
			}
		}
	}
	return nil
}

// GrantMysqlAccountPrivilegeResponse implement urlenc.URLValuesUnmarshaler.
func (m *GrantMysqlAccountPrivilegeResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// HandleCloudResourceECSData implement urlenc.URLValuesUnmarshaler.
func (m *HandleCloudResourceECSData) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// HandleCloudResourceECSDataResult implement urlenc.URLValuesUnmarshaler.
func (m *HandleCloudResourceECSDataResult) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "message":
				m.Message = vals[0]
			case "instanceId":
				m.InstanceId = vals[0]
			}
		}
	}
	return nil
}

// HandleCloudResourceECSResponse implement urlenc.URLValuesUnmarshaler.
func (m *HandleCloudResourceECSResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// HandleCloudResourceEcsRequest implement urlenc.URLValuesUnmarshaler.
func (m *HandleCloudResourceEcsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "instanceIds":
				m.InstanceIds = vals
			}
		}
	}
	return nil
}

// K8SClusters implement urlenc.URLValuesUnmarshaler.
func (m *K8SClusters) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ListCloudAccount implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudAccount) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				m.OrgID = vals[0]
			case "vendor":
				m.Vendor = vals[0]
			case "accessKey":
				m.AccessKey = vals[0]
			case "description":
				m.Description = vals[0]
			}
		}
	}
	return nil
}

// ListCloudAccountData implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudAccountData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// ListCloudAccountResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudAccountResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ListCloudGateway implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudGateway) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ListCloudResourceECS implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceECS) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "startTime":
				m.StartTime = vals[0]
			case "regionID":
				m.RegionID = vals[0]
			case "regionName":
				m.RegionName = vals[0]
			case "chargeType":
				m.ChargeType = vals[0]
			case "vendor":
				m.Vendor = vals[0]
			case "innerIpAddress":
				m.InnerIpAddress = vals[0]
			case "hostName":
				m.HostName = vals[0]
			case "memory":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Memory = val
			case "cPU":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CPU = val
			case "expireTime":
				m.ExpireTime = vals[0]
			case "osName":
				m.OsName = vals[0]
			case "status":
				m.Status = vals[0]
			}
		}
	}
	return nil
}

// ListCloudResourceECSData implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceECSData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// ListCloudResourceECSRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceECSRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "cluster":
				m.Cluster = vals[0]
			case "innerIpAddress":
				m.InnerIpAddress = vals[0]
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			}
		}
	}
	return nil
}

// ListCloudResourceECSResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceECSResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ListCloudResourceGatewayRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceGatewayRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "vpcID":
				m.VpcID = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			}
		}
	}
	return nil
}

// ListCloudResourceGatewayResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceGatewayResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ListCloudResourceMysqlRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceMysqlRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "vpcID":
				m.VpcID = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			}
		}
	}
	return nil
}

// ListCloudResourceMysqlResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceMysqlResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ListCloudResourceOnsRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceOnsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "vpcID":
				m.VpcID = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			}
		}
	}
	return nil
}

// ListCloudResourceOnsResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceOnsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ListCloudResourceOssRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceOssRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "name":
				m.Name = vals[0]
			}
		}
	}
	return nil
}

// ListCloudResourceOssResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceOssResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ListCloudResourceRedisData implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceRedisData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// ListCloudResourceRedisRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceRedisRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "vpcID":
				m.VpcID = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			}
		}
	}
	return nil
}

// ListCloudResourceRedisResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceRedisResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ListCloudResourceRegion implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceRegion) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "regionID":
				m.RegionID = vals[0]
			case "localName":
				m.LocalName = vals[0]
			}
		}
	}
	return nil
}

// ListCloudResourceRegionRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceRegionRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			}
		}
	}
	return nil
}

// ListCloudResourceRegionResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceRegionResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ListCloudResourceVPC implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceVPC) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "status":
				m.Status = vals[0]
			case "regionID":
				m.RegionID = vals[0]
			case "regionName":
				m.RegionName = vals[0]
			case "vpcID":
				m.VpcID = vals[0]
			case "vpcName":
				m.VpcName = vals[0]
			case "cidrBlock":
				m.CidrBlock = vals[0]
			case "vswNum":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.VswNum = val
			}
		}
	}
	return nil
}

// ListCloudResourceVPCData implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceVPCData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// ListCloudResourceVPCRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceVPCRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "cluster":
				m.Cluster = vals[0]
			}
		}
	}
	return nil
}

// ListCloudResourceVPCResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceVPCResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ListCloudResourceVSW implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceVSW) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vswName":
				m.VswName = vals[0]
			case "vSwitchID":
				m.VSwitchID = vals[0]
			case "cidrBlock":
				m.CidrBlock = vals[0]
			case "vpcID":
				m.VpcID = vals[0]
			case "status":
				m.Status = vals[0]
			case "region":
				m.Region = vals[0]
			case "zoneID":
				m.ZoneID = vals[0]
			case "zoneName":
				m.ZoneName = vals[0]
			}
		}
	}
	return nil
}

// ListCloudResourceVSWData implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceVSWData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// ListCloudResourceVSWRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceVSWRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			case "cluster":
				m.Cluster = vals[0]
			case "innerIpAddress":
				m.InnerIpAddress = vals[0]
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			}
		}
	}
	return nil
}

// ListCloudResourceVSWResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceVSWResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ListCloudResourceZone implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceZone) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "zoneID":
				m.ZoneID = vals[0]
			case "localName":
				m.LocalName = vals[0]
			}
		}
	}
	return nil
}

// ListCloudResourceZoneRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceZoneRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "vendor":
				m.Vendor = vals[0]
			case "region":
				m.Region = vals[0]
			}
		}
	}
	return nil
}

// ListCloudResourceZoneResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListCloudResourceZoneResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// MonthAddTrend implement urlenc.URLValuesUnmarshaler.
func (m *MonthAddTrend) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "time":
				list := make([]int64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseInt(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.Time = list
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			case "title":
				m.Title = vals[0]
			}
		}
	}
	return nil
}

// MonthAddTrendData_0 implement urlenc.URLValuesUnmarshaler.
func (m *MonthAddTrendData_0) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// MysqlAccountPrivilege implement urlenc.URLValuesUnmarshaler.
func (m *MysqlAccountPrivilege) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "dBName":
				m.DBName = vals[0]
			case "accountPrivilege":
				m.AccountPrivilege = vals[0]
			}
		}
	}
	return nil
}

// MysqlDataBaseInfo implement urlenc.URLValuesUnmarshaler.
func (m *MysqlDataBaseInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "dBName":
				m.DBName = vals[0]
			case "addonID":
				m.AddonID = vals[0]
			case "characterSetName":
				m.CharacterSetName = vals[0]
			case "description":
				m.Description = vals[0]
			case "cloudResourceMysqlAccount":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.CloudResourceMysqlAccount = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.CloudResourceMysqlAccount = val
					} else {
						m.CloudResourceMysqlAccount = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// OfflineEdgeClusterData implement urlenc.URLValuesUnmarshaler.
func (m *OfflineEdgeClusterData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "recordID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RecordID = val
			case "preCheckHint":
				m.PreCheckHint = vals[0]
			}
		}
	}
	return nil
}

// OfflineEdgeClusterRequest implement urlenc.URLValuesUnmarshaler.
func (m *OfflineEdgeClusterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "clusterName":
				m.ClusterName = vals[0]
			case "preCheck":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.PreCheck = val
			case "force":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Force = val
			}
		}
	}
	return nil
}

// OfflineEdgeClusterResponse implement urlenc.URLValuesUnmarshaler.
func (m *OfflineEdgeClusterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// OnsTopic implement urlenc.URLValuesUnmarshaler.
func (m *OnsTopic) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "topicName":
				m.TopicName = vals[0]
			case "messageType":
				m.MessageType = vals[0]
			case "relation":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Relation = val
			case "relationName":
				m.RelationName = vals[0]
			case "remark":
				m.Remark = vals[0]
			case "createTime":
				m.CreateTime = vals[0]
			}
		}
	}
	return nil
}

// OpsAddonStatusData implement urlenc.URLValuesUnmarshaler.
func (m *OpsAddonStatusData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "status":
				m.Status = vals[0]
			}
		}
	}
	return nil
}

// OpsAddonStatusQueryRequest implement urlenc.URLValuesUnmarshaler.
func (m *OpsAddonStatusQueryRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addonName":
				m.AddonName = vals[0]
			case "addonID":
				m.AddonID = vals[0]
			}
		}
	}
	return nil
}

// OpsAddonStatusResponse implement urlenc.URLValuesUnmarshaler.
func (m *OpsAddonStatusResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// OrgClusterInfoBasicData implement urlenc.URLValuesUnmarshaler.
func (m *OrgClusterInfoBasicData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "clusterName":
				m.ClusterName = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "orgName":
				m.OrgName = vals[0]
			case "orgDisplayName":
				m.OrgDisplayName = vals[0]
			case "clusterType":
				m.ClusterType = vals[0]
			case "version":
				m.Version = vals[0]
			case "createTime":
				m.CreateTime = vals[0]
			case "isCentralCluster":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsCentralCluster = val
			}
		}
	}
	return nil
}

// OrgClusterInfoData implement urlenc.URLValuesUnmarshaler.
func (m *OrgClusterInfoData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// OrgClusterInfoRequest implement urlenc.URLValuesUnmarshaler.
func (m *OrgClusterInfoRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "orgName":
				m.OrgName = vals[0]
			case "clusterType":
				m.ClusterType = vals[0]
			}
		}
	}
	return nil
}

// OrgClusterInfoResponse implement urlenc.URLValuesUnmarshaler.
func (m *OrgClusterInfoResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// OrgRunningTasks implement urlenc.URLValuesUnmarshaler.
func (m *OrgRunningTasks) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "applicationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationID = val
			case "pipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineID = val
			case "taskID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TaskID = val
			case "queueTimeSec":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.QueueTimeSec = val
			case "costTimeSec":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CostTimeSec = val
			case "projectName":
				m.ProjectName = vals[0]
			case "applicationName":
				m.ApplicationName = vals[0]
			case "taskName":
				m.TaskName = vals[0]
			case "status":
				m.Status = vals[0]
			case "env":
				m.Env = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "taskType":
				m.TaskType = vals[0]
			case "userID":
				m.UserID = vals[0]
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "runtimeID":
				m.RuntimeID = vals[0]
			case "releaseID":
				m.ReleaseID = vals[0]
			}
		}
	}
	return nil
}

// OrgRunningTasksData implement urlenc.URLValuesUnmarshaler.
func (m *OrgRunningTasksData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// OrgRunningTasksListRequest implement urlenc.URLValuesUnmarshaler.
func (m *OrgRunningTasksListRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cluster":
				m.Cluster = vals[0]
			case "projectName":
				m.ProjectName = vals[0]
			case "appName":
				m.AppName = vals[0]
			case "pipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineID = val
			case "status":
				m.Status = vals[0]
			case "userID":
				m.UserID = vals[0]
			case "env":
				m.Env = vals[0]
			case "type":
				m.Type = vals[0]
			case "startTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.StartTime = val
			case "endTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.EndTime = val
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			}
		}
	}
	return nil
}

// OrgRunningTasksListResponse implement urlenc.URLValuesUnmarshaler.
func (m *OrgRunningTasksListResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// OssBucketInfo implement urlenc.URLValuesUnmarshaler.
func (m *OssBucketInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addonID":
				m.AddonID = vals[0]
			case "name":
				m.Name = vals[0]
			case "acl":
				m.Acl = vals[0]
			}
		}
	}
	return nil
}

// PrivateSlbInfo implement urlenc.URLValuesUnmarshaler.
func (m *PrivateSlbInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "name":
				m.Name = vals[0]
			case "port":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Port = val
			}
		}
	}
	return nil
}

// RmNodesData implement urlenc.URLValuesUnmarshaler.
func (m *RmNodesData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "recordID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RecordID = val
			}
		}
	}
	return nil
}

// RmNodesRequest implement urlenc.URLValuesUnmarshaler.
func (m *RmNodesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "clusterName":
				m.ClusterName = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "hosts":
				m.Hosts = vals
			case "password":
				m.Password = vals[0]
			case "force":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Force = val
			}
		}
	}
	return nil
}

// RmNodesResponse implement urlenc.URLValuesUnmarshaler.
func (m *RmNodesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// UpdateLabelsData implement urlenc.URLValuesUnmarshaler.
func (m *UpdateLabelsData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "recordID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RecordID = val
			}
		}
	}
	return nil
}

// UpdateLabelsRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpdateLabelsRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "clusterName":
				m.ClusterName = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "hosts":
				m.Hosts = vals
			case "labels":
				m.Labels = vals
			}
		}
	}
	return nil
}

// UpdateLabelsResponse implement urlenc.URLValuesUnmarshaler.
func (m *UpdateLabelsResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// UpgradeClusterInfo implement urlenc.URLValuesUnmarshaler.
func (m *UpgradeClusterInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "clusterName":
				m.ClusterName = vals[0]
			case "clusterType":
				m.ClusterType = vals[0]
			case "version":
				m.Version = vals[0]
			case "isCentralCluster":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsCentralCluster = val
			}
		}
	}
	return nil
}

// UpgradeEdgeClusterData implement urlenc.URLValuesUnmarshaler.
func (m *UpgradeEdgeClusterData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "recordID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RecordID = val
			case "status":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Status = val
			case "precheckHint":
				m.PrecheckHint = vals[0]
			}
		}
	}
	return nil
}

// UpgradeEdgeClusterRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpgradeEdgeClusterRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "clusterName":
				m.ClusterName = vals[0]
			case "preCheck":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.PreCheck = val
			}
		}
	}
	return nil
}

// UpgradeEdgeClusterResponse implement urlenc.URLValuesUnmarshaler.
func (m *UpgradeEdgeClusterResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}
