// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: cmp.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// CmpClient is the client API for Cmp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmpClient interface {
	CMP_ADDON_CONFIG(ctx context.Context, in *AddonConfigRequest, opts ...grpc.CallOption) (*AddonConfigResponse, error)
	CMP_ADDON_CONFIG_UPDATE(ctx context.Context, in *AddonConfigUpdateRequest, opts ...grpc.CallOption) (*AddonConfigUpdateResponse, error)
	CMP_ADDON_SCALE(ctx context.Context, in *AddonScaleRequest, opts ...grpc.CallOption) (*AddonScaleResponse, error)
	CMP_ADDON_STATUS(ctx context.Context, in *OpsAddonStatusQueryRequest, opts ...grpc.CallOption) (*OpsAddonStatusResponse, error)
	CMP_ALERT_CONDITIONS(ctx context.Context, in *CMP_ALERT_CONDITIONS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_ALERT_CONDITIONS_VALUE(ctx context.Context, in *CMP_ALERT_CONDITIONS_VALUE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_CLOUD_CLUSTERS(ctx context.Context, in *CloudClusterRequest, opts ...grpc.CallOption) (*CloudClusterResponse, error)
	CMP_CLOUD_NODES(ctx context.Context, in *CloudNodesRequest, opts ...grpc.CallOption) (*CloudNodesResponse, error)
	CMP_CLOUD_RESOURCE(ctx context.Context, in *CMP_CLOUD_RESOURCE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_CLOUD_RESOURCE_ACCOUNT_CREATE(ctx context.Context, in *CreateCloudAccountRequest, opts ...grpc.CallOption) (*CreateCloudAccountResponse, error)
	CMP_CLOUD_RESOURCE_ACCOUNT_DELETE(ctx context.Context, in *DeleteCloudAccountRequest, opts ...grpc.CallOption) (*DeleteCloudAccountResponse, error)
	CMP_CLOUD_RESOURCE_ACCOUNT_LIST(ctx context.Context, in *CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request, opts ...grpc.CallOption) (*ListCloudAccountResponse, error)
	CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW(ctx context.Context, in *AutoRenewCloudResourceEcsRequest, opts ...grpc.CallOption) (*HandleCloudResourceECSResponse, error)
	CMP_CLOUD_RESOURCE_ECS_LIST(ctx context.Context, in *ListCloudResourceECSRequest, opts ...grpc.CallOption) (*ListCloudResourceECSResponse, error)
	CMP_CLOUD_RESOURCE_ECS_RESTART(ctx context.Context, in *HandleCloudResourceEcsRequest, opts ...grpc.CallOption) (*HandleCloudResourceECSResponse, error)
	CMP_CLOUD_RESOURCE_ECS_START(ctx context.Context, in *HandleCloudResourceEcsRequest, opts ...grpc.CallOption) (*HandleCloudResourceECSResponse, error)
	CMP_CLOUD_RESOURCE_ECS_STOP(ctx context.Context, in *HandleCloudResourceEcsRequest, opts ...grpc.CallOption) (*HandleCloudResourceECSResponse, error)
	CMP_CLOUD_RESOURCE_ECS_TREND(ctx context.Context, in *CMP_CLOUD_RESOURCE_ECS_TREND_Request, opts ...grpc.CallOption) (*GetCloudResourceECSTrendResponse, error)
	CMP_CLOUD_RESOURCE_GATEWAY_LIST(ctx context.Context, in *ListCloudResourceGatewayRequest, opts ...grpc.CallOption) (*ListCloudResourceGatewayResponse, error)
	CMP_CLOUD_RESOURCE_LIST(ctx context.Context, in *CMP_CLOUD_RESOURCE_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE(ctx context.Context, in *CreateCloudResourceMysqlAccountRequest, opts ...grpc.CallOption) (*CreateCloudResourceMysqlAccountResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO(ctx context.Context, in *CloudResourceMysqlListAccountRequest, opts ...grpc.CallOption) (*CloudResourceMysqlListAccountResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET(ctx context.Context, in *CreateCloudResourceMysqlAccountRequest, opts ...grpc.CallOption) (*CreateCloudResourceMysqlAccountResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT(ctx context.Context, in *GrantMysqlAccountPrivilegeRequest, opts ...grpc.CallOption) (*GrantMysqlAccountPrivilegeResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_CREATE(ctx context.Context, in *CreateCloudResourceMysqlRequest, opts ...grpc.CallOption) (*CreateCloudResourceMysqlResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO(ctx context.Context, in *CloudResourceMysqlDBRequest, opts ...grpc.CallOption) (*CloudResourceMysqlDBResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE(ctx context.Context, in *CreateCloudResourceMysqlDBRequest, opts ...grpc.CallOption) (*CreateCloudResourceMysqlDBResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE(ctx context.Context, in *DeleteCloudResourceMysqlDBRequest, opts ...grpc.CallOption) (*CloudAddonResourceDeleteRespnse, error)
	CMP_CLOUD_RESOURCE_MYSQL_DELETE(ctx context.Context, in *DeleteCloudResourceMysqlRequest, opts ...grpc.CallOption) (*CloudAddonResourceDeleteRespnse, error)
	CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO(ctx context.Context, in *CloudResourceMysqlDetailInfoRequest, opts ...grpc.CallOption) (*CloudResourceMysqlDetailInfoResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_LIST(ctx context.Context, in *ListCloudResourceMysqlRequest, opts ...grpc.CallOption) (*ListCloudResourceMysqlResponse, error)
	CMP_CLOUD_RESOURCE_ONS_CREATE(ctx context.Context, in *CreateCloudResourceOnsRequest, opts ...grpc.CallOption) (*CreateCloudResourceOnsResponse, error)
	CMP_CLOUD_RESOURCE_ONS_DELETE(ctx context.Context, in *DeleteCloudResourceOnsRequest, opts ...grpc.CallOption) (*CloudAddonResourceDeleteRespnse, error)
	CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO(ctx context.Context, in *CloudResourceOnsDetailInfoRequest, opts ...grpc.CallOption) (*CloudResourceOnsDetailInfoResponse, error)
	CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE(ctx context.Context, in *CreateCloudResourceOnsGroupRequest, opts ...grpc.CallOption) (*CreateCloudResourceOnsGroupResponse, error)
	CMP_CLOUD_RESOURCE_ONS_GROUP_INFO(ctx context.Context, in *CloudResourceOnsGroupInfoRequest, opts ...grpc.CallOption) (*CloudResourceOnsGroupInfoResponse, error)
	CMP_CLOUD_RESOURCE_ONS_LIST(ctx context.Context, in *ListCloudResourceOnsRequest, opts ...grpc.CallOption) (*ListCloudResourceOnsResponse, error)
	CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE(ctx context.Context, in *CreateCloudResourceOnsTopicRequest, opts ...grpc.CallOption) (*CreateCloudResourceOnsTopicResponse, error)
	CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE(ctx context.Context, in *DeleteCloudResourceOnsRequest, opts ...grpc.CallOption) (*CloudAddonResourceDeleteRespnse, error)
	CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO(ctx context.Context, in *CloudResourceOnsTopicInfoRequest, opts ...grpc.CallOption) (*CloudResourceOnsTopicInfoResponse, error)
	CMP_CLOUD_RESOURCE_OSS_CREATE(ctx context.Context, in *CreateCloudResourceOssRequest, opts ...grpc.CallOption) (*CreateCloudResourceOssResponse, error)
	CMP_CLOUD_RESOURCE_OSS_DELETE(ctx context.Context, in *DeleteCloudResourceOssRequest, opts ...grpc.CallOption) (*CloudAddonResourceDeleteRespnse, error)
	CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO(ctx context.Context, in *CloudResourceOssDetailInfoRequest, opts ...grpc.CallOption) (*CloudResourceOssDetailInfoResponse, error)
	CMP_CLOUD_RESOURCE_OSS_LIST(ctx context.Context, in *ListCloudResourceOssRequest, opts ...grpc.CallOption) (*ListCloudResourceOssResponse, error)
	CMP_CLOUD_RESOURCE_OVERVIEW(ctx context.Context, in *CloudResourceOverviewRequest, opts ...grpc.CallOption) (*CloudResourceOverviewResponse, error)
	CMP_CLOUD_RESOURCE_REDIS_CREATE(ctx context.Context, in *CreateCloudResourceRedisRequest, opts ...grpc.CallOption) (*CreateCloudResourceRedisResponse, error)
	CMP_CLOUD_RESOURCE_REDIS_DELETE(ctx context.Context, in *DeleteCloudResourceRedisRequest, opts ...grpc.CallOption) (*CloudAddonResourceDeleteRespnse, error)
	CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO(ctx context.Context, in *CloudResourceRedisDetailInfoRequest, opts ...grpc.CallOption) (*CloudResourceRedisDetailInfoResponse, error)
	CMP_CLOUD_RESOURCE_REGION_LIST(ctx context.Context, in *ListCloudResourceRegionRequest, opts ...grpc.CallOption) (*ListCloudResourceRegionResponse, error)
	CMP_CLOUD_RESOURCE_Redis_LIST(ctx context.Context, in *ListCloudResourceRedisRequest, opts ...grpc.CallOption) (*ListCloudResourceRedisResponse, error)
	CMP_CLOUD_RESOURCE_SET_TAG(ctx context.Context, in *CloudResourceSetTagRequest, opts ...grpc.CallOption) (*CloudResourceSetTagResponse, error)
	CMP_CLOUD_RESOURCE_VPC_CREATE(ctx context.Context, in *CreateCloudResourceVPCRequest, opts ...grpc.CallOption) (*CreateCloudResourceVPCResponse, error)
	CMP_CLOUD_RESOURCE_VPC_LIST(ctx context.Context, in *ListCloudResourceVPCRequest, opts ...grpc.CallOption) (*ListCloudResourceVPCResponse, error)
	CMP_CLOUD_RESOURCE_VSW_CREATE(ctx context.Context, in *CreateCloudResourceVSWRequest, opts ...grpc.CallOption) (*CreateCloudResourceVSWResponse, error)
	CMP_CLOUD_RESOURCE_VSW_LIST(ctx context.Context, in *ListCloudResourceVSWRequest, opts ...grpc.CallOption) (*ListCloudResourceVSWResponse, error)
	CMP_CLOUD_RESOURCE_ZONE_LIST(ctx context.Context, in *ListCloudResourceZoneRequest, opts ...grpc.CallOption) (*ListCloudResourceZoneResponse, error)
	CMP_CLUSTER_BATCH_UPGRADE(ctx context.Context, in *BatchUpgradeEdgeClusterRequest, opts ...grpc.CallOption) (*BatchUpgradeEdgeClusterResponse, error)
	CMP_CLUSTER_IMPORT(ctx context.Context, in *CMP_CLUSTER_IMPORT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_CLUSTER_INFO(ctx context.Context, in *CMP_CLUSTER_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_CLUSTER_INIT_COMMAND(ctx context.Context, in *CMP_CLUSTER_INIT_COMMAND_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_CLUSTER_INIT_RETRY(ctx context.Context, in *CMP_CLUSTER_INIT_RETRY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_CLUSTER_OFFLINE(ctx context.Context, in *OfflineEdgeClusterRequest, opts ...grpc.CallOption) (*OfflineEdgeClusterResponse, error)
	CMP_CLUSTER_PREVIEW(ctx context.Context, in *CMP_CLUSTER_PREVIEW_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_CLUSTER_UPDATE(ctx context.Context, in *ClusterUpdateRequest, opts ...grpc.CallOption) (*ClusterUpdateResponse, error)
	CMP_CLUSTER_UPGRADE(ctx context.Context, in *UpgradeEdgeClusterRequest, opts ...grpc.CallOption) (*UpgradeEdgeClusterResponse, error)
	CMP_CREDENTIAL_ACCESSKEY_CREATE(ctx context.Context, in *CMP_CREDENTIAL_ACCESSKEY_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_CREDENTIAL_ACCESSKEY_GET(ctx context.Context, in *CMP_CREDENTIAL_ACCESSKEY_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_CREDENTIAL_ACCESSKEY_RESET(ctx context.Context, in *CMP_CREDENTIAL_ACCESSKEY_RESET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_EDGE_HOST_OFFLINE(ctx context.Context, in *EdgeHostOffline, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_K8S_CLUSTERS(ctx context.Context, in *CMP_K8S_CLUSTERS_Request, opts ...grpc.CallOption) (*K8SClusters, error)
	CMP_NODES(ctx context.Context, in *AddNodesRequest, opts ...grpc.CallOption) (*AddNodesResponse, error)
	CMP_NODES_REMOVE(ctx context.Context, in *RmNodesRequest, opts ...grpc.CallOption) (*RmNodesResponse, error)
	CMP_NODE_LABELS_LIST(ctx context.Context, in *CMP_NODE_LABELS_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_NODE_LABELS_UPDATE(ctx context.Context, in *UpdateLabelsRequest, opts ...grpc.CallOption) (*UpdateLabelsResponse, error)
	CMP_NODE_LOGS(ctx context.Context, in *CMP_NODE_LOGS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_ORG_CLUSTER_INFO(ctx context.Context, in *OrgClusterInfoRequest, opts ...grpc.CallOption) (*OrgClusterInfoResponse, error)
	CMP_RECORDS(ctx context.Context, in *CMP_RECORDS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_RECORDTYPES(ctx context.Context, in *CMP_RECORDTYPES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_RESOURCE_OVERVIEW_CLASS(ctx context.Context, in *CMP_RESOURCE_OVERVIEW_CLASS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_RESOURCE_OVERVIEW_CLUSTER_TREND(ctx context.Context, in *CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_RESOURCE_OVERVIEW_GAUGE(ctx context.Context, in *CMP_RESOURCE_OVERVIEW_GAUGE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_RESOURCE_OVERVIEW_PROJECT_TREND(ctx context.Context, in *CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_RESOURCE_OVERVIEW_REPORT(ctx context.Context, in *CMP_RESOURCE_OVERVIEW_REPORT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_RUNNING_TASKS_LIST(ctx context.Context, in *OrgRunningTasksListRequest, opts ...grpc.CallOption) (*OrgRunningTasksListResponse, error)
	CMP_STEVE_CREATE(ctx context.Context, in *CMP_STEVE_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_STEVE_DELETE(ctx context.Context, in *CMP_STEVE_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_STEVE_GET(ctx context.Context, in *CMP_STEVE_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_STEVE_PATCH(ctx context.Context, in *CMP_STEVE_PATCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_STEVE_UPDATE(ctx context.Context, in *CMP_STEVE_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMP_STEVE_WS(ctx context.Context, in *CMP_STEVE_WS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cmpClient struct {
	cc grpc1.ClientConnInterface
}

func NewCmpClient(cc grpc1.ClientConnInterface) CmpClient {
	return &cmpClient{cc}
}

func (c *cmpClient) CMP_ADDON_CONFIG(ctx context.Context, in *AddonConfigRequest, opts ...grpc.CallOption) (*AddonConfigResponse, error) {
	out := new(AddonConfigResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_ADDON_CONFIG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_ADDON_CONFIG_UPDATE(ctx context.Context, in *AddonConfigUpdateRequest, opts ...grpc.CallOption) (*AddonConfigUpdateResponse, error) {
	out := new(AddonConfigUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_ADDON_CONFIG_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_ADDON_SCALE(ctx context.Context, in *AddonScaleRequest, opts ...grpc.CallOption) (*AddonScaleResponse, error) {
	out := new(AddonScaleResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_ADDON_SCALE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_ADDON_STATUS(ctx context.Context, in *OpsAddonStatusQueryRequest, opts ...grpc.CallOption) (*OpsAddonStatusResponse, error) {
	out := new(OpsAddonStatusResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_ADDON_STATUS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_ALERT_CONDITIONS(ctx context.Context, in *CMP_ALERT_CONDITIONS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_ALERT_CONDITIONS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_ALERT_CONDITIONS_VALUE(ctx context.Context, in *CMP_ALERT_CONDITIONS_VALUE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_ALERT_CONDITIONS_VALUE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_CLUSTERS(ctx context.Context, in *CloudClusterRequest, opts ...grpc.CallOption) (*CloudClusterResponse, error) {
	out := new(CloudClusterResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_CLUSTERS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_NODES(ctx context.Context, in *CloudNodesRequest, opts ...grpc.CallOption) (*CloudNodesResponse, error) {
	out := new(CloudNodesResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_NODES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE(ctx context.Context, in *CMP_CLOUD_RESOURCE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ACCOUNT_CREATE(ctx context.Context, in *CreateCloudAccountRequest, opts ...grpc.CallOption) (*CreateCloudAccountResponse, error) {
	out := new(CreateCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ACCOUNT_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ACCOUNT_DELETE(ctx context.Context, in *DeleteCloudAccountRequest, opts ...grpc.CallOption) (*DeleteCloudAccountResponse, error) {
	out := new(DeleteCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ACCOUNT_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ACCOUNT_LIST(ctx context.Context, in *CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request, opts ...grpc.CallOption) (*ListCloudAccountResponse, error) {
	out := new(ListCloudAccountResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ACCOUNT_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW(ctx context.Context, in *AutoRenewCloudResourceEcsRequest, opts ...grpc.CallOption) (*HandleCloudResourceECSResponse, error) {
	out := new(HandleCloudResourceECSResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ECS_LIST(ctx context.Context, in *ListCloudResourceECSRequest, opts ...grpc.CallOption) (*ListCloudResourceECSResponse, error) {
	out := new(ListCloudResourceECSResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ECS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ECS_RESTART(ctx context.Context, in *HandleCloudResourceEcsRequest, opts ...grpc.CallOption) (*HandleCloudResourceECSResponse, error) {
	out := new(HandleCloudResourceECSResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ECS_RESTART", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ECS_START(ctx context.Context, in *HandleCloudResourceEcsRequest, opts ...grpc.CallOption) (*HandleCloudResourceECSResponse, error) {
	out := new(HandleCloudResourceECSResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ECS_START", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ECS_STOP(ctx context.Context, in *HandleCloudResourceEcsRequest, opts ...grpc.CallOption) (*HandleCloudResourceECSResponse, error) {
	out := new(HandleCloudResourceECSResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ECS_STOP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ECS_TREND(ctx context.Context, in *CMP_CLOUD_RESOURCE_ECS_TREND_Request, opts ...grpc.CallOption) (*GetCloudResourceECSTrendResponse, error) {
	out := new(GetCloudResourceECSTrendResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ECS_TREND", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_GATEWAY_LIST(ctx context.Context, in *ListCloudResourceGatewayRequest, opts ...grpc.CallOption) (*ListCloudResourceGatewayResponse, error) {
	out := new(ListCloudResourceGatewayResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_GATEWAY_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_LIST(ctx context.Context, in *CMP_CLOUD_RESOURCE_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE(ctx context.Context, in *CreateCloudResourceMysqlAccountRequest, opts ...grpc.CallOption) (*CreateCloudResourceMysqlAccountResponse, error) {
	out := new(CreateCloudResourceMysqlAccountResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO(ctx context.Context, in *CloudResourceMysqlListAccountRequest, opts ...grpc.CallOption) (*CloudResourceMysqlListAccountResponse, error) {
	out := new(CloudResourceMysqlListAccountResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET(ctx context.Context, in *CreateCloudResourceMysqlAccountRequest, opts ...grpc.CallOption) (*CreateCloudResourceMysqlAccountResponse, error) {
	out := new(CreateCloudResourceMysqlAccountResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT(ctx context.Context, in *GrantMysqlAccountPrivilegeRequest, opts ...grpc.CallOption) (*GrantMysqlAccountPrivilegeResponse, error) {
	out := new(GrantMysqlAccountPrivilegeResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_MYSQL_CREATE(ctx context.Context, in *CreateCloudResourceMysqlRequest, opts ...grpc.CallOption) (*CreateCloudResourceMysqlResponse, error) {
	out := new(CreateCloudResourceMysqlResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO(ctx context.Context, in *CloudResourceMysqlDBRequest, opts ...grpc.CallOption) (*CloudResourceMysqlDBResponse, error) {
	out := new(CloudResourceMysqlDBResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE(ctx context.Context, in *CreateCloudResourceMysqlDBRequest, opts ...grpc.CallOption) (*CreateCloudResourceMysqlDBResponse, error) {
	out := new(CreateCloudResourceMysqlDBResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE(ctx context.Context, in *DeleteCloudResourceMysqlDBRequest, opts ...grpc.CallOption) (*CloudAddonResourceDeleteRespnse, error) {
	out := new(CloudAddonResourceDeleteRespnse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_MYSQL_DELETE(ctx context.Context, in *DeleteCloudResourceMysqlRequest, opts ...grpc.CallOption) (*CloudAddonResourceDeleteRespnse, error) {
	out := new(CloudAddonResourceDeleteRespnse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO(ctx context.Context, in *CloudResourceMysqlDetailInfoRequest, opts ...grpc.CallOption) (*CloudResourceMysqlDetailInfoResponse, error) {
	out := new(CloudResourceMysqlDetailInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_MYSQL_LIST(ctx context.Context, in *ListCloudResourceMysqlRequest, opts ...grpc.CallOption) (*ListCloudResourceMysqlResponse, error) {
	out := new(ListCloudResourceMysqlResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ONS_CREATE(ctx context.Context, in *CreateCloudResourceOnsRequest, opts ...grpc.CallOption) (*CreateCloudResourceOnsResponse, error) {
	out := new(CreateCloudResourceOnsResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ONS_DELETE(ctx context.Context, in *DeleteCloudResourceOnsRequest, opts ...grpc.CallOption) (*CloudAddonResourceDeleteRespnse, error) {
	out := new(CloudAddonResourceDeleteRespnse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO(ctx context.Context, in *CloudResourceOnsDetailInfoRequest, opts ...grpc.CallOption) (*CloudResourceOnsDetailInfoResponse, error) {
	out := new(CloudResourceOnsDetailInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE(ctx context.Context, in *CreateCloudResourceOnsGroupRequest, opts ...grpc.CallOption) (*CreateCloudResourceOnsGroupResponse, error) {
	out := new(CreateCloudResourceOnsGroupResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ONS_GROUP_INFO(ctx context.Context, in *CloudResourceOnsGroupInfoRequest, opts ...grpc.CallOption) (*CloudResourceOnsGroupInfoResponse, error) {
	out := new(CloudResourceOnsGroupInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_GROUP_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ONS_LIST(ctx context.Context, in *ListCloudResourceOnsRequest, opts ...grpc.CallOption) (*ListCloudResourceOnsResponse, error) {
	out := new(ListCloudResourceOnsResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE(ctx context.Context, in *CreateCloudResourceOnsTopicRequest, opts ...grpc.CallOption) (*CreateCloudResourceOnsTopicResponse, error) {
	out := new(CreateCloudResourceOnsTopicResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE(ctx context.Context, in *DeleteCloudResourceOnsRequest, opts ...grpc.CallOption) (*CloudAddonResourceDeleteRespnse, error) {
	out := new(CloudAddonResourceDeleteRespnse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO(ctx context.Context, in *CloudResourceOnsTopicInfoRequest, opts ...grpc.CallOption) (*CloudResourceOnsTopicInfoResponse, error) {
	out := new(CloudResourceOnsTopicInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_OSS_CREATE(ctx context.Context, in *CreateCloudResourceOssRequest, opts ...grpc.CallOption) (*CreateCloudResourceOssResponse, error) {
	out := new(CreateCloudResourceOssResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_OSS_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_OSS_DELETE(ctx context.Context, in *DeleteCloudResourceOssRequest, opts ...grpc.CallOption) (*CloudAddonResourceDeleteRespnse, error) {
	out := new(CloudAddonResourceDeleteRespnse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_OSS_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO(ctx context.Context, in *CloudResourceOssDetailInfoRequest, opts ...grpc.CallOption) (*CloudResourceOssDetailInfoResponse, error) {
	out := new(CloudResourceOssDetailInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_OSS_LIST(ctx context.Context, in *ListCloudResourceOssRequest, opts ...grpc.CallOption) (*ListCloudResourceOssResponse, error) {
	out := new(ListCloudResourceOssResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_OSS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_OVERVIEW(ctx context.Context, in *CloudResourceOverviewRequest, opts ...grpc.CallOption) (*CloudResourceOverviewResponse, error) {
	out := new(CloudResourceOverviewResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_OVERVIEW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_REDIS_CREATE(ctx context.Context, in *CreateCloudResourceRedisRequest, opts ...grpc.CallOption) (*CreateCloudResourceRedisResponse, error) {
	out := new(CreateCloudResourceRedisResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_REDIS_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_REDIS_DELETE(ctx context.Context, in *DeleteCloudResourceRedisRequest, opts ...grpc.CallOption) (*CloudAddonResourceDeleteRespnse, error) {
	out := new(CloudAddonResourceDeleteRespnse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_REDIS_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO(ctx context.Context, in *CloudResourceRedisDetailInfoRequest, opts ...grpc.CallOption) (*CloudResourceRedisDetailInfoResponse, error) {
	out := new(CloudResourceRedisDetailInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_REGION_LIST(ctx context.Context, in *ListCloudResourceRegionRequest, opts ...grpc.CallOption) (*ListCloudResourceRegionResponse, error) {
	out := new(ListCloudResourceRegionResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_REGION_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_Redis_LIST(ctx context.Context, in *ListCloudResourceRedisRequest, opts ...grpc.CallOption) (*ListCloudResourceRedisResponse, error) {
	out := new(ListCloudResourceRedisResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_Redis_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_SET_TAG(ctx context.Context, in *CloudResourceSetTagRequest, opts ...grpc.CallOption) (*CloudResourceSetTagResponse, error) {
	out := new(CloudResourceSetTagResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_SET_TAG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_VPC_CREATE(ctx context.Context, in *CreateCloudResourceVPCRequest, opts ...grpc.CallOption) (*CreateCloudResourceVPCResponse, error) {
	out := new(CreateCloudResourceVPCResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_VPC_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_VPC_LIST(ctx context.Context, in *ListCloudResourceVPCRequest, opts ...grpc.CallOption) (*ListCloudResourceVPCResponse, error) {
	out := new(ListCloudResourceVPCResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_VPC_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_VSW_CREATE(ctx context.Context, in *CreateCloudResourceVSWRequest, opts ...grpc.CallOption) (*CreateCloudResourceVSWResponse, error) {
	out := new(CreateCloudResourceVSWResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_VSW_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_VSW_LIST(ctx context.Context, in *ListCloudResourceVSWRequest, opts ...grpc.CallOption) (*ListCloudResourceVSWResponse, error) {
	out := new(ListCloudResourceVSWResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_VSW_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLOUD_RESOURCE_ZONE_LIST(ctx context.Context, in *ListCloudResourceZoneRequest, opts ...grpc.CallOption) (*ListCloudResourceZoneResponse, error) {
	out := new(ListCloudResourceZoneResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ZONE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLUSTER_BATCH_UPGRADE(ctx context.Context, in *BatchUpgradeEdgeClusterRequest, opts ...grpc.CallOption) (*BatchUpgradeEdgeClusterResponse, error) {
	out := new(BatchUpgradeEdgeClusterResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_BATCH_UPGRADE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLUSTER_IMPORT(ctx context.Context, in *CMP_CLUSTER_IMPORT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_IMPORT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLUSTER_INFO(ctx context.Context, in *CMP_CLUSTER_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLUSTER_INIT_COMMAND(ctx context.Context, in *CMP_CLUSTER_INIT_COMMAND_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_INIT_COMMAND", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLUSTER_INIT_RETRY(ctx context.Context, in *CMP_CLUSTER_INIT_RETRY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_INIT_RETRY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLUSTER_OFFLINE(ctx context.Context, in *OfflineEdgeClusterRequest, opts ...grpc.CallOption) (*OfflineEdgeClusterResponse, error) {
	out := new(OfflineEdgeClusterResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_OFFLINE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLUSTER_PREVIEW(ctx context.Context, in *CMP_CLUSTER_PREVIEW_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_PREVIEW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLUSTER_UPDATE(ctx context.Context, in *ClusterUpdateRequest, opts ...grpc.CallOption) (*ClusterUpdateResponse, error) {
	out := new(ClusterUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CLUSTER_UPGRADE(ctx context.Context, in *UpgradeEdgeClusterRequest, opts ...grpc.CallOption) (*UpgradeEdgeClusterResponse, error) {
	out := new(UpgradeEdgeClusterResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_UPGRADE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CREDENTIAL_ACCESSKEY_CREATE(ctx context.Context, in *CMP_CREDENTIAL_ACCESSKEY_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CREDENTIAL_ACCESSKEY_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CREDENTIAL_ACCESSKEY_GET(ctx context.Context, in *CMP_CREDENTIAL_ACCESSKEY_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CREDENTIAL_ACCESSKEY_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_CREDENTIAL_ACCESSKEY_RESET(ctx context.Context, in *CMP_CREDENTIAL_ACCESSKEY_RESET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_CREDENTIAL_ACCESSKEY_RESET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_EDGE_HOST_OFFLINE(ctx context.Context, in *EdgeHostOffline, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_EDGE_HOST_OFFLINE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_K8S_CLUSTERS(ctx context.Context, in *CMP_K8S_CLUSTERS_Request, opts ...grpc.CallOption) (*K8SClusters, error) {
	out := new(K8SClusters)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_K8S_CLUSTERS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_NODES(ctx context.Context, in *AddNodesRequest, opts ...grpc.CallOption) (*AddNodesResponse, error) {
	out := new(AddNodesResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_NODES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_NODES_REMOVE(ctx context.Context, in *RmNodesRequest, opts ...grpc.CallOption) (*RmNodesResponse, error) {
	out := new(RmNodesResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_NODES_REMOVE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_NODE_LABELS_LIST(ctx context.Context, in *CMP_NODE_LABELS_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_NODE_LABELS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_NODE_LABELS_UPDATE(ctx context.Context, in *UpdateLabelsRequest, opts ...grpc.CallOption) (*UpdateLabelsResponse, error) {
	out := new(UpdateLabelsResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_NODE_LABELS_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_NODE_LOGS(ctx context.Context, in *CMP_NODE_LOGS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_NODE_LOGS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_ORG_CLUSTER_INFO(ctx context.Context, in *OrgClusterInfoRequest, opts ...grpc.CallOption) (*OrgClusterInfoResponse, error) {
	out := new(OrgClusterInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_ORG_CLUSTER_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_RECORDS(ctx context.Context, in *CMP_RECORDS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_RECORDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_RECORDTYPES(ctx context.Context, in *CMP_RECORDTYPES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_RECORDTYPES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_RESOURCE_OVERVIEW_CLASS(ctx context.Context, in *CMP_RESOURCE_OVERVIEW_CLASS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_RESOURCE_OVERVIEW_CLASS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_RESOURCE_OVERVIEW_CLUSTER_TREND(ctx context.Context, in *CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_RESOURCE_OVERVIEW_CLUSTER_TREND", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_RESOURCE_OVERVIEW_GAUGE(ctx context.Context, in *CMP_RESOURCE_OVERVIEW_GAUGE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_RESOURCE_OVERVIEW_GAUGE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_RESOURCE_OVERVIEW_PROJECT_TREND(ctx context.Context, in *CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_RESOURCE_OVERVIEW_PROJECT_TREND", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_RESOURCE_OVERVIEW_REPORT(ctx context.Context, in *CMP_RESOURCE_OVERVIEW_REPORT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_RESOURCE_OVERVIEW_REPORT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_RUNNING_TASKS_LIST(ctx context.Context, in *OrgRunningTasksListRequest, opts ...grpc.CallOption) (*OrgRunningTasksListResponse, error) {
	out := new(OrgRunningTasksListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_RUNNING_TASKS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_STEVE_CREATE(ctx context.Context, in *CMP_STEVE_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_STEVE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_STEVE_DELETE(ctx context.Context, in *CMP_STEVE_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_STEVE_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_STEVE_GET(ctx context.Context, in *CMP_STEVE_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_STEVE_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_STEVE_PATCH(ctx context.Context, in *CMP_STEVE_PATCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_STEVE_PATCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_STEVE_UPDATE(ctx context.Context, in *CMP_STEVE_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_STEVE_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmpClient) CMP_STEVE_WS(ctx context.Context, in *CMP_STEVE_WS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.cmp.cmp/CMP_STEVE_WS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmpServer is the server API for Cmp service.
// All implementations should embed UnimplementedCmpServer
// for forward compatibility
type CmpServer interface {
	CMP_ADDON_CONFIG(context.Context, *AddonConfigRequest) (*AddonConfigResponse, error)
	CMP_ADDON_CONFIG_UPDATE(context.Context, *AddonConfigUpdateRequest) (*AddonConfigUpdateResponse, error)
	CMP_ADDON_SCALE(context.Context, *AddonScaleRequest) (*AddonScaleResponse, error)
	CMP_ADDON_STATUS(context.Context, *OpsAddonStatusQueryRequest) (*OpsAddonStatusResponse, error)
	CMP_ALERT_CONDITIONS(context.Context, *CMP_ALERT_CONDITIONS_Request) (*emptypb.Empty, error)
	CMP_ALERT_CONDITIONS_VALUE(context.Context, *CMP_ALERT_CONDITIONS_VALUE_Request) (*emptypb.Empty, error)
	CMP_CLOUD_CLUSTERS(context.Context, *CloudClusterRequest) (*CloudClusterResponse, error)
	CMP_CLOUD_NODES(context.Context, *CloudNodesRequest) (*CloudNodesResponse, error)
	CMP_CLOUD_RESOURCE(context.Context, *CMP_CLOUD_RESOURCE_Request) (*emptypb.Empty, error)
	CMP_CLOUD_RESOURCE_ACCOUNT_CREATE(context.Context, *CreateCloudAccountRequest) (*CreateCloudAccountResponse, error)
	CMP_CLOUD_RESOURCE_ACCOUNT_DELETE(context.Context, *DeleteCloudAccountRequest) (*DeleteCloudAccountResponse, error)
	CMP_CLOUD_RESOURCE_ACCOUNT_LIST(context.Context, *CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request) (*ListCloudAccountResponse, error)
	CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW(context.Context, *AutoRenewCloudResourceEcsRequest) (*HandleCloudResourceECSResponse, error)
	CMP_CLOUD_RESOURCE_ECS_LIST(context.Context, *ListCloudResourceECSRequest) (*ListCloudResourceECSResponse, error)
	CMP_CLOUD_RESOURCE_ECS_RESTART(context.Context, *HandleCloudResourceEcsRequest) (*HandleCloudResourceECSResponse, error)
	CMP_CLOUD_RESOURCE_ECS_START(context.Context, *HandleCloudResourceEcsRequest) (*HandleCloudResourceECSResponse, error)
	CMP_CLOUD_RESOURCE_ECS_STOP(context.Context, *HandleCloudResourceEcsRequest) (*HandleCloudResourceECSResponse, error)
	CMP_CLOUD_RESOURCE_ECS_TREND(context.Context, *CMP_CLOUD_RESOURCE_ECS_TREND_Request) (*GetCloudResourceECSTrendResponse, error)
	CMP_CLOUD_RESOURCE_GATEWAY_LIST(context.Context, *ListCloudResourceGatewayRequest) (*ListCloudResourceGatewayResponse, error)
	CMP_CLOUD_RESOURCE_LIST(context.Context, *CMP_CLOUD_RESOURCE_LIST_Request) (*emptypb.Empty, error)
	CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE(context.Context, *CreateCloudResourceMysqlAccountRequest) (*CreateCloudResourceMysqlAccountResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO(context.Context, *CloudResourceMysqlListAccountRequest) (*CloudResourceMysqlListAccountResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET(context.Context, *CreateCloudResourceMysqlAccountRequest) (*CreateCloudResourceMysqlAccountResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT(context.Context, *GrantMysqlAccountPrivilegeRequest) (*GrantMysqlAccountPrivilegeResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_CREATE(context.Context, *CreateCloudResourceMysqlRequest) (*CreateCloudResourceMysqlResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO(context.Context, *CloudResourceMysqlDBRequest) (*CloudResourceMysqlDBResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE(context.Context, *CreateCloudResourceMysqlDBRequest) (*CreateCloudResourceMysqlDBResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE(context.Context, *DeleteCloudResourceMysqlDBRequest) (*CloudAddonResourceDeleteRespnse, error)
	CMP_CLOUD_RESOURCE_MYSQL_DELETE(context.Context, *DeleteCloudResourceMysqlRequest) (*CloudAddonResourceDeleteRespnse, error)
	CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO(context.Context, *CloudResourceMysqlDetailInfoRequest) (*CloudResourceMysqlDetailInfoResponse, error)
	CMP_CLOUD_RESOURCE_MYSQL_LIST(context.Context, *ListCloudResourceMysqlRequest) (*ListCloudResourceMysqlResponse, error)
	CMP_CLOUD_RESOURCE_ONS_CREATE(context.Context, *CreateCloudResourceOnsRequest) (*CreateCloudResourceOnsResponse, error)
	CMP_CLOUD_RESOURCE_ONS_DELETE(context.Context, *DeleteCloudResourceOnsRequest) (*CloudAddonResourceDeleteRespnse, error)
	CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO(context.Context, *CloudResourceOnsDetailInfoRequest) (*CloudResourceOnsDetailInfoResponse, error)
	CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE(context.Context, *CreateCloudResourceOnsGroupRequest) (*CreateCloudResourceOnsGroupResponse, error)
	CMP_CLOUD_RESOURCE_ONS_GROUP_INFO(context.Context, *CloudResourceOnsGroupInfoRequest) (*CloudResourceOnsGroupInfoResponse, error)
	CMP_CLOUD_RESOURCE_ONS_LIST(context.Context, *ListCloudResourceOnsRequest) (*ListCloudResourceOnsResponse, error)
	CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE(context.Context, *CreateCloudResourceOnsTopicRequest) (*CreateCloudResourceOnsTopicResponse, error)
	CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE(context.Context, *DeleteCloudResourceOnsRequest) (*CloudAddonResourceDeleteRespnse, error)
	CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO(context.Context, *CloudResourceOnsTopicInfoRequest) (*CloudResourceOnsTopicInfoResponse, error)
	CMP_CLOUD_RESOURCE_OSS_CREATE(context.Context, *CreateCloudResourceOssRequest) (*CreateCloudResourceOssResponse, error)
	CMP_CLOUD_RESOURCE_OSS_DELETE(context.Context, *DeleteCloudResourceOssRequest) (*CloudAddonResourceDeleteRespnse, error)
	CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO(context.Context, *CloudResourceOssDetailInfoRequest) (*CloudResourceOssDetailInfoResponse, error)
	CMP_CLOUD_RESOURCE_OSS_LIST(context.Context, *ListCloudResourceOssRequest) (*ListCloudResourceOssResponse, error)
	CMP_CLOUD_RESOURCE_OVERVIEW(context.Context, *CloudResourceOverviewRequest) (*CloudResourceOverviewResponse, error)
	CMP_CLOUD_RESOURCE_REDIS_CREATE(context.Context, *CreateCloudResourceRedisRequest) (*CreateCloudResourceRedisResponse, error)
	CMP_CLOUD_RESOURCE_REDIS_DELETE(context.Context, *DeleteCloudResourceRedisRequest) (*CloudAddonResourceDeleteRespnse, error)
	CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO(context.Context, *CloudResourceRedisDetailInfoRequest) (*CloudResourceRedisDetailInfoResponse, error)
	CMP_CLOUD_RESOURCE_REGION_LIST(context.Context, *ListCloudResourceRegionRequest) (*ListCloudResourceRegionResponse, error)
	CMP_CLOUD_RESOURCE_Redis_LIST(context.Context, *ListCloudResourceRedisRequest) (*ListCloudResourceRedisResponse, error)
	CMP_CLOUD_RESOURCE_SET_TAG(context.Context, *CloudResourceSetTagRequest) (*CloudResourceSetTagResponse, error)
	CMP_CLOUD_RESOURCE_VPC_CREATE(context.Context, *CreateCloudResourceVPCRequest) (*CreateCloudResourceVPCResponse, error)
	CMP_CLOUD_RESOURCE_VPC_LIST(context.Context, *ListCloudResourceVPCRequest) (*ListCloudResourceVPCResponse, error)
	CMP_CLOUD_RESOURCE_VSW_CREATE(context.Context, *CreateCloudResourceVSWRequest) (*CreateCloudResourceVSWResponse, error)
	CMP_CLOUD_RESOURCE_VSW_LIST(context.Context, *ListCloudResourceVSWRequest) (*ListCloudResourceVSWResponse, error)
	CMP_CLOUD_RESOURCE_ZONE_LIST(context.Context, *ListCloudResourceZoneRequest) (*ListCloudResourceZoneResponse, error)
	CMP_CLUSTER_BATCH_UPGRADE(context.Context, *BatchUpgradeEdgeClusterRequest) (*BatchUpgradeEdgeClusterResponse, error)
	CMP_CLUSTER_IMPORT(context.Context, *CMP_CLUSTER_IMPORT_Request) (*emptypb.Empty, error)
	CMP_CLUSTER_INFO(context.Context, *CMP_CLUSTER_INFO_Request) (*emptypb.Empty, error)
	CMP_CLUSTER_INIT_COMMAND(context.Context, *CMP_CLUSTER_INIT_COMMAND_Request) (*emptypb.Empty, error)
	CMP_CLUSTER_INIT_RETRY(context.Context, *CMP_CLUSTER_INIT_RETRY_Request) (*emptypb.Empty, error)
	CMP_CLUSTER_OFFLINE(context.Context, *OfflineEdgeClusterRequest) (*OfflineEdgeClusterResponse, error)
	CMP_CLUSTER_PREVIEW(context.Context, *CMP_CLUSTER_PREVIEW_Request) (*emptypb.Empty, error)
	CMP_CLUSTER_UPDATE(context.Context, *ClusterUpdateRequest) (*ClusterUpdateResponse, error)
	CMP_CLUSTER_UPGRADE(context.Context, *UpgradeEdgeClusterRequest) (*UpgradeEdgeClusterResponse, error)
	CMP_CREDENTIAL_ACCESSKEY_CREATE(context.Context, *CMP_CREDENTIAL_ACCESSKEY_CREATE_Request) (*emptypb.Empty, error)
	CMP_CREDENTIAL_ACCESSKEY_GET(context.Context, *CMP_CREDENTIAL_ACCESSKEY_GET_Request) (*emptypb.Empty, error)
	CMP_CREDENTIAL_ACCESSKEY_RESET(context.Context, *CMP_CREDENTIAL_ACCESSKEY_RESET_Request) (*emptypb.Empty, error)
	CMP_EDGE_HOST_OFFLINE(context.Context, *EdgeHostOffline) (*emptypb.Empty, error)
	CMP_K8S_CLUSTERS(context.Context, *CMP_K8S_CLUSTERS_Request) (*K8SClusters, error)
	CMP_NODES(context.Context, *AddNodesRequest) (*AddNodesResponse, error)
	CMP_NODES_REMOVE(context.Context, *RmNodesRequest) (*RmNodesResponse, error)
	CMP_NODE_LABELS_LIST(context.Context, *CMP_NODE_LABELS_LIST_Request) (*emptypb.Empty, error)
	CMP_NODE_LABELS_UPDATE(context.Context, *UpdateLabelsRequest) (*UpdateLabelsResponse, error)
	CMP_NODE_LOGS(context.Context, *CMP_NODE_LOGS_Request) (*emptypb.Empty, error)
	CMP_ORG_CLUSTER_INFO(context.Context, *OrgClusterInfoRequest) (*OrgClusterInfoResponse, error)
	CMP_RECORDS(context.Context, *CMP_RECORDS_Request) (*emptypb.Empty, error)
	CMP_RECORDTYPES(context.Context, *CMP_RECORDTYPES_Request) (*emptypb.Empty, error)
	CMP_RESOURCE_OVERVIEW_CLASS(context.Context, *CMP_RESOURCE_OVERVIEW_CLASS_Request) (*emptypb.Empty, error)
	CMP_RESOURCE_OVERVIEW_CLUSTER_TREND(context.Context, *CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request) (*emptypb.Empty, error)
	CMP_RESOURCE_OVERVIEW_GAUGE(context.Context, *CMP_RESOURCE_OVERVIEW_GAUGE_Request) (*emptypb.Empty, error)
	CMP_RESOURCE_OVERVIEW_PROJECT_TREND(context.Context, *CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request) (*emptypb.Empty, error)
	CMP_RESOURCE_OVERVIEW_REPORT(context.Context, *CMP_RESOURCE_OVERVIEW_REPORT_Request) (*emptypb.Empty, error)
	CMP_RUNNING_TASKS_LIST(context.Context, *OrgRunningTasksListRequest) (*OrgRunningTasksListResponse, error)
	CMP_STEVE_CREATE(context.Context, *CMP_STEVE_CREATE_Request) (*emptypb.Empty, error)
	CMP_STEVE_DELETE(context.Context, *CMP_STEVE_DELETE_Request) (*emptypb.Empty, error)
	CMP_STEVE_GET(context.Context, *CMP_STEVE_GET_Request) (*emptypb.Empty, error)
	CMP_STEVE_PATCH(context.Context, *CMP_STEVE_PATCH_Request) (*emptypb.Empty, error)
	CMP_STEVE_UPDATE(context.Context, *CMP_STEVE_UPDATE_Request) (*emptypb.Empty, error)
	CMP_STEVE_WS(context.Context, *CMP_STEVE_WS_Request) (*emptypb.Empty, error)
}

// UnimplementedCmpServer should be embedded to have forward compatible implementations.
type UnimplementedCmpServer struct {
}

func (*UnimplementedCmpServer) CMP_ADDON_CONFIG(context.Context, *AddonConfigRequest) (*AddonConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_ADDON_CONFIG not implemented")
}
func (*UnimplementedCmpServer) CMP_ADDON_CONFIG_UPDATE(context.Context, *AddonConfigUpdateRequest) (*AddonConfigUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_ADDON_CONFIG_UPDATE not implemented")
}
func (*UnimplementedCmpServer) CMP_ADDON_SCALE(context.Context, *AddonScaleRequest) (*AddonScaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_ADDON_SCALE not implemented")
}
func (*UnimplementedCmpServer) CMP_ADDON_STATUS(context.Context, *OpsAddonStatusQueryRequest) (*OpsAddonStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_ADDON_STATUS not implemented")
}
func (*UnimplementedCmpServer) CMP_ALERT_CONDITIONS(context.Context, *CMP_ALERT_CONDITIONS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_ALERT_CONDITIONS not implemented")
}
func (*UnimplementedCmpServer) CMP_ALERT_CONDITIONS_VALUE(context.Context, *CMP_ALERT_CONDITIONS_VALUE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_ALERT_CONDITIONS_VALUE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_CLUSTERS(context.Context, *CloudClusterRequest) (*CloudClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_CLUSTERS not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_NODES(context.Context, *CloudNodesRequest) (*CloudNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_NODES not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE(context.Context, *CMP_CLOUD_RESOURCE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ACCOUNT_CREATE(context.Context, *CreateCloudAccountRequest) (*CreateCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ACCOUNT_CREATE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ACCOUNT_DELETE(context.Context, *DeleteCloudAccountRequest) (*DeleteCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ACCOUNT_DELETE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ACCOUNT_LIST(context.Context, *CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request) (*ListCloudAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ACCOUNT_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW(context.Context, *AutoRenewCloudResourceEcsRequest) (*HandleCloudResourceECSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ECS_LIST(context.Context, *ListCloudResourceECSRequest) (*ListCloudResourceECSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ECS_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ECS_RESTART(context.Context, *HandleCloudResourceEcsRequest) (*HandleCloudResourceECSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ECS_RESTART not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ECS_START(context.Context, *HandleCloudResourceEcsRequest) (*HandleCloudResourceECSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ECS_START not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ECS_STOP(context.Context, *HandleCloudResourceEcsRequest) (*HandleCloudResourceECSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ECS_STOP not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ECS_TREND(context.Context, *CMP_CLOUD_RESOURCE_ECS_TREND_Request) (*GetCloudResourceECSTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ECS_TREND not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_GATEWAY_LIST(context.Context, *ListCloudResourceGatewayRequest) (*ListCloudResourceGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_GATEWAY_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_LIST(context.Context, *CMP_CLOUD_RESOURCE_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE(context.Context, *CreateCloudResourceMysqlAccountRequest) (*CreateCloudResourceMysqlAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO(context.Context, *CloudResourceMysqlListAccountRequest) (*CloudResourceMysqlListAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET(context.Context, *CreateCloudResourceMysqlAccountRequest) (*CreateCloudResourceMysqlAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT(context.Context, *GrantMysqlAccountPrivilegeRequest) (*GrantMysqlAccountPrivilegeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_MYSQL_CREATE(context.Context, *CreateCloudResourceMysqlRequest) (*CreateCloudResourceMysqlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_MYSQL_CREATE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO(context.Context, *CloudResourceMysqlDBRequest) (*CloudResourceMysqlDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE(context.Context, *CreateCloudResourceMysqlDBRequest) (*CreateCloudResourceMysqlDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE(context.Context, *DeleteCloudResourceMysqlDBRequest) (*CloudAddonResourceDeleteRespnse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_MYSQL_DELETE(context.Context, *DeleteCloudResourceMysqlRequest) (*CloudAddonResourceDeleteRespnse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_MYSQL_DELETE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO(context.Context, *CloudResourceMysqlDetailInfoRequest) (*CloudResourceMysqlDetailInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_MYSQL_LIST(context.Context, *ListCloudResourceMysqlRequest) (*ListCloudResourceMysqlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_MYSQL_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ONS_CREATE(context.Context, *CreateCloudResourceOnsRequest) (*CreateCloudResourceOnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ONS_CREATE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ONS_DELETE(context.Context, *DeleteCloudResourceOnsRequest) (*CloudAddonResourceDeleteRespnse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ONS_DELETE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO(context.Context, *CloudResourceOnsDetailInfoRequest) (*CloudResourceOnsDetailInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE(context.Context, *CreateCloudResourceOnsGroupRequest) (*CreateCloudResourceOnsGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ONS_GROUP_INFO(context.Context, *CloudResourceOnsGroupInfoRequest) (*CloudResourceOnsGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ONS_GROUP_INFO not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ONS_LIST(context.Context, *ListCloudResourceOnsRequest) (*ListCloudResourceOnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ONS_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE(context.Context, *CreateCloudResourceOnsTopicRequest) (*CreateCloudResourceOnsTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE(context.Context, *DeleteCloudResourceOnsRequest) (*CloudAddonResourceDeleteRespnse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO(context.Context, *CloudResourceOnsTopicInfoRequest) (*CloudResourceOnsTopicInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_OSS_CREATE(context.Context, *CreateCloudResourceOssRequest) (*CreateCloudResourceOssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_OSS_CREATE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_OSS_DELETE(context.Context, *DeleteCloudResourceOssRequest) (*CloudAddonResourceDeleteRespnse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_OSS_DELETE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO(context.Context, *CloudResourceOssDetailInfoRequest) (*CloudResourceOssDetailInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_OSS_LIST(context.Context, *ListCloudResourceOssRequest) (*ListCloudResourceOssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_OSS_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_OVERVIEW(context.Context, *CloudResourceOverviewRequest) (*CloudResourceOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_OVERVIEW not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_REDIS_CREATE(context.Context, *CreateCloudResourceRedisRequest) (*CreateCloudResourceRedisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_REDIS_CREATE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_REDIS_DELETE(context.Context, *DeleteCloudResourceRedisRequest) (*CloudAddonResourceDeleteRespnse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_REDIS_DELETE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO(context.Context, *CloudResourceRedisDetailInfoRequest) (*CloudResourceRedisDetailInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_REGION_LIST(context.Context, *ListCloudResourceRegionRequest) (*ListCloudResourceRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_REGION_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_Redis_LIST(context.Context, *ListCloudResourceRedisRequest) (*ListCloudResourceRedisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_Redis_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_SET_TAG(context.Context, *CloudResourceSetTagRequest) (*CloudResourceSetTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_SET_TAG not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_VPC_CREATE(context.Context, *CreateCloudResourceVPCRequest) (*CreateCloudResourceVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_VPC_CREATE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_VPC_LIST(context.Context, *ListCloudResourceVPCRequest) (*ListCloudResourceVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_VPC_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_VSW_CREATE(context.Context, *CreateCloudResourceVSWRequest) (*CreateCloudResourceVSWResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_VSW_CREATE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_VSW_LIST(context.Context, *ListCloudResourceVSWRequest) (*ListCloudResourceVSWResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_VSW_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_CLOUD_RESOURCE_ZONE_LIST(context.Context, *ListCloudResourceZoneRequest) (*ListCloudResourceZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLOUD_RESOURCE_ZONE_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_CLUSTER_BATCH_UPGRADE(context.Context, *BatchUpgradeEdgeClusterRequest) (*BatchUpgradeEdgeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLUSTER_BATCH_UPGRADE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLUSTER_IMPORT(context.Context, *CMP_CLUSTER_IMPORT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLUSTER_IMPORT not implemented")
}
func (*UnimplementedCmpServer) CMP_CLUSTER_INFO(context.Context, *CMP_CLUSTER_INFO_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLUSTER_INFO not implemented")
}
func (*UnimplementedCmpServer) CMP_CLUSTER_INIT_COMMAND(context.Context, *CMP_CLUSTER_INIT_COMMAND_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLUSTER_INIT_COMMAND not implemented")
}
func (*UnimplementedCmpServer) CMP_CLUSTER_INIT_RETRY(context.Context, *CMP_CLUSTER_INIT_RETRY_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLUSTER_INIT_RETRY not implemented")
}
func (*UnimplementedCmpServer) CMP_CLUSTER_OFFLINE(context.Context, *OfflineEdgeClusterRequest) (*OfflineEdgeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLUSTER_OFFLINE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLUSTER_PREVIEW(context.Context, *CMP_CLUSTER_PREVIEW_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLUSTER_PREVIEW not implemented")
}
func (*UnimplementedCmpServer) CMP_CLUSTER_UPDATE(context.Context, *ClusterUpdateRequest) (*ClusterUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLUSTER_UPDATE not implemented")
}
func (*UnimplementedCmpServer) CMP_CLUSTER_UPGRADE(context.Context, *UpgradeEdgeClusterRequest) (*UpgradeEdgeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CLUSTER_UPGRADE not implemented")
}
func (*UnimplementedCmpServer) CMP_CREDENTIAL_ACCESSKEY_CREATE(context.Context, *CMP_CREDENTIAL_ACCESSKEY_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CREDENTIAL_ACCESSKEY_CREATE not implemented")
}
func (*UnimplementedCmpServer) CMP_CREDENTIAL_ACCESSKEY_GET(context.Context, *CMP_CREDENTIAL_ACCESSKEY_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CREDENTIAL_ACCESSKEY_GET not implemented")
}
func (*UnimplementedCmpServer) CMP_CREDENTIAL_ACCESSKEY_RESET(context.Context, *CMP_CREDENTIAL_ACCESSKEY_RESET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_CREDENTIAL_ACCESSKEY_RESET not implemented")
}
func (*UnimplementedCmpServer) CMP_EDGE_HOST_OFFLINE(context.Context, *EdgeHostOffline) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_EDGE_HOST_OFFLINE not implemented")
}
func (*UnimplementedCmpServer) CMP_K8S_CLUSTERS(context.Context, *CMP_K8S_CLUSTERS_Request) (*K8SClusters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_K8S_CLUSTERS not implemented")
}
func (*UnimplementedCmpServer) CMP_NODES(context.Context, *AddNodesRequest) (*AddNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_NODES not implemented")
}
func (*UnimplementedCmpServer) CMP_NODES_REMOVE(context.Context, *RmNodesRequest) (*RmNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_NODES_REMOVE not implemented")
}
func (*UnimplementedCmpServer) CMP_NODE_LABELS_LIST(context.Context, *CMP_NODE_LABELS_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_NODE_LABELS_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_NODE_LABELS_UPDATE(context.Context, *UpdateLabelsRequest) (*UpdateLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_NODE_LABELS_UPDATE not implemented")
}
func (*UnimplementedCmpServer) CMP_NODE_LOGS(context.Context, *CMP_NODE_LOGS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_NODE_LOGS not implemented")
}
func (*UnimplementedCmpServer) CMP_ORG_CLUSTER_INFO(context.Context, *OrgClusterInfoRequest) (*OrgClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_ORG_CLUSTER_INFO not implemented")
}
func (*UnimplementedCmpServer) CMP_RECORDS(context.Context, *CMP_RECORDS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_RECORDS not implemented")
}
func (*UnimplementedCmpServer) CMP_RECORDTYPES(context.Context, *CMP_RECORDTYPES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_RECORDTYPES not implemented")
}
func (*UnimplementedCmpServer) CMP_RESOURCE_OVERVIEW_CLASS(context.Context, *CMP_RESOURCE_OVERVIEW_CLASS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_RESOURCE_OVERVIEW_CLASS not implemented")
}
func (*UnimplementedCmpServer) CMP_RESOURCE_OVERVIEW_CLUSTER_TREND(context.Context, *CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_RESOURCE_OVERVIEW_CLUSTER_TREND not implemented")
}
func (*UnimplementedCmpServer) CMP_RESOURCE_OVERVIEW_GAUGE(context.Context, *CMP_RESOURCE_OVERVIEW_GAUGE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_RESOURCE_OVERVIEW_GAUGE not implemented")
}
func (*UnimplementedCmpServer) CMP_RESOURCE_OVERVIEW_PROJECT_TREND(context.Context, *CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_RESOURCE_OVERVIEW_PROJECT_TREND not implemented")
}
func (*UnimplementedCmpServer) CMP_RESOURCE_OVERVIEW_REPORT(context.Context, *CMP_RESOURCE_OVERVIEW_REPORT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_RESOURCE_OVERVIEW_REPORT not implemented")
}
func (*UnimplementedCmpServer) CMP_RUNNING_TASKS_LIST(context.Context, *OrgRunningTasksListRequest) (*OrgRunningTasksListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_RUNNING_TASKS_LIST not implemented")
}
func (*UnimplementedCmpServer) CMP_STEVE_CREATE(context.Context, *CMP_STEVE_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_STEVE_CREATE not implemented")
}
func (*UnimplementedCmpServer) CMP_STEVE_DELETE(context.Context, *CMP_STEVE_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_STEVE_DELETE not implemented")
}
func (*UnimplementedCmpServer) CMP_STEVE_GET(context.Context, *CMP_STEVE_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_STEVE_GET not implemented")
}
func (*UnimplementedCmpServer) CMP_STEVE_PATCH(context.Context, *CMP_STEVE_PATCH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_STEVE_PATCH not implemented")
}
func (*UnimplementedCmpServer) CMP_STEVE_UPDATE(context.Context, *CMP_STEVE_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_STEVE_UPDATE not implemented")
}
func (*UnimplementedCmpServer) CMP_STEVE_WS(context.Context, *CMP_STEVE_WS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMP_STEVE_WS not implemented")
}

func RegisterCmpServer(s grpc1.ServiceRegistrar, srv CmpServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Cmp_serviceDesc(srv, opts...), srv)
}

var _Cmp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.cmp.cmp",
	HandlerType: (*CmpServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "cmp.proto",
}

func _get_Cmp_serviceDesc(srv CmpServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Cmp_CMP_ADDON_CONFIG_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_ADDON_CONFIG(ctx, req.(*AddonConfigRequest))
	}
	var _Cmp_CMP_ADDON_CONFIG_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_ADDON_CONFIG_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_ADDON_CONFIG", srv)
		_Cmp_CMP_ADDON_CONFIG_Handler = h.Interceptor(_Cmp_CMP_ADDON_CONFIG_Handler)
	}

	_Cmp_CMP_ADDON_CONFIG_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_ADDON_CONFIG_UPDATE(ctx, req.(*AddonConfigUpdateRequest))
	}
	var _Cmp_CMP_ADDON_CONFIG_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_ADDON_CONFIG_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_ADDON_CONFIG_UPDATE", srv)
		_Cmp_CMP_ADDON_CONFIG_UPDATE_Handler = h.Interceptor(_Cmp_CMP_ADDON_CONFIG_UPDATE_Handler)
	}

	_Cmp_CMP_ADDON_SCALE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_ADDON_SCALE(ctx, req.(*AddonScaleRequest))
	}
	var _Cmp_CMP_ADDON_SCALE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_ADDON_SCALE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_ADDON_SCALE", srv)
		_Cmp_CMP_ADDON_SCALE_Handler = h.Interceptor(_Cmp_CMP_ADDON_SCALE_Handler)
	}

	_Cmp_CMP_ADDON_STATUS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_ADDON_STATUS(ctx, req.(*OpsAddonStatusQueryRequest))
	}
	var _Cmp_CMP_ADDON_STATUS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_ADDON_STATUS_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_ADDON_STATUS", srv)
		_Cmp_CMP_ADDON_STATUS_Handler = h.Interceptor(_Cmp_CMP_ADDON_STATUS_Handler)
	}

	_Cmp_CMP_ALERT_CONDITIONS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_ALERT_CONDITIONS(ctx, req.(*CMP_ALERT_CONDITIONS_Request))
	}
	var _Cmp_CMP_ALERT_CONDITIONS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_ALERT_CONDITIONS_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_ALERT_CONDITIONS", srv)
		_Cmp_CMP_ALERT_CONDITIONS_Handler = h.Interceptor(_Cmp_CMP_ALERT_CONDITIONS_Handler)
	}

	_Cmp_CMP_ALERT_CONDITIONS_VALUE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_ALERT_CONDITIONS_VALUE(ctx, req.(*CMP_ALERT_CONDITIONS_VALUE_Request))
	}
	var _Cmp_CMP_ALERT_CONDITIONS_VALUE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_ALERT_CONDITIONS_VALUE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_ALERT_CONDITIONS_VALUE", srv)
		_Cmp_CMP_ALERT_CONDITIONS_VALUE_Handler = h.Interceptor(_Cmp_CMP_ALERT_CONDITIONS_VALUE_Handler)
	}

	_Cmp_CMP_CLOUD_CLUSTERS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_CLUSTERS(ctx, req.(*CloudClusterRequest))
	}
	var _Cmp_CMP_CLOUD_CLUSTERS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_CLUSTERS_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_CLUSTERS", srv)
		_Cmp_CMP_CLOUD_CLUSTERS_Handler = h.Interceptor(_Cmp_CMP_CLOUD_CLUSTERS_Handler)
	}

	_Cmp_CMP_CLOUD_NODES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_NODES(ctx, req.(*CloudNodesRequest))
	}
	var _Cmp_CMP_CLOUD_NODES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_NODES_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_NODES", srv)
		_Cmp_CMP_CLOUD_NODES_Handler = h.Interceptor(_Cmp_CMP_CLOUD_NODES_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE(ctx, req.(*CMP_CLOUD_RESOURCE_Request))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ACCOUNT_CREATE(ctx, req.(*CreateCloudAccountRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ACCOUNT_CREATE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_CREATE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_CREATE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ACCOUNT_DELETE(ctx, req.(*DeleteCloudAccountRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ACCOUNT_DELETE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_DELETE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_DELETE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ACCOUNT_LIST(ctx, req.(*CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ACCOUNT_LIST", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW(ctx, req.(*AutoRenewCloudResourceEcsRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ECS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ECS_LIST(ctx, req.(*ListCloudResourceECSRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ECS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ECS_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ECS_LIST", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ECS_LIST_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ECS_LIST_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ECS_RESTART_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ECS_RESTART(ctx, req.(*HandleCloudResourceEcsRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ECS_RESTART_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ECS_RESTART_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ECS_RESTART", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ECS_RESTART_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ECS_RESTART_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ECS_START_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ECS_START(ctx, req.(*HandleCloudResourceEcsRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ECS_START_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ECS_START_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ECS_START", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ECS_START_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ECS_START_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ECS_STOP_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ECS_STOP(ctx, req.(*HandleCloudResourceEcsRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ECS_STOP_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ECS_STOP_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ECS_STOP", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ECS_STOP_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ECS_STOP_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ECS_TREND_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ECS_TREND(ctx, req.(*CMP_CLOUD_RESOURCE_ECS_TREND_Request))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ECS_TREND_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ECS_TREND_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ECS_TREND", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ECS_TREND_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ECS_TREND_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_GATEWAY_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_GATEWAY_LIST(ctx, req.(*ListCloudResourceGatewayRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_GATEWAY_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_GATEWAY_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_GATEWAY_LIST", srv)
		_Cmp_CMP_CLOUD_RESOURCE_GATEWAY_LIST_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_GATEWAY_LIST_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_LIST(ctx, req.(*CMP_CLOUD_RESOURCE_LIST_Request))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_LIST", srv)
		_Cmp_CMP_CLOUD_RESOURCE_LIST_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_LIST_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE(ctx, req.(*CreateCloudResourceMysqlAccountRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO(ctx, req.(*CloudResourceMysqlListAccountRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO", srv)
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET(ctx, req.(*CreateCloudResourceMysqlAccountRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET", srv)
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT(ctx, req.(*GrantMysqlAccountPrivilegeRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT", srv)
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_MYSQL_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_MYSQL_CREATE(ctx, req.(*CreateCloudResourceMysqlRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_MYSQL_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_CREATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_MYSQL_CREATE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_CREATE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_MYSQL_CREATE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO(ctx, req.(*CloudResourceMysqlDBRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO", srv)
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE(ctx, req.(*CreateCloudResourceMysqlDBRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE(ctx, req.(*DeleteCloudResourceMysqlDBRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_MYSQL_DELETE(ctx, req.(*DeleteCloudResourceMysqlRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DELETE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_MYSQL_DELETE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DELETE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DELETE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO(ctx, req.(*CloudResourceMysqlDetailInfoRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO", srv)
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_MYSQL_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_MYSQL_LIST(ctx, req.(*ListCloudResourceMysqlRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_MYSQL_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_MYSQL_LIST", srv)
		_Cmp_CMP_CLOUD_RESOURCE_MYSQL_LIST_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_MYSQL_LIST_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ONS_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ONS_CREATE(ctx, req.(*CreateCloudResourceOnsRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ONS_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ONS_CREATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ONS_CREATE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ONS_CREATE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ONS_CREATE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ONS_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ONS_DELETE(ctx, req.(*DeleteCloudResourceOnsRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ONS_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ONS_DELETE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ONS_DELETE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ONS_DELETE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ONS_DELETE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO(ctx, req.(*CloudResourceOnsDetailInfoRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE(ctx, req.(*CreateCloudResourceOnsGroupRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ONS_GROUP_INFO(ctx, req.(*CloudResourceOnsGroupInfoRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_INFO_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ONS_GROUP_INFO", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_INFO_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_INFO_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ONS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ONS_LIST(ctx, req.(*ListCloudResourceOnsRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ONS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ONS_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ONS_LIST", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ONS_LIST_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ONS_LIST_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE(ctx, req.(*CreateCloudResourceOnsTopicRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE(ctx, req.(*DeleteCloudResourceOnsRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO(ctx, req.(*CloudResourceOnsTopicInfoRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_OSS_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_OSS_CREATE(ctx, req.(*CreateCloudResourceOssRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_OSS_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_OSS_CREATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_OSS_CREATE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_OSS_CREATE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_OSS_CREATE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_OSS_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_OSS_DELETE(ctx, req.(*DeleteCloudResourceOssRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_OSS_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_OSS_DELETE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_OSS_DELETE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_OSS_DELETE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_OSS_DELETE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO(ctx, req.(*CloudResourceOssDetailInfoRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO", srv)
		_Cmp_CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_OSS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_OSS_LIST(ctx, req.(*ListCloudResourceOssRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_OSS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_OSS_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_OSS_LIST", srv)
		_Cmp_CMP_CLOUD_RESOURCE_OSS_LIST_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_OSS_LIST_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_OVERVIEW_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_OVERVIEW(ctx, req.(*CloudResourceOverviewRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_OVERVIEW_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_OVERVIEW_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_OVERVIEW", srv)
		_Cmp_CMP_CLOUD_RESOURCE_OVERVIEW_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_OVERVIEW_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_REDIS_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_REDIS_CREATE(ctx, req.(*CreateCloudResourceRedisRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_REDIS_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_REDIS_CREATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_REDIS_CREATE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_REDIS_CREATE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_REDIS_CREATE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_REDIS_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_REDIS_DELETE(ctx, req.(*DeleteCloudResourceRedisRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_REDIS_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_REDIS_DELETE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_REDIS_DELETE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_REDIS_DELETE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_REDIS_DELETE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO(ctx, req.(*CloudResourceRedisDetailInfoRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO", srv)
		_Cmp_CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_REGION_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_REGION_LIST(ctx, req.(*ListCloudResourceRegionRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_REGION_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_REGION_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_REGION_LIST", srv)
		_Cmp_CMP_CLOUD_RESOURCE_REGION_LIST_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_REGION_LIST_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_Redis_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_Redis_LIST(ctx, req.(*ListCloudResourceRedisRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_Redis_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_Redis_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_Redis_LIST", srv)
		_Cmp_CMP_CLOUD_RESOURCE_Redis_LIST_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_Redis_LIST_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_SET_TAG_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_SET_TAG(ctx, req.(*CloudResourceSetTagRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_SET_TAG_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_SET_TAG_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_SET_TAG", srv)
		_Cmp_CMP_CLOUD_RESOURCE_SET_TAG_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_SET_TAG_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_VPC_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_VPC_CREATE(ctx, req.(*CreateCloudResourceVPCRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_VPC_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_VPC_CREATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_VPC_CREATE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_VPC_CREATE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_VPC_CREATE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_VPC_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_VPC_LIST(ctx, req.(*ListCloudResourceVPCRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_VPC_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_VPC_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_VPC_LIST", srv)
		_Cmp_CMP_CLOUD_RESOURCE_VPC_LIST_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_VPC_LIST_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_VSW_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_VSW_CREATE(ctx, req.(*CreateCloudResourceVSWRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_VSW_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_VSW_CREATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_VSW_CREATE", srv)
		_Cmp_CMP_CLOUD_RESOURCE_VSW_CREATE_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_VSW_CREATE_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_VSW_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_VSW_LIST(ctx, req.(*ListCloudResourceVSWRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_VSW_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_VSW_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_VSW_LIST", srv)
		_Cmp_CMP_CLOUD_RESOURCE_VSW_LIST_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_VSW_LIST_Handler)
	}

	_Cmp_CMP_CLOUD_RESOURCE_ZONE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLOUD_RESOURCE_ZONE_LIST(ctx, req.(*ListCloudResourceZoneRequest))
	}
	var _Cmp_CMP_CLOUD_RESOURCE_ZONE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLOUD_RESOURCE_ZONE_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLOUD_RESOURCE_ZONE_LIST", srv)
		_Cmp_CMP_CLOUD_RESOURCE_ZONE_LIST_Handler = h.Interceptor(_Cmp_CMP_CLOUD_RESOURCE_ZONE_LIST_Handler)
	}

	_Cmp_CMP_CLUSTER_BATCH_UPGRADE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLUSTER_BATCH_UPGRADE(ctx, req.(*BatchUpgradeEdgeClusterRequest))
	}
	var _Cmp_CMP_CLUSTER_BATCH_UPGRADE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLUSTER_BATCH_UPGRADE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLUSTER_BATCH_UPGRADE", srv)
		_Cmp_CMP_CLUSTER_BATCH_UPGRADE_Handler = h.Interceptor(_Cmp_CMP_CLUSTER_BATCH_UPGRADE_Handler)
	}

	_Cmp_CMP_CLUSTER_IMPORT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLUSTER_IMPORT(ctx, req.(*CMP_CLUSTER_IMPORT_Request))
	}
	var _Cmp_CMP_CLUSTER_IMPORT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLUSTER_IMPORT_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLUSTER_IMPORT", srv)
		_Cmp_CMP_CLUSTER_IMPORT_Handler = h.Interceptor(_Cmp_CMP_CLUSTER_IMPORT_Handler)
	}

	_Cmp_CMP_CLUSTER_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLUSTER_INFO(ctx, req.(*CMP_CLUSTER_INFO_Request))
	}
	var _Cmp_CMP_CLUSTER_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLUSTER_INFO_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLUSTER_INFO", srv)
		_Cmp_CMP_CLUSTER_INFO_Handler = h.Interceptor(_Cmp_CMP_CLUSTER_INFO_Handler)
	}

	_Cmp_CMP_CLUSTER_INIT_COMMAND_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLUSTER_INIT_COMMAND(ctx, req.(*CMP_CLUSTER_INIT_COMMAND_Request))
	}
	var _Cmp_CMP_CLUSTER_INIT_COMMAND_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLUSTER_INIT_COMMAND_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLUSTER_INIT_COMMAND", srv)
		_Cmp_CMP_CLUSTER_INIT_COMMAND_Handler = h.Interceptor(_Cmp_CMP_CLUSTER_INIT_COMMAND_Handler)
	}

	_Cmp_CMP_CLUSTER_INIT_RETRY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLUSTER_INIT_RETRY(ctx, req.(*CMP_CLUSTER_INIT_RETRY_Request))
	}
	var _Cmp_CMP_CLUSTER_INIT_RETRY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLUSTER_INIT_RETRY_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLUSTER_INIT_RETRY", srv)
		_Cmp_CMP_CLUSTER_INIT_RETRY_Handler = h.Interceptor(_Cmp_CMP_CLUSTER_INIT_RETRY_Handler)
	}

	_Cmp_CMP_CLUSTER_OFFLINE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLUSTER_OFFLINE(ctx, req.(*OfflineEdgeClusterRequest))
	}
	var _Cmp_CMP_CLUSTER_OFFLINE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLUSTER_OFFLINE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLUSTER_OFFLINE", srv)
		_Cmp_CMP_CLUSTER_OFFLINE_Handler = h.Interceptor(_Cmp_CMP_CLUSTER_OFFLINE_Handler)
	}

	_Cmp_CMP_CLUSTER_PREVIEW_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLUSTER_PREVIEW(ctx, req.(*CMP_CLUSTER_PREVIEW_Request))
	}
	var _Cmp_CMP_CLUSTER_PREVIEW_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLUSTER_PREVIEW_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLUSTER_PREVIEW", srv)
		_Cmp_CMP_CLUSTER_PREVIEW_Handler = h.Interceptor(_Cmp_CMP_CLUSTER_PREVIEW_Handler)
	}

	_Cmp_CMP_CLUSTER_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLUSTER_UPDATE(ctx, req.(*ClusterUpdateRequest))
	}
	var _Cmp_CMP_CLUSTER_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLUSTER_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLUSTER_UPDATE", srv)
		_Cmp_CMP_CLUSTER_UPDATE_Handler = h.Interceptor(_Cmp_CMP_CLUSTER_UPDATE_Handler)
	}

	_Cmp_CMP_CLUSTER_UPGRADE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CLUSTER_UPGRADE(ctx, req.(*UpgradeEdgeClusterRequest))
	}
	var _Cmp_CMP_CLUSTER_UPGRADE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CLUSTER_UPGRADE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CLUSTER_UPGRADE", srv)
		_Cmp_CMP_CLUSTER_UPGRADE_Handler = h.Interceptor(_Cmp_CMP_CLUSTER_UPGRADE_Handler)
	}

	_Cmp_CMP_CREDENTIAL_ACCESSKEY_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CREDENTIAL_ACCESSKEY_CREATE(ctx, req.(*CMP_CREDENTIAL_ACCESSKEY_CREATE_Request))
	}
	var _Cmp_CMP_CREDENTIAL_ACCESSKEY_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CREDENTIAL_ACCESSKEY_CREATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CREDENTIAL_ACCESSKEY_CREATE", srv)
		_Cmp_CMP_CREDENTIAL_ACCESSKEY_CREATE_Handler = h.Interceptor(_Cmp_CMP_CREDENTIAL_ACCESSKEY_CREATE_Handler)
	}

	_Cmp_CMP_CREDENTIAL_ACCESSKEY_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CREDENTIAL_ACCESSKEY_GET(ctx, req.(*CMP_CREDENTIAL_ACCESSKEY_GET_Request))
	}
	var _Cmp_CMP_CREDENTIAL_ACCESSKEY_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CREDENTIAL_ACCESSKEY_GET_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CREDENTIAL_ACCESSKEY_GET", srv)
		_Cmp_CMP_CREDENTIAL_ACCESSKEY_GET_Handler = h.Interceptor(_Cmp_CMP_CREDENTIAL_ACCESSKEY_GET_Handler)
	}

	_Cmp_CMP_CREDENTIAL_ACCESSKEY_RESET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_CREDENTIAL_ACCESSKEY_RESET(ctx, req.(*CMP_CREDENTIAL_ACCESSKEY_RESET_Request))
	}
	var _Cmp_CMP_CREDENTIAL_ACCESSKEY_RESET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_CREDENTIAL_ACCESSKEY_RESET_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_CREDENTIAL_ACCESSKEY_RESET", srv)
		_Cmp_CMP_CREDENTIAL_ACCESSKEY_RESET_Handler = h.Interceptor(_Cmp_CMP_CREDENTIAL_ACCESSKEY_RESET_Handler)
	}

	_Cmp_CMP_EDGE_HOST_OFFLINE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_EDGE_HOST_OFFLINE(ctx, req.(*EdgeHostOffline))
	}
	var _Cmp_CMP_EDGE_HOST_OFFLINE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_EDGE_HOST_OFFLINE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_EDGE_HOST_OFFLINE", srv)
		_Cmp_CMP_EDGE_HOST_OFFLINE_Handler = h.Interceptor(_Cmp_CMP_EDGE_HOST_OFFLINE_Handler)
	}

	_Cmp_CMP_K8S_CLUSTERS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_K8S_CLUSTERS(ctx, req.(*CMP_K8S_CLUSTERS_Request))
	}
	var _Cmp_CMP_K8S_CLUSTERS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_K8S_CLUSTERS_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_K8S_CLUSTERS", srv)
		_Cmp_CMP_K8S_CLUSTERS_Handler = h.Interceptor(_Cmp_CMP_K8S_CLUSTERS_Handler)
	}

	_Cmp_CMP_NODES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_NODES(ctx, req.(*AddNodesRequest))
	}
	var _Cmp_CMP_NODES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_NODES_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_NODES", srv)
		_Cmp_CMP_NODES_Handler = h.Interceptor(_Cmp_CMP_NODES_Handler)
	}

	_Cmp_CMP_NODES_REMOVE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_NODES_REMOVE(ctx, req.(*RmNodesRequest))
	}
	var _Cmp_CMP_NODES_REMOVE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_NODES_REMOVE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_NODES_REMOVE", srv)
		_Cmp_CMP_NODES_REMOVE_Handler = h.Interceptor(_Cmp_CMP_NODES_REMOVE_Handler)
	}

	_Cmp_CMP_NODE_LABELS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_NODE_LABELS_LIST(ctx, req.(*CMP_NODE_LABELS_LIST_Request))
	}
	var _Cmp_CMP_NODE_LABELS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_NODE_LABELS_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_NODE_LABELS_LIST", srv)
		_Cmp_CMP_NODE_LABELS_LIST_Handler = h.Interceptor(_Cmp_CMP_NODE_LABELS_LIST_Handler)
	}

	_Cmp_CMP_NODE_LABELS_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_NODE_LABELS_UPDATE(ctx, req.(*UpdateLabelsRequest))
	}
	var _Cmp_CMP_NODE_LABELS_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_NODE_LABELS_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_NODE_LABELS_UPDATE", srv)
		_Cmp_CMP_NODE_LABELS_UPDATE_Handler = h.Interceptor(_Cmp_CMP_NODE_LABELS_UPDATE_Handler)
	}

	_Cmp_CMP_NODE_LOGS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_NODE_LOGS(ctx, req.(*CMP_NODE_LOGS_Request))
	}
	var _Cmp_CMP_NODE_LOGS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_NODE_LOGS_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_NODE_LOGS", srv)
		_Cmp_CMP_NODE_LOGS_Handler = h.Interceptor(_Cmp_CMP_NODE_LOGS_Handler)
	}

	_Cmp_CMP_ORG_CLUSTER_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_ORG_CLUSTER_INFO(ctx, req.(*OrgClusterInfoRequest))
	}
	var _Cmp_CMP_ORG_CLUSTER_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_ORG_CLUSTER_INFO_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_ORG_CLUSTER_INFO", srv)
		_Cmp_CMP_ORG_CLUSTER_INFO_Handler = h.Interceptor(_Cmp_CMP_ORG_CLUSTER_INFO_Handler)
	}

	_Cmp_CMP_RECORDS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_RECORDS(ctx, req.(*CMP_RECORDS_Request))
	}
	var _Cmp_CMP_RECORDS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_RECORDS_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_RECORDS", srv)
		_Cmp_CMP_RECORDS_Handler = h.Interceptor(_Cmp_CMP_RECORDS_Handler)
	}

	_Cmp_CMP_RECORDTYPES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_RECORDTYPES(ctx, req.(*CMP_RECORDTYPES_Request))
	}
	var _Cmp_CMP_RECORDTYPES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_RECORDTYPES_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_RECORDTYPES", srv)
		_Cmp_CMP_RECORDTYPES_Handler = h.Interceptor(_Cmp_CMP_RECORDTYPES_Handler)
	}

	_Cmp_CMP_RESOURCE_OVERVIEW_CLASS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_RESOURCE_OVERVIEW_CLASS(ctx, req.(*CMP_RESOURCE_OVERVIEW_CLASS_Request))
	}
	var _Cmp_CMP_RESOURCE_OVERVIEW_CLASS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_RESOURCE_OVERVIEW_CLASS_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_RESOURCE_OVERVIEW_CLASS", srv)
		_Cmp_CMP_RESOURCE_OVERVIEW_CLASS_Handler = h.Interceptor(_Cmp_CMP_RESOURCE_OVERVIEW_CLASS_Handler)
	}

	_Cmp_CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_RESOURCE_OVERVIEW_CLUSTER_TREND(ctx, req.(*CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request))
	}
	var _Cmp_CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_RESOURCE_OVERVIEW_CLUSTER_TREND", srv)
		_Cmp_CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Handler = h.Interceptor(_Cmp_CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Handler)
	}

	_Cmp_CMP_RESOURCE_OVERVIEW_GAUGE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_RESOURCE_OVERVIEW_GAUGE(ctx, req.(*CMP_RESOURCE_OVERVIEW_GAUGE_Request))
	}
	var _Cmp_CMP_RESOURCE_OVERVIEW_GAUGE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_RESOURCE_OVERVIEW_GAUGE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_RESOURCE_OVERVIEW_GAUGE", srv)
		_Cmp_CMP_RESOURCE_OVERVIEW_GAUGE_Handler = h.Interceptor(_Cmp_CMP_RESOURCE_OVERVIEW_GAUGE_Handler)
	}

	_Cmp_CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_RESOURCE_OVERVIEW_PROJECT_TREND(ctx, req.(*CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request))
	}
	var _Cmp_CMP_RESOURCE_OVERVIEW_PROJECT_TREND_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_RESOURCE_OVERVIEW_PROJECT_TREND_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_RESOURCE_OVERVIEW_PROJECT_TREND", srv)
		_Cmp_CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Handler = h.Interceptor(_Cmp_CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Handler)
	}

	_Cmp_CMP_RESOURCE_OVERVIEW_REPORT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_RESOURCE_OVERVIEW_REPORT(ctx, req.(*CMP_RESOURCE_OVERVIEW_REPORT_Request))
	}
	var _Cmp_CMP_RESOURCE_OVERVIEW_REPORT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_RESOURCE_OVERVIEW_REPORT_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_RESOURCE_OVERVIEW_REPORT", srv)
		_Cmp_CMP_RESOURCE_OVERVIEW_REPORT_Handler = h.Interceptor(_Cmp_CMP_RESOURCE_OVERVIEW_REPORT_Handler)
	}

	_Cmp_CMP_RUNNING_TASKS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_RUNNING_TASKS_LIST(ctx, req.(*OrgRunningTasksListRequest))
	}
	var _Cmp_CMP_RUNNING_TASKS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_RUNNING_TASKS_LIST_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_RUNNING_TASKS_LIST", srv)
		_Cmp_CMP_RUNNING_TASKS_LIST_Handler = h.Interceptor(_Cmp_CMP_RUNNING_TASKS_LIST_Handler)
	}

	_Cmp_CMP_STEVE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_STEVE_CREATE(ctx, req.(*CMP_STEVE_CREATE_Request))
	}
	var _Cmp_CMP_STEVE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_STEVE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_STEVE_CREATE", srv)
		_Cmp_CMP_STEVE_CREATE_Handler = h.Interceptor(_Cmp_CMP_STEVE_CREATE_Handler)
	}

	_Cmp_CMP_STEVE_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_STEVE_DELETE(ctx, req.(*CMP_STEVE_DELETE_Request))
	}
	var _Cmp_CMP_STEVE_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_STEVE_DELETE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_STEVE_DELETE", srv)
		_Cmp_CMP_STEVE_DELETE_Handler = h.Interceptor(_Cmp_CMP_STEVE_DELETE_Handler)
	}

	_Cmp_CMP_STEVE_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_STEVE_GET(ctx, req.(*CMP_STEVE_GET_Request))
	}
	var _Cmp_CMP_STEVE_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_STEVE_GET_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_STEVE_GET", srv)
		_Cmp_CMP_STEVE_GET_Handler = h.Interceptor(_Cmp_CMP_STEVE_GET_Handler)
	}

	_Cmp_CMP_STEVE_PATCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_STEVE_PATCH(ctx, req.(*CMP_STEVE_PATCH_Request))
	}
	var _Cmp_CMP_STEVE_PATCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_STEVE_PATCH_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_STEVE_PATCH", srv)
		_Cmp_CMP_STEVE_PATCH_Handler = h.Interceptor(_Cmp_CMP_STEVE_PATCH_Handler)
	}

	_Cmp_CMP_STEVE_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_STEVE_UPDATE(ctx, req.(*CMP_STEVE_UPDATE_Request))
	}
	var _Cmp_CMP_STEVE_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_STEVE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_STEVE_UPDATE", srv)
		_Cmp_CMP_STEVE_UPDATE_Handler = h.Interceptor(_Cmp_CMP_STEVE_UPDATE_Handler)
	}

	_Cmp_CMP_STEVE_WS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMP_STEVE_WS(ctx, req.(*CMP_STEVE_WS_Request))
	}
	var _Cmp_CMP_STEVE_WS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Cmp_CMP_STEVE_WS_info = transport.NewServiceInfo("erda.openapiv1.cmp.cmp", "CMP_STEVE_WS", srv)
		_Cmp_CMP_STEVE_WS_Handler = h.Interceptor(_Cmp_CMP_STEVE_WS_Handler)
	}

	var serviceDesc = _Cmp_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CMP_ADDON_CONFIG",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AddonConfigRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_ADDON_CONFIG(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_ADDON_CONFIG_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_ADDON_CONFIG_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_ADDON_CONFIG",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_ADDON_CONFIG_Handler)
			},
		},
		{
			MethodName: "CMP_ADDON_CONFIG_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AddonConfigUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_ADDON_CONFIG_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_ADDON_CONFIG_UPDATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_ADDON_CONFIG_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_ADDON_CONFIG_UPDATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_ADDON_CONFIG_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMP_ADDON_SCALE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AddonScaleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_ADDON_SCALE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_ADDON_SCALE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_ADDON_SCALE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_ADDON_SCALE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_ADDON_SCALE_Handler)
			},
		},
		{
			MethodName: "CMP_ADDON_STATUS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OpsAddonStatusQueryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_ADDON_STATUS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_ADDON_STATUS_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_ADDON_STATUS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_ADDON_STATUS",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_ADDON_STATUS_Handler)
			},
		},
		{
			MethodName: "CMP_ALERT_CONDITIONS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_ALERT_CONDITIONS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_ALERT_CONDITIONS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_ALERT_CONDITIONS_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_ALERT_CONDITIONS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_ALERT_CONDITIONS",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_ALERT_CONDITIONS_Handler)
			},
		},
		{
			MethodName: "CMP_ALERT_CONDITIONS_VALUE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_ALERT_CONDITIONS_VALUE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_ALERT_CONDITIONS_VALUE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_ALERT_CONDITIONS_VALUE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_ALERT_CONDITIONS_VALUE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_ALERT_CONDITIONS_VALUE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_ALERT_CONDITIONS_VALUE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_CLUSTERS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CloudClusterRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_CLUSTERS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_CLUSTERS_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_CLUSTERS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_CLUSTERS",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_CLUSTERS_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_NODES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CloudNodesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_NODES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_NODES_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_NODES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_NODES",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_NODES_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_CLOUD_RESOURCE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ACCOUNT_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCloudAccountRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ACCOUNT_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_CREATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ACCOUNT_CREATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_CREATE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ACCOUNT_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteCloudAccountRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ACCOUNT_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_DELETE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ACCOUNT_DELETE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_DELETE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ACCOUNT_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ACCOUNT_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ACCOUNT_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AutoRenewCloudResourceEcsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ECS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListCloudResourceECSRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ECS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ECS_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ECS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ECS_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ECS_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ECS_RESTART",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(HandleCloudResourceEcsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ECS_RESTART(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ECS_RESTART_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ECS_RESTART_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ECS_RESTART",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ECS_RESTART_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ECS_START",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(HandleCloudResourceEcsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ECS_START(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ECS_START_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ECS_START_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ECS_START",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ECS_START_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ECS_STOP",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(HandleCloudResourceEcsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ECS_STOP(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ECS_STOP_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ECS_STOP_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ECS_STOP",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ECS_STOP_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ECS_TREND",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_CLOUD_RESOURCE_ECS_TREND_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ECS_TREND(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ECS_TREND_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ECS_TREND_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ECS_TREND",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ECS_TREND_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_GATEWAY_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListCloudResourceGatewayRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_GATEWAY_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_GATEWAY_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_GATEWAY_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_GATEWAY_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_GATEWAY_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_CLOUD_RESOURCE_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCloudResourceMysqlAccountRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CloudResourceMysqlListAccountRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCloudResourceMysqlAccountRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GrantMysqlAccountPrivilegeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_MYSQL_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCloudResourceMysqlRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_MYSQL_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_CREATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_MYSQL_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_CREATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_CREATE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CloudResourceMysqlDBRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCloudResourceMysqlDBRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteCloudResourceMysqlDBRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_MYSQL_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteCloudResourceMysqlRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_MYSQL_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DELETE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_DELETE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DELETE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CloudResourceMysqlDetailInfoRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_MYSQL_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListCloudResourceMysqlRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_MYSQL_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_MYSQL_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_MYSQL_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_MYSQL_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ONS_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCloudResourceOnsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ONS_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ONS_CREATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ONS_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_CREATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ONS_CREATE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ONS_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteCloudResourceOnsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ONS_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ONS_DELETE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ONS_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_DELETE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ONS_DELETE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CloudResourceOnsDetailInfoRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCloudResourceOnsGroupRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ONS_GROUP_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CloudResourceOnsGroupInfoRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ONS_GROUP_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_INFO_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_GROUP_INFO",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ONS_GROUP_INFO_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ONS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListCloudResourceOnsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ONS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ONS_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ONS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ONS_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCloudResourceOnsTopicRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteCloudResourceOnsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CloudResourceOnsTopicInfoRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_OSS_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCloudResourceOssRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_OSS_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_OSS_CREATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_OSS_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_OSS_CREATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_OSS_CREATE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_OSS_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteCloudResourceOssRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_OSS_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_OSS_DELETE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_OSS_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_OSS_DELETE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_OSS_DELETE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CloudResourceOssDetailInfoRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_OSS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListCloudResourceOssRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_OSS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_OSS_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_OSS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_OSS_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_OSS_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_OVERVIEW",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CloudResourceOverviewRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_OVERVIEW(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_OVERVIEW_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_OVERVIEW_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_OVERVIEW",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_OVERVIEW_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_REDIS_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCloudResourceRedisRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_REDIS_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_REDIS_CREATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_REDIS_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_REDIS_CREATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_REDIS_CREATE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_REDIS_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteCloudResourceRedisRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_REDIS_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_REDIS_DELETE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_REDIS_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_REDIS_DELETE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_REDIS_DELETE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CloudResourceRedisDetailInfoRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_REGION_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListCloudResourceRegionRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_REGION_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_REGION_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_REGION_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_REGION_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_REGION_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_Redis_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListCloudResourceRedisRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_Redis_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_Redis_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_Redis_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_Redis_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_Redis_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_SET_TAG",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CloudResourceSetTagRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_SET_TAG(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_SET_TAG_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_SET_TAG_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_SET_TAG",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_SET_TAG_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_VPC_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCloudResourceVPCRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_VPC_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_VPC_CREATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_VPC_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_VPC_CREATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_VPC_CREATE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_VPC_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListCloudResourceVPCRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_VPC_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_VPC_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_VPC_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_VPC_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_VPC_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_VSW_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCloudResourceVSWRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_VSW_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_VSW_CREATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_VSW_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_VSW_CREATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_VSW_CREATE_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_VSW_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListCloudResourceVSWRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_VSW_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_VSW_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_VSW_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_VSW_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_VSW_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_CLOUD_RESOURCE_ZONE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListCloudResourceZoneRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLOUD_RESOURCE_ZONE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLOUD_RESOURCE_ZONE_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLOUD_RESOURCE_ZONE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLOUD_RESOURCE_ZONE_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLOUD_RESOURCE_ZONE_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_CLUSTER_BATCH_UPGRADE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(BatchUpgradeEdgeClusterRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLUSTER_BATCH_UPGRADE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLUSTER_BATCH_UPGRADE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLUSTER_BATCH_UPGRADE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_BATCH_UPGRADE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLUSTER_BATCH_UPGRADE_Handler)
			},
		},
		{
			MethodName: "CMP_CLUSTER_IMPORT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_CLUSTER_IMPORT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLUSTER_IMPORT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLUSTER_IMPORT_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLUSTER_IMPORT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_IMPORT",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLUSTER_IMPORT_Handler)
			},
		},
		{
			MethodName: "CMP_CLUSTER_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_CLUSTER_INFO_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLUSTER_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLUSTER_INFO_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLUSTER_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_INFO",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLUSTER_INFO_Handler)
			},
		},
		{
			MethodName: "CMP_CLUSTER_INIT_COMMAND",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_CLUSTER_INIT_COMMAND_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLUSTER_INIT_COMMAND(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLUSTER_INIT_COMMAND_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLUSTER_INIT_COMMAND_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_INIT_COMMAND",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLUSTER_INIT_COMMAND_Handler)
			},
		},
		{
			MethodName: "CMP_CLUSTER_INIT_RETRY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_CLUSTER_INIT_RETRY_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLUSTER_INIT_RETRY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLUSTER_INIT_RETRY_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLUSTER_INIT_RETRY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_INIT_RETRY",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLUSTER_INIT_RETRY_Handler)
			},
		},
		{
			MethodName: "CMP_CLUSTER_OFFLINE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OfflineEdgeClusterRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLUSTER_OFFLINE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLUSTER_OFFLINE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLUSTER_OFFLINE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_OFFLINE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLUSTER_OFFLINE_Handler)
			},
		},
		{
			MethodName: "CMP_CLUSTER_PREVIEW",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_CLUSTER_PREVIEW_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLUSTER_PREVIEW(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLUSTER_PREVIEW_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLUSTER_PREVIEW_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_PREVIEW",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLUSTER_PREVIEW_Handler)
			},
		},
		{
			MethodName: "CMP_CLUSTER_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ClusterUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLUSTER_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLUSTER_UPDATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLUSTER_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_UPDATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLUSTER_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMP_CLUSTER_UPGRADE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpgradeEdgeClusterRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CLUSTER_UPGRADE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CLUSTER_UPGRADE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CLUSTER_UPGRADE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CLUSTER_UPGRADE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CLUSTER_UPGRADE_Handler)
			},
		},
		{
			MethodName: "CMP_CREDENTIAL_ACCESSKEY_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_CREDENTIAL_ACCESSKEY_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CREDENTIAL_ACCESSKEY_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CREDENTIAL_ACCESSKEY_CREATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CREDENTIAL_ACCESSKEY_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CREDENTIAL_ACCESSKEY_CREATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CREDENTIAL_ACCESSKEY_CREATE_Handler)
			},
		},
		{
			MethodName: "CMP_CREDENTIAL_ACCESSKEY_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_CREDENTIAL_ACCESSKEY_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CREDENTIAL_ACCESSKEY_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CREDENTIAL_ACCESSKEY_GET_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CREDENTIAL_ACCESSKEY_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CREDENTIAL_ACCESSKEY_GET",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CREDENTIAL_ACCESSKEY_GET_Handler)
			},
		},
		{
			MethodName: "CMP_CREDENTIAL_ACCESSKEY_RESET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_CREDENTIAL_ACCESSKEY_RESET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_CREDENTIAL_ACCESSKEY_RESET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_CREDENTIAL_ACCESSKEY_RESET_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_CREDENTIAL_ACCESSKEY_RESET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_CREDENTIAL_ACCESSKEY_RESET",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_CREDENTIAL_ACCESSKEY_RESET_Handler)
			},
		},
		{
			MethodName: "CMP_EDGE_HOST_OFFLINE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(EdgeHostOffline)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_EDGE_HOST_OFFLINE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_EDGE_HOST_OFFLINE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_EDGE_HOST_OFFLINE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_EDGE_HOST_OFFLINE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_EDGE_HOST_OFFLINE_Handler)
			},
		},
		{
			MethodName: "CMP_K8S_CLUSTERS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_K8S_CLUSTERS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_K8S_CLUSTERS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_K8S_CLUSTERS_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_K8S_CLUSTERS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_K8S_CLUSTERS",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_K8S_CLUSTERS_Handler)
			},
		},
		{
			MethodName: "CMP_NODES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AddNodesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_NODES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_NODES_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_NODES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_NODES",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_NODES_Handler)
			},
		},
		{
			MethodName: "CMP_NODES_REMOVE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RmNodesRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_NODES_REMOVE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_NODES_REMOVE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_NODES_REMOVE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_NODES_REMOVE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_NODES_REMOVE_Handler)
			},
		},
		{
			MethodName: "CMP_NODE_LABELS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_NODE_LABELS_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_NODE_LABELS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_NODE_LABELS_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_NODE_LABELS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_NODE_LABELS_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_NODE_LABELS_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_NODE_LABELS_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateLabelsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_NODE_LABELS_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_NODE_LABELS_UPDATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_NODE_LABELS_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_NODE_LABELS_UPDATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_NODE_LABELS_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMP_NODE_LOGS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_NODE_LOGS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_NODE_LOGS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_NODE_LOGS_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_NODE_LOGS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_NODE_LOGS",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_NODE_LOGS_Handler)
			},
		},
		{
			MethodName: "CMP_ORG_CLUSTER_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OrgClusterInfoRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_ORG_CLUSTER_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_ORG_CLUSTER_INFO_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_ORG_CLUSTER_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_ORG_CLUSTER_INFO",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_ORG_CLUSTER_INFO_Handler)
			},
		},
		{
			MethodName: "CMP_RECORDS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_RECORDS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_RECORDS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_RECORDS_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_RECORDS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_RECORDS",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_RECORDS_Handler)
			},
		},
		{
			MethodName: "CMP_RECORDTYPES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_RECORDTYPES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_RECORDTYPES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_RECORDTYPES_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_RECORDTYPES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_RECORDTYPES",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_RECORDTYPES_Handler)
			},
		},
		{
			MethodName: "CMP_RESOURCE_OVERVIEW_CLASS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_RESOURCE_OVERVIEW_CLASS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_RESOURCE_OVERVIEW_CLASS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_RESOURCE_OVERVIEW_CLASS_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_RESOURCE_OVERVIEW_CLASS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_RESOURCE_OVERVIEW_CLASS",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_RESOURCE_OVERVIEW_CLASS_Handler)
			},
		},
		{
			MethodName: "CMP_RESOURCE_OVERVIEW_CLUSTER_TREND",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_RESOURCE_OVERVIEW_CLUSTER_TREND(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_RESOURCE_OVERVIEW_CLUSTER_TREND",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Handler)
			},
		},
		{
			MethodName: "CMP_RESOURCE_OVERVIEW_GAUGE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_RESOURCE_OVERVIEW_GAUGE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_RESOURCE_OVERVIEW_GAUGE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_RESOURCE_OVERVIEW_GAUGE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_RESOURCE_OVERVIEW_GAUGE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_RESOURCE_OVERVIEW_GAUGE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_RESOURCE_OVERVIEW_GAUGE_Handler)
			},
		},
		{
			MethodName: "CMP_RESOURCE_OVERVIEW_PROJECT_TREND",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_RESOURCE_OVERVIEW_PROJECT_TREND(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_RESOURCE_OVERVIEW_PROJECT_TREND_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_RESOURCE_OVERVIEW_PROJECT_TREND",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Handler)
			},
		},
		{
			MethodName: "CMP_RESOURCE_OVERVIEW_REPORT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_RESOURCE_OVERVIEW_REPORT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_RESOURCE_OVERVIEW_REPORT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_RESOURCE_OVERVIEW_REPORT_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_RESOURCE_OVERVIEW_REPORT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_RESOURCE_OVERVIEW_REPORT",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_RESOURCE_OVERVIEW_REPORT_Handler)
			},
		},
		{
			MethodName: "CMP_RUNNING_TASKS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(OrgRunningTasksListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_RUNNING_TASKS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_RUNNING_TASKS_LIST_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_RUNNING_TASKS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_RUNNING_TASKS_LIST",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_RUNNING_TASKS_LIST_Handler)
			},
		},
		{
			MethodName: "CMP_STEVE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_STEVE_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_STEVE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_STEVE_CREATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_STEVE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_STEVE_CREATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_STEVE_CREATE_Handler)
			},
		},
		{
			MethodName: "CMP_STEVE_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_STEVE_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_STEVE_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_STEVE_DELETE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_STEVE_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_STEVE_DELETE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_STEVE_DELETE_Handler)
			},
		},
		{
			MethodName: "CMP_STEVE_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_STEVE_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_STEVE_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_STEVE_GET_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_STEVE_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_STEVE_GET",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_STEVE_GET_Handler)
			},
		},
		{
			MethodName: "CMP_STEVE_PATCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_STEVE_PATCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_STEVE_PATCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_STEVE_PATCH_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_STEVE_PATCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_STEVE_PATCH",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_STEVE_PATCH_Handler)
			},
		},
		{
			MethodName: "CMP_STEVE_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_STEVE_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_STEVE_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_STEVE_UPDATE_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_STEVE_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_STEVE_UPDATE",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_STEVE_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMP_STEVE_WS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMP_STEVE_WS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CmpServer).CMP_STEVE_WS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Cmp_CMP_STEVE_WS_info)
				}
				if interceptor == nil {
					return _Cmp_CMP_STEVE_WS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.cmp.cmp/CMP_STEVE_WS",
				}
				return interceptor(ctx, in, info, _Cmp_CMP_STEVE_WS_Handler)
			},
		},
	}
	return &serviceDesc
}
