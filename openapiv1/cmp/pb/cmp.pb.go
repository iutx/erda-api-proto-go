// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: cmp.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddNodesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID uint64 `protobuf:"varint,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
}

func (x *AddNodesData) Reset() {
	*x = AddNodesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNodesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodesData) ProtoMessage() {}

func (x *AddNodesData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodesData.ProtoReflect.Descriptor instead.
func (*AddNodesData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{0}
}

func (x *AddNodesData) GetRecordID() uint64 {
	if x != nil {
		return x.RecordID
	}
	return 0
}

type AddNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName     string   `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	OrgID           uint64   `protobuf:"varint,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Hosts           []string `protobuf:"bytes,3,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Labels          []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Port            int64    `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	User            string   `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Password        string   `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	SudoHasPassword string   `protobuf:"bytes,8,opt,name=sudoHasPassword,proto3" json:"sudoHasPassword,omitempty"`
	DataDiskDevice  string   `protobuf:"bytes,9,opt,name=dataDiskDevice,proto3" json:"dataDiskDevice,omitempty"`
	Source          string   `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`
	Detail          string   `protobuf:"bytes,11,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *AddNodesRequest) Reset() {
	*x = AddNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodesRequest) ProtoMessage() {}

func (x *AddNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodesRequest.ProtoReflect.Descriptor instead.
func (*AddNodesRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{1}
}

func (x *AddNodesRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AddNodesRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *AddNodesRequest) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *AddNodesRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AddNodesRequest) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AddNodesRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AddNodesRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddNodesRequest) GetSudoHasPassword() string {
	if x != nil {
		return x.SudoHasPassword
	}
	return ""
}

func (x *AddNodesRequest) GetDataDiskDevice() string {
	if x != nil {
		return x.DataDiskDevice
	}
	return ""
}

func (x *AddNodesRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AddNodesRequest) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type AddNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddNodesResponse) Reset() {
	*x = AddNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodesResponse) ProtoMessage() {}

func (x *AddNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodesResponse.ProtoReflect.Descriptor instead.
func (*AddNodesResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{2}
}

func (x *AddNodesResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddonConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonID string `protobuf:"bytes,1,opt,name=addonID,proto3" json:"addonID,omitempty"`
}

func (x *AddonConfigRequest) Reset() {
	*x = AddonConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonConfigRequest) ProtoMessage() {}

func (x *AddonConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonConfigRequest.ProtoReflect.Descriptor instead.
func (*AddonConfigRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{3}
}

func (x *AddonConfigRequest) GetAddonID() string {
	if x != nil {
		return x.AddonID
	}
	return ""
}

type AddonConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *AddonConfigResponse) Reset() {
	*x = AddonConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonConfigResponse) ProtoMessage() {}

func (x *AddonConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonConfigResponse.ProtoReflect.Descriptor instead.
func (*AddonConfigResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{4}
}

func (x *AddonConfigResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddonConfigUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonOpsBaseRequest *structpb.Value   `protobuf:"bytes,1,opt,name=addonOpsBaseRequest,proto3" json:"addonOpsBaseRequest,omitempty"`
	Config              map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddonConfigUpdateRequest) Reset() {
	*x = AddonConfigUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonConfigUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonConfigUpdateRequest) ProtoMessage() {}

func (x *AddonConfigUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonConfigUpdateRequest.ProtoReflect.Descriptor instead.
func (*AddonConfigUpdateRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{5}
}

func (x *AddonConfigUpdateRequest) GetAddonOpsBaseRequest() *structpb.Value {
	if x != nil {
		return x.AddonOpsBaseRequest
	}
	return nil
}

func (x *AddonConfigUpdateRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type AddonConfigUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   *structpb.Value `protobuf:"bytes,2,opt,name=error,json=err,proto3" json:"error,omitempty"`
}

func (x *AddonConfigUpdateResponse) Reset() {
	*x = AddonConfigUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonConfigUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonConfigUpdateResponse) ProtoMessage() {}

func (x *AddonConfigUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonConfigUpdateResponse.ProtoReflect.Descriptor instead.
func (*AddonConfigUpdateResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{6}
}

func (x *AddonConfigUpdateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddonConfigUpdateResponse) GetError() *structpb.Value {
	if x != nil {
		return x.Error
	}
	return nil
}

type AddonOpsBaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ProjectID   string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	AddonID     string `protobuf:"bytes,4,opt,name=addonID,proto3" json:"addonID,omitempty"`
	AddonName   string `protobuf:"bytes,5,opt,name=addonName,proto3" json:"addonName,omitempty"`
}

func (x *AddonOpsBaseRequest) Reset() {
	*x = AddonOpsBaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonOpsBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonOpsBaseRequest) ProtoMessage() {}

func (x *AddonOpsBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonOpsBaseRequest.ProtoReflect.Descriptor instead.
func (*AddonOpsBaseRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{7}
}

func (x *AddonOpsBaseRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AddonOpsBaseRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *AddonOpsBaseRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *AddonOpsBaseRequest) GetAddonID() string {
	if x != nil {
		return x.AddonID
	}
	return ""
}

func (x *AddonOpsBaseRequest) GetAddonName() string {
	if x != nil {
		return x.AddonName
	}
	return ""
}

type AddonScaleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonOpsBaseRequest *structpb.Value `protobuf:"bytes,1,opt,name=addonOpsBaseRequest,proto3" json:"addonOpsBaseRequest,omitempty"`
	CPU                 float64         `protobuf:"fixed64,2,opt,name=cPU,json=cpu,proto3" json:"cPU,omitempty"`
	Mem                 uint64          `protobuf:"varint,3,opt,name=mem,proto3" json:"mem,omitempty"`
	Nodes               int64           `protobuf:"varint,4,opt,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *AddonScaleRequest) Reset() {
	*x = AddonScaleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonScaleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonScaleRequest) ProtoMessage() {}

func (x *AddonScaleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonScaleRequest.ProtoReflect.Descriptor instead.
func (*AddonScaleRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{8}
}

func (x *AddonScaleRequest) GetAddonOpsBaseRequest() *structpb.Value {
	if x != nil {
		return x.AddonOpsBaseRequest
	}
	return nil
}

func (x *AddonScaleRequest) GetCPU() float64 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *AddonScaleRequest) GetMem() uint64 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *AddonScaleRequest) GetNodes() int64 {
	if x != nil {
		return x.Nodes
	}
	return 0
}

type AddonScaleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   *structpb.Value `protobuf:"bytes,2,opt,name=error,json=err,proto3" json:"error,omitempty"`
}

func (x *AddonScaleResponse) Reset() {
	*x = AddonScaleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonScaleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonScaleResponse) ProtoMessage() {}

func (x *AddonScaleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonScaleResponse.ProtoReflect.Descriptor instead.
func (*AddonScaleResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{9}
}

func (x *AddonScaleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddonScaleResponse) GetError() *structpb.Value {
	if x != nil {
		return x.Error
	}
	return nil
}

type ApiGatewayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string `protobuf:"bytes,1,opt,name=ID,json=instanceID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ApiGatewayInfo) Reset() {
	*x = ApiGatewayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiGatewayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiGatewayInfo) ProtoMessage() {}

func (x *ApiGatewayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiGatewayInfo.ProtoReflect.Descriptor instead.
func (*ApiGatewayInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{10}
}

func (x *ApiGatewayInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ApiGatewayInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AutoRenewCloudResourceEcsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor      string   `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region      string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	InstanceIds []string `protobuf:"bytes,3,rep,name=instanceIds,proto3" json:"instanceIds,omitempty"`
	Duration    int64    `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Switch      bool     `protobuf:"varint,5,opt,name=switch,proto3" json:"switch,omitempty"`
}

func (x *AutoRenewCloudResourceEcsRequest) Reset() {
	*x = AutoRenewCloudResourceEcsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoRenewCloudResourceEcsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoRenewCloudResourceEcsRequest) ProtoMessage() {}

func (x *AutoRenewCloudResourceEcsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoRenewCloudResourceEcsRequest.ProtoReflect.Descriptor instead.
func (*AutoRenewCloudResourceEcsRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{11}
}

func (x *AutoRenewCloudResourceEcsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *AutoRenewCloudResourceEcsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AutoRenewCloudResourceEcsRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *AutoRenewCloudResourceEcsRequest) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AutoRenewCloudResourceEcsRequest) GetSwitch() bool {
	if x != nil {
		return x.Switch
	}
	return false
}

type BatchUpgradeEdgeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*structpb.Value `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *BatchUpgradeEdgeClusterRequest) Reset() {
	*x = BatchUpgradeEdgeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpgradeEdgeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpgradeEdgeClusterRequest) ProtoMessage() {}

func (x *BatchUpgradeEdgeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpgradeEdgeClusterRequest.ProtoReflect.Descriptor instead.
func (*BatchUpgradeEdgeClusterRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{12}
}

func (x *BatchUpgradeEdgeClusterRequest) GetClusters() []*structpb.Value {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type BatchUpgradeEdgeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchUpgradeEdgeClusterResponse) Reset() {
	*x = BatchUpgradeEdgeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpgradeEdgeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpgradeEdgeClusterResponse) ProtoMessage() {}

func (x *BatchUpgradeEdgeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpgradeEdgeClusterResponse.ProtoReflect.Descriptor instead.
func (*BatchUpgradeEdgeClusterResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{13}
}

type CMP_ALERT_CONDITIONS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_ALERT_CONDITIONS_Request) Reset() {
	*x = CMP_ALERT_CONDITIONS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_ALERT_CONDITIONS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_ALERT_CONDITIONS_Request) ProtoMessage() {}

func (x *CMP_ALERT_CONDITIONS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_ALERT_CONDITIONS_Request.ProtoReflect.Descriptor instead.
func (*CMP_ALERT_CONDITIONS_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{14}
}

type CMP_ALERT_CONDITIONS_VALUE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_ALERT_CONDITIONS_VALUE_Request) Reset() {
	*x = CMP_ALERT_CONDITIONS_VALUE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_ALERT_CONDITIONS_VALUE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_ALERT_CONDITIONS_VALUE_Request) ProtoMessage() {}

func (x *CMP_ALERT_CONDITIONS_VALUE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_ALERT_CONDITIONS_VALUE_Request.ProtoReflect.Descriptor instead.
func (*CMP_ALERT_CONDITIONS_VALUE_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{15}
}

type CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request) Reset() {
	*x = CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request) ProtoMessage() {}

func (x *CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request.ProtoReflect.Descriptor instead.
func (*CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{16}
}

type CMP_CLOUD_RESOURCE_ECS_TREND_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_CLOUD_RESOURCE_ECS_TREND_Request) Reset() {
	*x = CMP_CLOUD_RESOURCE_ECS_TREND_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_CLOUD_RESOURCE_ECS_TREND_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_CLOUD_RESOURCE_ECS_TREND_Request) ProtoMessage() {}

func (x *CMP_CLOUD_RESOURCE_ECS_TREND_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_CLOUD_RESOURCE_ECS_TREND_Request.ProtoReflect.Descriptor instead.
func (*CMP_CLOUD_RESOURCE_ECS_TREND_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{17}
}

type CMP_CLOUD_RESOURCE_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_CLOUD_RESOURCE_LIST_Request) Reset() {
	*x = CMP_CLOUD_RESOURCE_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_CLOUD_RESOURCE_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_CLOUD_RESOURCE_LIST_Request) ProtoMessage() {}

func (x *CMP_CLOUD_RESOURCE_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_CLOUD_RESOURCE_LIST_Request.ProtoReflect.Descriptor instead.
func (*CMP_CLOUD_RESOURCE_LIST_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{18}
}

type CMP_CLOUD_RESOURCE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_CLOUD_RESOURCE_Request) Reset() {
	*x = CMP_CLOUD_RESOURCE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_CLOUD_RESOURCE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_CLOUD_RESOURCE_Request) ProtoMessage() {}

func (x *CMP_CLOUD_RESOURCE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_CLOUD_RESOURCE_Request.ProtoReflect.Descriptor instead.
func (*CMP_CLOUD_RESOURCE_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{19}
}

type CMP_CLUSTER_IMPORT_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_CLUSTER_IMPORT_Request) Reset() {
	*x = CMP_CLUSTER_IMPORT_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_CLUSTER_IMPORT_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_CLUSTER_IMPORT_Request) ProtoMessage() {}

func (x *CMP_CLUSTER_IMPORT_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_CLUSTER_IMPORT_Request.ProtoReflect.Descriptor instead.
func (*CMP_CLUSTER_IMPORT_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{20}
}

type CMP_CLUSTER_INFO_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_CLUSTER_INFO_Request) Reset() {
	*x = CMP_CLUSTER_INFO_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_CLUSTER_INFO_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_CLUSTER_INFO_Request) ProtoMessage() {}

func (x *CMP_CLUSTER_INFO_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_CLUSTER_INFO_Request.ProtoReflect.Descriptor instead.
func (*CMP_CLUSTER_INFO_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{21}
}

type CMP_CLUSTER_INIT_COMMAND_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_CLUSTER_INIT_COMMAND_Request) Reset() {
	*x = CMP_CLUSTER_INIT_COMMAND_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_CLUSTER_INIT_COMMAND_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_CLUSTER_INIT_COMMAND_Request) ProtoMessage() {}

func (x *CMP_CLUSTER_INIT_COMMAND_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_CLUSTER_INIT_COMMAND_Request.ProtoReflect.Descriptor instead.
func (*CMP_CLUSTER_INIT_COMMAND_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{22}
}

type CMP_CLUSTER_INIT_RETRY_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_CLUSTER_INIT_RETRY_Request) Reset() {
	*x = CMP_CLUSTER_INIT_RETRY_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_CLUSTER_INIT_RETRY_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_CLUSTER_INIT_RETRY_Request) ProtoMessage() {}

func (x *CMP_CLUSTER_INIT_RETRY_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_CLUSTER_INIT_RETRY_Request.ProtoReflect.Descriptor instead.
func (*CMP_CLUSTER_INIT_RETRY_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{23}
}

type CMP_CLUSTER_PREVIEW_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_CLUSTER_PREVIEW_Request) Reset() {
	*x = CMP_CLUSTER_PREVIEW_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_CLUSTER_PREVIEW_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_CLUSTER_PREVIEW_Request) ProtoMessage() {}

func (x *CMP_CLUSTER_PREVIEW_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_CLUSTER_PREVIEW_Request.ProtoReflect.Descriptor instead.
func (*CMP_CLUSTER_PREVIEW_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{24}
}

type CMP_CREDENTIAL_ACCESSKEY_CREATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_CREDENTIAL_ACCESSKEY_CREATE_Request) Reset() {
	*x = CMP_CREDENTIAL_ACCESSKEY_CREATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_CREDENTIAL_ACCESSKEY_CREATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_CREDENTIAL_ACCESSKEY_CREATE_Request) ProtoMessage() {}

func (x *CMP_CREDENTIAL_ACCESSKEY_CREATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_CREDENTIAL_ACCESSKEY_CREATE_Request.ProtoReflect.Descriptor instead.
func (*CMP_CREDENTIAL_ACCESSKEY_CREATE_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{25}
}

type CMP_CREDENTIAL_ACCESSKEY_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_CREDENTIAL_ACCESSKEY_GET_Request) Reset() {
	*x = CMP_CREDENTIAL_ACCESSKEY_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_CREDENTIAL_ACCESSKEY_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_CREDENTIAL_ACCESSKEY_GET_Request) ProtoMessage() {}

func (x *CMP_CREDENTIAL_ACCESSKEY_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_CREDENTIAL_ACCESSKEY_GET_Request.ProtoReflect.Descriptor instead.
func (*CMP_CREDENTIAL_ACCESSKEY_GET_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{26}
}

type CMP_CREDENTIAL_ACCESSKEY_RESET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_CREDENTIAL_ACCESSKEY_RESET_Request) Reset() {
	*x = CMP_CREDENTIAL_ACCESSKEY_RESET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_CREDENTIAL_ACCESSKEY_RESET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_CREDENTIAL_ACCESSKEY_RESET_Request) ProtoMessage() {}

func (x *CMP_CREDENTIAL_ACCESSKEY_RESET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_CREDENTIAL_ACCESSKEY_RESET_Request.ProtoReflect.Descriptor instead.
func (*CMP_CREDENTIAL_ACCESSKEY_RESET_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{27}
}

type CMP_K8S_CLUSTERS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_K8S_CLUSTERS_Request) Reset() {
	*x = CMP_K8S_CLUSTERS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_K8S_CLUSTERS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_K8S_CLUSTERS_Request) ProtoMessage() {}

func (x *CMP_K8S_CLUSTERS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_K8S_CLUSTERS_Request.ProtoReflect.Descriptor instead.
func (*CMP_K8S_CLUSTERS_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{28}
}

type CMP_NODE_LABELS_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_NODE_LABELS_LIST_Request) Reset() {
	*x = CMP_NODE_LABELS_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_NODE_LABELS_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_NODE_LABELS_LIST_Request) ProtoMessage() {}

func (x *CMP_NODE_LABELS_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_NODE_LABELS_LIST_Request.ProtoReflect.Descriptor instead.
func (*CMP_NODE_LABELS_LIST_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{29}
}

type CMP_NODE_LOGS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_NODE_LOGS_Request) Reset() {
	*x = CMP_NODE_LOGS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_NODE_LOGS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_NODE_LOGS_Request) ProtoMessage() {}

func (x *CMP_NODE_LOGS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_NODE_LOGS_Request.ProtoReflect.Descriptor instead.
func (*CMP_NODE_LOGS_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{30}
}

type CMP_RECORDS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_RECORDS_Request) Reset() {
	*x = CMP_RECORDS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_RECORDS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_RECORDS_Request) ProtoMessage() {}

func (x *CMP_RECORDS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_RECORDS_Request.ProtoReflect.Descriptor instead.
func (*CMP_RECORDS_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{31}
}

type CMP_RECORDTYPES_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_RECORDTYPES_Request) Reset() {
	*x = CMP_RECORDTYPES_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_RECORDTYPES_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_RECORDTYPES_Request) ProtoMessage() {}

func (x *CMP_RECORDTYPES_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_RECORDTYPES_Request.ProtoReflect.Descriptor instead.
func (*CMP_RECORDTYPES_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{32}
}

type CMP_RESOURCE_OVERVIEW_CLASS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_RESOURCE_OVERVIEW_CLASS_Request) Reset() {
	*x = CMP_RESOURCE_OVERVIEW_CLASS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_RESOURCE_OVERVIEW_CLASS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_RESOURCE_OVERVIEW_CLASS_Request) ProtoMessage() {}

func (x *CMP_RESOURCE_OVERVIEW_CLASS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_RESOURCE_OVERVIEW_CLASS_Request.ProtoReflect.Descriptor instead.
func (*CMP_RESOURCE_OVERVIEW_CLASS_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{33}
}

type CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request) Reset() {
	*x = CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request) ProtoMessage() {}

func (x *CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request.ProtoReflect.Descriptor instead.
func (*CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{34}
}

type CMP_RESOURCE_OVERVIEW_GAUGE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_RESOURCE_OVERVIEW_GAUGE_Request) Reset() {
	*x = CMP_RESOURCE_OVERVIEW_GAUGE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_RESOURCE_OVERVIEW_GAUGE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_RESOURCE_OVERVIEW_GAUGE_Request) ProtoMessage() {}

func (x *CMP_RESOURCE_OVERVIEW_GAUGE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_RESOURCE_OVERVIEW_GAUGE_Request.ProtoReflect.Descriptor instead.
func (*CMP_RESOURCE_OVERVIEW_GAUGE_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{35}
}

type CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request) Reset() {
	*x = CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request) ProtoMessage() {}

func (x *CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request.ProtoReflect.Descriptor instead.
func (*CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{36}
}

type CMP_RESOURCE_OVERVIEW_REPORT_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_RESOURCE_OVERVIEW_REPORT_Request) Reset() {
	*x = CMP_RESOURCE_OVERVIEW_REPORT_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_RESOURCE_OVERVIEW_REPORT_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_RESOURCE_OVERVIEW_REPORT_Request) ProtoMessage() {}

func (x *CMP_RESOURCE_OVERVIEW_REPORT_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_RESOURCE_OVERVIEW_REPORT_Request.ProtoReflect.Descriptor instead.
func (*CMP_RESOURCE_OVERVIEW_REPORT_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{37}
}

type CMP_STEVE_CREATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_STEVE_CREATE_Request) Reset() {
	*x = CMP_STEVE_CREATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_STEVE_CREATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_STEVE_CREATE_Request) ProtoMessage() {}

func (x *CMP_STEVE_CREATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_STEVE_CREATE_Request.ProtoReflect.Descriptor instead.
func (*CMP_STEVE_CREATE_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{38}
}

type CMP_STEVE_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_STEVE_DELETE_Request) Reset() {
	*x = CMP_STEVE_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_STEVE_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_STEVE_DELETE_Request) ProtoMessage() {}

func (x *CMP_STEVE_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_STEVE_DELETE_Request.ProtoReflect.Descriptor instead.
func (*CMP_STEVE_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{39}
}

type CMP_STEVE_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_STEVE_GET_Request) Reset() {
	*x = CMP_STEVE_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_STEVE_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_STEVE_GET_Request) ProtoMessage() {}

func (x *CMP_STEVE_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_STEVE_GET_Request.ProtoReflect.Descriptor instead.
func (*CMP_STEVE_GET_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{40}
}

type CMP_STEVE_PATCH_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_STEVE_PATCH_Request) Reset() {
	*x = CMP_STEVE_PATCH_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_STEVE_PATCH_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_STEVE_PATCH_Request) ProtoMessage() {}

func (x *CMP_STEVE_PATCH_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_STEVE_PATCH_Request.ProtoReflect.Descriptor instead.
func (*CMP_STEVE_PATCH_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{41}
}

type CMP_STEVE_UPDATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_STEVE_UPDATE_Request) Reset() {
	*x = CMP_STEVE_UPDATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_STEVE_UPDATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_STEVE_UPDATE_Request) ProtoMessage() {}

func (x *CMP_STEVE_UPDATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_STEVE_UPDATE_Request.ProtoReflect.Descriptor instead.
func (*CMP_STEVE_UPDATE_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{42}
}

type CMP_STEVE_WS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMP_STEVE_WS_Request) Reset() {
	*x = CMP_STEVE_WS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMP_STEVE_WS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMP_STEVE_WS_Request) ProtoMessage() {}

func (x *CMP_STEVE_WS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMP_STEVE_WS_Request.ProtoReflect.Descriptor instead.
func (*CMP_STEVE_WS_Request) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{43}
}

type CloudAddonResourceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	RecordID   string `protobuf:"bytes,2,opt,name=recordID,proto3" json:"recordID,omitempty"`
	ProjectID  string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	AddonID    string `protobuf:"bytes,4,opt,name=addonID,proto3" json:"addonID,omitempty"`
	InstanceID string `protobuf:"bytes,5,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Vendor     string `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region     string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *CloudAddonResourceDeleteRequest) Reset() {
	*x = CloudAddonResourceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAddonResourceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAddonResourceDeleteRequest) ProtoMessage() {}

func (x *CloudAddonResourceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAddonResourceDeleteRequest.ProtoReflect.Descriptor instead.
func (*CloudAddonResourceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{44}
}

func (x *CloudAddonResourceDeleteRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CloudAddonResourceDeleteRequest) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *CloudAddonResourceDeleteRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CloudAddonResourceDeleteRequest) GetAddonID() string {
	if x != nil {
		return x.AddonID
	}
	return ""
}

func (x *CloudAddonResourceDeleteRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *CloudAddonResourceDeleteRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CloudAddonResourceDeleteRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type CloudAddonResourceDeleteRespnse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloudAddonResourceDeleteRespnse) Reset() {
	*x = CloudAddonResourceDeleteRespnse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAddonResourceDeleteRespnse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAddonResourceDeleteRespnse) ProtoMessage() {}

func (x *CloudAddonResourceDeleteRespnse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAddonResourceDeleteRespnse.ProtoReflect.Descriptor instead.
func (*CloudAddonResourceDeleteRespnse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{45}
}

type CloudClusterContainerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DockerRoot  string `protobuf:"bytes,1,opt,name=dockerRoot,proto3" json:"dockerRoot,omitempty"`
	ExecRoot    string `protobuf:"bytes,2,opt,name=execRoot,proto3" json:"execRoot,omitempty"`
	ServiceCIDR string `protobuf:"bytes,3,opt,name=serviceCIDR,proto3" json:"serviceCIDR,omitempty"`
	PodCIDR     string `protobuf:"bytes,4,opt,name=podCIDR,proto3" json:"podCIDR,omitempty"`
	DockerCIDR  string `protobuf:"bytes,5,opt,name=dockerCIDR,proto3" json:"dockerCIDR,omitempty"`
	DockerBip   string `protobuf:"bytes,6,opt,name=dockerBip,proto3" json:"dockerBip,omitempty"`
}

func (x *CloudClusterContainerInfo) Reset() {
	*x = CloudClusterContainerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudClusterContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudClusterContainerInfo) ProtoMessage() {}

func (x *CloudClusterContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudClusterContainerInfo.ProtoReflect.Descriptor instead.
func (*CloudClusterContainerInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{46}
}

func (x *CloudClusterContainerInfo) GetDockerRoot() string {
	if x != nil {
		return x.DockerRoot
	}
	return ""
}

func (x *CloudClusterContainerInfo) GetExecRoot() string {
	if x != nil {
		return x.ExecRoot
	}
	return ""
}

func (x *CloudClusterContainerInfo) GetServiceCIDR() string {
	if x != nil {
		return x.ServiceCIDR
	}
	return ""
}

func (x *CloudClusterContainerInfo) GetPodCIDR() string {
	if x != nil {
		return x.PodCIDR
	}
	return ""
}

func (x *CloudClusterContainerInfo) GetDockerCIDR() string {
	if x != nil {
		return x.DockerCIDR
	}
	return ""
}

func (x *CloudClusterContainerInfo) GetDockerBip() string {
	if x != nil {
		return x.DockerBip
	}
	return ""
}

type CloudClusterGlusterfs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlusterfsIps string `protobuf:"bytes,1,opt,name=glusterfsIps,proto3" json:"glusterfsIps,omitempty"`
}

func (x *CloudClusterGlusterfs) Reset() {
	*x = CloudClusterGlusterfs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudClusterGlusterfs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudClusterGlusterfs) ProtoMessage() {}

func (x *CloudClusterGlusterfs) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudClusterGlusterfs.ProtoReflect.Descriptor instead.
func (*CloudClusterGlusterfs) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{47}
}

func (x *CloudClusterGlusterfs) GetGlusterfsIps() string {
	if x != nil {
		return x.GlusterfsIps
	}
	return ""
}

type CloudClusterHostsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIps  string `protobuf:"bytes,1,opt,name=hostIps,proto3" json:"hostIps,omitempty"`
	Device   string `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	DataPath string `protobuf:"bytes,3,opt,name=dataPath,proto3" json:"dataPath,omitempty"`
}

func (x *CloudClusterHostsInfo) Reset() {
	*x = CloudClusterHostsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudClusterHostsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudClusterHostsInfo) ProtoMessage() {}

func (x *CloudClusterHostsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudClusterHostsInfo.ProtoReflect.Descriptor instead.
func (*CloudClusterHostsInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{48}
}

func (x *CloudClusterHostsInfo) GetHostIps() string {
	if x != nil {
		return x.HostIps
	}
	return ""
}

func (x *CloudClusterHostsInfo) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *CloudClusterHostsInfo) GetDataPath() string {
	if x != nil {
		return x.DataPath
	}
	return ""
}

type CloudClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName      string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ClusterAccessKey string `protobuf:"bytes,2,opt,name=clusterAccessKey,proto3" json:"clusterAccessKey,omitempty"`
	DisplayName      string `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	RootDomain       string `protobuf:"bytes,4,opt,name=rootDomain,proto3" json:"rootDomain,omitempty"`
	EnableHttps      bool   `protobuf:"varint,5,opt,name=enableHttps,proto3" json:"enableHttps,omitempty"`
	ClusterSize      string `protobuf:"bytes,6,opt,name=clusterSize,proto3" json:"clusterSize,omitempty"`
	Nameservers      string `protobuf:"bytes,7,opt,name=nameservers,proto3" json:"nameservers,omitempty"`
	CollectorURL     string `protobuf:"bytes,8,opt,name=collectorURL,proto3" json:"collectorURL,omitempty"`
	OpenAPI          string `protobuf:"bytes,9,opt,name=openAPI,json=openapi,proto3" json:"openAPI,omitempty"`
	ClusterDialer    string `protobuf:"bytes,10,opt,name=clusterDialer,proto3" json:"clusterDialer,omitempty"`
}

func (x *CloudClusterInfo) Reset() {
	*x = CloudClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudClusterInfo) ProtoMessage() {}

func (x *CloudClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudClusterInfo.ProtoReflect.Descriptor instead.
func (*CloudClusterInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{49}
}

func (x *CloudClusterInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CloudClusterInfo) GetClusterAccessKey() string {
	if x != nil {
		return x.ClusterAccessKey
	}
	return ""
}

func (x *CloudClusterInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CloudClusterInfo) GetRootDomain() string {
	if x != nil {
		return x.RootDomain
	}
	return ""
}

func (x *CloudClusterInfo) GetEnableHttps() bool {
	if x != nil {
		return x.EnableHttps
	}
	return false
}

func (x *CloudClusterInfo) GetClusterSize() string {
	if x != nil {
		return x.ClusterSize
	}
	return ""
}

func (x *CloudClusterInfo) GetNameservers() string {
	if x != nil {
		return x.Nameservers
	}
	return ""
}

func (x *CloudClusterInfo) GetCollectorURL() string {
	if x != nil {
		return x.CollectorURL
	}
	return ""
}

func (x *CloudClusterInfo) GetOpenAPI() string {
	if x != nil {
		return x.OpenAPI
	}
	return ""
}

func (x *CloudClusterInfo) GetClusterDialer() string {
	if x != nil {
		return x.ClusterDialer
	}
	return ""
}

type CloudClusterInstaller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstallerIp string `protobuf:"bytes,1,opt,name=installerIp,proto3" json:"installerIp,omitempty"`
	User        string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Password    string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Port        string `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *CloudClusterInstaller) Reset() {
	*x = CloudClusterInstaller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudClusterInstaller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudClusterInstaller) ProtoMessage() {}

func (x *CloudClusterInstaller) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudClusterInstaller.ProtoReflect.Descriptor instead.
func (*CloudClusterInstaller) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{50}
}

func (x *CloudClusterInstaller) GetInstallerIp() string {
	if x != nil {
		return x.InstallerIp
	}
	return ""
}

func (x *CloudClusterInstaller) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CloudClusterInstaller) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CloudClusterInstaller) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type CloudClusterNas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NasDomain string `protobuf:"bytes,1,opt,name=nasDomain,proto3" json:"nasDomain,omitempty"`
	NasPath   string `protobuf:"bytes,2,opt,name=nasPath,proto3" json:"nasPath,omitempty"`
}

func (x *CloudClusterNas) Reset() {
	*x = CloudClusterNas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudClusterNas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudClusterNas) ProtoMessage() {}

func (x *CloudClusterNas) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudClusterNas.ProtoReflect.Descriptor instead.
func (*CloudClusterNas) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{51}
}

func (x *CloudClusterNas) GetNasDomain() string {
	if x != nil {
		return x.NasDomain
	}
	return ""
}

func (x *CloudClusterNas) GetNasPath() string {
	if x != nil {
		return x.NasPath
	}
	return ""
}

type CloudClusterNewCreateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudVendor     string `protobuf:"bytes,1,opt,name=cloudVendor,proto3" json:"cloudVendor,omitempty"`
	CloudVendorName string `protobuf:"bytes,2,opt,name=cloudVendorName,proto3" json:"cloudVendorName,omitempty"`
	CloudBasicRsc   string `protobuf:"bytes,3,opt,name=cloudBasicRsc,proto3" json:"cloudBasicRsc,omitempty"`
	Region          string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	ClusterType     string `protobuf:"bytes,5,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	ClusterSpec     string `protobuf:"bytes,6,opt,name=clusterSpec,proto3" json:"clusterSpec,omitempty"`
	ChargeType      string `protobuf:"bytes,7,opt,name=chargeType,proto3" json:"chargeType,omitempty"`
	ChargePeriod    int64  `protobuf:"varint,8,opt,name=chargePeriod,proto3" json:"chargePeriod,omitempty"`
	AppNodeNum      int64  `protobuf:"varint,9,opt,name=appNodeNum,proto3" json:"appNodeNum,omitempty"`
	AccessKey       string `protobuf:"bytes,10,opt,name=accessKey,proto3" json:"accessKey,omitempty"`
	SecretKey       string `protobuf:"bytes,11,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
	VpcID           string `protobuf:"bytes,12,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	VpcCIDR         string `protobuf:"bytes,13,opt,name=vpcCIDR,proto3" json:"vpcCIDR,omitempty"`
	VSwitchID       string `protobuf:"bytes,14,opt,name=vSwitchID,proto3" json:"vSwitchID,omitempty"`
	VSwitchCIDR     string `protobuf:"bytes,15,opt,name=vSwitchCIDR,proto3" json:"vSwitchCIDR,omitempty"`
	NatGatewayID    string `protobuf:"bytes,16,opt,name=natGatewayID,proto3" json:"natGatewayID,omitempty"`
	ForwardTableID  string `protobuf:"bytes,17,opt,name=forwardTableID,proto3" json:"forwardTableID,omitempty"`
	SnatTableID     string `protobuf:"bytes,18,opt,name=snatTableID,proto3" json:"snatTableID,omitempty"`
	K8SVersion      string `protobuf:"bytes,19,opt,name=k8sVersion,proto3" json:"k8sVersion,omitempty"`
	EcsInstType     string `protobuf:"bytes,20,opt,name=ecsInstType,proto3" json:"ecsInstType,omitempty"`
	Terraform       string `protobuf:"bytes,21,opt,name=terraform,proto3" json:"terraform,omitempty"`
}

func (x *CloudClusterNewCreateInfo) Reset() {
	*x = CloudClusterNewCreateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudClusterNewCreateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudClusterNewCreateInfo) ProtoMessage() {}

func (x *CloudClusterNewCreateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudClusterNewCreateInfo.ProtoReflect.Descriptor instead.
func (*CloudClusterNewCreateInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{52}
}

func (x *CloudClusterNewCreateInfo) GetCloudVendor() string {
	if x != nil {
		return x.CloudVendor
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetCloudVendorName() string {
	if x != nil {
		return x.CloudVendorName
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetCloudBasicRsc() string {
	if x != nil {
		return x.CloudBasicRsc
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetClusterSpec() string {
	if x != nil {
		return x.ClusterSpec
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetChargeType() string {
	if x != nil {
		return x.ChargeType
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetChargePeriod() int64 {
	if x != nil {
		return x.ChargePeriod
	}
	return 0
}

func (x *CloudClusterNewCreateInfo) GetAppNodeNum() int64 {
	if x != nil {
		return x.AppNodeNum
	}
	return 0
}

func (x *CloudClusterNewCreateInfo) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetVpcCIDR() string {
	if x != nil {
		return x.VpcCIDR
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetVSwitchID() string {
	if x != nil {
		return x.VSwitchID
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetVSwitchCIDR() string {
	if x != nil {
		return x.VSwitchCIDR
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetNatGatewayID() string {
	if x != nil {
		return x.NatGatewayID
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetForwardTableID() string {
	if x != nil {
		return x.ForwardTableID
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetSnatTableID() string {
	if x != nil {
		return x.SnatTableID
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetK8SVersion() string {
	if x != nil {
		return x.K8SVersion
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetEcsInstType() string {
	if x != nil {
		return x.EcsInstType
	}
	return ""
}

func (x *CloudClusterNewCreateInfo) GetTerraform() string {
	if x != nil {
		return x.Terraform
	}
	return ""
}

type CloudClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID                     uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName                   string          `protobuf:"bytes,2,opt,name=orgName,proto3" json:"orgName,omitempty"`
	DiceVersion               string          `protobuf:"bytes,3,opt,name=diceVersion,proto3" json:"diceVersion,omitempty"`
	CentralClusterName        string          `protobuf:"bytes,4,opt,name=centralClusterName,proto3" json:"centralClusterName,omitempty"`
	CentralRootDomain         string          `protobuf:"bytes,5,opt,name=centralRootDomain,proto3" json:"centralRootDomain,omitempty"`
	CentralDiceProtocol       string          `protobuf:"bytes,6,opt,name=centralDiceProtocol,proto3" json:"centralDiceProtocol,omitempty"`
	CloudClusterInfo          *structpb.Value `protobuf:"bytes,7,opt,name=cloudClusterInfo,proto3" json:"cloudClusterInfo,omitempty"`
	CloudClusterContainerInfo *structpb.Value `protobuf:"bytes,8,opt,name=cloudClusterContainerInfo,proto3" json:"cloudClusterContainerInfo,omitempty"`
	CloudClusterNewCreateInfo *structpb.Value `protobuf:"bytes,9,opt,name=cloudClusterNewCreateInfo,proto3" json:"cloudClusterNewCreateInfo,omitempty"`
	CloudClusterInstaller     *structpb.Value `protobuf:"bytes,10,opt,name=cloudClusterInstaller,proto3" json:"cloudClusterInstaller,omitempty"`
	CloudClusterNas           *structpb.Value `protobuf:"bytes,11,opt,name=cloudClusterNas,proto3" json:"cloudClusterNas,omitempty"`
	CloudClusterGlusterfs     *structpb.Value `protobuf:"bytes,12,opt,name=cloudClusterGlusterfs,proto3" json:"cloudClusterGlusterfs,omitempty"`
	CloudClusterHostsInfo     *structpb.Value `protobuf:"bytes,13,opt,name=cloudClusterHostsInfo,proto3" json:"cloudClusterHostsInfo,omitempty"`
}

func (x *CloudClusterRequest) Reset() {
	*x = CloudClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudClusterRequest) ProtoMessage() {}

func (x *CloudClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudClusterRequest.ProtoReflect.Descriptor instead.
func (*CloudClusterRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{53}
}

func (x *CloudClusterRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CloudClusterRequest) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *CloudClusterRequest) GetDiceVersion() string {
	if x != nil {
		return x.DiceVersion
	}
	return ""
}

func (x *CloudClusterRequest) GetCentralClusterName() string {
	if x != nil {
		return x.CentralClusterName
	}
	return ""
}

func (x *CloudClusterRequest) GetCentralRootDomain() string {
	if x != nil {
		return x.CentralRootDomain
	}
	return ""
}

func (x *CloudClusterRequest) GetCentralDiceProtocol() string {
	if x != nil {
		return x.CentralDiceProtocol
	}
	return ""
}

func (x *CloudClusterRequest) GetCloudClusterInfo() *structpb.Value {
	if x != nil {
		return x.CloudClusterInfo
	}
	return nil
}

func (x *CloudClusterRequest) GetCloudClusterContainerInfo() *structpb.Value {
	if x != nil {
		return x.CloudClusterContainerInfo
	}
	return nil
}

func (x *CloudClusterRequest) GetCloudClusterNewCreateInfo() *structpb.Value {
	if x != nil {
		return x.CloudClusterNewCreateInfo
	}
	return nil
}

func (x *CloudClusterRequest) GetCloudClusterInstaller() *structpb.Value {
	if x != nil {
		return x.CloudClusterInstaller
	}
	return nil
}

func (x *CloudClusterRequest) GetCloudClusterNas() *structpb.Value {
	if x != nil {
		return x.CloudClusterNas
	}
	return nil
}

func (x *CloudClusterRequest) GetCloudClusterGlusterfs() *structpb.Value {
	if x != nil {
		return x.CloudClusterGlusterfs
	}
	return nil
}

func (x *CloudClusterRequest) GetCloudClusterHostsInfo() *structpb.Value {
	if x != nil {
		return x.CloudClusterHostsInfo
	}
	return nil
}

type CloudClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CloudClusterResponse) Reset() {
	*x = CloudClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudClusterResponse) ProtoMessage() {}

func (x *CloudClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudClusterResponse.ProtoReflect.Descriptor instead.
func (*CloudClusterResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{54}
}

func (x *CloudClusterResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName      string   `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	OrgID            uint64   `protobuf:"varint,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
	CloudVendor      string   `protobuf:"bytes,3,opt,name=cloudVendor,proto3" json:"cloudVendor,omitempty"`
	AvailabilityZone string   `protobuf:"bytes,4,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	Region           string   `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	ChargeType       string   `protobuf:"bytes,6,opt,name=chargeType,proto3" json:"chargeType,omitempty"`
	ChargePeriod     int64    `protobuf:"varint,7,opt,name=chargePeriod,proto3" json:"chargePeriod,omitempty"`
	AccessKey        string   `protobuf:"bytes,8,opt,name=accessKey,proto3" json:"accessKey,omitempty"`
	SecretKey        string   `protobuf:"bytes,9,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
	CloudResource    string   `protobuf:"bytes,10,opt,name=cloudResource,proto3" json:"cloudResource,omitempty"`
	InstancePassword string   `protobuf:"bytes,11,opt,name=instancePassword,proto3" json:"instancePassword,omitempty"`
	InstanceNum      int64    `protobuf:"varint,12,opt,name=instanceNum,proto3" json:"instanceNum,omitempty"`
	InstanceType     string   `protobuf:"bytes,13,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	DiskType         string   `protobuf:"bytes,14,opt,name=diskType,proto3" json:"diskType,omitempty"`
	DiskSize         int64    `protobuf:"varint,15,opt,name=diskSize,proto3" json:"diskSize,omitempty"`
	SecurityGroupIds []string `protobuf:"bytes,16,rep,name=securityGroupIds,proto3" json:"securityGroupIds,omitempty"`
	VSwitchId        string   `protobuf:"bytes,17,opt,name=vSwitchId,proto3" json:"vSwitchId,omitempty"`
	Labels           []string `protobuf:"bytes,18,rep,name=labels,proto3" json:"labels,omitempty"`
	Terraform        string   `protobuf:"bytes,19,opt,name=terraform,proto3" json:"terraform,omitempty"`
}

func (x *CloudNodesRequest) Reset() {
	*x = CloudNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudNodesRequest) ProtoMessage() {}

func (x *CloudNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudNodesRequest.ProtoReflect.Descriptor instead.
func (*CloudNodesRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{55}
}

func (x *CloudNodesRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CloudNodesRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CloudNodesRequest) GetCloudVendor() string {
	if x != nil {
		return x.CloudVendor
	}
	return ""
}

func (x *CloudNodesRequest) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *CloudNodesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudNodesRequest) GetChargeType() string {
	if x != nil {
		return x.ChargeType
	}
	return ""
}

func (x *CloudNodesRequest) GetChargePeriod() int64 {
	if x != nil {
		return x.ChargePeriod
	}
	return 0
}

func (x *CloudNodesRequest) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *CloudNodesRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *CloudNodesRequest) GetCloudResource() string {
	if x != nil {
		return x.CloudResource
	}
	return ""
}

func (x *CloudNodesRequest) GetInstancePassword() string {
	if x != nil {
		return x.InstancePassword
	}
	return ""
}

func (x *CloudNodesRequest) GetInstanceNum() int64 {
	if x != nil {
		return x.InstanceNum
	}
	return 0
}

func (x *CloudNodesRequest) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *CloudNodesRequest) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *CloudNodesRequest) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *CloudNodesRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *CloudNodesRequest) GetVSwitchId() string {
	if x != nil {
		return x.VSwitchId
	}
	return ""
}

func (x *CloudNodesRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CloudNodesRequest) GetTerraform() string {
	if x != nil {
		return x.Terraform
	}
	return ""
}

type CloudNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CloudNodesResponse) Reset() {
	*x = CloudNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudNodesResponse) ProtoMessage() {}

func (x *CloudNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudNodesResponse.ProtoReflect.Descriptor instead.
func (*CloudNodesResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{56}
}

func (x *CloudNodesResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudResourceDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string            `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Items []*structpb.Value `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CloudResourceDetailInfo) Reset() {
	*x = CloudResourceDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceDetailInfo) ProtoMessage() {}

func (x *CloudResourceDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceDetailInfo.ProtoReflect.Descriptor instead.
func (*CloudResourceDetailInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{57}
}

func (x *CloudResourceDetailInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CloudResourceDetailInfo) GetItems() []*structpb.Value {
	if x != nil {
		return x.Items
	}
	return nil
}

type CloudResourceDetailItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CloudResourceDetailItem) Reset() {
	*x = CloudResourceDetailItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceDetailItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceDetailItem) ProtoMessage() {}

func (x *CloudResourceDetailItem) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceDetailItem.ProtoReflect.Descriptor instead.
func (*CloudResourceDetailItem) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{58}
}

func (x *CloudResourceDetailItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudResourceDetailItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CloudResourceMysqlAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account          string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password         string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	AccountPrivilege string `protobuf:"bytes,3,opt,name=accountPrivilege,proto3" json:"accountPrivilege,omitempty"`
}

func (x *CloudResourceMysqlAccount) Reset() {
	*x = CloudResourceMysqlAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlAccount) ProtoMessage() {}

func (x *CloudResourceMysqlAccount) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlAccount.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlAccount) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{59}
}

func (x *CloudResourceMysqlAccount) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CloudResourceMysqlAccount) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CloudResourceMysqlAccount) GetAccountPrivilege() string {
	if x != nil {
		return x.AccountPrivilege
	}
	return ""
}

type CloudResourceMysqlAccountPrivileges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DBName           string `protobuf:"bytes,1,opt,name=dBName,proto3" json:"dBName,omitempty"`
	AccountPrivilege string `protobuf:"bytes,2,opt,name=accountPrivilege,proto3" json:"accountPrivilege,omitempty"`
}

func (x *CloudResourceMysqlAccountPrivileges) Reset() {
	*x = CloudResourceMysqlAccountPrivileges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlAccountPrivileges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlAccountPrivileges) ProtoMessage() {}

func (x *CloudResourceMysqlAccountPrivileges) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlAccountPrivileges.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlAccountPrivileges) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{60}
}

func (x *CloudResourceMysqlAccountPrivileges) GetDBName() string {
	if x != nil {
		return x.DBName
	}
	return ""
}

func (x *CloudResourceMysqlAccountPrivileges) GetAccountPrivilege() string {
	if x != nil {
		return x.AccountPrivilege
	}
	return ""
}

type CloudResourceMysqlBasicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string            `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Region     string            `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Category   string            `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Spec       string            `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	Version    string            `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Status     string            `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	ChargeType string            `protobuf:"bytes,8,opt,name=chargeType,proto3" json:"chargeType,omitempty"`
	CreateTime string            `protobuf:"bytes,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ExpireTime string            `protobuf:"bytes,10,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
	Tag        map[string]string `protobuf:"bytes,11,rep,name=tag,proto3" json:"tag,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CloudResourceMysqlBasicData) Reset() {
	*x = CloudResourceMysqlBasicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlBasicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlBasicData) ProtoMessage() {}

func (x *CloudResourceMysqlBasicData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlBasicData.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlBasicData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{61}
}

func (x *CloudResourceMysqlBasicData) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CloudResourceMysqlBasicData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudResourceMysqlBasicData) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudResourceMysqlBasicData) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *CloudResourceMysqlBasicData) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *CloudResourceMysqlBasicData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CloudResourceMysqlBasicData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CloudResourceMysqlBasicData) GetChargeType() string {
	if x != nil {
		return x.ChargeType
	}
	return ""
}

func (x *CloudResourceMysqlBasicData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CloudResourceMysqlBasicData) GetExpireTime() string {
	if x != nil {
		return x.ExpireTime
	}
	return ""
}

func (x *CloudResourceMysqlBasicData) GetTag() map[string]string {
	if x != nil {
		return x.Tag
	}
	return nil
}

type CloudResourceMysqlDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DBName   string            `protobuf:"bytes,1,opt,name=dBName,json=dbName,proto3" json:"dBName,omitempty"`
	AddonID  string            `protobuf:"bytes,2,opt,name=addonID,proto3" json:"addonID,omitempty"`
	Accounts []*structpb.Value `protobuf:"bytes,3,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *CloudResourceMysqlDB) Reset() {
	*x = CloudResourceMysqlDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlDB) ProtoMessage() {}

func (x *CloudResourceMysqlDB) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlDB.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlDB) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{62}
}

func (x *CloudResourceMysqlDB) GetDBName() string {
	if x != nil {
		return x.DBName
	}
	return ""
}

func (x *CloudResourceMysqlDB) GetAddonID() string {
	if x != nil {
		return x.AddonID
	}
	return ""
}

func (x *CloudResourceMysqlDB) GetAccounts() []*structpb.Value {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type CloudResourceMysqlDBInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	InstanceID string            `protobuf:"bytes,2,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	List       []*structpb.Value `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CloudResourceMysqlDBInfo) Reset() {
	*x = CloudResourceMysqlDBInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlDBInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlDBInfo) ProtoMessage() {}

func (x *CloudResourceMysqlDBInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlDBInfo.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlDBInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{63}
}

func (x *CloudResourceMysqlDBInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CloudResourceMysqlDBInfo) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *CloudResourceMysqlDBInfo) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type CloudResourceMysqlDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudResourceMysqlDetailInfoRequest *structpb.Value `protobuf:"bytes,1,opt,name=cloudResourceMysqlDetailInfoRequest,proto3" json:"cloudResourceMysqlDetailInfoRequest,omitempty"`
	DBName                              string          `protobuf:"bytes,2,opt,name=dBName,proto3" json:"dBName,omitempty"`
	InstanceID                          string          `protobuf:"bytes,3,opt,name=instanceID,proto3" json:"instanceID,omitempty"` // generated from path variable: instanceID. You should change the proto type if necessary.
}

func (x *CloudResourceMysqlDBRequest) Reset() {
	*x = CloudResourceMysqlDBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlDBRequest) ProtoMessage() {}

func (x *CloudResourceMysqlDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlDBRequest.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlDBRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{64}
}

func (x *CloudResourceMysqlDBRequest) GetCloudResourceMysqlDetailInfoRequest() *structpb.Value {
	if x != nil {
		return x.CloudResourceMysqlDetailInfoRequest
	}
	return nil
}

func (x *CloudResourceMysqlDBRequest) GetDBName() string {
	if x != nil {
		return x.DBName
	}
	return ""
}

func (x *CloudResourceMysqlDBRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

type CloudResourceMysqlDBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CloudResourceMysqlDBResponse) Reset() {
	*x = CloudResourceMysqlDBResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlDBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlDBResponse) ProtoMessage() {}

func (x *CloudResourceMysqlDBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlDBResponse.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlDBResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{65}
}

func (x *CloudResourceMysqlDBResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudResourceMysqlData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CloudResourceMysqlData) Reset() {
	*x = CloudResourceMysqlData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlData) ProtoMessage() {}

func (x *CloudResourceMysqlData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlData.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{66}
}

func (x *CloudResourceMysqlData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CloudResourceMysqlData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type CloudResourceMysqlDetailInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Category    string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	RegionId    string `protobuf:"bytes,4,opt,name=regionId,json=regionID,proto3" json:"regionId,omitempty"`
	VpcId       string `protobuf:"bytes,5,opt,name=vpcId,json=vpcID,proto3" json:"vpcId,omitempty"`
	VSwitchId   string `protobuf:"bytes,6,opt,name=vSwitchId,json=vSwitchID,proto3" json:"vSwitchId,omitempty"`
	ZoneId      string `protobuf:"bytes,7,opt,name=zoneId,json=zoneID,proto3" json:"zoneId,omitempty"`
	Host        string `protobuf:"bytes,8,opt,name=host,proto3" json:"host,omitempty"`
	Port        string `protobuf:"bytes,9,opt,name=port,proto3" json:"port,omitempty"`
	Memory      string `protobuf:"bytes,10,opt,name=memory,proto3" json:"memory,omitempty"`
	StorageSize string `protobuf:"bytes,11,opt,name=storageSize,proto3" json:"storageSize,omitempty"`
	StorageType string `protobuf:"bytes,12,opt,name=storageType,proto3" json:"storageType,omitempty"`
	Status      string `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CloudResourceMysqlDetailInfoData) Reset() {
	*x = CloudResourceMysqlDetailInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlDetailInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlDetailInfoData) ProtoMessage() {}

func (x *CloudResourceMysqlDetailInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlDetailInfoData.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlDetailInfoData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{67}
}

func (x *CloudResourceMysqlDetailInfoData) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoData) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoData) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoData) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoData) GetVSwitchId() string {
	if x != nil {
		return x.VSwitchId
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoData) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoData) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoData) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoData) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoData) GetStorageSize() string {
	if x != nil {
		return x.StorageSize
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoData) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CloudResourceMysqlDetailInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor     string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region     string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	InstanceID string `protobuf:"bytes,3,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Idorname   string `protobuf:"bytes,4,opt,name=idorname,proto3" json:"idorname,omitempty"` // generated from path variable: idorname. You should change the proto type if necessary.
}

func (x *CloudResourceMysqlDetailInfoRequest) Reset() {
	*x = CloudResourceMysqlDetailInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlDetailInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlDetailInfoRequest) ProtoMessage() {}

func (x *CloudResourceMysqlDetailInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlDetailInfoRequest.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlDetailInfoRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{68}
}

func (x *CloudResourceMysqlDetailInfoRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *CloudResourceMysqlDetailInfoRequest) GetIdorname() string {
	if x != nil {
		return x.Idorname
	}
	return ""
}

type CloudResourceMysqlDetailInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CloudResourceMysqlDetailInfoResponse) Reset() {
	*x = CloudResourceMysqlDetailInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlDetailInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlDetailInfoResponse) ProtoMessage() {}

func (x *CloudResourceMysqlDetailInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlDetailInfoResponse.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlDetailInfoResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{69}
}

func (x *CloudResourceMysqlDetailInfoResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudResourceMysqlListAccountData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*structpb.Value `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CloudResourceMysqlListAccountData) Reset() {
	*x = CloudResourceMysqlListAccountData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlListAccountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlListAccountData) ProtoMessage() {}

func (x *CloudResourceMysqlListAccountData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlListAccountData.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlListAccountData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{70}
}

func (x *CloudResourceMysqlListAccountData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type CloudResourceMysqlListAccountItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName        string            `protobuf:"bytes,1,opt,name=accountName,proto3" json:"accountName,omitempty"`
	AccountStatus      string            `protobuf:"bytes,2,opt,name=accountStatus,proto3" json:"accountStatus,omitempty"`
	AccountType        string            `protobuf:"bytes,3,opt,name=accountType,proto3" json:"accountType,omitempty"`
	AccountDescription string            `protobuf:"bytes,4,opt,name=accountDescription,proto3" json:"accountDescription,omitempty"`
	DatabasePrivileges []*structpb.Value `protobuf:"bytes,5,rep,name=databasePrivileges,proto3" json:"databasePrivileges,omitempty"`
}

func (x *CloudResourceMysqlListAccountItem) Reset() {
	*x = CloudResourceMysqlListAccountItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlListAccountItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlListAccountItem) ProtoMessage() {}

func (x *CloudResourceMysqlListAccountItem) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlListAccountItem.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlListAccountItem) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{71}
}

func (x *CloudResourceMysqlListAccountItem) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *CloudResourceMysqlListAccountItem) GetAccountStatus() string {
	if x != nil {
		return x.AccountStatus
	}
	return ""
}

func (x *CloudResourceMysqlListAccountItem) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *CloudResourceMysqlListAccountItem) GetAccountDescription() string {
	if x != nil {
		return x.AccountDescription
	}
	return ""
}

func (x *CloudResourceMysqlListAccountItem) GetDatabasePrivileges() []*structpb.Value {
	if x != nil {
		return x.DatabasePrivileges
	}
	return nil
}

type CloudResourceMysqlListAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor     string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region     string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	InstanceID string `protobuf:"bytes,3,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
}

func (x *CloudResourceMysqlListAccountRequest) Reset() {
	*x = CloudResourceMysqlListAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlListAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlListAccountRequest) ProtoMessage() {}

func (x *CloudResourceMysqlListAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlListAccountRequest.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlListAccountRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{72}
}

func (x *CloudResourceMysqlListAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CloudResourceMysqlListAccountRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudResourceMysqlListAccountRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

type CloudResourceMysqlListAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CloudResourceMysqlListAccountResponse) Reset() {
	*x = CloudResourceMysqlListAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceMysqlListAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceMysqlListAccountResponse) ProtoMessage() {}

func (x *CloudResourceMysqlListAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceMysqlListAccountResponse.ProtoReflect.Descriptor instead.
func (*CloudResourceMysqlListAccountResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{73}
}

func (x *CloudResourceMysqlListAccountResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudResourceOnsBasicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region       string            `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	ID           string            `protobuf:"bytes,2,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name         string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	InstanceType string            `protobuf:"bytes,4,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Status       string            `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Tags         map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CloudResourceOnsBasicData) Reset() {
	*x = CloudResourceOnsBasicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOnsBasicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOnsBasicData) ProtoMessage() {}

func (x *CloudResourceOnsBasicData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOnsBasicData.ProtoReflect.Descriptor instead.
func (*CloudResourceOnsBasicData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{74}
}

func (x *CloudResourceOnsBasicData) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudResourceOnsBasicData) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CloudResourceOnsBasicData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudResourceOnsBasicData) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *CloudResourceOnsBasicData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CloudResourceOnsBasicData) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CloudResourceOnsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CloudResourceOnsData) Reset() {
	*x = CloudResourceOnsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOnsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOnsData) ProtoMessage() {}

func (x *CloudResourceOnsData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOnsData.ProtoReflect.Descriptor instead.
func (*CloudResourceOnsData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{75}
}

func (x *CloudResourceOnsData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CloudResourceOnsData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type CloudResourceOnsDetailInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor     string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region     string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	InstanceID string `protobuf:"bytes,3,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
}

func (x *CloudResourceOnsDetailInfoRequest) Reset() {
	*x = CloudResourceOnsDetailInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOnsDetailInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOnsDetailInfoRequest) ProtoMessage() {}

func (x *CloudResourceOnsDetailInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOnsDetailInfoRequest.ProtoReflect.Descriptor instead.
func (*CloudResourceOnsDetailInfoRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{76}
}

func (x *CloudResourceOnsDetailInfoRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CloudResourceOnsDetailInfoRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudResourceOnsDetailInfoRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

type CloudResourceOnsDetailInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CloudResourceOnsDetailInfoResponse) Reset() {
	*x = CloudResourceOnsDetailInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOnsDetailInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOnsDetailInfoResponse) ProtoMessage() {}

func (x *CloudResourceOnsDetailInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOnsDetailInfoResponse.ProtoReflect.Descriptor instead.
func (*CloudResourceOnsDetailInfoResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{77}
}

func (x *CloudResourceOnsDetailInfoResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudResourceOnsGroupBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   string `protobuf:"bytes,1,opt,name=groupId,json=groupID,proto3" json:"groupId,omitempty"`
	GroupType string `protobuf:"bytes,2,opt,name=groupType,proto3" json:"groupType,omitempty"`
	Remark    string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *CloudResourceOnsGroupBaseInfo) Reset() {
	*x = CloudResourceOnsGroupBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOnsGroupBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOnsGroupBaseInfo) ProtoMessage() {}

func (x *CloudResourceOnsGroupBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOnsGroupBaseInfo.ProtoReflect.Descriptor instead.
func (*CloudResourceOnsGroupBaseInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{78}
}

func (x *CloudResourceOnsGroupBaseInfo) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CloudResourceOnsGroupBaseInfo) GetGroupType() string {
	if x != nil {
		return x.GroupType
	}
	return ""
}

func (x *CloudResourceOnsGroupBaseInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type CloudResourceOnsGroupBasicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    string            `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Remark     string            `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`
	InstanceId string            `protobuf:"bytes,3,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	GroupType  string            `protobuf:"bytes,4,opt,name=groupType,proto3" json:"groupType,omitempty"`
	CreateTime string            `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Tags       map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CloudResourceOnsGroupBasicData) Reset() {
	*x = CloudResourceOnsGroupBasicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOnsGroupBasicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOnsGroupBasicData) ProtoMessage() {}

func (x *CloudResourceOnsGroupBasicData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOnsGroupBasicData.ProtoReflect.Descriptor instead.
func (*CloudResourceOnsGroupBasicData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{79}
}

func (x *CloudResourceOnsGroupBasicData) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CloudResourceOnsGroupBasicData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CloudResourceOnsGroupBasicData) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CloudResourceOnsGroupBasicData) GetGroupType() string {
	if x != nil {
		return x.GroupType
	}
	return ""
}

func (x *CloudResourceOnsGroupBasicData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CloudResourceOnsGroupBasicData) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CloudResourceOnsGroupInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CloudResourceOnsGroupInfoData) Reset() {
	*x = CloudResourceOnsGroupInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOnsGroupInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOnsGroupInfoData) ProtoMessage() {}

func (x *CloudResourceOnsGroupInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOnsGroupInfoData.ProtoReflect.Descriptor instead.
func (*CloudResourceOnsGroupInfoData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{80}
}

func (x *CloudResourceOnsGroupInfoData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CloudResourceOnsGroupInfoData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type CloudResourceOnsGroupInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor     string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region     string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	InstanceID string `protobuf:"bytes,3,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	GroupID    string `protobuf:"bytes,4,opt,name=groupID,proto3" json:"groupID,omitempty"`
	GroupType  string `protobuf:"bytes,5,opt,name=groupType,proto3" json:"groupType,omitempty"`
}

func (x *CloudResourceOnsGroupInfoRequest) Reset() {
	*x = CloudResourceOnsGroupInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOnsGroupInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOnsGroupInfoRequest) ProtoMessage() {}

func (x *CloudResourceOnsGroupInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOnsGroupInfoRequest.ProtoReflect.Descriptor instead.
func (*CloudResourceOnsGroupInfoRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{81}
}

func (x *CloudResourceOnsGroupInfoRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CloudResourceOnsGroupInfoRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudResourceOnsGroupInfoRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *CloudResourceOnsGroupInfoRequest) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *CloudResourceOnsGroupInfoRequest) GetGroupType() string {
	if x != nil {
		return x.GroupType
	}
	return ""
}

type CloudResourceOnsGroupInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CloudResourceOnsGroupInfoResponse) Reset() {
	*x = CloudResourceOnsGroupInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOnsGroupInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOnsGroupInfoResponse) ProtoMessage() {}

func (x *CloudResourceOnsGroupInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOnsGroupInfoResponse.ProtoReflect.Descriptor instead.
func (*CloudResourceOnsGroupInfoResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{82}
}

func (x *CloudResourceOnsGroupInfoResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudResourceOnsTopicAndGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudResourceOnsGroupBaseInfo *structpb.Value `protobuf:"bytes,1,opt,name=cloudResourceOnsGroupBaseInfo,proto3" json:"cloudResourceOnsGroupBaseInfo,omitempty"`
	TopicName                     string          `protobuf:"bytes,2,opt,name=topicName,proto3" json:"topicName,omitempty"`
	AddonID                       string          `protobuf:"bytes,3,opt,name=addonID,proto3" json:"addonID,omitempty"`
	MessageType                   int64           `protobuf:"varint,4,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Remark                        string          `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *CloudResourceOnsTopicAndGroup) Reset() {
	*x = CloudResourceOnsTopicAndGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOnsTopicAndGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOnsTopicAndGroup) ProtoMessage() {}

func (x *CloudResourceOnsTopicAndGroup) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOnsTopicAndGroup.ProtoReflect.Descriptor instead.
func (*CloudResourceOnsTopicAndGroup) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{83}
}

func (x *CloudResourceOnsTopicAndGroup) GetCloudResourceOnsGroupBaseInfo() *structpb.Value {
	if x != nil {
		return x.CloudResourceOnsGroupBaseInfo
	}
	return nil
}

func (x *CloudResourceOnsTopicAndGroup) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *CloudResourceOnsTopicAndGroup) GetAddonID() string {
	if x != nil {
		return x.AddonID
	}
	return ""
}

func (x *CloudResourceOnsTopicAndGroup) GetMessageType() int64 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *CloudResourceOnsTopicAndGroup) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type CloudResourceOnsTopicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CloudResourceOnsTopicInfo) Reset() {
	*x = CloudResourceOnsTopicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOnsTopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOnsTopicInfo) ProtoMessage() {}

func (x *CloudResourceOnsTopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOnsTopicInfo.ProtoReflect.Descriptor instead.
func (*CloudResourceOnsTopicInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{84}
}

func (x *CloudResourceOnsTopicInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CloudResourceOnsTopicInfo) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type CloudResourceOnsTopicInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudResourceMysqlDetailInfoRequest *structpb.Value `protobuf:"bytes,1,opt,name=cloudResourceMysqlDetailInfoRequest,proto3" json:"cloudResourceMysqlDetailInfoRequest,omitempty"`
	TopicName                           string          `protobuf:"bytes,2,opt,name=topicName,proto3" json:"topicName,omitempty"`
}

func (x *CloudResourceOnsTopicInfoRequest) Reset() {
	*x = CloudResourceOnsTopicInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOnsTopicInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOnsTopicInfoRequest) ProtoMessage() {}

func (x *CloudResourceOnsTopicInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOnsTopicInfoRequest.ProtoReflect.Descriptor instead.
func (*CloudResourceOnsTopicInfoRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{85}
}

func (x *CloudResourceOnsTopicInfoRequest) GetCloudResourceMysqlDetailInfoRequest() *structpb.Value {
	if x != nil {
		return x.CloudResourceMysqlDetailInfoRequest
	}
	return nil
}

func (x *CloudResourceOnsTopicInfoRequest) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

type CloudResourceOnsTopicInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CloudResourceOnsTopicInfoResponse) Reset() {
	*x = CloudResourceOnsTopicInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOnsTopicInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOnsTopicInfoResponse) ProtoMessage() {}

func (x *CloudResourceOnsTopicInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOnsTopicInfoResponse.ProtoReflect.Descriptor instead.
func (*CloudResourceOnsTopicInfoResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{86}
}

func (x *CloudResourceOnsTopicInfoResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudResourceOssBasicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Location     string            `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	CreateDate   string            `protobuf:"bytes,3,opt,name=createDate,proto3" json:"createDate,omitempty"`
	StorageClass string            `protobuf:"bytes,4,opt,name=storageClass,proto3" json:"storageClass,omitempty"`
	Tags         map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CloudResourceOssBasicData) Reset() {
	*x = CloudResourceOssBasicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOssBasicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOssBasicData) ProtoMessage() {}

func (x *CloudResourceOssBasicData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOssBasicData.ProtoReflect.Descriptor instead.
func (*CloudResourceOssBasicData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{87}
}

func (x *CloudResourceOssBasicData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudResourceOssBasicData) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CloudResourceOssBasicData) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *CloudResourceOssBasicData) GetStorageClass() string {
	if x != nil {
		return x.StorageClass
	}
	return ""
}

func (x *CloudResourceOssBasicData) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CloudResourceOssData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CloudResourceOssData) Reset() {
	*x = CloudResourceOssData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOssData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOssData) ProtoMessage() {}

func (x *CloudResourceOssData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOssData.ProtoReflect.Descriptor instead.
func (*CloudResourceOssData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{88}
}

func (x *CloudResourceOssData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CloudResourceOssData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type CloudResourceOssDetailInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName       string `protobuf:"bytes,1,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	InternetEndpoint string `protobuf:"bytes,2,opt,name=internetEndpoint,proto3" json:"internetEndpoint,omitempty"`
	IntranetEndpoint string `protobuf:"bytes,3,opt,name=intranetEndpoint,proto3" json:"intranetEndpoint,omitempty"`
	Location         string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Acl              string `protobuf:"bytes,5,opt,name=acl,proto3" json:"acl,omitempty"`
}

func (x *CloudResourceOssDetailInfoData) Reset() {
	*x = CloudResourceOssDetailInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOssDetailInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOssDetailInfoData) ProtoMessage() {}

func (x *CloudResourceOssDetailInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOssDetailInfoData.ProtoReflect.Descriptor instead.
func (*CloudResourceOssDetailInfoData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{89}
}

func (x *CloudResourceOssDetailInfoData) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *CloudResourceOssDetailInfoData) GetInternetEndpoint() string {
	if x != nil {
		return x.InternetEndpoint
	}
	return ""
}

func (x *CloudResourceOssDetailInfoData) GetIntranetEndpoint() string {
	if x != nil {
		return x.IntranetEndpoint
	}
	return ""
}

func (x *CloudResourceOssDetailInfoData) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CloudResourceOssDetailInfoData) GetAcl() string {
	if x != nil {
		return x.Acl
	}
	return ""
}

type CloudResourceOssDetailInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor     string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region     string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Bucketname string `protobuf:"bytes,4,opt,name=bucketname,proto3" json:"bucketname,omitempty"` // generated from path variable: bucketname. You should change the proto type if necessary.
}

func (x *CloudResourceOssDetailInfoRequest) Reset() {
	*x = CloudResourceOssDetailInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOssDetailInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOssDetailInfoRequest) ProtoMessage() {}

func (x *CloudResourceOssDetailInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOssDetailInfoRequest.ProtoReflect.Descriptor instead.
func (*CloudResourceOssDetailInfoRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{90}
}

func (x *CloudResourceOssDetailInfoRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CloudResourceOssDetailInfoRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudResourceOssDetailInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudResourceOssDetailInfoRequest) GetBucketname() string {
	if x != nil {
		return x.Bucketname
	}
	return ""
}

type CloudResourceOssDetailInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CloudResourceOssDetailInfoResponse) Reset() {
	*x = CloudResourceOssDetailInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOssDetailInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOssDetailInfoResponse) ProtoMessage() {}

func (x *CloudResourceOssDetailInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOssDetailInfoResponse.ProtoReflect.Descriptor instead.
func (*CloudResourceOssDetailInfoResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{91}
}

func (x *CloudResourceOssDetailInfoResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudResourceOverviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *CloudResourceOverviewRequest) Reset() {
	*x = CloudResourceOverviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOverviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOverviewRequest) ProtoMessage() {}

func (x *CloudResourceOverviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOverviewRequest.ProtoReflect.Descriptor instead.
func (*CloudResourceOverviewRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{92}
}

func (x *CloudResourceOverviewRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CloudResourceOverviewRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type CloudResourceOverviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CloudResourceOverviewResponse) Reset() {
	*x = CloudResourceOverviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceOverviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceOverviewResponse) ProtoMessage() {}

func (x *CloudResourceOverviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceOverviewResponse.ProtoReflect.Descriptor instead.
func (*CloudResourceOverviewResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{93}
}

func (x *CloudResourceOverviewResponse) GetData() map[string]*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudResourceRedisBasicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string            `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Region     string            `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Spec       string            `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Version    string            `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Capacity   string            `protobuf:"bytes,6,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Status     string            `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Tags       map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ChargeType string            `protobuf:"bytes,9,opt,name=chargeType,proto3" json:"chargeType,omitempty"`
	ExpireTime string            `protobuf:"bytes,10,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
	CreateTime string            `protobuf:"bytes,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *CloudResourceRedisBasicData) Reset() {
	*x = CloudResourceRedisBasicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceRedisBasicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceRedisBasicData) ProtoMessage() {}

func (x *CloudResourceRedisBasicData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceRedisBasicData.ProtoReflect.Descriptor instead.
func (*CloudResourceRedisBasicData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{94}
}

func (x *CloudResourceRedisBasicData) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CloudResourceRedisBasicData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudResourceRedisBasicData) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudResourceRedisBasicData) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *CloudResourceRedisBasicData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CloudResourceRedisBasicData) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *CloudResourceRedisBasicData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CloudResourceRedisBasicData) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CloudResourceRedisBasicData) GetChargeType() string {
	if x != nil {
		return x.ChargeType
	}
	return ""
}

func (x *CloudResourceRedisBasicData) GetExpireTime() string {
	if x != nil {
		return x.ExpireTime
	}
	return ""
}

func (x *CloudResourceRedisBasicData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type CloudResourceRedisDetailInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor     string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region     string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	InstanceID string `protobuf:"bytes,3,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
}

func (x *CloudResourceRedisDetailInfoRequest) Reset() {
	*x = CloudResourceRedisDetailInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceRedisDetailInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceRedisDetailInfoRequest) ProtoMessage() {}

func (x *CloudResourceRedisDetailInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceRedisDetailInfoRequest.ProtoReflect.Descriptor instead.
func (*CloudResourceRedisDetailInfoRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{95}
}

func (x *CloudResourceRedisDetailInfoRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CloudResourceRedisDetailInfoRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudResourceRedisDetailInfoRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

type CloudResourceRedisDetailInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CloudResourceRedisDetailInfoResponse) Reset() {
	*x = CloudResourceRedisDetailInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceRedisDetailInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceRedisDetailInfoResponse) ProtoMessage() {}

func (x *CloudResourceRedisDetailInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceRedisDetailInfoResponse.ProtoReflect.Descriptor instead.
func (*CloudResourceRedisDetailInfoResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{96}
}

func (x *CloudResourceRedisDetailInfoResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloudResourceSetTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags         []string          `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	ResourceType string            `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	InstanceID   string            `protobuf:"bytes,3,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Items        []*structpb.Value `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CloudResourceSetTagRequest) Reset() {
	*x = CloudResourceSetTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceSetTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceSetTagRequest) ProtoMessage() {}

func (x *CloudResourceSetTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceSetTagRequest.ProtoReflect.Descriptor instead.
func (*CloudResourceSetTagRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{97}
}

func (x *CloudResourceSetTagRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CloudResourceSetTagRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *CloudResourceSetTagRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *CloudResourceSetTagRequest) GetItems() []*structpb.Value {
	if x != nil {
		return x.Items
	}
	return nil
}

type CloudResourceSetTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloudResourceSetTagResponse) Reset() {
	*x = CloudResourceSetTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceSetTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceSetTagResponse) ProtoMessage() {}

func (x *CloudResourceSetTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceSetTagResponse.ProtoReflect.Descriptor instead.
func (*CloudResourceSetTagResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{98}
}

type CloudResourceTagItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor     string   `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region     string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	ResourceID string   `protobuf:"bytes,3,opt,name=resourceID,proto3" json:"resourceID,omitempty"`
	OldTags    []string `protobuf:"bytes,4,rep,name=oldTags,proto3" json:"oldTags,omitempty"`
}

func (x *CloudResourceTagItem) Reset() {
	*x = CloudResourceTagItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudResourceTagItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceTagItem) ProtoMessage() {}

func (x *CloudResourceTagItem) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceTagItem.ProtoReflect.Descriptor instead.
func (*CloudResourceTagItem) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{99}
}

func (x *CloudResourceTagItem) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CloudResourceTagItem) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudResourceTagItem) GetResourceID() string {
	if x != nil {
		return x.ResourceID
	}
	return ""
}

func (x *CloudResourceTagItem) GetOldTags() []string {
	if x != nil {
		return x.OldTags
	}
	return nil
}

type ClusterUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName     string            `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Type            string            `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	CloudVendor     string            `protobuf:"bytes,4,opt,name=cloudVendor,proto3" json:"cloudVendor,omitempty"`
	Logo            string            `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	Description     string            `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	WildcardDomain  string            `protobuf:"bytes,7,opt,name=wildcardDomain,proto3" json:"wildcardDomain,omitempty"`
	SchedulerConfig *structpb.Value   `protobuf:"bytes,8,opt,name=schedulerConfig,json=scheduler,proto3,oneof" json:"schedulerConfig,omitempty"`
	OpsConfig       *structpb.Value   `protobuf:"bytes,9,opt,name=opsConfig,proto3,oneof" json:"opsConfig,omitempty"`
	SysConfig       *structpb.Value   `protobuf:"bytes,10,opt,name=sysConfig,proto3,oneof" json:"sysConfig,omitempty"`
	ManageConfig    *structpb.Value   `protobuf:"bytes,11,opt,name=manageConfig,proto3,oneof" json:"manageConfig,omitempty"`
	OrgID           int64             `protobuf:"varint,12,opt,name=orgID,proto3" json:"orgID,omitempty"`
	URLs            map[string]string `protobuf:"bytes,13,rep,name=uRLs,json=urls,proto3" json:"uRLs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClusterUpdateRequest) Reset() {
	*x = ClusterUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterUpdateRequest) ProtoMessage() {}

func (x *ClusterUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterUpdateRequest.ProtoReflect.Descriptor instead.
func (*ClusterUpdateRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{100}
}

func (x *ClusterUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterUpdateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ClusterUpdateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClusterUpdateRequest) GetCloudVendor() string {
	if x != nil {
		return x.CloudVendor
	}
	return ""
}

func (x *ClusterUpdateRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ClusterUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterUpdateRequest) GetWildcardDomain() string {
	if x != nil {
		return x.WildcardDomain
	}
	return ""
}

func (x *ClusterUpdateRequest) GetSchedulerConfig() *structpb.Value {
	if x != nil {
		return x.SchedulerConfig
	}
	return nil
}

func (x *ClusterUpdateRequest) GetOpsConfig() *structpb.Value {
	if x != nil {
		return x.OpsConfig
	}
	return nil
}

func (x *ClusterUpdateRequest) GetSysConfig() *structpb.Value {
	if x != nil {
		return x.SysConfig
	}
	return nil
}

func (x *ClusterUpdateRequest) GetManageConfig() *structpb.Value {
	if x != nil {
		return x.ManageConfig
	}
	return nil
}

func (x *ClusterUpdateRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ClusterUpdateRequest) GetURLs() map[string]string {
	if x != nil {
		return x.URLs
	}
	return nil
}

type ClusterUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ClusterUpdateResponse) Reset() {
	*x = ClusterUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterUpdateResponse) ProtoMessage() {}

func (x *ClusterUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterUpdateResponse.ProtoReflect.Descriptor instead.
func (*ClusterUpdateResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{101}
}

func (x *ClusterUpdateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ClustersData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready   []string `protobuf:"bytes,1,rep,name=ready,proto3" json:"ready,omitempty"`
	UnReady []string `protobuf:"bytes,2,rep,name=unReady,proto3" json:"unReady,omitempty"`
}

func (x *ClustersData) Reset() {
	*x = ClustersData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClustersData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersData) ProtoMessage() {}

func (x *ClustersData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClustersData.ProtoReflect.Descriptor instead.
func (*ClustersData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{102}
}

func (x *ClustersData) GetReady() []string {
	if x != nil {
		return x.Ready
	}
	return nil
}

func (x *ClustersData) GetUnReady() []string {
	if x != nil {
		return x.UnReady
	}
	return nil
}

type CreateCloudAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor      string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	AccessKey   string `protobuf:"bytes,2,opt,name=accessKey,json=accessKeyID,proto3" json:"accessKey,omitempty"`
	Secret      string `protobuf:"bytes,3,opt,name=secret,json=accessKeySecret,proto3" json:"secret,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateCloudAccountRequest) Reset() {
	*x = CreateCloudAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudAccountRequest) ProtoMessage() {}

func (x *CreateCloudAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudAccountRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{103}
}

func (x *CreateCloudAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateCloudAccountRequest) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *CreateCloudAccountRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *CreateCloudAccountRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateCloudAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCloudAccountResponse) Reset() {
	*x = CreateCloudAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudAccountResponse) ProtoMessage() {}

func (x *CreateCloudAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudAccountResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{104}
}

type CreateCloudResourceBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor      string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region      string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VpcID       string `protobuf:"bytes,3,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	VSwitchID   string `protobuf:"bytes,4,opt,name=vSwitchID,proto3" json:"vSwitchID,omitempty"`
	ZoneID      string `protobuf:"bytes,5,opt,name=zoneID,proto3" json:"zoneID,omitempty"`
	OrgID       string `protobuf:"bytes,6,opt,name=orgID,proto3" json:"orgID,omitempty"`
	UserID      string `protobuf:"bytes,7,opt,name=userID,proto3" json:"userID,omitempty"`
	ClusterName string `protobuf:"bytes,8,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ProjectID   string `protobuf:"bytes,9,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Source      string `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`
	ClientToken string `protobuf:"bytes,11,opt,name=clientToken,proto3" json:"clientToken,omitempty"`
}

func (x *CreateCloudResourceBaseInfo) Reset() {
	*x = CreateCloudResourceBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceBaseInfo) ProtoMessage() {}

func (x *CreateCloudResourceBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceBaseInfo.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceBaseInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{105}
}

func (x *CreateCloudResourceBaseInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateCloudResourceBaseInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateCloudResourceBaseInfo) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *CreateCloudResourceBaseInfo) GetVSwitchID() string {
	if x != nil {
		return x.VSwitchID
	}
	return ""
}

func (x *CreateCloudResourceBaseInfo) GetZoneID() string {
	if x != nil {
		return x.ZoneID
	}
	return ""
}

func (x *CreateCloudResourceBaseInfo) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *CreateCloudResourceBaseInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateCloudResourceBaseInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateCloudResourceBaseInfo) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CreateCloudResourceBaseInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CreateCloudResourceBaseInfo) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

type CreateCloudResourceBaseResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID uint64 `protobuf:"varint,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
}

func (x *CreateCloudResourceBaseResponseData) Reset() {
	*x = CreateCloudResourceBaseResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceBaseResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceBaseResponseData) ProtoMessage() {}

func (x *CreateCloudResourceBaseResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceBaseResponseData.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceBaseResponseData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{106}
}

func (x *CreateCloudResourceBaseResponseData) GetRecordID() uint64 {
	if x != nil {
		return x.RecordID
	}
	return 0
}

type CreateCloudResourceMysqlAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor      string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region      string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	InstanceID  string `protobuf:"bytes,3,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Account     string `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Password    string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateCloudResourceMysqlAccountRequest) Reset() {
	*x = CreateCloudResourceMysqlAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceMysqlAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceMysqlAccountRequest) ProtoMessage() {}

func (x *CreateCloudResourceMysqlAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceMysqlAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceMysqlAccountRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{107}
}

func (x *CreateCloudResourceMysqlAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateCloudResourceMysqlAccountRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateCloudResourceMysqlAccountRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *CreateCloudResourceMysqlAccountRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CreateCloudResourceMysqlAccountRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateCloudResourceMysqlAccountRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateCloudResourceMysqlAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCloudResourceMysqlAccountResponse) Reset() {
	*x = CreateCloudResourceMysqlAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceMysqlAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceMysqlAccountResponse) ProtoMessage() {}

func (x *CreateCloudResourceMysqlAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceMysqlAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceMysqlAccountResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{108}
}

func (x *CreateCloudResourceMysqlAccountResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCloudResourceMysqlDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateCloudResourceBaseInfo *structpb.Value   `protobuf:"bytes,1,opt,name=createCloudResourceBaseInfo,proto3" json:"createCloudResourceBaseInfo,omitempty"`
	InstanceID                  string            `protobuf:"bytes,2,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Databases                   []*structpb.Value `protobuf:"bytes,3,rep,name=databases,proto3" json:"databases,omitempty"`
}

func (x *CreateCloudResourceMysqlDBRequest) Reset() {
	*x = CreateCloudResourceMysqlDBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceMysqlDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceMysqlDBRequest) ProtoMessage() {}

func (x *CreateCloudResourceMysqlDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceMysqlDBRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceMysqlDBRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{109}
}

func (x *CreateCloudResourceMysqlDBRequest) GetCreateCloudResourceBaseInfo() *structpb.Value {
	if x != nil {
		return x.CreateCloudResourceBaseInfo
	}
	return nil
}

func (x *CreateCloudResourceMysqlDBRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *CreateCloudResourceMysqlDBRequest) GetDatabases() []*structpb.Value {
	if x != nil {
		return x.Databases
	}
	return nil
}

type CreateCloudResourceMysqlDBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCloudResourceMysqlDBResponse) Reset() {
	*x = CreateCloudResourceMysqlDBResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceMysqlDBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceMysqlDBResponse) ProtoMessage() {}

func (x *CreateCloudResourceMysqlDBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceMysqlDBResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceMysqlDBResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{110}
}

func (x *CreateCloudResourceMysqlDBResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCloudResourceMysqlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateCloudResourceBaseRequest *structpb.Value   `protobuf:"bytes,1,opt,name=createCloudResourceBaseRequest,proto3,oneof" json:"createCloudResourceBaseRequest,omitempty"`
	Version                        string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	SpecType                       string            `protobuf:"bytes,3,opt,name=specType,proto3" json:"specType,omitempty"`
	SpecSize                       string            `protobuf:"bytes,4,opt,name=specSize,json=spec,proto3" json:"specSize,omitempty"`
	StorageType                    string            `protobuf:"bytes,5,opt,name=storageType,proto3" json:"storageType,omitempty"`
	StorageSize                    int64             `protobuf:"varint,6,opt,name=storageSize,proto3" json:"storageSize,omitempty"`
	SecurityIPList                 string            `protobuf:"bytes,7,opt,name=securityIPList,proto3" json:"securityIPList,omitempty"`
	Databases                      []*structpb.Value `protobuf:"bytes,8,rep,name=databases,proto3" json:"databases,omitempty"`
}

func (x *CreateCloudResourceMysqlRequest) Reset() {
	*x = CreateCloudResourceMysqlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceMysqlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceMysqlRequest) ProtoMessage() {}

func (x *CreateCloudResourceMysqlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceMysqlRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceMysqlRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{111}
}

func (x *CreateCloudResourceMysqlRequest) GetCreateCloudResourceBaseRequest() *structpb.Value {
	if x != nil {
		return x.CreateCloudResourceBaseRequest
	}
	return nil
}

func (x *CreateCloudResourceMysqlRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateCloudResourceMysqlRequest) GetSpecType() string {
	if x != nil {
		return x.SpecType
	}
	return ""
}

func (x *CreateCloudResourceMysqlRequest) GetSpecSize() string {
	if x != nil {
		return x.SpecSize
	}
	return ""
}

func (x *CreateCloudResourceMysqlRequest) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *CreateCloudResourceMysqlRequest) GetStorageSize() int64 {
	if x != nil {
		return x.StorageSize
	}
	return 0
}

func (x *CreateCloudResourceMysqlRequest) GetSecurityIPList() string {
	if x != nil {
		return x.SecurityIPList
	}
	return ""
}

func (x *CreateCloudResourceMysqlRequest) GetDatabases() []*structpb.Value {
	if x != nil {
		return x.Databases
	}
	return nil
}

type CreateCloudResourceMysqlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCloudResourceMysqlResponse) Reset() {
	*x = CreateCloudResourceMysqlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceMysqlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceMysqlResponse) ProtoMessage() {}

func (x *CreateCloudResourceMysqlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceMysqlResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceMysqlResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{112}
}

func (x *CreateCloudResourceMysqlResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCloudResourceOnsGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor     string            `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region     string            `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	InstanceID string            `protobuf:"bytes,3,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Groups     []*structpb.Value `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *CreateCloudResourceOnsGroupRequest) Reset() {
	*x = CreateCloudResourceOnsGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceOnsGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceOnsGroupRequest) ProtoMessage() {}

func (x *CreateCloudResourceOnsGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceOnsGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceOnsGroupRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{113}
}

func (x *CreateCloudResourceOnsGroupRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateCloudResourceOnsGroupRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateCloudResourceOnsGroupRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *CreateCloudResourceOnsGroupRequest) GetGroups() []*structpb.Value {
	if x != nil {
		return x.Groups
	}
	return nil
}

type CreateCloudResourceOnsGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCloudResourceOnsGroupResponse) Reset() {
	*x = CreateCloudResourceOnsGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceOnsGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceOnsGroupResponse) ProtoMessage() {}

func (x *CreateCloudResourceOnsGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceOnsGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceOnsGroupResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{114}
}

type CreateCloudResourceOnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateCloudResourceBaseInfo *structpb.Value   `protobuf:"bytes,1,opt,name=createCloudResourceBaseInfo,proto3,oneof" json:"createCloudResourceBaseInfo,omitempty"`
	Name                        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Remark                      string            `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
	Topics                      []*structpb.Value `protobuf:"bytes,4,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *CreateCloudResourceOnsRequest) Reset() {
	*x = CreateCloudResourceOnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceOnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceOnsRequest) ProtoMessage() {}

func (x *CreateCloudResourceOnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceOnsRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceOnsRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{115}
}

func (x *CreateCloudResourceOnsRequest) GetCreateCloudResourceBaseInfo() *structpb.Value {
	if x != nil {
		return x.CreateCloudResourceBaseInfo
	}
	return nil
}

func (x *CreateCloudResourceOnsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCloudResourceOnsRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreateCloudResourceOnsRequest) GetTopics() []*structpb.Value {
	if x != nil {
		return x.Topics
	}
	return nil
}

type CreateCloudResourceOnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCloudResourceOnsResponse) Reset() {
	*x = CreateCloudResourceOnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceOnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceOnsResponse) ProtoMessage() {}

func (x *CreateCloudResourceOnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceOnsResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceOnsResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{116}
}

func (x *CreateCloudResourceOnsResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCloudResourceOnsTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateCloudResourceBaseInfo *structpb.Value   `protobuf:"bytes,1,opt,name=createCloudResourceBaseInfo,proto3" json:"createCloudResourceBaseInfo,omitempty"`
	InstanceID                  string            `protobuf:"bytes,2,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Topics                      []*structpb.Value `protobuf:"bytes,3,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *CreateCloudResourceOnsTopicRequest) Reset() {
	*x = CreateCloudResourceOnsTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceOnsTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceOnsTopicRequest) ProtoMessage() {}

func (x *CreateCloudResourceOnsTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceOnsTopicRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceOnsTopicRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{117}
}

func (x *CreateCloudResourceOnsTopicRequest) GetCreateCloudResourceBaseInfo() *structpb.Value {
	if x != nil {
		return x.CreateCloudResourceBaseInfo
	}
	return nil
}

func (x *CreateCloudResourceOnsTopicRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *CreateCloudResourceOnsTopicRequest) GetTopics() []*structpb.Value {
	if x != nil {
		return x.Topics
	}
	return nil
}

type CreateCloudResourceOnsTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCloudResourceOnsTopicResponse) Reset() {
	*x = CreateCloudResourceOnsTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceOnsTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceOnsTopicResponse) ProtoMessage() {}

func (x *CreateCloudResourceOnsTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceOnsTopicResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceOnsTopicResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{118}
}

func (x *CreateCloudResourceOnsTopicResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCloudResourceOssRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateCloudResourceBaseInfo *structpb.Value   `protobuf:"bytes,1,opt,name=createCloudResourceBaseInfo,proto3,oneof" json:"createCloudResourceBaseInfo,omitempty"`
	Buckets                     []*structpb.Value `protobuf:"bytes,2,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *CreateCloudResourceOssRequest) Reset() {
	*x = CreateCloudResourceOssRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceOssRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceOssRequest) ProtoMessage() {}

func (x *CreateCloudResourceOssRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceOssRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceOssRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{119}
}

func (x *CreateCloudResourceOssRequest) GetCreateCloudResourceBaseInfo() *structpb.Value {
	if x != nil {
		return x.CreateCloudResourceBaseInfo
	}
	return nil
}

func (x *CreateCloudResourceOssRequest) GetBuckets() []*structpb.Value {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type CreateCloudResourceOssResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCloudResourceOssResponse) Reset() {
	*x = CreateCloudResourceOssResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceOssResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceOssResponse) ProtoMessage() {}

func (x *CreateCloudResourceOssResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceOssResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceOssResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{120}
}

func (x *CreateCloudResourceOssResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCloudResourceRedisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateCloudResourceBaseRequest *structpb.Value `protobuf:"bytes,1,opt,name=createCloudResourceBaseRequest,proto3,oneof" json:"createCloudResourceBaseRequest,omitempty"`
	Version                        string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Spec                           string          `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Password                       string          `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	AddonID                        string          `protobuf:"bytes,5,opt,name=addonID,proto3" json:"addonID,omitempty"`
}

func (x *CreateCloudResourceRedisRequest) Reset() {
	*x = CreateCloudResourceRedisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceRedisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceRedisRequest) ProtoMessage() {}

func (x *CreateCloudResourceRedisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceRedisRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceRedisRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{121}
}

func (x *CreateCloudResourceRedisRequest) GetCreateCloudResourceBaseRequest() *structpb.Value {
	if x != nil {
		return x.CreateCloudResourceBaseRequest
	}
	return nil
}

func (x *CreateCloudResourceRedisRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateCloudResourceRedisRequest) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *CreateCloudResourceRedisRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateCloudResourceRedisRequest) GetAddonID() string {
	if x != nil {
		return x.AddonID
	}
	return ""
}

type CreateCloudResourceRedisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCloudResourceRedisResponse) Reset() {
	*x = CreateCloudResourceRedisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceRedisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceRedisResponse) ProtoMessage() {}

func (x *CreateCloudResourceRedisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceRedisResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceRedisResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{122}
}

func (x *CreateCloudResourceRedisResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCloudResourceVPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VPCID string `protobuf:"bytes,1,opt,name=vPCID,json=vpcID,proto3" json:"vPCID,omitempty"`
}

func (x *CreateCloudResourceVPC) Reset() {
	*x = CreateCloudResourceVPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceVPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceVPC) ProtoMessage() {}

func (x *CreateCloudResourceVPC) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceVPC.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceVPC) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{123}
}

func (x *CreateCloudResourceVPC) GetVPCID() string {
	if x != nil {
		return x.VPCID
	}
	return ""
}

type CreateCloudResourceVPCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor      string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region      string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VPCName     string `protobuf:"bytes,3,opt,name=vPCName,json=vpcName,proto3" json:"vPCName,omitempty"`
	CidrBlock   string `protobuf:"bytes,4,opt,name=cidrBlock,proto3" json:"cidrBlock,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateCloudResourceVPCRequest) Reset() {
	*x = CreateCloudResourceVPCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceVPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceVPCRequest) ProtoMessage() {}

func (x *CreateCloudResourceVPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceVPCRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceVPCRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{124}
}

func (x *CreateCloudResourceVPCRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateCloudResourceVPCRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateCloudResourceVPCRequest) GetVPCName() string {
	if x != nil {
		return x.VPCName
	}
	return ""
}

func (x *CreateCloudResourceVPCRequest) GetCidrBlock() string {
	if x != nil {
		return x.CidrBlock
	}
	return ""
}

func (x *CreateCloudResourceVPCRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateCloudResourceVPCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCloudResourceVPCResponse) Reset() {
	*x = CreateCloudResourceVPCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceVPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceVPCResponse) ProtoMessage() {}

func (x *CreateCloudResourceVPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceVPCResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceVPCResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{125}
}

func (x *CreateCloudResourceVPCResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCloudResourceVSW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VSWID string `protobuf:"bytes,1,opt,name=vSWID,json=vswID,proto3" json:"vSWID,omitempty"`
}

func (x *CreateCloudResourceVSW) Reset() {
	*x = CreateCloudResourceVSW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceVSW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceVSW) ProtoMessage() {}

func (x *CreateCloudResourceVSW) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceVSW.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceVSW) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{126}
}

func (x *CreateCloudResourceVSW) GetVSWID() string {
	if x != nil {
		return x.VSWID
	}
	return ""
}

type CreateCloudResourceVSWRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor      string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region      string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VSWName     string `protobuf:"bytes,3,opt,name=vSWName,json=vswName,proto3" json:"vSWName,omitempty"`
	VPCID       string `protobuf:"bytes,4,opt,name=vPCID,json=vpcID,proto3" json:"vPCID,omitempty"`
	CidrBlock   string `protobuf:"bytes,5,opt,name=cidrBlock,proto3" json:"cidrBlock,omitempty"`
	ZoneID      string `protobuf:"bytes,6,opt,name=zoneID,proto3" json:"zoneID,omitempty"`
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateCloudResourceVSWRequest) Reset() {
	*x = CreateCloudResourceVSWRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceVSWRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceVSWRequest) ProtoMessage() {}

func (x *CreateCloudResourceVSWRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceVSWRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceVSWRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{127}
}

func (x *CreateCloudResourceVSWRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateCloudResourceVSWRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateCloudResourceVSWRequest) GetVSWName() string {
	if x != nil {
		return x.VSWName
	}
	return ""
}

func (x *CreateCloudResourceVSWRequest) GetVPCID() string {
	if x != nil {
		return x.VPCID
	}
	return ""
}

func (x *CreateCloudResourceVSWRequest) GetCidrBlock() string {
	if x != nil {
		return x.CidrBlock
	}
	return ""
}

func (x *CreateCloudResourceVSWRequest) GetZoneID() string {
	if x != nil {
		return x.ZoneID
	}
	return ""
}

func (x *CreateCloudResourceVSWRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateCloudResourceVSWResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCloudResourceVSWResponse) Reset() {
	*x = CreateCloudResourceVSWResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudResourceVSWResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudResourceVSWResponse) ProtoMessage() {}

func (x *CreateCloudResourceVSWResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudResourceVSWResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudResourceVSWResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{128}
}

func (x *CreateCloudResourceVSWResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteCloudAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor    string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	AccessKey string `protobuf:"bytes,2,opt,name=accessKey,json=accessKeyID,proto3" json:"accessKey,omitempty"`
}

func (x *DeleteCloudAccountRequest) Reset() {
	*x = DeleteCloudAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudAccountRequest) ProtoMessage() {}

func (x *DeleteCloudAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudAccountRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{129}
}

func (x *DeleteCloudAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DeleteCloudAccountRequest) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

type DeleteCloudAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCloudAccountResponse) Reset() {
	*x = DeleteCloudAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudAccountResponse) ProtoMessage() {}

func (x *DeleteCloudAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudAccountResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloudAccountResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{130}
}

type DeleteCloudResourceMysqlDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAddonResourceDeleteRequest *structpb.Value `protobuf:"bytes,1,opt,name=cloudAddonResourceDeleteRequest,proto3" json:"cloudAddonResourceDeleteRequest,omitempty"`
	DatabaseName                    string          `protobuf:"bytes,2,opt,name=databaseName,proto3" json:"databaseName,omitempty"`
}

func (x *DeleteCloudResourceMysqlDBRequest) Reset() {
	*x = DeleteCloudResourceMysqlDBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudResourceMysqlDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudResourceMysqlDBRequest) ProtoMessage() {}

func (x *DeleteCloudResourceMysqlDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudResourceMysqlDBRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudResourceMysqlDBRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{131}
}

func (x *DeleteCloudResourceMysqlDBRequest) GetCloudAddonResourceDeleteRequest() *structpb.Value {
	if x != nil {
		return x.CloudAddonResourceDeleteRequest
	}
	return nil
}

func (x *DeleteCloudResourceMysqlDBRequest) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

type DeleteCloudResourceMysqlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	RecordID   string `protobuf:"bytes,2,opt,name=recordID,proto3" json:"recordID,omitempty"`
	ProjectID  string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	AddonID    string `protobuf:"bytes,4,opt,name=addonID,proto3" json:"addonID,omitempty"`
	InstanceID string `protobuf:"bytes,5,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Vendor     string `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region     string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *DeleteCloudResourceMysqlRequest) Reset() {
	*x = DeleteCloudResourceMysqlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudResourceMysqlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudResourceMysqlRequest) ProtoMessage() {}

func (x *DeleteCloudResourceMysqlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudResourceMysqlRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudResourceMysqlRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{132}
}

func (x *DeleteCloudResourceMysqlRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *DeleteCloudResourceMysqlRequest) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *DeleteCloudResourceMysqlRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *DeleteCloudResourceMysqlRequest) GetAddonID() string {
	if x != nil {
		return x.AddonID
	}
	return ""
}

func (x *DeleteCloudResourceMysqlRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *DeleteCloudResourceMysqlRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DeleteCloudResourceMysqlRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type DeleteCloudResourceOnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	RecordID   string `protobuf:"bytes,2,opt,name=recordID,proto3" json:"recordID,omitempty"`
	ProjectID  string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	AddonID    string `protobuf:"bytes,4,opt,name=addonID,proto3" json:"addonID,omitempty"`
	InstanceID string `protobuf:"bytes,5,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Vendor     string `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region     string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *DeleteCloudResourceOnsRequest) Reset() {
	*x = DeleteCloudResourceOnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudResourceOnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudResourceOnsRequest) ProtoMessage() {}

func (x *DeleteCloudResourceOnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudResourceOnsRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudResourceOnsRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{133}
}

func (x *DeleteCloudResourceOnsRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *DeleteCloudResourceOnsRequest) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *DeleteCloudResourceOnsRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *DeleteCloudResourceOnsRequest) GetAddonID() string {
	if x != nil {
		return x.AddonID
	}
	return ""
}

func (x *DeleteCloudResourceOnsRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *DeleteCloudResourceOnsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DeleteCloudResourceOnsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type DeleteCloudResourceOssRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	RecordID   string `protobuf:"bytes,2,opt,name=recordID,proto3" json:"recordID,omitempty"`
	ProjectID  string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	AddonID    string `protobuf:"bytes,4,opt,name=addonID,proto3" json:"addonID,omitempty"`
	InstanceID string `protobuf:"bytes,5,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Vendor     string `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region     string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *DeleteCloudResourceOssRequest) Reset() {
	*x = DeleteCloudResourceOssRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudResourceOssRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudResourceOssRequest) ProtoMessage() {}

func (x *DeleteCloudResourceOssRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudResourceOssRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudResourceOssRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{134}
}

func (x *DeleteCloudResourceOssRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *DeleteCloudResourceOssRequest) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *DeleteCloudResourceOssRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *DeleteCloudResourceOssRequest) GetAddonID() string {
	if x != nil {
		return x.AddonID
	}
	return ""
}

func (x *DeleteCloudResourceOssRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *DeleteCloudResourceOssRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DeleteCloudResourceOssRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type DeleteCloudResourceRedisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	RecordID   string `protobuf:"bytes,2,opt,name=recordID,proto3" json:"recordID,omitempty"`
	ProjectID  string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	AddonID    string `protobuf:"bytes,4,opt,name=addonID,proto3" json:"addonID,omitempty"`
	InstanceID string `protobuf:"bytes,5,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Vendor     string `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region     string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *DeleteCloudResourceRedisRequest) Reset() {
	*x = DeleteCloudResourceRedisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudResourceRedisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudResourceRedisRequest) ProtoMessage() {}

func (x *DeleteCloudResourceRedisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudResourceRedisRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudResourceRedisRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{135}
}

func (x *DeleteCloudResourceRedisRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *DeleteCloudResourceRedisRequest) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *DeleteCloudResourceRedisRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *DeleteCloudResourceRedisRequest) GetAddonID() string {
	if x != nil {
		return x.AddonID
	}
	return ""
}

func (x *DeleteCloudResourceRedisRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *DeleteCloudResourceRedisRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DeleteCloudResourceRedisRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type EdgeHostOffline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteIP string `protobuf:"bytes,1,opt,name=siteIP,proto3" json:"siteIP,omitempty"`
	ID     string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"` // generated from path variable: ID. You should change the proto type if necessary.
}

func (x *EdgeHostOffline) Reset() {
	*x = EdgeHostOffline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeHostOffline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeHostOffline) ProtoMessage() {}

func (x *EdgeHostOffline) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeHostOffline.ProtoReflect.Descriptor instead.
func (*EdgeHostOffline) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{136}
}

func (x *EdgeHostOffline) GetSiteIP() string {
	if x != nil {
		return x.SiteIP
	}
	return ""
}

func (x *EdgeHostOffline) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string          `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Ctx  *structpb.Value `protobuf:"bytes,3,opt,name=ctx,proto3" json:"ctx,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{137}
}

func (x *ErrorResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ErrorResponse) GetCtx() *structpb.Value {
	if x != nil {
		return x.Ctx
	}
	return nil
}

type GetCloudResourceECSTrendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCloudResourceECSTrendResponse) Reset() {
	*x = GetCloudResourceECSTrendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudResourceECSTrendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudResourceECSTrendResponse) ProtoMessage() {}

func (x *GetCloudResourceECSTrendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudResourceECSTrendResponse.ProtoReflect.Descriptor instead.
func (*GetCloudResourceECSTrendResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{138}
}

func (x *GetCloudResourceECSTrendResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type GrantMysqlAccountPrivilegeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor            string            `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region            string            `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	InstanceID        string            `protobuf:"bytes,3,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Account           string            `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	AccountPrivileges []*structpb.Value `protobuf:"bytes,5,rep,name=accountPrivileges,proto3" json:"accountPrivileges,omitempty"`
}

func (x *GrantMysqlAccountPrivilegeRequest) Reset() {
	*x = GrantMysqlAccountPrivilegeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantMysqlAccountPrivilegeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantMysqlAccountPrivilegeRequest) ProtoMessage() {}

func (x *GrantMysqlAccountPrivilegeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantMysqlAccountPrivilegeRequest.ProtoReflect.Descriptor instead.
func (*GrantMysqlAccountPrivilegeRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{139}
}

func (x *GrantMysqlAccountPrivilegeRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GrantMysqlAccountPrivilegeRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GrantMysqlAccountPrivilegeRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *GrantMysqlAccountPrivilegeRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GrantMysqlAccountPrivilegeRequest) GetAccountPrivileges() []*structpb.Value {
	if x != nil {
		return x.AccountPrivileges
	}
	return nil
}

type GrantMysqlAccountPrivilegeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GrantMysqlAccountPrivilegeResponse) Reset() {
	*x = GrantMysqlAccountPrivilegeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantMysqlAccountPrivilegeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantMysqlAccountPrivilegeResponse) ProtoMessage() {}

func (x *GrantMysqlAccountPrivilegeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantMysqlAccountPrivilegeResponse.ProtoReflect.Descriptor instead.
func (*GrantMysqlAccountPrivilegeResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{140}
}

func (x *GrantMysqlAccountPrivilegeResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type HandleCloudResourceECSData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedInstances []*structpb.Value `protobuf:"bytes,1,rep,name=failedInstances,proto3" json:"failedInstances,omitempty"`
}

func (x *HandleCloudResourceECSData) Reset() {
	*x = HandleCloudResourceECSData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleCloudResourceECSData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleCloudResourceECSData) ProtoMessage() {}

func (x *HandleCloudResourceECSData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleCloudResourceECSData.ProtoReflect.Descriptor instead.
func (*HandleCloudResourceECSData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{141}
}

func (x *HandleCloudResourceECSData) GetFailedInstances() []*structpb.Value {
	if x != nil {
		return x.FailedInstances
	}
	return nil
}

type HandleCloudResourceECSDataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	InstanceId string `protobuf:"bytes,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
}

func (x *HandleCloudResourceECSDataResult) Reset() {
	*x = HandleCloudResourceECSDataResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleCloudResourceECSDataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleCloudResourceECSDataResult) ProtoMessage() {}

func (x *HandleCloudResourceECSDataResult) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleCloudResourceECSDataResult.ProtoReflect.Descriptor instead.
func (*HandleCloudResourceECSDataResult) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{142}
}

func (x *HandleCloudResourceECSDataResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HandleCloudResourceECSDataResult) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type HandleCloudResourceECSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *HandleCloudResourceECSResponse) Reset() {
	*x = HandleCloudResourceECSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleCloudResourceECSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleCloudResourceECSResponse) ProtoMessage() {}

func (x *HandleCloudResourceECSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleCloudResourceECSResponse.ProtoReflect.Descriptor instead.
func (*HandleCloudResourceECSResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{143}
}

func (x *HandleCloudResourceECSResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type HandleCloudResourceEcsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor      string   `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region      string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	InstanceIds []string `protobuf:"bytes,3,rep,name=instanceIds,proto3" json:"instanceIds,omitempty"`
}

func (x *HandleCloudResourceEcsRequest) Reset() {
	*x = HandleCloudResourceEcsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleCloudResourceEcsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleCloudResourceEcsRequest) ProtoMessage() {}

func (x *HandleCloudResourceEcsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleCloudResourceEcsRequest.ProtoReflect.Descriptor instead.
func (*HandleCloudResourceEcsRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{144}
}

func (x *HandleCloudResourceEcsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *HandleCloudResourceEcsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *HandleCloudResourceEcsRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

type K8SClusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *K8SClusters) Reset() {
	*x = K8SClusters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SClusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SClusters) ProtoMessage() {}

func (x *K8SClusters) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SClusters.ProtoReflect.Descriptor instead.
func (*K8SClusters) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{145}
}

func (x *K8SClusters) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       string `protobuf:"bytes,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Vendor      string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
	AccessKey   string `protobuf:"bytes,3,opt,name=accessKey,json=accessKeyID,proto3" json:"accessKey,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ListCloudAccount) Reset() {
	*x = ListCloudAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudAccount) ProtoMessage() {}

func (x *ListCloudAccount) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudAccount.ProtoReflect.Descriptor instead.
func (*ListCloudAccount) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{146}
}

func (x *ListCloudAccount) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *ListCloudAccount) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCloudAccount) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *ListCloudAccount) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ListCloudAccountData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListCloudAccountData) Reset() {
	*x = ListCloudAccountData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudAccountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudAccountData) ProtoMessage() {}

func (x *ListCloudAccountData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudAccountData.ProtoReflect.Descriptor instead.
func (*ListCloudAccountData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{147}
}

func (x *ListCloudAccountData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCloudAccountData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type ListCloudAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudAccountResponse) Reset() {
	*x = ListCloudAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudAccountResponse) ProtoMessage() {}

func (x *ListCloudAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudAccountResponse.ProtoReflect.Descriptor instead.
func (*ListCloudAccountResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{148}
}

func (x *ListCloudAccountResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudGateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slbs     []*structpb.Value `protobuf:"bytes,1,rep,name=slbs,proto3" json:"slbs,omitempty"`
	Gateways []*structpb.Value `protobuf:"bytes,2,rep,name=gateways,proto3" json:"gateways,omitempty"`
}

func (x *ListCloudGateway) Reset() {
	*x = ListCloudGateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudGateway) ProtoMessage() {}

func (x *ListCloudGateway) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudGateway.ProtoReflect.Descriptor instead.
func (*ListCloudGateway) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{149}
}

func (x *ListCloudGateway) GetSlbs() []*structpb.Value {
	if x != nil {
		return x.Slbs
	}
	return nil
}

func (x *ListCloudGateway) GetGateways() []*structpb.Value {
	if x != nil {
		return x.Gateways
	}
	return nil
}

type ListCloudResourceECS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string            `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	StartTime      string            `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	RegionID       string            `protobuf:"bytes,3,opt,name=regionID,proto3" json:"regionID,omitempty"`
	RegionName     string            `protobuf:"bytes,4,opt,name=regionName,proto3" json:"regionName,omitempty"`
	ChargeType     string            `protobuf:"bytes,5,opt,name=chargeType,proto3" json:"chargeType,omitempty"`
	Vendor         string            `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty"`
	InnerIpAddress string            `protobuf:"bytes,7,opt,name=innerIpAddress,proto3" json:"innerIpAddress,omitempty"`
	HostName       string            `protobuf:"bytes,8,opt,name=hostName,json=hostname,proto3" json:"hostName,omitempty"`
	Memory         int64             `protobuf:"varint,9,opt,name=memory,proto3" json:"memory,omitempty"`
	CPU            int64             `protobuf:"varint,10,opt,name=cPU,json=cpu,proto3" json:"cPU,omitempty"`
	ExpireTime     string            `protobuf:"bytes,11,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
	OsName         string            `protobuf:"bytes,12,opt,name=osName,proto3" json:"osName,omitempty"`
	Status         string            `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	Tag            map[string]string `protobuf:"bytes,14,rep,name=tag,proto3" json:"tag,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListCloudResourceECS) Reset() {
	*x = ListCloudResourceECS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceECS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceECS) ProtoMessage() {}

func (x *ListCloudResourceECS) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceECS.ProtoReflect.Descriptor instead.
func (*ListCloudResourceECS) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{150}
}

func (x *ListCloudResourceECS) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ListCloudResourceECS) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ListCloudResourceECS) GetRegionID() string {
	if x != nil {
		return x.RegionID
	}
	return ""
}

func (x *ListCloudResourceECS) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *ListCloudResourceECS) GetChargeType() string {
	if x != nil {
		return x.ChargeType
	}
	return ""
}

func (x *ListCloudResourceECS) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCloudResourceECS) GetInnerIpAddress() string {
	if x != nil {
		return x.InnerIpAddress
	}
	return ""
}

func (x *ListCloudResourceECS) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ListCloudResourceECS) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ListCloudResourceECS) GetCPU() int64 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *ListCloudResourceECS) GetExpireTime() string {
	if x != nil {
		return x.ExpireTime
	}
	return ""
}

func (x *ListCloudResourceECS) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *ListCloudResourceECS) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListCloudResourceECS) GetTag() map[string]string {
	if x != nil {
		return x.Tag
	}
	return nil
}

type ListCloudResourceECSData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListCloudResourceECSData) Reset() {
	*x = ListCloudResourceECSData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceECSData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceECSData) ProtoMessage() {}

func (x *ListCloudResourceECSData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceECSData.ProtoReflect.Descriptor instead.
func (*ListCloudResourceECSData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{151}
}

func (x *ListCloudResourceECSData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCloudResourceECSData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type ListCloudResourceECSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor         string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region         string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Cluster        string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	InnerIpAddress string `protobuf:"bytes,4,opt,name=innerIpAddress,proto3" json:"innerIpAddress,omitempty"`
	PageNo         int64  `protobuf:"varint,5,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize       int64  `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ListCloudResourceECSRequest) Reset() {
	*x = ListCloudResourceECSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceECSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceECSRequest) ProtoMessage() {}

func (x *ListCloudResourceECSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceECSRequest.ProtoReflect.Descriptor instead.
func (*ListCloudResourceECSRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{152}
}

func (x *ListCloudResourceECSRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCloudResourceECSRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudResourceECSRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ListCloudResourceECSRequest) GetInnerIpAddress() string {
	if x != nil {
		return x.InnerIpAddress
	}
	return ""
}

func (x *ListCloudResourceECSRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListCloudResourceECSRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListCloudResourceECSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudResourceECSResponse) Reset() {
	*x = ListCloudResourceECSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceECSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceECSResponse) ProtoMessage() {}

func (x *ListCloudResourceECSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceECSResponse.ProtoReflect.Descriptor instead.
func (*ListCloudResourceECSResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{153}
}

func (x *ListCloudResourceECSResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudResourceGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor    string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VpcID     string `protobuf:"bytes,3,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	ProjectID string `protobuf:"bytes,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Workspace string `protobuf:"bytes,5,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *ListCloudResourceGatewayRequest) Reset() {
	*x = ListCloudResourceGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceGatewayRequest) ProtoMessage() {}

func (x *ListCloudResourceGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceGatewayRequest.ProtoReflect.Descriptor instead.
func (*ListCloudResourceGatewayRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{154}
}

func (x *ListCloudResourceGatewayRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCloudResourceGatewayRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudResourceGatewayRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ListCloudResourceGatewayRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListCloudResourceGatewayRequest) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

type ListCloudResourceGatewayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudResourceGatewayResponse) Reset() {
	*x = ListCloudResourceGatewayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceGatewayResponse) ProtoMessage() {}

func (x *ListCloudResourceGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceGatewayResponse.ProtoReflect.Descriptor instead.
func (*ListCloudResourceGatewayResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{155}
}

func (x *ListCloudResourceGatewayResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudResourceMysqlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor    string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VpcID     string `protobuf:"bytes,3,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	ProjectID string `protobuf:"bytes,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Workspace string `protobuf:"bytes,5,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *ListCloudResourceMysqlRequest) Reset() {
	*x = ListCloudResourceMysqlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceMysqlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceMysqlRequest) ProtoMessage() {}

func (x *ListCloudResourceMysqlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceMysqlRequest.ProtoReflect.Descriptor instead.
func (*ListCloudResourceMysqlRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{156}
}

func (x *ListCloudResourceMysqlRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCloudResourceMysqlRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudResourceMysqlRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ListCloudResourceMysqlRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListCloudResourceMysqlRequest) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

type ListCloudResourceMysqlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudResourceMysqlResponse) Reset() {
	*x = ListCloudResourceMysqlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceMysqlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceMysqlResponse) ProtoMessage() {}

func (x *ListCloudResourceMysqlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceMysqlResponse.ProtoReflect.Descriptor instead.
func (*ListCloudResourceMysqlResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{157}
}

func (x *ListCloudResourceMysqlResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudResourceOnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor    string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VpcID     string `protobuf:"bytes,3,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	ProjectID string `protobuf:"bytes,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Workspace string `protobuf:"bytes,5,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *ListCloudResourceOnsRequest) Reset() {
	*x = ListCloudResourceOnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceOnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceOnsRequest) ProtoMessage() {}

func (x *ListCloudResourceOnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceOnsRequest.ProtoReflect.Descriptor instead.
func (*ListCloudResourceOnsRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{158}
}

func (x *ListCloudResourceOnsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCloudResourceOnsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudResourceOnsRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ListCloudResourceOnsRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListCloudResourceOnsRequest) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

type ListCloudResourceOnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudResourceOnsResponse) Reset() {
	*x = ListCloudResourceOnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceOnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceOnsResponse) ProtoMessage() {}

func (x *ListCloudResourceOnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceOnsResponse.ProtoReflect.Descriptor instead.
func (*ListCloudResourceOnsResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{159}
}

func (x *ListCloudResourceOnsResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudResourceOssRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListCloudResourceOssRequest) Reset() {
	*x = ListCloudResourceOssRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceOssRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceOssRequest) ProtoMessage() {}

func (x *ListCloudResourceOssRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceOssRequest.ProtoReflect.Descriptor instead.
func (*ListCloudResourceOssRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{160}
}

func (x *ListCloudResourceOssRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCloudResourceOssRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListCloudResourceOssResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudResourceOssResponse) Reset() {
	*x = ListCloudResourceOssResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceOssResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceOssResponse) ProtoMessage() {}

func (x *ListCloudResourceOssResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceOssResponse.ProtoReflect.Descriptor instead.
func (*ListCloudResourceOssResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{161}
}

func (x *ListCloudResourceOssResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudResourceRedisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListCloudResourceRedisData) Reset() {
	*x = ListCloudResourceRedisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceRedisData) ProtoMessage() {}

func (x *ListCloudResourceRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceRedisData.ProtoReflect.Descriptor instead.
func (*ListCloudResourceRedisData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{162}
}

func (x *ListCloudResourceRedisData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCloudResourceRedisData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type ListCloudResourceRedisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor    string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VpcID     string `protobuf:"bytes,3,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	ProjectID string `protobuf:"bytes,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Workspace string `protobuf:"bytes,5,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *ListCloudResourceRedisRequest) Reset() {
	*x = ListCloudResourceRedisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceRedisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceRedisRequest) ProtoMessage() {}

func (x *ListCloudResourceRedisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceRedisRequest.ProtoReflect.Descriptor instead.
func (*ListCloudResourceRedisRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{163}
}

func (x *ListCloudResourceRedisRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCloudResourceRedisRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudResourceRedisRequest) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ListCloudResourceRedisRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListCloudResourceRedisRequest) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

type ListCloudResourceRedisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudResourceRedisResponse) Reset() {
	*x = ListCloudResourceRedisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceRedisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceRedisResponse) ProtoMessage() {}

func (x *ListCloudResourceRedisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceRedisResponse.ProtoReflect.Descriptor instead.
func (*ListCloudResourceRedisResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{164}
}

func (x *ListCloudResourceRedisResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudResourceRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionID  string `protobuf:"bytes,1,opt,name=regionID,proto3" json:"regionID,omitempty"`
	LocalName string `protobuf:"bytes,2,opt,name=localName,proto3" json:"localName,omitempty"`
}

func (x *ListCloudResourceRegion) Reset() {
	*x = ListCloudResourceRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceRegion) ProtoMessage() {}

func (x *ListCloudResourceRegion) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceRegion.ProtoReflect.Descriptor instead.
func (*ListCloudResourceRegion) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{165}
}

func (x *ListCloudResourceRegion) GetRegionID() string {
	if x != nil {
		return x.RegionID
	}
	return ""
}

func (x *ListCloudResourceRegion) GetLocalName() string {
	if x != nil {
		return x.LocalName
	}
	return ""
}

type ListCloudResourceRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *ListCloudResourceRegionRequest) Reset() {
	*x = ListCloudResourceRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceRegionRequest) ProtoMessage() {}

func (x *ListCloudResourceRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceRegionRequest.ProtoReflect.Descriptor instead.
func (*ListCloudResourceRegionRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{166}
}

func (x *ListCloudResourceRegionRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

type ListCloudResourceRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudResourceRegionResponse) Reset() {
	*x = ListCloudResourceRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceRegionResponse) ProtoMessage() {}

func (x *ListCloudResourceRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceRegionResponse.ProtoReflect.Descriptor instead.
func (*ListCloudResourceRegionResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{167}
}

func (x *ListCloudResourceRegionResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudResourceVPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor     string            `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Status     string            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	RegionID   string            `protobuf:"bytes,3,opt,name=regionID,proto3" json:"regionID,omitempty"`
	RegionName string            `protobuf:"bytes,4,opt,name=regionName,proto3" json:"regionName,omitempty"`
	VpcID      string            `protobuf:"bytes,5,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	VpcName    string            `protobuf:"bytes,6,opt,name=vpcName,proto3" json:"vpcName,omitempty"`
	CidrBlock  string            `protobuf:"bytes,7,opt,name=cidrBlock,proto3" json:"cidrBlock,omitempty"`
	VswNum     int64             `protobuf:"varint,8,opt,name=vswNum,proto3" json:"vswNum,omitempty"`
	Tags       map[string]string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListCloudResourceVPC) Reset() {
	*x = ListCloudResourceVPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceVPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceVPC) ProtoMessage() {}

func (x *ListCloudResourceVPC) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceVPC.ProtoReflect.Descriptor instead.
func (*ListCloudResourceVPC) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{168}
}

func (x *ListCloudResourceVPC) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCloudResourceVPC) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListCloudResourceVPC) GetRegionID() string {
	if x != nil {
		return x.RegionID
	}
	return ""
}

func (x *ListCloudResourceVPC) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *ListCloudResourceVPC) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ListCloudResourceVPC) GetVpcName() string {
	if x != nil {
		return x.VpcName
	}
	return ""
}

func (x *ListCloudResourceVPC) GetCidrBlock() string {
	if x != nil {
		return x.CidrBlock
	}
	return ""
}

func (x *ListCloudResourceVPC) GetVswNum() int64 {
	if x != nil {
		return x.VswNum
	}
	return 0
}

func (x *ListCloudResourceVPC) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ListCloudResourceVPCData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListCloudResourceVPCData) Reset() {
	*x = ListCloudResourceVPCData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceVPCData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceVPCData) ProtoMessage() {}

func (x *ListCloudResourceVPCData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceVPCData.ProtoReflect.Descriptor instead.
func (*ListCloudResourceVPCData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{169}
}

func (x *ListCloudResourceVPCData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCloudResourceVPCData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type ListCloudResourceVPCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor  string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region  string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Cluster string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *ListCloudResourceVPCRequest) Reset() {
	*x = ListCloudResourceVPCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceVPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceVPCRequest) ProtoMessage() {}

func (x *ListCloudResourceVPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceVPCRequest.ProtoReflect.Descriptor instead.
func (*ListCloudResourceVPCRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{170}
}

func (x *ListCloudResourceVPCRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCloudResourceVPCRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudResourceVPCRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

type ListCloudResourceVPCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudResourceVPCResponse) Reset() {
	*x = ListCloudResourceVPCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceVPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceVPCResponse) ProtoMessage() {}

func (x *ListCloudResourceVPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceVPCResponse.ProtoReflect.Descriptor instead.
func (*ListCloudResourceVPCResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{171}
}

func (x *ListCloudResourceVPCResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudResourceVSW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VswName   string            `protobuf:"bytes,1,opt,name=vswName,proto3" json:"vswName,omitempty"`
	VSwitchID string            `protobuf:"bytes,2,opt,name=vSwitchID,proto3" json:"vSwitchID,omitempty"`
	CidrBlock string            `protobuf:"bytes,3,opt,name=cidrBlock,proto3" json:"cidrBlock,omitempty"`
	VpcID     string            `protobuf:"bytes,4,opt,name=vpcID,proto3" json:"vpcID,omitempty"`
	Status    string            `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Region    string            `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	ZoneID    string            `protobuf:"bytes,7,opt,name=zoneID,proto3" json:"zoneID,omitempty"`
	ZoneName  string            `protobuf:"bytes,8,opt,name=zoneName,proto3" json:"zoneName,omitempty"`
	Tags      map[string]string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListCloudResourceVSW) Reset() {
	*x = ListCloudResourceVSW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceVSW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceVSW) ProtoMessage() {}

func (x *ListCloudResourceVSW) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceVSW.ProtoReflect.Descriptor instead.
func (*ListCloudResourceVSW) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{172}
}

func (x *ListCloudResourceVSW) GetVswName() string {
	if x != nil {
		return x.VswName
	}
	return ""
}

func (x *ListCloudResourceVSW) GetVSwitchID() string {
	if x != nil {
		return x.VSwitchID
	}
	return ""
}

func (x *ListCloudResourceVSW) GetCidrBlock() string {
	if x != nil {
		return x.CidrBlock
	}
	return ""
}

func (x *ListCloudResourceVSW) GetVpcID() string {
	if x != nil {
		return x.VpcID
	}
	return ""
}

func (x *ListCloudResourceVSW) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListCloudResourceVSW) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudResourceVSW) GetZoneID() string {
	if x != nil {
		return x.ZoneID
	}
	return ""
}

func (x *ListCloudResourceVSW) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *ListCloudResourceVSW) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ListCloudResourceVSWData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListCloudResourceVSWData) Reset() {
	*x = ListCloudResourceVSWData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceVSWData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceVSWData) ProtoMessage() {}

func (x *ListCloudResourceVSWData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceVSWData.ProtoReflect.Descriptor instead.
func (*ListCloudResourceVSWData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{173}
}

func (x *ListCloudResourceVSWData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCloudResourceVSWData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type ListCloudResourceVSWRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor         string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region         string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Cluster        string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	InnerIpAddress string `protobuf:"bytes,4,opt,name=innerIpAddress,proto3" json:"innerIpAddress,omitempty"`
	PageNo         int64  `protobuf:"varint,5,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize       int64  `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ListCloudResourceVSWRequest) Reset() {
	*x = ListCloudResourceVSWRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceVSWRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceVSWRequest) ProtoMessage() {}

func (x *ListCloudResourceVSWRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceVSWRequest.ProtoReflect.Descriptor instead.
func (*ListCloudResourceVSWRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{174}
}

func (x *ListCloudResourceVSWRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCloudResourceVSWRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudResourceVSWRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ListCloudResourceVSWRequest) GetInnerIpAddress() string {
	if x != nil {
		return x.InnerIpAddress
	}
	return ""
}

func (x *ListCloudResourceVSWRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListCloudResourceVSWRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListCloudResourceVSWResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudResourceVSWResponse) Reset() {
	*x = ListCloudResourceVSWResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceVSWResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceVSWResponse) ProtoMessage() {}

func (x *ListCloudResourceVSWResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceVSWResponse.ProtoReflect.Descriptor instead.
func (*ListCloudResourceVSWResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{175}
}

func (x *ListCloudResourceVSWResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCloudResourceZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneID    string `protobuf:"bytes,1,opt,name=zoneID,proto3" json:"zoneID,omitempty"`
	LocalName string `protobuf:"bytes,2,opt,name=localName,proto3" json:"localName,omitempty"`
}

func (x *ListCloudResourceZone) Reset() {
	*x = ListCloudResourceZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceZone) ProtoMessage() {}

func (x *ListCloudResourceZone) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceZone.ProtoReflect.Descriptor instead.
func (*ListCloudResourceZone) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{176}
}

func (x *ListCloudResourceZone) GetZoneID() string {
	if x != nil {
		return x.ZoneID
	}
	return ""
}

func (x *ListCloudResourceZone) GetLocalName() string {
	if x != nil {
		return x.LocalName
	}
	return ""
}

type ListCloudResourceZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ListCloudResourceZoneRequest) Reset() {
	*x = ListCloudResourceZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceZoneRequest) ProtoMessage() {}

func (x *ListCloudResourceZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceZoneRequest.ProtoReflect.Descriptor instead.
func (*ListCloudResourceZoneRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{177}
}

func (x *ListCloudResourceZoneRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCloudResourceZoneRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type ListCloudResourceZoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCloudResourceZoneResponse) Reset() {
	*x = ListCloudResourceZoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudResourceZoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudResourceZoneResponse) ProtoMessage() {}

func (x *ListCloudResourceZoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudResourceZoneResponse.ProtoReflect.Descriptor instead.
func (*ListCloudResourceZoneResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{178}
}

func (x *ListCloudResourceZoneResponse) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type MonthAddTrend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    []int64           `protobuf:"varint,1,rep,packed,name=time,proto3" json:"time,omitempty"`
	Results []*structpb.Value `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	Total   int64             `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Title   string            `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *MonthAddTrend) Reset() {
	*x = MonthAddTrend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthAddTrend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthAddTrend) ProtoMessage() {}

func (x *MonthAddTrend) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthAddTrend.ProtoReflect.Descriptor instead.
func (*MonthAddTrend) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{179}
}

func (x *MonthAddTrend) GetTime() []int64 {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MonthAddTrend) GetResults() []*structpb.Value {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *MonthAddTrend) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MonthAddTrend) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type MonthAddTrendData_0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*structpb.Value `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MonthAddTrendData_0) Reset() {
	*x = MonthAddTrendData_0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthAddTrendData_0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthAddTrendData_0) ProtoMessage() {}

func (x *MonthAddTrendData_0) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthAddTrendData_0.ProtoReflect.Descriptor instead.
func (*MonthAddTrendData_0) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{180}
}

func (x *MonthAddTrendData_0) GetData() []*structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type MysqlAccountPrivilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DBName           string `protobuf:"bytes,1,opt,name=dBName,json=dbName,proto3" json:"dBName,omitempty"`
	AccountPrivilege string `protobuf:"bytes,2,opt,name=accountPrivilege,proto3" json:"accountPrivilege,omitempty"`
}

func (x *MysqlAccountPrivilege) Reset() {
	*x = MysqlAccountPrivilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlAccountPrivilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlAccountPrivilege) ProtoMessage() {}

func (x *MysqlAccountPrivilege) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlAccountPrivilege.ProtoReflect.Descriptor instead.
func (*MysqlAccountPrivilege) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{181}
}

func (x *MysqlAccountPrivilege) GetDBName() string {
	if x != nil {
		return x.DBName
	}
	return ""
}

func (x *MysqlAccountPrivilege) GetAccountPrivilege() string {
	if x != nil {
		return x.AccountPrivilege
	}
	return ""
}

type MysqlDataBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DBName                    string          `protobuf:"bytes,1,opt,name=dBName,json=dbName,proto3" json:"dBName,omitempty"`
	AddonID                   string          `protobuf:"bytes,2,opt,name=addonID,proto3" json:"addonID,omitempty"`
	CharacterSetName          string          `protobuf:"bytes,3,opt,name=characterSetName,proto3" json:"characterSetName,omitempty"`
	Description               string          `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CloudResourceMysqlAccount *structpb.Value `protobuf:"bytes,5,opt,name=cloudResourceMysqlAccount,proto3" json:"cloudResourceMysqlAccount,omitempty"`
}

func (x *MysqlDataBaseInfo) Reset() {
	*x = MysqlDataBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlDataBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlDataBaseInfo) ProtoMessage() {}

func (x *MysqlDataBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlDataBaseInfo.ProtoReflect.Descriptor instead.
func (*MysqlDataBaseInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{182}
}

func (x *MysqlDataBaseInfo) GetDBName() string {
	if x != nil {
		return x.DBName
	}
	return ""
}

func (x *MysqlDataBaseInfo) GetAddonID() string {
	if x != nil {
		return x.AddonID
	}
	return ""
}

func (x *MysqlDataBaseInfo) GetCharacterSetName() string {
	if x != nil {
		return x.CharacterSetName
	}
	return ""
}

func (x *MysqlDataBaseInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MysqlDataBaseInfo) GetCloudResourceMysqlAccount() *structpb.Value {
	if x != nil {
		return x.CloudResourceMysqlAccount
	}
	return nil
}

type OfflineEdgeClusterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID     uint64 `protobuf:"varint,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
	PreCheckHint string `protobuf:"bytes,2,opt,name=preCheckHint,proto3" json:"preCheckHint,omitempty"`
}

func (x *OfflineEdgeClusterData) Reset() {
	*x = OfflineEdgeClusterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineEdgeClusterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineEdgeClusterData) ProtoMessage() {}

func (x *OfflineEdgeClusterData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineEdgeClusterData.ProtoReflect.Descriptor instead.
func (*OfflineEdgeClusterData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{183}
}

func (x *OfflineEdgeClusterData) GetRecordID() uint64 {
	if x != nil {
		return x.RecordID
	}
	return 0
}

func (x *OfflineEdgeClusterData) GetPreCheckHint() string {
	if x != nil {
		return x.PreCheckHint
	}
	return ""
}

type OfflineEdgeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint64 `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ClusterName string `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	PreCheck    bool   `protobuf:"varint,3,opt,name=preCheck,proto3" json:"preCheck,omitempty"`
	Force       bool   `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *OfflineEdgeClusterRequest) Reset() {
	*x = OfflineEdgeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineEdgeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineEdgeClusterRequest) ProtoMessage() {}

func (x *OfflineEdgeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineEdgeClusterRequest.ProtoReflect.Descriptor instead.
func (*OfflineEdgeClusterRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{184}
}

func (x *OfflineEdgeClusterRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *OfflineEdgeClusterRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *OfflineEdgeClusterRequest) GetPreCheck() bool {
	if x != nil {
		return x.PreCheck
	}
	return false
}

func (x *OfflineEdgeClusterRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type OfflineEdgeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OfflineEdgeClusterResponse) Reset() {
	*x = OfflineEdgeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineEdgeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineEdgeClusterResponse) ProtoMessage() {}

func (x *OfflineEdgeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineEdgeClusterResponse.ProtoReflect.Descriptor instead.
func (*OfflineEdgeClusterResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{185}
}

func (x *OfflineEdgeClusterResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type OnsTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicName    string            `protobuf:"bytes,1,opt,name=topicName,proto3" json:"topicName,omitempty"`
	MessageType  string            `protobuf:"bytes,2,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Relation     int64             `protobuf:"varint,3,opt,name=relation,proto3" json:"relation,omitempty"`
	RelationName string            `protobuf:"bytes,4,opt,name=relationName,proto3" json:"relationName,omitempty"`
	Remark       string            `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime   string            `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Tags         map[string]string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OnsTopic) Reset() {
	*x = OnsTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnsTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnsTopic) ProtoMessage() {}

func (x *OnsTopic) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnsTopic.ProtoReflect.Descriptor instead.
func (*OnsTopic) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{186}
}

func (x *OnsTopic) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *OnsTopic) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *OnsTopic) GetRelation() int64 {
	if x != nil {
		return x.Relation
	}
	return 0
}

func (x *OnsTopic) GetRelationName() string {
	if x != nil {
		return x.RelationName
	}
	return ""
}

func (x *OnsTopic) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *OnsTopic) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *OnsTopic) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type OpsAddonStatusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *OpsAddonStatusData) Reset() {
	*x = OpsAddonStatusData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpsAddonStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpsAddonStatusData) ProtoMessage() {}

func (x *OpsAddonStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpsAddonStatusData.ProtoReflect.Descriptor instead.
func (*OpsAddonStatusData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{187}
}

func (x *OpsAddonStatusData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type OpsAddonStatusQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonName string `protobuf:"bytes,1,opt,name=addonName,proto3" json:"addonName,omitempty"`
	AddonID   string `protobuf:"bytes,2,opt,name=addonID,proto3" json:"addonID,omitempty"`
}

func (x *OpsAddonStatusQueryRequest) Reset() {
	*x = OpsAddonStatusQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpsAddonStatusQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpsAddonStatusQueryRequest) ProtoMessage() {}

func (x *OpsAddonStatusQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpsAddonStatusQueryRequest.ProtoReflect.Descriptor instead.
func (*OpsAddonStatusQueryRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{188}
}

func (x *OpsAddonStatusQueryRequest) GetAddonName() string {
	if x != nil {
		return x.AddonName
	}
	return ""
}

func (x *OpsAddonStatusQueryRequest) GetAddonID() string {
	if x != nil {
		return x.AddonID
	}
	return ""
}

type OpsAddonStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OpsAddonStatusResponse) Reset() {
	*x = OpsAddonStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpsAddonStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpsAddonStatusResponse) ProtoMessage() {}

func (x *OpsAddonStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpsAddonStatusResponse.ProtoReflect.Descriptor instead.
func (*OpsAddonStatusResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{189}
}

func (x *OpsAddonStatusResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type OrgClusterInfoBasicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName      string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	OrgID            uint64 `protobuf:"varint,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
	OrgName          string `protobuf:"bytes,3,opt,name=orgName,proto3" json:"orgName,omitempty"`
	OrgDisplayName   string `protobuf:"bytes,4,opt,name=orgDisplayName,proto3" json:"orgDisplayName,omitempty"`
	ClusterType      string `protobuf:"bytes,5,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	Version          string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	CreateTime       string `protobuf:"bytes,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	IsCentralCluster bool   `protobuf:"varint,8,opt,name=isCentralCluster,proto3" json:"isCentralCluster,omitempty"`
}

func (x *OrgClusterInfoBasicData) Reset() {
	*x = OrgClusterInfoBasicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgClusterInfoBasicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgClusterInfoBasicData) ProtoMessage() {}

func (x *OrgClusterInfoBasicData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgClusterInfoBasicData.ProtoReflect.Descriptor instead.
func (*OrgClusterInfoBasicData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{190}
}

func (x *OrgClusterInfoBasicData) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *OrgClusterInfoBasicData) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *OrgClusterInfoBasicData) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *OrgClusterInfoBasicData) GetOrgDisplayName() string {
	if x != nil {
		return x.OrgDisplayName
	}
	return ""
}

func (x *OrgClusterInfoBasicData) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *OrgClusterInfoBasicData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OrgClusterInfoBasicData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *OrgClusterInfoBasicData) GetIsCentralCluster() bool {
	if x != nil {
		return x.IsCentralCluster
	}
	return false
}

type OrgClusterInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *OrgClusterInfoData) Reset() {
	*x = OrgClusterInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgClusterInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgClusterInfoData) ProtoMessage() {}

func (x *OrgClusterInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgClusterInfoData.ProtoReflect.Descriptor instead.
func (*OrgClusterInfoData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{191}
}

func (x *OrgClusterInfoData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OrgClusterInfoData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type OrgClusterInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo      int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize    int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrgName     string `protobuf:"bytes,3,opt,name=orgName,proto3" json:"orgName,omitempty"`
	ClusterType string `protobuf:"bytes,4,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
}

func (x *OrgClusterInfoRequest) Reset() {
	*x = OrgClusterInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgClusterInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgClusterInfoRequest) ProtoMessage() {}

func (x *OrgClusterInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgClusterInfoRequest.ProtoReflect.Descriptor instead.
func (*OrgClusterInfoRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{192}
}

func (x *OrgClusterInfoRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *OrgClusterInfoRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OrgClusterInfoRequest) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *OrgClusterInfoRequest) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

type OrgClusterInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OrgClusterInfoResponse) Reset() {
	*x = OrgClusterInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgClusterInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgClusterInfoResponse) ProtoMessage() {}

func (x *OrgClusterInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgClusterInfoResponse.ProtoReflect.Descriptor instead.
func (*OrgClusterInfoResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{193}
}

func (x *OrgClusterInfoResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type OrgRunningTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID           uint64                 `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ProjectID       uint64                 `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ApplicationID   uint64                 `protobuf:"varint,3,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	PipelineID      uint64                 `protobuf:"varint,4,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	TaskID          uint64                 `protobuf:"varint,5,opt,name=taskID,proto3" json:"taskID,omitempty"`
	QueueTimeSec    int64                  `protobuf:"varint,6,opt,name=queueTimeSec,proto3" json:"queueTimeSec,omitempty"`
	CostTimeSec     int64                  `protobuf:"varint,7,opt,name=costTimeSec,proto3" json:"costTimeSec,omitempty"`
	ProjectName     string                 `protobuf:"bytes,8,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ApplicationName string                 `protobuf:"bytes,9,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	TaskName        string                 `protobuf:"bytes,10,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Status          string                 `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Env             string                 `protobuf:"bytes,12,opt,name=env,proto3" json:"env,omitempty"`
	ClusterName     string                 `protobuf:"bytes,13,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	TaskType        string                 `protobuf:"bytes,14,opt,name=taskType,proto3" json:"taskType,omitempty"`
	UserID          string                 `protobuf:"bytes,15,opt,name=userID,proto3" json:"userID,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	RuntimeID       string                 `protobuf:"bytes,17,opt,name=runtimeID,proto3" json:"runtimeID,omitempty"`
	ReleaseID       string                 `protobuf:"bytes,18,opt,name=releaseID,proto3" json:"releaseID,omitempty"`
}

func (x *OrgRunningTasks) Reset() {
	*x = OrgRunningTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgRunningTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgRunningTasks) ProtoMessage() {}

func (x *OrgRunningTasks) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgRunningTasks.ProtoReflect.Descriptor instead.
func (*OrgRunningTasks) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{194}
}

func (x *OrgRunningTasks) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *OrgRunningTasks) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *OrgRunningTasks) GetApplicationID() uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *OrgRunningTasks) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *OrgRunningTasks) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *OrgRunningTasks) GetQueueTimeSec() int64 {
	if x != nil {
		return x.QueueTimeSec
	}
	return 0
}

func (x *OrgRunningTasks) GetCostTimeSec() int64 {
	if x != nil {
		return x.CostTimeSec
	}
	return 0
}

func (x *OrgRunningTasks) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *OrgRunningTasks) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *OrgRunningTasks) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *OrgRunningTasks) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrgRunningTasks) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *OrgRunningTasks) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *OrgRunningTasks) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *OrgRunningTasks) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OrgRunningTasks) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrgRunningTasks) GetRuntimeID() string {
	if x != nil {
		return x.RuntimeID
	}
	return ""
}

func (x *OrgRunningTasks) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

type OrgRunningTasksData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Tasks []*structpb.Value `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *OrgRunningTasksData) Reset() {
	*x = OrgRunningTasksData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgRunningTasksData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgRunningTasksData) ProtoMessage() {}

func (x *OrgRunningTasksData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgRunningTasksData.ProtoReflect.Descriptor instead.
func (*OrgRunningTasksData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{195}
}

func (x *OrgRunningTasksData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OrgRunningTasksData) GetTasks() []*structpb.Value {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type OrgRunningTasksListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster     string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	AppName     string `protobuf:"bytes,3,opt,name=appName,proto3" json:"appName,omitempty"`
	PipelineID  uint64 `protobuf:"varint,4,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	Status      string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	UserID      string `protobuf:"bytes,6,opt,name=userID,proto3" json:"userID,omitempty"`
	Env         string `protobuf:"bytes,7,opt,name=env,proto3" json:"env,omitempty"`
	Type        string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	StartTime   int64  `protobuf:"varint,9,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime     int64  `protobuf:"varint,10,opt,name=endTime,proto3" json:"endTime,omitempty"`
	PageNo      int64  `protobuf:"varint,11,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize    int64  `protobuf:"varint,12,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *OrgRunningTasksListRequest) Reset() {
	*x = OrgRunningTasksListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgRunningTasksListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgRunningTasksListRequest) ProtoMessage() {}

func (x *OrgRunningTasksListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgRunningTasksListRequest.ProtoReflect.Descriptor instead.
func (*OrgRunningTasksListRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{196}
}

func (x *OrgRunningTasksListRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *OrgRunningTasksListRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *OrgRunningTasksListRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *OrgRunningTasksListRequest) GetPipelineID() uint64 {
	if x != nil {
		return x.PipelineID
	}
	return 0
}

func (x *OrgRunningTasksListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrgRunningTasksListRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OrgRunningTasksListRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *OrgRunningTasksListRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OrgRunningTasksListRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *OrgRunningTasksListRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *OrgRunningTasksListRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *OrgRunningTasksListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type OrgRunningTasksListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OrgRunningTasksListResponse) Reset() {
	*x = OrgRunningTasksListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgRunningTasksListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgRunningTasksListResponse) ProtoMessage() {}

func (x *OrgRunningTasksListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgRunningTasksListResponse.ProtoReflect.Descriptor instead.
func (*OrgRunningTasksListResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{197}
}

func (x *OrgRunningTasksListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type OssBucketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddonID string `protobuf:"bytes,1,opt,name=addonID,proto3" json:"addonID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Acl     string `protobuf:"bytes,3,opt,name=acl,proto3" json:"acl,omitempty"`
}

func (x *OssBucketInfo) Reset() {
	*x = OssBucketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OssBucketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OssBucketInfo) ProtoMessage() {}

func (x *OssBucketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OssBucketInfo.ProtoReflect.Descriptor instead.
func (*OssBucketInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{198}
}

func (x *OssBucketInfo) GetAddonID() string {
	if x != nil {
		return x.AddonID
	}
	return ""
}

func (x *OssBucketInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OssBucketInfo) GetAcl() string {
	if x != nil {
		return x.Acl
	}
	return ""
}

type PrivateSlbInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string `protobuf:"bytes,1,opt,name=ID,json=instanceID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Port int64  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *PrivateSlbInfo) Reset() {
	*x = PrivateSlbInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateSlbInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateSlbInfo) ProtoMessage() {}

func (x *PrivateSlbInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateSlbInfo.ProtoReflect.Descriptor instead.
func (*PrivateSlbInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{199}
}

func (x *PrivateSlbInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PrivateSlbInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrivateSlbInfo) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

type RmNodesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID uint64 `protobuf:"varint,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
}

func (x *RmNodesData) Reset() {
	*x = RmNodesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RmNodesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RmNodesData) ProtoMessage() {}

func (x *RmNodesData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RmNodesData.ProtoReflect.Descriptor instead.
func (*RmNodesData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{200}
}

func (x *RmNodesData) GetRecordID() uint64 {
	if x != nil {
		return x.RecordID
	}
	return 0
}

type RmNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string   `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	OrgID       uint64   `protobuf:"varint,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Hosts       []string `protobuf:"bytes,3,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Password    string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Force       bool     `protobuf:"varint,5,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *RmNodesRequest) Reset() {
	*x = RmNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RmNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RmNodesRequest) ProtoMessage() {}

func (x *RmNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RmNodesRequest.ProtoReflect.Descriptor instead.
func (*RmNodesRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{201}
}

func (x *RmNodesRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RmNodesRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *RmNodesRequest) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *RmNodesRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RmNodesRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RmNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RmNodesResponse) Reset() {
	*x = RmNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RmNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RmNodesResponse) ProtoMessage() {}

func (x *RmNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RmNodesResponse.ProtoReflect.Descriptor instead.
func (*RmNodesResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{202}
}

func (x *RmNodesResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateLabelsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID uint64 `protobuf:"varint,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
}

func (x *UpdateLabelsData) Reset() {
	*x = UpdateLabelsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabelsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelsData) ProtoMessage() {}

func (x *UpdateLabelsData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelsData.ProtoReflect.Descriptor instead.
func (*UpdateLabelsData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{203}
}

func (x *UpdateLabelsData) GetRecordID() uint64 {
	if x != nil {
		return x.RecordID
	}
	return 0
}

type UpdateLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName     string            `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	OrgID           uint64            `protobuf:"varint,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Hosts           []string          `protobuf:"bytes,3,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Labels          []string          `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	LabelsWithValue map[string]string `protobuf:"bytes,5,rep,name=labelsWithValue,proto3" json:"labelsWithValue,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateLabelsRequest) Reset() {
	*x = UpdateLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelsRequest) ProtoMessage() {}

func (x *UpdateLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelsRequest.ProtoReflect.Descriptor instead.
func (*UpdateLabelsRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{204}
}

func (x *UpdateLabelsRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateLabelsRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *UpdateLabelsRequest) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *UpdateLabelsRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateLabelsRequest) GetLabelsWithValue() map[string]string {
	if x != nil {
		return x.LabelsWithValue
	}
	return nil
}

type UpdateLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateLabelsResponse) Reset() {
	*x = UpdateLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelsResponse) ProtoMessage() {}

func (x *UpdateLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelsResponse.ProtoReflect.Descriptor instead.
func (*UpdateLabelsResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{205}
}

func (x *UpdateLabelsResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpgradeClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID            uint64 `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ClusterName      string `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	ClusterType      string `protobuf:"bytes,3,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	Version          string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	IsCentralCluster bool   `protobuf:"varint,5,opt,name=isCentralCluster,proto3" json:"isCentralCluster,omitempty"`
}

func (x *UpgradeClusterInfo) Reset() {
	*x = UpgradeClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeClusterInfo) ProtoMessage() {}

func (x *UpgradeClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeClusterInfo.ProtoReflect.Descriptor instead.
func (*UpgradeClusterInfo) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{206}
}

func (x *UpgradeClusterInfo) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *UpgradeClusterInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpgradeClusterInfo) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *UpgradeClusterInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpgradeClusterInfo) GetIsCentralCluster() bool {
	if x != nil {
		return x.IsCentralCluster
	}
	return false
}

type UpgradeEdgeClusterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID     uint64 `protobuf:"varint,1,opt,name=recordID,proto3" json:"recordID,omitempty"`
	Status       int64  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	PrecheckHint string `protobuf:"bytes,3,opt,name=precheckHint,proto3" json:"precheckHint,omitempty"`
}

func (x *UpgradeEdgeClusterData) Reset() {
	*x = UpgradeEdgeClusterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeEdgeClusterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeEdgeClusterData) ProtoMessage() {}

func (x *UpgradeEdgeClusterData) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeEdgeClusterData.ProtoReflect.Descriptor instead.
func (*UpgradeEdgeClusterData) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{207}
}

func (x *UpgradeEdgeClusterData) GetRecordID() uint64 {
	if x != nil {
		return x.RecordID
	}
	return 0
}

func (x *UpgradeEdgeClusterData) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpgradeEdgeClusterData) GetPrecheckHint() string {
	if x != nil {
		return x.PrecheckHint
	}
	return ""
}

type UpgradeEdgeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID       uint64 `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ClusterName string `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	PreCheck    bool   `protobuf:"varint,3,opt,name=preCheck,json=precheck,proto3" json:"preCheck,omitempty"`
}

func (x *UpgradeEdgeClusterRequest) Reset() {
	*x = UpgradeEdgeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeEdgeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeEdgeClusterRequest) ProtoMessage() {}

func (x *UpgradeEdgeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeEdgeClusterRequest.ProtoReflect.Descriptor instead.
func (*UpgradeEdgeClusterRequest) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{208}
}

func (x *UpgradeEdgeClusterRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *UpgradeEdgeClusterRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpgradeEdgeClusterRequest) GetPreCheck() bool {
	if x != nil {
		return x.PreCheck
	}
	return false
}

type UpgradeEdgeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpgradeEdgeClusterResponse) Reset() {
	*x = UpgradeEdgeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmp_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeEdgeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeEdgeClusterResponse) ProtoMessage() {}

func (x *UpgradeEdgeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmp_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeEdgeClusterResponse.ProtoReflect.Descriptor instead.
func (*UpgradeEdgeClusterResponse) Descriptor() ([]byte, []int) {
	return file_cmp_proto_rawDescGZIP(), []int{209}
}

func (x *UpgradeEdgeClusterResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_cmp_proto protoreflect.FileDescriptor

var file_cmp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x0c, 0x41, 0x64, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x44, 0x22, 0xbd, 0x02, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x64, 0x6f, 0x48, 0x61, 0x73, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x64, 0x6f, 0x48, 0x61, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x3e, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf1, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x4f, 0x70, 0x73, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x4f,
	0x70, 0x73, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6d, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x19, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xaf, 0x01,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4f, 0x70, 0x73, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x4f, 0x70,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x4f, 0x70, 0x73, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x50, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x70,
	0x75, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6d, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x12, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x3c, 0x0a, 0x0e, 0x41, 0x70, 0x69, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x22, 0x54,
	0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x64,
	0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x50, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x4d, 0x50, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x29, 0x0a,
	0x27, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x24, 0x43, 0x4d, 0x50, 0x5f,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45,
	0x43, 0x53, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x21, 0x0a, 0x1f, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x1a, 0x0a, 0x18, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x43,
	0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x20, 0x0a, 0x1e, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x29, 0x0a, 0x27, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x24, 0x43,
	0x4d, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x4b, 0x45, 0x59, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4b, 0x45, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a,
	0x18, 0x43, 0x4d, 0x50, 0x5f, 0x4b, 0x38, 0x53, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x50,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x4d, 0x50,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x4d, 0x50,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2d, 0x0a, 0x2b, 0x43,
	0x4d, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x45,
	0x4e, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x4d,
	0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x47, 0x41, 0x55, 0x47, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x2d, 0x0a, 0x2b, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x26, 0x0a, 0x24, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x4d, 0x50, 0x5f,
	0x53, 0x54, 0x45, 0x56, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x4d, 0x50, 0x5f, 0x53, 0x54, 0x45, 0x56,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x17, 0x0a, 0x15, 0x43, 0x4d, 0x50, 0x5f, 0x53, 0x54, 0x45, 0x56, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x4d, 0x50,
	0x5f, 0x53, 0x54, 0x45, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x4d, 0x50, 0x5f, 0x53, 0x54, 0x45, 0x56,
	0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x16, 0x0a, 0x14, 0x43, 0x4d, 0x50, 0x5f, 0x53, 0x54, 0x45, 0x56, 0x45, 0x5f, 0x57, 0x53,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x1f, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6e, 0x73, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x19,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65,
	0x63, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65,
	0x63, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x49, 0x44, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x49, 0x44, 0x52, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x43, 0x49,
	0x44, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x43, 0x49, 0x44,
	0x52, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x49, 0x44, 0x52, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x49, 0x44,
	0x52, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x69, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x69, 0x70, 0x22,
	0x3b, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x66, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x66, 0x73, 0x49, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x67, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x66, 0x73, 0x49, 0x70, 0x73, 0x22, 0x65, 0x0a, 0x15,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x74, 0x68, 0x22, 0xec, 0x02, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f,
	0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55,
	0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x69, 0x61, 0x6c,
	0x65, 0x72, 0x22, 0x7d, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x49, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0xc7, 0x05, 0x0a,
	0x19, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x70, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49,
	0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x70, 0x63, 0x43, 0x49, 0x44, 0x52, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x70, 0x63, 0x43, 0x49, 0x44, 0x52, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x43, 0x49, 0x44, 0x52, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x43, 0x49, 0x44, 0x52, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x61, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6e, 0x61, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6e, 0x61, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x38, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x38, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x63, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x63, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x72,
	0x61, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x93, 0x06, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x30,
	0x0a, 0x13, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x42, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x19, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x19, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x19, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4c, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x73,
	0x12, 0x4c, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x47, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x66, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x66, 0x73, 0x12, 0x4c,
	0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x42, 0x0a, 0x14,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x81, 0x05, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x72, 0x72, 0x61,
	0x66, 0x6f, 0x72, 0x6d, 0x22, 0x40, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x43, 0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7d, 0x0a, 0x19, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x23, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x22, 0x9f, 0x03, 0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x74, 0x61, 0x67, 0x1a, 0x36,
	0x0a, 0x08, 0x54, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7c, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x42, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x32, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x22, 0x7c, 0x0a, 0x18, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x42, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x68, 0x0a, 0x23, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x23, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x42,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x44, 0x22, 0x4a, 0x0a, 0x1c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x42, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x5a, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe6, 0x02, 0x0a,
	0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79,
	0x73, 0x71, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x23, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x64, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x64, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x24, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a,
	0x21, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79,
	0x73, 0x71, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x85,
	0x02, 0x0a, 0x21, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x79, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x24, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x22, 0x53,
	0x0a, 0x25, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x79, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x99, 0x02, 0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x58, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x21, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x22, 0x50,
	0x0a, 0x22, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x6f, 0x0a, 0x1d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0xbb, 0x02, 0x0a, 0x1e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x61, 0x0a, 0x1d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x4f, 0x0a, 0x21, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xef, 0x01, 0x0a, 0x1d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4f, 0x6e, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x41, 0x6e, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x5c, 0x0a, 0x1d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0x5d, 0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xaa, 0x01, 0x0a, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x23, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x23, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f,
	0x0a, 0x21, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x6e, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x95, 0x02, 0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4f, 0x73, 0x73, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4f, 0x73, 0x73, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xc6, 0x01, 0x0a, 0x1e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x21, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x73, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x22, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x1c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x1d, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4f, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x03, 0x0a, 0x1b, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x75, 0x0a, 0x23, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x24, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x01, 0x0a, 0x1a,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x80, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x22, 0xb0, 0x05, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x70, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x09,
	0x73, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x04, 0x75, 0x52, 0x4c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x52, 0x4c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x55,
	0x52, 0x4c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x79, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x43, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x0c, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x96, 0x01, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x1e, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44,
	0x12, 0x1f, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc1, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x41, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x22, 0xd0, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x79, 0x73, 0x71, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x27, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xd3, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44,
	0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x79, 0x73, 0x71, 0x6c, 0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x03, 0x0a, 0x1f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63,
	0x0a, 0x1e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x1e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x73, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73,
	0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa4, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2e, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x25, 0x0a,
	0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x4c, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xce, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x22, 0x51, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xd0, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x02, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x1e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49,
	0x44, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x50, 0x43, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x50, 0x43, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x70, 0x63, 0x49, 0x44, 0x22, 0xa9, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x50, 0x43, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x50, 0x43, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x64, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x64, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4c, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x53, 0x57, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x53, 0x57, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x73, 0x77, 0x49, 0x44, 0x22, 0xd7,
	0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x53, 0x57, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x53, 0x57, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x73, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x50,
	0x43, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x64, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x64, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x53, 0x57, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x22, 0x1c, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x21, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x60, 0x0a, 0x1f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73,
	0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x22, 0x39, 0x0a, 0x0f, 0x45, 0x64, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x50, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x50, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x5f, 0x0a, 0x0d,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x63, 0x74, 0x78, 0x22, 0x4e, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x45, 0x43, 0x53, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd3, 0x01,
	0x0a, 0x21, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a,
	0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x22, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x1a, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x43, 0x53, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x20, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x43, 0x53, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x1e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x43, 0x53, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x71, 0x0a, 0x1d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x0b, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x82, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x46,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x72, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x6c,
	0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x73, 0x6c, 0x62, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x22, 0xf3, 0x03, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x43, 0x53, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x50, 0x55, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x63, 0x70, 0x75, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x43, 0x53, 0x2e, 0x54, 0x61, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x03, 0x74, 0x61, 0x67, 0x1a, 0x36, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x5c, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x43, 0x53, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc3,
	0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x43, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x43, 0x53, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xa3, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x79, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4a, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x4a, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa1, 0x01,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x53, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x4d,
	0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe9, 0x02,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x50, 0x43, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x70, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x64, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x64, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x73, 0x77, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x76, 0x73, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x50, 0x43,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x50,
	0x43, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x50, 0x43, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x4a, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe7, 0x02, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x53, 0x57, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x73, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x73, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x69, 0x64, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x69, 0x64, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x70, 0x63, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x7a, 0x6f, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x6f, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x53, 0x57, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a,
	0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x53, 0x57, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x53, 0x57, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x53, 0x57, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41, 0x64, 0x64, 0x54,
	0x72, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x41, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41,
	0x64, 0x64, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x30, 0x12, 0x2a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x15, 0x4d, 0x79, 0x73,
	0x71, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x11, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x19,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73,
	0x71, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x58, 0x0a, 0x16, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x64, 0x67,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x48, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x69, 0x6e, 0x74, 0x22, 0x85, 0x01, 0x0a,
	0x19, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x22, 0x48, 0x0a, 0x1a, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x45,
	0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb7,
	0x02, 0x0a, 0x08, 0x4f, 0x6e, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4f, 0x6e, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a,
	0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x12, 0x4f, 0x70, 0x73, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a, 0x1a, 0x4f, 0x70, 0x73, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x16,
	0x4f, 0x70, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x9b, 0x02, 0x0a, 0x17, 0x4f, 0x72, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x56, 0x0a, 0x12, 0x4f, 0x72, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x4f, 0x72, 0x67,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x44, 0x0a, 0x16, 0x4f, 0x72, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc7, 0x04, 0x0a, 0x0f, 0x4f, 0x72, 0x67,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x22, 0x59, 0x0a, 0x13, 0x4f, 0x72, 0x67, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2c, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xd4, 0x02,
	0x0a, 0x1a, 0x4f, 0x72, 0x67, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x6e, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x49, 0x0a, 0x1b, 0x4f, 0x72, 0x67, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x4f, 0x0a, 0x0d, 0x4f, 0x73, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x6c,
	0x22, 0x50, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x29, 0x0a, 0x0b, 0x52, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x22, 0x90, 0x01,
	0x0a, 0x0e, 0x52, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x22, 0x3d, 0x0a, 0x0f, 0x52, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x2e, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x22,
	0xa7, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x66, 0x0a,
	0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x42, 0x0a, 0x14, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x43, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45,
	0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x48, 0x69, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x19, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x48, 0x0a, 0x1a, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0xf6, 0x98, 0x01, 0x0a, 0x03, 0x63, 0x6d, 0x70, 0x12, 0xcc, 0x01, 0x0a, 0x10, 0x43,
	0x4d, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x12,
	0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0xfa, 0x81, 0xf9, 0x1b, 0x40, 0x0a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1e, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x20, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0x8f, 0x82,
	0xe6, 0x95, 0xb0, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x12, 0xdf, 0x01, 0x0a, 0x17, 0x43, 0x4d,
	0x50, 0x5f, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xfa, 0x81, 0xf9, 0x1b, 0x40, 0x0a, 0x1a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1e, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x20, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5,
	0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x12, 0xb8, 0x01, 0x0a, 0x0f,
	0x43, 0x4d, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x12,
	0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x30, 0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x0f, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x20, 0xe6, 0x89, 0xa9,
	0xe7, 0xbc, 0xa9, 0xe5, 0xae, 0xb9, 0x12, 0xd0, 0x01, 0x0a, 0x10, 0x43, 0x4d, 0x50, 0x5f, 0x41,
	0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x2e, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70,
	0x2e, 0x4f, 0x70, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70,
	0x2e, 0x4f, 0x70, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12,
	0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x41, 0x0a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x27, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x20, 0x61, 0x70, 0x69, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x43, 0x4d,
	0x50, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x47, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6d, 0x70, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x20, 0x0a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6d, 0x70, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x32, 0x02, 0x08, 0x01, 0x12, 0xc1, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x50, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6d, 0x70, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xfa, 0x81,
	0xf9, 0x1b, 0x26, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6d, 0x70, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x02, 0x10, 0x01, 0x12, 0xbc, 0x01, 0x0a, 0x12, 0x43, 0x4d,
	0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x53,
	0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x33, 0x0a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x18,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xb9, 0xb6, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe4,
	0xba, 0x91, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x12, 0xb7, 0x01, 0x0a, 0x0f, 0x43, 0x4d, 0x50,
	0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x53, 0x12, 0x25, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x34, 0x0a, 0x14,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe5, 0xb9, 0xb6, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe4, 0xba, 0x91, 0xe6, 0x9c, 0xba, 0xe5,
	0x99, 0xa8, 0x12, 0xb6, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43,
	0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x70, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x34, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70,
	0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xba, 0x91, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xcd, 0x01, 0x0a, 0x21,
	0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xfa, 0x81, 0xf9, 0x1b,
	0x2a, 0x0a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x10, 0xe5, 0xaf, 0xbc, 0xe5, 0x85,
	0xa5, 0x20, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x12, 0xcd, 0x01, 0x0a, 0x21,
	0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xfa, 0x81, 0xf9, 0x1b,
	0x2a, 0x0a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x10, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0x20, 0xe4, 0xba, 0x91, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x12, 0xde, 0x01, 0x0a, 0x1f,
	0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12,
	0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x12, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32,
	0x02, 0x10, 0x01, 0x3a, 0x17, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0xe4, 0xba, 0x91, 0xe8,
	0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x9d, 0x02, 0x0a,
	0x21, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x45, 0x43, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x4e,
	0x45, 0x57, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x45, 0x43, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x65, 0x63, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2d, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x53, 0x0a, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x63, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1e, 0xe9, 0x85,
	0x8d, 0xe7, 0xbd, 0xae, 0x45, 0x43, 0x53, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe7, 0x9a, 0x84,
	0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe7, 0xbb, 0xad, 0xe8, 0xb4, 0xb9, 0x12, 0xca, 0x01, 0x0a,
	0x1b, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x45, 0x43, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x2f, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x43, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x43, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x65, 0x63, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2d, 0x0a, 0x0e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x63, 0x73, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x17, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x65, 0x63, 0x73, 0x20, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xe9, 0x01, 0x0a, 0x1e, 0x43, 0x4d,
	0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x45, 0x43, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x12, 0x31, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x43, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x63, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x35,
	0x0a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x63, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x32, 0x02, 0x10, 0x01, 0x3a, 0x0f, 0xe9, 0x87, 0x8d, 0xe5, 0x90, 0xaf, 0x45, 0x43, 0x53, 0xe5,
	0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0x12, 0xe3, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x43, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x45, 0x43, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x65, 0x63, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x33, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x63, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x0f, 0xe5, 0x90, 0xaf, 0xe5,
	0x8a, 0xa8, 0x45, 0x43, 0x53, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0x12, 0xe0, 0x01, 0x0a, 0x1b,
	0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x45, 0x43, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x12, 0x31, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x63, 0x6d, 0x70, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x43, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x63, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0xfa, 0x81, 0xf9, 0x1b, 0x32, 0x0a, 0x1b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x65, 0x63, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x0f, 0xe5,
	0x81, 0x9c, 0xe6, 0xad, 0xa2, 0x45, 0x43, 0x53, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0x12, 0xde,
	0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x43, 0x53, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x12,
	0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x43, 0x53, 0x5f, 0x54, 0x52, 0x45, 0x4e,
	0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45,
	0x43, 0x53, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x63,
	0x73, 0x2d, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0xfa, 0x81, 0xf9, 0x1b, 0x30, 0x0a,
	0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x63, 0x73, 0x2d, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x17, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x65,
	0x63, 0x73, 0x20, 0xe5, 0xa2, 0x9e, 0xe9, 0x87, 0x8f, 0xe8, 0xb6, 0x8b, 0xe5, 0x8a, 0xbf, 0x12,
	0xe2, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0xfa, 0x81, 0xf9, 0x1b, 0x35, 0x0a,
	0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x20, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xca, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x62, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x73, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x39, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x70, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0xe4, 0xba, 0x91, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x12, 0x9b, 0x02, 0x0a, 0x27, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x3a, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x27,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x43, 0x0a, 0x27, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x14, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0x20, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x92, 0x02, 0x0a, 0x25, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0xfa, 0x81,
	0xf9, 0x1b, 0x41, 0x0a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a,
	0x13, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x20, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0xa5, 0x02, 0x0a, 0x2f, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51,
	0x4c, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x12, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73,
	0x71, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0xfa, 0x81, 0xf9, 0x1b, 0x45, 0x0a, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x32, 0x02, 0x10, 0x01, 0x3a, 0x16, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x9f, 0x02, 0x0a,
	0x30, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x4e,
	0x54, 0x12, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x7c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x47, 0x0a, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0xcf,
	0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x79, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0xfa, 0x81, 0xf9, 0x1b, 0x24, 0x0a, 0x10, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	0x12, 0xc1, 0x02, 0x0a, 0x26, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x2f, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79,
	0x73, 0x71, 0x6c, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x79, 0x73, 0x71, 0x6c, 0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x7f, 0x0a, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x50, 0x71, 0x75, 0x65, 0x72, 0x79, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4,
	0xbc, 0xa0, 0xe5, 0x85, 0xa5, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0x9b, 0xb8, 0xe5, 0xba, 0x94, 0x64, 0x62, 0x20, 0x69, 0x6e, 0x66, 0x6f,
	0x3b, 0x20, 0xe6, 0x9c, 0xaa, 0xe4, 0xbc, 0xa0, 0xe5, 0x85, 0xa5, 0xef, 0xbc, 0x8c, 0xe5, 0x88,
	0x99, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0x64, 0x62, 0x20,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x84, 0x02, 0x0a, 0x22, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51,
	0x4c, 0x5f, 0x44, 0x42, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x35, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2d, 0x64, 0x62, 0xfa, 0x81, 0xf9, 0x1b, 0x40, 0x0a, 0x22, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x64, 0x62, 0x32,
	0x02, 0x10, 0x01, 0x3a, 0x16, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x80, 0x02, 0x0a, 0x22,
	0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x44, 0x42, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x12, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6e, 0x73, 0x65, 0x22, 0x6e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x64, 0x62, 0xfa, 0x81, 0xf9, 0x1b, 0x3f, 0x0a,
	0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2d, 0x64, 0x62, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20,
	0x6d, 0x79, 0x73, 0x71, 0x6c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0xce,
	0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0xfa, 0x81, 0xf9, 0x1b, 0x24, 0x0a, 0x10, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x12,
	0x8a, 0x02, 0x0a, 0x24, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0xfa, 0x81, 0xf9, 0x1b, 0x47, 0x0a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x22, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0x20, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xd6, 0x01, 0x0a,
	0x1d, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x31,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0xfa,
	0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x19, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0x20, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x20, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xc3, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x53,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x20, 0x0a, 0x0e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x6e, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a,
	0x0a, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x6f, 0x6e, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x1d,
	0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x31, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x20, 0x0a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f,
	0x6e, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x0a, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x6f,
	0x6e, 0x73, 0x12, 0x80, 0x02, 0x0a, 0x22, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x53, 0x5f, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9,
	0x1b, 0x43, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x32,
	0x02, 0x10, 0x01, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x6f, 0x6e, 0x73, 0x20,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0x83, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x53,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x36, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xfa, 0x81, 0xf9, 0x1b, 0x3b,
	0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x10, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0x20, 0x6f, 0x6e, 0x73, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xc8, 0x02, 0x0a, 0x21,
	0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xfa, 0x81, 0xf9, 0x1b, 0x86, 0x01,
	0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x5d, 0x71, 0x75, 0x65, 0x72, 0x79, 0xe5, 0x8f,
	0x82, 0xe6, 0x95, 0xb0, 0xe4, 0xbc, 0xa0, 0xe5, 0x85, 0xa5, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7,
	0x9b, 0xb8, 0xe5, 0xba, 0x94, 0x74, 0x6f, 0x70, 0x69, 0x63, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0xef, 0xbc, 0x9b, 0xe6, 0x9c, 0xaa, 0xe4, 0xbc, 0xa0, 0xe5, 0x85, 0xa5, 0xe5, 0x88, 0x99, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xca, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x50, 0x5f, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x4e,
	0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x6e,
	0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2d, 0x0a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x6f, 0x6e, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x17, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0x20, 0x6f, 0x6e, 0x73, 0x20, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x12, 0x83, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x53, 0x5f, 0x54,
	0x4f, 0x50, 0x49, 0x43, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x36, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0xfa, 0x81, 0xf9, 0x1b, 0x3b, 0x0a, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x10, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20,
	0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0xfa, 0x01, 0x0a, 0x23, 0x43, 0x4d,
	0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x4f, 0x4e, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x2a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0xfa, 0x81, 0xf9, 0x1b, 0x3b, 0x0a, 0x23, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x32, 0x02, 0x10, 0x01, 0x3a, 0x10, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x6f, 0x6e, 0x73,
	0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0xc8, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x50, 0x5f, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x4e,
	0x53, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x34, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x6e, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0xfa, 0x81, 0xf9, 0x1b, 0x86, 0x01, 0x0a, 0x21, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x5d, 0x71, 0x75, 0x65, 0x72, 0x79, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4,
	0xbc, 0xa0, 0xe5, 0x85, 0xa5, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0xe6, 0x97,
	0xb6, 0xef, 0xbc, 0x8c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9b, 0xb8, 0xe5, 0xba, 0x94,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x9b, 0xe6, 0x9c,
	0xaa, 0xe4, 0xbc, 0xa0, 0xe5, 0x85, 0xa5, 0xe5, 0x88, 0x99, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0x74, 0x6f, 0x70, 0x69, 0x63, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x12, 0xca, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x53, 0x53, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x10, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f,
	0x73, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x27, 0x0a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x73, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x11, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0x20, 0x6f, 0x73, 0x73, 0x20, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0xc4,
	0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x2a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x73, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x20, 0x0a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x6f, 0x73, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x0a, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0x20, 0x6f, 0x73, 0x73, 0x12, 0xff, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x53, 0x53,
	0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x35, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x6f, 0x73, 0x73, 0x2f, 0x7b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0xfa, 0x81, 0xf9, 0x1b, 0x42, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x6f, 0x73, 0x73, 0x2f, 0x7b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20,
	0x6f, 0x73, 0x73, 0x20, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x20, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb,
	0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xca, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x50, 0x5f,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f,
	0x53, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x6f,
	0x73, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2d, 0x0a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x6f, 0x73, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x17, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0x20, 0x6f, 0x73, 0x73, 0x20, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xec, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x56, 0x49, 0x45, 0x57, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0xfa,
	0x81, 0xf9, 0x1b, 0x3f, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xba,
	0x91, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe6, 0x80, 0xbb,
	0xe8, 0xa7, 0x88, 0x12, 0xcf, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65, 0x64, 0x69, 0x73, 0xfa, 0x81, 0xf9, 0x1b,
	0x24, 0x0a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0xce, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x44,
	0x49, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65, 0x64, 0x69, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x24, 0x0a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0x20, 0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0x8c, 0x02, 0x0a, 0x24, 0x43, 0x4d, 0x50, 0x5f, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x44, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12,
	0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x47, 0x0a, 0x1d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x22, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x72, 0x65, 0x64, 0x69, 0x73, 0x20,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xd6, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0xfa, 0x81, 0xf9, 0x1b,
	0x2d, 0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x14, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xd6,
	0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12,
	0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65, 0x64, 0x69,
	0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x72, 0x65, 0x64, 0x69, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x19, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x72, 0x65, 0x64, 0x69, 0x73, 0x20, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xdc, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x50, 0x5f,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22,
	0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x74, 0x61, 0x67, 0xfa, 0x81, 0xf9, 0x1b,
	0x35, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x74, 0x61, 0x67, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x12, 0x74, 0x61, 0x67, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20,
	0x6f, 0x6e, 0x20, 0x76, 0x70, 0x63, 0x12, 0xc3, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x50, 0x5f, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x56, 0x50,
	0x43, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x76, 0x70, 0x63, 0xfa, 0x81, 0xf9, 0x1b, 0x20, 0x0a, 0x0e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x76, 0x70, 0x63, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x0a, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x76, 0x70, 0x63, 0x12, 0xca, 0x01, 0x0a,
	0x1b, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x56, 0x50, 0x43, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x2f, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x76, 0x70, 0x63, 0xfa, 0x81, 0xf9, 0x1b, 0x2d, 0x0a, 0x0e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x76, 0x70, 0x63, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x17, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x76, 0x70, 0x63, 0x20, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xc7, 0x01, 0x0a, 0x1d, 0x43, 0x4d,
	0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x56, 0x53, 0x57, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x31, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x53, 0x57, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x63, 0x6d, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x53, 0x57, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x76, 0x73, 0x77, 0xfa, 0x81, 0xf9, 0x1b, 0x24, 0x0a,
	0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x76, 0x73, 0x77, 0x32,
	0x02, 0x10, 0x01, 0x3a, 0x0e, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x76, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0xce, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x56, 0x53, 0x57, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x53, 0x57, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x53, 0x57, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x76, 0x73, 0x77, 0xfa, 0x81,
	0xf9, 0x1b, 0x31, 0x0a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x76, 0x73, 0x77, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20,
	0x76, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x20, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xca, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x7a,
	0x6f, 0x6e, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x29, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x12, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x7a, 0x6f, 0x6e, 0x65, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x12, 0xf7, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x12,
	0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x42, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x18, 0xe8, 0xbe, 0xb9, 0xe7, 0xbc, 0x98, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6,
	0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0x12, 0xa4, 0x01, 0x0a, 0x12,
	0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4d, 0x50, 0x4f,
	0x52, 0x54, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2c, 0x0a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50,
	0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0xfa, 0x81, 0xf9, 0x1b, 0x26, 0x0a, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x12, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xd5,
	0x01, 0x0a, 0x18, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x12, 0x34, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70,
	0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x69, 0x6e, 0x69, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0xfa, 0x81, 0xf9, 0x1b,
	0x45, 0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x69, 0x6e, 0x69, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x32, 0x02, 0x08, 0x01,
	0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96,
	0xe5, 0x91, 0xbd, 0xe4, 0xbb, 0xa4, 0x12, 0xd7, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x50, 0x5f, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x52,
	0x59, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x71, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6e, 0x69, 0x74,
	0x2d, 0x72, 0x65, 0x74, 0x72, 0x79, 0xfa, 0x81, 0xf9, 0x1b, 0x45, 0x0a, 0x1f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x88, 0x9d, 0xe5, 0xa7, 0x8b, 0xe5, 0x8c, 0x96, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95,
	0x12, 0xaf, 0x01, 0x0a, 0x13, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x2a,
	0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xfa, 0x81, 0xf9,
	0x1b, 0x20, 0x0a, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x32, 0x02, 0x10, 0x01, 0x3a, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0x8b, 0xe7,
	0xba, 0xbf, 0x12, 0xaf, 0x01, 0x0a, 0x13, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e,
	0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x14, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0xfa, 0x81, 0xf9, 0x1b, 0x2e, 0x0a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0xa2,
	0x84, 0xe8, 0xa7, 0x88, 0x12, 0xaf, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x28, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x1a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2a, 0x0a, 0x0d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a,
	0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x12, 0xd5, 0x01, 0x0a, 0x13, 0x43, 0x4d, 0x50, 0x5f, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x12, 0x2d,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x63, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x36, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x12, 0xe8, 0xbe, 0xb9, 0xe7,
	0xbc, 0x98, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0x12, 0xf3,
	0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x12, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4b, 0x45, 0x59,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x6b, 0x65, 0x79, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x4b, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0x12, 0xed, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x52, 0x45,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4b, 0x45,
	0x59, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x43,
	0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x4b, 0x45, 0x59, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d,
	0x6b, 0x65, 0x79, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x4b, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x12, 0x8e, 0x02, 0x0a, 0x1e, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x52, 0x45,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4b, 0x45,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x12, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50,
	0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x97, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x33, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x59, 0x0a, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x6b, 0x65, 0x79,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x32,
	0x02, 0x10, 0x01, 0x3a, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe9, 0x87,
	0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x12, 0xbf, 0x01, 0x0a, 0x15, 0x43, 0x4d, 0x50, 0x5f, 0x45, 0x44,
	0x47, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x12,
	0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x69, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f,
	0x73, 0x69, 0x74, 0x65, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x7b, 0x49, 0x44,
	0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x41, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x7b,
	0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1e, 0xe4, 0xb8, 0x8b, 0xe7, 0xba, 0xbf, 0xe8,
	0xbe, 0xb9, 0xe7, 0xbc, 0x98, 0xe8, 0xae, 0xa1, 0xe7, 0xae, 0x97, 0xe7, 0xab, 0x99, 0xe7, 0x82,
	0xb9, 0xe6, 0x9c, 0xba, 0xe5, 0x99, 0xa8, 0x12, 0xbd, 0x01, 0x0a, 0x10, 0x43, 0x4d, 0x50, 0x5f,
	0x4b, 0x38, 0x53, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x53, 0x12, 0x2c, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x4b, 0x38, 0x53, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x5a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x3c, 0x0a, 0x11, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x23, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x6b, 0x38, 0x73, 0x20, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x09, 0x43, 0x4d, 0x50, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x53, 0x12, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e,
	0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x22, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x1e, 0x0a, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x0c, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a,
	0xa0, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x12, 0x92, 0x01, 0x0a, 0x10, 0x43, 0x4d, 0x50, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x12, 0x22, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x52, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x52, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x2a, 0x0a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x1e, 0x0a, 0x0a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x0c,
	0xe4, 0xb8, 0x8b, 0xe7, 0xba, 0xbf, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x12, 0xaf, 0x01, 0x0a,
	0x14, 0x43, 0x4d, 0x50, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x30, 0x0a, 0x10,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x32, 0x02, 0x10, 0x01, 0x3a, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20, 0x6e, 0x6f, 0x64,
	0x65, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xb3,
	0x01, 0x0a, 0x16, 0x43, 0x4d, 0x50, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x29, 0x0a, 0x10, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x11, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x43, 0x4d, 0x50, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x6c, 0x6f, 0x67,
	0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2d, 0x0a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2d, 0x6c, 0x6f, 0x67, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x17, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0x20, 0x63, 0x6d, 0x70, 0x20, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xa5,
	0xe5, 0xbf, 0x97, 0x12, 0xcc, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x50, 0x5f, 0x4f, 0x52, 0x47, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x29, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x4f, 0x72, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4f, 0x72, 0x67,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x72, 0x67, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x6e,
	0x66, 0x6f, 0xfa, 0x81, 0xf9, 0x1b, 0x3b, 0x0a, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72,
	0x67, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x12, 0x94, 0x01, 0x0a, 0x0b, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x53, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2b, 0x0a, 0x0c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x17, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x20, 0x63, 0x6d, 0x70, 0x20, 0xe6, 0x93, 0x8d,
	0xe4, 0xbd, 0x9c, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x12, 0xa5, 0x01, 0x0a, 0x0f, 0x43, 0x4d,
	0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x53, 0x12, 0x2b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b,
	0x30, 0x0a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x12, 0xbb, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x22, 0x0a, 0x1c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x02, 0x10, 0x01, 0x12,
	0xdb, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x12, 0x3f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x74, 0x72, 0x65, 0x6e, 0x64, 0xfa, 0x81,
	0xf9, 0x1b, 0x2a, 0x0a, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2d, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x32, 0x02, 0x10, 0x01, 0x12, 0xbb, 0x01,
	0x0a, 0x1b, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x47, 0x41, 0x55, 0x47, 0x45, 0x12, 0x37, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x47, 0x41, 0x55, 0x47, 0x45, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x67,
	0x61, 0x75, 0x67, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x22, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x2f, 0x67, 0x61, 0x75, 0x67, 0x65, 0x32, 0x02, 0x10, 0x01, 0x12, 0xdd, 0x01, 0x0a, 0x23,
	0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x52,
	0x45, 0x4e, 0x44, 0x12, 0x3f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2d, 0x74, 0x72, 0x65, 0x6e, 0x64, 0xfa, 0x81, 0xf9, 0x1b, 0x2c, 0x0a,
	0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x12, 0xcb, 0x01, 0x0a, 0x1c,
	0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x12, 0x38, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d,
	0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x59,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x29,
	0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x02, 0x10, 0x01, 0x12, 0x93, 0x02, 0x0a, 0x16, 0x43, 0x4d,
	0x50, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x67, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x72, 0x67, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x3c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe7, 0x9a,
	0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x20, 0x28, 0x6a, 0x6f, 0x62, 0x2f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x29, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12,
	0xac, 0x01, 0x0a, 0x10, 0x43, 0x4d, 0x50, 0x5f, 0x53, 0x54, 0x45, 0x56, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x53, 0x54,
	0x45, 0x56, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x14, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x20, 0x6b, 0x38, 0x73, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xac,
	0x01, 0x0a, 0x10, 0x43, 0x4d, 0x50, 0x5f, 0x53, 0x54, 0x45, 0x56, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x53, 0x54, 0x45,
	0x56, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x2a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x14, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61,
	0x20, 0x6b, 0x38, 0x73, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xa9, 0x01,
	0x0a, 0x0d, 0x43, 0x4d, 0x50, 0x5f, 0x53, 0x54, 0x45, 0x56, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x12,
	0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x53, 0x54, 0x45, 0x56, 0x45, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2a,
	0xfa, 0x81, 0xf9, 0x1b, 0x34, 0x0a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x38, 0x73, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a,
	0x18, 0x67, 0x65, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6b, 0x38, 0x73,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x0f, 0x43, 0x4d,
	0x50, 0x5f, 0x53, 0x54, 0x45, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x12, 0x2b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x53, 0x54, 0x45, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x32, 0x14, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2a,
	0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x38, 0x73, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a,
	0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6b, 0x38, 0x73, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x10, 0x43, 0x4d, 0x50, 0x5f, 0x53,
	0x54, 0x45, 0x56, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x2c, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70,
	0x2e, 0x43, 0x4d, 0x50, 0x5f, 0x53, 0x54, 0x45, 0x56, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x1a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6b, 0x38, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2a, 0xfa,
	0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6b, 0x38, 0x73, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0xd7, 0x01, 0x0a, 0x0c, 0x43, 0x4d, 0x50, 0x5f, 0x53, 0x54,
	0x45, 0x56, 0x45, 0x5f, 0x57, 0x53, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x4d, 0x50, 0x5f,
	0x53, 0x54, 0x45, 0x56, 0x45, 0x5f, 0x57, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a,
	0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x59, 0x0a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2a, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x31, 0x6b, 0x38,
	0x73, 0x20, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2c, 0x20, 0x70,
	0x6f, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x65, 0x63, 0x1a,
	0x0a, 0xc2, 0xc4, 0xcb, 0x1c, 0x05, 0x22, 0x03, 0x63, 0x6d, 0x70, 0x42, 0x38, 0x5a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x63,
	0x6d, 0x70, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmp_proto_rawDescOnce sync.Once
	file_cmp_proto_rawDescData = file_cmp_proto_rawDesc
)

func file_cmp_proto_rawDescGZIP() []byte {
	file_cmp_proto_rawDescOnce.Do(func() {
		file_cmp_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmp_proto_rawDescData)
	})
	return file_cmp_proto_rawDescData
}

var file_cmp_proto_msgTypes = make([]protoimpl.MessageInfo, 223)
var file_cmp_proto_goTypes = []interface{}{
	(*AddNodesData)(nil),                                // 0: erda.openapiv1.cmp.AddNodesData
	(*AddNodesRequest)(nil),                             // 1: erda.openapiv1.cmp.AddNodesRequest
	(*AddNodesResponse)(nil),                            // 2: erda.openapiv1.cmp.AddNodesResponse
	(*AddonConfigRequest)(nil),                          // 3: erda.openapiv1.cmp.AddonConfigRequest
	(*AddonConfigResponse)(nil),                         // 4: erda.openapiv1.cmp.AddonConfigResponse
	(*AddonConfigUpdateRequest)(nil),                    // 5: erda.openapiv1.cmp.AddonConfigUpdateRequest
	(*AddonConfigUpdateResponse)(nil),                   // 6: erda.openapiv1.cmp.AddonConfigUpdateResponse
	(*AddonOpsBaseRequest)(nil),                         // 7: erda.openapiv1.cmp.AddonOpsBaseRequest
	(*AddonScaleRequest)(nil),                           // 8: erda.openapiv1.cmp.AddonScaleRequest
	(*AddonScaleResponse)(nil),                          // 9: erda.openapiv1.cmp.AddonScaleResponse
	(*ApiGatewayInfo)(nil),                              // 10: erda.openapiv1.cmp.ApiGatewayInfo
	(*AutoRenewCloudResourceEcsRequest)(nil),            // 11: erda.openapiv1.cmp.AutoRenewCloudResourceEcsRequest
	(*BatchUpgradeEdgeClusterRequest)(nil),              // 12: erda.openapiv1.cmp.BatchUpgradeEdgeClusterRequest
	(*BatchUpgradeEdgeClusterResponse)(nil),             // 13: erda.openapiv1.cmp.BatchUpgradeEdgeClusterResponse
	(*CMP_ALERT_CONDITIONS_Request)(nil),                // 14: erda.openapiv1.cmp.CMP_ALERT_CONDITIONS_Request
	(*CMP_ALERT_CONDITIONS_VALUE_Request)(nil),          // 15: erda.openapiv1.cmp.CMP_ALERT_CONDITIONS_VALUE_Request
	(*CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request)(nil),     // 16: erda.openapiv1.cmp.CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request
	(*CMP_CLOUD_RESOURCE_ECS_TREND_Request)(nil),        // 17: erda.openapiv1.cmp.CMP_CLOUD_RESOURCE_ECS_TREND_Request
	(*CMP_CLOUD_RESOURCE_LIST_Request)(nil),             // 18: erda.openapiv1.cmp.CMP_CLOUD_RESOURCE_LIST_Request
	(*CMP_CLOUD_RESOURCE_Request)(nil),                  // 19: erda.openapiv1.cmp.CMP_CLOUD_RESOURCE_Request
	(*CMP_CLUSTER_IMPORT_Request)(nil),                  // 20: erda.openapiv1.cmp.CMP_CLUSTER_IMPORT_Request
	(*CMP_CLUSTER_INFO_Request)(nil),                    // 21: erda.openapiv1.cmp.CMP_CLUSTER_INFO_Request
	(*CMP_CLUSTER_INIT_COMMAND_Request)(nil),            // 22: erda.openapiv1.cmp.CMP_CLUSTER_INIT_COMMAND_Request
	(*CMP_CLUSTER_INIT_RETRY_Request)(nil),              // 23: erda.openapiv1.cmp.CMP_CLUSTER_INIT_RETRY_Request
	(*CMP_CLUSTER_PREVIEW_Request)(nil),                 // 24: erda.openapiv1.cmp.CMP_CLUSTER_PREVIEW_Request
	(*CMP_CREDENTIAL_ACCESSKEY_CREATE_Request)(nil),     // 25: erda.openapiv1.cmp.CMP_CREDENTIAL_ACCESSKEY_CREATE_Request
	(*CMP_CREDENTIAL_ACCESSKEY_GET_Request)(nil),        // 26: erda.openapiv1.cmp.CMP_CREDENTIAL_ACCESSKEY_GET_Request
	(*CMP_CREDENTIAL_ACCESSKEY_RESET_Request)(nil),      // 27: erda.openapiv1.cmp.CMP_CREDENTIAL_ACCESSKEY_RESET_Request
	(*CMP_K8S_CLUSTERS_Request)(nil),                    // 28: erda.openapiv1.cmp.CMP_K8S_CLUSTERS_Request
	(*CMP_NODE_LABELS_LIST_Request)(nil),                // 29: erda.openapiv1.cmp.CMP_NODE_LABELS_LIST_Request
	(*CMP_NODE_LOGS_Request)(nil),                       // 30: erda.openapiv1.cmp.CMP_NODE_LOGS_Request
	(*CMP_RECORDS_Request)(nil),                         // 31: erda.openapiv1.cmp.CMP_RECORDS_Request
	(*CMP_RECORDTYPES_Request)(nil),                     // 32: erda.openapiv1.cmp.CMP_RECORDTYPES_Request
	(*CMP_RESOURCE_OVERVIEW_CLASS_Request)(nil),         // 33: erda.openapiv1.cmp.CMP_RESOURCE_OVERVIEW_CLASS_Request
	(*CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request)(nil), // 34: erda.openapiv1.cmp.CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request
	(*CMP_RESOURCE_OVERVIEW_GAUGE_Request)(nil),         // 35: erda.openapiv1.cmp.CMP_RESOURCE_OVERVIEW_GAUGE_Request
	(*CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request)(nil), // 36: erda.openapiv1.cmp.CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request
	(*CMP_RESOURCE_OVERVIEW_REPORT_Request)(nil),        // 37: erda.openapiv1.cmp.CMP_RESOURCE_OVERVIEW_REPORT_Request
	(*CMP_STEVE_CREATE_Request)(nil),                    // 38: erda.openapiv1.cmp.CMP_STEVE_CREATE_Request
	(*CMP_STEVE_DELETE_Request)(nil),                    // 39: erda.openapiv1.cmp.CMP_STEVE_DELETE_Request
	(*CMP_STEVE_GET_Request)(nil),                       // 40: erda.openapiv1.cmp.CMP_STEVE_GET_Request
	(*CMP_STEVE_PATCH_Request)(nil),                     // 41: erda.openapiv1.cmp.CMP_STEVE_PATCH_Request
	(*CMP_STEVE_UPDATE_Request)(nil),                    // 42: erda.openapiv1.cmp.CMP_STEVE_UPDATE_Request
	(*CMP_STEVE_WS_Request)(nil),                        // 43: erda.openapiv1.cmp.CMP_STEVE_WS_Request
	(*CloudAddonResourceDeleteRequest)(nil),             // 44: erda.openapiv1.cmp.CloudAddonResourceDeleteRequest
	(*CloudAddonResourceDeleteRespnse)(nil),             // 45: erda.openapiv1.cmp.CloudAddonResourceDeleteRespnse
	(*CloudClusterContainerInfo)(nil),                   // 46: erda.openapiv1.cmp.CloudClusterContainerInfo
	(*CloudClusterGlusterfs)(nil),                       // 47: erda.openapiv1.cmp.CloudClusterGlusterfs
	(*CloudClusterHostsInfo)(nil),                       // 48: erda.openapiv1.cmp.CloudClusterHostsInfo
	(*CloudClusterInfo)(nil),                            // 49: erda.openapiv1.cmp.CloudClusterInfo
	(*CloudClusterInstaller)(nil),                       // 50: erda.openapiv1.cmp.CloudClusterInstaller
	(*CloudClusterNas)(nil),                             // 51: erda.openapiv1.cmp.CloudClusterNas
	(*CloudClusterNewCreateInfo)(nil),                   // 52: erda.openapiv1.cmp.CloudClusterNewCreateInfo
	(*CloudClusterRequest)(nil),                         // 53: erda.openapiv1.cmp.CloudClusterRequest
	(*CloudClusterResponse)(nil),                        // 54: erda.openapiv1.cmp.CloudClusterResponse
	(*CloudNodesRequest)(nil),                           // 55: erda.openapiv1.cmp.CloudNodesRequest
	(*CloudNodesResponse)(nil),                          // 56: erda.openapiv1.cmp.CloudNodesResponse
	(*CloudResourceDetailInfo)(nil),                     // 57: erda.openapiv1.cmp.CloudResourceDetailInfo
	(*CloudResourceDetailItem)(nil),                     // 58: erda.openapiv1.cmp.CloudResourceDetailItem
	(*CloudResourceMysqlAccount)(nil),                   // 59: erda.openapiv1.cmp.CloudResourceMysqlAccount
	(*CloudResourceMysqlAccountPrivileges)(nil),         // 60: erda.openapiv1.cmp.CloudResourceMysqlAccountPrivileges
	(*CloudResourceMysqlBasicData)(nil),                 // 61: erda.openapiv1.cmp.CloudResourceMysqlBasicData
	(*CloudResourceMysqlDB)(nil),                        // 62: erda.openapiv1.cmp.CloudResourceMysqlDB
	(*CloudResourceMysqlDBInfo)(nil),                    // 63: erda.openapiv1.cmp.CloudResourceMysqlDBInfo
	(*CloudResourceMysqlDBRequest)(nil),                 // 64: erda.openapiv1.cmp.CloudResourceMysqlDBRequest
	(*CloudResourceMysqlDBResponse)(nil),                // 65: erda.openapiv1.cmp.CloudResourceMysqlDBResponse
	(*CloudResourceMysqlData)(nil),                      // 66: erda.openapiv1.cmp.CloudResourceMysqlData
	(*CloudResourceMysqlDetailInfoData)(nil),            // 67: erda.openapiv1.cmp.CloudResourceMysqlDetailInfoData
	(*CloudResourceMysqlDetailInfoRequest)(nil),         // 68: erda.openapiv1.cmp.CloudResourceMysqlDetailInfoRequest
	(*CloudResourceMysqlDetailInfoResponse)(nil),        // 69: erda.openapiv1.cmp.CloudResourceMysqlDetailInfoResponse
	(*CloudResourceMysqlListAccountData)(nil),           // 70: erda.openapiv1.cmp.CloudResourceMysqlListAccountData
	(*CloudResourceMysqlListAccountItem)(nil),           // 71: erda.openapiv1.cmp.CloudResourceMysqlListAccountItem
	(*CloudResourceMysqlListAccountRequest)(nil),        // 72: erda.openapiv1.cmp.CloudResourceMysqlListAccountRequest
	(*CloudResourceMysqlListAccountResponse)(nil),       // 73: erda.openapiv1.cmp.CloudResourceMysqlListAccountResponse
	(*CloudResourceOnsBasicData)(nil),                   // 74: erda.openapiv1.cmp.CloudResourceOnsBasicData
	(*CloudResourceOnsData)(nil),                        // 75: erda.openapiv1.cmp.CloudResourceOnsData
	(*CloudResourceOnsDetailInfoRequest)(nil),           // 76: erda.openapiv1.cmp.CloudResourceOnsDetailInfoRequest
	(*CloudResourceOnsDetailInfoResponse)(nil),          // 77: erda.openapiv1.cmp.CloudResourceOnsDetailInfoResponse
	(*CloudResourceOnsGroupBaseInfo)(nil),               // 78: erda.openapiv1.cmp.CloudResourceOnsGroupBaseInfo
	(*CloudResourceOnsGroupBasicData)(nil),              // 79: erda.openapiv1.cmp.CloudResourceOnsGroupBasicData
	(*CloudResourceOnsGroupInfoData)(nil),               // 80: erda.openapiv1.cmp.CloudResourceOnsGroupInfoData
	(*CloudResourceOnsGroupInfoRequest)(nil),            // 81: erda.openapiv1.cmp.CloudResourceOnsGroupInfoRequest
	(*CloudResourceOnsGroupInfoResponse)(nil),           // 82: erda.openapiv1.cmp.CloudResourceOnsGroupInfoResponse
	(*CloudResourceOnsTopicAndGroup)(nil),               // 83: erda.openapiv1.cmp.CloudResourceOnsTopicAndGroup
	(*CloudResourceOnsTopicInfo)(nil),                   // 84: erda.openapiv1.cmp.CloudResourceOnsTopicInfo
	(*CloudResourceOnsTopicInfoRequest)(nil),            // 85: erda.openapiv1.cmp.CloudResourceOnsTopicInfoRequest
	(*CloudResourceOnsTopicInfoResponse)(nil),           // 86: erda.openapiv1.cmp.CloudResourceOnsTopicInfoResponse
	(*CloudResourceOssBasicData)(nil),                   // 87: erda.openapiv1.cmp.CloudResourceOssBasicData
	(*CloudResourceOssData)(nil),                        // 88: erda.openapiv1.cmp.CloudResourceOssData
	(*CloudResourceOssDetailInfoData)(nil),              // 89: erda.openapiv1.cmp.CloudResourceOssDetailInfoData
	(*CloudResourceOssDetailInfoRequest)(nil),           // 90: erda.openapiv1.cmp.CloudResourceOssDetailInfoRequest
	(*CloudResourceOssDetailInfoResponse)(nil),          // 91: erda.openapiv1.cmp.CloudResourceOssDetailInfoResponse
	(*CloudResourceOverviewRequest)(nil),                // 92: erda.openapiv1.cmp.CloudResourceOverviewRequest
	(*CloudResourceOverviewResponse)(nil),               // 93: erda.openapiv1.cmp.CloudResourceOverviewResponse
	(*CloudResourceRedisBasicData)(nil),                 // 94: erda.openapiv1.cmp.CloudResourceRedisBasicData
	(*CloudResourceRedisDetailInfoRequest)(nil),         // 95: erda.openapiv1.cmp.CloudResourceRedisDetailInfoRequest
	(*CloudResourceRedisDetailInfoResponse)(nil),        // 96: erda.openapiv1.cmp.CloudResourceRedisDetailInfoResponse
	(*CloudResourceSetTagRequest)(nil),                  // 97: erda.openapiv1.cmp.CloudResourceSetTagRequest
	(*CloudResourceSetTagResponse)(nil),                 // 98: erda.openapiv1.cmp.CloudResourceSetTagResponse
	(*CloudResourceTagItem)(nil),                        // 99: erda.openapiv1.cmp.CloudResourceTagItem
	(*ClusterUpdateRequest)(nil),                        // 100: erda.openapiv1.cmp.ClusterUpdateRequest
	(*ClusterUpdateResponse)(nil),                       // 101: erda.openapiv1.cmp.ClusterUpdateResponse
	(*ClustersData)(nil),                                // 102: erda.openapiv1.cmp.ClustersData
	(*CreateCloudAccountRequest)(nil),                   // 103: erda.openapiv1.cmp.CreateCloudAccountRequest
	(*CreateCloudAccountResponse)(nil),                  // 104: erda.openapiv1.cmp.CreateCloudAccountResponse
	(*CreateCloudResourceBaseInfo)(nil),                 // 105: erda.openapiv1.cmp.CreateCloudResourceBaseInfo
	(*CreateCloudResourceBaseResponseData)(nil),         // 106: erda.openapiv1.cmp.CreateCloudResourceBaseResponseData
	(*CreateCloudResourceMysqlAccountRequest)(nil),      // 107: erda.openapiv1.cmp.CreateCloudResourceMysqlAccountRequest
	(*CreateCloudResourceMysqlAccountResponse)(nil),     // 108: erda.openapiv1.cmp.CreateCloudResourceMysqlAccountResponse
	(*CreateCloudResourceMysqlDBRequest)(nil),           // 109: erda.openapiv1.cmp.CreateCloudResourceMysqlDBRequest
	(*CreateCloudResourceMysqlDBResponse)(nil),          // 110: erda.openapiv1.cmp.CreateCloudResourceMysqlDBResponse
	(*CreateCloudResourceMysqlRequest)(nil),             // 111: erda.openapiv1.cmp.CreateCloudResourceMysqlRequest
	(*CreateCloudResourceMysqlResponse)(nil),            // 112: erda.openapiv1.cmp.CreateCloudResourceMysqlResponse
	(*CreateCloudResourceOnsGroupRequest)(nil),          // 113: erda.openapiv1.cmp.CreateCloudResourceOnsGroupRequest
	(*CreateCloudResourceOnsGroupResponse)(nil),         // 114: erda.openapiv1.cmp.CreateCloudResourceOnsGroupResponse
	(*CreateCloudResourceOnsRequest)(nil),               // 115: erda.openapiv1.cmp.CreateCloudResourceOnsRequest
	(*CreateCloudResourceOnsResponse)(nil),              // 116: erda.openapiv1.cmp.CreateCloudResourceOnsResponse
	(*CreateCloudResourceOnsTopicRequest)(nil),          // 117: erda.openapiv1.cmp.CreateCloudResourceOnsTopicRequest
	(*CreateCloudResourceOnsTopicResponse)(nil),         // 118: erda.openapiv1.cmp.CreateCloudResourceOnsTopicResponse
	(*CreateCloudResourceOssRequest)(nil),               // 119: erda.openapiv1.cmp.CreateCloudResourceOssRequest
	(*CreateCloudResourceOssResponse)(nil),              // 120: erda.openapiv1.cmp.CreateCloudResourceOssResponse
	(*CreateCloudResourceRedisRequest)(nil),             // 121: erda.openapiv1.cmp.CreateCloudResourceRedisRequest
	(*CreateCloudResourceRedisResponse)(nil),            // 122: erda.openapiv1.cmp.CreateCloudResourceRedisResponse
	(*CreateCloudResourceVPC)(nil),                      // 123: erda.openapiv1.cmp.CreateCloudResourceVPC
	(*CreateCloudResourceVPCRequest)(nil),               // 124: erda.openapiv1.cmp.CreateCloudResourceVPCRequest
	(*CreateCloudResourceVPCResponse)(nil),              // 125: erda.openapiv1.cmp.CreateCloudResourceVPCResponse
	(*CreateCloudResourceVSW)(nil),                      // 126: erda.openapiv1.cmp.CreateCloudResourceVSW
	(*CreateCloudResourceVSWRequest)(nil),               // 127: erda.openapiv1.cmp.CreateCloudResourceVSWRequest
	(*CreateCloudResourceVSWResponse)(nil),              // 128: erda.openapiv1.cmp.CreateCloudResourceVSWResponse
	(*DeleteCloudAccountRequest)(nil),                   // 129: erda.openapiv1.cmp.DeleteCloudAccountRequest
	(*DeleteCloudAccountResponse)(nil),                  // 130: erda.openapiv1.cmp.DeleteCloudAccountResponse
	(*DeleteCloudResourceMysqlDBRequest)(nil),           // 131: erda.openapiv1.cmp.DeleteCloudResourceMysqlDBRequest
	(*DeleteCloudResourceMysqlRequest)(nil),             // 132: erda.openapiv1.cmp.DeleteCloudResourceMysqlRequest
	(*DeleteCloudResourceOnsRequest)(nil),               // 133: erda.openapiv1.cmp.DeleteCloudResourceOnsRequest
	(*DeleteCloudResourceOssRequest)(nil),               // 134: erda.openapiv1.cmp.DeleteCloudResourceOssRequest
	(*DeleteCloudResourceRedisRequest)(nil),             // 135: erda.openapiv1.cmp.DeleteCloudResourceRedisRequest
	(*EdgeHostOffline)(nil),                             // 136: erda.openapiv1.cmp.EdgeHostOffline
	(*ErrorResponse)(nil),                               // 137: erda.openapiv1.cmp.ErrorResponse
	(*GetCloudResourceECSTrendResponse)(nil),            // 138: erda.openapiv1.cmp.GetCloudResourceECSTrendResponse
	(*GrantMysqlAccountPrivilegeRequest)(nil),           // 139: erda.openapiv1.cmp.GrantMysqlAccountPrivilegeRequest
	(*GrantMysqlAccountPrivilegeResponse)(nil),          // 140: erda.openapiv1.cmp.GrantMysqlAccountPrivilegeResponse
	(*HandleCloudResourceECSData)(nil),                  // 141: erda.openapiv1.cmp.HandleCloudResourceECSData
	(*HandleCloudResourceECSDataResult)(nil),            // 142: erda.openapiv1.cmp.HandleCloudResourceECSDataResult
	(*HandleCloudResourceECSResponse)(nil),              // 143: erda.openapiv1.cmp.HandleCloudResourceECSResponse
	(*HandleCloudResourceEcsRequest)(nil),               // 144: erda.openapiv1.cmp.HandleCloudResourceEcsRequest
	(*K8SClusters)(nil),                                 // 145: erda.openapiv1.cmp.K8SClusters
	(*ListCloudAccount)(nil),                            // 146: erda.openapiv1.cmp.ListCloudAccount
	(*ListCloudAccountData)(nil),                        // 147: erda.openapiv1.cmp.ListCloudAccountData
	(*ListCloudAccountResponse)(nil),                    // 148: erda.openapiv1.cmp.ListCloudAccountResponse
	(*ListCloudGateway)(nil),                            // 149: erda.openapiv1.cmp.ListCloudGateway
	(*ListCloudResourceECS)(nil),                        // 150: erda.openapiv1.cmp.ListCloudResourceECS
	(*ListCloudResourceECSData)(nil),                    // 151: erda.openapiv1.cmp.ListCloudResourceECSData
	(*ListCloudResourceECSRequest)(nil),                 // 152: erda.openapiv1.cmp.ListCloudResourceECSRequest
	(*ListCloudResourceECSResponse)(nil),                // 153: erda.openapiv1.cmp.ListCloudResourceECSResponse
	(*ListCloudResourceGatewayRequest)(nil),             // 154: erda.openapiv1.cmp.ListCloudResourceGatewayRequest
	(*ListCloudResourceGatewayResponse)(nil),            // 155: erda.openapiv1.cmp.ListCloudResourceGatewayResponse
	(*ListCloudResourceMysqlRequest)(nil),               // 156: erda.openapiv1.cmp.ListCloudResourceMysqlRequest
	(*ListCloudResourceMysqlResponse)(nil),              // 157: erda.openapiv1.cmp.ListCloudResourceMysqlResponse
	(*ListCloudResourceOnsRequest)(nil),                 // 158: erda.openapiv1.cmp.ListCloudResourceOnsRequest
	(*ListCloudResourceOnsResponse)(nil),                // 159: erda.openapiv1.cmp.ListCloudResourceOnsResponse
	(*ListCloudResourceOssRequest)(nil),                 // 160: erda.openapiv1.cmp.ListCloudResourceOssRequest
	(*ListCloudResourceOssResponse)(nil),                // 161: erda.openapiv1.cmp.ListCloudResourceOssResponse
	(*ListCloudResourceRedisData)(nil),                  // 162: erda.openapiv1.cmp.ListCloudResourceRedisData
	(*ListCloudResourceRedisRequest)(nil),               // 163: erda.openapiv1.cmp.ListCloudResourceRedisRequest
	(*ListCloudResourceRedisResponse)(nil),              // 164: erda.openapiv1.cmp.ListCloudResourceRedisResponse
	(*ListCloudResourceRegion)(nil),                     // 165: erda.openapiv1.cmp.ListCloudResourceRegion
	(*ListCloudResourceRegionRequest)(nil),              // 166: erda.openapiv1.cmp.ListCloudResourceRegionRequest
	(*ListCloudResourceRegionResponse)(nil),             // 167: erda.openapiv1.cmp.ListCloudResourceRegionResponse
	(*ListCloudResourceVPC)(nil),                        // 168: erda.openapiv1.cmp.ListCloudResourceVPC
	(*ListCloudResourceVPCData)(nil),                    // 169: erda.openapiv1.cmp.ListCloudResourceVPCData
	(*ListCloudResourceVPCRequest)(nil),                 // 170: erda.openapiv1.cmp.ListCloudResourceVPCRequest
	(*ListCloudResourceVPCResponse)(nil),                // 171: erda.openapiv1.cmp.ListCloudResourceVPCResponse
	(*ListCloudResourceVSW)(nil),                        // 172: erda.openapiv1.cmp.ListCloudResourceVSW
	(*ListCloudResourceVSWData)(nil),                    // 173: erda.openapiv1.cmp.ListCloudResourceVSWData
	(*ListCloudResourceVSWRequest)(nil),                 // 174: erda.openapiv1.cmp.ListCloudResourceVSWRequest
	(*ListCloudResourceVSWResponse)(nil),                // 175: erda.openapiv1.cmp.ListCloudResourceVSWResponse
	(*ListCloudResourceZone)(nil),                       // 176: erda.openapiv1.cmp.ListCloudResourceZone
	(*ListCloudResourceZoneRequest)(nil),                // 177: erda.openapiv1.cmp.ListCloudResourceZoneRequest
	(*ListCloudResourceZoneResponse)(nil),               // 178: erda.openapiv1.cmp.ListCloudResourceZoneResponse
	(*MonthAddTrend)(nil),                               // 179: erda.openapiv1.cmp.MonthAddTrend
	(*MonthAddTrendData_0)(nil),                         // 180: erda.openapiv1.cmp.MonthAddTrendData_0
	(*MysqlAccountPrivilege)(nil),                       // 181: erda.openapiv1.cmp.MysqlAccountPrivilege
	(*MysqlDataBaseInfo)(nil),                           // 182: erda.openapiv1.cmp.MysqlDataBaseInfo
	(*OfflineEdgeClusterData)(nil),                      // 183: erda.openapiv1.cmp.OfflineEdgeClusterData
	(*OfflineEdgeClusterRequest)(nil),                   // 184: erda.openapiv1.cmp.OfflineEdgeClusterRequest
	(*OfflineEdgeClusterResponse)(nil),                  // 185: erda.openapiv1.cmp.OfflineEdgeClusterResponse
	(*OnsTopic)(nil),                                    // 186: erda.openapiv1.cmp.OnsTopic
	(*OpsAddonStatusData)(nil),                          // 187: erda.openapiv1.cmp.OpsAddonStatusData
	(*OpsAddonStatusQueryRequest)(nil),                  // 188: erda.openapiv1.cmp.OpsAddonStatusQueryRequest
	(*OpsAddonStatusResponse)(nil),                      // 189: erda.openapiv1.cmp.OpsAddonStatusResponse
	(*OrgClusterInfoBasicData)(nil),                     // 190: erda.openapiv1.cmp.OrgClusterInfoBasicData
	(*OrgClusterInfoData)(nil),                          // 191: erda.openapiv1.cmp.OrgClusterInfoData
	(*OrgClusterInfoRequest)(nil),                       // 192: erda.openapiv1.cmp.OrgClusterInfoRequest
	(*OrgClusterInfoResponse)(nil),                      // 193: erda.openapiv1.cmp.OrgClusterInfoResponse
	(*OrgRunningTasks)(nil),                             // 194: erda.openapiv1.cmp.OrgRunningTasks
	(*OrgRunningTasksData)(nil),                         // 195: erda.openapiv1.cmp.OrgRunningTasksData
	(*OrgRunningTasksListRequest)(nil),                  // 196: erda.openapiv1.cmp.OrgRunningTasksListRequest
	(*OrgRunningTasksListResponse)(nil),                 // 197: erda.openapiv1.cmp.OrgRunningTasksListResponse
	(*OssBucketInfo)(nil),                               // 198: erda.openapiv1.cmp.OssBucketInfo
	(*PrivateSlbInfo)(nil),                              // 199: erda.openapiv1.cmp.PrivateSlbInfo
	(*RmNodesData)(nil),                                 // 200: erda.openapiv1.cmp.RmNodesData
	(*RmNodesRequest)(nil),                              // 201: erda.openapiv1.cmp.RmNodesRequest
	(*RmNodesResponse)(nil),                             // 202: erda.openapiv1.cmp.RmNodesResponse
	(*UpdateLabelsData)(nil),                            // 203: erda.openapiv1.cmp.UpdateLabelsData
	(*UpdateLabelsRequest)(nil),                         // 204: erda.openapiv1.cmp.UpdateLabelsRequest
	(*UpdateLabelsResponse)(nil),                        // 205: erda.openapiv1.cmp.UpdateLabelsResponse
	(*UpgradeClusterInfo)(nil),                          // 206: erda.openapiv1.cmp.UpgradeClusterInfo
	(*UpgradeEdgeClusterData)(nil),                      // 207: erda.openapiv1.cmp.UpgradeEdgeClusterData
	(*UpgradeEdgeClusterRequest)(nil),                   // 208: erda.openapiv1.cmp.UpgradeEdgeClusterRequest
	(*UpgradeEdgeClusterResponse)(nil),                  // 209: erda.openapiv1.cmp.UpgradeEdgeClusterResponse
	nil,                                                 // 210: erda.openapiv1.cmp.AddonConfigUpdateRequest.ConfigEntry
	nil,                                                 // 211: erda.openapiv1.cmp.CloudResourceMysqlBasicData.TagEntry
	nil,                                                 // 212: erda.openapiv1.cmp.CloudResourceOnsBasicData.TagsEntry
	nil,                                                 // 213: erda.openapiv1.cmp.CloudResourceOnsGroupBasicData.TagsEntry
	nil,                                                 // 214: erda.openapiv1.cmp.CloudResourceOssBasicData.TagsEntry
	nil,                                                 // 215: erda.openapiv1.cmp.CloudResourceOverviewResponse.DataEntry
	nil,                                                 // 216: erda.openapiv1.cmp.CloudResourceRedisBasicData.TagsEntry
	nil,                                                 // 217: erda.openapiv1.cmp.ClusterUpdateRequest.URLsEntry
	nil,                                                 // 218: erda.openapiv1.cmp.ListCloudResourceECS.TagEntry
	nil,                                                 // 219: erda.openapiv1.cmp.ListCloudResourceVPC.TagsEntry
	nil,                                                 // 220: erda.openapiv1.cmp.ListCloudResourceVSW.TagsEntry
	nil,                                                 // 221: erda.openapiv1.cmp.OnsTopic.TagsEntry
	nil,                                                 // 222: erda.openapiv1.cmp.UpdateLabelsRequest.LabelsWithValueEntry
	(*structpb.Value)(nil),                              // 223: google.protobuf.Value
	(*timestamppb.Timestamp)(nil),                       // 224: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                               // 225: google.protobuf.Empty
}
var file_cmp_proto_depIdxs = []int32{
	223, // 0: erda.openapiv1.cmp.AddNodesResponse.data:type_name -> google.protobuf.Value
	223, // 1: erda.openapiv1.cmp.AddonConfigResponse.data:type_name -> google.protobuf.Value
	223, // 2: erda.openapiv1.cmp.AddonConfigUpdateRequest.addonOpsBaseRequest:type_name -> google.protobuf.Value
	210, // 3: erda.openapiv1.cmp.AddonConfigUpdateRequest.config:type_name -> erda.openapiv1.cmp.AddonConfigUpdateRequest.ConfigEntry
	223, // 4: erda.openapiv1.cmp.AddonConfigUpdateResponse.error:type_name -> google.protobuf.Value
	223, // 5: erda.openapiv1.cmp.AddonScaleRequest.addonOpsBaseRequest:type_name -> google.protobuf.Value
	223, // 6: erda.openapiv1.cmp.AddonScaleResponse.error:type_name -> google.protobuf.Value
	223, // 7: erda.openapiv1.cmp.BatchUpgradeEdgeClusterRequest.clusters:type_name -> google.protobuf.Value
	223, // 8: erda.openapiv1.cmp.CloudClusterRequest.cloudClusterInfo:type_name -> google.protobuf.Value
	223, // 9: erda.openapiv1.cmp.CloudClusterRequest.cloudClusterContainerInfo:type_name -> google.protobuf.Value
	223, // 10: erda.openapiv1.cmp.CloudClusterRequest.cloudClusterNewCreateInfo:type_name -> google.protobuf.Value
	223, // 11: erda.openapiv1.cmp.CloudClusterRequest.cloudClusterInstaller:type_name -> google.protobuf.Value
	223, // 12: erda.openapiv1.cmp.CloudClusterRequest.cloudClusterNas:type_name -> google.protobuf.Value
	223, // 13: erda.openapiv1.cmp.CloudClusterRequest.cloudClusterGlusterfs:type_name -> google.protobuf.Value
	223, // 14: erda.openapiv1.cmp.CloudClusterRequest.cloudClusterHostsInfo:type_name -> google.protobuf.Value
	223, // 15: erda.openapiv1.cmp.CloudClusterResponse.data:type_name -> google.protobuf.Value
	223, // 16: erda.openapiv1.cmp.CloudNodesResponse.data:type_name -> google.protobuf.Value
	223, // 17: erda.openapiv1.cmp.CloudResourceDetailInfo.items:type_name -> google.protobuf.Value
	211, // 18: erda.openapiv1.cmp.CloudResourceMysqlBasicData.tag:type_name -> erda.openapiv1.cmp.CloudResourceMysqlBasicData.TagEntry
	223, // 19: erda.openapiv1.cmp.CloudResourceMysqlDB.accounts:type_name -> google.protobuf.Value
	223, // 20: erda.openapiv1.cmp.CloudResourceMysqlDBInfo.list:type_name -> google.protobuf.Value
	223, // 21: erda.openapiv1.cmp.CloudResourceMysqlDBRequest.cloudResourceMysqlDetailInfoRequest:type_name -> google.protobuf.Value
	223, // 22: erda.openapiv1.cmp.CloudResourceMysqlDBResponse.data:type_name -> google.protobuf.Value
	223, // 23: erda.openapiv1.cmp.CloudResourceMysqlData.list:type_name -> google.protobuf.Value
	223, // 24: erda.openapiv1.cmp.CloudResourceMysqlDetailInfoResponse.data:type_name -> google.protobuf.Value
	223, // 25: erda.openapiv1.cmp.CloudResourceMysqlListAccountData.list:type_name -> google.protobuf.Value
	223, // 26: erda.openapiv1.cmp.CloudResourceMysqlListAccountItem.databasePrivileges:type_name -> google.protobuf.Value
	223, // 27: erda.openapiv1.cmp.CloudResourceMysqlListAccountResponse.data:type_name -> google.protobuf.Value
	212, // 28: erda.openapiv1.cmp.CloudResourceOnsBasicData.tags:type_name -> erda.openapiv1.cmp.CloudResourceOnsBasicData.TagsEntry
	223, // 29: erda.openapiv1.cmp.CloudResourceOnsData.list:type_name -> google.protobuf.Value
	223, // 30: erda.openapiv1.cmp.CloudResourceOnsDetailInfoResponse.data:type_name -> google.protobuf.Value
	213, // 31: erda.openapiv1.cmp.CloudResourceOnsGroupBasicData.tags:type_name -> erda.openapiv1.cmp.CloudResourceOnsGroupBasicData.TagsEntry
	223, // 32: erda.openapiv1.cmp.CloudResourceOnsGroupInfoData.list:type_name -> google.protobuf.Value
	223, // 33: erda.openapiv1.cmp.CloudResourceOnsGroupInfoResponse.data:type_name -> google.protobuf.Value
	223, // 34: erda.openapiv1.cmp.CloudResourceOnsTopicAndGroup.cloudResourceOnsGroupBaseInfo:type_name -> google.protobuf.Value
	223, // 35: erda.openapiv1.cmp.CloudResourceOnsTopicInfo.list:type_name -> google.protobuf.Value
	223, // 36: erda.openapiv1.cmp.CloudResourceOnsTopicInfoRequest.cloudResourceMysqlDetailInfoRequest:type_name -> google.protobuf.Value
	223, // 37: erda.openapiv1.cmp.CloudResourceOnsTopicInfoResponse.data:type_name -> google.protobuf.Value
	214, // 38: erda.openapiv1.cmp.CloudResourceOssBasicData.tags:type_name -> erda.openapiv1.cmp.CloudResourceOssBasicData.TagsEntry
	223, // 39: erda.openapiv1.cmp.CloudResourceOssData.list:type_name -> google.protobuf.Value
	223, // 40: erda.openapiv1.cmp.CloudResourceOssDetailInfoResponse.data:type_name -> google.protobuf.Value
	215, // 41: erda.openapiv1.cmp.CloudResourceOverviewResponse.data:type_name -> erda.openapiv1.cmp.CloudResourceOverviewResponse.DataEntry
	216, // 42: erda.openapiv1.cmp.CloudResourceRedisBasicData.tags:type_name -> erda.openapiv1.cmp.CloudResourceRedisBasicData.TagsEntry
	223, // 43: erda.openapiv1.cmp.CloudResourceRedisDetailInfoResponse.data:type_name -> google.protobuf.Value
	223, // 44: erda.openapiv1.cmp.CloudResourceSetTagRequest.items:type_name -> google.protobuf.Value
	223, // 45: erda.openapiv1.cmp.ClusterUpdateRequest.schedulerConfig:type_name -> google.protobuf.Value
	223, // 46: erda.openapiv1.cmp.ClusterUpdateRequest.opsConfig:type_name -> google.protobuf.Value
	223, // 47: erda.openapiv1.cmp.ClusterUpdateRequest.sysConfig:type_name -> google.protobuf.Value
	223, // 48: erda.openapiv1.cmp.ClusterUpdateRequest.manageConfig:type_name -> google.protobuf.Value
	217, // 49: erda.openapiv1.cmp.ClusterUpdateRequest.uRLs:type_name -> erda.openapiv1.cmp.ClusterUpdateRequest.URLsEntry
	223, // 50: erda.openapiv1.cmp.ClusterUpdateResponse.data:type_name -> google.protobuf.Value
	223, // 51: erda.openapiv1.cmp.CreateCloudResourceMysqlAccountResponse.data:type_name -> google.protobuf.Value
	223, // 52: erda.openapiv1.cmp.CreateCloudResourceMysqlDBRequest.createCloudResourceBaseInfo:type_name -> google.protobuf.Value
	223, // 53: erda.openapiv1.cmp.CreateCloudResourceMysqlDBRequest.databases:type_name -> google.protobuf.Value
	223, // 54: erda.openapiv1.cmp.CreateCloudResourceMysqlDBResponse.data:type_name -> google.protobuf.Value
	223, // 55: erda.openapiv1.cmp.CreateCloudResourceMysqlRequest.createCloudResourceBaseRequest:type_name -> google.protobuf.Value
	223, // 56: erda.openapiv1.cmp.CreateCloudResourceMysqlRequest.databases:type_name -> google.protobuf.Value
	223, // 57: erda.openapiv1.cmp.CreateCloudResourceMysqlResponse.data:type_name -> google.protobuf.Value
	223, // 58: erda.openapiv1.cmp.CreateCloudResourceOnsGroupRequest.groups:type_name -> google.protobuf.Value
	223, // 59: erda.openapiv1.cmp.CreateCloudResourceOnsRequest.createCloudResourceBaseInfo:type_name -> google.protobuf.Value
	223, // 60: erda.openapiv1.cmp.CreateCloudResourceOnsRequest.topics:type_name -> google.protobuf.Value
	223, // 61: erda.openapiv1.cmp.CreateCloudResourceOnsResponse.data:type_name -> google.protobuf.Value
	223, // 62: erda.openapiv1.cmp.CreateCloudResourceOnsTopicRequest.createCloudResourceBaseInfo:type_name -> google.protobuf.Value
	223, // 63: erda.openapiv1.cmp.CreateCloudResourceOnsTopicRequest.topics:type_name -> google.protobuf.Value
	223, // 64: erda.openapiv1.cmp.CreateCloudResourceOnsTopicResponse.data:type_name -> google.protobuf.Value
	223, // 65: erda.openapiv1.cmp.CreateCloudResourceOssRequest.createCloudResourceBaseInfo:type_name -> google.protobuf.Value
	223, // 66: erda.openapiv1.cmp.CreateCloudResourceOssRequest.buckets:type_name -> google.protobuf.Value
	223, // 67: erda.openapiv1.cmp.CreateCloudResourceOssResponse.data:type_name -> google.protobuf.Value
	223, // 68: erda.openapiv1.cmp.CreateCloudResourceRedisRequest.createCloudResourceBaseRequest:type_name -> google.protobuf.Value
	223, // 69: erda.openapiv1.cmp.CreateCloudResourceRedisResponse.data:type_name -> google.protobuf.Value
	223, // 70: erda.openapiv1.cmp.CreateCloudResourceVPCResponse.data:type_name -> google.protobuf.Value
	223, // 71: erda.openapiv1.cmp.CreateCloudResourceVSWResponse.data:type_name -> google.protobuf.Value
	223, // 72: erda.openapiv1.cmp.DeleteCloudResourceMysqlDBRequest.cloudAddonResourceDeleteRequest:type_name -> google.protobuf.Value
	223, // 73: erda.openapiv1.cmp.ErrorResponse.ctx:type_name -> google.protobuf.Value
	223, // 74: erda.openapiv1.cmp.GetCloudResourceECSTrendResponse.data:type_name -> google.protobuf.Value
	223, // 75: erda.openapiv1.cmp.GrantMysqlAccountPrivilegeRequest.accountPrivileges:type_name -> google.protobuf.Value
	223, // 76: erda.openapiv1.cmp.GrantMysqlAccountPrivilegeResponse.data:type_name -> google.protobuf.Value
	223, // 77: erda.openapiv1.cmp.HandleCloudResourceECSData.failedInstances:type_name -> google.protobuf.Value
	223, // 78: erda.openapiv1.cmp.HandleCloudResourceECSResponse.data:type_name -> google.protobuf.Value
	223, // 79: erda.openapiv1.cmp.K8SClusters.data:type_name -> google.protobuf.Value
	223, // 80: erda.openapiv1.cmp.ListCloudAccountData.list:type_name -> google.protobuf.Value
	223, // 81: erda.openapiv1.cmp.ListCloudAccountResponse.data:type_name -> google.protobuf.Value
	223, // 82: erda.openapiv1.cmp.ListCloudGateway.slbs:type_name -> google.protobuf.Value
	223, // 83: erda.openapiv1.cmp.ListCloudGateway.gateways:type_name -> google.protobuf.Value
	218, // 84: erda.openapiv1.cmp.ListCloudResourceECS.tag:type_name -> erda.openapiv1.cmp.ListCloudResourceECS.TagEntry
	223, // 85: erda.openapiv1.cmp.ListCloudResourceECSData.list:type_name -> google.protobuf.Value
	223, // 86: erda.openapiv1.cmp.ListCloudResourceECSResponse.data:type_name -> google.protobuf.Value
	223, // 87: erda.openapiv1.cmp.ListCloudResourceGatewayResponse.data:type_name -> google.protobuf.Value
	223, // 88: erda.openapiv1.cmp.ListCloudResourceMysqlResponse.data:type_name -> google.protobuf.Value
	223, // 89: erda.openapiv1.cmp.ListCloudResourceOnsResponse.data:type_name -> google.protobuf.Value
	223, // 90: erda.openapiv1.cmp.ListCloudResourceOssResponse.data:type_name -> google.protobuf.Value
	223, // 91: erda.openapiv1.cmp.ListCloudResourceRedisData.list:type_name -> google.protobuf.Value
	223, // 92: erda.openapiv1.cmp.ListCloudResourceRedisResponse.data:type_name -> google.protobuf.Value
	223, // 93: erda.openapiv1.cmp.ListCloudResourceRegionResponse.data:type_name -> google.protobuf.Value
	219, // 94: erda.openapiv1.cmp.ListCloudResourceVPC.tags:type_name -> erda.openapiv1.cmp.ListCloudResourceVPC.TagsEntry
	223, // 95: erda.openapiv1.cmp.ListCloudResourceVPCData.list:type_name -> google.protobuf.Value
	223, // 96: erda.openapiv1.cmp.ListCloudResourceVPCResponse.data:type_name -> google.protobuf.Value
	220, // 97: erda.openapiv1.cmp.ListCloudResourceVSW.tags:type_name -> erda.openapiv1.cmp.ListCloudResourceVSW.TagsEntry
	223, // 98: erda.openapiv1.cmp.ListCloudResourceVSWData.list:type_name -> google.protobuf.Value
	223, // 99: erda.openapiv1.cmp.ListCloudResourceVSWResponse.data:type_name -> google.protobuf.Value
	223, // 100: erda.openapiv1.cmp.ListCloudResourceZoneResponse.data:type_name -> google.protobuf.Value
	223, // 101: erda.openapiv1.cmp.MonthAddTrend.results:type_name -> google.protobuf.Value
	223, // 102: erda.openapiv1.cmp.MonthAddTrendData_0.data:type_name -> google.protobuf.Value
	223, // 103: erda.openapiv1.cmp.MysqlDataBaseInfo.cloudResourceMysqlAccount:type_name -> google.protobuf.Value
	223, // 104: erda.openapiv1.cmp.OfflineEdgeClusterResponse.data:type_name -> google.protobuf.Value
	221, // 105: erda.openapiv1.cmp.OnsTopic.tags:type_name -> erda.openapiv1.cmp.OnsTopic.TagsEntry
	223, // 106: erda.openapiv1.cmp.OpsAddonStatusResponse.data:type_name -> google.protobuf.Value
	223, // 107: erda.openapiv1.cmp.OrgClusterInfoData.list:type_name -> google.protobuf.Value
	223, // 108: erda.openapiv1.cmp.OrgClusterInfoResponse.data:type_name -> google.protobuf.Value
	224, // 109: erda.openapiv1.cmp.OrgRunningTasks.createdAt:type_name -> google.protobuf.Timestamp
	223, // 110: erda.openapiv1.cmp.OrgRunningTasksData.tasks:type_name -> google.protobuf.Value
	223, // 111: erda.openapiv1.cmp.OrgRunningTasksListResponse.data:type_name -> google.protobuf.Value
	223, // 112: erda.openapiv1.cmp.RmNodesResponse.data:type_name -> google.protobuf.Value
	222, // 113: erda.openapiv1.cmp.UpdateLabelsRequest.labelsWithValue:type_name -> erda.openapiv1.cmp.UpdateLabelsRequest.LabelsWithValueEntry
	223, // 114: erda.openapiv1.cmp.UpdateLabelsResponse.data:type_name -> google.protobuf.Value
	223, // 115: erda.openapiv1.cmp.UpgradeEdgeClusterResponse.data:type_name -> google.protobuf.Value
	223, // 116: erda.openapiv1.cmp.CloudResourceOverviewResponse.DataEntry.value:type_name -> google.protobuf.Value
	3,   // 117: erda.openapiv1.cmp.cmp.CMP_ADDON_CONFIG:input_type -> erda.openapiv1.cmp.AddonConfigRequest
	5,   // 118: erda.openapiv1.cmp.cmp.CMP_ADDON_CONFIG_UPDATE:input_type -> erda.openapiv1.cmp.AddonConfigUpdateRequest
	8,   // 119: erda.openapiv1.cmp.cmp.CMP_ADDON_SCALE:input_type -> erda.openapiv1.cmp.AddonScaleRequest
	188, // 120: erda.openapiv1.cmp.cmp.CMP_ADDON_STATUS:input_type -> erda.openapiv1.cmp.OpsAddonStatusQueryRequest
	14,  // 121: erda.openapiv1.cmp.cmp.CMP_ALERT_CONDITIONS:input_type -> erda.openapiv1.cmp.CMP_ALERT_CONDITIONS_Request
	15,  // 122: erda.openapiv1.cmp.cmp.CMP_ALERT_CONDITIONS_VALUE:input_type -> erda.openapiv1.cmp.CMP_ALERT_CONDITIONS_VALUE_Request
	53,  // 123: erda.openapiv1.cmp.cmp.CMP_CLOUD_CLUSTERS:input_type -> erda.openapiv1.cmp.CloudClusterRequest
	55,  // 124: erda.openapiv1.cmp.cmp.CMP_CLOUD_NODES:input_type -> erda.openapiv1.cmp.CloudNodesRequest
	19,  // 125: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE:input_type -> erda.openapiv1.cmp.CMP_CLOUD_RESOURCE_Request
	103, // 126: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ACCOUNT_CREATE:input_type -> erda.openapiv1.cmp.CreateCloudAccountRequest
	129, // 127: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ACCOUNT_DELETE:input_type -> erda.openapiv1.cmp.DeleteCloudAccountRequest
	16,  // 128: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ACCOUNT_LIST:input_type -> erda.openapiv1.cmp.CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request
	11,  // 129: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW:input_type -> erda.openapiv1.cmp.AutoRenewCloudResourceEcsRequest
	152, // 130: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ECS_LIST:input_type -> erda.openapiv1.cmp.ListCloudResourceECSRequest
	144, // 131: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ECS_RESTART:input_type -> erda.openapiv1.cmp.HandleCloudResourceEcsRequest
	144, // 132: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ECS_START:input_type -> erda.openapiv1.cmp.HandleCloudResourceEcsRequest
	144, // 133: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ECS_STOP:input_type -> erda.openapiv1.cmp.HandleCloudResourceEcsRequest
	17,  // 134: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ECS_TREND:input_type -> erda.openapiv1.cmp.CMP_CLOUD_RESOURCE_ECS_TREND_Request
	154, // 135: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_GATEWAY_LIST:input_type -> erda.openapiv1.cmp.ListCloudResourceGatewayRequest
	18,  // 136: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_LIST:input_type -> erda.openapiv1.cmp.CMP_CLOUD_RESOURCE_LIST_Request
	107, // 137: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE:input_type -> erda.openapiv1.cmp.CreateCloudResourceMysqlAccountRequest
	72,  // 138: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO:input_type -> erda.openapiv1.cmp.CloudResourceMysqlListAccountRequest
	107, // 139: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET:input_type -> erda.openapiv1.cmp.CreateCloudResourceMysqlAccountRequest
	139, // 140: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT:input_type -> erda.openapiv1.cmp.GrantMysqlAccountPrivilegeRequest
	111, // 141: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_CREATE:input_type -> erda.openapiv1.cmp.CreateCloudResourceMysqlRequest
	64,  // 142: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO:input_type -> erda.openapiv1.cmp.CloudResourceMysqlDBRequest
	109, // 143: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE:input_type -> erda.openapiv1.cmp.CreateCloudResourceMysqlDBRequest
	131, // 144: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE:input_type -> erda.openapiv1.cmp.DeleteCloudResourceMysqlDBRequest
	132, // 145: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_DELETE:input_type -> erda.openapiv1.cmp.DeleteCloudResourceMysqlRequest
	68,  // 146: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO:input_type -> erda.openapiv1.cmp.CloudResourceMysqlDetailInfoRequest
	156, // 147: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_LIST:input_type -> erda.openapiv1.cmp.ListCloudResourceMysqlRequest
	115, // 148: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_CREATE:input_type -> erda.openapiv1.cmp.CreateCloudResourceOnsRequest
	133, // 149: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_DELETE:input_type -> erda.openapiv1.cmp.DeleteCloudResourceOnsRequest
	76,  // 150: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO:input_type -> erda.openapiv1.cmp.CloudResourceOnsDetailInfoRequest
	113, // 151: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE:input_type -> erda.openapiv1.cmp.CreateCloudResourceOnsGroupRequest
	81,  // 152: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_GROUP_INFO:input_type -> erda.openapiv1.cmp.CloudResourceOnsGroupInfoRequest
	158, // 153: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_LIST:input_type -> erda.openapiv1.cmp.ListCloudResourceOnsRequest
	117, // 154: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE:input_type -> erda.openapiv1.cmp.CreateCloudResourceOnsTopicRequest
	133, // 155: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE:input_type -> erda.openapiv1.cmp.DeleteCloudResourceOnsRequest
	85,  // 156: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO:input_type -> erda.openapiv1.cmp.CloudResourceOnsTopicInfoRequest
	119, // 157: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_OSS_CREATE:input_type -> erda.openapiv1.cmp.CreateCloudResourceOssRequest
	134, // 158: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_OSS_DELETE:input_type -> erda.openapiv1.cmp.DeleteCloudResourceOssRequest
	90,  // 159: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO:input_type -> erda.openapiv1.cmp.CloudResourceOssDetailInfoRequest
	160, // 160: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_OSS_LIST:input_type -> erda.openapiv1.cmp.ListCloudResourceOssRequest
	92,  // 161: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_OVERVIEW:input_type -> erda.openapiv1.cmp.CloudResourceOverviewRequest
	121, // 162: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_REDIS_CREATE:input_type -> erda.openapiv1.cmp.CreateCloudResourceRedisRequest
	135, // 163: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_REDIS_DELETE:input_type -> erda.openapiv1.cmp.DeleteCloudResourceRedisRequest
	95,  // 164: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO:input_type -> erda.openapiv1.cmp.CloudResourceRedisDetailInfoRequest
	166, // 165: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_REGION_LIST:input_type -> erda.openapiv1.cmp.ListCloudResourceRegionRequest
	163, // 166: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_Redis_LIST:input_type -> erda.openapiv1.cmp.ListCloudResourceRedisRequest
	97,  // 167: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_SET_TAG:input_type -> erda.openapiv1.cmp.CloudResourceSetTagRequest
	124, // 168: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_VPC_CREATE:input_type -> erda.openapiv1.cmp.CreateCloudResourceVPCRequest
	170, // 169: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_VPC_LIST:input_type -> erda.openapiv1.cmp.ListCloudResourceVPCRequest
	127, // 170: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_VSW_CREATE:input_type -> erda.openapiv1.cmp.CreateCloudResourceVSWRequest
	174, // 171: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_VSW_LIST:input_type -> erda.openapiv1.cmp.ListCloudResourceVSWRequest
	177, // 172: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ZONE_LIST:input_type -> erda.openapiv1.cmp.ListCloudResourceZoneRequest
	12,  // 173: erda.openapiv1.cmp.cmp.CMP_CLUSTER_BATCH_UPGRADE:input_type -> erda.openapiv1.cmp.BatchUpgradeEdgeClusterRequest
	20,  // 174: erda.openapiv1.cmp.cmp.CMP_CLUSTER_IMPORT:input_type -> erda.openapiv1.cmp.CMP_CLUSTER_IMPORT_Request
	21,  // 175: erda.openapiv1.cmp.cmp.CMP_CLUSTER_INFO:input_type -> erda.openapiv1.cmp.CMP_CLUSTER_INFO_Request
	22,  // 176: erda.openapiv1.cmp.cmp.CMP_CLUSTER_INIT_COMMAND:input_type -> erda.openapiv1.cmp.CMP_CLUSTER_INIT_COMMAND_Request
	23,  // 177: erda.openapiv1.cmp.cmp.CMP_CLUSTER_INIT_RETRY:input_type -> erda.openapiv1.cmp.CMP_CLUSTER_INIT_RETRY_Request
	184, // 178: erda.openapiv1.cmp.cmp.CMP_CLUSTER_OFFLINE:input_type -> erda.openapiv1.cmp.OfflineEdgeClusterRequest
	24,  // 179: erda.openapiv1.cmp.cmp.CMP_CLUSTER_PREVIEW:input_type -> erda.openapiv1.cmp.CMP_CLUSTER_PREVIEW_Request
	100, // 180: erda.openapiv1.cmp.cmp.CMP_CLUSTER_UPDATE:input_type -> erda.openapiv1.cmp.ClusterUpdateRequest
	208, // 181: erda.openapiv1.cmp.cmp.CMP_CLUSTER_UPGRADE:input_type -> erda.openapiv1.cmp.UpgradeEdgeClusterRequest
	25,  // 182: erda.openapiv1.cmp.cmp.CMP_CREDENTIAL_ACCESSKEY_CREATE:input_type -> erda.openapiv1.cmp.CMP_CREDENTIAL_ACCESSKEY_CREATE_Request
	26,  // 183: erda.openapiv1.cmp.cmp.CMP_CREDENTIAL_ACCESSKEY_GET:input_type -> erda.openapiv1.cmp.CMP_CREDENTIAL_ACCESSKEY_GET_Request
	27,  // 184: erda.openapiv1.cmp.cmp.CMP_CREDENTIAL_ACCESSKEY_RESET:input_type -> erda.openapiv1.cmp.CMP_CREDENTIAL_ACCESSKEY_RESET_Request
	136, // 185: erda.openapiv1.cmp.cmp.CMP_EDGE_HOST_OFFLINE:input_type -> erda.openapiv1.cmp.EdgeHostOffline
	28,  // 186: erda.openapiv1.cmp.cmp.CMP_K8S_CLUSTERS:input_type -> erda.openapiv1.cmp.CMP_K8S_CLUSTERS_Request
	1,   // 187: erda.openapiv1.cmp.cmp.CMP_NODES:input_type -> erda.openapiv1.cmp.AddNodesRequest
	201, // 188: erda.openapiv1.cmp.cmp.CMP_NODES_REMOVE:input_type -> erda.openapiv1.cmp.RmNodesRequest
	29,  // 189: erda.openapiv1.cmp.cmp.CMP_NODE_LABELS_LIST:input_type -> erda.openapiv1.cmp.CMP_NODE_LABELS_LIST_Request
	204, // 190: erda.openapiv1.cmp.cmp.CMP_NODE_LABELS_UPDATE:input_type -> erda.openapiv1.cmp.UpdateLabelsRequest
	30,  // 191: erda.openapiv1.cmp.cmp.CMP_NODE_LOGS:input_type -> erda.openapiv1.cmp.CMP_NODE_LOGS_Request
	192, // 192: erda.openapiv1.cmp.cmp.CMP_ORG_CLUSTER_INFO:input_type -> erda.openapiv1.cmp.OrgClusterInfoRequest
	31,  // 193: erda.openapiv1.cmp.cmp.CMP_RECORDS:input_type -> erda.openapiv1.cmp.CMP_RECORDS_Request
	32,  // 194: erda.openapiv1.cmp.cmp.CMP_RECORDTYPES:input_type -> erda.openapiv1.cmp.CMP_RECORDTYPES_Request
	33,  // 195: erda.openapiv1.cmp.cmp.CMP_RESOURCE_OVERVIEW_CLASS:input_type -> erda.openapiv1.cmp.CMP_RESOURCE_OVERVIEW_CLASS_Request
	34,  // 196: erda.openapiv1.cmp.cmp.CMP_RESOURCE_OVERVIEW_CLUSTER_TREND:input_type -> erda.openapiv1.cmp.CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request
	35,  // 197: erda.openapiv1.cmp.cmp.CMP_RESOURCE_OVERVIEW_GAUGE:input_type -> erda.openapiv1.cmp.CMP_RESOURCE_OVERVIEW_GAUGE_Request
	36,  // 198: erda.openapiv1.cmp.cmp.CMP_RESOURCE_OVERVIEW_PROJECT_TREND:input_type -> erda.openapiv1.cmp.CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request
	37,  // 199: erda.openapiv1.cmp.cmp.CMP_RESOURCE_OVERVIEW_REPORT:input_type -> erda.openapiv1.cmp.CMP_RESOURCE_OVERVIEW_REPORT_Request
	196, // 200: erda.openapiv1.cmp.cmp.CMP_RUNNING_TASKS_LIST:input_type -> erda.openapiv1.cmp.OrgRunningTasksListRequest
	38,  // 201: erda.openapiv1.cmp.cmp.CMP_STEVE_CREATE:input_type -> erda.openapiv1.cmp.CMP_STEVE_CREATE_Request
	39,  // 202: erda.openapiv1.cmp.cmp.CMP_STEVE_DELETE:input_type -> erda.openapiv1.cmp.CMP_STEVE_DELETE_Request
	40,  // 203: erda.openapiv1.cmp.cmp.CMP_STEVE_GET:input_type -> erda.openapiv1.cmp.CMP_STEVE_GET_Request
	41,  // 204: erda.openapiv1.cmp.cmp.CMP_STEVE_PATCH:input_type -> erda.openapiv1.cmp.CMP_STEVE_PATCH_Request
	42,  // 205: erda.openapiv1.cmp.cmp.CMP_STEVE_UPDATE:input_type -> erda.openapiv1.cmp.CMP_STEVE_UPDATE_Request
	43,  // 206: erda.openapiv1.cmp.cmp.CMP_STEVE_WS:input_type -> erda.openapiv1.cmp.CMP_STEVE_WS_Request
	4,   // 207: erda.openapiv1.cmp.cmp.CMP_ADDON_CONFIG:output_type -> erda.openapiv1.cmp.AddonConfigResponse
	6,   // 208: erda.openapiv1.cmp.cmp.CMP_ADDON_CONFIG_UPDATE:output_type -> erda.openapiv1.cmp.AddonConfigUpdateResponse
	9,   // 209: erda.openapiv1.cmp.cmp.CMP_ADDON_SCALE:output_type -> erda.openapiv1.cmp.AddonScaleResponse
	189, // 210: erda.openapiv1.cmp.cmp.CMP_ADDON_STATUS:output_type -> erda.openapiv1.cmp.OpsAddonStatusResponse
	225, // 211: erda.openapiv1.cmp.cmp.CMP_ALERT_CONDITIONS:output_type -> google.protobuf.Empty
	225, // 212: erda.openapiv1.cmp.cmp.CMP_ALERT_CONDITIONS_VALUE:output_type -> google.protobuf.Empty
	54,  // 213: erda.openapiv1.cmp.cmp.CMP_CLOUD_CLUSTERS:output_type -> erda.openapiv1.cmp.CloudClusterResponse
	56,  // 214: erda.openapiv1.cmp.cmp.CMP_CLOUD_NODES:output_type -> erda.openapiv1.cmp.CloudNodesResponse
	225, // 215: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE:output_type -> google.protobuf.Empty
	104, // 216: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ACCOUNT_CREATE:output_type -> erda.openapiv1.cmp.CreateCloudAccountResponse
	130, // 217: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ACCOUNT_DELETE:output_type -> erda.openapiv1.cmp.DeleteCloudAccountResponse
	148, // 218: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ACCOUNT_LIST:output_type -> erda.openapiv1.cmp.ListCloudAccountResponse
	143, // 219: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW:output_type -> erda.openapiv1.cmp.HandleCloudResourceECSResponse
	153, // 220: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ECS_LIST:output_type -> erda.openapiv1.cmp.ListCloudResourceECSResponse
	143, // 221: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ECS_RESTART:output_type -> erda.openapiv1.cmp.HandleCloudResourceECSResponse
	143, // 222: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ECS_START:output_type -> erda.openapiv1.cmp.HandleCloudResourceECSResponse
	143, // 223: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ECS_STOP:output_type -> erda.openapiv1.cmp.HandleCloudResourceECSResponse
	138, // 224: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ECS_TREND:output_type -> erda.openapiv1.cmp.GetCloudResourceECSTrendResponse
	155, // 225: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_GATEWAY_LIST:output_type -> erda.openapiv1.cmp.ListCloudResourceGatewayResponse
	225, // 226: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_LIST:output_type -> google.protobuf.Empty
	108, // 227: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE:output_type -> erda.openapiv1.cmp.CreateCloudResourceMysqlAccountResponse
	73,  // 228: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO:output_type -> erda.openapiv1.cmp.CloudResourceMysqlListAccountResponse
	108, // 229: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET:output_type -> erda.openapiv1.cmp.CreateCloudResourceMysqlAccountResponse
	140, // 230: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT:output_type -> erda.openapiv1.cmp.GrantMysqlAccountPrivilegeResponse
	112, // 231: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_CREATE:output_type -> erda.openapiv1.cmp.CreateCloudResourceMysqlResponse
	65,  // 232: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO:output_type -> erda.openapiv1.cmp.CloudResourceMysqlDBResponse
	110, // 233: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE:output_type -> erda.openapiv1.cmp.CreateCloudResourceMysqlDBResponse
	45,  // 234: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE:output_type -> erda.openapiv1.cmp.CloudAddonResourceDeleteRespnse
	45,  // 235: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_DELETE:output_type -> erda.openapiv1.cmp.CloudAddonResourceDeleteRespnse
	69,  // 236: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO:output_type -> erda.openapiv1.cmp.CloudResourceMysqlDetailInfoResponse
	157, // 237: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_MYSQL_LIST:output_type -> erda.openapiv1.cmp.ListCloudResourceMysqlResponse
	116, // 238: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_CREATE:output_type -> erda.openapiv1.cmp.CreateCloudResourceOnsResponse
	45,  // 239: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_DELETE:output_type -> erda.openapiv1.cmp.CloudAddonResourceDeleteRespnse
	77,  // 240: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO:output_type -> erda.openapiv1.cmp.CloudResourceOnsDetailInfoResponse
	114, // 241: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE:output_type -> erda.openapiv1.cmp.CreateCloudResourceOnsGroupResponse
	82,  // 242: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_GROUP_INFO:output_type -> erda.openapiv1.cmp.CloudResourceOnsGroupInfoResponse
	159, // 243: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_LIST:output_type -> erda.openapiv1.cmp.ListCloudResourceOnsResponse
	118, // 244: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE:output_type -> erda.openapiv1.cmp.CreateCloudResourceOnsTopicResponse
	45,  // 245: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE:output_type -> erda.openapiv1.cmp.CloudAddonResourceDeleteRespnse
	86,  // 246: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO:output_type -> erda.openapiv1.cmp.CloudResourceOnsTopicInfoResponse
	120, // 247: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_OSS_CREATE:output_type -> erda.openapiv1.cmp.CreateCloudResourceOssResponse
	45,  // 248: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_OSS_DELETE:output_type -> erda.openapiv1.cmp.CloudAddonResourceDeleteRespnse
	91,  // 249: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO:output_type -> erda.openapiv1.cmp.CloudResourceOssDetailInfoResponse
	161, // 250: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_OSS_LIST:output_type -> erda.openapiv1.cmp.ListCloudResourceOssResponse
	93,  // 251: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_OVERVIEW:output_type -> erda.openapiv1.cmp.CloudResourceOverviewResponse
	122, // 252: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_REDIS_CREATE:output_type -> erda.openapiv1.cmp.CreateCloudResourceRedisResponse
	45,  // 253: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_REDIS_DELETE:output_type -> erda.openapiv1.cmp.CloudAddonResourceDeleteRespnse
	96,  // 254: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO:output_type -> erda.openapiv1.cmp.CloudResourceRedisDetailInfoResponse
	167, // 255: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_REGION_LIST:output_type -> erda.openapiv1.cmp.ListCloudResourceRegionResponse
	164, // 256: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_Redis_LIST:output_type -> erda.openapiv1.cmp.ListCloudResourceRedisResponse
	98,  // 257: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_SET_TAG:output_type -> erda.openapiv1.cmp.CloudResourceSetTagResponse
	125, // 258: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_VPC_CREATE:output_type -> erda.openapiv1.cmp.CreateCloudResourceVPCResponse
	171, // 259: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_VPC_LIST:output_type -> erda.openapiv1.cmp.ListCloudResourceVPCResponse
	128, // 260: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_VSW_CREATE:output_type -> erda.openapiv1.cmp.CreateCloudResourceVSWResponse
	175, // 261: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_VSW_LIST:output_type -> erda.openapiv1.cmp.ListCloudResourceVSWResponse
	178, // 262: erda.openapiv1.cmp.cmp.CMP_CLOUD_RESOURCE_ZONE_LIST:output_type -> erda.openapiv1.cmp.ListCloudResourceZoneResponse
	13,  // 263: erda.openapiv1.cmp.cmp.CMP_CLUSTER_BATCH_UPGRADE:output_type -> erda.openapiv1.cmp.BatchUpgradeEdgeClusterResponse
	225, // 264: erda.openapiv1.cmp.cmp.CMP_CLUSTER_IMPORT:output_type -> google.protobuf.Empty
	225, // 265: erda.openapiv1.cmp.cmp.CMP_CLUSTER_INFO:output_type -> google.protobuf.Empty
	225, // 266: erda.openapiv1.cmp.cmp.CMP_CLUSTER_INIT_COMMAND:output_type -> google.protobuf.Empty
	225, // 267: erda.openapiv1.cmp.cmp.CMP_CLUSTER_INIT_RETRY:output_type -> google.protobuf.Empty
	185, // 268: erda.openapiv1.cmp.cmp.CMP_CLUSTER_OFFLINE:output_type -> erda.openapiv1.cmp.OfflineEdgeClusterResponse
	225, // 269: erda.openapiv1.cmp.cmp.CMP_CLUSTER_PREVIEW:output_type -> google.protobuf.Empty
	101, // 270: erda.openapiv1.cmp.cmp.CMP_CLUSTER_UPDATE:output_type -> erda.openapiv1.cmp.ClusterUpdateResponse
	209, // 271: erda.openapiv1.cmp.cmp.CMP_CLUSTER_UPGRADE:output_type -> erda.openapiv1.cmp.UpgradeEdgeClusterResponse
	225, // 272: erda.openapiv1.cmp.cmp.CMP_CREDENTIAL_ACCESSKEY_CREATE:output_type -> google.protobuf.Empty
	225, // 273: erda.openapiv1.cmp.cmp.CMP_CREDENTIAL_ACCESSKEY_GET:output_type -> google.protobuf.Empty
	225, // 274: erda.openapiv1.cmp.cmp.CMP_CREDENTIAL_ACCESSKEY_RESET:output_type -> google.protobuf.Empty
	225, // 275: erda.openapiv1.cmp.cmp.CMP_EDGE_HOST_OFFLINE:output_type -> google.protobuf.Empty
	145, // 276: erda.openapiv1.cmp.cmp.CMP_K8S_CLUSTERS:output_type -> erda.openapiv1.cmp.K8SClusters
	2,   // 277: erda.openapiv1.cmp.cmp.CMP_NODES:output_type -> erda.openapiv1.cmp.AddNodesResponse
	202, // 278: erda.openapiv1.cmp.cmp.CMP_NODES_REMOVE:output_type -> erda.openapiv1.cmp.RmNodesResponse
	225, // 279: erda.openapiv1.cmp.cmp.CMP_NODE_LABELS_LIST:output_type -> google.protobuf.Empty
	205, // 280: erda.openapiv1.cmp.cmp.CMP_NODE_LABELS_UPDATE:output_type -> erda.openapiv1.cmp.UpdateLabelsResponse
	225, // 281: erda.openapiv1.cmp.cmp.CMP_NODE_LOGS:output_type -> google.protobuf.Empty
	193, // 282: erda.openapiv1.cmp.cmp.CMP_ORG_CLUSTER_INFO:output_type -> erda.openapiv1.cmp.OrgClusterInfoResponse
	225, // 283: erda.openapiv1.cmp.cmp.CMP_RECORDS:output_type -> google.protobuf.Empty
	225, // 284: erda.openapiv1.cmp.cmp.CMP_RECORDTYPES:output_type -> google.protobuf.Empty
	225, // 285: erda.openapiv1.cmp.cmp.CMP_RESOURCE_OVERVIEW_CLASS:output_type -> google.protobuf.Empty
	225, // 286: erda.openapiv1.cmp.cmp.CMP_RESOURCE_OVERVIEW_CLUSTER_TREND:output_type -> google.protobuf.Empty
	225, // 287: erda.openapiv1.cmp.cmp.CMP_RESOURCE_OVERVIEW_GAUGE:output_type -> google.protobuf.Empty
	225, // 288: erda.openapiv1.cmp.cmp.CMP_RESOURCE_OVERVIEW_PROJECT_TREND:output_type -> google.protobuf.Empty
	225, // 289: erda.openapiv1.cmp.cmp.CMP_RESOURCE_OVERVIEW_REPORT:output_type -> google.protobuf.Empty
	197, // 290: erda.openapiv1.cmp.cmp.CMP_RUNNING_TASKS_LIST:output_type -> erda.openapiv1.cmp.OrgRunningTasksListResponse
	225, // 291: erda.openapiv1.cmp.cmp.CMP_STEVE_CREATE:output_type -> google.protobuf.Empty
	225, // 292: erda.openapiv1.cmp.cmp.CMP_STEVE_DELETE:output_type -> google.protobuf.Empty
	225, // 293: erda.openapiv1.cmp.cmp.CMP_STEVE_GET:output_type -> google.protobuf.Empty
	225, // 294: erda.openapiv1.cmp.cmp.CMP_STEVE_PATCH:output_type -> google.protobuf.Empty
	225, // 295: erda.openapiv1.cmp.cmp.CMP_STEVE_UPDATE:output_type -> google.protobuf.Empty
	225, // 296: erda.openapiv1.cmp.cmp.CMP_STEVE_WS:output_type -> google.protobuf.Empty
	207, // [207:297] is the sub-list for method output_type
	117, // [117:207] is the sub-list for method input_type
	117, // [117:117] is the sub-list for extension type_name
	117, // [117:117] is the sub-list for extension extendee
	0,   // [0:117] is the sub-list for field type_name
}

func init() { file_cmp_proto_init() }
func file_cmp_proto_init() {
	if File_cmp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cmp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNodesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonConfigUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonConfigUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonOpsBaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonScaleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonScaleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiGatewayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoRenewCloudResourceEcsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpgradeEdgeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpgradeEdgeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_ALERT_CONDITIONS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_ALERT_CONDITIONS_VALUE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_CLOUD_RESOURCE_ECS_TREND_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_CLOUD_RESOURCE_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_CLOUD_RESOURCE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_CLUSTER_IMPORT_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_CLUSTER_INFO_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_CLUSTER_INIT_COMMAND_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_CLUSTER_INIT_RETRY_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_CLUSTER_PREVIEW_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_CREDENTIAL_ACCESSKEY_CREATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_CREDENTIAL_ACCESSKEY_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_CREDENTIAL_ACCESSKEY_RESET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_K8S_CLUSTERS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_NODE_LABELS_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_NODE_LOGS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_RECORDS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_RECORDTYPES_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_RESOURCE_OVERVIEW_CLASS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_RESOURCE_OVERVIEW_GAUGE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_RESOURCE_OVERVIEW_REPORT_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_STEVE_CREATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_STEVE_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_STEVE_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_STEVE_PATCH_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_STEVE_UPDATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMP_STEVE_WS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAddonResourceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAddonResourceDeleteRespnse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudClusterContainerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudClusterGlusterfs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudClusterHostsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudClusterInstaller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudClusterNas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudClusterNewCreateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceDetailItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlAccountPrivileges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlBasicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlDBInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlDBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlDBResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlDetailInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlDetailInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlDetailInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlListAccountData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlListAccountItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlListAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceMysqlListAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOnsBasicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOnsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOnsDetailInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOnsDetailInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOnsGroupBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOnsGroupBasicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOnsGroupInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOnsGroupInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOnsGroupInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOnsTopicAndGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOnsTopicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOnsTopicInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOnsTopicInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOssBasicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOssData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOssDetailInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOssDetailInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOssDetailInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOverviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceOverviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceRedisBasicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceRedisDetailInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceRedisDetailInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceSetTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceSetTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudResourceTagItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClustersData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceBaseResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceMysqlAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceMysqlAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceMysqlDBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceMysqlDBResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceMysqlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceMysqlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceOnsGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceOnsGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceOnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceOnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceOnsTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceOnsTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceOssRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceOssResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceRedisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceRedisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceVPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceVPCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceVPCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceVSW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceVSWRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudResourceVSWResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudResourceMysqlDBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudResourceMysqlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudResourceOnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudResourceOssRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudResourceRedisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeHostOffline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudResourceECSTrendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantMysqlAccountPrivilegeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantMysqlAccountPrivilegeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleCloudResourceECSData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleCloudResourceECSDataResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleCloudResourceECSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleCloudResourceEcsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SClusters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudAccountData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudGateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceECS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceECSData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceECSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceECSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceGatewayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceMysqlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceMysqlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceOnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceOnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceOssRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceOssResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceRedisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceRedisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceRedisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceVPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceVPCData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceVPCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceVPCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceVSW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceVSWData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceVSWRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceVSWResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudResourceZoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthAddTrend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthAddTrendData_0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlAccountPrivilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlDataBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineEdgeClusterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineEdgeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineEdgeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnsTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpsAddonStatusData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpsAddonStatusQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpsAddonStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgClusterInfoBasicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgClusterInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgClusterInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgClusterInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgRunningTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgRunningTasksData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgRunningTasksListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgRunningTasksListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OssBucketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateSlbInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RmNodesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RmNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RmNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabelsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeEdgeClusterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeEdgeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmp_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeEdgeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cmp_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_cmp_proto_msgTypes[100].OneofWrappers = []interface{}{}
	file_cmp_proto_msgTypes[111].OneofWrappers = []interface{}{}
	file_cmp_proto_msgTypes[115].OneofWrappers = []interface{}{}
	file_cmp_proto_msgTypes[119].OneofWrappers = []interface{}{}
	file_cmp_proto_msgTypes[121].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   223,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cmp_proto_goTypes,
		DependencyIndexes: file_cmp_proto_depIdxs,
		MessageInfos:      file_cmp_proto_msgTypes,
	}.Build()
	File_cmp_proto = out.File
	file_cmp_proto_rawDesc = nil
	file_cmp_proto_goTypes = nil
	file_cmp_proto_depIdxs = nil
}
