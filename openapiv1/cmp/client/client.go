// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: cmp.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/cmp/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// Cmp cmp.proto
	Cmp() pb.CmpClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		cmp: pb.NewCmpClient(cc),
	}
}

type serviceClients struct {
	cmp pb.CmpClient
}

func (c *serviceClients) Cmp() pb.CmpClient {
	return c.cmp
}

type cmpWrapper struct {
	client pb.CmpClient
	opts   []grpc1.CallOption
}

func (s *cmpWrapper) CMP_ADDON_CONFIG(ctx context.Context, req *pb.AddonConfigRequest) (*pb.AddonConfigResponse, error) {
	return s.client.CMP_ADDON_CONFIG(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_ADDON_CONFIG_UPDATE(ctx context.Context, req *pb.AddonConfigUpdateRequest) (*pb.AddonConfigUpdateResponse, error) {
	return s.client.CMP_ADDON_CONFIG_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_ADDON_SCALE(ctx context.Context, req *pb.AddonScaleRequest) (*pb.AddonScaleResponse, error) {
	return s.client.CMP_ADDON_SCALE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_ADDON_STATUS(ctx context.Context, req *pb.OpsAddonStatusQueryRequest) (*pb.OpsAddonStatusResponse, error) {
	return s.client.CMP_ADDON_STATUS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_ALERT_CONDITIONS(ctx context.Context, req *pb.CMP_ALERT_CONDITIONS_Request) (*emptypb.Empty, error) {
	return s.client.CMP_ALERT_CONDITIONS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_ALERT_CONDITIONS_VALUE(ctx context.Context, req *pb.CMP_ALERT_CONDITIONS_VALUE_Request) (*emptypb.Empty, error) {
	return s.client.CMP_ALERT_CONDITIONS_VALUE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_CLUSTERS(ctx context.Context, req *pb.CloudClusterRequest) (*pb.CloudClusterResponse, error) {
	return s.client.CMP_CLOUD_CLUSTERS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_NODES(ctx context.Context, req *pb.CloudNodesRequest) (*pb.CloudNodesResponse, error) {
	return s.client.CMP_CLOUD_NODES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE(ctx context.Context, req *pb.CMP_CLOUD_RESOURCE_Request) (*emptypb.Empty, error) {
	return s.client.CMP_CLOUD_RESOURCE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ACCOUNT_CREATE(ctx context.Context, req *pb.CreateCloudAccountRequest) (*pb.CreateCloudAccountResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ACCOUNT_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ACCOUNT_DELETE(ctx context.Context, req *pb.DeleteCloudAccountRequest) (*pb.DeleteCloudAccountResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ACCOUNT_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ACCOUNT_LIST(ctx context.Context, req *pb.CMP_CLOUD_RESOURCE_ACCOUNT_LIST_Request) (*pb.ListCloudAccountResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ACCOUNT_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW(ctx context.Context, req *pb.AutoRenewCloudResourceEcsRequest) (*pb.HandleCloudResourceECSResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ECS_AUTO_RENEW(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ECS_LIST(ctx context.Context, req *pb.ListCloudResourceECSRequest) (*pb.ListCloudResourceECSResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ECS_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ECS_RESTART(ctx context.Context, req *pb.HandleCloudResourceEcsRequest) (*pb.HandleCloudResourceECSResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ECS_RESTART(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ECS_START(ctx context.Context, req *pb.HandleCloudResourceEcsRequest) (*pb.HandleCloudResourceECSResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ECS_START(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ECS_STOP(ctx context.Context, req *pb.HandleCloudResourceEcsRequest) (*pb.HandleCloudResourceECSResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ECS_STOP(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ECS_TREND(ctx context.Context, req *pb.CMP_CLOUD_RESOURCE_ECS_TREND_Request) (*pb.GetCloudResourceECSTrendResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ECS_TREND(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_GATEWAY_LIST(ctx context.Context, req *pb.ListCloudResourceGatewayRequest) (*pb.ListCloudResourceGatewayResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_GATEWAY_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_LIST(ctx context.Context, req *pb.CMP_CLOUD_RESOURCE_LIST_Request) (*emptypb.Empty, error) {
	return s.client.CMP_CLOUD_RESOURCE_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE(ctx context.Context, req *pb.CreateCloudResourceMysqlAccountRequest) (*pb.CreateCloudResourceMysqlAccountResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO(ctx context.Context, req *pb.CloudResourceMysqlListAccountRequest) (*pb.CloudResourceMysqlListAccountResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_INFO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET(ctx context.Context, req *pb.CreateCloudResourceMysqlAccountRequest) (*pb.CreateCloudResourceMysqlAccountResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PASSWORD_RESET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT(ctx context.Context, req *pb.GrantMysqlAccountPrivilegeRequest) (*pb.GrantMysqlAccountPrivilegeResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_MYSQL_ACCOUNT_PRIVILEGE_GRANT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_MYSQL_CREATE(ctx context.Context, req *pb.CreateCloudResourceMysqlRequest) (*pb.CreateCloudResourceMysqlResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_MYSQL_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO(ctx context.Context, req *pb.CloudResourceMysqlDBRequest) (*pb.CloudResourceMysqlDBResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_MYSQL_DATABASE_INFO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE(ctx context.Context, req *pb.CreateCloudResourceMysqlDBRequest) (*pb.CreateCloudResourceMysqlDBResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_MYSQL_DB_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE(ctx context.Context, req *pb.DeleteCloudResourceMysqlDBRequest) (*pb.CloudAddonResourceDeleteRespnse, error) {
	return s.client.CMP_CLOUD_RESOURCE_MYSQL_DB_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_MYSQL_DELETE(ctx context.Context, req *pb.DeleteCloudResourceMysqlRequest) (*pb.CloudAddonResourceDeleteRespnse, error) {
	return s.client.CMP_CLOUD_RESOURCE_MYSQL_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO(ctx context.Context, req *pb.CloudResourceMysqlDetailInfoRequest) (*pb.CloudResourceMysqlDetailInfoResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_MYSQL_DETAIL_INFO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_MYSQL_LIST(ctx context.Context, req *pb.ListCloudResourceMysqlRequest) (*pb.ListCloudResourceMysqlResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_MYSQL_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ONS_CREATE(ctx context.Context, req *pb.CreateCloudResourceOnsRequest) (*pb.CreateCloudResourceOnsResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ONS_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ONS_DELETE(ctx context.Context, req *pb.DeleteCloudResourceOnsRequest) (*pb.CloudAddonResourceDeleteRespnse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ONS_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO(ctx context.Context, req *pb.CloudResourceOnsDetailInfoRequest) (*pb.CloudResourceOnsDetailInfoResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ONS_DETAIL_INFO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE(ctx context.Context, req *pb.CreateCloudResourceOnsGroupRequest) (*pb.CreateCloudResourceOnsGroupResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ONS_GROUP_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ONS_GROUP_INFO(ctx context.Context, req *pb.CloudResourceOnsGroupInfoRequest) (*pb.CloudResourceOnsGroupInfoResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ONS_GROUP_INFO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ONS_LIST(ctx context.Context, req *pb.ListCloudResourceOnsRequest) (*pb.ListCloudResourceOnsResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ONS_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE(ctx context.Context, req *pb.CreateCloudResourceOnsTopicRequest) (*pb.CreateCloudResourceOnsTopicResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ONS_TOPIC_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE(ctx context.Context, req *pb.DeleteCloudResourceOnsRequest) (*pb.CloudAddonResourceDeleteRespnse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ONS_TOPIC_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO(ctx context.Context, req *pb.CloudResourceOnsTopicInfoRequest) (*pb.CloudResourceOnsTopicInfoResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ONS_TOPIC_INFO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_OSS_CREATE(ctx context.Context, req *pb.CreateCloudResourceOssRequest) (*pb.CreateCloudResourceOssResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_OSS_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_OSS_DELETE(ctx context.Context, req *pb.DeleteCloudResourceOssRequest) (*pb.CloudAddonResourceDeleteRespnse, error) {
	return s.client.CMP_CLOUD_RESOURCE_OSS_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO(ctx context.Context, req *pb.CloudResourceOssDetailInfoRequest) (*pb.CloudResourceOssDetailInfoResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_OSS_DETAIL_INFO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_OSS_LIST(ctx context.Context, req *pb.ListCloudResourceOssRequest) (*pb.ListCloudResourceOssResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_OSS_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_OVERVIEW(ctx context.Context, req *pb.CloudResourceOverviewRequest) (*pb.CloudResourceOverviewResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_OVERVIEW(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_REDIS_CREATE(ctx context.Context, req *pb.CreateCloudResourceRedisRequest) (*pb.CreateCloudResourceRedisResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_REDIS_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_REDIS_DELETE(ctx context.Context, req *pb.DeleteCloudResourceRedisRequest) (*pb.CloudAddonResourceDeleteRespnse, error) {
	return s.client.CMP_CLOUD_RESOURCE_REDIS_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO(ctx context.Context, req *pb.CloudResourceRedisDetailInfoRequest) (*pb.CloudResourceRedisDetailInfoResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_REDIS_DETAIL_INFO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_REGION_LIST(ctx context.Context, req *pb.ListCloudResourceRegionRequest) (*pb.ListCloudResourceRegionResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_REGION_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_Redis_LIST(ctx context.Context, req *pb.ListCloudResourceRedisRequest) (*pb.ListCloudResourceRedisResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_Redis_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_SET_TAG(ctx context.Context, req *pb.CloudResourceSetTagRequest) (*pb.CloudResourceSetTagResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_SET_TAG(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_VPC_CREATE(ctx context.Context, req *pb.CreateCloudResourceVPCRequest) (*pb.CreateCloudResourceVPCResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_VPC_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_VPC_LIST(ctx context.Context, req *pb.ListCloudResourceVPCRequest) (*pb.ListCloudResourceVPCResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_VPC_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_VSW_CREATE(ctx context.Context, req *pb.CreateCloudResourceVSWRequest) (*pb.CreateCloudResourceVSWResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_VSW_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_VSW_LIST(ctx context.Context, req *pb.ListCloudResourceVSWRequest) (*pb.ListCloudResourceVSWResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_VSW_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLOUD_RESOURCE_ZONE_LIST(ctx context.Context, req *pb.ListCloudResourceZoneRequest) (*pb.ListCloudResourceZoneResponse, error) {
	return s.client.CMP_CLOUD_RESOURCE_ZONE_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLUSTER_BATCH_UPGRADE(ctx context.Context, req *pb.BatchUpgradeEdgeClusterRequest) (*pb.BatchUpgradeEdgeClusterResponse, error) {
	return s.client.CMP_CLUSTER_BATCH_UPGRADE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLUSTER_IMPORT(ctx context.Context, req *pb.CMP_CLUSTER_IMPORT_Request) (*emptypb.Empty, error) {
	return s.client.CMP_CLUSTER_IMPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLUSTER_INFO(ctx context.Context, req *pb.CMP_CLUSTER_INFO_Request) (*emptypb.Empty, error) {
	return s.client.CMP_CLUSTER_INFO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLUSTER_INIT_COMMAND(ctx context.Context, req *pb.CMP_CLUSTER_INIT_COMMAND_Request) (*emptypb.Empty, error) {
	return s.client.CMP_CLUSTER_INIT_COMMAND(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLUSTER_INIT_RETRY(ctx context.Context, req *pb.CMP_CLUSTER_INIT_RETRY_Request) (*emptypb.Empty, error) {
	return s.client.CMP_CLUSTER_INIT_RETRY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLUSTER_OFFLINE(ctx context.Context, req *pb.OfflineEdgeClusterRequest) (*pb.OfflineEdgeClusterResponse, error) {
	return s.client.CMP_CLUSTER_OFFLINE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLUSTER_PREVIEW(ctx context.Context, req *pb.CMP_CLUSTER_PREVIEW_Request) (*emptypb.Empty, error) {
	return s.client.CMP_CLUSTER_PREVIEW(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLUSTER_UPDATE(ctx context.Context, req *pb.ClusterUpdateRequest) (*pb.ClusterUpdateResponse, error) {
	return s.client.CMP_CLUSTER_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CLUSTER_UPGRADE(ctx context.Context, req *pb.UpgradeEdgeClusterRequest) (*pb.UpgradeEdgeClusterResponse, error) {
	return s.client.CMP_CLUSTER_UPGRADE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CREDENTIAL_ACCESSKEY_CREATE(ctx context.Context, req *pb.CMP_CREDENTIAL_ACCESSKEY_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.CMP_CREDENTIAL_ACCESSKEY_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CREDENTIAL_ACCESSKEY_GET(ctx context.Context, req *pb.CMP_CREDENTIAL_ACCESSKEY_GET_Request) (*emptypb.Empty, error) {
	return s.client.CMP_CREDENTIAL_ACCESSKEY_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_CREDENTIAL_ACCESSKEY_RESET(ctx context.Context, req *pb.CMP_CREDENTIAL_ACCESSKEY_RESET_Request) (*emptypb.Empty, error) {
	return s.client.CMP_CREDENTIAL_ACCESSKEY_RESET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_EDGE_HOST_OFFLINE(ctx context.Context, req *pb.EdgeHostOffline) (*emptypb.Empty, error) {
	return s.client.CMP_EDGE_HOST_OFFLINE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_K8S_CLUSTERS(ctx context.Context, req *pb.CMP_K8S_CLUSTERS_Request) (*pb.K8SClusters, error) {
	return s.client.CMP_K8S_CLUSTERS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_NODES(ctx context.Context, req *pb.AddNodesRequest) (*pb.AddNodesResponse, error) {
	return s.client.CMP_NODES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_NODES_REMOVE(ctx context.Context, req *pb.RmNodesRequest) (*pb.RmNodesResponse, error) {
	return s.client.CMP_NODES_REMOVE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_NODE_LABELS_LIST(ctx context.Context, req *pb.CMP_NODE_LABELS_LIST_Request) (*emptypb.Empty, error) {
	return s.client.CMP_NODE_LABELS_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_NODE_LABELS_UPDATE(ctx context.Context, req *pb.UpdateLabelsRequest) (*pb.UpdateLabelsResponse, error) {
	return s.client.CMP_NODE_LABELS_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_NODE_LOGS(ctx context.Context, req *pb.CMP_NODE_LOGS_Request) (*emptypb.Empty, error) {
	return s.client.CMP_NODE_LOGS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_ORG_CLUSTER_INFO(ctx context.Context, req *pb.OrgClusterInfoRequest) (*pb.OrgClusterInfoResponse, error) {
	return s.client.CMP_ORG_CLUSTER_INFO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_RECORDS(ctx context.Context, req *pb.CMP_RECORDS_Request) (*emptypb.Empty, error) {
	return s.client.CMP_RECORDS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_RECORDTYPES(ctx context.Context, req *pb.CMP_RECORDTYPES_Request) (*emptypb.Empty, error) {
	return s.client.CMP_RECORDTYPES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_RESOURCE_OVERVIEW_CLASS(ctx context.Context, req *pb.CMP_RESOURCE_OVERVIEW_CLASS_Request) (*emptypb.Empty, error) {
	return s.client.CMP_RESOURCE_OVERVIEW_CLASS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_RESOURCE_OVERVIEW_CLUSTER_TREND(ctx context.Context, req *pb.CMP_RESOURCE_OVERVIEW_CLUSTER_TREND_Request) (*emptypb.Empty, error) {
	return s.client.CMP_RESOURCE_OVERVIEW_CLUSTER_TREND(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_RESOURCE_OVERVIEW_GAUGE(ctx context.Context, req *pb.CMP_RESOURCE_OVERVIEW_GAUGE_Request) (*emptypb.Empty, error) {
	return s.client.CMP_RESOURCE_OVERVIEW_GAUGE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_RESOURCE_OVERVIEW_PROJECT_TREND(ctx context.Context, req *pb.CMP_RESOURCE_OVERVIEW_PROJECT_TREND_Request) (*emptypb.Empty, error) {
	return s.client.CMP_RESOURCE_OVERVIEW_PROJECT_TREND(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_RESOURCE_OVERVIEW_REPORT(ctx context.Context, req *pb.CMP_RESOURCE_OVERVIEW_REPORT_Request) (*emptypb.Empty, error) {
	return s.client.CMP_RESOURCE_OVERVIEW_REPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_RUNNING_TASKS_LIST(ctx context.Context, req *pb.OrgRunningTasksListRequest) (*pb.OrgRunningTasksListResponse, error) {
	return s.client.CMP_RUNNING_TASKS_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_STEVE_CREATE(ctx context.Context, req *pb.CMP_STEVE_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.CMP_STEVE_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_STEVE_DELETE(ctx context.Context, req *pb.CMP_STEVE_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.CMP_STEVE_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_STEVE_GET(ctx context.Context, req *pb.CMP_STEVE_GET_Request) (*emptypb.Empty, error) {
	return s.client.CMP_STEVE_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_STEVE_PATCH(ctx context.Context, req *pb.CMP_STEVE_PATCH_Request) (*emptypb.Empty, error) {
	return s.client.CMP_STEVE_PATCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_STEVE_UPDATE(ctx context.Context, req *pb.CMP_STEVE_UPDATE_Request) (*emptypb.Empty, error) {
	return s.client.CMP_STEVE_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *cmpWrapper) CMP_STEVE_WS(ctx context.Context, req *pb.CMP_STEVE_WS_Request) (*emptypb.Empty, error) {
	return s.client.CMP_STEVE_WS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
