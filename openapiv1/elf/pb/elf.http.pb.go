// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: elf.proto

package pb

import (
	context "context"
	http1 "net/http"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// ElfHandler is the server API for Elf service.
type ElfHandler interface {
	// POST /api/v1/environments
	ELF_ENVIROMENT_CREATE(context.Context, *Environment) (*EnvironmentResponse, error)
	// DELETE /api/v1/environments/**
	ELF_ENVIROMENT_DELETE(context.Context, *ELF_ENVIROMENT_DELETE_Request) (*EnvironmentResponse, error)
	// GET /api/v1/environments/**
	ELF_ENVIROMENT_GET(context.Context, *ELF_ENVIROMENT_GET_Request) (*EnvironmentResponse, error)
	// GET /api/v1/environments
	ELF_ENVIROMENT_LIST(context.Context, *ELF_ENVIROMENT_LIST_Request) (*EnvironmentListResponse, error)
	// PUT /api/v1/environments/**
	ELF_ENVIROMENT_UPDATE(context.Context, *Environment) (*EnvironmentResponse, error)
	// POST /api/v1/notebooks
	ELF_NOTEBOOK_CREATE(context.Context, *Notebook) (*NotebookResponse, error)
	// DELETE /api/v1/notebooks/**
	ELF_NOTEBOOK_DELETE(context.Context, *ELF_NOTEBOOK_DELETE_Request) (*NotebookResponse, error)
	// GET /api/v1/notebooks/**
	ELF_NOTEBOOK_GET(context.Context, *ELF_NOTEBOOK_GET_Request) (*NotebookResponse, error)
	// GET /api/v1/notebooks
	ELF_NOTEBOOK_LIST(context.Context, *ELF_NOTEBOOK_LIST_Request) (*NotebookListResponse, error)
	// PUT /api/v1/notebooks/**
	ELF_NOTEBOOK_UPDATE(context.Context, *Notebook) (*NotebookResponse, error)
	// GET /api/v1/mods
	ELF_PACKAGE_LIST(context.Context, *ELF_PACKAGE_LIST_Request) (*DependencyPackageListResponse, error)
}

// RegisterElfHandler register ElfHandler to http.Router.
func RegisterElfHandler(r http.Router, srv ElfHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_ELF_ENVIROMENT_CREATE := func(method, path string, fn func(context.Context, *Environment) (*EnvironmentResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*Environment))
		}
		var ELF_ENVIROMENT_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			ELF_ENVIROMENT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_ENVIROMENT_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ELF_ENVIROMENT_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in Environment
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ELF_ENVIROMENT_DELETE := func(method, path string, fn func(context.Context, *ELF_ENVIROMENT_DELETE_Request) (*EnvironmentResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ELF_ENVIROMENT_DELETE_Request))
		}
		var ELF_ENVIROMENT_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			ELF_ENVIROMENT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_ENVIROMENT_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ELF_ENVIROMENT_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in ELF_ENVIROMENT_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ELF_ENVIROMENT_GET := func(method, path string, fn func(context.Context, *ELF_ENVIROMENT_GET_Request) (*EnvironmentResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ELF_ENVIROMENT_GET_Request))
		}
		var ELF_ENVIROMENT_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			ELF_ENVIROMENT_GET_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_ENVIROMENT_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ELF_ENVIROMENT_GET_info)
				}
				r = r.WithContext(ctx)
				var in ELF_ENVIROMENT_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ELF_ENVIROMENT_LIST := func(method, path string, fn func(context.Context, *ELF_ENVIROMENT_LIST_Request) (*EnvironmentListResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ELF_ENVIROMENT_LIST_Request))
		}
		var ELF_ENVIROMENT_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			ELF_ENVIROMENT_LIST_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_ENVIROMENT_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ELF_ENVIROMENT_LIST_info)
				}
				r = r.WithContext(ctx)
				var in ELF_ENVIROMENT_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ELF_ENVIROMENT_UPDATE := func(method, path string, fn func(context.Context, *Environment) (*EnvironmentResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*Environment))
		}
		var ELF_ENVIROMENT_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			ELF_ENVIROMENT_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_ENVIROMENT_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ELF_ENVIROMENT_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in Environment
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ELF_NOTEBOOK_CREATE := func(method, path string, fn func(context.Context, *Notebook) (*NotebookResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*Notebook))
		}
		var ELF_NOTEBOOK_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			ELF_NOTEBOOK_CREATE_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_NOTEBOOK_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ELF_NOTEBOOK_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in Notebook
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ELF_NOTEBOOK_DELETE := func(method, path string, fn func(context.Context, *ELF_NOTEBOOK_DELETE_Request) (*NotebookResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ELF_NOTEBOOK_DELETE_Request))
		}
		var ELF_NOTEBOOK_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			ELF_NOTEBOOK_DELETE_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_NOTEBOOK_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ELF_NOTEBOOK_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in ELF_NOTEBOOK_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ELF_NOTEBOOK_GET := func(method, path string, fn func(context.Context, *ELF_NOTEBOOK_GET_Request) (*NotebookResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ELF_NOTEBOOK_GET_Request))
		}
		var ELF_NOTEBOOK_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			ELF_NOTEBOOK_GET_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_NOTEBOOK_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ELF_NOTEBOOK_GET_info)
				}
				r = r.WithContext(ctx)
				var in ELF_NOTEBOOK_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ELF_NOTEBOOK_LIST := func(method, path string, fn func(context.Context, *ELF_NOTEBOOK_LIST_Request) (*NotebookListResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ELF_NOTEBOOK_LIST_Request))
		}
		var ELF_NOTEBOOK_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			ELF_NOTEBOOK_LIST_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_NOTEBOOK_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ELF_NOTEBOOK_LIST_info)
				}
				r = r.WithContext(ctx)
				var in ELF_NOTEBOOK_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ELF_NOTEBOOK_UPDATE := func(method, path string, fn func(context.Context, *Notebook) (*NotebookResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*Notebook))
		}
		var ELF_NOTEBOOK_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			ELF_NOTEBOOK_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_NOTEBOOK_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ELF_NOTEBOOK_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in Notebook
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ELF_PACKAGE_LIST := func(method, path string, fn func(context.Context, *ELF_PACKAGE_LIST_Request) (*DependencyPackageListResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ELF_PACKAGE_LIST_Request))
		}
		var ELF_PACKAGE_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			ELF_PACKAGE_LIST_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_PACKAGE_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ELF_PACKAGE_LIST_info)
				}
				r = r.WithContext(ctx)
				var in ELF_PACKAGE_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ELF_ENVIROMENT_CREATE("POST", "/api/v1/environments", srv.ELF_ENVIROMENT_CREATE)
	add_ELF_ENVIROMENT_DELETE("DELETE", "/api/v1/environments/**", srv.ELF_ENVIROMENT_DELETE)
	add_ELF_ENVIROMENT_GET("GET", "/api/v1/environments/**", srv.ELF_ENVIROMENT_GET)
	add_ELF_ENVIROMENT_LIST("GET", "/api/v1/environments", srv.ELF_ENVIROMENT_LIST)
	add_ELF_ENVIROMENT_UPDATE("PUT", "/api/v1/environments/**", srv.ELF_ENVIROMENT_UPDATE)
	add_ELF_NOTEBOOK_CREATE("POST", "/api/v1/notebooks", srv.ELF_NOTEBOOK_CREATE)
	add_ELF_NOTEBOOK_DELETE("DELETE", "/api/v1/notebooks/**", srv.ELF_NOTEBOOK_DELETE)
	add_ELF_NOTEBOOK_GET("GET", "/api/v1/notebooks/**", srv.ELF_NOTEBOOK_GET)
	add_ELF_NOTEBOOK_LIST("GET", "/api/v1/notebooks", srv.ELF_NOTEBOOK_LIST)
	add_ELF_NOTEBOOK_UPDATE("PUT", "/api/v1/notebooks/**", srv.ELF_NOTEBOOK_UPDATE)
	add_ELF_PACKAGE_LIST("GET", "/api/v1/mods", srv.ELF_PACKAGE_LIST)
}
