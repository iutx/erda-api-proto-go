// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: elf.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ElfClient is the client API for Elf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElfClient interface {
	ELF_ENVIROMENT_CREATE(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*EnvironmentResponse, error)
	ELF_ENVIROMENT_DELETE(ctx context.Context, in *ELF_ENVIROMENT_DELETE_Request, opts ...grpc.CallOption) (*EnvironmentResponse, error)
	ELF_ENVIROMENT_GET(ctx context.Context, in *ELF_ENVIROMENT_GET_Request, opts ...grpc.CallOption) (*EnvironmentResponse, error)
	ELF_ENVIROMENT_LIST(ctx context.Context, in *ELF_ENVIROMENT_LIST_Request, opts ...grpc.CallOption) (*EnvironmentListResponse, error)
	ELF_ENVIROMENT_UPDATE(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*EnvironmentResponse, error)
	ELF_NOTEBOOK_CREATE(ctx context.Context, in *Notebook, opts ...grpc.CallOption) (*NotebookResponse, error)
	ELF_NOTEBOOK_DELETE(ctx context.Context, in *ELF_NOTEBOOK_DELETE_Request, opts ...grpc.CallOption) (*NotebookResponse, error)
	ELF_NOTEBOOK_GET(ctx context.Context, in *ELF_NOTEBOOK_GET_Request, opts ...grpc.CallOption) (*NotebookResponse, error)
	ELF_NOTEBOOK_LIST(ctx context.Context, in *ELF_NOTEBOOK_LIST_Request, opts ...grpc.CallOption) (*NotebookListResponse, error)
	ELF_NOTEBOOK_UPDATE(ctx context.Context, in *Notebook, opts ...grpc.CallOption) (*NotebookResponse, error)
	ELF_PACKAGE_LIST(ctx context.Context, in *ELF_PACKAGE_LIST_Request, opts ...grpc.CallOption) (*DependencyPackageListResponse, error)
}

type elfClient struct {
	cc grpc1.ClientConnInterface
}

func NewElfClient(cc grpc1.ClientConnInterface) ElfClient {
	return &elfClient{cc}
}

func (c *elfClient) ELF_ENVIROMENT_CREATE(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*EnvironmentResponse, error) {
	out := new(EnvironmentResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.elf.elf/ELF_ENVIROMENT_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elfClient) ELF_ENVIROMENT_DELETE(ctx context.Context, in *ELF_ENVIROMENT_DELETE_Request, opts ...grpc.CallOption) (*EnvironmentResponse, error) {
	out := new(EnvironmentResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.elf.elf/ELF_ENVIROMENT_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elfClient) ELF_ENVIROMENT_GET(ctx context.Context, in *ELF_ENVIROMENT_GET_Request, opts ...grpc.CallOption) (*EnvironmentResponse, error) {
	out := new(EnvironmentResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.elf.elf/ELF_ENVIROMENT_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elfClient) ELF_ENVIROMENT_LIST(ctx context.Context, in *ELF_ENVIROMENT_LIST_Request, opts ...grpc.CallOption) (*EnvironmentListResponse, error) {
	out := new(EnvironmentListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.elf.elf/ELF_ENVIROMENT_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elfClient) ELF_ENVIROMENT_UPDATE(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*EnvironmentResponse, error) {
	out := new(EnvironmentResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.elf.elf/ELF_ENVIROMENT_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elfClient) ELF_NOTEBOOK_CREATE(ctx context.Context, in *Notebook, opts ...grpc.CallOption) (*NotebookResponse, error) {
	out := new(NotebookResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.elf.elf/ELF_NOTEBOOK_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elfClient) ELF_NOTEBOOK_DELETE(ctx context.Context, in *ELF_NOTEBOOK_DELETE_Request, opts ...grpc.CallOption) (*NotebookResponse, error) {
	out := new(NotebookResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.elf.elf/ELF_NOTEBOOK_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elfClient) ELF_NOTEBOOK_GET(ctx context.Context, in *ELF_NOTEBOOK_GET_Request, opts ...grpc.CallOption) (*NotebookResponse, error) {
	out := new(NotebookResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.elf.elf/ELF_NOTEBOOK_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elfClient) ELF_NOTEBOOK_LIST(ctx context.Context, in *ELF_NOTEBOOK_LIST_Request, opts ...grpc.CallOption) (*NotebookListResponse, error) {
	out := new(NotebookListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.elf.elf/ELF_NOTEBOOK_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elfClient) ELF_NOTEBOOK_UPDATE(ctx context.Context, in *Notebook, opts ...grpc.CallOption) (*NotebookResponse, error) {
	out := new(NotebookResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.elf.elf/ELF_NOTEBOOK_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elfClient) ELF_PACKAGE_LIST(ctx context.Context, in *ELF_PACKAGE_LIST_Request, opts ...grpc.CallOption) (*DependencyPackageListResponse, error) {
	out := new(DependencyPackageListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.elf.elf/ELF_PACKAGE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElfServer is the server API for Elf service.
// All implementations should embed UnimplementedElfServer
// for forward compatibility
type ElfServer interface {
	ELF_ENVIROMENT_CREATE(context.Context, *Environment) (*EnvironmentResponse, error)
	ELF_ENVIROMENT_DELETE(context.Context, *ELF_ENVIROMENT_DELETE_Request) (*EnvironmentResponse, error)
	ELF_ENVIROMENT_GET(context.Context, *ELF_ENVIROMENT_GET_Request) (*EnvironmentResponse, error)
	ELF_ENVIROMENT_LIST(context.Context, *ELF_ENVIROMENT_LIST_Request) (*EnvironmentListResponse, error)
	ELF_ENVIROMENT_UPDATE(context.Context, *Environment) (*EnvironmentResponse, error)
	ELF_NOTEBOOK_CREATE(context.Context, *Notebook) (*NotebookResponse, error)
	ELF_NOTEBOOK_DELETE(context.Context, *ELF_NOTEBOOK_DELETE_Request) (*NotebookResponse, error)
	ELF_NOTEBOOK_GET(context.Context, *ELF_NOTEBOOK_GET_Request) (*NotebookResponse, error)
	ELF_NOTEBOOK_LIST(context.Context, *ELF_NOTEBOOK_LIST_Request) (*NotebookListResponse, error)
	ELF_NOTEBOOK_UPDATE(context.Context, *Notebook) (*NotebookResponse, error)
	ELF_PACKAGE_LIST(context.Context, *ELF_PACKAGE_LIST_Request) (*DependencyPackageListResponse, error)
}

// UnimplementedElfServer should be embedded to have forward compatible implementations.
type UnimplementedElfServer struct {
}

func (*UnimplementedElfServer) ELF_ENVIROMENT_CREATE(context.Context, *Environment) (*EnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ELF_ENVIROMENT_CREATE not implemented")
}
func (*UnimplementedElfServer) ELF_ENVIROMENT_DELETE(context.Context, *ELF_ENVIROMENT_DELETE_Request) (*EnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ELF_ENVIROMENT_DELETE not implemented")
}
func (*UnimplementedElfServer) ELF_ENVIROMENT_GET(context.Context, *ELF_ENVIROMENT_GET_Request) (*EnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ELF_ENVIROMENT_GET not implemented")
}
func (*UnimplementedElfServer) ELF_ENVIROMENT_LIST(context.Context, *ELF_ENVIROMENT_LIST_Request) (*EnvironmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ELF_ENVIROMENT_LIST not implemented")
}
func (*UnimplementedElfServer) ELF_ENVIROMENT_UPDATE(context.Context, *Environment) (*EnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ELF_ENVIROMENT_UPDATE not implemented")
}
func (*UnimplementedElfServer) ELF_NOTEBOOK_CREATE(context.Context, *Notebook) (*NotebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ELF_NOTEBOOK_CREATE not implemented")
}
func (*UnimplementedElfServer) ELF_NOTEBOOK_DELETE(context.Context, *ELF_NOTEBOOK_DELETE_Request) (*NotebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ELF_NOTEBOOK_DELETE not implemented")
}
func (*UnimplementedElfServer) ELF_NOTEBOOK_GET(context.Context, *ELF_NOTEBOOK_GET_Request) (*NotebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ELF_NOTEBOOK_GET not implemented")
}
func (*UnimplementedElfServer) ELF_NOTEBOOK_LIST(context.Context, *ELF_NOTEBOOK_LIST_Request) (*NotebookListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ELF_NOTEBOOK_LIST not implemented")
}
func (*UnimplementedElfServer) ELF_NOTEBOOK_UPDATE(context.Context, *Notebook) (*NotebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ELF_NOTEBOOK_UPDATE not implemented")
}
func (*UnimplementedElfServer) ELF_PACKAGE_LIST(context.Context, *ELF_PACKAGE_LIST_Request) (*DependencyPackageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ELF_PACKAGE_LIST not implemented")
}

func RegisterElfServer(s grpc1.ServiceRegistrar, srv ElfServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Elf_serviceDesc(srv, opts...), srv)
}

var _Elf_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.elf.elf",
	HandlerType: (*ElfServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "elf.proto",
}

func _get_Elf_serviceDesc(srv ElfServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Elf_ELF_ENVIROMENT_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ELF_ENVIROMENT_CREATE(ctx, req.(*Environment))
	}
	var _Elf_ELF_ENVIROMENT_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Elf_ELF_ENVIROMENT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_ENVIROMENT_CREATE", srv)
		_Elf_ELF_ENVIROMENT_CREATE_Handler = h.Interceptor(_Elf_ELF_ENVIROMENT_CREATE_Handler)
	}

	_Elf_ELF_ENVIROMENT_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ELF_ENVIROMENT_DELETE(ctx, req.(*ELF_ENVIROMENT_DELETE_Request))
	}
	var _Elf_ELF_ENVIROMENT_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Elf_ELF_ENVIROMENT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_ENVIROMENT_DELETE", srv)
		_Elf_ELF_ENVIROMENT_DELETE_Handler = h.Interceptor(_Elf_ELF_ENVIROMENT_DELETE_Handler)
	}

	_Elf_ELF_ENVIROMENT_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ELF_ENVIROMENT_GET(ctx, req.(*ELF_ENVIROMENT_GET_Request))
	}
	var _Elf_ELF_ENVIROMENT_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Elf_ELF_ENVIROMENT_GET_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_ENVIROMENT_GET", srv)
		_Elf_ELF_ENVIROMENT_GET_Handler = h.Interceptor(_Elf_ELF_ENVIROMENT_GET_Handler)
	}

	_Elf_ELF_ENVIROMENT_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ELF_ENVIROMENT_LIST(ctx, req.(*ELF_ENVIROMENT_LIST_Request))
	}
	var _Elf_ELF_ENVIROMENT_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Elf_ELF_ENVIROMENT_LIST_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_ENVIROMENT_LIST", srv)
		_Elf_ELF_ENVIROMENT_LIST_Handler = h.Interceptor(_Elf_ELF_ENVIROMENT_LIST_Handler)
	}

	_Elf_ELF_ENVIROMENT_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ELF_ENVIROMENT_UPDATE(ctx, req.(*Environment))
	}
	var _Elf_ELF_ENVIROMENT_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Elf_ELF_ENVIROMENT_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_ENVIROMENT_UPDATE", srv)
		_Elf_ELF_ENVIROMENT_UPDATE_Handler = h.Interceptor(_Elf_ELF_ENVIROMENT_UPDATE_Handler)
	}

	_Elf_ELF_NOTEBOOK_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ELF_NOTEBOOK_CREATE(ctx, req.(*Notebook))
	}
	var _Elf_ELF_NOTEBOOK_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Elf_ELF_NOTEBOOK_CREATE_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_NOTEBOOK_CREATE", srv)
		_Elf_ELF_NOTEBOOK_CREATE_Handler = h.Interceptor(_Elf_ELF_NOTEBOOK_CREATE_Handler)
	}

	_Elf_ELF_NOTEBOOK_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ELF_NOTEBOOK_DELETE(ctx, req.(*ELF_NOTEBOOK_DELETE_Request))
	}
	var _Elf_ELF_NOTEBOOK_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Elf_ELF_NOTEBOOK_DELETE_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_NOTEBOOK_DELETE", srv)
		_Elf_ELF_NOTEBOOK_DELETE_Handler = h.Interceptor(_Elf_ELF_NOTEBOOK_DELETE_Handler)
	}

	_Elf_ELF_NOTEBOOK_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ELF_NOTEBOOK_GET(ctx, req.(*ELF_NOTEBOOK_GET_Request))
	}
	var _Elf_ELF_NOTEBOOK_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Elf_ELF_NOTEBOOK_GET_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_NOTEBOOK_GET", srv)
		_Elf_ELF_NOTEBOOK_GET_Handler = h.Interceptor(_Elf_ELF_NOTEBOOK_GET_Handler)
	}

	_Elf_ELF_NOTEBOOK_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ELF_NOTEBOOK_LIST(ctx, req.(*ELF_NOTEBOOK_LIST_Request))
	}
	var _Elf_ELF_NOTEBOOK_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Elf_ELF_NOTEBOOK_LIST_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_NOTEBOOK_LIST", srv)
		_Elf_ELF_NOTEBOOK_LIST_Handler = h.Interceptor(_Elf_ELF_NOTEBOOK_LIST_Handler)
	}

	_Elf_ELF_NOTEBOOK_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ELF_NOTEBOOK_UPDATE(ctx, req.(*Notebook))
	}
	var _Elf_ELF_NOTEBOOK_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Elf_ELF_NOTEBOOK_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_NOTEBOOK_UPDATE", srv)
		_Elf_ELF_NOTEBOOK_UPDATE_Handler = h.Interceptor(_Elf_ELF_NOTEBOOK_UPDATE_Handler)
	}

	_Elf_ELF_PACKAGE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ELF_PACKAGE_LIST(ctx, req.(*ELF_PACKAGE_LIST_Request))
	}
	var _Elf_ELF_PACKAGE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Elf_ELF_PACKAGE_LIST_info = transport.NewServiceInfo("erda.openapiv1.elf.elf", "ELF_PACKAGE_LIST", srv)
		_Elf_ELF_PACKAGE_LIST_Handler = h.Interceptor(_Elf_ELF_PACKAGE_LIST_Handler)
	}

	var serviceDesc = _Elf_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ELF_ENVIROMENT_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(Environment)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ElfServer).ELF_ENVIROMENT_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Elf_ELF_ENVIROMENT_CREATE_info)
				}
				if interceptor == nil {
					return _Elf_ELF_ENVIROMENT_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.elf.elf/ELF_ENVIROMENT_CREATE",
				}
				return interceptor(ctx, in, info, _Elf_ELF_ENVIROMENT_CREATE_Handler)
			},
		},
		{
			MethodName: "ELF_ENVIROMENT_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ELF_ENVIROMENT_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ElfServer).ELF_ENVIROMENT_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Elf_ELF_ENVIROMENT_DELETE_info)
				}
				if interceptor == nil {
					return _Elf_ELF_ENVIROMENT_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.elf.elf/ELF_ENVIROMENT_DELETE",
				}
				return interceptor(ctx, in, info, _Elf_ELF_ENVIROMENT_DELETE_Handler)
			},
		},
		{
			MethodName: "ELF_ENVIROMENT_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ELF_ENVIROMENT_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ElfServer).ELF_ENVIROMENT_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Elf_ELF_ENVIROMENT_GET_info)
				}
				if interceptor == nil {
					return _Elf_ELF_ENVIROMENT_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.elf.elf/ELF_ENVIROMENT_GET",
				}
				return interceptor(ctx, in, info, _Elf_ELF_ENVIROMENT_GET_Handler)
			},
		},
		{
			MethodName: "ELF_ENVIROMENT_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ELF_ENVIROMENT_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ElfServer).ELF_ENVIROMENT_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Elf_ELF_ENVIROMENT_LIST_info)
				}
				if interceptor == nil {
					return _Elf_ELF_ENVIROMENT_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.elf.elf/ELF_ENVIROMENT_LIST",
				}
				return interceptor(ctx, in, info, _Elf_ELF_ENVIROMENT_LIST_Handler)
			},
		},
		{
			MethodName: "ELF_ENVIROMENT_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(Environment)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ElfServer).ELF_ENVIROMENT_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Elf_ELF_ENVIROMENT_UPDATE_info)
				}
				if interceptor == nil {
					return _Elf_ELF_ENVIROMENT_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.elf.elf/ELF_ENVIROMENT_UPDATE",
				}
				return interceptor(ctx, in, info, _Elf_ELF_ENVIROMENT_UPDATE_Handler)
			},
		},
		{
			MethodName: "ELF_NOTEBOOK_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(Notebook)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ElfServer).ELF_NOTEBOOK_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Elf_ELF_NOTEBOOK_CREATE_info)
				}
				if interceptor == nil {
					return _Elf_ELF_NOTEBOOK_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.elf.elf/ELF_NOTEBOOK_CREATE",
				}
				return interceptor(ctx, in, info, _Elf_ELF_NOTEBOOK_CREATE_Handler)
			},
		},
		{
			MethodName: "ELF_NOTEBOOK_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ELF_NOTEBOOK_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ElfServer).ELF_NOTEBOOK_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Elf_ELF_NOTEBOOK_DELETE_info)
				}
				if interceptor == nil {
					return _Elf_ELF_NOTEBOOK_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.elf.elf/ELF_NOTEBOOK_DELETE",
				}
				return interceptor(ctx, in, info, _Elf_ELF_NOTEBOOK_DELETE_Handler)
			},
		},
		{
			MethodName: "ELF_NOTEBOOK_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ELF_NOTEBOOK_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ElfServer).ELF_NOTEBOOK_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Elf_ELF_NOTEBOOK_GET_info)
				}
				if interceptor == nil {
					return _Elf_ELF_NOTEBOOK_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.elf.elf/ELF_NOTEBOOK_GET",
				}
				return interceptor(ctx, in, info, _Elf_ELF_NOTEBOOK_GET_Handler)
			},
		},
		{
			MethodName: "ELF_NOTEBOOK_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ELF_NOTEBOOK_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ElfServer).ELF_NOTEBOOK_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Elf_ELF_NOTEBOOK_LIST_info)
				}
				if interceptor == nil {
					return _Elf_ELF_NOTEBOOK_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.elf.elf/ELF_NOTEBOOK_LIST",
				}
				return interceptor(ctx, in, info, _Elf_ELF_NOTEBOOK_LIST_Handler)
			},
		},
		{
			MethodName: "ELF_NOTEBOOK_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(Notebook)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ElfServer).ELF_NOTEBOOK_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Elf_ELF_NOTEBOOK_UPDATE_info)
				}
				if interceptor == nil {
					return _Elf_ELF_NOTEBOOK_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.elf.elf/ELF_NOTEBOOK_UPDATE",
				}
				return interceptor(ctx, in, info, _Elf_ELF_NOTEBOOK_UPDATE_Handler)
			},
		},
		{
			MethodName: "ELF_PACKAGE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ELF_PACKAGE_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ElfServer).ELF_PACKAGE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Elf_ELF_PACKAGE_LIST_info)
				}
				if interceptor == nil {
					return _Elf_ELF_PACKAGE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.elf.elf/ELF_PACKAGE_LIST",
				}
				return interceptor(ctx, in, info, _Elf_ELF_PACKAGE_LIST_Handler)
			},
		},
	}
	return &serviceDesc
}
