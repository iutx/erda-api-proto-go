// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core_services.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ApplicationDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApplicationDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApplicationDTOMultiError,
// or nil if none found.
func (m *ApplicationDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Mode

	// no validation rules for Pined

	// no validation rules for Desc

	// no validation rules for Logo

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ApplicationDTOValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ApplicationDTOValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ApplicationDTOValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for IsPublic

	// no validation rules for Creator

	// no validation rules for BlockStatus

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationDTOValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationDTOValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationDTOValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GitRepo

	// no validation rules for GitRepoAbbrev

	// no validation rules for GitRepoNew

	// no validation rules for Token

	// no validation rules for OrgID

	// no validation rules for OrgName

	// no validation rules for OrgDisplayName

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for ProjectDisplayName

	for idx, item := range m.GetWorkspaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  fmt.Sprintf("Workspaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  fmt.Sprintf("Workspaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationDTOValidationError{
					field:  fmt.Sprintf("Workspaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsExternalRepo

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationDTOValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationDTOValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Extra

	if m.UnBlockStart != nil {

		if all {
			switch v := interface{}(m.GetUnBlockStart()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "UnBlockStart",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "UnBlockStart",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnBlockStart()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationDTOValidationError{
					field:  "UnBlockStart",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UnBlockEnd != nil {

		if all {
			switch v := interface{}(m.GetUnBlockEnd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "UnBlockEnd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "UnBlockEnd",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnBlockEnd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationDTOValidationError{
					field:  "UnBlockEnd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RepoConfig != nil {

		if all {
			switch v := interface{}(m.GetRepoConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "RepoConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "RepoConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRepoConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationDTOValidationError{
					field:  "RepoConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.SonarConfig != nil {

		if all {
			switch v := interface{}(m.GetSonarConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "SonarConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationDTOValidationError{
						field:  "SonarConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSonarConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationDTOValidationError{
					field:  "SonarConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationDTOMultiError(errors)
	}

	return nil
}

// ApplicationDTOMultiError is an error wrapping multiple validation errors
// returned by ApplicationDTO.ValidateAll() if the designated constraints
// aren't met.
type ApplicationDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationDTOMultiError) AllErrors() []error { return m }

// ApplicationDTOValidationError is the validation error returned by
// ApplicationDTO.Validate if the designated constraints aren't met.
type ApplicationDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationDTOValidationError) ErrorName() string { return "ApplicationDTOValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationDTOValidationError{}

// Validate checks the field values on ApplicationFetchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationFetchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationFetchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationFetchRequestMultiError, or nil if none found.
func (m *ApplicationFetchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationFetchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationIDOrName

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return ApplicationFetchRequestMultiError(errors)
	}

	return nil
}

// ApplicationFetchRequestMultiError is an error wrapping multiple validation
// errors returned by ApplicationFetchRequest.ValidateAll() if the designated
// constraints aren't met.
type ApplicationFetchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationFetchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationFetchRequestMultiError) AllErrors() []error { return m }

// ApplicationFetchRequestValidationError is the validation error returned by
// ApplicationFetchRequest.Validate if the designated constraints aren't met.
type ApplicationFetchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationFetchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationFetchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationFetchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationFetchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationFetchRequestValidationError) ErrorName() string {
	return "ApplicationFetchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationFetchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationFetchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationFetchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationFetchRequestValidationError{}

// Validate checks the field values on ApplicationFetchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationFetchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationFetchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationFetchResponseMultiError, or nil if none found.
func (m *ApplicationFetchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationFetchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationFetchResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationFetchResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationFetchResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplicationFetchResponseMultiError(errors)
	}

	return nil
}

// ApplicationFetchResponseMultiError is an error wrapping multiple validation
// errors returned by ApplicationFetchResponse.ValidateAll() if the designated
// constraints aren't met.
type ApplicationFetchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationFetchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationFetchResponseMultiError) AllErrors() []error { return m }

// ApplicationFetchResponseValidationError is the validation error returned by
// ApplicationFetchResponse.Validate if the designated constraints aren't met.
type ApplicationFetchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationFetchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationFetchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationFetchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationFetchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationFetchResponseValidationError) ErrorName() string {
	return "ApplicationFetchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationFetchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationFetchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationFetchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationFetchResponseValidationError{}

// Validate checks the field values on ApplicationListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationListRequestMultiError, or nil if none found.
func (m *ApplicationListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for Mode

	// no validation rules for Query

	// no validation rules for Name

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Public

	// no validation rules for OrderBy

	// no validation rules for IsSimple

	if len(errors) > 0 {
		return ApplicationListRequestMultiError(errors)
	}

	return nil
}

// ApplicationListRequestMultiError is an error wrapping multiple validation
// errors returned by ApplicationListRequest.ValidateAll() if the designated
// constraints aren't met.
type ApplicationListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationListRequestMultiError) AllErrors() []error { return m }

// ApplicationListRequestValidationError is the validation error returned by
// ApplicationListRequest.Validate if the designated constraints aren't met.
type ApplicationListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationListRequestValidationError) ErrorName() string {
	return "ApplicationListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationListRequestValidationError{}

// Validate checks the field values on ApplicationListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationListResponseMultiError, or nil if none found.
func (m *ApplicationListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplicationListResponseMultiError(errors)
	}

	return nil
}

// ApplicationListResponseMultiError is an error wrapping multiple validation
// errors returned by ApplicationListResponse.ValidateAll() if the designated
// constraints aren't met.
type ApplicationListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationListResponseMultiError) AllErrors() []error { return m }

// ApplicationListResponseValidationError is the validation error returned by
// ApplicationListResponse.Validate if the designated constraints aren't met.
type ApplicationListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationListResponseValidationError) ErrorName() string {
	return "ApplicationListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationListResponseValidationError{}

// Validate checks the field values on ApplicationListResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationListResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationListResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationListResponseDataMultiError, or nil if none found.
func (m *ApplicationListResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationListResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationListResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationListResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationListResponseDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationListResponseDataMultiError(errors)
	}

	return nil
}

// ApplicationListResponseDataMultiError is an error wrapping multiple
// validation errors returned by ApplicationListResponseData.ValidateAll() if
// the designated constraints aren't met.
type ApplicationListResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationListResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationListResponseDataMultiError) AllErrors() []error { return m }

// ApplicationListResponseDataValidationError is the validation error returned
// by ApplicationListResponseData.Validate if the designated constraints
// aren't met.
type ApplicationListResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationListResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationListResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationListResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationListResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationListResponseDataValidationError) ErrorName() string {
	return "ApplicationListResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationListResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationListResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationListResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationListResponseDataValidationError{}

// Validate checks the field values on ApplicationStats with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplicationStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationStatsMultiError, or nil if none found.
func (m *ApplicationStats) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CountRuntimes

	// no validation rules for CountMembers

	// no validation rules for TimeLastModified

	if len(errors) > 0 {
		return ApplicationStatsMultiError(errors)
	}

	return nil
}

// ApplicationStatsMultiError is an error wrapping multiple validation errors
// returned by ApplicationStats.ValidateAll() if the designated constraints
// aren't met.
type ApplicationStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationStatsMultiError) AllErrors() []error { return m }

// ApplicationStatsValidationError is the validation error returned by
// ApplicationStats.Validate if the designated constraints aren't met.
type ApplicationStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationStatsValidationError) ErrorName() string { return "ApplicationStatsValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationStatsValidationError{}

// Validate checks the field values on ApplicationWorkspace with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationWorkspace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationWorkspace with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationWorkspaceMultiError, or nil if none found.
func (m *ApplicationWorkspace) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationWorkspace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for Workspace

	// no validation rules for ConfigNamespace

	if len(errors) > 0 {
		return ApplicationWorkspaceMultiError(errors)
	}

	return nil
}

// ApplicationWorkspaceMultiError is an error wrapping multiple validation
// errors returned by ApplicationWorkspace.ValidateAll() if the designated
// constraints aren't met.
type ApplicationWorkspaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationWorkspaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationWorkspaceMultiError) AllErrors() []error { return m }

// ApplicationWorkspaceValidationError is the validation error returned by
// ApplicationWorkspace.Validate if the designated constraints aren't met.
type ApplicationWorkspaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationWorkspaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationWorkspaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationWorkspaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationWorkspaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationWorkspaceValidationError) ErrorName() string {
	return "ApplicationWorkspaceValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationWorkspaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationWorkspace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationWorkspaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationWorkspaceValidationError{}

// Validate checks the field values on ApproveCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveCreateRequestMultiError, or nil if none found.
func (m *ApproveCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for TargetID

	// no validation rules for EntityID

	// no validation rules for TargetName

	// no validation rules for Type

	// no validation rules for Extra

	// no validation rules for Title

	// no validation rules for Priority

	// no validation rules for Desc

	if len(errors) > 0 {
		return ApproveCreateRequestMultiError(errors)
	}

	return nil
}

// ApproveCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ApproveCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ApproveCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveCreateRequestMultiError) AllErrors() []error { return m }

// ApproveCreateRequestValidationError is the validation error returned by
// ApproveCreateRequest.Validate if the designated constraints aren't met.
type ApproveCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveCreateRequestValidationError) ErrorName() string {
	return "ApproveCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveCreateRequestValidationError{}

// Validate checks the field values on ApproveCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveCreateResponseMultiError, or nil if none found.
func (m *ApproveCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApproveCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApproveCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApproveCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApproveCreateResponseMultiError(errors)
	}

	return nil
}

// ApproveCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ApproveCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ApproveCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveCreateResponseMultiError) AllErrors() []error { return m }

// ApproveCreateResponseValidationError is the validation error returned by
// ApproveCreateResponse.Validate if the designated constraints aren't met.
type ApproveCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveCreateResponseValidationError) ErrorName() string {
	return "ApproveCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveCreateResponseValidationError{}

// Validate checks the field values on ApproveDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApproveDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApproveDTOMultiError, or
// nil if none found.
func (m *ApproveDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for OrgID

	// no validation rules for EntityID

	// no validation rules for TargetID

	// no validation rules for TargetName

	// no validation rules for Type

	// no validation rules for Extra

	// no validation rules for Title

	// no validation rules for Priority

	// no validation rules for Desc

	// no validation rules for Status

	// no validation rules for Submitter

	// no validation rules for Approver

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApproveDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApproveDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApproveDTOValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApproveDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApproveDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApproveDTOValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ApprovalTime != nil {

		if all {
			switch v := interface{}(m.GetApprovalTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApproveDTOValidationError{
						field:  "ApprovalTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApproveDTOValidationError{
						field:  "ApprovalTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApprovalTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApproveDTOValidationError{
					field:  "ApprovalTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApproveDTOMultiError(errors)
	}

	return nil
}

// ApproveDTOMultiError is an error wrapping multiple validation errors
// returned by ApproveDTO.ValidateAll() if the designated constraints aren't met.
type ApproveDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveDTOMultiError) AllErrors() []error { return m }

// ApproveDTOValidationError is the validation error returned by
// ApproveDTO.Validate if the designated constraints aren't met.
type ApproveDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveDTOValidationError) ErrorName() string { return "ApproveDTOValidationError" }

// Error satisfies the builtin error interface
func (e ApproveDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveDTOValidationError{}

// Validate checks the field values on AuditListCleanCronRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditListCleanCronRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditListCleanCronRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditListCleanCronRequestMultiError, or nil if none found.
func (m *AuditListCleanCronRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditListCleanCronRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	if len(errors) > 0 {
		return AuditListCleanCronRequestMultiError(errors)
	}

	return nil
}

// AuditListCleanCronRequestMultiError is an error wrapping multiple validation
// errors returned by AuditListCleanCronRequest.ValidateAll() if the
// designated constraints aren't met.
type AuditListCleanCronRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditListCleanCronRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditListCleanCronRequestMultiError) AllErrors() []error { return m }

// AuditListCleanCronRequestValidationError is the validation error returned by
// AuditListCleanCronRequest.Validate if the designated constraints aren't met.
type AuditListCleanCronRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditListCleanCronRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditListCleanCronRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditListCleanCronRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditListCleanCronRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditListCleanCronRequestValidationError) ErrorName() string {
	return "AuditListCleanCronRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuditListCleanCronRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditListCleanCronRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditListCleanCronRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditListCleanCronRequestValidationError{}

// Validate checks the field values on AuditListCleanCronResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditListCleanCronResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditListCleanCronResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditListCleanCronResponseMultiError, or nil if none found.
func (m *AuditListCleanCronResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditListCleanCronResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuditListCleanCronResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuditListCleanCronResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuditListCleanCronResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AuditListCleanCronResponseMultiError(errors)
	}

	return nil
}

// AuditListCleanCronResponseMultiError is an error wrapping multiple
// validation errors returned by AuditListCleanCronResponse.ValidateAll() if
// the designated constraints aren't met.
type AuditListCleanCronResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditListCleanCronResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditListCleanCronResponseMultiError) AllErrors() []error { return m }

// AuditListCleanCronResponseValidationError is the validation error returned
// by AuditListCleanCronResponse.Validate if the designated constraints aren't met.
type AuditListCleanCronResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditListCleanCronResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditListCleanCronResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditListCleanCronResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditListCleanCronResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditListCleanCronResponseValidationError) ErrorName() string {
	return "AuditListCleanCronResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuditListCleanCronResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditListCleanCronResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditListCleanCronResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditListCleanCronResponseValidationError{}

// Validate checks the field values on AuditSetCleanCronRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditSetCleanCronRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditSetCleanCronRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditSetCleanCronRequestMultiError, or nil if none found.
func (m *AuditSetCleanCronRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditSetCleanCronRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for Interval

	if len(errors) > 0 {
		return AuditSetCleanCronRequestMultiError(errors)
	}

	return nil
}

// AuditSetCleanCronRequestMultiError is an error wrapping multiple validation
// errors returned by AuditSetCleanCronRequest.ValidateAll() if the designated
// constraints aren't met.
type AuditSetCleanCronRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditSetCleanCronRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditSetCleanCronRequestMultiError) AllErrors() []error { return m }

// AuditSetCleanCronRequestValidationError is the validation error returned by
// AuditSetCleanCronRequest.Validate if the designated constraints aren't met.
type AuditSetCleanCronRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditSetCleanCronRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditSetCleanCronRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditSetCleanCronRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditSetCleanCronRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditSetCleanCronRequestValidationError) ErrorName() string {
	return "AuditSetCleanCronRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuditSetCleanCronRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditSetCleanCronRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditSetCleanCronRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditSetCleanCronRequestValidationError{}

// Validate checks the field values on AuditSetCleanCronResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditSetCleanCronResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditSetCleanCronResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditSetCleanCronResponseMultiError, or nil if none found.
func (m *AuditSetCleanCronResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditSetCleanCronResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return AuditSetCleanCronResponseMultiError(errors)
	}

	return nil
}

// AuditSetCleanCronResponseMultiError is an error wrapping multiple validation
// errors returned by AuditSetCleanCronResponse.ValidateAll() if the
// designated constraints aren't met.
type AuditSetCleanCronResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditSetCleanCronResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditSetCleanCronResponseMultiError) AllErrors() []error { return m }

// AuditSetCleanCronResponseValidationError is the validation error returned by
// AuditSetCleanCronResponse.Validate if the designated constraints aren't met.
type AuditSetCleanCronResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditSetCleanCronResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditSetCleanCronResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditSetCleanCronResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditSetCleanCronResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditSetCleanCronResponseValidationError) ErrorName() string {
	return "AuditSetCleanCronResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuditSetCleanCronResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditSetCleanCronResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditSetCleanCronResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditSetCleanCronResponseValidationError{}

// Validate checks the field values on CMDB_APPLICATION_PIN_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_APPLICATION_PIN_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_APPLICATION_PIN_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_APPLICATION_PIN_RequestMultiError, or nil if none found.
func (m *CMDB_APPLICATION_PIN_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_APPLICATION_PIN_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	if len(errors) > 0 {
		return CMDB_APPLICATION_PIN_RequestMultiError(errors)
	}

	return nil
}

// CMDB_APPLICATION_PIN_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_APPLICATION_PIN_Request.ValidateAll() if
// the designated constraints aren't met.
type CMDB_APPLICATION_PIN_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_APPLICATION_PIN_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_APPLICATION_PIN_RequestMultiError) AllErrors() []error { return m }

// CMDB_APPLICATION_PIN_RequestValidationError is the validation error returned
// by CMDB_APPLICATION_PIN_Request.Validate if the designated constraints
// aren't met.
type CMDB_APPLICATION_PIN_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_APPLICATION_PIN_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_APPLICATION_PIN_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_APPLICATION_PIN_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_APPLICATION_PIN_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_APPLICATION_PIN_RequestValidationError) ErrorName() string {
	return "CMDB_APPLICATION_PIN_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_APPLICATION_PIN_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_APPLICATION_PIN_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_APPLICATION_PIN_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_APPLICATION_PIN_RequestValidationError{}

// Validate checks the field values on CMDB_APPLICATION_UNPIN_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_APPLICATION_UNPIN_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_APPLICATION_UNPIN_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMDB_APPLICATION_UNPIN_RequestMultiError, or nil if none found.
func (m *CMDB_APPLICATION_UNPIN_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_APPLICATION_UNPIN_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	if len(errors) > 0 {
		return CMDB_APPLICATION_UNPIN_RequestMultiError(errors)
	}

	return nil
}

// CMDB_APPLICATION_UNPIN_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_APPLICATION_UNPIN_Request.ValidateAll()
// if the designated constraints aren't met.
type CMDB_APPLICATION_UNPIN_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_APPLICATION_UNPIN_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_APPLICATION_UNPIN_RequestMultiError) AllErrors() []error { return m }

// CMDB_APPLICATION_UNPIN_RequestValidationError is the validation error
// returned by CMDB_APPLICATION_UNPIN_Request.Validate if the designated
// constraints aren't met.
type CMDB_APPLICATION_UNPIN_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_APPLICATION_UNPIN_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_APPLICATION_UNPIN_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_APPLICATION_UNPIN_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_APPLICATION_UNPIN_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_APPLICATION_UNPIN_RequestValidationError) ErrorName() string {
	return "CMDB_APPLICATION_UNPIN_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_APPLICATION_UNPIN_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_APPLICATION_UNPIN_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_APPLICATION_UNPIN_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_APPLICATION_UNPIN_RequestValidationError{}

// Validate checks the field values on CMDB_APP_LIST_TEMPLATES_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_APP_LIST_TEMPLATES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_APP_LIST_TEMPLATES_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMDB_APP_LIST_TEMPLATES_RequestMultiError, or nil if none found.
func (m *CMDB_APP_LIST_TEMPLATES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_APP_LIST_TEMPLATES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_APP_LIST_TEMPLATES_RequestMultiError(errors)
	}

	return nil
}

// CMDB_APP_LIST_TEMPLATES_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_APP_LIST_TEMPLATES_Request.ValidateAll()
// if the designated constraints aren't met.
type CMDB_APP_LIST_TEMPLATES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_APP_LIST_TEMPLATES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_APP_LIST_TEMPLATES_RequestMultiError) AllErrors() []error { return m }

// CMDB_APP_LIST_TEMPLATES_RequestValidationError is the validation error
// returned by CMDB_APP_LIST_TEMPLATES_Request.Validate if the designated
// constraints aren't met.
type CMDB_APP_LIST_TEMPLATES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_APP_LIST_TEMPLATES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_APP_LIST_TEMPLATES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_APP_LIST_TEMPLATES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_APP_LIST_TEMPLATES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_APP_LIST_TEMPLATES_RequestValidationError) ErrorName() string {
	return "CMDB_APP_LIST_TEMPLATES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_APP_LIST_TEMPLATES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_APP_LIST_TEMPLATES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_APP_LIST_TEMPLATES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_APP_LIST_TEMPLATES_RequestValidationError{}

// Validate checks the field values on CMDB_IMAGE_FETCH_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_IMAGE_FETCH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_IMAGE_FETCH_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_IMAGE_FETCH_RequestMultiError, or nil if none found.
func (m *CMDB_IMAGE_FETCH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_IMAGE_FETCH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageName

	if len(errors) > 0 {
		return CMDB_IMAGE_FETCH_RequestMultiError(errors)
	}

	return nil
}

// CMDB_IMAGE_FETCH_RequestMultiError is an error wrapping multiple validation
// errors returned by CMDB_IMAGE_FETCH_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_IMAGE_FETCH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_IMAGE_FETCH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_IMAGE_FETCH_RequestMultiError) AllErrors() []error { return m }

// CMDB_IMAGE_FETCH_RequestValidationError is the validation error returned by
// CMDB_IMAGE_FETCH_Request.Validate if the designated constraints aren't met.
type CMDB_IMAGE_FETCH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_IMAGE_FETCH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_IMAGE_FETCH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_IMAGE_FETCH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_IMAGE_FETCH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_IMAGE_FETCH_RequestValidationError) ErrorName() string {
	return "CMDB_IMAGE_FETCH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_IMAGE_FETCH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_IMAGE_FETCH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_IMAGE_FETCH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_IMAGE_FETCH_RequestValidationError{}

// Validate checks the field values on CMDB_IMAGE_UPLOAD_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_IMAGE_UPLOAD_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_IMAGE_UPLOAD_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_IMAGE_UPLOAD_RequestMultiError, or nil if none found.
func (m *CMDB_IMAGE_UPLOAD_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_IMAGE_UPLOAD_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_IMAGE_UPLOAD_RequestMultiError(errors)
	}

	return nil
}

// CMDB_IMAGE_UPLOAD_RequestMultiError is an error wrapping multiple validation
// errors returned by CMDB_IMAGE_UPLOAD_Request.ValidateAll() if the
// designated constraints aren't met.
type CMDB_IMAGE_UPLOAD_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_IMAGE_UPLOAD_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_IMAGE_UPLOAD_RequestMultiError) AllErrors() []error { return m }

// CMDB_IMAGE_UPLOAD_RequestValidationError is the validation error returned by
// CMDB_IMAGE_UPLOAD_Request.Validate if the designated constraints aren't met.
type CMDB_IMAGE_UPLOAD_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_IMAGE_UPLOAD_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_IMAGE_UPLOAD_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_IMAGE_UPLOAD_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_IMAGE_UPLOAD_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_IMAGE_UPLOAD_RequestValidationError) ErrorName() string {
	return "CMDB_IMAGE_UPLOAD_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_IMAGE_UPLOAD_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_IMAGE_UPLOAD_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_IMAGE_UPLOAD_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_IMAGE_UPLOAD_RequestValidationError{}

// Validate checks the field values on CMDB_LABEL_DELETE_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_LABEL_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_LABEL_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_LABEL_DELETE_RequestMultiError, or nil if none found.
func (m *CMDB_LABEL_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_LABEL_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CMDB_LABEL_DELETE_RequestMultiError(errors)
	}

	return nil
}

// CMDB_LABEL_DELETE_RequestMultiError is an error wrapping multiple validation
// errors returned by CMDB_LABEL_DELETE_Request.ValidateAll() if the
// designated constraints aren't met.
type CMDB_LABEL_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_LABEL_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_LABEL_DELETE_RequestMultiError) AllErrors() []error { return m }

// CMDB_LABEL_DELETE_RequestValidationError is the validation error returned by
// CMDB_LABEL_DELETE_Request.Validate if the designated constraints aren't met.
type CMDB_LABEL_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_LABEL_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_LABEL_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_LABEL_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_LABEL_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_LABEL_DELETE_RequestValidationError) ErrorName() string {
	return "CMDB_LABEL_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_LABEL_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_LABEL_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_LABEL_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_LABEL_DELETE_RequestValidationError{}

// Validate checks the field values on CMDB_LICENSE_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_LICENSE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_LICENSE_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_LICENSE_RequestMultiError, or nil if none found.
func (m *CMDB_LICENSE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_LICENSE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_LICENSE_RequestMultiError(errors)
	}

	return nil
}

// CMDB_LICENSE_RequestMultiError is an error wrapping multiple validation
// errors returned by CMDB_LICENSE_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_LICENSE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_LICENSE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_LICENSE_RequestMultiError) AllErrors() []error { return m }

// CMDB_LICENSE_RequestValidationError is the validation error returned by
// CMDB_LICENSE_Request.Validate if the designated constraints aren't met.
type CMDB_LICENSE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_LICENSE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_LICENSE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_LICENSE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_LICENSE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_LICENSE_RequestValidationError) ErrorName() string {
	return "CMDB_LICENSE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_LICENSE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_LICENSE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_LICENSE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_LICENSE_RequestValidationError{}

// Validate checks the field values on CMDB_MANUAL_REVIEW_ADD_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_MANUAL_REVIEW_ADD_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_MANUAL_REVIEW_ADD_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMDB_MANUAL_REVIEW_ADD_RequestMultiError, or nil if none found.
func (m *CMDB_MANUAL_REVIEW_ADD_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_MANUAL_REVIEW_ADD_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_MANUAL_REVIEW_ADD_RequestMultiError(errors)
	}

	return nil
}

// CMDB_MANUAL_REVIEW_ADD_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_MANUAL_REVIEW_ADD_Request.ValidateAll()
// if the designated constraints aren't met.
type CMDB_MANUAL_REVIEW_ADD_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_MANUAL_REVIEW_ADD_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_MANUAL_REVIEW_ADD_RequestMultiError) AllErrors() []error { return m }

// CMDB_MANUAL_REVIEW_ADD_RequestValidationError is the validation error
// returned by CMDB_MANUAL_REVIEW_ADD_Request.Validate if the designated
// constraints aren't met.
type CMDB_MANUAL_REVIEW_ADD_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_MANUAL_REVIEW_ADD_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_MANUAL_REVIEW_ADD_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_MANUAL_REVIEW_ADD_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_MANUAL_REVIEW_ADD_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_MANUAL_REVIEW_ADD_RequestValidationError) ErrorName() string {
	return "CMDB_MANUAL_REVIEW_ADD_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_MANUAL_REVIEW_ADD_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_MANUAL_REVIEW_ADD_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_MANUAL_REVIEW_ADD_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_MANUAL_REVIEW_ADD_RequestValidationError{}

// Validate checks the field values on CMDB_MBOX_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_MBOX_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_MBOX_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_MBOX_GET_RequestMultiError, or nil if none found.
func (m *CMDB_MBOX_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_MBOX_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MboxID

	if len(errors) > 0 {
		return CMDB_MBOX_GET_RequestMultiError(errors)
	}

	return nil
}

// CMDB_MBOX_GET_RequestMultiError is an error wrapping multiple validation
// errors returned by CMDB_MBOX_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_MBOX_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_MBOX_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_MBOX_GET_RequestMultiError) AllErrors() []error { return m }

// CMDB_MBOX_GET_RequestValidationError is the validation error returned by
// CMDB_MBOX_GET_Request.Validate if the designated constraints aren't met.
type CMDB_MBOX_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_MBOX_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_MBOX_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_MBOX_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_MBOX_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_MBOX_GET_RequestValidationError) ErrorName() string {
	return "CMDB_MBOX_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_MBOX_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_MBOX_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_MBOX_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_MBOX_GET_RequestValidationError{}

// Validate checks the field values on CMDB_MBOX_READ_ALL_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_MBOX_READ_ALL_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_MBOX_READ_ALL_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_MBOX_READ_ALL_RequestMultiError, or nil if none found.
func (m *CMDB_MBOX_READ_ALL_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_MBOX_READ_ALL_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_MBOX_READ_ALL_RequestMultiError(errors)
	}

	return nil
}

// CMDB_MBOX_READ_ALL_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_MBOX_READ_ALL_Request.ValidateAll() if
// the designated constraints aren't met.
type CMDB_MBOX_READ_ALL_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_MBOX_READ_ALL_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_MBOX_READ_ALL_RequestMultiError) AllErrors() []error { return m }

// CMDB_MBOX_READ_ALL_RequestValidationError is the validation error returned
// by CMDB_MBOX_READ_ALL_Request.Validate if the designated constraints aren't met.
type CMDB_MBOX_READ_ALL_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_MBOX_READ_ALL_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_MBOX_READ_ALL_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_MBOX_READ_ALL_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_MBOX_READ_ALL_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_MBOX_READ_ALL_RequestValidationError) ErrorName() string {
	return "CMDB_MBOX_READ_ALL_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_MBOX_READ_ALL_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_MBOX_READ_ALL_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_MBOX_READ_ALL_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_MBOX_READ_ALL_RequestValidationError{}

// Validate checks the field values on CMDB_MBOX_STATS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_MBOX_STATS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_MBOX_STATS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_MBOX_STATS_RequestMultiError, or nil if none found.
func (m *CMDB_MBOX_STATS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_MBOX_STATS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_MBOX_STATS_RequestMultiError(errors)
	}

	return nil
}

// CMDB_MBOX_STATS_RequestMultiError is an error wrapping multiple validation
// errors returned by CMDB_MBOX_STATS_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_MBOX_STATS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_MBOX_STATS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_MBOX_STATS_RequestMultiError) AllErrors() []error { return m }

// CMDB_MBOX_STATS_RequestValidationError is the validation error returned by
// CMDB_MBOX_STATS_Request.Validate if the designated constraints aren't met.
type CMDB_MBOX_STATS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_MBOX_STATS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_MBOX_STATS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_MBOX_STATS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_MBOX_STATS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_MBOX_STATS_RequestValidationError) ErrorName() string {
	return "CMDB_MBOX_STATS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_MBOX_STATS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_MBOX_STATS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_MBOX_STATS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_MBOX_STATS_RequestValidationError{}

// Validate checks the field values on CMDB_MEMBER_LABEL_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_MEMBER_LABEL_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_MEMBER_LABEL_LIST_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMDB_MEMBER_LABEL_LIST_RequestMultiError, or nil if none found.
func (m *CMDB_MEMBER_LABEL_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_MEMBER_LABEL_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_MEMBER_LABEL_LIST_RequestMultiError(errors)
	}

	return nil
}

// CMDB_MEMBER_LABEL_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_MEMBER_LABEL_LIST_Request.ValidateAll()
// if the designated constraints aren't met.
type CMDB_MEMBER_LABEL_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_MEMBER_LABEL_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_MEMBER_LABEL_LIST_RequestMultiError) AllErrors() []error { return m }

// CMDB_MEMBER_LABEL_LIST_RequestValidationError is the validation error
// returned by CMDB_MEMBER_LABEL_LIST_Request.Validate if the designated
// constraints aren't met.
type CMDB_MEMBER_LABEL_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_MEMBER_LABEL_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_MEMBER_LABEL_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_MEMBER_LABEL_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_MEMBER_LABEL_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_MEMBER_LABEL_LIST_RequestValidationError) ErrorName() string {
	return "CMDB_MEMBER_LABEL_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_MEMBER_LABEL_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_MEMBER_LABEL_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_MEMBER_LABEL_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_MEMBER_LABEL_LIST_RequestValidationError{}

// Validate checks the field values on CMDB_NOTIFY_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_NOTIFY_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_NOTIFY_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_NOTIFY_DELETE_RequestMultiError, or nil if none found.
func (m *CMDB_NOTIFY_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_NOTIFY_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotifyID

	if len(errors) > 0 {
		return CMDB_NOTIFY_DELETE_RequestMultiError(errors)
	}

	return nil
}

// CMDB_NOTIFY_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_NOTIFY_DELETE_Request.ValidateAll() if
// the designated constraints aren't met.
type CMDB_NOTIFY_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_NOTIFY_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_NOTIFY_DELETE_RequestMultiError) AllErrors() []error { return m }

// CMDB_NOTIFY_DELETE_RequestValidationError is the validation error returned
// by CMDB_NOTIFY_DELETE_Request.Validate if the designated constraints aren't met.
type CMDB_NOTIFY_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_NOTIFY_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_NOTIFY_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_NOTIFY_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_NOTIFY_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_NOTIFY_DELETE_RequestValidationError) ErrorName() string {
	return "CMDB_NOTIFY_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_NOTIFY_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_NOTIFY_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_NOTIFY_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_NOTIFY_DELETE_RequestValidationError{}

// Validate checks the field values on CMDB_NOTIFY_DISABLE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_NOTIFY_DISABLE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_NOTIFY_DISABLE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_NOTIFY_DISABLE_RequestMultiError, or nil if none found.
func (m *CMDB_NOTIFY_DISABLE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_NOTIFY_DISABLE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotifyID

	if len(errors) > 0 {
		return CMDB_NOTIFY_DISABLE_RequestMultiError(errors)
	}

	return nil
}

// CMDB_NOTIFY_DISABLE_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_NOTIFY_DISABLE_Request.ValidateAll() if
// the designated constraints aren't met.
type CMDB_NOTIFY_DISABLE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_NOTIFY_DISABLE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_NOTIFY_DISABLE_RequestMultiError) AllErrors() []error { return m }

// CMDB_NOTIFY_DISABLE_RequestValidationError is the validation error returned
// by CMDB_NOTIFY_DISABLE_Request.Validate if the designated constraints
// aren't met.
type CMDB_NOTIFY_DISABLE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_NOTIFY_DISABLE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_NOTIFY_DISABLE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_NOTIFY_DISABLE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_NOTIFY_DISABLE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_NOTIFY_DISABLE_RequestValidationError) ErrorName() string {
	return "CMDB_NOTIFY_DISABLE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_NOTIFY_DISABLE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_NOTIFY_DISABLE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_NOTIFY_DISABLE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_NOTIFY_DISABLE_RequestValidationError{}

// Validate checks the field values on CMDB_NOTIFY_ENABLE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_NOTIFY_ENABLE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_NOTIFY_ENABLE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_NOTIFY_ENABLE_RequestMultiError, or nil if none found.
func (m *CMDB_NOTIFY_ENABLE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_NOTIFY_ENABLE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotifyID

	if len(errors) > 0 {
		return CMDB_NOTIFY_ENABLE_RequestMultiError(errors)
	}

	return nil
}

// CMDB_NOTIFY_ENABLE_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_NOTIFY_ENABLE_Request.ValidateAll() if
// the designated constraints aren't met.
type CMDB_NOTIFY_ENABLE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_NOTIFY_ENABLE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_NOTIFY_ENABLE_RequestMultiError) AllErrors() []error { return m }

// CMDB_NOTIFY_ENABLE_RequestValidationError is the validation error returned
// by CMDB_NOTIFY_ENABLE_Request.Validate if the designated constraints aren't met.
type CMDB_NOTIFY_ENABLE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_NOTIFY_ENABLE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_NOTIFY_ENABLE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_NOTIFY_ENABLE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_NOTIFY_ENABLE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_NOTIFY_ENABLE_RequestValidationError) ErrorName() string {
	return "CMDB_NOTIFY_ENABLE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_NOTIFY_ENABLE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_NOTIFY_ENABLE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_NOTIFY_ENABLE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_NOTIFY_ENABLE_RequestValidationError{}

// Validate checks the field values on CMDB_NOTIFY_FUZZY_QUERY_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_NOTIFY_FUZZY_QUERY_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_NOTIFY_FUZZY_QUERY_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMDB_NOTIFY_FUZZY_QUERY_RequestMultiError, or nil if none found.
func (m *CMDB_NOTIFY_FUZZY_QUERY_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_NOTIFY_FUZZY_QUERY_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_NOTIFY_FUZZY_QUERY_RequestMultiError(errors)
	}

	return nil
}

// CMDB_NOTIFY_FUZZY_QUERY_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_NOTIFY_FUZZY_QUERY_Request.ValidateAll()
// if the designated constraints aren't met.
type CMDB_NOTIFY_FUZZY_QUERY_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_NOTIFY_FUZZY_QUERY_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_NOTIFY_FUZZY_QUERY_RequestMultiError) AllErrors() []error { return m }

// CMDB_NOTIFY_FUZZY_QUERY_RequestValidationError is the validation error
// returned by CMDB_NOTIFY_FUZZY_QUERY_Request.Validate if the designated
// constraints aren't met.
type CMDB_NOTIFY_FUZZY_QUERY_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_NOTIFY_FUZZY_QUERY_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_NOTIFY_FUZZY_QUERY_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_NOTIFY_FUZZY_QUERY_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_NOTIFY_FUZZY_QUERY_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_NOTIFY_FUZZY_QUERY_RequestValidationError) ErrorName() string {
	return "CMDB_NOTIFY_FUZZY_QUERY_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_NOTIFY_FUZZY_QUERY_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_NOTIFY_FUZZY_QUERY_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_NOTIFY_FUZZY_QUERY_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_NOTIFY_FUZZY_QUERY_RequestValidationError{}

// Validate checks the field values on CMDB_NOTIFY_GET_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_NOTIFY_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_NOTIFY_GET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_NOTIFY_GET_RequestMultiError, or nil if none found.
func (m *CMDB_NOTIFY_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_NOTIFY_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotifyID

	if len(errors) > 0 {
		return CMDB_NOTIFY_GET_RequestMultiError(errors)
	}

	return nil
}

// CMDB_NOTIFY_GET_RequestMultiError is an error wrapping multiple validation
// errors returned by CMDB_NOTIFY_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_NOTIFY_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_NOTIFY_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_NOTIFY_GET_RequestMultiError) AllErrors() []error { return m }

// CMDB_NOTIFY_GET_RequestValidationError is the validation error returned by
// CMDB_NOTIFY_GET_Request.Validate if the designated constraints aren't met.
type CMDB_NOTIFY_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_NOTIFY_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_NOTIFY_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_NOTIFY_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_NOTIFY_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_NOTIFY_GET_RequestValidationError) ErrorName() string {
	return "CMDB_NOTIFY_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_NOTIFY_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_NOTIFY_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_NOTIFY_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_NOTIFY_GET_RequestValidationError{}

// Validate checks the field values on CMDB_PERMISSION_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_PERMISSION_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_PERMISSION_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CMDB_PERMISSION_LIST_RequestMultiError, or nil if none found.
func (m *CMDB_PERMISSION_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_PERMISSION_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_PERMISSION_LIST_RequestMultiError(errors)
	}

	return nil
}

// CMDB_PERMISSION_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_PERMISSION_LIST_Request.ValidateAll() if
// the designated constraints aren't met.
type CMDB_PERMISSION_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_PERMISSION_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_PERMISSION_LIST_RequestMultiError) AllErrors() []error { return m }

// CMDB_PERMISSION_LIST_RequestValidationError is the validation error returned
// by CMDB_PERMISSION_LIST_Request.Validate if the designated constraints
// aren't met.
type CMDB_PERMISSION_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_PERMISSION_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_PERMISSION_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_PERMISSION_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_PERMISSION_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_PERMISSION_LIST_RequestValidationError) ErrorName() string {
	return "CMDB_PERMISSION_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_PERMISSION_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_PERMISSION_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_PERMISSION_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_PERMISSION_LIST_RequestValidationError{}

// Validate checks the field values on CMDB_PROJECT_FUNCTIONS_GET_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CMDB_PROJECT_FUNCTIONS_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_PROJECT_FUNCTIONS_GET_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CMDB_PROJECT_FUNCTIONS_GET_RequestMultiError, or nil if none found.
func (m *CMDB_PROJECT_FUNCTIONS_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_PROJECT_FUNCTIONS_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_PROJECT_FUNCTIONS_GET_RequestMultiError(errors)
	}

	return nil
}

// CMDB_PROJECT_FUNCTIONS_GET_RequestMultiError is an error wrapping multiple
// validation errors returned by
// CMDB_PROJECT_FUNCTIONS_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_PROJECT_FUNCTIONS_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_PROJECT_FUNCTIONS_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_PROJECT_FUNCTIONS_GET_RequestMultiError) AllErrors() []error { return m }

// CMDB_PROJECT_FUNCTIONS_GET_RequestValidationError is the validation error
// returned by CMDB_PROJECT_FUNCTIONS_GET_Request.Validate if the designated
// constraints aren't met.
type CMDB_PROJECT_FUNCTIONS_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_PROJECT_FUNCTIONS_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_PROJECT_FUNCTIONS_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_PROJECT_FUNCTIONS_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_PROJECT_FUNCTIONS_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_PROJECT_FUNCTIONS_GET_RequestValidationError) ErrorName() string {
	return "CMDB_PROJECT_FUNCTIONS_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_PROJECT_FUNCTIONS_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_PROJECT_FUNCTIONS_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_PROJECT_FUNCTIONS_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_PROJECT_FUNCTIONS_GET_RequestValidationError{}

// Validate checks the field values on CMDB_PROJECT_GET_NSINFO_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CMDB_PROJECT_GET_NSINFO_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CMDB_PROJECT_GET_NSINFO_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CMDB_PROJECT_GET_NSINFO_RequestMultiError, or nil if none found.
func (m *CMDB_PROJECT_GET_NSINFO_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_PROJECT_GET_NSINFO_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return CMDB_PROJECT_GET_NSINFO_RequestMultiError(errors)
	}

	return nil
}

// CMDB_PROJECT_GET_NSINFO_RequestMultiError is an error wrapping multiple
// validation errors returned by CMDB_PROJECT_GET_NSINFO_Request.ValidateAll()
// if the designated constraints aren't met.
type CMDB_PROJECT_GET_NSINFO_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_PROJECT_GET_NSINFO_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_PROJECT_GET_NSINFO_RequestMultiError) AllErrors() []error { return m }

// CMDB_PROJECT_GET_NSINFO_RequestValidationError is the validation error
// returned by CMDB_PROJECT_GET_NSINFO_Request.Validate if the designated
// constraints aren't met.
type CMDB_PROJECT_GET_NSINFO_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_PROJECT_GET_NSINFO_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_PROJECT_GET_NSINFO_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_PROJECT_GET_NSINFO_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_PROJECT_GET_NSINFO_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_PROJECT_GET_NSINFO_RequestValidationError) ErrorName() string {
	return "CMDB_PROJECT_GET_NSINFO_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_PROJECT_GET_NSINFO_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_PROJECT_GET_NSINFO_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_PROJECT_GET_NSINFO_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_PROJECT_GET_NSINFO_RequestValidationError{}

// Validate checks the field values on CMDB_PROJECT_METRICS_HISTOGRAM_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CMDB_PROJECT_METRICS_HISTOGRAM_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CMDB_PROJECT_METRICS_HISTOGRAM_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CMDB_PROJECT_METRICS_HISTOGRAM_RequestMultiError, or nil if none found.
func (m *CMDB_PROJECT_METRICS_HISTOGRAM_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_PROJECT_METRICS_HISTOGRAM_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	if len(errors) > 0 {
		return CMDB_PROJECT_METRICS_HISTOGRAM_RequestMultiError(errors)
	}

	return nil
}

// CMDB_PROJECT_METRICS_HISTOGRAM_RequestMultiError is an error wrapping
// multiple validation errors returned by
// CMDB_PROJECT_METRICS_HISTOGRAM_Request.ValidateAll() if the designated
// constraints aren't met.
type CMDB_PROJECT_METRICS_HISTOGRAM_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_PROJECT_METRICS_HISTOGRAM_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_PROJECT_METRICS_HISTOGRAM_RequestMultiError) AllErrors() []error { return m }

// CMDB_PROJECT_METRICS_HISTOGRAM_RequestValidationError is the validation
// error returned by CMDB_PROJECT_METRICS_HISTOGRAM_Request.Validate if the
// designated constraints aren't met.
type CMDB_PROJECT_METRICS_HISTOGRAM_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_PROJECT_METRICS_HISTOGRAM_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_PROJECT_METRICS_HISTOGRAM_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_PROJECT_METRICS_HISTOGRAM_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_PROJECT_METRICS_HISTOGRAM_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_PROJECT_METRICS_HISTOGRAM_RequestValidationError) ErrorName() string {
	return "CMDB_PROJECT_METRICS_HISTOGRAM_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_PROJECT_METRICS_HISTOGRAM_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_PROJECT_METRICS_HISTOGRAM_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_PROJECT_METRICS_HISTOGRAM_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_PROJECT_METRICS_HISTOGRAM_RequestValidationError{}

// Validate checks the field values on
// CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestMultiError, or nil if none found.
func (m *CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestMultiError(errors)
	}

	return nil
}

// CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestMultiError is an error
// wrapping multiple validation errors returned by
// CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request.ValidateAll() if the
// designated constraints aren't met.
type CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestMultiError) AllErrors() []error { return m }

// CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestValidationError is the
// validation error returned by
// CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request.Validate if the designated
// constraints aren't met.
type CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestValidationError) ErrorName() string {
	return "CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_RequestValidationError{}

// Validate checks the field values on
// CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestMultiError, or nil if none found.
func (m *CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for Workspace

	if len(errors) > 0 {
		return CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestMultiError(errors)
	}

	return nil
}

// CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestMultiError is an error wrapping
// multiple validation errors returned by
// CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request.ValidateAll() if the
// designated constraints aren't met.
type CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestMultiError) AllErrors() []error { return m }

// CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestValidationError is the
// validation error returned by
// CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request.Validate if the designated
// constraints aren't met.
type CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestValidationError) ErrorName() string {
	return "CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CMDB_PROJECT_WORKSPACE_ABILITIES_GET_RequestValidationError{}

// Validate checks the field values on CreateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyRequestMultiError, or nil if none found.
func (m *CreateNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	// no validation rules for Enabled

	// no validation rules for Channels

	// no validation rules for NotifyGroupID

	// no validation rules for WithGroup

	for idx, item := range m.GetGroupTargets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNotifyRequestValidationError{
						field:  fmt.Sprintf("GroupTargets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNotifyRequestValidationError{
						field:  fmt.Sprintf("GroupTargets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNotifyRequestValidationError{
					field:  fmt.Sprintf("GroupTargets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Label

	// no validation rules for ClusterName

	for idx, item := range m.GetNotifySources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNotifyRequestValidationError{
						field:  fmt.Sprintf("NotifySources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNotifyRequestValidationError{
						field:  fmt.Sprintf("NotifySources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNotifyRequestValidationError{
					field:  fmt.Sprintf("NotifySources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for WorkSpace

	// no validation rules for Creator

	// no validation rules for OrgID

	if len(errors) > 0 {
		return CreateNotifyRequestMultiError(errors)
	}

	return nil
}

// CreateNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyRequestMultiError) AllErrors() []error { return m }

// CreateNotifyRequestValidationError is the validation error returned by
// CreateNotifyRequest.Validate if the designated constraints aren't met.
type CreateNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyRequestValidationError) ErrorName() string {
	return "CreateNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyRequestValidationError{}

// Validate checks the field values on CreateNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyResponseMultiError, or nil if none found.
func (m *CreateNotifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNotifyResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNotifyResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNotifyResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateNotifyResponseMultiError(errors)
	}

	return nil
}

// CreateNotifyResponseMultiError is an error wrapping multiple validation
// errors returned by CreateNotifyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateNotifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyResponseMultiError) AllErrors() []error { return m }

// CreateNotifyResponseValidationError is the validation error returned by
// CreateNotifyResponse.Validate if the designated constraints aren't met.
type CreateNotifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyResponseValidationError) ErrorName() string {
	return "CreateNotifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyResponseValidationError{}

// Validate checks the field values on CreateReviewUser with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateReviewUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReviewUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReviewUserMultiError, or nil if none found.
func (m *CreateReviewUser) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReviewUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for Operator

	// no validation rules for TaskId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReviewUserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReviewUserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReviewUserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReviewUserMultiError(errors)
	}

	return nil
}

// CreateReviewUserMultiError is an error wrapping multiple validation errors
// returned by CreateReviewUser.ValidateAll() if the designated constraints
// aren't met.
type CreateReviewUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReviewUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReviewUserMultiError) AllErrors() []error { return m }

// CreateReviewUserValidationError is the validation error returned by
// CreateReviewUser.Validate if the designated constraints aren't met.
type CreateReviewUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReviewUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReviewUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReviewUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReviewUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReviewUserValidationError) ErrorName() string { return "CreateReviewUserValidationError" }

// Error satisfies the builtin error interface
func (e CreateReviewUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReviewUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReviewUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReviewUserValidationError{}

// Validate checks the field values on DeleteNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotifyResponseMultiError, or nil if none found.
func (m *DeleteNotifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteNotifyResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteNotifyResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteNotifyResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteNotifyResponseMultiError(errors)
	}

	return nil
}

// DeleteNotifyResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteNotifyResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteNotifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotifyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotifyResponseMultiError) AllErrors() []error { return m }

// DeleteNotifyResponseValidationError is the validation error returned by
// DeleteNotifyResponse.Validate if the designated constraints aren't met.
type DeleteNotifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotifyResponseValidationError) ErrorName() string {
	return "DeleteNotifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotifyResponseValidationError{}

// Validate checks the field values on DereferenceClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DereferenceClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DereferenceClusterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DereferenceClusterRequestMultiError, or nil if none found.
func (m *DereferenceClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DereferenceClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cluster

	// no validation rules for OrgID

	if len(errors) > 0 {
		return DereferenceClusterRequestMultiError(errors)
	}

	return nil
}

// DereferenceClusterRequestMultiError is an error wrapping multiple validation
// errors returned by DereferenceClusterRequest.ValidateAll() if the
// designated constraints aren't met.
type DereferenceClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DereferenceClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DereferenceClusterRequestMultiError) AllErrors() []error { return m }

// DereferenceClusterRequestValidationError is the validation error returned by
// DereferenceClusterRequest.Validate if the designated constraints aren't met.
type DereferenceClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DereferenceClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DereferenceClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DereferenceClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DereferenceClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DereferenceClusterRequestValidationError) ErrorName() string {
	return "DereferenceClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DereferenceClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDereferenceClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DereferenceClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DereferenceClusterRequestValidationError{}

// Validate checks the field values on DereferenceClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DereferenceClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DereferenceClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DereferenceClusterResponseMultiError, or nil if none found.
func (m *DereferenceClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DereferenceClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DereferenceClusterResponseMultiError(errors)
	}

	return nil
}

// DereferenceClusterResponseMultiError is an error wrapping multiple
// validation errors returned by DereferenceClusterResponse.ValidateAll() if
// the designated constraints aren't met.
type DereferenceClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DereferenceClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DereferenceClusterResponseMultiError) AllErrors() []error { return m }

// DereferenceClusterResponseValidationError is the validation error returned
// by DereferenceClusterResponse.Validate if the designated constraints aren't met.
type DereferenceClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DereferenceClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DereferenceClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DereferenceClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DereferenceClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DereferenceClusterResponseValidationError) ErrorName() string {
	return "DereferenceClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DereferenceClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDereferenceClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DereferenceClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DereferenceClusterResponseValidationError{}

// Validate checks the field values on EVENTBOX_WEBSOCKET_INFO_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EVENTBOX_WEBSOCKET_INFO_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EVENTBOX_WEBSOCKET_INFO_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// EVENTBOX_WEBSOCKET_INFO_RequestMultiError, or nil if none found.
func (m *EVENTBOX_WEBSOCKET_INFO_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *EVENTBOX_WEBSOCKET_INFO_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EVENTBOX_WEBSOCKET_INFO_RequestMultiError(errors)
	}

	return nil
}

// EVENTBOX_WEBSOCKET_INFO_RequestMultiError is an error wrapping multiple
// validation errors returned by EVENTBOX_WEBSOCKET_INFO_Request.ValidateAll()
// if the designated constraints aren't met.
type EVENTBOX_WEBSOCKET_INFO_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EVENTBOX_WEBSOCKET_INFO_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EVENTBOX_WEBSOCKET_INFO_RequestMultiError) AllErrors() []error { return m }

// EVENTBOX_WEBSOCKET_INFO_RequestValidationError is the validation error
// returned by EVENTBOX_WEBSOCKET_INFO_Request.Validate if the designated
// constraints aren't met.
type EVENTBOX_WEBSOCKET_INFO_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EVENTBOX_WEBSOCKET_INFO_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EVENTBOX_WEBSOCKET_INFO_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EVENTBOX_WEBSOCKET_INFO_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EVENTBOX_WEBSOCKET_INFO_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EVENTBOX_WEBSOCKET_INFO_RequestValidationError) ErrorName() string {
	return "EVENTBOX_WEBSOCKET_INFO_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e EVENTBOX_WEBSOCKET_INFO_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEVENTBOX_WEBSOCKET_INFO_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EVENTBOX_WEBSOCKET_INFO_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EVENTBOX_WEBSOCKET_INFO_RequestValidationError{}

// Validate checks the field values on EVENTBOX_WEBSOCKET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EVENTBOX_WEBSOCKET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EVENTBOX_WEBSOCKET_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EVENTBOX_WEBSOCKET_RequestMultiError, or nil if none found.
func (m *EVENTBOX_WEBSOCKET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *EVENTBOX_WEBSOCKET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for A

	// no validation rules for B

	if len(errors) > 0 {
		return EVENTBOX_WEBSOCKET_RequestMultiError(errors)
	}

	return nil
}

// EVENTBOX_WEBSOCKET_RequestMultiError is an error wrapping multiple
// validation errors returned by EVENTBOX_WEBSOCKET_Request.ValidateAll() if
// the designated constraints aren't met.
type EVENTBOX_WEBSOCKET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EVENTBOX_WEBSOCKET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EVENTBOX_WEBSOCKET_RequestMultiError) AllErrors() []error { return m }

// EVENTBOX_WEBSOCKET_RequestValidationError is the validation error returned
// by EVENTBOX_WEBSOCKET_Request.Validate if the designated constraints aren't met.
type EVENTBOX_WEBSOCKET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EVENTBOX_WEBSOCKET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EVENTBOX_WEBSOCKET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EVENTBOX_WEBSOCKET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EVENTBOX_WEBSOCKET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EVENTBOX_WEBSOCKET_RequestValidationError) ErrorName() string {
	return "EVENTBOX_WEBSOCKET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e EVENTBOX_WEBSOCKET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEVENTBOX_WEBSOCKET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EVENTBOX_WEBSOCKET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EVENTBOX_WEBSOCKET_RequestValidationError{}

// Validate checks the field values on ErrorLog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorLog with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorLogMultiError, or nil
// if none found.
func (m *ErrorLog) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Level

	// no validation rules for ResourceType

	// no validation rules for ResourceID

	// no validation rules for OccurrenceTime

	// no validation rules for HumanLog

	// no validation rules for PrimevalLog

	// no validation rules for DedupID

	if len(errors) > 0 {
		return ErrorLogMultiError(errors)
	}

	return nil
}

// ErrorLogMultiError is an error wrapping multiple validation errors returned
// by ErrorLog.ValidateAll() if the designated constraints aren't met.
type ErrorLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorLogMultiError) AllErrors() []error { return m }

// ErrorLogValidationError is the validation error returned by
// ErrorLog.Validate if the designated constraints aren't met.
type ErrorLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorLogValidationError) ErrorName() string { return "ErrorLogValidationError" }

// Error satisfies the builtin error interface
func (e ErrorLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorLogValidationError{}

// Validate checks the field values on ErrorLogCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ErrorLogCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorLogCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ErrorLogCreateRequestMultiError, or nil if none found.
func (m *ErrorLogCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorLogCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetErrorLog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorLogCreateRequestValidationError{
					field:  "ErrorLog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorLogCreateRequestValidationError{
					field:  "ErrorLog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrorLog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorLogCreateRequestValidationError{
				field:  "ErrorLog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ErrorLogCreateRequestMultiError(errors)
	}

	return nil
}

// ErrorLogCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ErrorLogCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type ErrorLogCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorLogCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorLogCreateRequestMultiError) AllErrors() []error { return m }

// ErrorLogCreateRequestValidationError is the validation error returned by
// ErrorLogCreateRequest.Validate if the designated constraints aren't met.
type ErrorLogCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorLogCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorLogCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorLogCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorLogCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorLogCreateRequestValidationError) ErrorName() string {
	return "ErrorLogCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorLogCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorLogCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorLogCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorLogCreateRequestValidationError{}

// Validate checks the field values on ErrorLogCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ErrorLogCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorLogCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ErrorLogCreateResponseMultiError, or nil if none found.
func (m *ErrorLogCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorLogCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ErrorLogCreateResponseMultiError(errors)
	}

	return nil
}

// ErrorLogCreateResponseMultiError is an error wrapping multiple validation
// errors returned by ErrorLogCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type ErrorLogCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorLogCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorLogCreateResponseMultiError) AllErrors() []error { return m }

// ErrorLogCreateResponseValidationError is the validation error returned by
// ErrorLogCreateResponse.Validate if the designated constraints aren't met.
type ErrorLogCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorLogCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorLogCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorLogCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorLogCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorLogCreateResponseValidationError) ErrorName() string {
	return "ErrorLogCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorLogCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorLogCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorLogCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorLogCreateResponseValidationError{}

// Validate checks the field values on GetAuthorityByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorityByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorityByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthorityByUserIdRequestMultiError, or nil if none found.
func (m *GetAuthorityByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorityByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	// no validation rules for OrgId

	// no validation rules for TaskId

	if len(errors) > 0 {
		return GetAuthorityByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetAuthorityByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetAuthorityByUserIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAuthorityByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorityByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorityByUserIdRequestMultiError) AllErrors() []error { return m }

// GetAuthorityByUserIdRequestValidationError is the validation error returned
// by GetAuthorityByUserIdRequest.Validate if the designated constraints
// aren't met.
type GetAuthorityByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorityByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorityByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorityByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorityByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorityByUserIdRequestValidationError) ErrorName() string {
	return "GetAuthorityByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthorityByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorityByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorityByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorityByUserIdRequestValidationError{}

// Validate checks the field values on GetAuthorityByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorityByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorityByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthorityByUserIdResponseMultiError, or nil if none found.
func (m *GetAuthorityByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorityByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authority

	if len(errors) > 0 {
		return GetAuthorityByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetAuthorityByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetAuthorityByUserIdResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAuthorityByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorityByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorityByUserIdResponseMultiError) AllErrors() []error { return m }

// GetAuthorityByUserIdResponseValidationError is the validation error returned
// by GetAuthorityByUserIdResponse.Validate if the designated constraints
// aren't met.
type GetAuthorityByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorityByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorityByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorityByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorityByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorityByUserIdResponseValidationError) ErrorName() string {
	return "GetAuthorityByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthorityByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorityByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorityByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorityByUserIdResponseValidationError{}

// Validate checks the field values on GetReviewByTaskIdIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReviewByTaskIdIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewByTaskIdIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewByTaskIdIdRequestMultiError, or nil if none found.
func (m *GetReviewByTaskIdIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewByTaskIdIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for Id

	if len(errors) > 0 {
		return GetReviewByTaskIdIdRequestMultiError(errors)
	}

	return nil
}

// GetReviewByTaskIdIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetReviewByTaskIdIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetReviewByTaskIdIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewByTaskIdIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewByTaskIdIdRequestMultiError) AllErrors() []error { return m }

// GetReviewByTaskIdIdRequestValidationError is the validation error returned
// by GetReviewByTaskIdIdRequest.Validate if the designated constraints aren't met.
type GetReviewByTaskIdIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewByTaskIdIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewByTaskIdIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewByTaskIdIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewByTaskIdIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewByTaskIdIdRequestValidationError) ErrorName() string {
	return "GetReviewByTaskIdIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewByTaskIdIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewByTaskIdIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewByTaskIdIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewByTaskIdIdRequestValidationError{}

// Validate checks the field values on GetReviewByTaskIdIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReviewByTaskIdIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewByTaskIdIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewByTaskIdIdResponseMultiError, or nil if none found.
func (m *GetReviewByTaskIdIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewByTaskIdIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for ApprovalStatus

	// no validation rules for Id

	if len(errors) > 0 {
		return GetReviewByTaskIdIdResponseMultiError(errors)
	}

	return nil
}

// GetReviewByTaskIdIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetReviewByTaskIdIdResponse.ValidateAll() if
// the designated constraints aren't met.
type GetReviewByTaskIdIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewByTaskIdIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewByTaskIdIdResponseMultiError) AllErrors() []error { return m }

// GetReviewByTaskIdIdResponseValidationError is the validation error returned
// by GetReviewByTaskIdIdResponse.Validate if the designated constraints
// aren't met.
type GetReviewByTaskIdIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewByTaskIdIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewByTaskIdIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewByTaskIdIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewByTaskIdIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewByTaskIdIdResponseValidationError) ErrorName() string {
	return "GetReviewByTaskIdIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewByTaskIdIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewByTaskIdIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewByTaskIdIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewByTaskIdIdResponseValidationError{}

// Validate checks the field values on GetReviewsBySponsorIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReviewsBySponsorIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewsBySponsorIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewsBySponsorIdRequestMultiError, or nil if none found.
func (m *GetReviewsBySponsorIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewsBySponsorIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SponsorId

	// no validation rules for Id

	// no validation rules for ProjectId

	// no validation rules for ApprovalStatus

	// no validation rules for OrgId

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetReviewsBySponsorIdRequestMultiError(errors)
	}

	return nil
}

// GetReviewsBySponsorIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetReviewsBySponsorIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetReviewsBySponsorIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewsBySponsorIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewsBySponsorIdRequestMultiError) AllErrors() []error { return m }

// GetReviewsBySponsorIdRequestValidationError is the validation error returned
// by GetReviewsBySponsorIdRequest.Validate if the designated constraints
// aren't met.
type GetReviewsBySponsorIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewsBySponsorIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewsBySponsorIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewsBySponsorIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewsBySponsorIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewsBySponsorIdRequestValidationError) ErrorName() string {
	return "GetReviewsBySponsorIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewsBySponsorIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewsBySponsorIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewsBySponsorIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewsBySponsorIdRequestValidationError{}

// Validate checks the field values on GetReviewsBySponsorIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReviewsBySponsorIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewsBySponsorIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetReviewsBySponsorIdResponseMultiError, or nil if none found.
func (m *GetReviewsBySponsorIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewsBySponsorIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProjectId

	// no validation rules for ProjectName

	// no validation rules for ApplicationId

	// no validation rules for ApplicationName

	// no validation rules for BuildId

	// no validation rules for BranchName

	// no validation rules for CommitId

	// no validation rules for CommitMessage

	// no validation rules for ApprovalContent

	// no validation rules for ApprovalReason

	if len(errors) > 0 {
		return GetReviewsBySponsorIdResponseMultiError(errors)
	}

	return nil
}

// GetReviewsBySponsorIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetReviewsBySponsorIdResponse.ValidateAll()
// if the designated constraints aren't met.
type GetReviewsBySponsorIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewsBySponsorIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewsBySponsorIdResponseMultiError) AllErrors() []error { return m }

// GetReviewsBySponsorIdResponseValidationError is the validation error
// returned by GetReviewsBySponsorIdResponse.Validate if the designated
// constraints aren't met.
type GetReviewsBySponsorIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewsBySponsorIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewsBySponsorIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewsBySponsorIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewsBySponsorIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewsBySponsorIdResponseValidationError) ErrorName() string {
	return "GetReviewsBySponsorIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewsBySponsorIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewsBySponsorIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewsBySponsorIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewsBySponsorIdResponseValidationError{}

// Validate checks the field values on GetReviewsByUserIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReviewsByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewsByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewsByUserIdRequestMultiError, or nil if none found.
func (m *GetReviewsByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewsByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Id

	// no validation rules for ProjectId

	// no validation rules for Operator

	// no validation rules for ApprovalStatus

	// no validation rules for OrgId

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetReviewsByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetReviewsByUserIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetReviewsByUserIdRequest.ValidateAll() if the
// designated constraints aren't met.
type GetReviewsByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewsByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewsByUserIdRequestMultiError) AllErrors() []error { return m }

// GetReviewsByUserIdRequestValidationError is the validation error returned by
// GetReviewsByUserIdRequest.Validate if the designated constraints aren't met.
type GetReviewsByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewsByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewsByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewsByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewsByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewsByUserIdRequestValidationError) ErrorName() string {
	return "GetReviewsByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewsByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewsByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewsByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewsByUserIdRequestValidationError{}

// Validate checks the field values on GetReviewsByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReviewsByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewsByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewsByUserIdResponseMultiError, or nil if none found.
func (m *GetReviewsByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewsByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProjectName

	// no validation rules for ApplicationName

	// no validation rules for ProjectId

	// no validation rules for ApplicationId

	// no validation rules for BuildId

	// no validation rules for BranchName

	// no validation rules for CommitId

	// no validation rules for CommitMessage

	// no validation rules for Operator

	// no validation rules for ApprovalStatus

	// no validation rules for ApprovalContent

	// no validation rules for ApprovalReason

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReviewsByUserIdResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReviewsByUserIdResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReviewsByUserIdResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReviewsByUserIdResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReviewsByUserIdResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReviewsByUserIdResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReviewsByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetReviewsByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetReviewsByUserIdResponse.ValidateAll() if
// the designated constraints aren't met.
type GetReviewsByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewsByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewsByUserIdResponseMultiError) AllErrors() []error { return m }

// GetReviewsByUserIdResponseValidationError is the validation error returned
// by GetReviewsByUserIdResponse.Validate if the designated constraints aren't met.
type GetReviewsByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewsByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewsByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewsByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewsByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewsByUserIdResponseValidationError) ErrorName() string {
	return "GetReviewsByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewsByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewsByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewsByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewsByUserIdResponseValidationError{}

// Validate checks the field values on LicenseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LicenseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LicenseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LicenseResponseMultiError, or nil if none found.
func (m *LicenseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LicenseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	// no validation rules for Message

	// no validation rules for CurrentHostCount

	if m.License != nil {

		if all {
			switch v := interface{}(m.GetLicense()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LicenseResponseValidationError{
						field:  "License",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LicenseResponseValidationError{
						field:  "License",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLicense()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LicenseResponseValidationError{
					field:  "License",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LicenseResponseMultiError(errors)
	}

	return nil
}

// LicenseResponseMultiError is an error wrapping multiple validation errors
// returned by LicenseResponse.ValidateAll() if the designated constraints
// aren't met.
type LicenseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LicenseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LicenseResponseMultiError) AllErrors() []error { return m }

// LicenseResponseValidationError is the validation error returned by
// LicenseResponse.Validate if the designated constraints aren't met.
type LicenseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseResponseValidationError) ErrorName() string { return "LicenseResponseValidationError" }

// Error satisfies the builtin error interface
func (e LicenseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicenseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseResponseValidationError{}

// Validate checks the field values on ListMemberRolesByUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemberRolesByUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemberRolesByUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemberRolesByUserRequestMultiError, or nil if none found.
func (m *ListMemberRolesByUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemberRolesByUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for ScopeType

	// no validation rules for ParentID

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListMemberRolesByUserRequestMultiError(errors)
	}

	return nil
}

// ListMemberRolesByUserRequestMultiError is an error wrapping multiple
// validation errors returned by ListMemberRolesByUserRequest.ValidateAll() if
// the designated constraints aren't met.
type ListMemberRolesByUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemberRolesByUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemberRolesByUserRequestMultiError) AllErrors() []error { return m }

// ListMemberRolesByUserRequestValidationError is the validation error returned
// by ListMemberRolesByUserRequest.Validate if the designated constraints
// aren't met.
type ListMemberRolesByUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemberRolesByUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemberRolesByUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemberRolesByUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemberRolesByUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemberRolesByUserRequestValidationError) ErrorName() string {
	return "ListMemberRolesByUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemberRolesByUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemberRolesByUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemberRolesByUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemberRolesByUserRequestValidationError{}

// Validate checks the field values on ListMemberRolesByUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemberRolesByUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemberRolesByUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListMemberRolesByUserResponseMultiError, or nil if none found.
func (m *ListMemberRolesByUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemberRolesByUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMemberRolesByUserResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMemberRolesByUserResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMemberRolesByUserResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListMemberRolesByUserResponseMultiError(errors)
	}

	return nil
}

// ListMemberRolesByUserResponseMultiError is an error wrapping multiple
// validation errors returned by ListMemberRolesByUserResponse.ValidateAll()
// if the designated constraints aren't met.
type ListMemberRolesByUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemberRolesByUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemberRolesByUserResponseMultiError) AllErrors() []error { return m }

// ListMemberRolesByUserResponseValidationError is the validation error
// returned by ListMemberRolesByUserResponse.Validate if the designated
// constraints aren't met.
type ListMemberRolesByUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemberRolesByUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemberRolesByUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemberRolesByUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemberRolesByUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemberRolesByUserResponseValidationError) ErrorName() string {
	return "ListMemberRolesByUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemberRolesByUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemberRolesByUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemberRolesByUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemberRolesByUserResponseValidationError{}

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Name

	// no validation rules for Nick

	// no validation rules for Avatar

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "Scope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Removed

	// no validation rules for Deleted

	// no validation rules for Token

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}

	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on MemberAddByInviteCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberAddByInviteCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberAddByInviteCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberAddByInviteCodeRequestMultiError, or nil if none found.
func (m *MemberAddByInviteCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberAddByInviteCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VerifyCode

	// no validation rules for OrgID

	if len(errors) > 0 {
		return MemberAddByInviteCodeRequestMultiError(errors)
	}

	return nil
}

// MemberAddByInviteCodeRequestMultiError is an error wrapping multiple
// validation errors returned by MemberAddByInviteCodeRequest.ValidateAll() if
// the designated constraints aren't met.
type MemberAddByInviteCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberAddByInviteCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberAddByInviteCodeRequestMultiError) AllErrors() []error { return m }

// MemberAddByInviteCodeRequestValidationError is the validation error returned
// by MemberAddByInviteCodeRequest.Validate if the designated constraints
// aren't met.
type MemberAddByInviteCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberAddByInviteCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberAddByInviteCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberAddByInviteCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberAddByInviteCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberAddByInviteCodeRequestValidationError) ErrorName() string {
	return "MemberAddByInviteCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberAddByInviteCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberAddByInviteCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberAddByInviteCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberAddByInviteCodeRequestValidationError{}

// Validate checks the field values on MemberAddByInviteCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberAddByInviteCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberAddByInviteCodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MemberAddByInviteCodeResponseMultiError, or nil if none found.
func (m *MemberAddByInviteCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberAddByInviteCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return MemberAddByInviteCodeResponseMultiError(errors)
	}

	return nil
}

// MemberAddByInviteCodeResponseMultiError is an error wrapping multiple
// validation errors returned by MemberAddByInviteCodeResponse.ValidateAll()
// if the designated constraints aren't met.
type MemberAddByInviteCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberAddByInviteCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberAddByInviteCodeResponseMultiError) AllErrors() []error { return m }

// MemberAddByInviteCodeResponseValidationError is the validation error
// returned by MemberAddByInviteCodeResponse.Validate if the designated
// constraints aren't met.
type MemberAddByInviteCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberAddByInviteCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberAddByInviteCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberAddByInviteCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberAddByInviteCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberAddByInviteCodeResponseValidationError) ErrorName() string {
	return "MemberAddByInviteCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberAddByInviteCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberAddByInviteCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberAddByInviteCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberAddByInviteCodeResponseValidationError{}

// Validate checks the field values on MemberAddOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberAddOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberAddOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberAddOptionsMultiError, or nil if none found.
func (m *MemberAddOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberAddOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rewrite

	if len(errors) > 0 {
		return MemberAddOptionsMultiError(errors)
	}

	return nil
}

// MemberAddOptionsMultiError is an error wrapping multiple validation errors
// returned by MemberAddOptions.ValidateAll() if the designated constraints
// aren't met.
type MemberAddOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberAddOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberAddOptionsMultiError) AllErrors() []error { return m }

// MemberAddOptionsValidationError is the validation error returned by
// MemberAddOptions.Validate if the designated constraints aren't met.
type MemberAddOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberAddOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberAddOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberAddOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberAddOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberAddOptionsValidationError) ErrorName() string { return "MemberAddOptionsValidationError" }

// Error satisfies the builtin error interface
func (e MemberAddOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberAddOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberAddOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberAddOptionsValidationError{}

// Validate checks the field values on MemberAddRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberAddRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberAddRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberAddRequestMultiError, or nil if none found.
func (m *MemberAddRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberAddRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberAddRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberAddRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberAddRequestValidationError{
				field:  "Scope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TargetScopeType

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberAddRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberAddRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberAddRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for VerifyCode

	if len(errors) > 0 {
		return MemberAddRequestMultiError(errors)
	}

	return nil
}

// MemberAddRequestMultiError is an error wrapping multiple validation errors
// returned by MemberAddRequest.ValidateAll() if the designated constraints
// aren't met.
type MemberAddRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberAddRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberAddRequestMultiError) AllErrors() []error { return m }

// MemberAddRequestValidationError is the validation error returned by
// MemberAddRequest.Validate if the designated constraints aren't met.
type MemberAddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberAddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberAddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberAddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberAddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberAddRequestValidationError) ErrorName() string { return "MemberAddRequestValidationError" }

// Error satisfies the builtin error interface
func (e MemberAddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberAddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberAddRequestValidationError{}

// Validate checks the field values on MemberAddResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberAddResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberAddResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberAddResponseMultiError, or nil if none found.
func (m *MemberAddResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberAddResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MemberAddResponseMultiError(errors)
	}

	return nil
}

// MemberAddResponseMultiError is an error wrapping multiple validation errors
// returned by MemberAddResponse.ValidateAll() if the designated constraints
// aren't met.
type MemberAddResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberAddResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberAddResponseMultiError) AllErrors() []error { return m }

// MemberAddResponseValidationError is the validation error returned by
// MemberAddResponse.Validate if the designated constraints aren't met.
type MemberAddResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberAddResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberAddResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberAddResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberAddResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberAddResponseValidationError) ErrorName() string {
	return "MemberAddResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberAddResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberAddResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberAddResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberAddResponseValidationError{}

// Validate checks the field values on MemberLabelInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberLabelInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberLabelInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberLabelInfoMultiError, or nil if none found.
func (m *MemberLabelInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberLabelInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	// no validation rules for Name

	if len(errors) > 0 {
		return MemberLabelInfoMultiError(errors)
	}

	return nil
}

// MemberLabelInfoMultiError is an error wrapping multiple validation errors
// returned by MemberLabelInfo.ValidateAll() if the designated constraints
// aren't met.
type MemberLabelInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberLabelInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberLabelInfoMultiError) AllErrors() []error { return m }

// MemberLabelInfoValidationError is the validation error returned by
// MemberLabelInfo.Validate if the designated constraints aren't met.
type MemberLabelInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberLabelInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberLabelInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberLabelInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberLabelInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberLabelInfoValidationError) ErrorName() string { return "MemberLabelInfoValidationError" }

// Error satisfies the builtin error interface
func (e MemberLabelInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberLabelInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberLabelInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberLabelInfoValidationError{}

// Validate checks the field values on MemberLabelList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberLabelList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberLabelList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberLabelListMultiError, or nil if none found.
func (m *MemberLabelList) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberLabelList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberLabelListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberLabelListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberLabelListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MemberLabelListMultiError(errors)
	}

	return nil
}

// MemberLabelListMultiError is an error wrapping multiple validation errors
// returned by MemberLabelList.ValidateAll() if the designated constraints
// aren't met.
type MemberLabelListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberLabelListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberLabelListMultiError) AllErrors() []error { return m }

// MemberLabelListValidationError is the validation error returned by
// MemberLabelList.Validate if the designated constraints aren't met.
type MemberLabelListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberLabelListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberLabelListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberLabelListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberLabelListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberLabelListValidationError) ErrorName() string { return "MemberLabelListValidationError" }

// Error satisfies the builtin error interface
func (e MemberLabelListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberLabelList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberLabelListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberLabelListValidationError{}

// Validate checks the field values on MemberLabelListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberLabelListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberLabelListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberLabelListResponseMultiError, or nil if none found.
func (m *MemberLabelListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberLabelListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberLabelListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberLabelListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberLabelListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberLabelListResponseMultiError(errors)
	}

	return nil
}

// MemberLabelListResponseMultiError is an error wrapping multiple validation
// errors returned by MemberLabelListResponse.ValidateAll() if the designated
// constraints aren't met.
type MemberLabelListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberLabelListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberLabelListResponseMultiError) AllErrors() []error { return m }

// MemberLabelListResponseValidationError is the validation error returned by
// MemberLabelListResponse.Validate if the designated constraints aren't met.
type MemberLabelListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberLabelListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberLabelListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberLabelListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberLabelListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberLabelListResponseValidationError) ErrorName() string {
	return "MemberLabelListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberLabelListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberLabelListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberLabelListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberLabelListResponseValidationError{}

// Validate checks the field values on MemberList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberListMultiError, or
// nil if none found.
func (m *MemberList) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return MemberListMultiError(errors)
	}

	return nil
}

// MemberListMultiError is an error wrapping multiple validation errors
// returned by MemberList.ValidateAll() if the designated constraints aren't met.
type MemberListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberListMultiError) AllErrors() []error { return m }

// MemberListValidationError is the validation error returned by
// MemberList.Validate if the designated constraints aren't met.
type MemberListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberListValidationError) ErrorName() string { return "MemberListValidationError" }

// Error satisfies the builtin error interface
func (e MemberListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberListValidationError{}

// Validate checks the field values on MemberListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberListRequestMultiError, or nil if none found.
func (m *MemberListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	// no validation rules for Q

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return MemberListRequestMultiError(errors)
	}

	return nil
}

// MemberListRequestMultiError is an error wrapping multiple validation errors
// returned by MemberListRequest.ValidateAll() if the designated constraints
// aren't met.
type MemberListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberListRequestMultiError) AllErrors() []error { return m }

// MemberListRequestValidationError is the validation error returned by
// MemberListRequest.Validate if the designated constraints aren't met.
type MemberListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberListRequestValidationError) ErrorName() string {
	return "MemberListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberListRequestValidationError{}

// Validate checks the field values on MemberListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberListResponseMultiError, or nil if none found.
func (m *MemberListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberListResponseMultiError(errors)
	}

	return nil
}

// MemberListResponseMultiError is an error wrapping multiple validation errors
// returned by MemberListResponse.ValidateAll() if the designated constraints
// aren't met.
type MemberListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberListResponseMultiError) AllErrors() []error { return m }

// MemberListResponseValidationError is the validation error returned by
// MemberListResponse.Validate if the designated constraints aren't met.
type MemberListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberListResponseValidationError) ErrorName() string {
	return "MemberListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberListResponseValidationError{}

// Validate checks the field values on MemberRemoveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberRemoveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberRemoveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberRemoveRequestMultiError, or nil if none found.
func (m *MemberRemoveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberRemoveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberRemoveRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberRemoveRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberRemoveRequestValidationError{
				field:  "Scope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberRemoveRequestMultiError(errors)
	}

	return nil
}

// MemberRemoveRequestMultiError is an error wrapping multiple validation
// errors returned by MemberRemoveRequest.ValidateAll() if the designated
// constraints aren't met.
type MemberRemoveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberRemoveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberRemoveRequestMultiError) AllErrors() []error { return m }

// MemberRemoveRequestValidationError is the validation error returned by
// MemberRemoveRequest.Validate if the designated constraints aren't met.
type MemberRemoveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberRemoveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberRemoveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberRemoveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberRemoveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberRemoveRequestValidationError) ErrorName() string {
	return "MemberRemoveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberRemoveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberRemoveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberRemoveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberRemoveRequestValidationError{}

// Validate checks the field values on MemberRemoveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberRemoveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberRemoveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberRemoveResponseMultiError, or nil if none found.
func (m *MemberRemoveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberRemoveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MemberRemoveResponseMultiError(errors)
	}

	return nil
}

// MemberRemoveResponseMultiError is an error wrapping multiple validation
// errors returned by MemberRemoveResponse.ValidateAll() if the designated
// constraints aren't met.
type MemberRemoveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberRemoveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberRemoveResponseMultiError) AllErrors() []error { return m }

// MemberRemoveResponseValidationError is the validation error returned by
// MemberRemoveResponse.Validate if the designated constraints aren't met.
type MemberRemoveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberRemoveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberRemoveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberRemoveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberRemoveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberRemoveResponseValidationError) ErrorName() string {
	return "MemberRemoveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberRemoveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberRemoveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberRemoveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberRemoveResponseValidationError{}

// Validate checks the field values on NotifySource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifySource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifySource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifySourceMultiError, or
// nil if none found.
func (m *NotifySource) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifySource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for SourceType

	// no validation rules for SourceID

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifySourceValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifySourceValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifySourceValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotifySourceMultiError(errors)
	}

	return nil
}

// NotifySourceMultiError is an error wrapping multiple validation errors
// returned by NotifySource.ValidateAll() if the designated constraints aren't met.
type NotifySourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifySourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifySourceMultiError) AllErrors() []error { return m }

// NotifySourceValidationError is the validation error returned by
// NotifySource.Validate if the designated constraints aren't met.
type NotifySourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifySourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifySourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifySourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifySourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifySourceValidationError) ErrorName() string { return "NotifySourceValidationError" }

// Error satisfies the builtin error interface
func (e NotifySourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifySource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifySourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifySourceValidationError{}

// Validate checks the field values on NotifyTarget with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyTarget with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyTargetMultiError, or
// nil if none found.
func (m *NotifyTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyTargetValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyTargetValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyTargetValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotifyTargetMultiError(errors)
	}

	return nil
}

// NotifyTargetMultiError is an error wrapping multiple validation errors
// returned by NotifyTarget.ValidateAll() if the designated constraints aren't met.
type NotifyTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyTargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyTargetMultiError) AllErrors() []error { return m }

// NotifyTargetValidationError is the validation error returned by
// NotifyTarget.Validate if the designated constraints aren't met.
type NotifyTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyTargetValidationError) ErrorName() string { return "NotifyTargetValidationError" }

// Error satisfies the builtin error interface
func (e NotifyTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyTargetValidationError{}

// Validate checks the field values on PagingProjectDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PagingProjectDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingProjectDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagingProjectDTOMultiError, or nil if none found.
func (m *PagingProjectDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingProjectDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingProjectDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingProjectDTOValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingProjectDTOValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PagingProjectDTOMultiError(errors)
	}

	return nil
}

// PagingProjectDTOMultiError is an error wrapping multiple validation errors
// returned by PagingProjectDTO.ValidateAll() if the designated constraints
// aren't met.
type PagingProjectDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingProjectDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingProjectDTOMultiError) AllErrors() []error { return m }

// PagingProjectDTOValidationError is the validation error returned by
// PagingProjectDTO.Validate if the designated constraints aren't met.
type PagingProjectDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingProjectDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingProjectDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingProjectDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingProjectDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingProjectDTOValidationError) ErrorName() string { return "PagingProjectDTOValidationError" }

// Error satisfies the builtin error interface
func (e PagingProjectDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingProjectDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingProjectDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingProjectDTOValidationError{}

// Validate checks the field values on PermissionCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PermissionCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionCheckRequestMultiError, or nil if none found.
func (m *PermissionCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Scope

	// no validation rules for ScopeID

	// no validation rules for Resource

	// no validation rules for Action

	// no validation rules for ResourceRole

	if len(errors) > 0 {
		return PermissionCheckRequestMultiError(errors)
	}

	return nil
}

// PermissionCheckRequestMultiError is an error wrapping multiple validation
// errors returned by PermissionCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type PermissionCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionCheckRequestMultiError) AllErrors() []error { return m }

// PermissionCheckRequestValidationError is the validation error returned by
// PermissionCheckRequest.Validate if the designated constraints aren't met.
type PermissionCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionCheckRequestValidationError) ErrorName() string {
	return "PermissionCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionCheckRequestValidationError{}

// Validate checks the field values on PermissionCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PermissionCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionCheckResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionCheckResponseMultiError, or nil if none found.
func (m *PermissionCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PermissionCheckResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PermissionCheckResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionCheckResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PermissionCheckResponseMultiError(errors)
	}

	return nil
}

// PermissionCheckResponseMultiError is an error wrapping multiple validation
// errors returned by PermissionCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type PermissionCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionCheckResponseMultiError) AllErrors() []error { return m }

// PermissionCheckResponseValidationError is the validation error returned by
// PermissionCheckResponse.Validate if the designated constraints aren't met.
type PermissionCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionCheckResponseValidationError) ErrorName() string {
	return "PermissionCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionCheckResponseValidationError{}

// Validate checks the field values on PermissionCheckResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PermissionCheckResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionCheckResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionCheckResponseDataMultiError, or nil if none found.
func (m *PermissionCheckResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionCheckResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Access

	if len(errors) > 0 {
		return PermissionCheckResponseDataMultiError(errors)
	}

	return nil
}

// PermissionCheckResponseDataMultiError is an error wrapping multiple
// validation errors returned by PermissionCheckResponseData.ValidateAll() if
// the designated constraints aren't met.
type PermissionCheckResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionCheckResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionCheckResponseDataMultiError) AllErrors() []error { return m }

// PermissionCheckResponseDataValidationError is the validation error returned
// by PermissionCheckResponseData.Validate if the designated constraints
// aren't met.
type PermissionCheckResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionCheckResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionCheckResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionCheckResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionCheckResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionCheckResponseDataValidationError) ErrorName() string {
	return "PermissionCheckResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionCheckResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionCheckResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionCheckResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionCheckResponseDataValidationError{}

// Validate checks the field values on PermissionList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PermissionList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionListMultiError,
// or nil if none found.
func (m *PermissionList) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Access

	for idx, item := range m.GetPermissionList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PermissionListValidationError{
						field:  fmt.Sprintf("PermissionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PermissionListValidationError{
						field:  fmt.Sprintf("PermissionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermissionListValidationError{
					field:  fmt.Sprintf("PermissionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResourceRoleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PermissionListValidationError{
						field:  fmt.Sprintf("ResourceRoleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PermissionListValidationError{
						field:  fmt.Sprintf("ResourceRoleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermissionListValidationError{
					field:  fmt.Sprintf("ResourceRoleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Exist

	if m.ScopeInfo != nil {

		if all {
			switch v := interface{}(m.GetScopeInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PermissionListValidationError{
						field:  "ScopeInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PermissionListValidationError{
						field:  "ScopeInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetScopeInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermissionListValidationError{
					field:  "ScopeInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PermissionListMultiError(errors)
	}

	return nil
}

// PermissionListMultiError is an error wrapping multiple validation errors
// returned by PermissionList.ValidateAll() if the designated constraints
// aren't met.
type PermissionListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionListMultiError) AllErrors() []error { return m }

// PermissionListValidationError is the validation error returned by
// PermissionList.Validate if the designated constraints aren't met.
type PermissionListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionListValidationError) ErrorName() string { return "PermissionListValidationError" }

// Error satisfies the builtin error interface
func (e PermissionListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionListValidationError{}

// Validate checks the field values on PermissionListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PermissionListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionListResponseMultiError, or nil if none found.
func (m *PermissionListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PermissionListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PermissionListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PermissionListResponseMultiError(errors)
	}

	return nil
}

// PermissionListResponseMultiError is an error wrapping multiple validation
// errors returned by PermissionListResponse.ValidateAll() if the designated
// constraints aren't met.
type PermissionListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionListResponseMultiError) AllErrors() []error { return m }

// PermissionListResponseValidationError is the validation error returned by
// PermissionListResponse.Validate if the designated constraints aren't met.
type PermissionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionListResponseValidationError) ErrorName() string {
	return "PermissionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionListResponseValidationError{}

// Validate checks the field values on ProjectDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProjectDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProjectDTOMultiError, or
// nil if none found.
func (m *ProjectDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for DDHook

	// no validation rules for OrgID

	// no validation rules for Creator

	// no validation rules for Logo

	// no validation rules for Desc

	// no validation rules for ActiveTime

	// no validation rules for Joined

	// no validation rules for BlockStatus

	// no validation rules for CanManage

	// no validation rules for IsPublic

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectDTOValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProjectResourceUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "ProjectResourceUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "ProjectResourceUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectResourceUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectDTOValidationError{
				field:  "ProjectResourceUsage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClusterConfig

	// no validation rules for RollbackConfig

	// no validation rules for CpuQuota

	// no validation rules for MemQuota

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectDTOValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectDTOValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if m.CanUnblock != nil {
		// no validation rules for CanUnblock
	}

	if m.ResourceConfig != nil {

		if all {
			switch v := interface{}(m.GetResourceConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectDTOValidationError{
						field:  "ResourceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectDTOValidationError{
						field:  "ResourceConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResourceConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectDTOValidationError{
					field:  "ResourceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectDTOMultiError(errors)
	}

	return nil
}

// ProjectDTOMultiError is an error wrapping multiple validation errors
// returned by ProjectDTO.ValidateAll() if the designated constraints aren't met.
type ProjectDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectDTOMultiError) AllErrors() []error { return m }

// ProjectDTOValidationError is the validation error returned by
// ProjectDTO.Validate if the designated constraints aren't met.
type ProjectDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectDTOValidationError) ErrorName() string { return "ProjectDTOValidationError" }

// Error satisfies the builtin error interface
func (e ProjectDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectDTOValidationError{}

// Validate checks the field values on ProjectFunctionSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectFunctionSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectFunctionSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectFunctionSetRequestMultiError, or nil if none found.
func (m *ProjectFunctionSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectFunctionSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for ProjectFunction

	if len(errors) > 0 {
		return ProjectFunctionSetRequestMultiError(errors)
	}

	return nil
}

// ProjectFunctionSetRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectFunctionSetRequest.ValidateAll() if the
// designated constraints aren't met.
type ProjectFunctionSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectFunctionSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectFunctionSetRequestMultiError) AllErrors() []error { return m }

// ProjectFunctionSetRequestValidationError is the validation error returned by
// ProjectFunctionSetRequest.Validate if the designated constraints aren't met.
type ProjectFunctionSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectFunctionSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectFunctionSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectFunctionSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectFunctionSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectFunctionSetRequestValidationError) ErrorName() string {
	return "ProjectFunctionSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectFunctionSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectFunctionSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectFunctionSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectFunctionSetRequestValidationError{}

// Validate checks the field values on ProjectFunctionSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectFunctionSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectFunctionSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectFunctionSetResponseMultiError, or nil if none found.
func (m *ProjectFunctionSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectFunctionSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ProjectFunctionSetResponseMultiError(errors)
	}

	return nil
}

// ProjectFunctionSetResponseMultiError is an error wrapping multiple
// validation errors returned by ProjectFunctionSetResponse.ValidateAll() if
// the designated constraints aren't met.
type ProjectFunctionSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectFunctionSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectFunctionSetResponseMultiError) AllErrors() []error { return m }

// ProjectFunctionSetResponseValidationError is the validation error returned
// by ProjectFunctionSetResponse.Validate if the designated constraints aren't met.
type ProjectFunctionSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectFunctionSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectFunctionSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectFunctionSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectFunctionSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectFunctionSetResponseValidationError) ErrorName() string {
	return "ProjectFunctionSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectFunctionSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectFunctionSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectFunctionSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectFunctionSetResponseValidationError{}

// Validate checks the field values on ProjectLabelCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectLabelCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectLabelCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectLabelCreateRequestMultiError, or nil if none found.
func (m *ProjectLabelCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectLabelCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Color

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return ProjectLabelCreateRequestMultiError(errors)
	}

	return nil
}

// ProjectLabelCreateRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectLabelCreateRequest.ValidateAll() if the
// designated constraints aren't met.
type ProjectLabelCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectLabelCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectLabelCreateRequestMultiError) AllErrors() []error { return m }

// ProjectLabelCreateRequestValidationError is the validation error returned by
// ProjectLabelCreateRequest.Validate if the designated constraints aren't met.
type ProjectLabelCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectLabelCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectLabelCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectLabelCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectLabelCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectLabelCreateRequestValidationError) ErrorName() string {
	return "ProjectLabelCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectLabelCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectLabelCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectLabelCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectLabelCreateRequestValidationError{}

// Validate checks the field values on ProjectLabelCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectLabelCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectLabelCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectLabelCreateResponseMultiError, or nil if none found.
func (m *ProjectLabelCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectLabelCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ProjectLabelCreateResponseMultiError(errors)
	}

	return nil
}

// ProjectLabelCreateResponseMultiError is an error wrapping multiple
// validation errors returned by ProjectLabelCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type ProjectLabelCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectLabelCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectLabelCreateResponseMultiError) AllErrors() []error { return m }

// ProjectLabelCreateResponseValidationError is the validation error returned
// by ProjectLabelCreateResponse.Validate if the designated constraints aren't met.
type ProjectLabelCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectLabelCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectLabelCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectLabelCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectLabelCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectLabelCreateResponseValidationError) ErrorName() string {
	return "ProjectLabelCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectLabelCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectLabelCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectLabelCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectLabelCreateResponseValidationError{}

// Validate checks the field values on ProjectLabelListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectLabelListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectLabelListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectLabelListRequestMultiError, or nil if none found.
func (m *ProjectLabelListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectLabelListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for Key

	// no validation rules for Type

	// no validation rules for PageNo

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ProjectLabelListRequestMultiError(errors)
	}

	return nil
}

// ProjectLabelListRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectLabelListRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectLabelListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectLabelListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectLabelListRequestMultiError) AllErrors() []error { return m }

// ProjectLabelListRequestValidationError is the validation error returned by
// ProjectLabelListRequest.Validate if the designated constraints aren't met.
type ProjectLabelListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectLabelListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectLabelListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectLabelListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectLabelListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectLabelListRequestValidationError) ErrorName() string {
	return "ProjectLabelListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectLabelListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectLabelListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectLabelListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectLabelListRequestValidationError{}

// Validate checks the field values on ProjectLabelListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectLabelListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectLabelListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectLabelListResponseMultiError, or nil if none found.
func (m *ProjectLabelListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectLabelListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectLabelListResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectLabelListResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectLabelListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectLabelListResponseMultiError(errors)
	}

	return nil
}

// ProjectLabelListResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectLabelListResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectLabelListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectLabelListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectLabelListResponseMultiError) AllErrors() []error { return m }

// ProjectLabelListResponseValidationError is the validation error returned by
// ProjectLabelListResponse.Validate if the designated constraints aren't met.
type ProjectLabelListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectLabelListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectLabelListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectLabelListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectLabelListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectLabelListResponseValidationError) ErrorName() string {
	return "ProjectLabelListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectLabelListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectLabelListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectLabelListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectLabelListResponseValidationError{}

// Validate checks the field values on ProjectLabelUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectLabelUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectLabelUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectLabelUpdateRequestMultiError, or nil if none found.
func (m *ProjectLabelUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectLabelUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Color

	// no validation rules for ID

	if len(errors) > 0 {
		return ProjectLabelUpdateRequestMultiError(errors)
	}

	return nil
}

// ProjectLabelUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectLabelUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type ProjectLabelUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectLabelUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectLabelUpdateRequestMultiError) AllErrors() []error { return m }

// ProjectLabelUpdateRequestValidationError is the validation error returned by
// ProjectLabelUpdateRequest.Validate if the designated constraints aren't met.
type ProjectLabelUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectLabelUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectLabelUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectLabelUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectLabelUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectLabelUpdateRequestValidationError) ErrorName() string {
	return "ProjectLabelUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectLabelUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectLabelUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectLabelUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectLabelUpdateRequestValidationError{}

// Validate checks the field values on ProjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectListRequestMultiError, or nil if none found.
func (m *ProjectListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for Query

	// no validation rules for Name

	// no validation rules for OrderBy

	// no validation rules for Asc

	// no validation rules for Joined

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for KeepMsp

	// no validation rules for IsPublic

	if len(errors) > 0 {
		return ProjectListRequestMultiError(errors)
	}

	return nil
}

// ProjectListRequestMultiError is an error wrapping multiple validation errors
// returned by ProjectListRequest.ValidateAll() if the designated constraints
// aren't met.
type ProjectListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectListRequestMultiError) AllErrors() []error { return m }

// ProjectListRequestValidationError is the validation error returned by
// ProjectListRequest.Validate if the designated constraints aren't met.
type ProjectListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectListRequestValidationError) ErrorName() string {
	return "ProjectListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectListRequestValidationError{}

// Validate checks the field values on ProjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectListResponseMultiError, or nil if none found.
func (m *ProjectListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectListResponseMultiError(errors)
	}

	return nil
}

// ProjectListResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectListResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectListResponseMultiError) AllErrors() []error { return m }

// ProjectListResponseValidationError is the validation error returned by
// ProjectListResponse.Validate if the designated constraints aren't met.
type ProjectListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectListResponseValidationError) ErrorName() string {
	return "ProjectListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectListResponseValidationError{}

// Validate checks the field values on ProjectNameSpaceInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectNameSpaceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectNameSpaceInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectNameSpaceInfoMultiError, or nil if none found.
func (m *ProjectNameSpaceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectNameSpaceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Namespaces

	if len(errors) > 0 {
		return ProjectNameSpaceInfoMultiError(errors)
	}

	return nil
}

// ProjectNameSpaceInfoMultiError is an error wrapping multiple validation
// errors returned by ProjectNameSpaceInfo.ValidateAll() if the designated
// constraints aren't met.
type ProjectNameSpaceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectNameSpaceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectNameSpaceInfoMultiError) AllErrors() []error { return m }

// ProjectNameSpaceInfoValidationError is the validation error returned by
// ProjectNameSpaceInfo.Validate if the designated constraints aren't met.
type ProjectNameSpaceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectNameSpaceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectNameSpaceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectNameSpaceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectNameSpaceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectNameSpaceInfoValidationError) ErrorName() string {
	return "ProjectNameSpaceInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectNameSpaceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectNameSpaceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectNameSpaceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectNameSpaceInfoValidationError{}

// Validate checks the field values on ProjectNameSpaceInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectNameSpaceInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectNameSpaceInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectNameSpaceInfoResponseMultiError, or nil if none found.
func (m *ProjectNameSpaceInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectNameSpaceInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectNameSpaceInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectNameSpaceInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectNameSpaceInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectNameSpaceInfoResponseMultiError(errors)
	}

	return nil
}

// ProjectNameSpaceInfoResponseMultiError is an error wrapping multiple
// validation errors returned by ProjectNameSpaceInfoResponse.ValidateAll() if
// the designated constraints aren't met.
type ProjectNameSpaceInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectNameSpaceInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectNameSpaceInfoResponseMultiError) AllErrors() []error { return m }

// ProjectNameSpaceInfoResponseValidationError is the validation error returned
// by ProjectNameSpaceInfoResponse.Validate if the designated constraints
// aren't met.
type ProjectNameSpaceInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectNameSpaceInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectNameSpaceInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectNameSpaceInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectNameSpaceInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectNameSpaceInfoResponseValidationError) ErrorName() string {
	return "ProjectNameSpaceInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectNameSpaceInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectNameSpaceInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectNameSpaceInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectNameSpaceInfoResponseValidationError{}

// Validate checks the field values on ProjectResourceUsage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectResourceUsage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectResourceUsage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectResourceUsageMultiError, or nil if none found.
func (m *ProjectResourceUsage) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectResourceUsage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CpuServiceUsed

	// no validation rules for MemServiceUsed

	// no validation rules for CpuAddonUsed

	// no validation rules for MemAddonUsed

	if len(errors) > 0 {
		return ProjectResourceUsageMultiError(errors)
	}

	return nil
}

// ProjectResourceUsageMultiError is an error wrapping multiple validation
// errors returned by ProjectResourceUsage.ValidateAll() if the designated
// constraints aren't met.
type ProjectResourceUsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectResourceUsageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectResourceUsageMultiError) AllErrors() []error { return m }

// ProjectResourceUsageValidationError is the validation error returned by
// ProjectResourceUsage.Validate if the designated constraints aren't met.
type ProjectResourceUsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectResourceUsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectResourceUsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectResourceUsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectResourceUsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectResourceUsageValidationError) ErrorName() string {
	return "ProjectResourceUsageValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectResourceUsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectResourceUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectResourceUsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectResourceUsageValidationError{}

// Validate checks the field values on ProjectStats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProjectStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectStats with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProjectStatsMultiError, or
// nil if none found.
func (m *ProjectStats) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CountApplications

	// no validation rules for CountMembers

	// no validation rules for TotalApplicationsCount

	// no validation rules for TotalMembersCount

	// no validation rules for TotalIterationsCount

	// no validation rules for RunningIterationsCount

	// no validation rules for PlanningIterationsCount

	// no validation rules for TotalManHourCount

	// no validation rules for UsedManHourCount

	// no validation rules for PlanningManHourCount

	// no validation rules for DoneBugCount

	// no validation rules for TotalBugCount

	// no validation rules for DoneBugPercent

	if len(errors) > 0 {
		return ProjectStatsMultiError(errors)
	}

	return nil
}

// ProjectStatsMultiError is an error wrapping multiple validation errors
// returned by ProjectStats.ValidateAll() if the designated constraints aren't met.
type ProjectStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectStatsMultiError) AllErrors() []error { return m }

// ProjectStatsValidationError is the validation error returned by
// ProjectStats.Validate if the designated constraints aren't met.
type ProjectStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectStatsValidationError) ErrorName() string { return "ProjectStatsValidationError" }

// Error satisfies the builtin error interface
func (e ProjectStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectStatsValidationError{}

// Validate checks the field values on ProjectUpdateBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProjectUpdateBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectUpdateBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectUpdateBodyMultiError, or nil if none found.
func (m *ProjectUpdateBody) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectUpdateBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Logo

	// no validation rules for Desc

	// no validation rules for DdHook

	// no validation rules for ClusterConfig

	// no validation rules for IsPublic

	// no validation rules for RollbackConfig

	// no validation rules for CpuQuota

	// no validation rules for MemQuota

	if m.ResourceConfigs != nil {

		if all {
			switch v := interface{}(m.GetResourceConfigs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectUpdateBodyValidationError{
						field:  "ResourceConfigs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectUpdateBodyValidationError{
						field:  "ResourceConfigs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResourceConfigs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectUpdateBodyValidationError{
					field:  "ResourceConfigs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProjectUpdateBodyMultiError(errors)
	}

	return nil
}

// ProjectUpdateBodyMultiError is an error wrapping multiple validation errors
// returned by ProjectUpdateBody.ValidateAll() if the designated constraints
// aren't met.
type ProjectUpdateBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectUpdateBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectUpdateBodyMultiError) AllErrors() []error { return m }

// ProjectUpdateBodyValidationError is the validation error returned by
// ProjectUpdateBody.Validate if the designated constraints aren't met.
type ProjectUpdateBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectUpdateBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectUpdateBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectUpdateBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectUpdateBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectUpdateBodyValidationError) ErrorName() string {
	return "ProjectUpdateBodyValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectUpdateBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectUpdateBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectUpdateBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectUpdateBodyValidationError{}

// Validate checks the field values on ProjectUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectUpdateRequestMultiError, or nil if none found.
func (m *ProjectUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectUpdateRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectUpdateRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectUpdateRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectUpdateRequestMultiError(errors)
	}

	return nil
}

// ProjectUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by ProjectUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectUpdateRequestMultiError) AllErrors() []error { return m }

// ProjectUpdateRequestValidationError is the validation error returned by
// ProjectUpdateRequest.Validate if the designated constraints aren't met.
type ProjectUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectUpdateRequestValidationError) ErrorName() string {
	return "ProjectUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectUpdateRequestValidationError{}

// Validate checks the field values on ProjectUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectUpdateResponseMultiError, or nil if none found.
func (m *ProjectUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectUpdateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectUpdateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectUpdateResponseMultiError(errors)
	}

	return nil
}

// ProjectUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by ProjectUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectUpdateResponseMultiError) AllErrors() []error { return m }

// ProjectUpdateResponseValidationError is the validation error returned by
// ProjectUpdateResponse.Validate if the designated constraints aren't met.
type ProjectUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectUpdateResponseValidationError) ErrorName() string {
	return "ProjectUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectUpdateResponseValidationError{}

// Validate checks the field values on ProjectWorkSpaceAbility with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectWorkSpaceAbility) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectWorkSpaceAbility with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectWorkSpaceAbilityMultiError, or nil if none found.
func (m *ProjectWorkSpaceAbility) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectWorkSpaceAbility) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectWorkSpaceAbilityValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectWorkSpaceAbilityValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectWorkSpaceAbilityValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectWorkSpaceAbilityValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectWorkSpaceAbilityValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectWorkSpaceAbilityValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProjectID

	// no validation rules for OrgID

	// no validation rules for OrgName

	// no validation rules for Workspace

	// no validation rules for Abilities

	if len(errors) > 0 {
		return ProjectWorkSpaceAbilityMultiError(errors)
	}

	return nil
}

// ProjectWorkSpaceAbilityMultiError is an error wrapping multiple validation
// errors returned by ProjectWorkSpaceAbility.ValidateAll() if the designated
// constraints aren't met.
type ProjectWorkSpaceAbilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectWorkSpaceAbilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectWorkSpaceAbilityMultiError) AllErrors() []error { return m }

// ProjectWorkSpaceAbilityValidationError is the validation error returned by
// ProjectWorkSpaceAbility.Validate if the designated constraints aren't met.
type ProjectWorkSpaceAbilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectWorkSpaceAbilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectWorkSpaceAbilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectWorkSpaceAbilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectWorkSpaceAbilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectWorkSpaceAbilityValidationError) ErrorName() string {
	return "ProjectWorkSpaceAbilityValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectWorkSpaceAbilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectWorkSpaceAbility.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectWorkSpaceAbilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectWorkSpaceAbilityValidationError{}

// Validate checks the field values on ProjectWorkSpaceAbilityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectWorkSpaceAbilityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectWorkSpaceAbilityResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProjectWorkSpaceAbilityResponseMultiError, or nil if none found.
func (m *ProjectWorkSpaceAbilityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectWorkSpaceAbilityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectWorkSpaceAbilityResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectWorkSpaceAbilityResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectWorkSpaceAbilityResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectWorkSpaceAbilityResponseMultiError(errors)
	}

	return nil
}

// ProjectWorkSpaceAbilityResponseMultiError is an error wrapping multiple
// validation errors returned by ProjectWorkSpaceAbilityResponse.ValidateAll()
// if the designated constraints aren't met.
type ProjectWorkSpaceAbilityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectWorkSpaceAbilityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectWorkSpaceAbilityResponseMultiError) AllErrors() []error { return m }

// ProjectWorkSpaceAbilityResponseValidationError is the validation error
// returned by ProjectWorkSpaceAbilityResponse.Validate if the designated
// constraints aren't met.
type ProjectWorkSpaceAbilityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectWorkSpaceAbilityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectWorkSpaceAbilityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectWorkSpaceAbilityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectWorkSpaceAbilityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectWorkSpaceAbilityResponseValidationError) ErrorName() string {
	return "ProjectWorkSpaceAbilityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectWorkSpaceAbilityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectWorkSpaceAbilityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectWorkSpaceAbilityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectWorkSpaceAbilityResponseValidationError{}

// Validate checks the field values on QUOTA_GET_PROJECT_NAMESPACES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *QUOTA_GET_PROJECT_NAMESPACES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QUOTA_GET_PROJECT_NAMESPACES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// QUOTA_GET_PROJECT_NAMESPACES_RequestMultiError, or nil if none found.
func (m *QUOTA_GET_PROJECT_NAMESPACES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QUOTA_GET_PROJECT_NAMESPACES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QUOTA_GET_PROJECT_NAMESPACES_RequestMultiError(errors)
	}

	return nil
}

// QUOTA_GET_PROJECT_NAMESPACES_RequestMultiError is an error wrapping multiple
// validation errors returned by
// QUOTA_GET_PROJECT_NAMESPACES_Request.ValidateAll() if the designated
// constraints aren't met.
type QUOTA_GET_PROJECT_NAMESPACES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QUOTA_GET_PROJECT_NAMESPACES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QUOTA_GET_PROJECT_NAMESPACES_RequestMultiError) AllErrors() []error { return m }

// QUOTA_GET_PROJECT_NAMESPACES_RequestValidationError is the validation error
// returned by QUOTA_GET_PROJECT_NAMESPACES_Request.Validate if the designated
// constraints aren't met.
type QUOTA_GET_PROJECT_NAMESPACES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QUOTA_GET_PROJECT_NAMESPACES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QUOTA_GET_PROJECT_NAMESPACES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QUOTA_GET_PROJECT_NAMESPACES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QUOTA_GET_PROJECT_NAMESPACES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QUOTA_GET_PROJECT_NAMESPACES_RequestValidationError) ErrorName() string {
	return "QUOTA_GET_PROJECT_NAMESPACES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QUOTA_GET_PROJECT_NAMESPACES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQUOTA_GET_PROJECT_NAMESPACES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QUOTA_GET_PROJECT_NAMESPACES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QUOTA_GET_PROJECT_NAMESPACES_RequestValidationError{}

// Validate checks the field values on QUOTA_GET_PROJECT_QUOTA_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QUOTA_GET_PROJECT_QUOTA_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QUOTA_GET_PROJECT_QUOTA_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QUOTA_GET_PROJECT_QUOTA_RequestMultiError, or nil if none found.
func (m *QUOTA_GET_PROJECT_QUOTA_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QUOTA_GET_PROJECT_QUOTA_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QUOTA_GET_PROJECT_QUOTA_RequestMultiError(errors)
	}

	return nil
}

// QUOTA_GET_PROJECT_QUOTA_RequestMultiError is an error wrapping multiple
// validation errors returned by QUOTA_GET_PROJECT_QUOTA_Request.ValidateAll()
// if the designated constraints aren't met.
type QUOTA_GET_PROJECT_QUOTA_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QUOTA_GET_PROJECT_QUOTA_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QUOTA_GET_PROJECT_QUOTA_RequestMultiError) AllErrors() []error { return m }

// QUOTA_GET_PROJECT_QUOTA_RequestValidationError is the validation error
// returned by QUOTA_GET_PROJECT_QUOTA_Request.Validate if the designated
// constraints aren't met.
type QUOTA_GET_PROJECT_QUOTA_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QUOTA_GET_PROJECT_QUOTA_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QUOTA_GET_PROJECT_QUOTA_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QUOTA_GET_PROJECT_QUOTA_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QUOTA_GET_PROJECT_QUOTA_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QUOTA_GET_PROJECT_QUOTA_RequestValidationError) ErrorName() string {
	return "QUOTA_GET_PROJECT_QUOTA_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QUOTA_GET_PROJECT_QUOTA_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQUOTA_GET_PROJECT_QUOTA_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QUOTA_GET_PROJECT_QUOTA_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QUOTA_GET_PROJECT_QUOTA_RequestValidationError{}

// Validate checks the field values on QueryMBoxData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryMBoxData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryMBoxData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryMBoxDataMultiError, or
// nil if none found.
func (m *QueryMBoxData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryMBoxData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryMBoxDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryMBoxDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryMBoxDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for UnRead

	if len(errors) > 0 {
		return QueryMBoxDataMultiError(errors)
	}

	return nil
}

// QueryMBoxDataMultiError is an error wrapping multiple validation errors
// returned by QueryMBoxData.ValidateAll() if the designated constraints
// aren't met.
type QueryMBoxDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryMBoxDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryMBoxDataMultiError) AllErrors() []error { return m }

// QueryMBoxDataValidationError is the validation error returned by
// QueryMBoxData.Validate if the designated constraints aren't met.
type QueryMBoxDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryMBoxDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryMBoxDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryMBoxDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryMBoxDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryMBoxDataValidationError) ErrorName() string { return "QueryMBoxDataValidationError" }

// Error satisfies the builtin error interface
func (e QueryMBoxDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryMBoxData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryMBoxDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryMBoxDataValidationError{}

// Validate checks the field values on QueryMBoxRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryMBoxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryMBoxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryMBoxRequestMultiError, or nil if none found.
func (m *QueryMBoxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryMBoxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Label

	// no validation rules for Status

	// no validation rules for Type

	// no validation rules for OrgID

	// no validation rules for UserID

	if len(errors) > 0 {
		return QueryMBoxRequestMultiError(errors)
	}

	return nil
}

// QueryMBoxRequestMultiError is an error wrapping multiple validation errors
// returned by QueryMBoxRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryMBoxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryMBoxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryMBoxRequestMultiError) AllErrors() []error { return m }

// QueryMBoxRequestValidationError is the validation error returned by
// QueryMBoxRequest.Validate if the designated constraints aren't met.
type QueryMBoxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryMBoxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryMBoxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryMBoxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryMBoxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryMBoxRequestValidationError) ErrorName() string { return "QueryMBoxRequestValidationError" }

// Error satisfies the builtin error interface
func (e QueryMBoxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryMBoxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryMBoxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryMBoxRequestValidationError{}

// Validate checks the field values on QueryMBoxResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryMBoxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryMBoxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryMBoxResponseMultiError, or nil if none found.
func (m *QueryMBoxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryMBoxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryMBoxResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryMBoxResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryMBoxResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryMBoxResponseMultiError(errors)
	}

	return nil
}

// QueryMBoxResponseMultiError is an error wrapping multiple validation errors
// returned by QueryMBoxResponse.ValidateAll() if the designated constraints
// aren't met.
type QueryMBoxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryMBoxResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryMBoxResponseMultiError) AllErrors() []error { return m }

// QueryMBoxResponseValidationError is the validation error returned by
// QueryMBoxResponse.Validate if the designated constraints aren't met.
type QueryMBoxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryMBoxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryMBoxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryMBoxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryMBoxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryMBoxResponseValidationError) ErrorName() string {
	return "QueryMBoxResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryMBoxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryMBoxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryMBoxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryMBoxResponseValidationError{}

// Validate checks the field values on QueryNotifyData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyDataMultiError, or nil if none found.
func (m *QueryNotifyData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryNotifyDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryNotifyDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryNotifyDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryNotifyDataMultiError(errors)
	}

	return nil
}

// QueryNotifyDataMultiError is an error wrapping multiple validation errors
// returned by QueryNotifyData.ValidateAll() if the designated constraints
// aren't met.
type QueryNotifyDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyDataMultiError) AllErrors() []error { return m }

// QueryNotifyDataValidationError is the validation error returned by
// QueryNotifyData.Validate if the designated constraints aren't met.
type QueryNotifyDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyDataValidationError) ErrorName() string { return "QueryNotifyDataValidationError" }

// Error satisfies the builtin error interface
func (e QueryNotifyDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyDataValidationError{}

// Validate checks the field values on QueryNotifyHistoryData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyHistoryData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyHistoryData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyHistoryDataMultiError, or nil if none found.
func (m *QueryNotifyHistoryData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyHistoryData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryNotifyHistoryDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryNotifyHistoryDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryNotifyHistoryDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryNotifyHistoryDataMultiError(errors)
	}

	return nil
}

// QueryNotifyHistoryDataMultiError is an error wrapping multiple validation
// errors returned by QueryNotifyHistoryData.ValidateAll() if the designated
// constraints aren't met.
type QueryNotifyHistoryDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyHistoryDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyHistoryDataMultiError) AllErrors() []error { return m }

// QueryNotifyHistoryDataValidationError is the validation error returned by
// QueryNotifyHistoryData.Validate if the designated constraints aren't met.
type QueryNotifyHistoryDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyHistoryDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyHistoryDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyHistoryDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyHistoryDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyHistoryDataValidationError) ErrorName() string {
	return "QueryNotifyHistoryDataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyHistoryDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyHistoryData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyHistoryDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyHistoryDataValidationError{}

// Validate checks the field values on QueryNotifyHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyHistoryRequestMultiError, or nil if none found.
func (m *QueryNotifyHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for NotifyName

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Channel

	// no validation rules for Label

	// no validation rules for ClusterName

	// no validation rules for OrgID

	if len(errors) > 0 {
		return QueryNotifyHistoryRequestMultiError(errors)
	}

	return nil
}

// QueryNotifyHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by QueryNotifyHistoryRequest.ValidateAll() if the
// designated constraints aren't met.
type QueryNotifyHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyHistoryRequestMultiError) AllErrors() []error { return m }

// QueryNotifyHistoryRequestValidationError is the validation error returned by
// QueryNotifyHistoryRequest.Validate if the designated constraints aren't met.
type QueryNotifyHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyHistoryRequestValidationError) ErrorName() string {
	return "QueryNotifyHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyHistoryRequestValidationError{}

// Validate checks the field values on QueryNotifyHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyHistoryResponseMultiError, or nil if none found.
func (m *QueryNotifyHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryNotifyHistoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryNotifyHistoryResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryNotifyHistoryResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryNotifyHistoryResponseMultiError(errors)
	}

	return nil
}

// QueryNotifyHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by QueryNotifyHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type QueryNotifyHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyHistoryResponseMultiError) AllErrors() []error { return m }

// QueryNotifyHistoryResponseValidationError is the validation error returned
// by QueryNotifyHistoryResponse.Validate if the designated constraints aren't met.
type QueryNotifyHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyHistoryResponseValidationError) ErrorName() string {
	return "QueryNotifyHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyHistoryResponseValidationError{}

// Validate checks the field values on QueryNotifyItemData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyItemData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyItemData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyItemDataMultiError, or nil if none found.
func (m *QueryNotifyItemData) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyItemData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryNotifyItemDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryNotifyItemDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryNotifyItemDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryNotifyItemDataMultiError(errors)
	}

	return nil
}

// QueryNotifyItemDataMultiError is an error wrapping multiple validation
// errors returned by QueryNotifyItemData.ValidateAll() if the designated
// constraints aren't met.
type QueryNotifyItemDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyItemDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyItemDataMultiError) AllErrors() []error { return m }

// QueryNotifyItemDataValidationError is the validation error returned by
// QueryNotifyItemData.Validate if the designated constraints aren't met.
type QueryNotifyItemDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyItemDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyItemDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyItemDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyItemDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyItemDataValidationError) ErrorName() string {
	return "QueryNotifyItemDataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyItemDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyItemData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyItemDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyItemDataValidationError{}

// Validate checks the field values on QueryNotifyItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyItemRequestMultiError, or nil if none found.
func (m *QueryNotifyItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for Category

	// no validation rules for Label

	// no validation rules for ScopeType

	if len(errors) > 0 {
		return QueryNotifyItemRequestMultiError(errors)
	}

	return nil
}

// QueryNotifyItemRequestMultiError is an error wrapping multiple validation
// errors returned by QueryNotifyItemRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryNotifyItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyItemRequestMultiError) AllErrors() []error { return m }

// QueryNotifyItemRequestValidationError is the validation error returned by
// QueryNotifyItemRequest.Validate if the designated constraints aren't met.
type QueryNotifyItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyItemRequestValidationError) ErrorName() string {
	return "QueryNotifyItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyItemRequestValidationError{}

// Validate checks the field values on QueryNotifyItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyItemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyItemResponseMultiError, or nil if none found.
func (m *QueryNotifyItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryNotifyItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryNotifyItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryNotifyItemResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryNotifyItemResponseMultiError(errors)
	}

	return nil
}

// QueryNotifyItemResponseMultiError is an error wrapping multiple validation
// errors returned by QueryNotifyItemResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryNotifyItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyItemResponseMultiError) AllErrors() []error { return m }

// QueryNotifyItemResponseValidationError is the validation error returned by
// QueryNotifyItemResponse.Validate if the designated constraints aren't met.
type QueryNotifyItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyItemResponseValidationError) ErrorName() string {
	return "QueryNotifyItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyItemResponseValidationError{}

// Validate checks the field values on QueryNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyRequestMultiError, or nil if none found.
func (m *QueryNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNo

	// no validation rules for PageSize

	// no validation rules for GroupDetail

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	// no validation rules for Label

	// no validation rules for ClusterName

	// no validation rules for OrgID

	if len(errors) > 0 {
		return QueryNotifyRequestMultiError(errors)
	}

	return nil
}

// QueryNotifyRequestMultiError is an error wrapping multiple validation errors
// returned by QueryNotifyRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyRequestMultiError) AllErrors() []error { return m }

// QueryNotifyRequestValidationError is the validation error returned by
// QueryNotifyRequest.Validate if the designated constraints aren't met.
type QueryNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyRequestValidationError) ErrorName() string {
	return "QueryNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyRequestValidationError{}

// Validate checks the field values on QueryNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryNotifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryNotifyResponseMultiError, or nil if none found.
func (m *QueryNotifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryNotifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryNotifyResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryNotifyResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryNotifyResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryNotifyResponseMultiError(errors)
	}

	return nil
}

// QueryNotifyResponseMultiError is an error wrapping multiple validation
// errors returned by QueryNotifyResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryNotifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryNotifyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryNotifyResponseMultiError) AllErrors() []error { return m }

// QueryNotifyResponseValidationError is the validation error returned by
// QueryNotifyResponse.Validate if the designated constraints aren't met.
type QueryNotifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryNotifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryNotifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryNotifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryNotifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryNotifyResponseValidationError) ErrorName() string {
	return "QueryNotifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryNotifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryNotifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryNotifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryNotifyResponseValidationError{}

// Validate checks the field values on Scope with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Scope) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Scope with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ScopeMultiError, or nil if none found.
func (m *Scope) ValidateAll() error {
	return m.validate(true)
}

func (m *Scope) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for ID

	if len(errors) > 0 {
		return ScopeMultiError(errors)
	}

	return nil
}

// ScopeMultiError is an error wrapping multiple validation errors returned by
// Scope.ValidateAll() if the designated constraints aren't met.
type ScopeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeMultiError) AllErrors() []error { return m }

// ScopeValidationError is the validation error returned by Scope.Validate if
// the designated constraints aren't met.
type ScopeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeValidationError) ErrorName() string { return "ScopeValidationError" }

// Error satisfies the builtin error interface
func (e ScopeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScope.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeValidationError{}

// Validate checks the field values on ScopeResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScopeResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScopeResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScopeResourceMultiError, or
// nil if none found.
func (m *ScopeResource) ValidateAll() error {
	return m.validate(true)
}

func (m *ScopeResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Resource

	// no validation rules for Action

	// no validation rules for ResourceRole

	if len(errors) > 0 {
		return ScopeResourceMultiError(errors)
	}

	return nil
}

// ScopeResourceMultiError is an error wrapping multiple validation errors
// returned by ScopeResource.ValidateAll() if the designated constraints
// aren't met.
type ScopeResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeResourceMultiError) AllErrors() []error { return m }

// ScopeResourceValidationError is the validation error returned by
// ScopeResource.Validate if the designated constraints aren't met.
type ScopeResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeResourceValidationError) ErrorName() string { return "ScopeResourceValidationError" }

// Error satisfies the builtin error interface
func (e ScopeResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeResourceValidationError{}

// Validate checks the field values on ScopeRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScopeRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScopeRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScopeRoleMultiError, or nil
// if none found.
func (m *ScopeRole) ValidateAll() error {
	return m.validate(true)
}

func (m *ScopeRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScopeRoleValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScopeRoleValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScopeRoleValidationError{
				field:  "Scope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Access

	if len(errors) > 0 {
		return ScopeRoleMultiError(errors)
	}

	return nil
}

// ScopeRoleMultiError is an error wrapping multiple validation errors returned
// by ScopeRole.ValidateAll() if the designated constraints aren't met.
type ScopeRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeRoleMultiError) AllErrors() []error { return m }

// ScopeRoleValidationError is the validation error returned by
// ScopeRole.Validate if the designated constraints aren't met.
type ScopeRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeRoleValidationError) ErrorName() string { return "ScopeRoleValidationError" }

// Error satisfies the builtin error interface
func (e ScopeRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeRoleValidationError{}

// Validate checks the field values on ScopeRoleAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScopeRoleAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScopeRoleAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScopeRoleAccessRequestMultiError, or nil if none found.
func (m *ScopeRoleAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScopeRoleAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScopeRoleAccessRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScopeRoleAccessRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScopeRoleAccessRequestValidationError{
				field:  "Scope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScopeRoleAccessRequestMultiError(errors)
	}

	return nil
}

// ScopeRoleAccessRequestMultiError is an error wrapping multiple validation
// errors returned by ScopeRoleAccessRequest.ValidateAll() if the designated
// constraints aren't met.
type ScopeRoleAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeRoleAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeRoleAccessRequestMultiError) AllErrors() []error { return m }

// ScopeRoleAccessRequestValidationError is the validation error returned by
// ScopeRoleAccessRequest.Validate if the designated constraints aren't met.
type ScopeRoleAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeRoleAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeRoleAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeRoleAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeRoleAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeRoleAccessRequestValidationError) ErrorName() string {
	return "ScopeRoleAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScopeRoleAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeRoleAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeRoleAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeRoleAccessRequestValidationError{}

// Validate checks the field values on ScopeRoleList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScopeRoleList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScopeRoleList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScopeRoleListMultiError, or
// nil if none found.
func (m *ScopeRoleList) ValidateAll() error {
	return m.validate(true)
}

func (m *ScopeRoleList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScopeRoleListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScopeRoleListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScopeRoleListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ScopeRoleListMultiError(errors)
	}

	return nil
}

// ScopeRoleListMultiError is an error wrapping multiple validation errors
// returned by ScopeRoleList.ValidateAll() if the designated constraints
// aren't met.
type ScopeRoleListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeRoleListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeRoleListMultiError) AllErrors() []error { return m }

// ScopeRoleListValidationError is the validation error returned by
// ScopeRoleList.Validate if the designated constraints aren't met.
type ScopeRoleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeRoleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeRoleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeRoleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeRoleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeRoleListValidationError) ErrorName() string { return "ScopeRoleListValidationError" }

// Error satisfies the builtin error interface
func (e ScopeRoleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeRoleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeRoleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeRoleListValidationError{}

// Validate checks the field values on ScopeRoleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScopeRoleListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScopeRoleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScopeRoleListResponseMultiError, or nil if none found.
func (m *ScopeRoleListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScopeRoleListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScopeRoleListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScopeRoleListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScopeRoleListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScopeRoleListResponseMultiError(errors)
	}

	return nil
}

// ScopeRoleListResponseMultiError is an error wrapping multiple validation
// errors returned by ScopeRoleListResponse.ValidateAll() if the designated
// constraints aren't met.
type ScopeRoleListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScopeRoleListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScopeRoleListResponseMultiError) AllErrors() []error { return m }

// ScopeRoleListResponseValidationError is the validation error returned by
// ScopeRoleListResponse.Validate if the designated constraints aren't met.
type ScopeRoleListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopeRoleListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopeRoleListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopeRoleListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopeRoleListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopeRoleListResponseValidationError) ErrorName() string {
	return "ScopeRoleListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScopeRoleListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopeRoleListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopeRoleListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopeRoleListResponseValidationError{}

// Validate checks the field values on Target with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Target) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Target with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TargetMultiError, or nil if none found.
func (m *Target) ValidateAll() error {
	return m.validate(true)
}

func (m *Target) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Receiver

	// no validation rules for Secret

	if len(errors) > 0 {
		return TargetMultiError(errors)
	}

	return nil
}

// TargetMultiError is an error wrapping multiple validation errors returned by
// Target.ValidateAll() if the designated constraints aren't met.
type TargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetMultiError) AllErrors() []error { return m }

// TargetValidationError is the validation error returned by Target.Validate if
// the designated constraints aren't met.
type TargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetValidationError) ErrorName() string { return "TargetValidationError" }

// Error satisfies the builtin error interface
func (e TargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetValidationError{}

// Validate checks the field values on UpdateApproval with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateApproval) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApproval with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateApprovalMultiError,
// or nil if none found.
func (m *UpdateApproval) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApproval) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	// no validation rules for Reject

	// no validation rules for Reason

	if len(errors) > 0 {
		return UpdateApprovalMultiError(errors)
	}

	return nil
}

// UpdateApprovalMultiError is an error wrapping multiple validation errors
// returned by UpdateApproval.ValidateAll() if the designated constraints
// aren't met.
type UpdateApprovalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApprovalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApprovalMultiError) AllErrors() []error { return m }

// UpdateApprovalValidationError is the validation error returned by
// UpdateApproval.Validate if the designated constraints aren't met.
type UpdateApprovalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApprovalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApprovalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApprovalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApprovalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApprovalValidationError) ErrorName() string { return "UpdateApprovalValidationError" }

// Error satisfies the builtin error interface
func (e UpdateApprovalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApproval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApprovalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApprovalValidationError{}

// Validate checks the field values on UpdateNotifyItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyItemRequestMultiError, or nil if none found.
func (m *UpdateNotifyItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for MobileTemplate

	// no validation rules for NotifyItemID

	if len(errors) > 0 {
		return UpdateNotifyItemRequestMultiError(errors)
	}

	return nil
}

// UpdateNotifyItemRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNotifyItemRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotifyItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyItemRequestMultiError) AllErrors() []error { return m }

// UpdateNotifyItemRequestValidationError is the validation error returned by
// UpdateNotifyItemRequest.Validate if the designated constraints aren't met.
type UpdateNotifyItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyItemRequestValidationError) ErrorName() string {
	return "UpdateNotifyItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyItemRequestValidationError{}

// Validate checks the field values on UpdateNotifyItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyItemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyItemResponseMultiError, or nil if none found.
func (m *UpdateNotifyItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateNotifyItemResponseMultiError(errors)
	}

	return nil
}

// UpdateNotifyItemResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateNotifyItemResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotifyItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyItemResponseMultiError) AllErrors() []error { return m }

// UpdateNotifyItemResponseValidationError is the validation error returned by
// UpdateNotifyItemResponse.Validate if the designated constraints aren't met.
type UpdateNotifyItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyItemResponseValidationError) ErrorName() string {
	return "UpdateNotifyItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyItemResponseValidationError{}

// Validate checks the field values on UpdateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyRequestMultiError, or nil if none found.
func (m *UpdateNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Channels

	// no validation rules for NotifyGroupID

	for idx, item := range m.GetNotifySources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateNotifyRequestValidationError{
						field:  fmt.Sprintf("NotifySources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateNotifyRequestValidationError{
						field:  fmt.Sprintf("NotifySources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNotifyRequestValidationError{
					field:  fmt.Sprintf("NotifySources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for WithGroup

	for idx, item := range m.GetGroupTargets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateNotifyRequestValidationError{
						field:  fmt.Sprintf("GroupTargets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateNotifyRequestValidationError{
						field:  fmt.Sprintf("GroupTargets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNotifyRequestValidationError{
					field:  fmt.Sprintf("GroupTargets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GroupName

	// no validation rules for OrgID

	// no validation rules for NotifyID

	if len(errors) > 0 {
		return UpdateNotifyRequestMultiError(errors)
	}

	return nil
}

// UpdateNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyRequestMultiError) AllErrors() []error { return m }

// UpdateNotifyRequestValidationError is the validation error returned by
// UpdateNotifyRequest.Validate if the designated constraints aren't met.
type UpdateNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyRequestValidationError) ErrorName() string {
	return "UpdateNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyRequestValidationError{}

// Validate checks the field values on UpdateNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyResponseMultiError, or nil if none found.
func (m *UpdateNotifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateNotifyResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateNotifyResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNotifyResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateNotifyResponseMultiError(errors)
	}

	return nil
}

// UpdateNotifyResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateNotifyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyResponseMultiError) AllErrors() []error { return m }

// UpdateNotifyResponseValidationError is the validation error returned by
// UpdateNotifyResponse.Validate if the designated constraints aren't met.
type UpdateNotifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyResponseValidationError) ErrorName() string {
	return "UpdateNotifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyResponseValidationError{}

// Validate checks the field values on UserRoleListResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRoleListResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRoleListResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRoleListResponseDataMultiError, or nil if none found.
func (m *UserRoleListResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRoleListResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserRoleListResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserRoleListResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserRoleListResponseDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return UserRoleListResponseDataMultiError(errors)
	}

	return nil
}

// UserRoleListResponseDataMultiError is an error wrapping multiple validation
// errors returned by UserRoleListResponseData.ValidateAll() if the designated
// constraints aren't met.
type UserRoleListResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRoleListResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRoleListResponseDataMultiError) AllErrors() []error { return m }

// UserRoleListResponseDataValidationError is the validation error returned by
// UserRoleListResponseData.Validate if the designated constraints aren't met.
type UserRoleListResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRoleListResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRoleListResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRoleListResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRoleListResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRoleListResponseDataValidationError) ErrorName() string {
	return "UserRoleListResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e UserRoleListResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRoleListResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRoleListResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRoleListResponseDataValidationError{}

// Validate checks the field values on UserScopeRole with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserScopeRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserScopeRole with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserScopeRoleMultiError, or
// nil if none found.
func (m *UserScopeRole) ValidateAll() error {
	return m.validate(true)
}

func (m *UserScopeRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScopeType

	// no validation rules for ScopeID

	// no validation rules for ScopeName

	if len(errors) > 0 {
		return UserScopeRoleMultiError(errors)
	}

	return nil
}

// UserScopeRoleMultiError is an error wrapping multiple validation errors
// returned by UserScopeRole.ValidateAll() if the designated constraints
// aren't met.
type UserScopeRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserScopeRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserScopeRoleMultiError) AllErrors() []error { return m }

// UserScopeRoleValidationError is the validation error returned by
// UserScopeRole.Validate if the designated constraints aren't met.
type UserScopeRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserScopeRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserScopeRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserScopeRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserScopeRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserScopeRoleValidationError) ErrorName() string { return "UserScopeRoleValidationError" }

// Error satisfies the builtin error interface
func (e UserScopeRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserScopeRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserScopeRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserScopeRoleValidationError{}
