// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: core_services.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApplicationDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 uint64                     `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name               string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName        string                     `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Mode               string                     `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Pined              bool                       `protobuf:"varint,5,opt,name=pined,proto3" json:"pined,omitempty"`
	Desc               string                     `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Logo               string                     `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	Config             map[string]*structpb.Value `protobuf:"bytes,8,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsPublic           bool                       `protobuf:"varint,9,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	Creator            string                     `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
	UnBlockStart       *timestamppb.Timestamp     `protobuf:"bytes,11,opt,name=unBlockStart,proto3,oneof" json:"unBlockStart,omitempty"`
	UnBlockEnd         *timestamppb.Timestamp     `protobuf:"bytes,12,opt,name=unBlockEnd,proto3,oneof" json:"unBlockEnd,omitempty"`
	BlockStatus        string                     `protobuf:"bytes,13,opt,name=blockStatus,proto3" json:"blockStatus,omitempty"`
	Stats              *structpb.Value            `protobuf:"bytes,14,opt,name=stats,proto3" json:"stats,omitempty"`
	GitRepo            string                     `protobuf:"bytes,15,opt,name=gitRepo,proto3" json:"gitRepo,omitempty"`
	GitRepoAbbrev      string                     `protobuf:"bytes,16,opt,name=gitRepoAbbrev,proto3" json:"gitRepoAbbrev,omitempty"`
	GitRepoNew         string                     `protobuf:"bytes,17,opt,name=gitRepoNew,proto3" json:"gitRepoNew,omitempty"`
	Token              string                     `protobuf:"bytes,18,opt,name=token,proto3" json:"token,omitempty"`
	OrgID              uint64                     `protobuf:"varint,19,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	OrgName            string                     `protobuf:"bytes,20,opt,name=orgName,proto3" json:"orgName,omitempty"`
	OrgDisplayName     string                     `protobuf:"bytes,21,opt,name=orgDisplayName,proto3" json:"orgDisplayName,omitempty"`
	ProjectID          uint64                     `protobuf:"varint,22,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	ProjectName        string                     `protobuf:"bytes,23,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ProjectDisplayName string                     `protobuf:"bytes,24,opt,name=projectDisplayName,proto3" json:"projectDisplayName,omitempty"`
	Workspaces         []*structpb.Value          `protobuf:"bytes,25,rep,name=workspaces,proto3" json:"workspaces,omitempty"`
	IsExternalRepo     bool                       `protobuf:"varint,26,opt,name=isExternalRepo,proto3" json:"isExternalRepo,omitempty"`
	RepoConfig         *structpb.Value            `protobuf:"bytes,27,opt,name=repoConfig,proto3,oneof" json:"repoConfig,omitempty"`
	SonarConfig        *structpb.Value            `protobuf:"bytes,28,opt,name=sonarConfig,proto3,oneof" json:"sonarConfig,omitempty"`
	MemberRoles        []string                   `protobuf:"bytes,29,rep,name=memberRoles,proto3" json:"memberRoles,omitempty"`
	CreatedAt          *timestamppb.Timestamp     `protobuf:"bytes,30,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp     `protobuf:"bytes,31,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Extra              string                     `protobuf:"bytes,32,opt,name=extra,json=-,proto3" json:"extra,omitempty"`
}

func (x *ApplicationDTO) Reset() {
	*x = ApplicationDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationDTO) ProtoMessage() {}

func (x *ApplicationDTO) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationDTO.ProtoReflect.Descriptor instead.
func (*ApplicationDTO) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{0}
}

func (x *ApplicationDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ApplicationDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationDTO) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApplicationDTO) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ApplicationDTO) GetPined() bool {
	if x != nil {
		return x.Pined
	}
	return false
}

func (x *ApplicationDTO) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ApplicationDTO) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ApplicationDTO) GetConfig() map[string]*structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ApplicationDTO) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ApplicationDTO) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ApplicationDTO) GetUnBlockStart() *timestamppb.Timestamp {
	if x != nil {
		return x.UnBlockStart
	}
	return nil
}

func (x *ApplicationDTO) GetUnBlockEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.UnBlockEnd
	}
	return nil
}

func (x *ApplicationDTO) GetBlockStatus() string {
	if x != nil {
		return x.BlockStatus
	}
	return ""
}

func (x *ApplicationDTO) GetStats() *structpb.Value {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ApplicationDTO) GetGitRepo() string {
	if x != nil {
		return x.GitRepo
	}
	return ""
}

func (x *ApplicationDTO) GetGitRepoAbbrev() string {
	if x != nil {
		return x.GitRepoAbbrev
	}
	return ""
}

func (x *ApplicationDTO) GetGitRepoNew() string {
	if x != nil {
		return x.GitRepoNew
	}
	return ""
}

func (x *ApplicationDTO) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ApplicationDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ApplicationDTO) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *ApplicationDTO) GetOrgDisplayName() string {
	if x != nil {
		return x.OrgDisplayName
	}
	return ""
}

func (x *ApplicationDTO) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ApplicationDTO) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ApplicationDTO) GetProjectDisplayName() string {
	if x != nil {
		return x.ProjectDisplayName
	}
	return ""
}

func (x *ApplicationDTO) GetWorkspaces() []*structpb.Value {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *ApplicationDTO) GetIsExternalRepo() bool {
	if x != nil {
		return x.IsExternalRepo
	}
	return false
}

func (x *ApplicationDTO) GetRepoConfig() *structpb.Value {
	if x != nil {
		return x.RepoConfig
	}
	return nil
}

func (x *ApplicationDTO) GetSonarConfig() *structpb.Value {
	if x != nil {
		return x.SonarConfig
	}
	return nil
}

func (x *ApplicationDTO) GetMemberRoles() []string {
	if x != nil {
		return x.MemberRoles
	}
	return nil
}

func (x *ApplicationDTO) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ApplicationDTO) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ApplicationDTO) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type ApplicationFetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationIDOrName string `protobuf:"bytes,1,opt,name=applicationIDOrName,json=applicationIdOrName,proto3" json:"applicationIDOrName,omitempty"`
	ProjectID           string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *ApplicationFetchRequest) Reset() {
	*x = ApplicationFetchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationFetchRequest) ProtoMessage() {}

func (x *ApplicationFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationFetchRequest.ProtoReflect.Descriptor instead.
func (*ApplicationFetchRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{1}
}

func (x *ApplicationFetchRequest) GetApplicationIDOrName() string {
	if x != nil {
		return x.ApplicationIDOrName
	}
	return ""
}

func (x *ApplicationFetchRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type ApplicationFetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ApplicationFetchResponse) Reset() {
	*x = ApplicationFetchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationFetchResponse) ProtoMessage() {}

func (x *ApplicationFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationFetchResponse.ProtoReflect.Descriptor instead.
func (*ApplicationFetchResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{2}
}

func (x *ApplicationFetchResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApplicationListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID     uint64   `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Mode          string   `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Query         string   `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Name          string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	PageNo        int64    `protobuf:"varint,5,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize      int64    `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Public        string   `protobuf:"bytes,7,opt,name=public,proto3" json:"public,omitempty"`
	OrderBy       string   `protobuf:"bytes,8,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	ApplicationID []uint64 `protobuf:"varint,9,rep,packed,name=applicationID,proto3" json:"applicationID,omitempty"`
	IsSimple      bool     `protobuf:"varint,10,opt,name=isSimple,proto3" json:"isSimple,omitempty"`
}

func (x *ApplicationListRequest) Reset() {
	*x = ApplicationListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationListRequest) ProtoMessage() {}

func (x *ApplicationListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationListRequest.ProtoReflect.Descriptor instead.
func (*ApplicationListRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{3}
}

func (x *ApplicationListRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ApplicationListRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ApplicationListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ApplicationListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationListRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ApplicationListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ApplicationListRequest) GetPublic() string {
	if x != nil {
		return x.Public
	}
	return ""
}

func (x *ApplicationListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ApplicationListRequest) GetApplicationID() []uint64 {
	if x != nil {
		return x.ApplicationID
	}
	return nil
}

func (x *ApplicationListRequest) GetIsSimple() bool {
	if x != nil {
		return x.IsSimple
	}
	return false
}

type ApplicationListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ApplicationListResponse) Reset() {
	*x = ApplicationListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationListResponse) ProtoMessage() {}

func (x *ApplicationListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationListResponse.ProtoReflect.Descriptor instead.
func (*ApplicationListResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{4}
}

func (x *ApplicationListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApplicationListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ApplicationListResponseData) Reset() {
	*x = ApplicationListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationListResponseData) ProtoMessage() {}

func (x *ApplicationListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationListResponseData.ProtoReflect.Descriptor instead.
func (*ApplicationListResponseData) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{5}
}

func (x *ApplicationListResponseData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ApplicationListResponseData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type ApplicationStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountRuntimes    uint64 `protobuf:"varint,1,opt,name=countRuntimes,proto3" json:"countRuntimes,omitempty"`
	CountMembers     uint64 `protobuf:"varint,2,opt,name=countMembers,proto3" json:"countMembers,omitempty"`
	TimeLastModified string `protobuf:"bytes,3,opt,name=timeLastModified,proto3" json:"timeLastModified,omitempty"`
}

func (x *ApplicationStats) Reset() {
	*x = ApplicationStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationStats) ProtoMessage() {}

func (x *ApplicationStats) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationStats.ProtoReflect.Descriptor instead.
func (*ApplicationStats) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{6}
}

func (x *ApplicationStats) GetCountRuntimes() uint64 {
	if x != nil {
		return x.CountRuntimes
	}
	return 0
}

func (x *ApplicationStats) GetCountMembers() uint64 {
	if x != nil {
		return x.CountMembers
	}
	return 0
}

func (x *ApplicationStats) GetTimeLastModified() string {
	if x != nil {
		return x.TimeLastModified
	}
	return ""
}

type ApplicationWorkspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName     string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Workspace       string `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	ConfigNamespace string `protobuf:"bytes,3,opt,name=configNamespace,proto3" json:"configNamespace,omitempty"`
}

func (x *ApplicationWorkspace) Reset() {
	*x = ApplicationWorkspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationWorkspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationWorkspace) ProtoMessage() {}

func (x *ApplicationWorkspace) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationWorkspace.ProtoReflect.Descriptor instead.
func (*ApplicationWorkspace) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{7}
}

func (x *ApplicationWorkspace) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ApplicationWorkspace) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *ApplicationWorkspace) GetConfigNamespace() string {
	if x != nil {
		return x.ConfigNamespace
	}
	return ""
}

type ApproveCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID      uint64            `protobuf:"varint,1,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	TargetID   uint64            `protobuf:"varint,2,opt,name=targetID,json=targetId,proto3" json:"targetID,omitempty"`
	EntityID   uint64            `protobuf:"varint,3,opt,name=entityID,json=entityId,proto3" json:"entityID,omitempty"`
	TargetName string            `protobuf:"bytes,4,opt,name=targetName,proto3" json:"targetName,omitempty"`
	Type       string            `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Extra      map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Title      string            `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Priority   string            `protobuf:"bytes,8,opt,name=priority,proto3" json:"priority,omitempty"`
	Desc       string            `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ApproveCreateRequest) Reset() {
	*x = ApproveCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveCreateRequest) ProtoMessage() {}

func (x *ApproveCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveCreateRequest.ProtoReflect.Descriptor instead.
func (*ApproveCreateRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{8}
}

func (x *ApproveCreateRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ApproveCreateRequest) GetTargetID() uint64 {
	if x != nil {
		return x.TargetID
	}
	return 0
}

func (x *ApproveCreateRequest) GetEntityID() uint64 {
	if x != nil {
		return x.EntityID
	}
	return 0
}

func (x *ApproveCreateRequest) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *ApproveCreateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApproveCreateRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *ApproveCreateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ApproveCreateRequest) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ApproveCreateRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type ApproveCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ApproveCreateResponse) Reset() {
	*x = ApproveCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveCreateResponse) ProtoMessage() {}

func (x *ApproveCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveCreateResponse.ProtoReflect.Descriptor instead.
func (*ApproveCreateResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{9}
}

func (x *ApproveCreateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApproveDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	OrgID        uint64                 `protobuf:"varint,2,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	EntityID     uint64                 `protobuf:"varint,3,opt,name=entityID,json=entityId,proto3" json:"entityID,omitempty"`
	TargetID     uint64                 `protobuf:"varint,4,opt,name=targetID,json=targetId,proto3" json:"targetID,omitempty"`
	TargetName   string                 `protobuf:"bytes,5,opt,name=targetName,proto3" json:"targetName,omitempty"`
	Type         string                 `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Extra        map[string]string      `protobuf:"bytes,7,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Title        string                 `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Priority     string                 `protobuf:"bytes,9,opt,name=priority,proto3" json:"priority,omitempty"`
	Desc         string                 `protobuf:"bytes,10,opt,name=desc,proto3" json:"desc,omitempty"`
	Status       string                 `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Submitter    string                 `protobuf:"bytes,12,opt,name=submitter,proto3" json:"submitter,omitempty"`
	Approver     string                 `protobuf:"bytes,13,opt,name=approver,proto3" json:"approver,omitempty"`
	ApprovalTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=approvalTime,proto3,oneof" json:"approvalTime,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *ApproveDTO) Reset() {
	*x = ApproveDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveDTO) ProtoMessage() {}

func (x *ApproveDTO) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveDTO.ProtoReflect.Descriptor instead.
func (*ApproveDTO) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{10}
}

func (x *ApproveDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ApproveDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ApproveDTO) GetEntityID() uint64 {
	if x != nil {
		return x.EntityID
	}
	return 0
}

func (x *ApproveDTO) GetTargetID() uint64 {
	if x != nil {
		return x.TargetID
	}
	return 0
}

func (x *ApproveDTO) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *ApproveDTO) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApproveDTO) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *ApproveDTO) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ApproveDTO) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ApproveDTO) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ApproveDTO) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApproveDTO) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

func (x *ApproveDTO) GetApprover() string {
	if x != nil {
		return x.Approver
	}
	return ""
}

func (x *ApproveDTO) GetApprovalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovalTime
	}
	return nil
}

func (x *ApproveDTO) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ApproveDTO) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type AuditListCleanCronRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID uint64 `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
}

func (x *AuditListCleanCronRequest) Reset() {
	*x = AuditListCleanCronRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditListCleanCronRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditListCleanCronRequest) ProtoMessage() {}

func (x *AuditListCleanCronRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditListCleanCronRequest.ProtoReflect.Descriptor instead.
func (*AuditListCleanCronRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{11}
}

func (x *AuditListCleanCronRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

type AuditListCleanCronResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *AuditListCleanCronResponse) Reset() {
	*x = AuditListCleanCronResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditListCleanCronResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditListCleanCronResponse) ProtoMessage() {}

func (x *AuditListCleanCronResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditListCleanCronResponse.ProtoReflect.Descriptor instead.
func (*AuditListCleanCronResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{12}
}

func (x *AuditListCleanCronResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type AuditSetCleanCronRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID    uint64 `protobuf:"varint,1,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	Interval uint64 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *AuditSetCleanCronRequest) Reset() {
	*x = AuditSetCleanCronRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditSetCleanCronRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditSetCleanCronRequest) ProtoMessage() {}

func (x *AuditSetCleanCronRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditSetCleanCronRequest.ProtoReflect.Descriptor instead.
func (*AuditSetCleanCronRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{13}
}

func (x *AuditSetCleanCronRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *AuditSetCleanCronRequest) GetInterval() uint64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type AuditSetCleanCronResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AuditSetCleanCronResponse) Reset() {
	*x = AuditSetCleanCronResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditSetCleanCronResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditSetCleanCronResponse) ProtoMessage() {}

func (x *AuditSetCleanCronResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditSetCleanCronResponse.ProtoReflect.Descriptor instead.
func (*AuditSetCleanCronResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{14}
}

func (x *AuditSetCleanCronResponse) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type CMDB_APPLICATION_PIN_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string `protobuf:"bytes,1,opt,name=applicationId,proto3" json:"applicationId,omitempty"` // generated from path variable: applicationId. You should change the proto type if necessary.
}

func (x *CMDB_APPLICATION_PIN_Request) Reset() {
	*x = CMDB_APPLICATION_PIN_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_APPLICATION_PIN_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_APPLICATION_PIN_Request) ProtoMessage() {}

func (x *CMDB_APPLICATION_PIN_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_APPLICATION_PIN_Request.ProtoReflect.Descriptor instead.
func (*CMDB_APPLICATION_PIN_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{15}
}

func (x *CMDB_APPLICATION_PIN_Request) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

type CMDB_APPLICATION_UNPIN_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string `protobuf:"bytes,1,opt,name=applicationId,proto3" json:"applicationId,omitempty"` // generated from path variable: applicationId. You should change the proto type if necessary.
}

func (x *CMDB_APPLICATION_UNPIN_Request) Reset() {
	*x = CMDB_APPLICATION_UNPIN_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_APPLICATION_UNPIN_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_APPLICATION_UNPIN_Request) ProtoMessage() {}

func (x *CMDB_APPLICATION_UNPIN_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_APPLICATION_UNPIN_Request.ProtoReflect.Descriptor instead.
func (*CMDB_APPLICATION_UNPIN_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{16}
}

func (x *CMDB_APPLICATION_UNPIN_Request) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

type CMDB_APP_LIST_TEMPLATES_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_APP_LIST_TEMPLATES_Request) Reset() {
	*x = CMDB_APP_LIST_TEMPLATES_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_APP_LIST_TEMPLATES_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_APP_LIST_TEMPLATES_Request) ProtoMessage() {}

func (x *CMDB_APP_LIST_TEMPLATES_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_APP_LIST_TEMPLATES_Request.ProtoReflect.Descriptor instead.
func (*CMDB_APP_LIST_TEMPLATES_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{17}
}

type CMDB_IMAGE_FETCH_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName string `protobuf:"bytes,1,opt,name=imageName,proto3" json:"imageName,omitempty"` // generated from path variable: imageName. You should change the proto type if necessary.
}

func (x *CMDB_IMAGE_FETCH_Request) Reset() {
	*x = CMDB_IMAGE_FETCH_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_IMAGE_FETCH_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_IMAGE_FETCH_Request) ProtoMessage() {}

func (x *CMDB_IMAGE_FETCH_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_IMAGE_FETCH_Request.ProtoReflect.Descriptor instead.
func (*CMDB_IMAGE_FETCH_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{18}
}

func (x *CMDB_IMAGE_FETCH_Request) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

type CMDB_IMAGE_UPLOAD_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_IMAGE_UPLOAD_Request) Reset() {
	*x = CMDB_IMAGE_UPLOAD_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_IMAGE_UPLOAD_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_IMAGE_UPLOAD_Request) ProtoMessage() {}

func (x *CMDB_IMAGE_UPLOAD_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_IMAGE_UPLOAD_Request.ProtoReflect.Descriptor instead.
func (*CMDB_IMAGE_UPLOAD_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{19}
}

type CMDB_LABEL_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *CMDB_LABEL_DELETE_Request) Reset() {
	*x = CMDB_LABEL_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_LABEL_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_LABEL_DELETE_Request) ProtoMessage() {}

func (x *CMDB_LABEL_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_LABEL_DELETE_Request.ProtoReflect.Descriptor instead.
func (*CMDB_LABEL_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{20}
}

func (x *CMDB_LABEL_DELETE_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CMDB_LICENSE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_LICENSE_Request) Reset() {
	*x = CMDB_LICENSE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_LICENSE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_LICENSE_Request) ProtoMessage() {}

func (x *CMDB_LICENSE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_LICENSE_Request.ProtoReflect.Descriptor instead.
func (*CMDB_LICENSE_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{21}
}

type CMDB_MANUAL_REVIEW_ADD_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_MANUAL_REVIEW_ADD_Request) Reset() {
	*x = CMDB_MANUAL_REVIEW_ADD_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_MANUAL_REVIEW_ADD_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_MANUAL_REVIEW_ADD_Request) ProtoMessage() {}

func (x *CMDB_MANUAL_REVIEW_ADD_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_MANUAL_REVIEW_ADD_Request.ProtoReflect.Descriptor instead.
func (*CMDB_MANUAL_REVIEW_ADD_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{22}
}

type CMDB_MBOX_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MboxID string `protobuf:"bytes,1,opt,name=mboxID,proto3" json:"mboxID,omitempty"` // generated from path variable: mboxID. You should change the proto type if necessary.
}

func (x *CMDB_MBOX_GET_Request) Reset() {
	*x = CMDB_MBOX_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_MBOX_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_MBOX_GET_Request) ProtoMessage() {}

func (x *CMDB_MBOX_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_MBOX_GET_Request.ProtoReflect.Descriptor instead.
func (*CMDB_MBOX_GET_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{23}
}

func (x *CMDB_MBOX_GET_Request) GetMboxID() string {
	if x != nil {
		return x.MboxID
	}
	return ""
}

type CMDB_MBOX_READ_ALL_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_MBOX_READ_ALL_Request) Reset() {
	*x = CMDB_MBOX_READ_ALL_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_MBOX_READ_ALL_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_MBOX_READ_ALL_Request) ProtoMessage() {}

func (x *CMDB_MBOX_READ_ALL_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_MBOX_READ_ALL_Request.ProtoReflect.Descriptor instead.
func (*CMDB_MBOX_READ_ALL_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{24}
}

type CMDB_MBOX_STATS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_MBOX_STATS_Request) Reset() {
	*x = CMDB_MBOX_STATS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_MBOX_STATS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_MBOX_STATS_Request) ProtoMessage() {}

func (x *CMDB_MBOX_STATS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_MBOX_STATS_Request.ProtoReflect.Descriptor instead.
func (*CMDB_MBOX_STATS_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{25}
}

type CMDB_MEMBER_LABEL_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_MEMBER_LABEL_LIST_Request) Reset() {
	*x = CMDB_MEMBER_LABEL_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_MEMBER_LABEL_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_MEMBER_LABEL_LIST_Request) ProtoMessage() {}

func (x *CMDB_MEMBER_LABEL_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_MEMBER_LABEL_LIST_Request.ProtoReflect.Descriptor instead.
func (*CMDB_MEMBER_LABEL_LIST_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{26}
}

type CMDB_NOTIFY_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyID string `protobuf:"bytes,1,opt,name=notifyID,proto3" json:"notifyID,omitempty"` // generated from path variable: notifyID. You should change the proto type if necessary.
}

func (x *CMDB_NOTIFY_DELETE_Request) Reset() {
	*x = CMDB_NOTIFY_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_NOTIFY_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_NOTIFY_DELETE_Request) ProtoMessage() {}

func (x *CMDB_NOTIFY_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_NOTIFY_DELETE_Request.ProtoReflect.Descriptor instead.
func (*CMDB_NOTIFY_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{27}
}

func (x *CMDB_NOTIFY_DELETE_Request) GetNotifyID() string {
	if x != nil {
		return x.NotifyID
	}
	return ""
}

type CMDB_NOTIFY_DISABLE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyID string `protobuf:"bytes,1,opt,name=notifyID,proto3" json:"notifyID,omitempty"` // generated from path variable: notifyID. You should change the proto type if necessary.
}

func (x *CMDB_NOTIFY_DISABLE_Request) Reset() {
	*x = CMDB_NOTIFY_DISABLE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_NOTIFY_DISABLE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_NOTIFY_DISABLE_Request) ProtoMessage() {}

func (x *CMDB_NOTIFY_DISABLE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_NOTIFY_DISABLE_Request.ProtoReflect.Descriptor instead.
func (*CMDB_NOTIFY_DISABLE_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{28}
}

func (x *CMDB_NOTIFY_DISABLE_Request) GetNotifyID() string {
	if x != nil {
		return x.NotifyID
	}
	return ""
}

type CMDB_NOTIFY_ENABLE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyID string `protobuf:"bytes,1,opt,name=notifyID,proto3" json:"notifyID,omitempty"` // generated from path variable: notifyID. You should change the proto type if necessary.
}

func (x *CMDB_NOTIFY_ENABLE_Request) Reset() {
	*x = CMDB_NOTIFY_ENABLE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_NOTIFY_ENABLE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_NOTIFY_ENABLE_Request) ProtoMessage() {}

func (x *CMDB_NOTIFY_ENABLE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_NOTIFY_ENABLE_Request.ProtoReflect.Descriptor instead.
func (*CMDB_NOTIFY_ENABLE_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{29}
}

func (x *CMDB_NOTIFY_ENABLE_Request) GetNotifyID() string {
	if x != nil {
		return x.NotifyID
	}
	return ""
}

type CMDB_NOTIFY_FUZZY_QUERY_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_NOTIFY_FUZZY_QUERY_Request) Reset() {
	*x = CMDB_NOTIFY_FUZZY_QUERY_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_NOTIFY_FUZZY_QUERY_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_NOTIFY_FUZZY_QUERY_Request) ProtoMessage() {}

func (x *CMDB_NOTIFY_FUZZY_QUERY_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_NOTIFY_FUZZY_QUERY_Request.ProtoReflect.Descriptor instead.
func (*CMDB_NOTIFY_FUZZY_QUERY_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{30}
}

type CMDB_NOTIFY_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyID string `protobuf:"bytes,1,opt,name=notifyID,proto3" json:"notifyID,omitempty"` // generated from path variable: notifyID. You should change the proto type if necessary.
}

func (x *CMDB_NOTIFY_GET_Request) Reset() {
	*x = CMDB_NOTIFY_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_NOTIFY_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_NOTIFY_GET_Request) ProtoMessage() {}

func (x *CMDB_NOTIFY_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_NOTIFY_GET_Request.ProtoReflect.Descriptor instead.
func (*CMDB_NOTIFY_GET_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{31}
}

func (x *CMDB_NOTIFY_GET_Request) GetNotifyID() string {
	if x != nil {
		return x.NotifyID
	}
	return ""
}

type CMDB_PERMISSION_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_PERMISSION_LIST_Request) Reset() {
	*x = CMDB_PERMISSION_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_PERMISSION_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_PERMISSION_LIST_Request) ProtoMessage() {}

func (x *CMDB_PERMISSION_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_PERMISSION_LIST_Request.ProtoReflect.Descriptor instead.
func (*CMDB_PERMISSION_LIST_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{32}
}

type CMDB_PROJECT_FUNCTIONS_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_PROJECT_FUNCTIONS_GET_Request) Reset() {
	*x = CMDB_PROJECT_FUNCTIONS_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_PROJECT_FUNCTIONS_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_PROJECT_FUNCTIONS_GET_Request) ProtoMessage() {}

func (x *CMDB_PROJECT_FUNCTIONS_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_PROJECT_FUNCTIONS_GET_Request.ProtoReflect.Descriptor instead.
func (*CMDB_PROJECT_FUNCTIONS_GET_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{33}
}

type CMDB_PROJECT_GET_NSINFO_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"` // generated from path variable: projectID. You should change the proto type if necessary.
}

func (x *CMDB_PROJECT_GET_NSINFO_Request) Reset() {
	*x = CMDB_PROJECT_GET_NSINFO_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_PROJECT_GET_NSINFO_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_PROJECT_GET_NSINFO_Request) ProtoMessage() {}

func (x *CMDB_PROJECT_GET_NSINFO_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_PROJECT_GET_NSINFO_Request.ProtoReflect.Descriptor instead.
func (*CMDB_PROJECT_GET_NSINFO_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{34}
}

func (x *CMDB_PROJECT_GET_NSINFO_Request) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type CMDB_PROJECT_METRICS_HISTOGRAM_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string `protobuf:"bytes,1,opt,name=resourceType,proto3" json:"resourceType,omitempty"` // generated from path variable: resourceType. You should change the proto type if necessary.
}

func (x *CMDB_PROJECT_METRICS_HISTOGRAM_Request) Reset() {
	*x = CMDB_PROJECT_METRICS_HISTOGRAM_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_PROJECT_METRICS_HISTOGRAM_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_PROJECT_METRICS_HISTOGRAM_Request) ProtoMessage() {}

func (x *CMDB_PROJECT_METRICS_HISTOGRAM_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_PROJECT_METRICS_HISTOGRAM_Request.ProtoReflect.Descriptor instead.
func (*CMDB_PROJECT_METRICS_HISTOGRAM_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{35}
}

func (x *CMDB_PROJECT_METRICS_HISTOGRAM_Request) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

type CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request) Reset() {
	*x = CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request) ProtoMessage() {}

func (x *CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request.ProtoReflect.Descriptor instead.
func (*CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{36}
}

type CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"` // generated from path variable: projectID. You should change the proto type if necessary.
	Workspace string `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"` // generated from path variable: workspace. You should change the proto type if necessary.
}

func (x *CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request) Reset() {
	*x = CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request) ProtoMessage() {}

func (x *CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request.ProtoReflect.Descriptor instead.
func (*CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{37}
}

func (x *CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

type CreateNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ScopeType     string            `protobuf:"bytes,2,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeID       string            `protobuf:"bytes,3,opt,name=scopeID,json=scopeId,proto3" json:"scopeID,omitempty"`
	Enabled       bool              `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Channels      string            `protobuf:"bytes,5,opt,name=channels,proto3" json:"channels,omitempty"`
	NotifyGroupID int64             `protobuf:"varint,6,opt,name=notifyGroupID,json=notifyGroupId,proto3" json:"notifyGroupID,omitempty"`
	NotifyItemIDs []int64           `protobuf:"varint,7,rep,packed,name=notifyItemIDs,json=notifyItemIds,proto3" json:"notifyItemIDs,omitempty"`
	WithGroup     bool              `protobuf:"varint,8,opt,name=withGroup,proto3" json:"withGroup,omitempty"`
	GroupTargets  []*structpb.Value `protobuf:"bytes,9,rep,name=groupTargets,proto3" json:"groupTargets,omitempty"`
	Label         string            `protobuf:"bytes,10,opt,name=label,proto3" json:"label,omitempty"`
	ClusterName   string            `protobuf:"bytes,11,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	NotifySources []*structpb.Value `protobuf:"bytes,12,rep,name=notifySources,proto3" json:"notifySources,omitempty"`
	WorkSpace     string            `protobuf:"bytes,13,opt,name=workSpace,json=workspace,proto3" json:"workSpace,omitempty"`
	Creator       string            `protobuf:"bytes,14,opt,name=creator,json=-,proto3" json:"creator,omitempty"`
	OrgID         int64             `protobuf:"varint,15,opt,name=orgID,json=-,proto3" json:"orgID,omitempty"`
}

func (x *CreateNotifyRequest) Reset() {
	*x = CreateNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifyRequest) ProtoMessage() {}

func (x *CreateNotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifyRequest.ProtoReflect.Descriptor instead.
func (*CreateNotifyRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{38}
}

func (x *CreateNotifyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNotifyRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *CreateNotifyRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *CreateNotifyRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CreateNotifyRequest) GetChannels() string {
	if x != nil {
		return x.Channels
	}
	return ""
}

func (x *CreateNotifyRequest) GetNotifyGroupID() int64 {
	if x != nil {
		return x.NotifyGroupID
	}
	return 0
}

func (x *CreateNotifyRequest) GetNotifyItemIDs() []int64 {
	if x != nil {
		return x.NotifyItemIDs
	}
	return nil
}

func (x *CreateNotifyRequest) GetWithGroup() bool {
	if x != nil {
		return x.WithGroup
	}
	return false
}

func (x *CreateNotifyRequest) GetGroupTargets() []*structpb.Value {
	if x != nil {
		return x.GroupTargets
	}
	return nil
}

func (x *CreateNotifyRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CreateNotifyRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateNotifyRequest) GetNotifySources() []*structpb.Value {
	if x != nil {
		return x.NotifySources
	}
	return nil
}

func (x *CreateNotifyRequest) GetWorkSpace() string {
	if x != nil {
		return x.WorkSpace
	}
	return ""
}

func (x *CreateNotifyRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CreateNotifyRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

type CreateNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *CreateNotifyResponse) Reset() {
	*x = CreateNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifyResponse) ProtoMessage() {}

func (x *CreateNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifyResponse.ProtoReflect.Descriptor instead.
func (*CreateNotifyResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{39}
}

func (x *CreateNotifyResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateReviewUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId     int64                  `protobuf:"varint,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Operator  string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	TaskId    int64                  `protobuf:"varint,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *CreateReviewUser) Reset() {
	*x = CreateReviewUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReviewUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReviewUser) ProtoMessage() {}

func (x *CreateReviewUser) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReviewUser.ProtoReflect.Descriptor instead.
func (*CreateReviewUser) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{40}
}

func (x *CreateReviewUser) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *CreateReviewUser) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *CreateReviewUser) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *CreateReviewUser) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type DeleteNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *DeleteNotifyResponse) Reset() {
	*x = DeleteNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNotifyResponse) ProtoMessage() {}

func (x *DeleteNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNotifyResponse.ProtoReflect.Descriptor instead.
func (*DeleteNotifyResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteNotifyResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type DereferenceClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	OrgID   int64  `protobuf:"varint,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
}

func (x *DereferenceClusterRequest) Reset() {
	*x = DereferenceClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DereferenceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DereferenceClusterRequest) ProtoMessage() {}

func (x *DereferenceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DereferenceClusterRequest.ProtoReflect.Descriptor instead.
func (*DereferenceClusterRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{42}
}

func (x *DereferenceClusterRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *DereferenceClusterRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

type DereferenceClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DereferenceClusterResponse) Reset() {
	*x = DereferenceClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DereferenceClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DereferenceClusterResponse) ProtoMessage() {}

func (x *DereferenceClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DereferenceClusterResponse.ProtoReflect.Descriptor instead.
func (*DereferenceClusterResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{43}
}

func (x *DereferenceClusterResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type EVENTBOX_WEBSOCKET_INFO_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EVENTBOX_WEBSOCKET_INFO_Request) Reset() {
	*x = EVENTBOX_WEBSOCKET_INFO_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVENTBOX_WEBSOCKET_INFO_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVENTBOX_WEBSOCKET_INFO_Request) ProtoMessage() {}

func (x *EVENTBOX_WEBSOCKET_INFO_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVENTBOX_WEBSOCKET_INFO_Request.ProtoReflect.Descriptor instead.
func (*EVENTBOX_WEBSOCKET_INFO_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{44}
}

type EVENTBOX_WEBSOCKET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"` // generated from path variable: a. You should change the proto type if necessary.
	B string `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"` // generated from path variable: b. You should change the proto type if necessary.
}

func (x *EVENTBOX_WEBSOCKET_Request) Reset() {
	*x = EVENTBOX_WEBSOCKET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVENTBOX_WEBSOCKET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVENTBOX_WEBSOCKET_Request) ProtoMessage() {}

func (x *EVENTBOX_WEBSOCKET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVENTBOX_WEBSOCKET_Request.ProtoReflect.Descriptor instead.
func (*EVENTBOX_WEBSOCKET_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{45}
}

func (x *EVENTBOX_WEBSOCKET_Request) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *EVENTBOX_WEBSOCKET_Request) GetB() string {
	if x != nil {
		return x.B
	}
	return ""
}

type ErrorLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             int64  `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Level          string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	ResourceType   string `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ResourceID     string `protobuf:"bytes,4,opt,name=resourceID,json=resourceId,proto3" json:"resourceID,omitempty"`
	OccurrenceTime string `protobuf:"bytes,5,opt,name=occurrenceTime,proto3" json:"occurrenceTime,omitempty"`
	HumanLog       string `protobuf:"bytes,6,opt,name=humanLog,proto3" json:"humanLog,omitempty"`
	PrimevalLog    string `protobuf:"bytes,7,opt,name=primevalLog,proto3" json:"primevalLog,omitempty"`
	DedupID        string `protobuf:"bytes,8,opt,name=dedupID,json=deDupId,proto3" json:"dedupID,omitempty"`
}

func (x *ErrorLog) Reset() {
	*x = ErrorLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorLog) ProtoMessage() {}

func (x *ErrorLog) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorLog.ProtoReflect.Descriptor instead.
func (*ErrorLog) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{46}
}

func (x *ErrorLog) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ErrorLog) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *ErrorLog) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ErrorLog) GetResourceID() string {
	if x != nil {
		return x.ResourceID
	}
	return ""
}

func (x *ErrorLog) GetOccurrenceTime() string {
	if x != nil {
		return x.OccurrenceTime
	}
	return ""
}

func (x *ErrorLog) GetHumanLog() string {
	if x != nil {
		return x.HumanLog
	}
	return ""
}

func (x *ErrorLog) GetPrimevalLog() string {
	if x != nil {
		return x.PrimevalLog
	}
	return ""
}

func (x *ErrorLog) GetDedupID() string {
	if x != nil {
		return x.DedupID
	}
	return ""
}

type ErrorLogCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorLog *structpb.Value `protobuf:"bytes,1,opt,name=errorLog,proto3" json:"errorLog,omitempty"`
}

func (x *ErrorLogCreateRequest) Reset() {
	*x = ErrorLogCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorLogCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorLogCreateRequest) ProtoMessage() {}

func (x *ErrorLogCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorLogCreateRequest.ProtoReflect.Descriptor instead.
func (*ErrorLogCreateRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{47}
}

func (x *ErrorLogCreateRequest) GetErrorLog() *structpb.Value {
	if x != nil {
		return x.ErrorLog
	}
	return nil
}

type ErrorLogCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ErrorLogCreateResponse) Reset() {
	*x = ErrorLogCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorLogCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorLogCreateResponse) ProtoMessage() {}

func (x *ErrorLogCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorLogCreateResponse.ProtoReflect.Descriptor instead.
func (*ErrorLogCreateResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{48}
}

func (x *ErrorLogCreateResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type GetAuthorityByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator int64 `protobuf:"varint,1,opt,name=operator,proto3" json:"operator,omitempty"`
	OrgId    int64 `protobuf:"varint,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	TaskId   int64 `protobuf:"varint,3,opt,name=taskId,json=TaskId,proto3" json:"taskId,omitempty"`
}

func (x *GetAuthorityByUserIdRequest) Reset() {
	*x = GetAuthorityByUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorityByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorityByUserIdRequest) ProtoMessage() {}

func (x *GetAuthorityByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorityByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetAuthorityByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{49}
}

func (x *GetAuthorityByUserIdRequest) GetOperator() int64 {
	if x != nil {
		return x.Operator
	}
	return 0
}

func (x *GetAuthorityByUserIdRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GetAuthorityByUserIdRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

type GetAuthorityByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (x *GetAuthorityByUserIdResponse) Reset() {
	*x = GetAuthorityByUserIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthorityByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorityByUserIdResponse) ProtoMessage() {}

func (x *GetAuthorityByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorityByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetAuthorityByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{50}
}

func (x *GetAuthorityByUserIdResponse) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

type GetReviewByTaskIdIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId int64  `protobuf:"varint,1,opt,name=taskId,json=TaskId,proto3" json:"taskId,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *GetReviewByTaskIdIdRequest) Reset() {
	*x = GetReviewByTaskIdIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReviewByTaskIdIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReviewByTaskIdIdRequest) ProtoMessage() {}

func (x *GetReviewByTaskIdIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReviewByTaskIdIdRequest.ProtoReflect.Descriptor instead.
func (*GetReviewByTaskIdIdRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{51}
}

func (x *GetReviewByTaskIdIdRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *GetReviewByTaskIdIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetReviewByTaskIdIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total          int64  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	ApprovalStatus string `protobuf:"bytes,2,opt,name=approvalStatus,proto3" json:"approvalStatus,omitempty"`
	Id             int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetReviewByTaskIdIdResponse) Reset() {
	*x = GetReviewByTaskIdIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReviewByTaskIdIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReviewByTaskIdIdResponse) ProtoMessage() {}

func (x *GetReviewByTaskIdIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReviewByTaskIdIdResponse.ProtoReflect.Descriptor instead.
func (*GetReviewByTaskIdIdResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{52}
}

func (x *GetReviewByTaskIdIdResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetReviewByTaskIdIdResponse) GetApprovalStatus() string {
	if x != nil {
		return x.ApprovalStatus
	}
	return ""
}

func (x *GetReviewByTaskIdIdResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetReviewsBySponsorIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SponsorId      int64  `protobuf:"varint,1,opt,name=sponsorId,proto3" json:"sponsorId,omitempty"`
	Id             int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId      int64  `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ApprovalStatus string `protobuf:"bytes,4,opt,name=approvalStatus,proto3" json:"approvalStatus,omitempty"`
	OrgId          int64  `protobuf:"varint,5,opt,name=orgId,proto3" json:"orgId,omitempty"`
	PageNo         int64  `protobuf:"varint,6,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize       int64  `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *GetReviewsBySponsorIdRequest) Reset() {
	*x = GetReviewsBySponsorIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReviewsBySponsorIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReviewsBySponsorIdRequest) ProtoMessage() {}

func (x *GetReviewsBySponsorIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReviewsBySponsorIdRequest.ProtoReflect.Descriptor instead.
func (*GetReviewsBySponsorIdRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{53}
}

func (x *GetReviewsBySponsorIdRequest) GetSponsorId() int64 {
	if x != nil {
		return x.SponsorId
	}
	return 0
}

func (x *GetReviewsBySponsorIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetReviewsBySponsorIdRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetReviewsBySponsorIdRequest) GetApprovalStatus() string {
	if x != nil {
		return x.ApprovalStatus
	}
	return ""
}

func (x *GetReviewsBySponsorIdRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GetReviewsBySponsorIdRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *GetReviewsBySponsorIdRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetReviewsBySponsorIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId       int64    `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ProjectName     string   `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ApplicationId   int64    `protobuf:"varint,4,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	ApplicationName string   `protobuf:"bytes,5,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	BuildId         int64    `protobuf:"varint,6,opt,name=buildId,proto3" json:"buildId,omitempty"`
	BranchName      string   `protobuf:"bytes,7,opt,name=branchName,proto3" json:"branchName,omitempty"`
	CommitId        string   `protobuf:"bytes,8,opt,name=commitId,proto3" json:"commitId,omitempty"`
	CommitMessage   string   `protobuf:"bytes,9,opt,name=commitMessage,proto3" json:"commitMessage,omitempty"`
	Approver        []string `protobuf:"bytes,10,rep,name=approver,proto3" json:"approver,omitempty"`
	ApprovalContent string   `protobuf:"bytes,11,opt,name=approvalContent,proto3" json:"approvalContent,omitempty"`
	ApprovalReason  string   `protobuf:"bytes,12,opt,name=approvalReason,proto3" json:"approvalReason,omitempty"`
}

func (x *GetReviewsBySponsorIdResponse) Reset() {
	*x = GetReviewsBySponsorIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReviewsBySponsorIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReviewsBySponsorIdResponse) ProtoMessage() {}

func (x *GetReviewsBySponsorIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReviewsBySponsorIdResponse.ProtoReflect.Descriptor instead.
func (*GetReviewsBySponsorIdResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{54}
}

func (x *GetReviewsBySponsorIdResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetReviewsBySponsorIdResponse) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetReviewsBySponsorIdResponse) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *GetReviewsBySponsorIdResponse) GetApplicationId() int64 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

func (x *GetReviewsBySponsorIdResponse) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *GetReviewsBySponsorIdResponse) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *GetReviewsBySponsorIdResponse) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *GetReviewsBySponsorIdResponse) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *GetReviewsBySponsorIdResponse) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *GetReviewsBySponsorIdResponse) GetApprover() []string {
	if x != nil {
		return x.Approver
	}
	return nil
}

func (x *GetReviewsBySponsorIdResponse) GetApprovalContent() string {
	if x != nil {
		return x.ApprovalContent
	}
	return ""
}

func (x *GetReviewsBySponsorIdResponse) GetApprovalReason() string {
	if x != nil {
		return x.ApprovalReason
	}
	return ""
}

type GetReviewsByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Id             int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId      int64  `protobuf:"varint,3,opt,name=projectId,json=buildId,proto3" json:"projectId,omitempty"`
	Operator       int64  `protobuf:"varint,4,opt,name=operator,proto3" json:"operator,omitempty"`
	ApprovalStatus string `protobuf:"bytes,5,opt,name=approvalStatus,proto3" json:"approvalStatus,omitempty"`
	OrgId          int64  `protobuf:"varint,6,opt,name=orgId,proto3" json:"orgId,omitempty"`
	PageNo         int64  `protobuf:"varint,7,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize       int64  `protobuf:"varint,8,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *GetReviewsByUserIdRequest) Reset() {
	*x = GetReviewsByUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReviewsByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReviewsByUserIdRequest) ProtoMessage() {}

func (x *GetReviewsByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReviewsByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetReviewsByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{55}
}

func (x *GetReviewsByUserIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetReviewsByUserIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetReviewsByUserIdRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetReviewsByUserIdRequest) GetOperator() int64 {
	if x != nil {
		return x.Operator
	}
	return 0
}

func (x *GetReviewsByUserIdRequest) GetApprovalStatus() string {
	if x != nil {
		return x.ApprovalStatus
	}
	return ""
}

func (x *GetReviewsByUserIdRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GetReviewsByUserIdRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *GetReviewsByUserIdRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetReviewsByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectName     string                 `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ApplicationName string                 `protobuf:"bytes,3,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	ProjectId       int64                  `protobuf:"varint,4,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ApplicationId   int64                  `protobuf:"varint,5,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	BuildId         int64                  `protobuf:"varint,6,opt,name=buildId,proto3" json:"buildId,omitempty"`
	BranchName      string                 `protobuf:"bytes,7,opt,name=branchName,proto3" json:"branchName,omitempty"`
	CommitId        string                 `protobuf:"bytes,8,opt,name=commitId,proto3" json:"commitId,omitempty"`
	CommitMessage   string                 `protobuf:"bytes,9,opt,name=commitMessage,proto3" json:"commitMessage,omitempty"`
	Operator        string                 `protobuf:"bytes,10,opt,name=operator,proto3" json:"operator,omitempty"`
	ApprovalStatus  string                 `protobuf:"bytes,11,opt,name=approvalStatus,proto3" json:"approvalStatus,omitempty"`
	ApprovalContent string                 `protobuf:"bytes,12,opt,name=approvalContent,proto3" json:"approvalContent,omitempty"`
	ApprovalReason  string                 `protobuf:"bytes,13,opt,name=approvalReason,proto3" json:"approvalReason,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *GetReviewsByUserIdResponse) Reset() {
	*x = GetReviewsByUserIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReviewsByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReviewsByUserIdResponse) ProtoMessage() {}

func (x *GetReviewsByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReviewsByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetReviewsByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{56}
}

func (x *GetReviewsByUserIdResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetReviewsByUserIdResponse) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *GetReviewsByUserIdResponse) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *GetReviewsByUserIdResponse) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetReviewsByUserIdResponse) GetApplicationId() int64 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

func (x *GetReviewsByUserIdResponse) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *GetReviewsByUserIdResponse) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *GetReviewsByUserIdResponse) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *GetReviewsByUserIdResponse) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *GetReviewsByUserIdResponse) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *GetReviewsByUserIdResponse) GetApprovalStatus() string {
	if x != nil {
		return x.ApprovalStatus
	}
	return ""
}

func (x *GetReviewsByUserIdResponse) GetApprovalContent() string {
	if x != nil {
		return x.ApprovalContent
	}
	return ""
}

func (x *GetReviewsByUserIdResponse) GetApprovalReason() string {
	if x != nil {
		return x.ApprovalReason
	}
	return ""
}

func (x *GetReviewsByUserIdResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetReviewsByUserIdResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type LicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid            bool            `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Message          string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CurrentHostCount uint64          `protobuf:"varint,3,opt,name=currentHostCount,proto3" json:"currentHostCount,omitempty"`
	License          *structpb.Value `protobuf:"bytes,4,opt,name=license,proto3,oneof" json:"license,omitempty"`
}

func (x *LicenseResponse) Reset() {
	*x = LicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseResponse) ProtoMessage() {}

func (x *LicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseResponse.ProtoReflect.Descriptor instead.
func (*LicenseResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{57}
}

func (x *LicenseResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *LicenseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LicenseResponse) GetCurrentHostCount() uint64 {
	if x != nil {
		return x.CurrentHostCount
	}
	return 0
}

func (x *LicenseResponse) GetLicense() *structpb.Value {
	if x != nil {
		return x.License
	}
	return nil
}

type ListMemberRolesByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ScopeType string `protobuf:"bytes,2,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ParentID  int64  `protobuf:"varint,3,opt,name=parentID,proto3" json:"parentID,omitempty"`
	PageNo    int64  `protobuf:"varint,4,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize  int64  `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ListMemberRolesByUserRequest) Reset() {
	*x = ListMemberRolesByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMemberRolesByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMemberRolesByUserRequest) ProtoMessage() {}

func (x *ListMemberRolesByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMemberRolesByUserRequest.ProtoReflect.Descriptor instead.
func (*ListMemberRolesByUserRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{58}
}

func (x *ListMemberRolesByUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ListMemberRolesByUserRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *ListMemberRolesByUserRequest) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *ListMemberRolesByUserRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListMemberRolesByUserRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListMemberRolesByUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListMemberRolesByUserResponse) Reset() {
	*x = ListMemberRolesByUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMemberRolesByUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMemberRolesByUserResponse) ProtoMessage() {}

func (x *ListMemberRolesByUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMemberRolesByUserResponse.ProtoReflect.Descriptor instead.
func (*ListMemberRolesByUserResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{59}
}

func (x *ListMemberRolesByUserResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string          `protobuf:"bytes,1,opt,name=userID,json=userId,proto3" json:"userID,omitempty"`
	Email   string          `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Mobile  string          `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Name    string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Nick    string          `protobuf:"bytes,5,opt,name=nick,proto3" json:"nick,omitempty"`
	Avatar  string          `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Status  string          `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Scope   *structpb.Value `protobuf:"bytes,8,opt,name=scope,proto3" json:"scope,omitempty"`
	Roles   []string        `protobuf:"bytes,9,rep,name=roles,proto3" json:"roles,omitempty"`
	Labels  []string        `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty"`
	Removed bool            `protobuf:"varint,11,opt,name=removed,proto3" json:"removed,omitempty"`
	Deleted bool            `protobuf:"varint,12,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Token   string          `protobuf:"bytes,13,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{60}
}

func (x *Member) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Member) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Member) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *Member) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Member) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *Member) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Member) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Member) GetScope() *structpb.Value {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Member) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Member) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Member) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

func (x *Member) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Member) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type MemberAddByInviteCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyCode string   `protobuf:"bytes,1,opt,name=verifyCode,proto3" json:"verifyCode,omitempty"`
	UserIDs    []string `protobuf:"bytes,2,rep,name=userIDs,json=userIds,proto3" json:"userIDs,omitempty"`
	OrgID      string   `protobuf:"bytes,3,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
}

func (x *MemberAddByInviteCodeRequest) Reset() {
	*x = MemberAddByInviteCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberAddByInviteCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberAddByInviteCodeRequest) ProtoMessage() {}

func (x *MemberAddByInviteCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberAddByInviteCodeRequest.ProtoReflect.Descriptor instead.
func (*MemberAddByInviteCodeRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{61}
}

func (x *MemberAddByInviteCodeRequest) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *MemberAddByInviteCodeRequest) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *MemberAddByInviteCodeRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type MemberAddByInviteCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MemberAddByInviteCodeResponse) Reset() {
	*x = MemberAddByInviteCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberAddByInviteCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberAddByInviteCodeResponse) ProtoMessage() {}

func (x *MemberAddByInviteCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberAddByInviteCodeResponse.ProtoReflect.Descriptor instead.
func (*MemberAddByInviteCodeResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{62}
}

func (x *MemberAddByInviteCodeResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type MemberAddOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewrite bool `protobuf:"varint,1,opt,name=rewrite,proto3" json:"rewrite,omitempty"`
}

func (x *MemberAddOptions) Reset() {
	*x = MemberAddOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberAddOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberAddOptions) ProtoMessage() {}

func (x *MemberAddOptions) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberAddOptions.ProtoReflect.Descriptor instead.
func (*MemberAddOptions) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{63}
}

func (x *MemberAddOptions) GetRewrite() bool {
	if x != nil {
		return x.Rewrite
	}
	return false
}

type MemberAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope           *structpb.Value `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	TargetScopeType string          `protobuf:"bytes,2,opt,name=targetScopeType,proto3" json:"targetScopeType,omitempty"`
	TargetScopeIDs  []int64         `protobuf:"varint,3,rep,packed,name=targetScopeIDs,json=targetScopeIds,proto3" json:"targetScopeIDs,omitempty"`
	Roles           []string        `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty"`
	UserIDs         []string        `protobuf:"bytes,5,rep,name=userIDs,json=userIds,proto3" json:"userIDs,omitempty"`
	Options         *structpb.Value `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	Labels          []string        `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	VerifyCode      string          `protobuf:"bytes,8,opt,name=verifyCode,proto3" json:"verifyCode,omitempty"`
}

func (x *MemberAddRequest) Reset() {
	*x = MemberAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberAddRequest) ProtoMessage() {}

func (x *MemberAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberAddRequest.ProtoReflect.Descriptor instead.
func (*MemberAddRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{64}
}

func (x *MemberAddRequest) GetScope() *structpb.Value {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *MemberAddRequest) GetTargetScopeType() string {
	if x != nil {
		return x.TargetScopeType
	}
	return ""
}

func (x *MemberAddRequest) GetTargetScopeIDs() []int64 {
	if x != nil {
		return x.TargetScopeIDs
	}
	return nil
}

func (x *MemberAddRequest) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *MemberAddRequest) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *MemberAddRequest) GetOptions() *structpb.Value {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *MemberAddRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MemberAddRequest) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

type MemberAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MemberAddResponse) Reset() {
	*x = MemberAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberAddResponse) ProtoMessage() {}

func (x *MemberAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberAddResponse.ProtoReflect.Descriptor instead.
func (*MemberAddResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{65}
}

type MemberLabelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MemberLabelInfo) Reset() {
	*x = MemberLabelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberLabelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberLabelInfo) ProtoMessage() {}

func (x *MemberLabelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberLabelInfo.ProtoReflect.Descriptor instead.
func (*MemberLabelInfo) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{66}
}

func (x *MemberLabelInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *MemberLabelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MemberLabelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*structpb.Value `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MemberLabelList) Reset() {
	*x = MemberLabelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberLabelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberLabelList) ProtoMessage() {}

func (x *MemberLabelList) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberLabelList.ProtoReflect.Descriptor instead.
func (*MemberLabelList) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{67}
}

func (x *MemberLabelList) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type MemberLabelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MemberLabelListResponse) Reset() {
	*x = MemberLabelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberLabelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberLabelListResponse) ProtoMessage() {}

func (x *MemberLabelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberLabelListResponse.ProtoReflect.Descriptor instead.
func (*MemberLabelListResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{68}
}

func (x *MemberLabelListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type MemberList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*structpb.Value `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *MemberList) Reset() {
	*x = MemberList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberList) ProtoMessage() {}

func (x *MemberList) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberList.ProtoReflect.Descriptor instead.
func (*MemberList) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{69}
}

func (x *MemberList) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MemberList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type MemberListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType string   `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeID   int64    `protobuf:"varint,2,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	Roles     []string `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	Labels    []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Q         string   `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`
	PageNo    int64    `protobuf:"varint,6,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize  int64    `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *MemberListRequest) Reset() {
	*x = MemberListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberListRequest) ProtoMessage() {}

func (x *MemberListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberListRequest.ProtoReflect.Descriptor instead.
func (*MemberListRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{70}
}

func (x *MemberListRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *MemberListRequest) GetScopeID() int64 {
	if x != nil {
		return x.ScopeID
	}
	return 0
}

func (x *MemberListRequest) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *MemberListRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MemberListRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *MemberListRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *MemberListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type MemberListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MemberListResponse) Reset() {
	*x = MemberListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberListResponse) ProtoMessage() {}

func (x *MemberListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberListResponse.ProtoReflect.Descriptor instead.
func (*MemberListResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{71}
}

func (x *MemberListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type MemberRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *structpb.Value `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	UserIDs []string        `protobuf:"bytes,2,rep,name=userIDs,json=userIds,proto3" json:"userIDs,omitempty"`
}

func (x *MemberRemoveRequest) Reset() {
	*x = MemberRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberRemoveRequest) ProtoMessage() {}

func (x *MemberRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberRemoveRequest.ProtoReflect.Descriptor instead.
func (*MemberRemoveRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{72}
}

func (x *MemberRemoveRequest) GetScope() *structpb.Value {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *MemberRemoveRequest) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type MemberRemoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MemberRemoveResponse) Reset() {
	*x = MemberRemoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberRemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberRemoveResponse) ProtoMessage() {}

func (x *MemberRemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberRemoveResponse.ProtoReflect.Descriptor instead.
func (*MemberRemoveResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{73}
}

type NotifySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64           `protobuf:"varint,1,opt,name=ID,json=-,proto3" json:"ID,omitempty"`
	Name       string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SourceType string          `protobuf:"bytes,3,opt,name=sourceType,proto3" json:"sourceType,omitempty"`
	SourceID   string          `protobuf:"bytes,4,opt,name=sourceID,json=sourceId,proto3" json:"sourceID,omitempty"`
	Params     *structpb.Value `protobuf:"bytes,5,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *NotifySource) Reset() {
	*x = NotifySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySource) ProtoMessage() {}

func (x *NotifySource) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySource.ProtoReflect.Descriptor instead.
func (*NotifySource) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{74}
}

func (x *NotifySource) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *NotifySource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NotifySource) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *NotifySource) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

func (x *NotifySource) GetParams() *structpb.Value {
	if x != nil {
		return x.Params
	}
	return nil
}

type NotifyTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Values []*structpb.Value `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *NotifyTarget) Reset() {
	*x = NotifyTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyTarget) ProtoMessage() {}

func (x *NotifyTarget) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyTarget.ProtoReflect.Descriptor instead.
func (*NotifyTarget) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{75}
}

func (x *NotifyTarget) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NotifyTarget) GetValues() []*structpb.Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type PagingProjectDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*structpb.Value `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PagingProjectDTO) Reset() {
	*x = PagingProjectDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingProjectDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingProjectDTO) ProtoMessage() {}

func (x *PagingProjectDTO) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingProjectDTO.ProtoReflect.Descriptor instead.
func (*PagingProjectDTO) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{76}
}

func (x *PagingProjectDTO) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PagingProjectDTO) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type PermissionCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Scope        string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	ScopeID      uint64 `protobuf:"varint,3,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	Resource     string `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	Action       string `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	ResourceRole string `protobuf:"bytes,6,opt,name=resourceRole,proto3" json:"resourceRole,omitempty"`
}

func (x *PermissionCheckRequest) Reset() {
	*x = PermissionCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionCheckRequest) ProtoMessage() {}

func (x *PermissionCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionCheckRequest.ProtoReflect.Descriptor instead.
func (*PermissionCheckRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{77}
}

func (x *PermissionCheckRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PermissionCheckRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *PermissionCheckRequest) GetScopeID() uint64 {
	if x != nil {
		return x.ScopeID
	}
	return 0
}

func (x *PermissionCheckRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *PermissionCheckRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PermissionCheckRequest) GetResourceRole() string {
	if x != nil {
		return x.ResourceRole
	}
	return ""
}

type PermissionCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PermissionCheckResponse) Reset() {
	*x = PermissionCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionCheckResponse) ProtoMessage() {}

func (x *PermissionCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionCheckResponse.ProtoReflect.Descriptor instead.
func (*PermissionCheckResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{78}
}

func (x *PermissionCheckResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type PermissionCheckResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Access bool `protobuf:"varint,1,opt,name=access,proto3" json:"access,omitempty"`
}

func (x *PermissionCheckResponseData) Reset() {
	*x = PermissionCheckResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionCheckResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionCheckResponseData) ProtoMessage() {}

func (x *PermissionCheckResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionCheckResponseData.ProtoReflect.Descriptor instead.
func (*PermissionCheckResponseData) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{79}
}

func (x *PermissionCheckResponseData) GetAccess() bool {
	if x != nil {
		return x.Access
	}
	return false
}

type PermissionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Access                   bool              `protobuf:"varint,1,opt,name=access,proto3" json:"access,omitempty"`
	Roles                    []string          `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	PermissionList           []*structpb.Value `protobuf:"bytes,3,rep,name=permissionList,proto3" json:"permissionList,omitempty"`
	ResourceRoleList         []*structpb.Value `protobuf:"bytes,4,rep,name=resourceRoleList,proto3" json:"resourceRoleList,omitempty"`
	Exist                    bool              `protobuf:"varint,5,opt,name=exist,proto3" json:"exist,omitempty"`
	ContactsWhenNoPermission []string          `protobuf:"bytes,6,rep,name=contactsWhenNoPermission,proto3" json:"contactsWhenNoPermission,omitempty"`
	ScopeInfo                *structpb.Value   `protobuf:"bytes,7,opt,name=scopeInfo,proto3,oneof" json:"scopeInfo,omitempty"`
}

func (x *PermissionList) Reset() {
	*x = PermissionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionList) ProtoMessage() {}

func (x *PermissionList) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionList.ProtoReflect.Descriptor instead.
func (*PermissionList) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{80}
}

func (x *PermissionList) GetAccess() bool {
	if x != nil {
		return x.Access
	}
	return false
}

func (x *PermissionList) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *PermissionList) GetPermissionList() []*structpb.Value {
	if x != nil {
		return x.PermissionList
	}
	return nil
}

func (x *PermissionList) GetResourceRoleList() []*structpb.Value {
	if x != nil {
		return x.ResourceRoleList
	}
	return nil
}

func (x *PermissionList) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

func (x *PermissionList) GetContactsWhenNoPermission() []string {
	if x != nil {
		return x.ContactsWhenNoPermission
	}
	return nil
}

func (x *PermissionList) GetScopeInfo() *structpb.Value {
	if x != nil {
		return x.ScopeInfo
	}
	return nil
}

type PermissionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PermissionListResponse) Reset() {
	*x = PermissionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionListResponse) ProtoMessage() {}

func (x *PermissionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionListResponse.ProtoReflect.Descriptor instead.
func (*PermissionListResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{81}
}

func (x *PermissionListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProjectDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   uint64                 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName          string                 `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	DDHook               string                 `protobuf:"bytes,4,opt,name=dDHook,json=ddHook,proto3" json:"dDHook,omitempty"`
	OrgID                uint64                 `protobuf:"varint,5,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	Creator              string                 `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Logo                 string                 `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	Desc                 string                 `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`
	Owners               []string               `protobuf:"bytes,9,rep,name=owners,proto3" json:"owners,omitempty"`
	ActiveTime           string                 `protobuf:"bytes,10,opt,name=activeTime,proto3" json:"activeTime,omitempty"`
	Joined               bool                   `protobuf:"varint,11,opt,name=joined,proto3" json:"joined,omitempty"`
	CanUnblock           *bool                  `protobuf:"varint,12,opt,name=canUnblock,proto3,oneof" json:"canUnblock,omitempty"`
	BlockStatus          string                 `protobuf:"bytes,13,opt,name=blockStatus,proto3" json:"blockStatus,omitempty"`
	CanManage            bool                   `protobuf:"varint,14,opt,name=canManage,json=CanManage,proto3" json:"canManage,omitempty"`
	IsPublic             bool                   `protobuf:"varint,15,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	Stats                *structpb.Value        `protobuf:"bytes,16,opt,name=stats,proto3" json:"stats,omitempty"`
	ProjectResourceUsage *structpb.Value        `protobuf:"bytes,17,opt,name=projectResourceUsage,proto3" json:"projectResourceUsage,omitempty"`
	ClusterConfig        map[string]string      `protobuf:"bytes,18,rep,name=clusterConfig,proto3" json:"clusterConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourceConfig       *structpb.Value        `protobuf:"bytes,19,opt,name=resourceConfig,proto3,oneof" json:"resourceConfig,omitempty"`
	RollbackConfig       map[string]int64       `protobuf:"bytes,20,rep,name=rollbackConfig,proto3" json:"rollbackConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CpuQuota             float64                `protobuf:"fixed64,21,opt,name=cpuQuota,proto3" json:"cpuQuota,omitempty"`
	MemQuota             float64                `protobuf:"fixed64,22,opt,name=memQuota,proto3" json:"memQuota,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Type                 string                 `protobuf:"bytes,25,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ProjectDTO) Reset() {
	*x = ProjectDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectDTO) ProtoMessage() {}

func (x *ProjectDTO) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectDTO.ProtoReflect.Descriptor instead.
func (*ProjectDTO) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{82}
}

func (x *ProjectDTO) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ProjectDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectDTO) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProjectDTO) GetDDHook() string {
	if x != nil {
		return x.DDHook
	}
	return ""
}

func (x *ProjectDTO) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ProjectDTO) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ProjectDTO) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ProjectDTO) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ProjectDTO) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *ProjectDTO) GetActiveTime() string {
	if x != nil {
		return x.ActiveTime
	}
	return ""
}

func (x *ProjectDTO) GetJoined() bool {
	if x != nil {
		return x.Joined
	}
	return false
}

func (x *ProjectDTO) GetCanUnblock() bool {
	if x != nil && x.CanUnblock != nil {
		return *x.CanUnblock
	}
	return false
}

func (x *ProjectDTO) GetBlockStatus() string {
	if x != nil {
		return x.BlockStatus
	}
	return ""
}

func (x *ProjectDTO) GetCanManage() bool {
	if x != nil {
		return x.CanManage
	}
	return false
}

func (x *ProjectDTO) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ProjectDTO) GetStats() *structpb.Value {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ProjectDTO) GetProjectResourceUsage() *structpb.Value {
	if x != nil {
		return x.ProjectResourceUsage
	}
	return nil
}

func (x *ProjectDTO) GetClusterConfig() map[string]string {
	if x != nil {
		return x.ClusterConfig
	}
	return nil
}

func (x *ProjectDTO) GetResourceConfig() *structpb.Value {
	if x != nil {
		return x.ResourceConfig
	}
	return nil
}

func (x *ProjectDTO) GetRollbackConfig() map[string]int64 {
	if x != nil {
		return x.RollbackConfig
	}
	return nil
}

func (x *ProjectDTO) GetCpuQuota() float64 {
	if x != nil {
		return x.CpuQuota
	}
	return 0
}

func (x *ProjectDTO) GetMemQuota() float64 {
	if x != nil {
		return x.MemQuota
	}
	return 0
}

func (x *ProjectDTO) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProjectDTO) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ProjectDTO) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ProjectFunctionSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID       uint64          `protobuf:"varint,1,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	ProjectFunction map[string]bool `protobuf:"bytes,2,rep,name=projectFunction,proto3" json:"projectFunction,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ProjectFunctionSetRequest) Reset() {
	*x = ProjectFunctionSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectFunctionSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectFunctionSetRequest) ProtoMessage() {}

func (x *ProjectFunctionSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectFunctionSetRequest.ProtoReflect.Descriptor instead.
func (*ProjectFunctionSetRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{83}
}

func (x *ProjectFunctionSetRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ProjectFunctionSetRequest) GetProjectFunction() map[string]bool {
	if x != nil {
		return x.ProjectFunction
	}
	return nil
}

type ProjectFunctionSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProjectFunctionSetResponse) Reset() {
	*x = ProjectFunctionSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectFunctionSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectFunctionSetResponse) ProtoMessage() {}

func (x *ProjectFunctionSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectFunctionSetResponse.ProtoReflect.Descriptor instead.
func (*ProjectFunctionSetResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{84}
}

func (x *ProjectFunctionSetResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ProjectLabelCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Color     string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	ProjectID uint64 `protobuf:"varint,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *ProjectLabelCreateRequest) Reset() {
	*x = ProjectLabelCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLabelCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLabelCreateRequest) ProtoMessage() {}

func (x *ProjectLabelCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLabelCreateRequest.ProtoReflect.Descriptor instead.
func (*ProjectLabelCreateRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{85}
}

func (x *ProjectLabelCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectLabelCreateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProjectLabelCreateRequest) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *ProjectLabelCreateRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

type ProjectLabelCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProjectLabelCreateResponse) Reset() {
	*x = ProjectLabelCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLabelCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLabelCreateResponse) ProtoMessage() {}

func (x *ProjectLabelCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLabelCreateResponse.ProtoReflect.Descriptor instead.
func (*ProjectLabelCreateResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{86}
}

func (x *ProjectLabelCreateResponse) GetData() int64 {
	if x != nil {
		return x.Data
	}
	return 0
}

type ProjectLabelListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	PageNo    uint64 `protobuf:"varint,4,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize  uint64 `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ProjectLabelListRequest) Reset() {
	*x = ProjectLabelListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLabelListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLabelListRequest) ProtoMessage() {}

func (x *ProjectLabelListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLabelListRequest.ProtoReflect.Descriptor instead.
func (*ProjectLabelListRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{87}
}

func (x *ProjectLabelListRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ProjectLabelListRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ProjectLabelListRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProjectLabelListRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ProjectLabelListRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ProjectLabelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *ProjectLabelListResponse) Reset() {
	*x = ProjectLabelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLabelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLabelListResponse) ProtoMessage() {}

func (x *ProjectLabelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLabelListResponse.ProtoReflect.Descriptor instead.
func (*ProjectLabelListResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{88}
}

func (x *ProjectLabelListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProjectLabelUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Color string `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	ID    int64  `protobuf:"varint,3,opt,name=ID,json=-,proto3" json:"ID,omitempty"`
}

func (x *ProjectLabelUpdateRequest) Reset() {
	*x = ProjectLabelUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLabelUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLabelUpdateRequest) ProtoMessage() {}

func (x *ProjectLabelUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLabelUpdateRequest.ProtoReflect.Descriptor instead.
func (*ProjectLabelUpdateRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{89}
}

func (x *ProjectLabelUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectLabelUpdateRequest) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *ProjectLabelUpdateRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ProjectListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID      uint64   `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Query      string   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Name       string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	OrderBy    string   `protobuf:"bytes,4,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	Asc        bool     `protobuf:"varint,5,opt,name=asc,proto3" json:"asc,omitempty"`
	Joined     bool     `protobuf:"varint,6,opt,name=joined,proto3" json:"joined,omitempty"`
	PageNo     int64    `protobuf:"varint,7,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize   int64    `protobuf:"varint,8,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	ProjectIDs []uint64 `protobuf:"varint,9,rep,packed,name=projectIDs,proto3" json:"projectIDs,omitempty"`
	KeepMsp    bool     `protobuf:"varint,10,opt,name=keepMsp,proto3" json:"keepMsp,omitempty"`
	IsPublic   bool     `protobuf:"varint,11,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
}

func (x *ProjectListRequest) Reset() {
	*x = ProjectListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectListRequest) ProtoMessage() {}

func (x *ProjectListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectListRequest.ProtoReflect.Descriptor instead.
func (*ProjectListRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{90}
}

func (x *ProjectListRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ProjectListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ProjectListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ProjectListRequest) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

func (x *ProjectListRequest) GetJoined() bool {
	if x != nil {
		return x.Joined
	}
	return false
}

func (x *ProjectListRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ProjectListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProjectListRequest) GetProjectIDs() []uint64 {
	if x != nil {
		return x.ProjectIDs
	}
	return nil
}

func (x *ProjectListRequest) GetKeepMsp() bool {
	if x != nil {
		return x.KeepMsp
	}
	return false
}

func (x *ProjectListRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type ProjectListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProjectListResponse) Reset() {
	*x = ProjectListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectListResponse) ProtoMessage() {}

func (x *ProjectListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectListResponse.ProtoReflect.Descriptor instead.
func (*ProjectListResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{91}
}

func (x *ProjectListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProjectNameSpaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    bool              `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Namespaces map[string]string `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProjectNameSpaceInfo) Reset() {
	*x = ProjectNameSpaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectNameSpaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectNameSpaceInfo) ProtoMessage() {}

func (x *ProjectNameSpaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectNameSpaceInfo.ProtoReflect.Descriptor instead.
func (*ProjectNameSpaceInfo) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{92}
}

func (x *ProjectNameSpaceInfo) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ProjectNameSpaceInfo) GetNamespaces() map[string]string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

type ProjectNameSpaceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProjectNameSpaceInfoResponse) Reset() {
	*x = ProjectNameSpaceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectNameSpaceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectNameSpaceInfoResponse) ProtoMessage() {}

func (x *ProjectNameSpaceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectNameSpaceInfoResponse.ProtoReflect.Descriptor instead.
func (*ProjectNameSpaceInfoResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{93}
}

func (x *ProjectNameSpaceInfoResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProjectResourceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuServiceUsed float64 `protobuf:"fixed64,1,opt,name=cpuServiceUsed,proto3" json:"cpuServiceUsed,omitempty"`
	MemServiceUsed float64 `protobuf:"fixed64,2,opt,name=memServiceUsed,proto3" json:"memServiceUsed,omitempty"`
	CpuAddonUsed   float64 `protobuf:"fixed64,3,opt,name=cpuAddonUsed,proto3" json:"cpuAddonUsed,omitempty"`
	MemAddonUsed   float64 `protobuf:"fixed64,4,opt,name=memAddonUsed,proto3" json:"memAddonUsed,omitempty"`
}

func (x *ProjectResourceUsage) Reset() {
	*x = ProjectResourceUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectResourceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectResourceUsage) ProtoMessage() {}

func (x *ProjectResourceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectResourceUsage.ProtoReflect.Descriptor instead.
func (*ProjectResourceUsage) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{94}
}

func (x *ProjectResourceUsage) GetCpuServiceUsed() float64 {
	if x != nil {
		return x.CpuServiceUsed
	}
	return 0
}

func (x *ProjectResourceUsage) GetMemServiceUsed() float64 {
	if x != nil {
		return x.MemServiceUsed
	}
	return 0
}

func (x *ProjectResourceUsage) GetCpuAddonUsed() float64 {
	if x != nil {
		return x.CpuAddonUsed
	}
	return 0
}

func (x *ProjectResourceUsage) GetMemAddonUsed() float64 {
	if x != nil {
		return x.MemAddonUsed
	}
	return 0
}

type ProjectStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountApplications       int64   `protobuf:"varint,1,opt,name=countApplications,proto3" json:"countApplications,omitempty"`
	CountMembers            int64   `protobuf:"varint,2,opt,name=countMembers,proto3" json:"countMembers,omitempty"`
	TotalApplicationsCount  int64   `protobuf:"varint,3,opt,name=totalApplicationsCount,proto3" json:"totalApplicationsCount,omitempty"`
	TotalMembersCount       int64   `protobuf:"varint,4,opt,name=totalMembersCount,proto3" json:"totalMembersCount,omitempty"`
	TotalIterationsCount    int64   `protobuf:"varint,5,opt,name=totalIterationsCount,proto3" json:"totalIterationsCount,omitempty"`
	RunningIterationsCount  int64   `protobuf:"varint,6,opt,name=runningIterationsCount,proto3" json:"runningIterationsCount,omitempty"`
	PlanningIterationsCount int64   `protobuf:"varint,7,opt,name=planningIterationsCount,proto3" json:"planningIterationsCount,omitempty"`
	TotalManHourCount       float64 `protobuf:"fixed64,8,opt,name=totalManHourCount,proto3" json:"totalManHourCount,omitempty"`
	UsedManHourCount        float64 `protobuf:"fixed64,9,opt,name=usedManHourCount,proto3" json:"usedManHourCount,omitempty"`
	PlanningManHourCount    float64 `protobuf:"fixed64,10,opt,name=planningManHourCount,proto3" json:"planningManHourCount,omitempty"`
	DoneBugCount            int64   `protobuf:"varint,11,opt,name=doneBugCount,proto3" json:"doneBugCount,omitempty"`
	TotalBugCount           int64   `protobuf:"varint,12,opt,name=totalBugCount,proto3" json:"totalBugCount,omitempty"`
	DoneBugPercent          float64 `protobuf:"fixed64,13,opt,name=doneBugPercent,proto3" json:"doneBugPercent,omitempty"`
}

func (x *ProjectStats) Reset() {
	*x = ProjectStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectStats) ProtoMessage() {}

func (x *ProjectStats) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectStats.ProtoReflect.Descriptor instead.
func (*ProjectStats) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{95}
}

func (x *ProjectStats) GetCountApplications() int64 {
	if x != nil {
		return x.CountApplications
	}
	return 0
}

func (x *ProjectStats) GetCountMembers() int64 {
	if x != nil {
		return x.CountMembers
	}
	return 0
}

func (x *ProjectStats) GetTotalApplicationsCount() int64 {
	if x != nil {
		return x.TotalApplicationsCount
	}
	return 0
}

func (x *ProjectStats) GetTotalMembersCount() int64 {
	if x != nil {
		return x.TotalMembersCount
	}
	return 0
}

func (x *ProjectStats) GetTotalIterationsCount() int64 {
	if x != nil {
		return x.TotalIterationsCount
	}
	return 0
}

func (x *ProjectStats) GetRunningIterationsCount() int64 {
	if x != nil {
		return x.RunningIterationsCount
	}
	return 0
}

func (x *ProjectStats) GetPlanningIterationsCount() int64 {
	if x != nil {
		return x.PlanningIterationsCount
	}
	return 0
}

func (x *ProjectStats) GetTotalManHourCount() float64 {
	if x != nil {
		return x.TotalManHourCount
	}
	return 0
}

func (x *ProjectStats) GetUsedManHourCount() float64 {
	if x != nil {
		return x.UsedManHourCount
	}
	return 0
}

func (x *ProjectStats) GetPlanningManHourCount() float64 {
	if x != nil {
		return x.PlanningManHourCount
	}
	return 0
}

func (x *ProjectStats) GetDoneBugCount() int64 {
	if x != nil {
		return x.DoneBugCount
	}
	return 0
}

func (x *ProjectStats) GetTotalBugCount() int64 {
	if x != nil {
		return x.TotalBugCount
	}
	return 0
}

func (x *ProjectStats) GetDoneBugPercent() float64 {
	if x != nil {
		return x.DoneBugPercent
	}
	return 0
}

type ProjectUpdateBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              uint64            `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Name            string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName     string            `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Logo            string            `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	Desc            string            `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	DdHook          string            `protobuf:"bytes,6,opt,name=ddHook,proto3" json:"ddHook,omitempty"`
	ClusterConfig   map[string]string `protobuf:"bytes,7,rep,name=clusterConfig,proto3" json:"clusterConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourceConfigs *structpb.Value   `protobuf:"bytes,8,opt,name=resourceConfigs,json=resourceConfig,proto3,oneof" json:"resourceConfigs,omitempty"`
	IsPublic        bool              `protobuf:"varint,9,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	RollbackConfig  map[string]int64  `protobuf:"bytes,10,rep,name=rollbackConfig,proto3" json:"rollbackConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CpuQuota        float64           `protobuf:"fixed64,11,opt,name=cpuQuota,proto3" json:"cpuQuota,omitempty"`
	MemQuota        float64           `protobuf:"fixed64,12,opt,name=memQuota,proto3" json:"memQuota,omitempty"`
}

func (x *ProjectUpdateBody) Reset() {
	*x = ProjectUpdateBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectUpdateBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectUpdateBody) ProtoMessage() {}

func (x *ProjectUpdateBody) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectUpdateBody.ProtoReflect.Descriptor instead.
func (*ProjectUpdateBody) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{96}
}

func (x *ProjectUpdateBody) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ProjectUpdateBody) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectUpdateBody) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProjectUpdateBody) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ProjectUpdateBody) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ProjectUpdateBody) GetDdHook() string {
	if x != nil {
		return x.DdHook
	}
	return ""
}

func (x *ProjectUpdateBody) GetClusterConfig() map[string]string {
	if x != nil {
		return x.ClusterConfig
	}
	return nil
}

func (x *ProjectUpdateBody) GetResourceConfigs() *structpb.Value {
	if x != nil {
		return x.ResourceConfigs
	}
	return nil
}

func (x *ProjectUpdateBody) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ProjectUpdateBody) GetRollbackConfig() map[string]int64 {
	if x != nil {
		return x.RollbackConfig
	}
	return nil
}

func (x *ProjectUpdateBody) GetCpuQuota() float64 {
	if x != nil {
		return x.CpuQuota
	}
	return 0
}

func (x *ProjectUpdateBody) GetMemQuota() float64 {
	if x != nil {
		return x.MemQuota
	}
	return 0
}

type ProjectUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID uint64          `protobuf:"varint,1,opt,name=projectID,json=-,proto3" json:"projectID,omitempty"`
	Body      *structpb.Value `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ProjectUpdateRequest) Reset() {
	*x = ProjectUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectUpdateRequest) ProtoMessage() {}

func (x *ProjectUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectUpdateRequest.ProtoReflect.Descriptor instead.
func (*ProjectUpdateRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{97}
}

func (x *ProjectUpdateRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ProjectUpdateRequest) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

type ProjectUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProjectUpdateResponse) Reset() {
	*x = ProjectUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectUpdateResponse) ProtoMessage() {}

func (x *ProjectUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectUpdateResponse.ProtoReflect.Descriptor instead.
func (*ProjectUpdateResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{98}
}

func (x *ProjectUpdateResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProjectWorkSpaceAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updatedAt,json=updated_at,proto3" json:"updatedAt,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdAt,json=created_at,proto3" json:"createdAt,omitempty"`
	ProjectID uint64                 `protobuf:"varint,4,opt,name=projectID,json=project_id,proto3" json:"projectID,omitempty"`
	OrgID     uint64                 `protobuf:"varint,5,opt,name=orgID,json=org_id,proto3" json:"orgID,omitempty"`
	OrgName   string                 `protobuf:"bytes,6,opt,name=orgName,json=org_Name,proto3" json:"orgName,omitempty"`
	Workspace string                 `protobuf:"bytes,7,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Abilities string                 `protobuf:"bytes,8,opt,name=abilities,json=deployment_abilities,proto3" json:"abilities,omitempty"`
}

func (x *ProjectWorkSpaceAbility) Reset() {
	*x = ProjectWorkSpaceAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectWorkSpaceAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectWorkSpaceAbility) ProtoMessage() {}

func (x *ProjectWorkSpaceAbility) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectWorkSpaceAbility.ProtoReflect.Descriptor instead.
func (*ProjectWorkSpaceAbility) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{99}
}

func (x *ProjectWorkSpaceAbility) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ProjectWorkSpaceAbility) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ProjectWorkSpaceAbility) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProjectWorkSpaceAbility) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ProjectWorkSpaceAbility) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ProjectWorkSpaceAbility) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *ProjectWorkSpaceAbility) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *ProjectWorkSpaceAbility) GetAbilities() string {
	if x != nil {
		return x.Abilities
	}
	return ""
}

type ProjectWorkSpaceAbilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProjectWorkSpaceAbilityResponse) Reset() {
	*x = ProjectWorkSpaceAbilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectWorkSpaceAbilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectWorkSpaceAbilityResponse) ProtoMessage() {}

func (x *ProjectWorkSpaceAbilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectWorkSpaceAbilityResponse.ProtoReflect.Descriptor instead.
func (*ProjectWorkSpaceAbilityResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{100}
}

func (x *ProjectWorkSpaceAbilityResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type QUOTA_GET_PROJECT_NAMESPACES_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QUOTA_GET_PROJECT_NAMESPACES_Request) Reset() {
	*x = QUOTA_GET_PROJECT_NAMESPACES_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QUOTA_GET_PROJECT_NAMESPACES_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QUOTA_GET_PROJECT_NAMESPACES_Request) ProtoMessage() {}

func (x *QUOTA_GET_PROJECT_NAMESPACES_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QUOTA_GET_PROJECT_NAMESPACES_Request.ProtoReflect.Descriptor instead.
func (*QUOTA_GET_PROJECT_NAMESPACES_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{101}
}

type QUOTA_GET_PROJECT_QUOTA_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QUOTA_GET_PROJECT_QUOTA_Request) Reset() {
	*x = QUOTA_GET_PROJECT_QUOTA_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QUOTA_GET_PROJECT_QUOTA_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QUOTA_GET_PROJECT_QUOTA_Request) ProtoMessage() {}

func (x *QUOTA_GET_PROJECT_QUOTA_Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QUOTA_GET_PROJECT_QUOTA_Request.ProtoReflect.Descriptor instead.
func (*QUOTA_GET_PROJECT_QUOTA_Request) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{102}
}

type QueryMBoxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List   []*structpb.Value `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total  int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	UnRead int64             `protobuf:"varint,3,opt,name=unRead,proto3" json:"unRead,omitempty"`
}

func (x *QueryMBoxData) Reset() {
	*x = QueryMBoxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMBoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMBoxData) ProtoMessage() {}

func (x *QueryMBoxData) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMBoxData.ProtoReflect.Descriptor instead.
func (*QueryMBoxData) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{103}
}

func (x *QueryMBoxData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *QueryMBoxData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryMBoxData) GetUnRead() int64 {
	if x != nil {
		return x.UnRead
	}
	return 0
}

type QueryMBoxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo   int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Label    string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Status   string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Type     string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	OrgID    int64  `protobuf:"varint,6,opt,name=orgID,json=-,proto3" json:"orgID,omitempty"`
	UserID   string `protobuf:"bytes,7,opt,name=userID,json=-,proto3" json:"userID,omitempty"`
}

func (x *QueryMBoxRequest) Reset() {
	*x = QueryMBoxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMBoxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMBoxRequest) ProtoMessage() {}

func (x *QueryMBoxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMBoxRequest.ProtoReflect.Descriptor instead.
func (*QueryMBoxRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{104}
}

func (x *QueryMBoxRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *QueryMBoxRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryMBoxRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *QueryMBoxRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *QueryMBoxRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QueryMBoxRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *QueryMBoxRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type QueryMBoxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryMBoxResponse) Reset() {
	*x = QueryMBoxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMBoxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMBoxResponse) ProtoMessage() {}

func (x *QueryMBoxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMBoxResponse.ProtoReflect.Descriptor instead.
func (*QueryMBoxResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{105}
}

func (x *QueryMBoxResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryNotifyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*structpb.Value `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *QueryNotifyData) Reset() {
	*x = QueryNotifyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNotifyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNotifyData) ProtoMessage() {}

func (x *QueryNotifyData) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNotifyData.ProtoReflect.Descriptor instead.
func (*QueryNotifyData) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{106}
}

func (x *QueryNotifyData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *QueryNotifyData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryNotifyHistoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*structpb.Value `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *QueryNotifyHistoryData) Reset() {
	*x = QueryNotifyHistoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNotifyHistoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNotifyHistoryData) ProtoMessage() {}

func (x *QueryNotifyHistoryData) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNotifyHistoryData.ProtoReflect.Descriptor instead.
func (*QueryNotifyHistoryData) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{107}
}

func (x *QueryNotifyHistoryData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *QueryNotifyHistoryData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryNotifyHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo      int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize    int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	NotifyName  string `protobuf:"bytes,3,opt,name=notifyName,proto3" json:"notifyName,omitempty"`
	StartTime   string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime     string `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Channel     string `protobuf:"bytes,6,opt,name=channel,proto3" json:"channel,omitempty"`
	Label       string `protobuf:"bytes,7,opt,name=label,proto3" json:"label,omitempty"`
	ClusterName string `protobuf:"bytes,8,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	OrgID       int64  `protobuf:"varint,9,opt,name=orgID,json=-,proto3" json:"orgID,omitempty"`
}

func (x *QueryNotifyHistoryRequest) Reset() {
	*x = QueryNotifyHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNotifyHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNotifyHistoryRequest) ProtoMessage() {}

func (x *QueryNotifyHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNotifyHistoryRequest.ProtoReflect.Descriptor instead.
func (*QueryNotifyHistoryRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{108}
}

func (x *QueryNotifyHistoryRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *QueryNotifyHistoryRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryNotifyHistoryRequest) GetNotifyName() string {
	if x != nil {
		return x.NotifyName
	}
	return ""
}

func (x *QueryNotifyHistoryRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *QueryNotifyHistoryRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *QueryNotifyHistoryRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *QueryNotifyHistoryRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *QueryNotifyHistoryRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *QueryNotifyHistoryRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

type QueryNotifyHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryNotifyHistoryResponse) Reset() {
	*x = QueryNotifyHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNotifyHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNotifyHistoryResponse) ProtoMessage() {}

func (x *QueryNotifyHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNotifyHistoryResponse.ProtoReflect.Descriptor instead.
func (*QueryNotifyHistoryResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{109}
}

func (x *QueryNotifyHistoryResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryNotifyItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*structpb.Value `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *QueryNotifyItemData) Reset() {
	*x = QueryNotifyItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNotifyItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNotifyItemData) ProtoMessage() {}

func (x *QueryNotifyItemData) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNotifyItemData.ProtoReflect.Descriptor instead.
func (*QueryNotifyItemData) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{110}
}

func (x *QueryNotifyItemData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *QueryNotifyItemData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type QueryNotifyItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo    int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize  int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Category  string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Label     string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	ScopeType string `protobuf:"bytes,5,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
}

func (x *QueryNotifyItemRequest) Reset() {
	*x = QueryNotifyItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNotifyItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNotifyItemRequest) ProtoMessage() {}

func (x *QueryNotifyItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNotifyItemRequest.ProtoReflect.Descriptor instead.
func (*QueryNotifyItemRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{111}
}

func (x *QueryNotifyItemRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *QueryNotifyItemRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryNotifyItemRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *QueryNotifyItemRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *QueryNotifyItemRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

type QueryNotifyItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryNotifyItemResponse) Reset() {
	*x = QueryNotifyItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNotifyItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNotifyItemResponse) ProtoMessage() {}

func (x *QueryNotifyItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNotifyItemResponse.ProtoReflect.Descriptor instead.
func (*QueryNotifyItemResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{112}
}

func (x *QueryNotifyItemResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo      int64  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize    int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	GroupDetail bool   `protobuf:"varint,3,opt,name=groupDetail,proto3" json:"groupDetail,omitempty"`
	ScopeType   string `protobuf:"bytes,4,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeID     string `protobuf:"bytes,5,opt,name=scopeID,proto3" json:"scopeID,omitempty"`
	Label       string `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	ClusterName string `protobuf:"bytes,7,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	OrgID       int64  `protobuf:"varint,8,opt,name=orgID,json=-,proto3" json:"orgID,omitempty"`
}

func (x *QueryNotifyRequest) Reset() {
	*x = QueryNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNotifyRequest) ProtoMessage() {}

func (x *QueryNotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNotifyRequest.ProtoReflect.Descriptor instead.
func (*QueryNotifyRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{113}
}

func (x *QueryNotifyRequest) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *QueryNotifyRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryNotifyRequest) GetGroupDetail() bool {
	if x != nil {
		return x.GroupDetail
	}
	return false
}

func (x *QueryNotifyRequest) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *QueryNotifyRequest) GetScopeID() string {
	if x != nil {
		return x.ScopeID
	}
	return ""
}

func (x *QueryNotifyRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *QueryNotifyRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *QueryNotifyRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

type QueryNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryNotifyResponse) Reset() {
	*x = QueryNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNotifyResponse) ProtoMessage() {}

func (x *QueryNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNotifyResponse.ProtoReflect.Descriptor instead.
func (*QueryNotifyResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{114}
}

func (x *QueryNotifyResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ID   string `protobuf:"bytes,2,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{115}
}

func (x *Scope) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Scope) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ScopeResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource     string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Action       string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	ResourceRole string `protobuf:"bytes,3,opt,name=resourceRole,proto3" json:"resourceRole,omitempty"`
}

func (x *ScopeResource) Reset() {
	*x = ScopeResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeResource) ProtoMessage() {}

func (x *ScopeResource) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeResource.ProtoReflect.Descriptor instead.
func (*ScopeResource) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{116}
}

func (x *ScopeResource) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ScopeResource) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ScopeResource) GetResourceRole() string {
	if x != nil {
		return x.ResourceRole
	}
	return ""
}

type ScopeRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  *structpb.Value `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Access bool            `protobuf:"varint,2,opt,name=access,proto3" json:"access,omitempty"`
	Roles  []string        `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *ScopeRole) Reset() {
	*x = ScopeRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeRole) ProtoMessage() {}

func (x *ScopeRole) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeRole.ProtoReflect.Descriptor instead.
func (*ScopeRole) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{117}
}

func (x *ScopeRole) GetScope() *structpb.Value {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *ScopeRole) GetAccess() bool {
	if x != nil {
		return x.Access
	}
	return false
}

func (x *ScopeRole) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type ScopeRoleAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope *structpb.Value `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ScopeRoleAccessRequest) Reset() {
	*x = ScopeRoleAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeRoleAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeRoleAccessRequest) ProtoMessage() {}

func (x *ScopeRoleAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeRoleAccessRequest.ProtoReflect.Descriptor instead.
func (*ScopeRoleAccessRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{118}
}

func (x *ScopeRoleAccessRequest) GetScope() *structpb.Value {
	if x != nil {
		return x.Scope
	}
	return nil
}

type ScopeRoleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*structpb.Value `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ScopeRoleList) Reset() {
	*x = ScopeRoleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeRoleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeRoleList) ProtoMessage() {}

func (x *ScopeRoleList) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeRoleList.ProtoReflect.Descriptor instead.
func (*ScopeRoleList) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{119}
}

func (x *ScopeRoleList) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

type ScopeRoleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ScopeRoleListResponse) Reset() {
	*x = ScopeRoleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeRoleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeRoleListResponse) ProtoMessage() {}

func (x *ScopeRoleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeRoleListResponse.ProtoReflect.Descriptor instead.
func (*ScopeRoleListResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{120}
}

func (x *ScopeRoleListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Secret   string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{121}
}

func (x *Target) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *Target) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type UpdateApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId  int64  `protobuf:"varint,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Reject bool   `protobuf:"varint,3,opt,name=reject,proto3" json:"reject,omitempty"`
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *UpdateApproval) Reset() {
	*x = UpdateApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApproval) ProtoMessage() {}

func (x *UpdateApproval) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApproval.ProtoReflect.Descriptor instead.
func (*UpdateApproval) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{122}
}

func (x *UpdateApproval) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateApproval) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *UpdateApproval) GetReject() bool {
	if x != nil {
		return x.Reject
	}
	return false
}

func (x *UpdateApproval) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UpdateNotifyItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             int64  `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	MobileTemplate string `protobuf:"bytes,2,opt,name=mobileTemplate,proto3" json:"mobileTemplate,omitempty"`
	NotifyItemID   string `protobuf:"bytes,3,opt,name=notifyItemID,proto3" json:"notifyItemID,omitempty"` // generated from path variable: notifyItemID. You should change the proto type if necessary.
}

func (x *UpdateNotifyItemRequest) Reset() {
	*x = UpdateNotifyItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifyItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifyItemRequest) ProtoMessage() {}

func (x *UpdateNotifyItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifyItemRequest.ProtoReflect.Descriptor instead.
func (*UpdateNotifyItemRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{123}
}

func (x *UpdateNotifyItemRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateNotifyItemRequest) GetMobileTemplate() string {
	if x != nil {
		return x.MobileTemplate
	}
	return ""
}

func (x *UpdateNotifyItemRequest) GetNotifyItemID() string {
	if x != nil {
		return x.NotifyItemID
	}
	return ""
}

type UpdateNotifyItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNotifyItemResponse) Reset() {
	*x = UpdateNotifyItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifyItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifyItemResponse) ProtoMessage() {}

func (x *UpdateNotifyItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifyItemResponse.ProtoReflect.Descriptor instead.
func (*UpdateNotifyItemResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{124}
}

type UpdateNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64             `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"ID,omitempty"`
	Channels      string            `protobuf:"bytes,2,opt,name=channels,proto3" json:"channels,omitempty"`
	NotifyGroupID int64             `protobuf:"varint,3,opt,name=notifyGroupID,json=notifyGroupId,proto3" json:"notifyGroupID,omitempty"`
	NotifyItemIDs []int64           `protobuf:"varint,4,rep,packed,name=notifyItemIDs,json=notifyItemIds,proto3" json:"notifyItemIDs,omitempty"`
	NotifySources []*structpb.Value `protobuf:"bytes,5,rep,name=notifySources,proto3" json:"notifySources,omitempty"`
	WithGroup     bool              `protobuf:"varint,6,opt,name=withGroup,proto3" json:"withGroup,omitempty"`
	GroupTargets  []*structpb.Value `protobuf:"bytes,7,rep,name=groupTargets,proto3" json:"groupTargets,omitempty"`
	GroupName     string            `protobuf:"bytes,8,opt,name=groupName,json=-,proto3" json:"groupName,omitempty"`
	OrgID         int64             `protobuf:"varint,9,opt,name=orgID,json=-,proto3" json:"orgID,omitempty"`
	NotifyID      string            `protobuf:"bytes,10,opt,name=notifyID,proto3" json:"notifyID,omitempty"` // generated from path variable: notifyID. You should change the proto type if necessary.
}

func (x *UpdateNotifyRequest) Reset() {
	*x = UpdateNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifyRequest) ProtoMessage() {}

func (x *UpdateNotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifyRequest.ProtoReflect.Descriptor instead.
func (*UpdateNotifyRequest) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{125}
}

func (x *UpdateNotifyRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateNotifyRequest) GetChannels() string {
	if x != nil {
		return x.Channels
	}
	return ""
}

func (x *UpdateNotifyRequest) GetNotifyGroupID() int64 {
	if x != nil {
		return x.NotifyGroupID
	}
	return 0
}

func (x *UpdateNotifyRequest) GetNotifyItemIDs() []int64 {
	if x != nil {
		return x.NotifyItemIDs
	}
	return nil
}

func (x *UpdateNotifyRequest) GetNotifySources() []*structpb.Value {
	if x != nil {
		return x.NotifySources
	}
	return nil
}

func (x *UpdateNotifyRequest) GetWithGroup() bool {
	if x != nil {
		return x.WithGroup
	}
	return false
}

func (x *UpdateNotifyRequest) GetGroupTargets() []*structpb.Value {
	if x != nil {
		return x.GroupTargets
	}
	return nil
}

func (x *UpdateNotifyRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *UpdateNotifyRequest) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *UpdateNotifyRequest) GetNotifyID() string {
	if x != nil {
		return x.NotifyID
	}
	return ""
}

type UpdateNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *UpdateNotifyResponse) Reset() {
	*x = UpdateNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifyResponse) ProtoMessage() {}

func (x *UpdateNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifyResponse.ProtoReflect.Descriptor instead.
func (*UpdateNotifyResponse) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{126}
}

func (x *UpdateNotifyResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserRoleListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*structpb.Value `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *UserRoleListResponseData) Reset() {
	*x = UserRoleListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRoleListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRoleListResponseData) ProtoMessage() {}

func (x *UserRoleListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRoleListResponseData.ProtoReflect.Descriptor instead.
func (*UserRoleListResponseData) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{127}
}

func (x *UserRoleListResponseData) GetList() []*structpb.Value {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *UserRoleListResponseData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UserScopeRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType string   `protobuf:"bytes,1,opt,name=scopeType,proto3" json:"scopeType,omitempty"`
	ScopeID   int64    `protobuf:"varint,2,opt,name=scopeID,json=scopeId,proto3" json:"scopeID,omitempty"`
	ScopeName string   `protobuf:"bytes,3,opt,name=scopeName,proto3" json:"scopeName,omitempty"`
	Roles     []string `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *UserScopeRole) Reset() {
	*x = UserScopeRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_services_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScopeRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScopeRole) ProtoMessage() {}

func (x *UserScopeRole) ProtoReflect() protoreflect.Message {
	mi := &file_core_services_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScopeRole.ProtoReflect.Descriptor instead.
func (*UserScopeRole) Descriptor() ([]byte, []int) {
	return file_core_services_proto_rawDescGZIP(), []int{128}
}

func (x *UserScopeRole) GetScopeType() string {
	if x != nil {
		return x.ScopeType
	}
	return ""
}

func (x *UserScopeRole) GetScopeID() int64 {
	if x != nil {
		return x.ScopeID
	}
	return 0
}

func (x *UserScopeRole) GetScopeName() string {
	if x != nil {
		return x.ScopeName
	}
	return ""
}

func (x *UserScopeRole) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

var File_core_services_proto protoreflect.FileDescriptor

var file_core_services_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x0a, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x70, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12,
	0x47, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43,
	0x0a, 0x0c, 0x75, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x0c, 0x75, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0a, 0x75, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x24,
	0x0a, 0x0d, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x62,
	0x62, 0x72, 0x65, 0x76, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x4e,
	0x65, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x4e, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72,
	0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0b, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x0b,
	0x73, 0x6f, 0x6e, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x2d, 0x1a, 0x51, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x6e,
	0x61, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x69, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x02, 0x0a, 0x16,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x45, 0x0a, 0x17, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x5f, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x69, 0x6d,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x80, 0x01,
	0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0xe4, 0x02, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfc, 0x04, 0x0a,
	0x0a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x19, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x43, 0x72, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x56,
	0x0a, 0x1a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x18, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53,
	0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x22, 0x2f, 0x0a, 0x19, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x74,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1e, 0x43,
	0x4d, 0x44, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x50, 0x49, 0x4e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x1b, 0x0a, 0x19, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x55,
	0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a,
	0x19, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x4d,
	0x44, 0x42, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x42, 0x4f,
	0x58, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x62, 0x6f, 0x78, 0x49, 0x44, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x42,
	0x4f, 0x58, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x42, 0x4f, 0x58,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20,
	0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x38, 0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x1b, 0x43, 0x4d,
	0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x49, 0x44, 0x22, 0x38, 0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x22,
	0x21, 0x0a, 0x1f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x46,
	0x55, 0x5a, 0x5a, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x35, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x3f, 0x0a, 0x1f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x4e, 0x53, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x22, 0x4c, 0x0a, 0x26, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x31,
	0x0a, 0x2f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x57,
	0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49,
	0x45, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x6a, 0x0a, 0x2c, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xf7, 0x03,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x3a, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x2d, 0x12, 0x10, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x22, 0x50, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x50, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x19, 0x44, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x44, 0x22, 0x30, 0x0a, 0x1a, 0x44, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x21, 0x0a, 0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x42, 0x4f, 0x58, 0x5f,
	0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x42,
	0x4f, 0x58, 0x5f, 0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x62,
	0x22, 0xf4, 0x01, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x76, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x76, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x64, 0x75, 0x70, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x44, 0x75, 0x70, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x15, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4c, 0x6f, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4c, 0x6f, 0x67, 0x22, 0x2c, 0x0a, 0x16, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x67, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x44, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x6b, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xdc, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x42, 0x79, 0x53, 0x70, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa9, 0x03, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x42, 0x79, 0x53, 0x70, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xed, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc2, 0x04, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb0, 0x01, 0x0a,
	0x0f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x07,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22,
	0xa4, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4b, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xcc, 0x02, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x6e, 0x0a, 0x1c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x42,
	0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x22, 0x33, 0x0a, 0x1d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x42,
	0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x17, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x0a,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xbb, 0x01, 0x0a,
	0x11, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x40, 0x0a, 0x12, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x13,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x0d, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x01, 0x2d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x52, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x10, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x54, 0x4f, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb8, 0x01,
	0x0a, 0x16, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x45, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x35, 0x0a, 0x1b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xdd, 0x02, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x57, 0x68, 0x65,
	0x6e, 0x4e, 0x6f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x57, 0x68, 0x65,
	0x6e, 0x4e, 0x6f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x44, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf0, 0x08, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x44, 0x48, 0x6f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x64, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x55, 0x6e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x61, 0x6e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x4a, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x0d,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0e, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x61, 0x6e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xec, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x42, 0x0a, 0x14, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x30,
	0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x77, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0x30, 0x0a, 0x1a, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a, 0x17,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x54, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0d, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x22, 0xa2, 0x02, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x73, 0x63, 0x12, 0x16,
	0x0a, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x65, 0x70, 0x4d, 0x73, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6b, 0x65, 0x65,
	0x70, 0x4d, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x22, 0x41, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xca, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x4a, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xae, 0x01, 0x0a,
	0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63,
	0x70, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x70, 0x75,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x6d, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x22, 0xec, 0x04,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x36, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61,
	0x6e, 0x48, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x64, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x6e, 0x48, 0x6f, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f,
	0x6e, 0x65, 0x42, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x64, 0x6f, 0x6e, 0x65, 0x42, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x6e, 0x65, 0x42, 0x75, 0x67, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x6f,
	0x6e, 0x65, 0x42, 0x75, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x05, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x64, 0x48, 0x6f, 0x6f, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x64, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x5f, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x62, 0x0a, 0x0e, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d,
	0x65, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x22, 0x58, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x2d, 0x12, 0x2a,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x43, 0x0a, 0x15, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xb7, 0x02, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x1f, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x24, 0x51, 0x55, 0x4f, 0x54,
	0x41, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x21, 0x0a, 0x1f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x42, 0x6f, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x22, 0xad,
	0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x11, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x2d, 0x22, 0x3f,
	0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x53, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x8b, 0x02, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x22, 0x48,
	0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x45, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xec, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x22, 0x41, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x05, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x22,
	0x67, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x16, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x22, 0x3b, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a,
	0x15, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x3c, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x22, 0x66, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x22,
	0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x74,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x69,
	0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x2d, 0x12, 0x10, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x22, 0x50, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x18, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7b, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x32, 0x84, 0x6e, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0xc3, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x42, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x30, 0x0a, 0x11, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x12, 0xf1, 0x01, 0x0a,
	0x16, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x4f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x46, 0x0a, 0x27, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x4f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8,
	0x12, 0xe7, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x49, 0x4e, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x83, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x1a, 0x2d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x7d,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x69, 0x6e, 0xfa, 0x81, 0xf9, 0x1b,
	0x49, 0x0a, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x69, 0x6e,
	0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x12, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0x70, 0x69, 0x6e, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x12, 0xf1, 0x01, 0x0a, 0x16, 0x43,
	0x4d, 0x44, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x50, 0x49, 0x4e, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x50,
	0x49, 0x4e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x89, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x1a, 0x2f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x7d, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0xfa, 0x81, 0xf9, 0x1b,
	0x4d, 0x0a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x6e, 0x70,
	0x69, 0x6e, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x14, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0x12, 0xb2,
	0x01, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2a, 0x0a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xae, 0xa1,
	0xe6, 0x89, 0xb9, 0x12, 0xec, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x41, 0x50, 0x50,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x12,
	0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x82, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0xfa, 0x81, 0xf9, 0x1b, 0x4d, 0x0a, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x12, 0xe7, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x41, 0x55, 0x44, 0x49,
	0x54, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x12, 0x2e, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0xfa, 0x81, 0xf9, 0x1b, 0x46, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c, 0x8b, 0xe5, 0xae, 0xa1, 0xe8, 0xae, 0xa1,
	0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x12, 0xe0, 0x01, 0x0a,
	0x0f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x45, 0x54,
	0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x74, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x74, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x1a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0xfa, 0x81, 0xf9, 0x1b, 0x46, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xae, 0xa1,
	0xe8, 0xae, 0xa1, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0x12,
	0xfe, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x44, 0x45, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x12, 0x2e, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x1a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x52, 0x0a, 0x21,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe8, 0xa7, 0xa3, 0xe9, 0x99, 0xa4, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe5, 0x85,
	0xb3, 0xe8, 0x81, 0x94, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb,
	0x12, 0xdd, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x4c,
	0x4f, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4c, 0x6f, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x41, 0x0a,
	0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x32,
	0x02, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe4, 0xb8,
	0x8a, 0xe6, 0x8a, 0xa5, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97,
	0x12, 0xb5, 0x01, 0x0a, 0x10, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0xfa, 0x81, 0xf9,
	0x1b, 0x36, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x9b, 0xbe, 0xe7,
	0x89, 0x87, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x12, 0xbd, 0x01, 0x0a, 0x11, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x12, 0x2e,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f,
	0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0xfa, 0x81, 0xf9, 0x1b, 0x39, 0x0a,
	0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x9b, 0xbe, 0xe7,
	0x89, 0x87, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0x12, 0xb8, 0x01, 0x0a, 0x11, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x2e,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2a, 0x0a, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x20, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0xa9, 0x01, 0x0a, 0x11, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x2f,
	0x0a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0xb8, 0x01, 0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x30, 0x0a, 0x0b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x86, 0xe9, 0xa1, 0xb5, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0xa9, 0x01, 0x0a, 0x11, 0x43,
	0x4d, 0x44, 0x42, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x1a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x49,
	0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x2f, 0x0a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0xaa, 0x01, 0x0a, 0x0c, 0x43, 0x4d, 0x44, 0x42, 0x5f,
	0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d,
	0x44, 0x42, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e,
	0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0xfa, 0x81,
	0xf9, 0x1b, 0x30, 0x0a, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x12, 0xd9, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x44, 0x44, 0x12, 0x33,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x72, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x42, 0x0a, 0x23, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe5, 0x91, 0x98, 0x12,
	0xd5, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x44, 0x44, 0x55, 0x53, 0x45, 0x52, 0x12, 0x25,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x78, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x4b, 0x0a, 0x20, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6,
	0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0xae, 0xa1, 0xe6, 0xa0,
	0xb8, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x12, 0xfc, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0xfa, 0x81, 0xf9, 0x1b, 0x4c, 0x0a, 0x1e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01,
	0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x9c, 0x89,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x12, 0xf9, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x42, 0x5f,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x47, 0x45,
	0x54, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x56, 0x0a, 0x19, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x33, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe5, 0xae, 0xa1, 0xe6, 0xa0, 0xb8,
	0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xad, 0x98, 0xe5,
	0x9c, 0xa8, 0x12, 0xb6, 0x02, 0x0a, 0x22, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x42, 0x59,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x4f, 0x52, 0x49, 0x44, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x42, 0x79, 0x53, 0x70, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x42, 0x79, 0x53,
	0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x2d, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0xfa, 0x81, 0xf9, 0x1b, 0x70, 0x0a, 0x2b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x2d,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x3b,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x28, 0xe5, 0x8f, 0x91, 0xe8, 0xb5, 0xb7, 0xe4,
	0xba, 0xba, 0x29, 0xe5, 0x8f, 0x91, 0xe8, 0xb5, 0xb7, 0xe9, 0x83, 0xa8, 0xe7, 0xbd, 0xb2, 0xe5,
	0xae, 0xa1, 0xe6, 0x89, 0xb9, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x8a, 0x02, 0x0a, 0x1f,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x42, 0x59, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x85, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x2d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0xfa, 0x81, 0xf9,
	0x1b, 0x56, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x2a, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe5, 0xae, 0xa1, 0xe6, 0x89, 0xb9, 0xe7,
	0x9a, 0x84, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xc8, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x23, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x1a, 0x21, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0xfa, 0x81,
	0xf9, 0x1b, 0x40, 0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90,
	0xe5, 0x91, 0x98, 0x12, 0xb0, 0x01, 0x0a, 0x0d, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x42, 0x4f,
	0x58, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x4d, 0x42, 0x4f, 0x58, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x62, 0x6f, 0x78, 0x73, 0x2f, 0x7b, 0x6d,
	0x62, 0x6f, 0x78, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x3b, 0x0a, 0x13, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x62, 0x6f, 0x78, 0x73, 0x2f, 0x7b, 0x6d, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x7d,
	0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xab, 0x99, 0xe5, 0x86, 0x85, 0xe4, 0xbf, 0xa1,
	0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xaa, 0x01, 0x0a, 0x0e, 0x43, 0x4d, 0x44, 0x42, 0x5f,
	0x4d, 0x42, 0x4f, 0x58, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x42, 0x6f, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c,
	0x12, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x62, 0x6f, 0x78, 0x73, 0xfa, 0x81, 0xf9, 0x1b,
	0x32, 0x0a, 0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x62, 0x6f, 0x78, 0x73, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe7, 0xab, 0x99, 0xe5, 0x86, 0x85, 0xe4, 0xbf, 0xa1, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x12, 0xd8, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x42, 0x4f,
	0x58, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x42, 0x4f, 0x58, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x1b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x62, 0x6f, 0x78, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x61, 0x64, 0x2d, 0x61, 0x6c, 0x6c, 0xfa, 0x81, 0xf9, 0x1b, 0x51, 0x0a, 0x1b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x62, 0x6f, 0x78, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x61, 0x6c, 0x6c, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01,
	0x3a, 0x2c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x20, 0x6d, 0x62, 0x6f, 0x78, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0xc4,
	0x01, 0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x42, 0x4f, 0x58, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x53, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x42,
	0x4f, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x62, 0x6f, 0x78, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x46, 0x0a,
	0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x62, 0x6f, 0x78, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe7, 0xab, 0x99, 0xe5, 0x86, 0x85, 0xe4, 0xbf, 0xa1, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x12, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e,
	0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0xfa, 0x81,
	0xf9, 0x1b, 0x2b, 0x0a, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe5, 0x91, 0x98, 0x12, 0x96,
	0x02, 0x0a, 0x1d, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x43, 0x4f, 0x44, 0x45,
	0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x42, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x62, 0x79,
	0x2d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x57,
	0x0a, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x62, 0x79,
	0x2d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x04, 0x18, 0x01, 0x20,
	0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe9, 0x80, 0x9a, 0xe8,
	0xbf, 0x87, 0xe9, 0x82, 0x80, 0xe8, 0xaf, 0xb7, 0xe7, 0xa0, 0x81, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a,
	0xa0, 0xe6, 0x88, 0x90, 0xe5, 0x91, 0x98, 0x12, 0xf5, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0xfa,
	0x81, 0xf9, 0x1b, 0x4b, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x88, 0x90,
	0xe5, 0x91, 0x98, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12,
	0xaf, 0x01, 0x0a, 0x10, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x12, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x31,
	0x0a, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x88, 0x90, 0xe5, 0x91, 0x98, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x12, 0xcd, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x3a, 0x0a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x88, 0x90, 0xe5, 0x91,
	0x98, 0x12, 0x8d, 0x02, 0x0a, 0x19, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x59, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12,
	0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x2d, 0x6d, 0x79, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x59, 0x0a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6d, 0x79, 0x2d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6,
	0x88, 0x91, 0xe7, 0x9a, 0x84, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x12, 0xf1, 0x01, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4d, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x27, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x2d, 0x6d, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0xfa,
	0x81, 0xf9, 0x1b, 0x51, 0x0a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x2d, 0x6d, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe6, 0x88, 0x91, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xc3, 0x01, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x12,
	0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x31, 0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe9, 0xa1, 0xb9, 0x12, 0xe4, 0x01, 0x0a, 0x16,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x1a, 0x20, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9,
	0x1b, 0x40, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe9,
	0xa1, 0xb9, 0x12, 0xaf, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2a, 0x0a, 0x0d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x80,
	0x9a, 0xe7, 0x9f, 0xa5, 0x12, 0xcc, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x2f, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a,
	0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x35, 0x0a, 0x18,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x80, 0x9a,
	0xe7, 0x9f, 0xa5, 0x12, 0xdb, 0x01, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x30, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x1a, 0x28, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x45, 0x0a, 0x28, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xe9, 0x80, 0x9a, 0xe7, 0x9f,
	0xa5, 0x12, 0xd7, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x1a, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x44, 0x0a, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44,
	0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5,
	0x90, 0xaf, 0xe7, 0x94, 0xa8, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x12, 0xf0, 0x01, 0x0a, 0x17,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x46, 0x55, 0x5a, 0x5a,
	0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d,
	0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x46, 0x55, 0x5a, 0x5a, 0x59, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x86, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x2d, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2d, 0x62, 0x79, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x4e,
	0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x2d, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2d, 0x62, 0x79, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0xa8, 0xa1, 0xe7,
	0xb3, 0x8a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x12, 0xb9,
	0x01, 0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x47,
	0x45, 0x54, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x3b, 0x0a,
	0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1b, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0x80,
	0x9a, 0xe7, 0x9f, 0xa5, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xd1, 0x01, 0x0a, 0x15, 0x43,
	0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x49, 0x45, 0x53, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x35, 0x0a, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x32, 0x02, 0x10, 0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe9, 0xa1, 0xb9, 0x12, 0xac,
	0x01, 0x0a, 0x11, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x12, 0x27, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12,
	0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0xfa, 0x81,
	0xf9, 0x1b, 0x2a, 0x0a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x73, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x12, 0xc5, 0x01,
	0x0a, 0x12, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x12, 0x28, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x1a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x35,
	0x0a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x44, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x15,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9,
	0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0x12, 0xe4, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x44, 0x0a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x04, 0x18, 0x01, 0x20, 0x01, 0x3a,
	0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xd6, 0x01, 0x0a,
	0x15, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x12, 0x2b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0xfa, 0x81, 0xf9, 0x1b, 0x37, 0x0a, 0x1e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe9,
	0x89, 0xb4, 0xe6, 0x9d, 0x83, 0x12, 0xcf, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x31,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x3b, 0x0a, 0x10, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5,
	0x88, 0x97, 0xe5, 0x87, 0xba, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x89, 0x80, 0xe6, 0x9c,
	0x89, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x12, 0xfe, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x56, 0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x8a, 0x9f, 0xe8,
	0x83, 0xbd, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x12, 0x88, 0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x12, 0x2e, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81,
	0xf9, 0x1b, 0x50, 0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0x8a, 0x9f,
	0xe8, 0x83, 0xbd, 0x12, 0xa0, 0x02, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x53, 0x49, 0x4e, 0x46, 0x4f, 0x12,
	0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x53, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6e, 0x73, 0x2d, 0x69, 0x6e, 0x66, 0x6f,
	0xfa, 0x81, 0xf9, 0x1b, 0x61, 0x0a, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6e, 0x73, 0x2d,
	0x69, 0x6e, 0x66, 0x6f, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x2a, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe7, 0xba, 0xa7, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xd0, 0x02, 0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x42, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x5f,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x12, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xd8,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0xfa, 0x81, 0xf9, 0x1b, 0x88,
	0x01, 0x0a, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x3c, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0xb1, 0x87, 0xe6, 0x80, 0xbb, 0xe7, 0x9b,
	0x91, 0xe6, 0x8e, 0xa7, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0x9b, 0xb2, 0xe7, 0xba, 0xbf,
	0xe5, 0x9b, 0xbe, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x12, 0xcc, 0x01, 0x0a, 0x13, 0x43, 0x4d,
	0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x12, 0x29, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x1a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x38,
	0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x12, 0xe9, 0x01, 0x0a, 0x27, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2d, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x4b, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2d, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe8, 0x83,
	0xbd, 0xe5, 0x8a, 0x9b, 0x12, 0x81, 0x02, 0x0a, 0x27, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x12, 0x44, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x78,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2d, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x4b, 0x0a, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2d, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x8e, 0xaf, 0xe5,
	0xa2, 0x83, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x12, 0xd0, 0x02, 0x0a, 0x24, 0x43, 0x4d, 0x44,
	0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x47, 0x45,
	0x54, 0x12, 0x41, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2d, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0xfa, 0x81, 0xf9,
	0x1b, 0x69, 0x0a, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2d, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7,
	0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x12, 0xe9, 0x01, 0x0a, 0x27,
	0x43, 0x4d, 0x44, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x57, 0x4f, 0x52,
	0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x78, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x1a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2d, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x4b, 0x0a, 0x20, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2d, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2,
	0x83, 0xe8, 0x83, 0xbd, 0xe5, 0x8a, 0x9b, 0x12, 0x91, 0x02, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x42,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x5d, 0x0a, 0x24,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x2f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0x69, 0x64, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x88, 0x90, 0xe5, 0x91, 0x98, 0xe8,
	0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xd3, 0x01, 0x0a, 0x12,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x42, 0x4f, 0x58, 0x5f, 0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b,
	0x45, 0x54, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x42, 0x4f,
	0x58, 0x5f, 0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x74, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x2f, 0x7b, 0x61, 0x7d, 0x2f, 0x7b, 0x62, 0x7d, 0x2f, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0xfa, 0x81, 0xf9, 0x1b, 0x47, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x7b, 0x61, 0x7d, 0x2f, 0x7b,
	0x62, 0x7d, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x1f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x64, 0x69, 0x63, 0x65, 0x27,
	0x73, 0x20, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0xc8, 0x01, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x42, 0x4f, 0x58, 0x5f, 0x57,
	0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x34, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x42, 0x4f, 0x58, 0x5f, 0x57, 0x45, 0x42,
	0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0xfa, 0x81, 0xf9, 0x1b, 0x3f, 0x0a, 0x13, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x69, 0x6e,
	0x66, 0x6f, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0x64, 0x69, 0x63, 0x65, 0x27, 0x73, 0x20, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x20, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xb8, 0x01, 0x0a,
	0x1c, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x12, 0x39, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x20, 0x0a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x12, 0xa4, 0x01, 0x0a, 0x17, 0x51, 0x55, 0x4f, 0x54,
	0x41, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55,
	0x4f, 0x54, 0x41, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54,
	0x41, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2d, 0x71, 0x75, 0x6f, 0x74, 0x61, 0xfa, 0x81,
	0xf9, 0x1b, 0x1b, 0x0a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2d, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x1a, 0x0b,
	0xc2, 0xc4, 0xcb, 0x1c, 0x06, 0x22, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x42, 0x5a, 0x40, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_services_proto_rawDescOnce sync.Once
	file_core_services_proto_rawDescData = file_core_services_proto_rawDesc
)

func file_core_services_proto_rawDescGZIP() []byte {
	file_core_services_proto_rawDescOnce.Do(func() {
		file_core_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_services_proto_rawDescData)
	})
	return file_core_services_proto_rawDescData
}

var file_core_services_proto_msgTypes = make([]protoimpl.MessageInfo, 138)
var file_core_services_proto_goTypes = []interface{}{
	(*ApplicationDTO)(nil),                                  // 0: erda.openapiv1.core.ApplicationDTO
	(*ApplicationFetchRequest)(nil),                         // 1: erda.openapiv1.core.ApplicationFetchRequest
	(*ApplicationFetchResponse)(nil),                        // 2: erda.openapiv1.core.ApplicationFetchResponse
	(*ApplicationListRequest)(nil),                          // 3: erda.openapiv1.core.ApplicationListRequest
	(*ApplicationListResponse)(nil),                         // 4: erda.openapiv1.core.ApplicationListResponse
	(*ApplicationListResponseData)(nil),                     // 5: erda.openapiv1.core.ApplicationListResponseData
	(*ApplicationStats)(nil),                                // 6: erda.openapiv1.core.ApplicationStats
	(*ApplicationWorkspace)(nil),                            // 7: erda.openapiv1.core.ApplicationWorkspace
	(*ApproveCreateRequest)(nil),                            // 8: erda.openapiv1.core.ApproveCreateRequest
	(*ApproveCreateResponse)(nil),                           // 9: erda.openapiv1.core.ApproveCreateResponse
	(*ApproveDTO)(nil),                                      // 10: erda.openapiv1.core.ApproveDTO
	(*AuditListCleanCronRequest)(nil),                       // 11: erda.openapiv1.core.AuditListCleanCronRequest
	(*AuditListCleanCronResponse)(nil),                      // 12: erda.openapiv1.core.AuditListCleanCronResponse
	(*AuditSetCleanCronRequest)(nil),                        // 13: erda.openapiv1.core.AuditSetCleanCronRequest
	(*AuditSetCleanCronResponse)(nil),                       // 14: erda.openapiv1.core.AuditSetCleanCronResponse
	(*CMDB_APPLICATION_PIN_Request)(nil),                    // 15: erda.openapiv1.core.CMDB_APPLICATION_PIN_Request
	(*CMDB_APPLICATION_UNPIN_Request)(nil),                  // 16: erda.openapiv1.core.CMDB_APPLICATION_UNPIN_Request
	(*CMDB_APP_LIST_TEMPLATES_Request)(nil),                 // 17: erda.openapiv1.core.CMDB_APP_LIST_TEMPLATES_Request
	(*CMDB_IMAGE_FETCH_Request)(nil),                        // 18: erda.openapiv1.core.CMDB_IMAGE_FETCH_Request
	(*CMDB_IMAGE_UPLOAD_Request)(nil),                       // 19: erda.openapiv1.core.CMDB_IMAGE_UPLOAD_Request
	(*CMDB_LABEL_DELETE_Request)(nil),                       // 20: erda.openapiv1.core.CMDB_LABEL_DELETE_Request
	(*CMDB_LICENSE_Request)(nil),                            // 21: erda.openapiv1.core.CMDB_LICENSE_Request
	(*CMDB_MANUAL_REVIEW_ADD_Request)(nil),                  // 22: erda.openapiv1.core.CMDB_MANUAL_REVIEW_ADD_Request
	(*CMDB_MBOX_GET_Request)(nil),                           // 23: erda.openapiv1.core.CMDB_MBOX_GET_Request
	(*CMDB_MBOX_READ_ALL_Request)(nil),                      // 24: erda.openapiv1.core.CMDB_MBOX_READ_ALL_Request
	(*CMDB_MBOX_STATS_Request)(nil),                         // 25: erda.openapiv1.core.CMDB_MBOX_STATS_Request
	(*CMDB_MEMBER_LABEL_LIST_Request)(nil),                  // 26: erda.openapiv1.core.CMDB_MEMBER_LABEL_LIST_Request
	(*CMDB_NOTIFY_DELETE_Request)(nil),                      // 27: erda.openapiv1.core.CMDB_NOTIFY_DELETE_Request
	(*CMDB_NOTIFY_DISABLE_Request)(nil),                     // 28: erda.openapiv1.core.CMDB_NOTIFY_DISABLE_Request
	(*CMDB_NOTIFY_ENABLE_Request)(nil),                      // 29: erda.openapiv1.core.CMDB_NOTIFY_ENABLE_Request
	(*CMDB_NOTIFY_FUZZY_QUERY_Request)(nil),                 // 30: erda.openapiv1.core.CMDB_NOTIFY_FUZZY_QUERY_Request
	(*CMDB_NOTIFY_GET_Request)(nil),                         // 31: erda.openapiv1.core.CMDB_NOTIFY_GET_Request
	(*CMDB_PERMISSION_LIST_Request)(nil),                    // 32: erda.openapiv1.core.CMDB_PERMISSION_LIST_Request
	(*CMDB_PROJECT_FUNCTIONS_GET_Request)(nil),              // 33: erda.openapiv1.core.CMDB_PROJECT_FUNCTIONS_GET_Request
	(*CMDB_PROJECT_GET_NSINFO_Request)(nil),                 // 34: erda.openapiv1.core.CMDB_PROJECT_GET_NSINFO_Request
	(*CMDB_PROJECT_METRICS_HISTOGRAM_Request)(nil),          // 35: erda.openapiv1.core.CMDB_PROJECT_METRICS_HISTOGRAM_Request
	(*CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request)(nil), // 36: erda.openapiv1.core.CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request
	(*CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request)(nil),    // 37: erda.openapiv1.core.CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request
	(*CreateNotifyRequest)(nil),                             // 38: erda.openapiv1.core.CreateNotifyRequest
	(*CreateNotifyResponse)(nil),                            // 39: erda.openapiv1.core.CreateNotifyResponse
	(*CreateReviewUser)(nil),                                // 40: erda.openapiv1.core.CreateReviewUser
	(*DeleteNotifyResponse)(nil),                            // 41: erda.openapiv1.core.DeleteNotifyResponse
	(*DereferenceClusterRequest)(nil),                       // 42: erda.openapiv1.core.DereferenceClusterRequest
	(*DereferenceClusterResponse)(nil),                      // 43: erda.openapiv1.core.DereferenceClusterResponse
	(*EVENTBOX_WEBSOCKET_INFO_Request)(nil),                 // 44: erda.openapiv1.core.EVENTBOX_WEBSOCKET_INFO_Request
	(*EVENTBOX_WEBSOCKET_Request)(nil),                      // 45: erda.openapiv1.core.EVENTBOX_WEBSOCKET_Request
	(*ErrorLog)(nil),                                        // 46: erda.openapiv1.core.ErrorLog
	(*ErrorLogCreateRequest)(nil),                           // 47: erda.openapiv1.core.ErrorLogCreateRequest
	(*ErrorLogCreateResponse)(nil),                          // 48: erda.openapiv1.core.ErrorLogCreateResponse
	(*GetAuthorityByUserIdRequest)(nil),                     // 49: erda.openapiv1.core.GetAuthorityByUserIdRequest
	(*GetAuthorityByUserIdResponse)(nil),                    // 50: erda.openapiv1.core.GetAuthorityByUserIdResponse
	(*GetReviewByTaskIdIdRequest)(nil),                      // 51: erda.openapiv1.core.GetReviewByTaskIdIdRequest
	(*GetReviewByTaskIdIdResponse)(nil),                     // 52: erda.openapiv1.core.GetReviewByTaskIdIdResponse
	(*GetReviewsBySponsorIdRequest)(nil),                    // 53: erda.openapiv1.core.GetReviewsBySponsorIdRequest
	(*GetReviewsBySponsorIdResponse)(nil),                   // 54: erda.openapiv1.core.GetReviewsBySponsorIdResponse
	(*GetReviewsByUserIdRequest)(nil),                       // 55: erda.openapiv1.core.GetReviewsByUserIdRequest
	(*GetReviewsByUserIdResponse)(nil),                      // 56: erda.openapiv1.core.GetReviewsByUserIdResponse
	(*LicenseResponse)(nil),                                 // 57: erda.openapiv1.core.LicenseResponse
	(*ListMemberRolesByUserRequest)(nil),                    // 58: erda.openapiv1.core.ListMemberRolesByUserRequest
	(*ListMemberRolesByUserResponse)(nil),                   // 59: erda.openapiv1.core.ListMemberRolesByUserResponse
	(*Member)(nil),                                          // 60: erda.openapiv1.core.Member
	(*MemberAddByInviteCodeRequest)(nil),                    // 61: erda.openapiv1.core.MemberAddByInviteCodeRequest
	(*MemberAddByInviteCodeResponse)(nil),                   // 62: erda.openapiv1.core.MemberAddByInviteCodeResponse
	(*MemberAddOptions)(nil),                                // 63: erda.openapiv1.core.MemberAddOptions
	(*MemberAddRequest)(nil),                                // 64: erda.openapiv1.core.MemberAddRequest
	(*MemberAddResponse)(nil),                               // 65: erda.openapiv1.core.MemberAddResponse
	(*MemberLabelInfo)(nil),                                 // 66: erda.openapiv1.core.MemberLabelInfo
	(*MemberLabelList)(nil),                                 // 67: erda.openapiv1.core.MemberLabelList
	(*MemberLabelListResponse)(nil),                         // 68: erda.openapiv1.core.MemberLabelListResponse
	(*MemberList)(nil),                                      // 69: erda.openapiv1.core.MemberList
	(*MemberListRequest)(nil),                               // 70: erda.openapiv1.core.MemberListRequest
	(*MemberListResponse)(nil),                              // 71: erda.openapiv1.core.MemberListResponse
	(*MemberRemoveRequest)(nil),                             // 72: erda.openapiv1.core.MemberRemoveRequest
	(*MemberRemoveResponse)(nil),                            // 73: erda.openapiv1.core.MemberRemoveResponse
	(*NotifySource)(nil),                                    // 74: erda.openapiv1.core.NotifySource
	(*NotifyTarget)(nil),                                    // 75: erda.openapiv1.core.NotifyTarget
	(*PagingProjectDTO)(nil),                                // 76: erda.openapiv1.core.PagingProjectDTO
	(*PermissionCheckRequest)(nil),                          // 77: erda.openapiv1.core.PermissionCheckRequest
	(*PermissionCheckResponse)(nil),                         // 78: erda.openapiv1.core.PermissionCheckResponse
	(*PermissionCheckResponseData)(nil),                     // 79: erda.openapiv1.core.PermissionCheckResponseData
	(*PermissionList)(nil),                                  // 80: erda.openapiv1.core.PermissionList
	(*PermissionListResponse)(nil),                          // 81: erda.openapiv1.core.PermissionListResponse
	(*ProjectDTO)(nil),                                      // 82: erda.openapiv1.core.ProjectDTO
	(*ProjectFunctionSetRequest)(nil),                       // 83: erda.openapiv1.core.ProjectFunctionSetRequest
	(*ProjectFunctionSetResponse)(nil),                      // 84: erda.openapiv1.core.ProjectFunctionSetResponse
	(*ProjectLabelCreateRequest)(nil),                       // 85: erda.openapiv1.core.ProjectLabelCreateRequest
	(*ProjectLabelCreateResponse)(nil),                      // 86: erda.openapiv1.core.ProjectLabelCreateResponse
	(*ProjectLabelListRequest)(nil),                         // 87: erda.openapiv1.core.ProjectLabelListRequest
	(*ProjectLabelListResponse)(nil),                        // 88: erda.openapiv1.core.ProjectLabelListResponse
	(*ProjectLabelUpdateRequest)(nil),                       // 89: erda.openapiv1.core.ProjectLabelUpdateRequest
	(*ProjectListRequest)(nil),                              // 90: erda.openapiv1.core.ProjectListRequest
	(*ProjectListResponse)(nil),                             // 91: erda.openapiv1.core.ProjectListResponse
	(*ProjectNameSpaceInfo)(nil),                            // 92: erda.openapiv1.core.ProjectNameSpaceInfo
	(*ProjectNameSpaceInfoResponse)(nil),                    // 93: erda.openapiv1.core.ProjectNameSpaceInfoResponse
	(*ProjectResourceUsage)(nil),                            // 94: erda.openapiv1.core.ProjectResourceUsage
	(*ProjectStats)(nil),                                    // 95: erda.openapiv1.core.ProjectStats
	(*ProjectUpdateBody)(nil),                               // 96: erda.openapiv1.core.ProjectUpdateBody
	(*ProjectUpdateRequest)(nil),                            // 97: erda.openapiv1.core.ProjectUpdateRequest
	(*ProjectUpdateResponse)(nil),                           // 98: erda.openapiv1.core.ProjectUpdateResponse
	(*ProjectWorkSpaceAbility)(nil),                         // 99: erda.openapiv1.core.ProjectWorkSpaceAbility
	(*ProjectWorkSpaceAbilityResponse)(nil),                 // 100: erda.openapiv1.core.ProjectWorkSpaceAbilityResponse
	(*QUOTA_GET_PROJECT_NAMESPACES_Request)(nil),            // 101: erda.openapiv1.core.QUOTA_GET_PROJECT_NAMESPACES_Request
	(*QUOTA_GET_PROJECT_QUOTA_Request)(nil),                 // 102: erda.openapiv1.core.QUOTA_GET_PROJECT_QUOTA_Request
	(*QueryMBoxData)(nil),                                   // 103: erda.openapiv1.core.QueryMBoxData
	(*QueryMBoxRequest)(nil),                                // 104: erda.openapiv1.core.QueryMBoxRequest
	(*QueryMBoxResponse)(nil),                               // 105: erda.openapiv1.core.QueryMBoxResponse
	(*QueryNotifyData)(nil),                                 // 106: erda.openapiv1.core.QueryNotifyData
	(*QueryNotifyHistoryData)(nil),                          // 107: erda.openapiv1.core.QueryNotifyHistoryData
	(*QueryNotifyHistoryRequest)(nil),                       // 108: erda.openapiv1.core.QueryNotifyHistoryRequest
	(*QueryNotifyHistoryResponse)(nil),                      // 109: erda.openapiv1.core.QueryNotifyHistoryResponse
	(*QueryNotifyItemData)(nil),                             // 110: erda.openapiv1.core.QueryNotifyItemData
	(*QueryNotifyItemRequest)(nil),                          // 111: erda.openapiv1.core.QueryNotifyItemRequest
	(*QueryNotifyItemResponse)(nil),                         // 112: erda.openapiv1.core.QueryNotifyItemResponse
	(*QueryNotifyRequest)(nil),                              // 113: erda.openapiv1.core.QueryNotifyRequest
	(*QueryNotifyResponse)(nil),                             // 114: erda.openapiv1.core.QueryNotifyResponse
	(*Scope)(nil),                                           // 115: erda.openapiv1.core.Scope
	(*ScopeResource)(nil),                                   // 116: erda.openapiv1.core.ScopeResource
	(*ScopeRole)(nil),                                       // 117: erda.openapiv1.core.ScopeRole
	(*ScopeRoleAccessRequest)(nil),                          // 118: erda.openapiv1.core.ScopeRoleAccessRequest
	(*ScopeRoleList)(nil),                                   // 119: erda.openapiv1.core.ScopeRoleList
	(*ScopeRoleListResponse)(nil),                           // 120: erda.openapiv1.core.ScopeRoleListResponse
	(*Target)(nil),                                          // 121: erda.openapiv1.core.Target
	(*UpdateApproval)(nil),                                  // 122: erda.openapiv1.core.UpdateApproval
	(*UpdateNotifyItemRequest)(nil),                         // 123: erda.openapiv1.core.UpdateNotifyItemRequest
	(*UpdateNotifyItemResponse)(nil),                        // 124: erda.openapiv1.core.UpdateNotifyItemResponse
	(*UpdateNotifyRequest)(nil),                             // 125: erda.openapiv1.core.UpdateNotifyRequest
	(*UpdateNotifyResponse)(nil),                            // 126: erda.openapiv1.core.UpdateNotifyResponse
	(*UserRoleListResponseData)(nil),                        // 127: erda.openapiv1.core.UserRoleListResponseData
	(*UserScopeRole)(nil),                                   // 128: erda.openapiv1.core.UserScopeRole
	nil,                                                     // 129: erda.openapiv1.core.ApplicationDTO.ConfigEntry
	nil,                                                     // 130: erda.openapiv1.core.ApproveCreateRequest.ExtraEntry
	nil,                                                     // 131: erda.openapiv1.core.ApproveDTO.ExtraEntry
	nil,                                                     // 132: erda.openapiv1.core.ProjectDTO.ClusterConfigEntry
	nil,                                                     // 133: erda.openapiv1.core.ProjectDTO.RollbackConfigEntry
	nil,                                                     // 134: erda.openapiv1.core.ProjectFunctionSetRequest.ProjectFunctionEntry
	nil,                                                     // 135: erda.openapiv1.core.ProjectNameSpaceInfo.NamespacesEntry
	nil,                                                     // 136: erda.openapiv1.core.ProjectUpdateBody.ClusterConfigEntry
	nil,                                                     // 137: erda.openapiv1.core.ProjectUpdateBody.RollbackConfigEntry
	(*timestamppb.Timestamp)(nil),                           // 138: google.protobuf.Timestamp
	(*structpb.Value)(nil),                                  // 139: google.protobuf.Value
	(*emptypb.Empty)(nil),                                   // 140: google.protobuf.Empty
}
var file_core_services_proto_depIdxs = []int32{
	129, // 0: erda.openapiv1.core.ApplicationDTO.config:type_name -> erda.openapiv1.core.ApplicationDTO.ConfigEntry
	138, // 1: erda.openapiv1.core.ApplicationDTO.unBlockStart:type_name -> google.protobuf.Timestamp
	138, // 2: erda.openapiv1.core.ApplicationDTO.unBlockEnd:type_name -> google.protobuf.Timestamp
	139, // 3: erda.openapiv1.core.ApplicationDTO.stats:type_name -> google.protobuf.Value
	139, // 4: erda.openapiv1.core.ApplicationDTO.workspaces:type_name -> google.protobuf.Value
	139, // 5: erda.openapiv1.core.ApplicationDTO.repoConfig:type_name -> google.protobuf.Value
	139, // 6: erda.openapiv1.core.ApplicationDTO.sonarConfig:type_name -> google.protobuf.Value
	138, // 7: erda.openapiv1.core.ApplicationDTO.createdAt:type_name -> google.protobuf.Timestamp
	138, // 8: erda.openapiv1.core.ApplicationDTO.updatedAt:type_name -> google.protobuf.Timestamp
	139, // 9: erda.openapiv1.core.ApplicationFetchResponse.data:type_name -> google.protobuf.Value
	139, // 10: erda.openapiv1.core.ApplicationListResponse.data:type_name -> google.protobuf.Value
	139, // 11: erda.openapiv1.core.ApplicationListResponseData.list:type_name -> google.protobuf.Value
	130, // 12: erda.openapiv1.core.ApproveCreateRequest.extra:type_name -> erda.openapiv1.core.ApproveCreateRequest.ExtraEntry
	139, // 13: erda.openapiv1.core.ApproveCreateResponse.data:type_name -> google.protobuf.Value
	131, // 14: erda.openapiv1.core.ApproveDTO.extra:type_name -> erda.openapiv1.core.ApproveDTO.ExtraEntry
	138, // 15: erda.openapiv1.core.ApproveDTO.approvalTime:type_name -> google.protobuf.Timestamp
	138, // 16: erda.openapiv1.core.ApproveDTO.createdAt:type_name -> google.protobuf.Timestamp
	138, // 17: erda.openapiv1.core.ApproveDTO.updatedAt:type_name -> google.protobuf.Timestamp
	139, // 18: erda.openapiv1.core.AuditListCleanCronResponse.data:type_name -> google.protobuf.Value
	139, // 19: erda.openapiv1.core.CreateNotifyRequest.groupTargets:type_name -> google.protobuf.Value
	139, // 20: erda.openapiv1.core.CreateNotifyRequest.notifySources:type_name -> google.protobuf.Value
	139, // 21: erda.openapiv1.core.CreateNotifyResponse.data:type_name -> google.protobuf.Value
	138, // 22: erda.openapiv1.core.CreateReviewUser.createdAt:type_name -> google.protobuf.Timestamp
	139, // 23: erda.openapiv1.core.DeleteNotifyResponse.data:type_name -> google.protobuf.Value
	139, // 24: erda.openapiv1.core.ErrorLogCreateRequest.errorLog:type_name -> google.protobuf.Value
	138, // 25: erda.openapiv1.core.GetReviewsByUserIdResponse.createdAt:type_name -> google.protobuf.Timestamp
	138, // 26: erda.openapiv1.core.GetReviewsByUserIdResponse.updatedAt:type_name -> google.protobuf.Timestamp
	139, // 27: erda.openapiv1.core.LicenseResponse.license:type_name -> google.protobuf.Value
	139, // 28: erda.openapiv1.core.ListMemberRolesByUserResponse.data:type_name -> google.protobuf.Value
	139, // 29: erda.openapiv1.core.Member.scope:type_name -> google.protobuf.Value
	139, // 30: erda.openapiv1.core.MemberAddRequest.scope:type_name -> google.protobuf.Value
	139, // 31: erda.openapiv1.core.MemberAddRequest.options:type_name -> google.protobuf.Value
	139, // 32: erda.openapiv1.core.MemberLabelList.list:type_name -> google.protobuf.Value
	139, // 33: erda.openapiv1.core.MemberLabelListResponse.data:type_name -> google.protobuf.Value
	139, // 34: erda.openapiv1.core.MemberList.list:type_name -> google.protobuf.Value
	139, // 35: erda.openapiv1.core.MemberListResponse.data:type_name -> google.protobuf.Value
	139, // 36: erda.openapiv1.core.MemberRemoveRequest.scope:type_name -> google.protobuf.Value
	139, // 37: erda.openapiv1.core.NotifySource.params:type_name -> google.protobuf.Value
	139, // 38: erda.openapiv1.core.NotifyTarget.values:type_name -> google.protobuf.Value
	139, // 39: erda.openapiv1.core.PagingProjectDTO.list:type_name -> google.protobuf.Value
	139, // 40: erda.openapiv1.core.PermissionCheckResponse.data:type_name -> google.protobuf.Value
	139, // 41: erda.openapiv1.core.PermissionList.permissionList:type_name -> google.protobuf.Value
	139, // 42: erda.openapiv1.core.PermissionList.resourceRoleList:type_name -> google.protobuf.Value
	139, // 43: erda.openapiv1.core.PermissionList.scopeInfo:type_name -> google.protobuf.Value
	139, // 44: erda.openapiv1.core.PermissionListResponse.data:type_name -> google.protobuf.Value
	139, // 45: erda.openapiv1.core.ProjectDTO.stats:type_name -> google.protobuf.Value
	139, // 46: erda.openapiv1.core.ProjectDTO.projectResourceUsage:type_name -> google.protobuf.Value
	132, // 47: erda.openapiv1.core.ProjectDTO.clusterConfig:type_name -> erda.openapiv1.core.ProjectDTO.ClusterConfigEntry
	139, // 48: erda.openapiv1.core.ProjectDTO.resourceConfig:type_name -> google.protobuf.Value
	133, // 49: erda.openapiv1.core.ProjectDTO.rollbackConfig:type_name -> erda.openapiv1.core.ProjectDTO.RollbackConfigEntry
	138, // 50: erda.openapiv1.core.ProjectDTO.createdAt:type_name -> google.protobuf.Timestamp
	138, // 51: erda.openapiv1.core.ProjectDTO.updatedAt:type_name -> google.protobuf.Timestamp
	134, // 52: erda.openapiv1.core.ProjectFunctionSetRequest.projectFunction:type_name -> erda.openapiv1.core.ProjectFunctionSetRequest.ProjectFunctionEntry
	139, // 53: erda.openapiv1.core.ProjectLabelListResponse.data:type_name -> google.protobuf.Value
	139, // 54: erda.openapiv1.core.ProjectListResponse.data:type_name -> google.protobuf.Value
	135, // 55: erda.openapiv1.core.ProjectNameSpaceInfo.namespaces:type_name -> erda.openapiv1.core.ProjectNameSpaceInfo.NamespacesEntry
	139, // 56: erda.openapiv1.core.ProjectNameSpaceInfoResponse.data:type_name -> google.protobuf.Value
	136, // 57: erda.openapiv1.core.ProjectUpdateBody.clusterConfig:type_name -> erda.openapiv1.core.ProjectUpdateBody.ClusterConfigEntry
	139, // 58: erda.openapiv1.core.ProjectUpdateBody.resourceConfigs:type_name -> google.protobuf.Value
	137, // 59: erda.openapiv1.core.ProjectUpdateBody.rollbackConfig:type_name -> erda.openapiv1.core.ProjectUpdateBody.RollbackConfigEntry
	139, // 60: erda.openapiv1.core.ProjectUpdateRequest.body:type_name -> google.protobuf.Value
	139, // 61: erda.openapiv1.core.ProjectUpdateResponse.data:type_name -> google.protobuf.Value
	138, // 62: erda.openapiv1.core.ProjectWorkSpaceAbility.updatedAt:type_name -> google.protobuf.Timestamp
	138, // 63: erda.openapiv1.core.ProjectWorkSpaceAbility.createdAt:type_name -> google.protobuf.Timestamp
	139, // 64: erda.openapiv1.core.ProjectWorkSpaceAbilityResponse.data:type_name -> google.protobuf.Value
	139, // 65: erda.openapiv1.core.QueryMBoxData.list:type_name -> google.protobuf.Value
	139, // 66: erda.openapiv1.core.QueryMBoxResponse.data:type_name -> google.protobuf.Value
	139, // 67: erda.openapiv1.core.QueryNotifyData.list:type_name -> google.protobuf.Value
	139, // 68: erda.openapiv1.core.QueryNotifyHistoryData.list:type_name -> google.protobuf.Value
	139, // 69: erda.openapiv1.core.QueryNotifyHistoryResponse.data:type_name -> google.protobuf.Value
	139, // 70: erda.openapiv1.core.QueryNotifyItemData.list:type_name -> google.protobuf.Value
	139, // 71: erda.openapiv1.core.QueryNotifyItemResponse.data:type_name -> google.protobuf.Value
	139, // 72: erda.openapiv1.core.QueryNotifyResponse.data:type_name -> google.protobuf.Value
	139, // 73: erda.openapiv1.core.ScopeRole.scope:type_name -> google.protobuf.Value
	139, // 74: erda.openapiv1.core.ScopeRoleAccessRequest.scope:type_name -> google.protobuf.Value
	139, // 75: erda.openapiv1.core.ScopeRoleList.list:type_name -> google.protobuf.Value
	139, // 76: erda.openapiv1.core.ScopeRoleListResponse.data:type_name -> google.protobuf.Value
	139, // 77: erda.openapiv1.core.UpdateNotifyRequest.notifySources:type_name -> google.protobuf.Value
	139, // 78: erda.openapiv1.core.UpdateNotifyRequest.groupTargets:type_name -> google.protobuf.Value
	139, // 79: erda.openapiv1.core.UpdateNotifyResponse.data:type_name -> google.protobuf.Value
	139, // 80: erda.openapiv1.core.UserRoleListResponseData.list:type_name -> google.protobuf.Value
	139, // 81: erda.openapiv1.core.ApplicationDTO.ConfigEntry.value:type_name -> google.protobuf.Value
	3,   // 82: erda.openapiv1.core.core_services.CMDB_APPLICATIONS_LIST:input_type -> erda.openapiv1.core.ApplicationListRequest
	1,   // 83: erda.openapiv1.core.core_services.CMDB_APPLICATION_FETCH:input_type -> erda.openapiv1.core.ApplicationFetchRequest
	15,  // 84: erda.openapiv1.core.core_services.CMDB_APPLICATION_PIN:input_type -> erda.openapiv1.core.CMDB_APPLICATION_PIN_Request
	16,  // 85: erda.openapiv1.core.core_services.CMDB_APPLICATION_UNPIN:input_type -> erda.openapiv1.core.CMDB_APPLICATION_UNPIN_Request
	8,   // 86: erda.openapiv1.core.core_services.CMDB_APPROVE_CREATE:input_type -> erda.openapiv1.core.ApproveCreateRequest
	17,  // 87: erda.openapiv1.core.core_services.CMDB_APP_LIST_TEMPLATES:input_type -> erda.openapiv1.core.CMDB_APP_LIST_TEMPLATES_Request
	11,  // 88: erda.openapiv1.core.core_services.CMDB_AUDITS_LIST_SET:input_type -> erda.openapiv1.core.AuditListCleanCronRequest
	13,  // 89: erda.openapiv1.core.core_services.CMDB_AUDITS_SET:input_type -> erda.openapiv1.core.AuditSetCleanCronRequest
	42,  // 90: erda.openapiv1.core.core_services.CMDB_CLUSTER_DEREFERENCE:input_type -> erda.openapiv1.core.DereferenceClusterRequest
	47,  // 91: erda.openapiv1.core.core_services.CMDB_ERRORLOG_CREATE:input_type -> erda.openapiv1.core.ErrorLogCreateRequest
	18,  // 92: erda.openapiv1.core.core_services.CMDB_IMAGE_FETCH:input_type -> erda.openapiv1.core.CMDB_IMAGE_FETCH_Request
	19,  // 93: erda.openapiv1.core.core_services.CMDB_IMAGE_UPLOAD:input_type -> erda.openapiv1.core.CMDB_IMAGE_UPLOAD_Request
	85,  // 94: erda.openapiv1.core.core_services.CMDB_LABEL_CREATE:input_type -> erda.openapiv1.core.ProjectLabelCreateRequest
	20,  // 95: erda.openapiv1.core.core_services.CMDB_LABEL_DELETE:input_type -> erda.openapiv1.core.CMDB_LABEL_DELETE_Request
	87,  // 96: erda.openapiv1.core.core_services.CMDB_LABEL_LIST:input_type -> erda.openapiv1.core.ProjectLabelListRequest
	89,  // 97: erda.openapiv1.core.core_services.CMDB_LABEL_UPDATE:input_type -> erda.openapiv1.core.ProjectLabelUpdateRequest
	21,  // 98: erda.openapiv1.core.core_services.CMDB_LICENSE:input_type -> erda.openapiv1.core.CMDB_LICENSE_Request
	22,  // 99: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_ADD:input_type -> erda.openapiv1.core.CMDB_MANUAL_REVIEW_ADD_Request
	40,  // 100: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_ADDUSER:input_type -> erda.openapiv1.core.CreateReviewUser
	49,  // 101: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_AUTHORITY:input_type -> erda.openapiv1.core.GetAuthorityByUserIdRequest
	51,  // 102: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_GET:input_type -> erda.openapiv1.core.GetReviewByTaskIdIdRequest
	53,  // 103: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_LISTBYSPONSORID:input_type -> erda.openapiv1.core.GetReviewsBySponsorIdRequest
	55,  // 104: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_LISTBYUserID:input_type -> erda.openapiv1.core.GetReviewsByUserIdRequest
	122, // 105: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_UPDATE:input_type -> erda.openapiv1.core.UpdateApproval
	23,  // 106: erda.openapiv1.core.core_services.CMDB_MBOX_GET:input_type -> erda.openapiv1.core.CMDB_MBOX_GET_Request
	104, // 107: erda.openapiv1.core.core_services.CMDB_MBOX_LIST:input_type -> erda.openapiv1.core.QueryMBoxRequest
	24,  // 108: erda.openapiv1.core.core_services.CMDB_MBOX_READ_ALL:input_type -> erda.openapiv1.core.CMDB_MBOX_READ_ALL_Request
	25,  // 109: erda.openapiv1.core.core_services.CMDB_MBOX_STATS:input_type -> erda.openapiv1.core.CMDB_MBOX_STATS_Request
	64,  // 110: erda.openapiv1.core.core_services.CMDB_MEMBER_ADD:input_type -> erda.openapiv1.core.MemberAddRequest
	61,  // 111: erda.openapiv1.core.core_services.CMDB_MEMBER_ADD_BY_INVITECODE:input_type -> erda.openapiv1.core.MemberAddByInviteCodeRequest
	26,  // 112: erda.openapiv1.core.core_services.CMDB_MEMBER_LABEL_LIST:input_type -> erda.openapiv1.core.CMDB_MEMBER_LABEL_LIST_Request
	70,  // 113: erda.openapiv1.core.core_services.CMDB_MEMBER_LIST:input_type -> erda.openapiv1.core.MemberListRequest
	72,  // 114: erda.openapiv1.core.core_services.CMDB_MEMBER_REMOVE:input_type -> erda.openapiv1.core.MemberRemoveRequest
	3,   // 115: erda.openapiv1.core.core_services.CMDB_MY_APPLICATIONS_LIST:input_type -> erda.openapiv1.core.ApplicationListRequest
	90,  // 116: erda.openapiv1.core.core_services.CMDB_MY_PROJECTS_LIST:input_type -> erda.openapiv1.core.ProjectListRequest
	111, // 117: erda.openapiv1.core.core_services.CMDB_NOTIFYITEM_QUERY:input_type -> erda.openapiv1.core.QueryNotifyItemRequest
	123, // 118: erda.openapiv1.core.core_services.CMDB_NOTIFYITEM_UPDATE:input_type -> erda.openapiv1.core.UpdateNotifyItemRequest
	38,  // 119: erda.openapiv1.core.core_services.CMDB_NOTIFY_CREATE:input_type -> erda.openapiv1.core.CreateNotifyRequest
	27,  // 120: erda.openapiv1.core.core_services.CMDB_NOTIFY_DELETE:input_type -> erda.openapiv1.core.CMDB_NOTIFY_DELETE_Request
	28,  // 121: erda.openapiv1.core.core_services.CMDB_NOTIFY_DISABLE:input_type -> erda.openapiv1.core.CMDB_NOTIFY_DISABLE_Request
	29,  // 122: erda.openapiv1.core.core_services.CMDB_NOTIFY_ENABLE:input_type -> erda.openapiv1.core.CMDB_NOTIFY_ENABLE_Request
	30,  // 123: erda.openapiv1.core.core_services.CMDB_NOTIFY_FUZZY_QUERY:input_type -> erda.openapiv1.core.CMDB_NOTIFY_FUZZY_QUERY_Request
	31,  // 124: erda.openapiv1.core.core_services.CMDB_NOTIFY_GET:input_type -> erda.openapiv1.core.CMDB_NOTIFY_GET_Request
	108, // 125: erda.openapiv1.core.core_services.CMDB_NOTIFY_HISTORIES:input_type -> erda.openapiv1.core.QueryNotifyHistoryRequest
	113, // 126: erda.openapiv1.core.core_services.CMDB_NOTIFY_QUERY:input_type -> erda.openapiv1.core.QueryNotifyRequest
	125, // 127: erda.openapiv1.core.core_services.CMDB_NOTIFY_UPDATE:input_type -> erda.openapiv1.core.UpdateNotifyRequest
	118, // 128: erda.openapiv1.core.core_services.CMDB_PERMISSION_ACCESS:input_type -> erda.openapiv1.core.ScopeRoleAccessRequest
	77,  // 129: erda.openapiv1.core.core_services.CMDB_PERMISSION_CHECK:input_type -> erda.openapiv1.core.PermissionCheckRequest
	32,  // 130: erda.openapiv1.core.core_services.CMDB_PERMISSION_LIST:input_type -> erda.openapiv1.core.CMDB_PERMISSION_LIST_Request
	33,  // 131: erda.openapiv1.core.core_services.CMDB_PROJECT_FUNCTIONS_GET:input_type -> erda.openapiv1.core.CMDB_PROJECT_FUNCTIONS_GET_Request
	83,  // 132: erda.openapiv1.core.core_services.CMDB_PROJECT_FUNCTIONS_SET:input_type -> erda.openapiv1.core.ProjectFunctionSetRequest
	34,  // 133: erda.openapiv1.core.core_services.CMDB_PROJECT_GET_NSINFO:input_type -> erda.openapiv1.core.CMDB_PROJECT_GET_NSINFO_Request
	35,  // 134: erda.openapiv1.core.core_services.CMDB_PROJECT_METRICS_HISTOGRAM:input_type -> erda.openapiv1.core.CMDB_PROJECT_METRICS_HISTOGRAM_Request
	97,  // 135: erda.openapiv1.core.core_services.CMDB_PROJECT_UPDATE:input_type -> erda.openapiv1.core.ProjectUpdateRequest
	99,  // 136: erda.openapiv1.core.core_services.CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE:input_type -> erda.openapiv1.core.ProjectWorkSpaceAbility
	36,  // 137: erda.openapiv1.core.core_services.CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE:input_type -> erda.openapiv1.core.CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request
	37,  // 138: erda.openapiv1.core.core_services.CMDB_PROJECT_WORKSPACE_ABILITIES_GET:input_type -> erda.openapiv1.core.CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request
	99,  // 139: erda.openapiv1.core.core_services.CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE:input_type -> erda.openapiv1.core.ProjectWorkSpaceAbility
	58,  // 140: erda.openapiv1.core.core_services.CMDB_ROLES_LIST_BY_USER:input_type -> erda.openapiv1.core.ListMemberRolesByUserRequest
	45,  // 141: erda.openapiv1.core.core_services.EVENTBOX_WEBSOCKET:input_type -> erda.openapiv1.core.EVENTBOX_WEBSOCKET_Request
	44,  // 142: erda.openapiv1.core.core_services.EVENTBOX_WEBSOCKET_INFO:input_type -> erda.openapiv1.core.EVENTBOX_WEBSOCKET_INFO_Request
	101, // 143: erda.openapiv1.core.core_services.QUOTA_GET_PROJECT_NAMESPACES:input_type -> erda.openapiv1.core.QUOTA_GET_PROJECT_NAMESPACES_Request
	102, // 144: erda.openapiv1.core.core_services.QUOTA_GET_PROJECT_QUOTA:input_type -> erda.openapiv1.core.QUOTA_GET_PROJECT_QUOTA_Request
	4,   // 145: erda.openapiv1.core.core_services.CMDB_APPLICATIONS_LIST:output_type -> erda.openapiv1.core.ApplicationListResponse
	2,   // 146: erda.openapiv1.core.core_services.CMDB_APPLICATION_FETCH:output_type -> erda.openapiv1.core.ApplicationFetchResponse
	140, // 147: erda.openapiv1.core.core_services.CMDB_APPLICATION_PIN:output_type -> google.protobuf.Empty
	140, // 148: erda.openapiv1.core.core_services.CMDB_APPLICATION_UNPIN:output_type -> google.protobuf.Empty
	9,   // 149: erda.openapiv1.core.core_services.CMDB_APPROVE_CREATE:output_type -> erda.openapiv1.core.ApproveCreateResponse
	140, // 150: erda.openapiv1.core.core_services.CMDB_APP_LIST_TEMPLATES:output_type -> google.protobuf.Empty
	12,  // 151: erda.openapiv1.core.core_services.CMDB_AUDITS_LIST_SET:output_type -> erda.openapiv1.core.AuditListCleanCronResponse
	14,  // 152: erda.openapiv1.core.core_services.CMDB_AUDITS_SET:output_type -> erda.openapiv1.core.AuditSetCleanCronResponse
	43,  // 153: erda.openapiv1.core.core_services.CMDB_CLUSTER_DEREFERENCE:output_type -> erda.openapiv1.core.DereferenceClusterResponse
	48,  // 154: erda.openapiv1.core.core_services.CMDB_ERRORLOG_CREATE:output_type -> erda.openapiv1.core.ErrorLogCreateResponse
	140, // 155: erda.openapiv1.core.core_services.CMDB_IMAGE_FETCH:output_type -> google.protobuf.Empty
	140, // 156: erda.openapiv1.core.core_services.CMDB_IMAGE_UPLOAD:output_type -> google.protobuf.Empty
	86,  // 157: erda.openapiv1.core.core_services.CMDB_LABEL_CREATE:output_type -> erda.openapiv1.core.ProjectLabelCreateResponse
	140, // 158: erda.openapiv1.core.core_services.CMDB_LABEL_DELETE:output_type -> google.protobuf.Empty
	88,  // 159: erda.openapiv1.core.core_services.CMDB_LABEL_LIST:output_type -> erda.openapiv1.core.ProjectLabelListResponse
	140, // 160: erda.openapiv1.core.core_services.CMDB_LABEL_UPDATE:output_type -> google.protobuf.Empty
	57,  // 161: erda.openapiv1.core.core_services.CMDB_LICENSE:output_type -> erda.openapiv1.core.LicenseResponse
	140, // 162: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_ADD:output_type -> google.protobuf.Empty
	140, // 163: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_ADDUSER:output_type -> google.protobuf.Empty
	50,  // 164: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_AUTHORITY:output_type -> erda.openapiv1.core.GetAuthorityByUserIdResponse
	52,  // 165: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_GET:output_type -> erda.openapiv1.core.GetReviewByTaskIdIdResponse
	54,  // 166: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_LISTBYSPONSORID:output_type -> erda.openapiv1.core.GetReviewsBySponsorIdResponse
	56,  // 167: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_LISTBYUserID:output_type -> erda.openapiv1.core.GetReviewsByUserIdResponse
	140, // 168: erda.openapiv1.core.core_services.CMDB_MANUAL_REVIEW_UPDATE:output_type -> google.protobuf.Empty
	140, // 169: erda.openapiv1.core.core_services.CMDB_MBOX_GET:output_type -> google.protobuf.Empty
	105, // 170: erda.openapiv1.core.core_services.CMDB_MBOX_LIST:output_type -> erda.openapiv1.core.QueryMBoxResponse
	140, // 171: erda.openapiv1.core.core_services.CMDB_MBOX_READ_ALL:output_type -> google.protobuf.Empty
	140, // 172: erda.openapiv1.core.core_services.CMDB_MBOX_STATS:output_type -> google.protobuf.Empty
	65,  // 173: erda.openapiv1.core.core_services.CMDB_MEMBER_ADD:output_type -> erda.openapiv1.core.MemberAddResponse
	62,  // 174: erda.openapiv1.core.core_services.CMDB_MEMBER_ADD_BY_INVITECODE:output_type -> erda.openapiv1.core.MemberAddByInviteCodeResponse
	68,  // 175: erda.openapiv1.core.core_services.CMDB_MEMBER_LABEL_LIST:output_type -> erda.openapiv1.core.MemberLabelListResponse
	71,  // 176: erda.openapiv1.core.core_services.CMDB_MEMBER_LIST:output_type -> erda.openapiv1.core.MemberListResponse
	73,  // 177: erda.openapiv1.core.core_services.CMDB_MEMBER_REMOVE:output_type -> erda.openapiv1.core.MemberRemoveResponse
	4,   // 178: erda.openapiv1.core.core_services.CMDB_MY_APPLICATIONS_LIST:output_type -> erda.openapiv1.core.ApplicationListResponse
	91,  // 179: erda.openapiv1.core.core_services.CMDB_MY_PROJECTS_LIST:output_type -> erda.openapiv1.core.ProjectListResponse
	112, // 180: erda.openapiv1.core.core_services.CMDB_NOTIFYITEM_QUERY:output_type -> erda.openapiv1.core.QueryNotifyItemResponse
	124, // 181: erda.openapiv1.core.core_services.CMDB_NOTIFYITEM_UPDATE:output_type -> erda.openapiv1.core.UpdateNotifyItemResponse
	39,  // 182: erda.openapiv1.core.core_services.CMDB_NOTIFY_CREATE:output_type -> erda.openapiv1.core.CreateNotifyResponse
	41,  // 183: erda.openapiv1.core.core_services.CMDB_NOTIFY_DELETE:output_type -> erda.openapiv1.core.DeleteNotifyResponse
	140, // 184: erda.openapiv1.core.core_services.CMDB_NOTIFY_DISABLE:output_type -> google.protobuf.Empty
	140, // 185: erda.openapiv1.core.core_services.CMDB_NOTIFY_ENABLE:output_type -> google.protobuf.Empty
	140, // 186: erda.openapiv1.core.core_services.CMDB_NOTIFY_FUZZY_QUERY:output_type -> google.protobuf.Empty
	140, // 187: erda.openapiv1.core.core_services.CMDB_NOTIFY_GET:output_type -> google.protobuf.Empty
	109, // 188: erda.openapiv1.core.core_services.CMDB_NOTIFY_HISTORIES:output_type -> erda.openapiv1.core.QueryNotifyHistoryResponse
	114, // 189: erda.openapiv1.core.core_services.CMDB_NOTIFY_QUERY:output_type -> erda.openapiv1.core.QueryNotifyResponse
	126, // 190: erda.openapiv1.core.core_services.CMDB_NOTIFY_UPDATE:output_type -> erda.openapiv1.core.UpdateNotifyResponse
	81,  // 191: erda.openapiv1.core.core_services.CMDB_PERMISSION_ACCESS:output_type -> erda.openapiv1.core.PermissionListResponse
	78,  // 192: erda.openapiv1.core.core_services.CMDB_PERMISSION_CHECK:output_type -> erda.openapiv1.core.PermissionCheckResponse
	120, // 193: erda.openapiv1.core.core_services.CMDB_PERMISSION_LIST:output_type -> erda.openapiv1.core.ScopeRoleListResponse
	140, // 194: erda.openapiv1.core.core_services.CMDB_PROJECT_FUNCTIONS_GET:output_type -> google.protobuf.Empty
	84,  // 195: erda.openapiv1.core.core_services.CMDB_PROJECT_FUNCTIONS_SET:output_type -> erda.openapiv1.core.ProjectFunctionSetResponse
	93,  // 196: erda.openapiv1.core.core_services.CMDB_PROJECT_GET_NSINFO:output_type -> erda.openapiv1.core.ProjectNameSpaceInfoResponse
	140, // 197: erda.openapiv1.core.core_services.CMDB_PROJECT_METRICS_HISTOGRAM:output_type -> google.protobuf.Empty
	98,  // 198: erda.openapiv1.core.core_services.CMDB_PROJECT_UPDATE:output_type -> erda.openapiv1.core.ProjectUpdateResponse
	140, // 199: erda.openapiv1.core.core_services.CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE:output_type -> google.protobuf.Empty
	140, // 200: erda.openapiv1.core.core_services.CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE:output_type -> google.protobuf.Empty
	100, // 201: erda.openapiv1.core.core_services.CMDB_PROJECT_WORKSPACE_ABILITIES_GET:output_type -> erda.openapiv1.core.ProjectWorkSpaceAbilityResponse
	140, // 202: erda.openapiv1.core.core_services.CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE:output_type -> google.protobuf.Empty
	59,  // 203: erda.openapiv1.core.core_services.CMDB_ROLES_LIST_BY_USER:output_type -> erda.openapiv1.core.ListMemberRolesByUserResponse
	140, // 204: erda.openapiv1.core.core_services.EVENTBOX_WEBSOCKET:output_type -> google.protobuf.Empty
	140, // 205: erda.openapiv1.core.core_services.EVENTBOX_WEBSOCKET_INFO:output_type -> google.protobuf.Empty
	140, // 206: erda.openapiv1.core.core_services.QUOTA_GET_PROJECT_NAMESPACES:output_type -> google.protobuf.Empty
	140, // 207: erda.openapiv1.core.core_services.QUOTA_GET_PROJECT_QUOTA:output_type -> google.protobuf.Empty
	145, // [145:208] is the sub-list for method output_type
	82,  // [82:145] is the sub-list for method input_type
	82,  // [82:82] is the sub-list for extension type_name
	82,  // [82:82] is the sub-list for extension extendee
	0,   // [0:82] is the sub-list for field type_name
}

func init() { file_core_services_proto_init() }
func file_core_services_proto_init() {
	if File_core_services_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_core_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationFetchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationFetchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationWorkspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditListCleanCronRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditListCleanCronResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditSetCleanCronRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditSetCleanCronResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_APPLICATION_PIN_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_APPLICATION_UNPIN_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_APP_LIST_TEMPLATES_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_IMAGE_FETCH_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_IMAGE_UPLOAD_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_LABEL_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_LICENSE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_MANUAL_REVIEW_ADD_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_MBOX_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_MBOX_READ_ALL_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_MBOX_STATS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_MEMBER_LABEL_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_NOTIFY_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_NOTIFY_DISABLE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_NOTIFY_ENABLE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_NOTIFY_FUZZY_QUERY_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_NOTIFY_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_PERMISSION_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_PROJECT_FUNCTIONS_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_PROJECT_GET_NSINFO_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_PROJECT_METRICS_HISTOGRAM_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReviewUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DereferenceClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DereferenceClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVENTBOX_WEBSOCKET_INFO_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVENTBOX_WEBSOCKET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorLogCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorLogCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorityByUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthorityByUserIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReviewByTaskIdIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReviewByTaskIdIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReviewsBySponsorIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReviewsBySponsorIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReviewsByUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReviewsByUserIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMemberRolesByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMemberRolesByUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberAddByInviteCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberAddByInviteCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberAddOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberLabelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberLabelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberLabelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberRemoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingProjectDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionCheckResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectFunctionSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectFunctionSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLabelCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLabelCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLabelListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLabelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLabelUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectNameSpaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectNameSpaceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectResourceUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectUpdateBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectWorkSpaceAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectWorkSpaceAbilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QUOTA_GET_PROJECT_NAMESPACES_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QUOTA_GET_PROJECT_QUOTA_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMBoxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMBoxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMBoxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNotifyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNotifyHistoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNotifyHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNotifyHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNotifyItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNotifyItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNotifyItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeRoleAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeRoleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeRoleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifyItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifyItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRoleListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_services_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScopeRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_core_services_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_core_services_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_core_services_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_core_services_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_core_services_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_core_services_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_core_services_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_core_services_proto_msgTypes[82].OneofWrappers = []interface{}{}
	file_core_services_proto_msgTypes[88].OneofWrappers = []interface{}{}
	file_core_services_proto_msgTypes[96].OneofWrappers = []interface{}{}
	file_core_services_proto_msgTypes[126].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   138,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_core_services_proto_goTypes,
		DependencyIndexes: file_core_services_proto_depIdxs,
		MessageInfos:      file_core_services_proto_msgTypes,
	}.Build()
	File_core_services_proto = out.File
	file_core_services_proto_rawDesc = nil
	file_core_services_proto_goTypes = nil
	file_core_services_proto_depIdxs = nil
}
