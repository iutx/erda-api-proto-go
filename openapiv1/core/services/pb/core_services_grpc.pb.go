// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: core_services.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// CoreServicesClient is the client API for CoreServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreServicesClient interface {
	CMDB_APPLICATIONS_LIST(ctx context.Context, in *ApplicationListRequest, opts ...grpc.CallOption) (*ApplicationListResponse, error)
	CMDB_APPLICATION_FETCH(ctx context.Context, in *ApplicationFetchRequest, opts ...grpc.CallOption) (*ApplicationFetchResponse, error)
	CMDB_APPLICATION_PIN(ctx context.Context, in *CMDB_APPLICATION_PIN_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_APPLICATION_UNPIN(ctx context.Context, in *CMDB_APPLICATION_UNPIN_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_APPROVE_CREATE(ctx context.Context, in *ApproveCreateRequest, opts ...grpc.CallOption) (*ApproveCreateResponse, error)
	CMDB_APP_LIST_TEMPLATES(ctx context.Context, in *CMDB_APP_LIST_TEMPLATES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_AUDITS_LIST_SET(ctx context.Context, in *AuditListCleanCronRequest, opts ...grpc.CallOption) (*AuditListCleanCronResponse, error)
	CMDB_AUDITS_SET(ctx context.Context, in *AuditSetCleanCronRequest, opts ...grpc.CallOption) (*AuditSetCleanCronResponse, error)
	CMDB_CLUSTER_DEREFERENCE(ctx context.Context, in *DereferenceClusterRequest, opts ...grpc.CallOption) (*DereferenceClusterResponse, error)
	CMDB_ERRORLOG_CREATE(ctx context.Context, in *ErrorLogCreateRequest, opts ...grpc.CallOption) (*ErrorLogCreateResponse, error)
	CMDB_IMAGE_FETCH(ctx context.Context, in *CMDB_IMAGE_FETCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_IMAGE_UPLOAD(ctx context.Context, in *CMDB_IMAGE_UPLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_LABEL_CREATE(ctx context.Context, in *ProjectLabelCreateRequest, opts ...grpc.CallOption) (*ProjectLabelCreateResponse, error)
	CMDB_LABEL_DELETE(ctx context.Context, in *CMDB_LABEL_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_LABEL_LIST(ctx context.Context, in *ProjectLabelListRequest, opts ...grpc.CallOption) (*ProjectLabelListResponse, error)
	CMDB_LABEL_UPDATE(ctx context.Context, in *ProjectLabelUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_LICENSE(ctx context.Context, in *CMDB_LICENSE_Request, opts ...grpc.CallOption) (*LicenseResponse, error)
	CMDB_MANUAL_REVIEW_ADD(ctx context.Context, in *CMDB_MANUAL_REVIEW_ADD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_MANUAL_REVIEW_ADDUSER(ctx context.Context, in *CreateReviewUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_MANUAL_REVIEW_AUTHORITY(ctx context.Context, in *GetAuthorityByUserIdRequest, opts ...grpc.CallOption) (*GetAuthorityByUserIdResponse, error)
	CMDB_MANUAL_REVIEW_GET(ctx context.Context, in *GetReviewByTaskIdIdRequest, opts ...grpc.CallOption) (*GetReviewByTaskIdIdResponse, error)
	CMDB_MANUAL_REVIEW_LISTBYSPONSORID(ctx context.Context, in *GetReviewsBySponsorIdRequest, opts ...grpc.CallOption) (*GetReviewsBySponsorIdResponse, error)
	CMDB_MANUAL_REVIEW_LISTBYUserID(ctx context.Context, in *GetReviewsByUserIdRequest, opts ...grpc.CallOption) (*GetReviewsByUserIdResponse, error)
	CMDB_MANUAL_REVIEW_UPDATE(ctx context.Context, in *UpdateApproval, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_MBOX_GET(ctx context.Context, in *CMDB_MBOX_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_MBOX_LIST(ctx context.Context, in *QueryMBoxRequest, opts ...grpc.CallOption) (*QueryMBoxResponse, error)
	CMDB_MBOX_READ_ALL(ctx context.Context, in *CMDB_MBOX_READ_ALL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_MBOX_STATS(ctx context.Context, in *CMDB_MBOX_STATS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_MEMBER_ADD(ctx context.Context, in *MemberAddRequest, opts ...grpc.CallOption) (*MemberAddResponse, error)
	CMDB_MEMBER_ADD_BY_INVITECODE(ctx context.Context, in *MemberAddByInviteCodeRequest, opts ...grpc.CallOption) (*MemberAddByInviteCodeResponse, error)
	CMDB_MEMBER_LABEL_LIST(ctx context.Context, in *CMDB_MEMBER_LABEL_LIST_Request, opts ...grpc.CallOption) (*MemberLabelListResponse, error)
	CMDB_MEMBER_LIST(ctx context.Context, in *MemberListRequest, opts ...grpc.CallOption) (*MemberListResponse, error)
	CMDB_MEMBER_REMOVE(ctx context.Context, in *MemberRemoveRequest, opts ...grpc.CallOption) (*MemberRemoveResponse, error)
	CMDB_MY_APPLICATIONS_LIST(ctx context.Context, in *ApplicationListRequest, opts ...grpc.CallOption) (*ApplicationListResponse, error)
	CMDB_MY_PROJECTS_LIST(ctx context.Context, in *ProjectListRequest, opts ...grpc.CallOption) (*ProjectListResponse, error)
	CMDB_NOTIFYITEM_QUERY(ctx context.Context, in *QueryNotifyItemRequest, opts ...grpc.CallOption) (*QueryNotifyItemResponse, error)
	CMDB_NOTIFYITEM_UPDATE(ctx context.Context, in *UpdateNotifyItemRequest, opts ...grpc.CallOption) (*UpdateNotifyItemResponse, error)
	CMDB_NOTIFY_CREATE(ctx context.Context, in *CreateNotifyRequest, opts ...grpc.CallOption) (*CreateNotifyResponse, error)
	CMDB_NOTIFY_DELETE(ctx context.Context, in *CMDB_NOTIFY_DELETE_Request, opts ...grpc.CallOption) (*DeleteNotifyResponse, error)
	CMDB_NOTIFY_DISABLE(ctx context.Context, in *CMDB_NOTIFY_DISABLE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_NOTIFY_ENABLE(ctx context.Context, in *CMDB_NOTIFY_ENABLE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_NOTIFY_FUZZY_QUERY(ctx context.Context, in *CMDB_NOTIFY_FUZZY_QUERY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_NOTIFY_GET(ctx context.Context, in *CMDB_NOTIFY_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_NOTIFY_HISTORIES(ctx context.Context, in *QueryNotifyHistoryRequest, opts ...grpc.CallOption) (*QueryNotifyHistoryResponse, error)
	CMDB_NOTIFY_QUERY(ctx context.Context, in *QueryNotifyRequest, opts ...grpc.CallOption) (*QueryNotifyResponse, error)
	CMDB_NOTIFY_UPDATE(ctx context.Context, in *UpdateNotifyRequest, opts ...grpc.CallOption) (*UpdateNotifyResponse, error)
	CMDB_PERMISSION_ACCESS(ctx context.Context, in *ScopeRoleAccessRequest, opts ...grpc.CallOption) (*PermissionListResponse, error)
	CMDB_PERMISSION_CHECK(ctx context.Context, in *PermissionCheckRequest, opts ...grpc.CallOption) (*PermissionCheckResponse, error)
	CMDB_PERMISSION_LIST(ctx context.Context, in *CMDB_PERMISSION_LIST_Request, opts ...grpc.CallOption) (*ScopeRoleListResponse, error)
	CMDB_PROJECT_FUNCTIONS_GET(ctx context.Context, in *CMDB_PROJECT_FUNCTIONS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_PROJECT_FUNCTIONS_SET(ctx context.Context, in *ProjectFunctionSetRequest, opts ...grpc.CallOption) (*ProjectFunctionSetResponse, error)
	CMDB_PROJECT_GET_NSINFO(ctx context.Context, in *CMDB_PROJECT_GET_NSINFO_Request, opts ...grpc.CallOption) (*ProjectNameSpaceInfoResponse, error)
	CMDB_PROJECT_METRICS_HISTOGRAM(ctx context.Context, in *CMDB_PROJECT_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_PROJECT_UPDATE(ctx context.Context, in *ProjectUpdateRequest, opts ...grpc.CallOption) (*ProjectUpdateResponse, error)
	CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE(ctx context.Context, in *ProjectWorkSpaceAbility, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE(ctx context.Context, in *CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_PROJECT_WORKSPACE_ABILITIES_GET(ctx context.Context, in *CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request, opts ...grpc.CallOption) (*ProjectWorkSpaceAbilityResponse, error)
	CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE(ctx context.Context, in *ProjectWorkSpaceAbility, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CMDB_ROLES_LIST_BY_USER(ctx context.Context, in *ListMemberRolesByUserRequest, opts ...grpc.CallOption) (*ListMemberRolesByUserResponse, error)
	EVENTBOX_WEBSOCKET(ctx context.Context, in *EVENTBOX_WEBSOCKET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EVENTBOX_WEBSOCKET_INFO(ctx context.Context, in *EVENTBOX_WEBSOCKET_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QUOTA_GET_PROJECT_NAMESPACES(ctx context.Context, in *QUOTA_GET_PROJECT_NAMESPACES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QUOTA_GET_PROJECT_QUOTA(ctx context.Context, in *QUOTA_GET_PROJECT_QUOTA_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type coreServicesClient struct {
	cc grpc1.ClientConnInterface
}

func NewCoreServicesClient(cc grpc1.ClientConnInterface) CoreServicesClient {
	return &coreServicesClient{cc}
}

func (c *coreServicesClient) CMDB_APPLICATIONS_LIST(ctx context.Context, in *ApplicationListRequest, opts ...grpc.CallOption) (*ApplicationListResponse, error) {
	out := new(ApplicationListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_APPLICATIONS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_APPLICATION_FETCH(ctx context.Context, in *ApplicationFetchRequest, opts ...grpc.CallOption) (*ApplicationFetchResponse, error) {
	out := new(ApplicationFetchResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_APPLICATION_FETCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_APPLICATION_PIN(ctx context.Context, in *CMDB_APPLICATION_PIN_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_APPLICATION_PIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_APPLICATION_UNPIN(ctx context.Context, in *CMDB_APPLICATION_UNPIN_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_APPLICATION_UNPIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_APPROVE_CREATE(ctx context.Context, in *ApproveCreateRequest, opts ...grpc.CallOption) (*ApproveCreateResponse, error) {
	out := new(ApproveCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_APPROVE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_APP_LIST_TEMPLATES(ctx context.Context, in *CMDB_APP_LIST_TEMPLATES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_APP_LIST_TEMPLATES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_AUDITS_LIST_SET(ctx context.Context, in *AuditListCleanCronRequest, opts ...grpc.CallOption) (*AuditListCleanCronResponse, error) {
	out := new(AuditListCleanCronResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_AUDITS_LIST_SET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_AUDITS_SET(ctx context.Context, in *AuditSetCleanCronRequest, opts ...grpc.CallOption) (*AuditSetCleanCronResponse, error) {
	out := new(AuditSetCleanCronResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_AUDITS_SET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_CLUSTER_DEREFERENCE(ctx context.Context, in *DereferenceClusterRequest, opts ...grpc.CallOption) (*DereferenceClusterResponse, error) {
	out := new(DereferenceClusterResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_CLUSTER_DEREFERENCE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_ERRORLOG_CREATE(ctx context.Context, in *ErrorLogCreateRequest, opts ...grpc.CallOption) (*ErrorLogCreateResponse, error) {
	out := new(ErrorLogCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_ERRORLOG_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_IMAGE_FETCH(ctx context.Context, in *CMDB_IMAGE_FETCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_IMAGE_FETCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_IMAGE_UPLOAD(ctx context.Context, in *CMDB_IMAGE_UPLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_IMAGE_UPLOAD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_LABEL_CREATE(ctx context.Context, in *ProjectLabelCreateRequest, opts ...grpc.CallOption) (*ProjectLabelCreateResponse, error) {
	out := new(ProjectLabelCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_LABEL_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_LABEL_DELETE(ctx context.Context, in *CMDB_LABEL_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_LABEL_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_LABEL_LIST(ctx context.Context, in *ProjectLabelListRequest, opts ...grpc.CallOption) (*ProjectLabelListResponse, error) {
	out := new(ProjectLabelListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_LABEL_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_LABEL_UPDATE(ctx context.Context, in *ProjectLabelUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_LABEL_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_LICENSE(ctx context.Context, in *CMDB_LICENSE_Request, opts ...grpc.CallOption) (*LicenseResponse, error) {
	out := new(LicenseResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_LICENSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MANUAL_REVIEW_ADD(ctx context.Context, in *CMDB_MANUAL_REVIEW_ADD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_ADD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MANUAL_REVIEW_ADDUSER(ctx context.Context, in *CreateReviewUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_ADDUSER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MANUAL_REVIEW_AUTHORITY(ctx context.Context, in *GetAuthorityByUserIdRequest, opts ...grpc.CallOption) (*GetAuthorityByUserIdResponse, error) {
	out := new(GetAuthorityByUserIdResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_AUTHORITY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MANUAL_REVIEW_GET(ctx context.Context, in *GetReviewByTaskIdIdRequest, opts ...grpc.CallOption) (*GetReviewByTaskIdIdResponse, error) {
	out := new(GetReviewByTaskIdIdResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MANUAL_REVIEW_LISTBYSPONSORID(ctx context.Context, in *GetReviewsBySponsorIdRequest, opts ...grpc.CallOption) (*GetReviewsBySponsorIdResponse, error) {
	out := new(GetReviewsBySponsorIdResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_LISTBYSPONSORID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MANUAL_REVIEW_LISTBYUserID(ctx context.Context, in *GetReviewsByUserIdRequest, opts ...grpc.CallOption) (*GetReviewsByUserIdResponse, error) {
	out := new(GetReviewsByUserIdResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_LISTBYUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MANUAL_REVIEW_UPDATE(ctx context.Context, in *UpdateApproval, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MBOX_GET(ctx context.Context, in *CMDB_MBOX_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MBOX_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MBOX_LIST(ctx context.Context, in *QueryMBoxRequest, opts ...grpc.CallOption) (*QueryMBoxResponse, error) {
	out := new(QueryMBoxResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MBOX_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MBOX_READ_ALL(ctx context.Context, in *CMDB_MBOX_READ_ALL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MBOX_READ_ALL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MBOX_STATS(ctx context.Context, in *CMDB_MBOX_STATS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MBOX_STATS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MEMBER_ADD(ctx context.Context, in *MemberAddRequest, opts ...grpc.CallOption) (*MemberAddResponse, error) {
	out := new(MemberAddResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MEMBER_ADD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MEMBER_ADD_BY_INVITECODE(ctx context.Context, in *MemberAddByInviteCodeRequest, opts ...grpc.CallOption) (*MemberAddByInviteCodeResponse, error) {
	out := new(MemberAddByInviteCodeResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MEMBER_ADD_BY_INVITECODE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MEMBER_LABEL_LIST(ctx context.Context, in *CMDB_MEMBER_LABEL_LIST_Request, opts ...grpc.CallOption) (*MemberLabelListResponse, error) {
	out := new(MemberLabelListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MEMBER_LABEL_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MEMBER_LIST(ctx context.Context, in *MemberListRequest, opts ...grpc.CallOption) (*MemberListResponse, error) {
	out := new(MemberListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MEMBER_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MEMBER_REMOVE(ctx context.Context, in *MemberRemoveRequest, opts ...grpc.CallOption) (*MemberRemoveResponse, error) {
	out := new(MemberRemoveResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MEMBER_REMOVE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MY_APPLICATIONS_LIST(ctx context.Context, in *ApplicationListRequest, opts ...grpc.CallOption) (*ApplicationListResponse, error) {
	out := new(ApplicationListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MY_APPLICATIONS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_MY_PROJECTS_LIST(ctx context.Context, in *ProjectListRequest, opts ...grpc.CallOption) (*ProjectListResponse, error) {
	out := new(ProjectListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_MY_PROJECTS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_NOTIFYITEM_QUERY(ctx context.Context, in *QueryNotifyItemRequest, opts ...grpc.CallOption) (*QueryNotifyItemResponse, error) {
	out := new(QueryNotifyItemResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_NOTIFYITEM_QUERY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_NOTIFYITEM_UPDATE(ctx context.Context, in *UpdateNotifyItemRequest, opts ...grpc.CallOption) (*UpdateNotifyItemResponse, error) {
	out := new(UpdateNotifyItemResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_NOTIFYITEM_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_NOTIFY_CREATE(ctx context.Context, in *CreateNotifyRequest, opts ...grpc.CallOption) (*CreateNotifyResponse, error) {
	out := new(CreateNotifyResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_NOTIFY_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_NOTIFY_DELETE(ctx context.Context, in *CMDB_NOTIFY_DELETE_Request, opts ...grpc.CallOption) (*DeleteNotifyResponse, error) {
	out := new(DeleteNotifyResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_NOTIFY_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_NOTIFY_DISABLE(ctx context.Context, in *CMDB_NOTIFY_DISABLE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_NOTIFY_DISABLE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_NOTIFY_ENABLE(ctx context.Context, in *CMDB_NOTIFY_ENABLE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_NOTIFY_ENABLE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_NOTIFY_FUZZY_QUERY(ctx context.Context, in *CMDB_NOTIFY_FUZZY_QUERY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_NOTIFY_FUZZY_QUERY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_NOTIFY_GET(ctx context.Context, in *CMDB_NOTIFY_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_NOTIFY_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_NOTIFY_HISTORIES(ctx context.Context, in *QueryNotifyHistoryRequest, opts ...grpc.CallOption) (*QueryNotifyHistoryResponse, error) {
	out := new(QueryNotifyHistoryResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_NOTIFY_HISTORIES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_NOTIFY_QUERY(ctx context.Context, in *QueryNotifyRequest, opts ...grpc.CallOption) (*QueryNotifyResponse, error) {
	out := new(QueryNotifyResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_NOTIFY_QUERY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_NOTIFY_UPDATE(ctx context.Context, in *UpdateNotifyRequest, opts ...grpc.CallOption) (*UpdateNotifyResponse, error) {
	out := new(UpdateNotifyResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_NOTIFY_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_PERMISSION_ACCESS(ctx context.Context, in *ScopeRoleAccessRequest, opts ...grpc.CallOption) (*PermissionListResponse, error) {
	out := new(PermissionListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_PERMISSION_ACCESS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_PERMISSION_CHECK(ctx context.Context, in *PermissionCheckRequest, opts ...grpc.CallOption) (*PermissionCheckResponse, error) {
	out := new(PermissionCheckResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_PERMISSION_CHECK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_PERMISSION_LIST(ctx context.Context, in *CMDB_PERMISSION_LIST_Request, opts ...grpc.CallOption) (*ScopeRoleListResponse, error) {
	out := new(ScopeRoleListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_PERMISSION_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_PROJECT_FUNCTIONS_GET(ctx context.Context, in *CMDB_PROJECT_FUNCTIONS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_PROJECT_FUNCTIONS_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_PROJECT_FUNCTIONS_SET(ctx context.Context, in *ProjectFunctionSetRequest, opts ...grpc.CallOption) (*ProjectFunctionSetResponse, error) {
	out := new(ProjectFunctionSetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_PROJECT_FUNCTIONS_SET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_PROJECT_GET_NSINFO(ctx context.Context, in *CMDB_PROJECT_GET_NSINFO_Request, opts ...grpc.CallOption) (*ProjectNameSpaceInfoResponse, error) {
	out := new(ProjectNameSpaceInfoResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_PROJECT_GET_NSINFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_PROJECT_METRICS_HISTOGRAM(ctx context.Context, in *CMDB_PROJECT_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_PROJECT_METRICS_HISTOGRAM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_PROJECT_UPDATE(ctx context.Context, in *ProjectUpdateRequest, opts ...grpc.CallOption) (*ProjectUpdateResponse, error) {
	out := new(ProjectUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_PROJECT_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE(ctx context.Context, in *ProjectWorkSpaceAbility, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE(ctx context.Context, in *CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_PROJECT_WORKSPACE_ABILITIES_GET(ctx context.Context, in *CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request, opts ...grpc.CallOption) (*ProjectWorkSpaceAbilityResponse, error) {
	out := new(ProjectWorkSpaceAbilityResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_PROJECT_WORKSPACE_ABILITIES_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE(ctx context.Context, in *ProjectWorkSpaceAbility, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) CMDB_ROLES_LIST_BY_USER(ctx context.Context, in *ListMemberRolesByUserRequest, opts ...grpc.CallOption) (*ListMemberRolesByUserResponse, error) {
	out := new(ListMemberRolesByUserResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/CMDB_ROLES_LIST_BY_USER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) EVENTBOX_WEBSOCKET(ctx context.Context, in *EVENTBOX_WEBSOCKET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/EVENTBOX_WEBSOCKET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) EVENTBOX_WEBSOCKET_INFO(ctx context.Context, in *EVENTBOX_WEBSOCKET_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/EVENTBOX_WEBSOCKET_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) QUOTA_GET_PROJECT_NAMESPACES(ctx context.Context, in *QUOTA_GET_PROJECT_NAMESPACES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/QUOTA_GET_PROJECT_NAMESPACES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServicesClient) QUOTA_GET_PROJECT_QUOTA(ctx context.Context, in *QUOTA_GET_PROJECT_QUOTA_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.core.core_services/QUOTA_GET_PROJECT_QUOTA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServicesServer is the server API for CoreServices service.
// All implementations should embed UnimplementedCoreServicesServer
// for forward compatibility
type CoreServicesServer interface {
	CMDB_APPLICATIONS_LIST(context.Context, *ApplicationListRequest) (*ApplicationListResponse, error)
	CMDB_APPLICATION_FETCH(context.Context, *ApplicationFetchRequest) (*ApplicationFetchResponse, error)
	CMDB_APPLICATION_PIN(context.Context, *CMDB_APPLICATION_PIN_Request) (*emptypb.Empty, error)
	CMDB_APPLICATION_UNPIN(context.Context, *CMDB_APPLICATION_UNPIN_Request) (*emptypb.Empty, error)
	CMDB_APPROVE_CREATE(context.Context, *ApproveCreateRequest) (*ApproveCreateResponse, error)
	CMDB_APP_LIST_TEMPLATES(context.Context, *CMDB_APP_LIST_TEMPLATES_Request) (*emptypb.Empty, error)
	CMDB_AUDITS_LIST_SET(context.Context, *AuditListCleanCronRequest) (*AuditListCleanCronResponse, error)
	CMDB_AUDITS_SET(context.Context, *AuditSetCleanCronRequest) (*AuditSetCleanCronResponse, error)
	CMDB_CLUSTER_DEREFERENCE(context.Context, *DereferenceClusterRequest) (*DereferenceClusterResponse, error)
	CMDB_ERRORLOG_CREATE(context.Context, *ErrorLogCreateRequest) (*ErrorLogCreateResponse, error)
	CMDB_IMAGE_FETCH(context.Context, *CMDB_IMAGE_FETCH_Request) (*emptypb.Empty, error)
	CMDB_IMAGE_UPLOAD(context.Context, *CMDB_IMAGE_UPLOAD_Request) (*emptypb.Empty, error)
	CMDB_LABEL_CREATE(context.Context, *ProjectLabelCreateRequest) (*ProjectLabelCreateResponse, error)
	CMDB_LABEL_DELETE(context.Context, *CMDB_LABEL_DELETE_Request) (*emptypb.Empty, error)
	CMDB_LABEL_LIST(context.Context, *ProjectLabelListRequest) (*ProjectLabelListResponse, error)
	CMDB_LABEL_UPDATE(context.Context, *ProjectLabelUpdateRequest) (*emptypb.Empty, error)
	CMDB_LICENSE(context.Context, *CMDB_LICENSE_Request) (*LicenseResponse, error)
	CMDB_MANUAL_REVIEW_ADD(context.Context, *CMDB_MANUAL_REVIEW_ADD_Request) (*emptypb.Empty, error)
	CMDB_MANUAL_REVIEW_ADDUSER(context.Context, *CreateReviewUser) (*emptypb.Empty, error)
	CMDB_MANUAL_REVIEW_AUTHORITY(context.Context, *GetAuthorityByUserIdRequest) (*GetAuthorityByUserIdResponse, error)
	CMDB_MANUAL_REVIEW_GET(context.Context, *GetReviewByTaskIdIdRequest) (*GetReviewByTaskIdIdResponse, error)
	CMDB_MANUAL_REVIEW_LISTBYSPONSORID(context.Context, *GetReviewsBySponsorIdRequest) (*GetReviewsBySponsorIdResponse, error)
	CMDB_MANUAL_REVIEW_LISTBYUserID(context.Context, *GetReviewsByUserIdRequest) (*GetReviewsByUserIdResponse, error)
	CMDB_MANUAL_REVIEW_UPDATE(context.Context, *UpdateApproval) (*emptypb.Empty, error)
	CMDB_MBOX_GET(context.Context, *CMDB_MBOX_GET_Request) (*emptypb.Empty, error)
	CMDB_MBOX_LIST(context.Context, *QueryMBoxRequest) (*QueryMBoxResponse, error)
	CMDB_MBOX_READ_ALL(context.Context, *CMDB_MBOX_READ_ALL_Request) (*emptypb.Empty, error)
	CMDB_MBOX_STATS(context.Context, *CMDB_MBOX_STATS_Request) (*emptypb.Empty, error)
	CMDB_MEMBER_ADD(context.Context, *MemberAddRequest) (*MemberAddResponse, error)
	CMDB_MEMBER_ADD_BY_INVITECODE(context.Context, *MemberAddByInviteCodeRequest) (*MemberAddByInviteCodeResponse, error)
	CMDB_MEMBER_LABEL_LIST(context.Context, *CMDB_MEMBER_LABEL_LIST_Request) (*MemberLabelListResponse, error)
	CMDB_MEMBER_LIST(context.Context, *MemberListRequest) (*MemberListResponse, error)
	CMDB_MEMBER_REMOVE(context.Context, *MemberRemoveRequest) (*MemberRemoveResponse, error)
	CMDB_MY_APPLICATIONS_LIST(context.Context, *ApplicationListRequest) (*ApplicationListResponse, error)
	CMDB_MY_PROJECTS_LIST(context.Context, *ProjectListRequest) (*ProjectListResponse, error)
	CMDB_NOTIFYITEM_QUERY(context.Context, *QueryNotifyItemRequest) (*QueryNotifyItemResponse, error)
	CMDB_NOTIFYITEM_UPDATE(context.Context, *UpdateNotifyItemRequest) (*UpdateNotifyItemResponse, error)
	CMDB_NOTIFY_CREATE(context.Context, *CreateNotifyRequest) (*CreateNotifyResponse, error)
	CMDB_NOTIFY_DELETE(context.Context, *CMDB_NOTIFY_DELETE_Request) (*DeleteNotifyResponse, error)
	CMDB_NOTIFY_DISABLE(context.Context, *CMDB_NOTIFY_DISABLE_Request) (*emptypb.Empty, error)
	CMDB_NOTIFY_ENABLE(context.Context, *CMDB_NOTIFY_ENABLE_Request) (*emptypb.Empty, error)
	CMDB_NOTIFY_FUZZY_QUERY(context.Context, *CMDB_NOTIFY_FUZZY_QUERY_Request) (*emptypb.Empty, error)
	CMDB_NOTIFY_GET(context.Context, *CMDB_NOTIFY_GET_Request) (*emptypb.Empty, error)
	CMDB_NOTIFY_HISTORIES(context.Context, *QueryNotifyHistoryRequest) (*QueryNotifyHistoryResponse, error)
	CMDB_NOTIFY_QUERY(context.Context, *QueryNotifyRequest) (*QueryNotifyResponse, error)
	CMDB_NOTIFY_UPDATE(context.Context, *UpdateNotifyRequest) (*UpdateNotifyResponse, error)
	CMDB_PERMISSION_ACCESS(context.Context, *ScopeRoleAccessRequest) (*PermissionListResponse, error)
	CMDB_PERMISSION_CHECK(context.Context, *PermissionCheckRequest) (*PermissionCheckResponse, error)
	CMDB_PERMISSION_LIST(context.Context, *CMDB_PERMISSION_LIST_Request) (*ScopeRoleListResponse, error)
	CMDB_PROJECT_FUNCTIONS_GET(context.Context, *CMDB_PROJECT_FUNCTIONS_GET_Request) (*emptypb.Empty, error)
	CMDB_PROJECT_FUNCTIONS_SET(context.Context, *ProjectFunctionSetRequest) (*ProjectFunctionSetResponse, error)
	CMDB_PROJECT_GET_NSINFO(context.Context, *CMDB_PROJECT_GET_NSINFO_Request) (*ProjectNameSpaceInfoResponse, error)
	CMDB_PROJECT_METRICS_HISTOGRAM(context.Context, *CMDB_PROJECT_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)
	CMDB_PROJECT_UPDATE(context.Context, *ProjectUpdateRequest) (*ProjectUpdateResponse, error)
	CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE(context.Context, *ProjectWorkSpaceAbility) (*emptypb.Empty, error)
	CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE(context.Context, *CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request) (*emptypb.Empty, error)
	CMDB_PROJECT_WORKSPACE_ABILITIES_GET(context.Context, *CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request) (*ProjectWorkSpaceAbilityResponse, error)
	CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE(context.Context, *ProjectWorkSpaceAbility) (*emptypb.Empty, error)
	CMDB_ROLES_LIST_BY_USER(context.Context, *ListMemberRolesByUserRequest) (*ListMemberRolesByUserResponse, error)
	EVENTBOX_WEBSOCKET(context.Context, *EVENTBOX_WEBSOCKET_Request) (*emptypb.Empty, error)
	EVENTBOX_WEBSOCKET_INFO(context.Context, *EVENTBOX_WEBSOCKET_INFO_Request) (*emptypb.Empty, error)
	QUOTA_GET_PROJECT_NAMESPACES(context.Context, *QUOTA_GET_PROJECT_NAMESPACES_Request) (*emptypb.Empty, error)
	QUOTA_GET_PROJECT_QUOTA(context.Context, *QUOTA_GET_PROJECT_QUOTA_Request) (*emptypb.Empty, error)
}

// UnimplementedCoreServicesServer should be embedded to have forward compatible implementations.
type UnimplementedCoreServicesServer struct {
}

func (*UnimplementedCoreServicesServer) CMDB_APPLICATIONS_LIST(context.Context, *ApplicationListRequest) (*ApplicationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_APPLICATIONS_LIST not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_APPLICATION_FETCH(context.Context, *ApplicationFetchRequest) (*ApplicationFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_APPLICATION_FETCH not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_APPLICATION_PIN(context.Context, *CMDB_APPLICATION_PIN_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_APPLICATION_PIN not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_APPLICATION_UNPIN(context.Context, *CMDB_APPLICATION_UNPIN_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_APPLICATION_UNPIN not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_APPROVE_CREATE(context.Context, *ApproveCreateRequest) (*ApproveCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_APPROVE_CREATE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_APP_LIST_TEMPLATES(context.Context, *CMDB_APP_LIST_TEMPLATES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_APP_LIST_TEMPLATES not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_AUDITS_LIST_SET(context.Context, *AuditListCleanCronRequest) (*AuditListCleanCronResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_AUDITS_LIST_SET not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_AUDITS_SET(context.Context, *AuditSetCleanCronRequest) (*AuditSetCleanCronResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_AUDITS_SET not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_CLUSTER_DEREFERENCE(context.Context, *DereferenceClusterRequest) (*DereferenceClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_CLUSTER_DEREFERENCE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_ERRORLOG_CREATE(context.Context, *ErrorLogCreateRequest) (*ErrorLogCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ERRORLOG_CREATE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_IMAGE_FETCH(context.Context, *CMDB_IMAGE_FETCH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_IMAGE_FETCH not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_IMAGE_UPLOAD(context.Context, *CMDB_IMAGE_UPLOAD_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_IMAGE_UPLOAD not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_LABEL_CREATE(context.Context, *ProjectLabelCreateRequest) (*ProjectLabelCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_LABEL_CREATE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_LABEL_DELETE(context.Context, *CMDB_LABEL_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_LABEL_DELETE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_LABEL_LIST(context.Context, *ProjectLabelListRequest) (*ProjectLabelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_LABEL_LIST not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_LABEL_UPDATE(context.Context, *ProjectLabelUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_LABEL_UPDATE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_LICENSE(context.Context, *CMDB_LICENSE_Request) (*LicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_LICENSE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MANUAL_REVIEW_ADD(context.Context, *CMDB_MANUAL_REVIEW_ADD_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MANUAL_REVIEW_ADD not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MANUAL_REVIEW_ADDUSER(context.Context, *CreateReviewUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MANUAL_REVIEW_ADDUSER not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MANUAL_REVIEW_AUTHORITY(context.Context, *GetAuthorityByUserIdRequest) (*GetAuthorityByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MANUAL_REVIEW_AUTHORITY not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MANUAL_REVIEW_GET(context.Context, *GetReviewByTaskIdIdRequest) (*GetReviewByTaskIdIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MANUAL_REVIEW_GET not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MANUAL_REVIEW_LISTBYSPONSORID(context.Context, *GetReviewsBySponsorIdRequest) (*GetReviewsBySponsorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MANUAL_REVIEW_LISTBYSPONSORID not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MANUAL_REVIEW_LISTBYUserID(context.Context, *GetReviewsByUserIdRequest) (*GetReviewsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MANUAL_REVIEW_LISTBYUserID not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MANUAL_REVIEW_UPDATE(context.Context, *UpdateApproval) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MANUAL_REVIEW_UPDATE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MBOX_GET(context.Context, *CMDB_MBOX_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MBOX_GET not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MBOX_LIST(context.Context, *QueryMBoxRequest) (*QueryMBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MBOX_LIST not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MBOX_READ_ALL(context.Context, *CMDB_MBOX_READ_ALL_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MBOX_READ_ALL not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MBOX_STATS(context.Context, *CMDB_MBOX_STATS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MBOX_STATS not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MEMBER_ADD(context.Context, *MemberAddRequest) (*MemberAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MEMBER_ADD not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MEMBER_ADD_BY_INVITECODE(context.Context, *MemberAddByInviteCodeRequest) (*MemberAddByInviteCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MEMBER_ADD_BY_INVITECODE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MEMBER_LABEL_LIST(context.Context, *CMDB_MEMBER_LABEL_LIST_Request) (*MemberLabelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MEMBER_LABEL_LIST not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MEMBER_LIST(context.Context, *MemberListRequest) (*MemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MEMBER_LIST not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MEMBER_REMOVE(context.Context, *MemberRemoveRequest) (*MemberRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MEMBER_REMOVE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MY_APPLICATIONS_LIST(context.Context, *ApplicationListRequest) (*ApplicationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MY_APPLICATIONS_LIST not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_MY_PROJECTS_LIST(context.Context, *ProjectListRequest) (*ProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_MY_PROJECTS_LIST not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_NOTIFYITEM_QUERY(context.Context, *QueryNotifyItemRequest) (*QueryNotifyItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_NOTIFYITEM_QUERY not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_NOTIFYITEM_UPDATE(context.Context, *UpdateNotifyItemRequest) (*UpdateNotifyItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_NOTIFYITEM_UPDATE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_NOTIFY_CREATE(context.Context, *CreateNotifyRequest) (*CreateNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_NOTIFY_CREATE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_NOTIFY_DELETE(context.Context, *CMDB_NOTIFY_DELETE_Request) (*DeleteNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_NOTIFY_DELETE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_NOTIFY_DISABLE(context.Context, *CMDB_NOTIFY_DISABLE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_NOTIFY_DISABLE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_NOTIFY_ENABLE(context.Context, *CMDB_NOTIFY_ENABLE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_NOTIFY_ENABLE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_NOTIFY_FUZZY_QUERY(context.Context, *CMDB_NOTIFY_FUZZY_QUERY_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_NOTIFY_FUZZY_QUERY not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_NOTIFY_GET(context.Context, *CMDB_NOTIFY_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_NOTIFY_GET not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_NOTIFY_HISTORIES(context.Context, *QueryNotifyHistoryRequest) (*QueryNotifyHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_NOTIFY_HISTORIES not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_NOTIFY_QUERY(context.Context, *QueryNotifyRequest) (*QueryNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_NOTIFY_QUERY not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_NOTIFY_UPDATE(context.Context, *UpdateNotifyRequest) (*UpdateNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_NOTIFY_UPDATE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_PERMISSION_ACCESS(context.Context, *ScopeRoleAccessRequest) (*PermissionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PERMISSION_ACCESS not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_PERMISSION_CHECK(context.Context, *PermissionCheckRequest) (*PermissionCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PERMISSION_CHECK not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_PERMISSION_LIST(context.Context, *CMDB_PERMISSION_LIST_Request) (*ScopeRoleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PERMISSION_LIST not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_PROJECT_FUNCTIONS_GET(context.Context, *CMDB_PROJECT_FUNCTIONS_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_FUNCTIONS_GET not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_PROJECT_FUNCTIONS_SET(context.Context, *ProjectFunctionSetRequest) (*ProjectFunctionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_FUNCTIONS_SET not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_PROJECT_GET_NSINFO(context.Context, *CMDB_PROJECT_GET_NSINFO_Request) (*ProjectNameSpaceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_GET_NSINFO not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_PROJECT_METRICS_HISTOGRAM(context.Context, *CMDB_PROJECT_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_METRICS_HISTOGRAM not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_PROJECT_UPDATE(context.Context, *ProjectUpdateRequest) (*ProjectUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_UPDATE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE(context.Context, *ProjectWorkSpaceAbility) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE(context.Context, *CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_PROJECT_WORKSPACE_ABILITIES_GET(context.Context, *CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request) (*ProjectWorkSpaceAbilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_WORKSPACE_ABILITIES_GET not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE(context.Context, *ProjectWorkSpaceAbility) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE not implemented")
}
func (*UnimplementedCoreServicesServer) CMDB_ROLES_LIST_BY_USER(context.Context, *ListMemberRolesByUserRequest) (*ListMemberRolesByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMDB_ROLES_LIST_BY_USER not implemented")
}
func (*UnimplementedCoreServicesServer) EVENTBOX_WEBSOCKET(context.Context, *EVENTBOX_WEBSOCKET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EVENTBOX_WEBSOCKET not implemented")
}
func (*UnimplementedCoreServicesServer) EVENTBOX_WEBSOCKET_INFO(context.Context, *EVENTBOX_WEBSOCKET_INFO_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EVENTBOX_WEBSOCKET_INFO not implemented")
}
func (*UnimplementedCoreServicesServer) QUOTA_GET_PROJECT_NAMESPACES(context.Context, *QUOTA_GET_PROJECT_NAMESPACES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QUOTA_GET_PROJECT_NAMESPACES not implemented")
}
func (*UnimplementedCoreServicesServer) QUOTA_GET_PROJECT_QUOTA(context.Context, *QUOTA_GET_PROJECT_QUOTA_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QUOTA_GET_PROJECT_QUOTA not implemented")
}

func RegisterCoreServicesServer(s grpc1.ServiceRegistrar, srv CoreServicesServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_CoreServices_serviceDesc(srv, opts...), srv)
}

var _CoreServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.core.core_services",
	HandlerType: (*CoreServicesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "core_services.proto",
}

func _get_CoreServices_serviceDesc(srv CoreServicesServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_CoreServices_CMDB_APPLICATIONS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_APPLICATIONS_LIST(ctx, req.(*ApplicationListRequest))
	}
	var _CoreServices_CMDB_APPLICATIONS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_APPLICATIONS_LIST_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_APPLICATIONS_LIST", srv)
		_CoreServices_CMDB_APPLICATIONS_LIST_Handler = h.Interceptor(_CoreServices_CMDB_APPLICATIONS_LIST_Handler)
	}

	_CoreServices_CMDB_APPLICATION_FETCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_APPLICATION_FETCH(ctx, req.(*ApplicationFetchRequest))
	}
	var _CoreServices_CMDB_APPLICATION_FETCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_APPLICATION_FETCH_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_APPLICATION_FETCH", srv)
		_CoreServices_CMDB_APPLICATION_FETCH_Handler = h.Interceptor(_CoreServices_CMDB_APPLICATION_FETCH_Handler)
	}

	_CoreServices_CMDB_APPLICATION_PIN_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_APPLICATION_PIN(ctx, req.(*CMDB_APPLICATION_PIN_Request))
	}
	var _CoreServices_CMDB_APPLICATION_PIN_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_APPLICATION_PIN_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_APPLICATION_PIN", srv)
		_CoreServices_CMDB_APPLICATION_PIN_Handler = h.Interceptor(_CoreServices_CMDB_APPLICATION_PIN_Handler)
	}

	_CoreServices_CMDB_APPLICATION_UNPIN_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_APPLICATION_UNPIN(ctx, req.(*CMDB_APPLICATION_UNPIN_Request))
	}
	var _CoreServices_CMDB_APPLICATION_UNPIN_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_APPLICATION_UNPIN_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_APPLICATION_UNPIN", srv)
		_CoreServices_CMDB_APPLICATION_UNPIN_Handler = h.Interceptor(_CoreServices_CMDB_APPLICATION_UNPIN_Handler)
	}

	_CoreServices_CMDB_APPROVE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_APPROVE_CREATE(ctx, req.(*ApproveCreateRequest))
	}
	var _CoreServices_CMDB_APPROVE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_APPROVE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_APPROVE_CREATE", srv)
		_CoreServices_CMDB_APPROVE_CREATE_Handler = h.Interceptor(_CoreServices_CMDB_APPROVE_CREATE_Handler)
	}

	_CoreServices_CMDB_APP_LIST_TEMPLATES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_APP_LIST_TEMPLATES(ctx, req.(*CMDB_APP_LIST_TEMPLATES_Request))
	}
	var _CoreServices_CMDB_APP_LIST_TEMPLATES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_APP_LIST_TEMPLATES_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_APP_LIST_TEMPLATES", srv)
		_CoreServices_CMDB_APP_LIST_TEMPLATES_Handler = h.Interceptor(_CoreServices_CMDB_APP_LIST_TEMPLATES_Handler)
	}

	_CoreServices_CMDB_AUDITS_LIST_SET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_AUDITS_LIST_SET(ctx, req.(*AuditListCleanCronRequest))
	}
	var _CoreServices_CMDB_AUDITS_LIST_SET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_AUDITS_LIST_SET_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_AUDITS_LIST_SET", srv)
		_CoreServices_CMDB_AUDITS_LIST_SET_Handler = h.Interceptor(_CoreServices_CMDB_AUDITS_LIST_SET_Handler)
	}

	_CoreServices_CMDB_AUDITS_SET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_AUDITS_SET(ctx, req.(*AuditSetCleanCronRequest))
	}
	var _CoreServices_CMDB_AUDITS_SET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_AUDITS_SET_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_AUDITS_SET", srv)
		_CoreServices_CMDB_AUDITS_SET_Handler = h.Interceptor(_CoreServices_CMDB_AUDITS_SET_Handler)
	}

	_CoreServices_CMDB_CLUSTER_DEREFERENCE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_CLUSTER_DEREFERENCE(ctx, req.(*DereferenceClusterRequest))
	}
	var _CoreServices_CMDB_CLUSTER_DEREFERENCE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_CLUSTER_DEREFERENCE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_CLUSTER_DEREFERENCE", srv)
		_CoreServices_CMDB_CLUSTER_DEREFERENCE_Handler = h.Interceptor(_CoreServices_CMDB_CLUSTER_DEREFERENCE_Handler)
	}

	_CoreServices_CMDB_ERRORLOG_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ERRORLOG_CREATE(ctx, req.(*ErrorLogCreateRequest))
	}
	var _CoreServices_CMDB_ERRORLOG_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_ERRORLOG_CREATE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_ERRORLOG_CREATE", srv)
		_CoreServices_CMDB_ERRORLOG_CREATE_Handler = h.Interceptor(_CoreServices_CMDB_ERRORLOG_CREATE_Handler)
	}

	_CoreServices_CMDB_IMAGE_FETCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_IMAGE_FETCH(ctx, req.(*CMDB_IMAGE_FETCH_Request))
	}
	var _CoreServices_CMDB_IMAGE_FETCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_IMAGE_FETCH_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_IMAGE_FETCH", srv)
		_CoreServices_CMDB_IMAGE_FETCH_Handler = h.Interceptor(_CoreServices_CMDB_IMAGE_FETCH_Handler)
	}

	_CoreServices_CMDB_IMAGE_UPLOAD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_IMAGE_UPLOAD(ctx, req.(*CMDB_IMAGE_UPLOAD_Request))
	}
	var _CoreServices_CMDB_IMAGE_UPLOAD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_IMAGE_UPLOAD_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_IMAGE_UPLOAD", srv)
		_CoreServices_CMDB_IMAGE_UPLOAD_Handler = h.Interceptor(_CoreServices_CMDB_IMAGE_UPLOAD_Handler)
	}

	_CoreServices_CMDB_LABEL_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_LABEL_CREATE(ctx, req.(*ProjectLabelCreateRequest))
	}
	var _CoreServices_CMDB_LABEL_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_LABEL_CREATE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_LABEL_CREATE", srv)
		_CoreServices_CMDB_LABEL_CREATE_Handler = h.Interceptor(_CoreServices_CMDB_LABEL_CREATE_Handler)
	}

	_CoreServices_CMDB_LABEL_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_LABEL_DELETE(ctx, req.(*CMDB_LABEL_DELETE_Request))
	}
	var _CoreServices_CMDB_LABEL_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_LABEL_DELETE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_LABEL_DELETE", srv)
		_CoreServices_CMDB_LABEL_DELETE_Handler = h.Interceptor(_CoreServices_CMDB_LABEL_DELETE_Handler)
	}

	_CoreServices_CMDB_LABEL_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_LABEL_LIST(ctx, req.(*ProjectLabelListRequest))
	}
	var _CoreServices_CMDB_LABEL_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_LABEL_LIST_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_LABEL_LIST", srv)
		_CoreServices_CMDB_LABEL_LIST_Handler = h.Interceptor(_CoreServices_CMDB_LABEL_LIST_Handler)
	}

	_CoreServices_CMDB_LABEL_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_LABEL_UPDATE(ctx, req.(*ProjectLabelUpdateRequest))
	}
	var _CoreServices_CMDB_LABEL_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_LABEL_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_LABEL_UPDATE", srv)
		_CoreServices_CMDB_LABEL_UPDATE_Handler = h.Interceptor(_CoreServices_CMDB_LABEL_UPDATE_Handler)
	}

	_CoreServices_CMDB_LICENSE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_LICENSE(ctx, req.(*CMDB_LICENSE_Request))
	}
	var _CoreServices_CMDB_LICENSE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_LICENSE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_LICENSE", srv)
		_CoreServices_CMDB_LICENSE_Handler = h.Interceptor(_CoreServices_CMDB_LICENSE_Handler)
	}

	_CoreServices_CMDB_MANUAL_REVIEW_ADD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MANUAL_REVIEW_ADD(ctx, req.(*CMDB_MANUAL_REVIEW_ADD_Request))
	}
	var _CoreServices_CMDB_MANUAL_REVIEW_ADD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MANUAL_REVIEW_ADD_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MANUAL_REVIEW_ADD", srv)
		_CoreServices_CMDB_MANUAL_REVIEW_ADD_Handler = h.Interceptor(_CoreServices_CMDB_MANUAL_REVIEW_ADD_Handler)
	}

	_CoreServices_CMDB_MANUAL_REVIEW_ADDUSER_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MANUAL_REVIEW_ADDUSER(ctx, req.(*CreateReviewUser))
	}
	var _CoreServices_CMDB_MANUAL_REVIEW_ADDUSER_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MANUAL_REVIEW_ADDUSER_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MANUAL_REVIEW_ADDUSER", srv)
		_CoreServices_CMDB_MANUAL_REVIEW_ADDUSER_Handler = h.Interceptor(_CoreServices_CMDB_MANUAL_REVIEW_ADDUSER_Handler)
	}

	_CoreServices_CMDB_MANUAL_REVIEW_AUTHORITY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MANUAL_REVIEW_AUTHORITY(ctx, req.(*GetAuthorityByUserIdRequest))
	}
	var _CoreServices_CMDB_MANUAL_REVIEW_AUTHORITY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MANUAL_REVIEW_AUTHORITY_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MANUAL_REVIEW_AUTHORITY", srv)
		_CoreServices_CMDB_MANUAL_REVIEW_AUTHORITY_Handler = h.Interceptor(_CoreServices_CMDB_MANUAL_REVIEW_AUTHORITY_Handler)
	}

	_CoreServices_CMDB_MANUAL_REVIEW_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MANUAL_REVIEW_GET(ctx, req.(*GetReviewByTaskIdIdRequest))
	}
	var _CoreServices_CMDB_MANUAL_REVIEW_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MANUAL_REVIEW_GET_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MANUAL_REVIEW_GET", srv)
		_CoreServices_CMDB_MANUAL_REVIEW_GET_Handler = h.Interceptor(_CoreServices_CMDB_MANUAL_REVIEW_GET_Handler)
	}

	_CoreServices_CMDB_MANUAL_REVIEW_LISTBYSPONSORID_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MANUAL_REVIEW_LISTBYSPONSORID(ctx, req.(*GetReviewsBySponsorIdRequest))
	}
	var _CoreServices_CMDB_MANUAL_REVIEW_LISTBYSPONSORID_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MANUAL_REVIEW_LISTBYSPONSORID_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MANUAL_REVIEW_LISTBYSPONSORID", srv)
		_CoreServices_CMDB_MANUAL_REVIEW_LISTBYSPONSORID_Handler = h.Interceptor(_CoreServices_CMDB_MANUAL_REVIEW_LISTBYSPONSORID_Handler)
	}

	_CoreServices_CMDB_MANUAL_REVIEW_LISTBYUserID_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MANUAL_REVIEW_LISTBYUserID(ctx, req.(*GetReviewsByUserIdRequest))
	}
	var _CoreServices_CMDB_MANUAL_REVIEW_LISTBYUserID_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MANUAL_REVIEW_LISTBYUserID_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MANUAL_REVIEW_LISTBYUserID", srv)
		_CoreServices_CMDB_MANUAL_REVIEW_LISTBYUserID_Handler = h.Interceptor(_CoreServices_CMDB_MANUAL_REVIEW_LISTBYUserID_Handler)
	}

	_CoreServices_CMDB_MANUAL_REVIEW_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MANUAL_REVIEW_UPDATE(ctx, req.(*UpdateApproval))
	}
	var _CoreServices_CMDB_MANUAL_REVIEW_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MANUAL_REVIEW_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MANUAL_REVIEW_UPDATE", srv)
		_CoreServices_CMDB_MANUAL_REVIEW_UPDATE_Handler = h.Interceptor(_CoreServices_CMDB_MANUAL_REVIEW_UPDATE_Handler)
	}

	_CoreServices_CMDB_MBOX_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MBOX_GET(ctx, req.(*CMDB_MBOX_GET_Request))
	}
	var _CoreServices_CMDB_MBOX_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MBOX_GET_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MBOX_GET", srv)
		_CoreServices_CMDB_MBOX_GET_Handler = h.Interceptor(_CoreServices_CMDB_MBOX_GET_Handler)
	}

	_CoreServices_CMDB_MBOX_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MBOX_LIST(ctx, req.(*QueryMBoxRequest))
	}
	var _CoreServices_CMDB_MBOX_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MBOX_LIST_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MBOX_LIST", srv)
		_CoreServices_CMDB_MBOX_LIST_Handler = h.Interceptor(_CoreServices_CMDB_MBOX_LIST_Handler)
	}

	_CoreServices_CMDB_MBOX_READ_ALL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MBOX_READ_ALL(ctx, req.(*CMDB_MBOX_READ_ALL_Request))
	}
	var _CoreServices_CMDB_MBOX_READ_ALL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MBOX_READ_ALL_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MBOX_READ_ALL", srv)
		_CoreServices_CMDB_MBOX_READ_ALL_Handler = h.Interceptor(_CoreServices_CMDB_MBOX_READ_ALL_Handler)
	}

	_CoreServices_CMDB_MBOX_STATS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MBOX_STATS(ctx, req.(*CMDB_MBOX_STATS_Request))
	}
	var _CoreServices_CMDB_MBOX_STATS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MBOX_STATS_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MBOX_STATS", srv)
		_CoreServices_CMDB_MBOX_STATS_Handler = h.Interceptor(_CoreServices_CMDB_MBOX_STATS_Handler)
	}

	_CoreServices_CMDB_MEMBER_ADD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MEMBER_ADD(ctx, req.(*MemberAddRequest))
	}
	var _CoreServices_CMDB_MEMBER_ADD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MEMBER_ADD_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MEMBER_ADD", srv)
		_CoreServices_CMDB_MEMBER_ADD_Handler = h.Interceptor(_CoreServices_CMDB_MEMBER_ADD_Handler)
	}

	_CoreServices_CMDB_MEMBER_ADD_BY_INVITECODE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MEMBER_ADD_BY_INVITECODE(ctx, req.(*MemberAddByInviteCodeRequest))
	}
	var _CoreServices_CMDB_MEMBER_ADD_BY_INVITECODE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MEMBER_ADD_BY_INVITECODE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MEMBER_ADD_BY_INVITECODE", srv)
		_CoreServices_CMDB_MEMBER_ADD_BY_INVITECODE_Handler = h.Interceptor(_CoreServices_CMDB_MEMBER_ADD_BY_INVITECODE_Handler)
	}

	_CoreServices_CMDB_MEMBER_LABEL_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MEMBER_LABEL_LIST(ctx, req.(*CMDB_MEMBER_LABEL_LIST_Request))
	}
	var _CoreServices_CMDB_MEMBER_LABEL_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MEMBER_LABEL_LIST_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MEMBER_LABEL_LIST", srv)
		_CoreServices_CMDB_MEMBER_LABEL_LIST_Handler = h.Interceptor(_CoreServices_CMDB_MEMBER_LABEL_LIST_Handler)
	}

	_CoreServices_CMDB_MEMBER_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MEMBER_LIST(ctx, req.(*MemberListRequest))
	}
	var _CoreServices_CMDB_MEMBER_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MEMBER_LIST_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MEMBER_LIST", srv)
		_CoreServices_CMDB_MEMBER_LIST_Handler = h.Interceptor(_CoreServices_CMDB_MEMBER_LIST_Handler)
	}

	_CoreServices_CMDB_MEMBER_REMOVE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MEMBER_REMOVE(ctx, req.(*MemberRemoveRequest))
	}
	var _CoreServices_CMDB_MEMBER_REMOVE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MEMBER_REMOVE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MEMBER_REMOVE", srv)
		_CoreServices_CMDB_MEMBER_REMOVE_Handler = h.Interceptor(_CoreServices_CMDB_MEMBER_REMOVE_Handler)
	}

	_CoreServices_CMDB_MY_APPLICATIONS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MY_APPLICATIONS_LIST(ctx, req.(*ApplicationListRequest))
	}
	var _CoreServices_CMDB_MY_APPLICATIONS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MY_APPLICATIONS_LIST_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MY_APPLICATIONS_LIST", srv)
		_CoreServices_CMDB_MY_APPLICATIONS_LIST_Handler = h.Interceptor(_CoreServices_CMDB_MY_APPLICATIONS_LIST_Handler)
	}

	_CoreServices_CMDB_MY_PROJECTS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_MY_PROJECTS_LIST(ctx, req.(*ProjectListRequest))
	}
	var _CoreServices_CMDB_MY_PROJECTS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_MY_PROJECTS_LIST_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_MY_PROJECTS_LIST", srv)
		_CoreServices_CMDB_MY_PROJECTS_LIST_Handler = h.Interceptor(_CoreServices_CMDB_MY_PROJECTS_LIST_Handler)
	}

	_CoreServices_CMDB_NOTIFYITEM_QUERY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_NOTIFYITEM_QUERY(ctx, req.(*QueryNotifyItemRequest))
	}
	var _CoreServices_CMDB_NOTIFYITEM_QUERY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_NOTIFYITEM_QUERY_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_NOTIFYITEM_QUERY", srv)
		_CoreServices_CMDB_NOTIFYITEM_QUERY_Handler = h.Interceptor(_CoreServices_CMDB_NOTIFYITEM_QUERY_Handler)
	}

	_CoreServices_CMDB_NOTIFYITEM_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_NOTIFYITEM_UPDATE(ctx, req.(*UpdateNotifyItemRequest))
	}
	var _CoreServices_CMDB_NOTIFYITEM_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_NOTIFYITEM_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_NOTIFYITEM_UPDATE", srv)
		_CoreServices_CMDB_NOTIFYITEM_UPDATE_Handler = h.Interceptor(_CoreServices_CMDB_NOTIFYITEM_UPDATE_Handler)
	}

	_CoreServices_CMDB_NOTIFY_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_NOTIFY_CREATE(ctx, req.(*CreateNotifyRequest))
	}
	var _CoreServices_CMDB_NOTIFY_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_NOTIFY_CREATE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_NOTIFY_CREATE", srv)
		_CoreServices_CMDB_NOTIFY_CREATE_Handler = h.Interceptor(_CoreServices_CMDB_NOTIFY_CREATE_Handler)
	}

	_CoreServices_CMDB_NOTIFY_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_NOTIFY_DELETE(ctx, req.(*CMDB_NOTIFY_DELETE_Request))
	}
	var _CoreServices_CMDB_NOTIFY_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_NOTIFY_DELETE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_NOTIFY_DELETE", srv)
		_CoreServices_CMDB_NOTIFY_DELETE_Handler = h.Interceptor(_CoreServices_CMDB_NOTIFY_DELETE_Handler)
	}

	_CoreServices_CMDB_NOTIFY_DISABLE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_NOTIFY_DISABLE(ctx, req.(*CMDB_NOTIFY_DISABLE_Request))
	}
	var _CoreServices_CMDB_NOTIFY_DISABLE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_NOTIFY_DISABLE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_NOTIFY_DISABLE", srv)
		_CoreServices_CMDB_NOTIFY_DISABLE_Handler = h.Interceptor(_CoreServices_CMDB_NOTIFY_DISABLE_Handler)
	}

	_CoreServices_CMDB_NOTIFY_ENABLE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_NOTIFY_ENABLE(ctx, req.(*CMDB_NOTIFY_ENABLE_Request))
	}
	var _CoreServices_CMDB_NOTIFY_ENABLE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_NOTIFY_ENABLE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_NOTIFY_ENABLE", srv)
		_CoreServices_CMDB_NOTIFY_ENABLE_Handler = h.Interceptor(_CoreServices_CMDB_NOTIFY_ENABLE_Handler)
	}

	_CoreServices_CMDB_NOTIFY_FUZZY_QUERY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_NOTIFY_FUZZY_QUERY(ctx, req.(*CMDB_NOTIFY_FUZZY_QUERY_Request))
	}
	var _CoreServices_CMDB_NOTIFY_FUZZY_QUERY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_NOTIFY_FUZZY_QUERY_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_NOTIFY_FUZZY_QUERY", srv)
		_CoreServices_CMDB_NOTIFY_FUZZY_QUERY_Handler = h.Interceptor(_CoreServices_CMDB_NOTIFY_FUZZY_QUERY_Handler)
	}

	_CoreServices_CMDB_NOTIFY_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_NOTIFY_GET(ctx, req.(*CMDB_NOTIFY_GET_Request))
	}
	var _CoreServices_CMDB_NOTIFY_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_NOTIFY_GET_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_NOTIFY_GET", srv)
		_CoreServices_CMDB_NOTIFY_GET_Handler = h.Interceptor(_CoreServices_CMDB_NOTIFY_GET_Handler)
	}

	_CoreServices_CMDB_NOTIFY_HISTORIES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_NOTIFY_HISTORIES(ctx, req.(*QueryNotifyHistoryRequest))
	}
	var _CoreServices_CMDB_NOTIFY_HISTORIES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_NOTIFY_HISTORIES_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_NOTIFY_HISTORIES", srv)
		_CoreServices_CMDB_NOTIFY_HISTORIES_Handler = h.Interceptor(_CoreServices_CMDB_NOTIFY_HISTORIES_Handler)
	}

	_CoreServices_CMDB_NOTIFY_QUERY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_NOTIFY_QUERY(ctx, req.(*QueryNotifyRequest))
	}
	var _CoreServices_CMDB_NOTIFY_QUERY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_NOTIFY_QUERY_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_NOTIFY_QUERY", srv)
		_CoreServices_CMDB_NOTIFY_QUERY_Handler = h.Interceptor(_CoreServices_CMDB_NOTIFY_QUERY_Handler)
	}

	_CoreServices_CMDB_NOTIFY_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_NOTIFY_UPDATE(ctx, req.(*UpdateNotifyRequest))
	}
	var _CoreServices_CMDB_NOTIFY_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_NOTIFY_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_NOTIFY_UPDATE", srv)
		_CoreServices_CMDB_NOTIFY_UPDATE_Handler = h.Interceptor(_CoreServices_CMDB_NOTIFY_UPDATE_Handler)
	}

	_CoreServices_CMDB_PERMISSION_ACCESS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PERMISSION_ACCESS(ctx, req.(*ScopeRoleAccessRequest))
	}
	var _CoreServices_CMDB_PERMISSION_ACCESS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_PERMISSION_ACCESS_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_PERMISSION_ACCESS", srv)
		_CoreServices_CMDB_PERMISSION_ACCESS_Handler = h.Interceptor(_CoreServices_CMDB_PERMISSION_ACCESS_Handler)
	}

	_CoreServices_CMDB_PERMISSION_CHECK_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PERMISSION_CHECK(ctx, req.(*PermissionCheckRequest))
	}
	var _CoreServices_CMDB_PERMISSION_CHECK_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_PERMISSION_CHECK_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_PERMISSION_CHECK", srv)
		_CoreServices_CMDB_PERMISSION_CHECK_Handler = h.Interceptor(_CoreServices_CMDB_PERMISSION_CHECK_Handler)
	}

	_CoreServices_CMDB_PERMISSION_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PERMISSION_LIST(ctx, req.(*CMDB_PERMISSION_LIST_Request))
	}
	var _CoreServices_CMDB_PERMISSION_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_PERMISSION_LIST_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_PERMISSION_LIST", srv)
		_CoreServices_CMDB_PERMISSION_LIST_Handler = h.Interceptor(_CoreServices_CMDB_PERMISSION_LIST_Handler)
	}

	_CoreServices_CMDB_PROJECT_FUNCTIONS_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_FUNCTIONS_GET(ctx, req.(*CMDB_PROJECT_FUNCTIONS_GET_Request))
	}
	var _CoreServices_CMDB_PROJECT_FUNCTIONS_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_PROJECT_FUNCTIONS_GET_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_PROJECT_FUNCTIONS_GET", srv)
		_CoreServices_CMDB_PROJECT_FUNCTIONS_GET_Handler = h.Interceptor(_CoreServices_CMDB_PROJECT_FUNCTIONS_GET_Handler)
	}

	_CoreServices_CMDB_PROJECT_FUNCTIONS_SET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_FUNCTIONS_SET(ctx, req.(*ProjectFunctionSetRequest))
	}
	var _CoreServices_CMDB_PROJECT_FUNCTIONS_SET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_PROJECT_FUNCTIONS_SET_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_PROJECT_FUNCTIONS_SET", srv)
		_CoreServices_CMDB_PROJECT_FUNCTIONS_SET_Handler = h.Interceptor(_CoreServices_CMDB_PROJECT_FUNCTIONS_SET_Handler)
	}

	_CoreServices_CMDB_PROJECT_GET_NSINFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_GET_NSINFO(ctx, req.(*CMDB_PROJECT_GET_NSINFO_Request))
	}
	var _CoreServices_CMDB_PROJECT_GET_NSINFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_PROJECT_GET_NSINFO_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_PROJECT_GET_NSINFO", srv)
		_CoreServices_CMDB_PROJECT_GET_NSINFO_Handler = h.Interceptor(_CoreServices_CMDB_PROJECT_GET_NSINFO_Handler)
	}

	_CoreServices_CMDB_PROJECT_METRICS_HISTOGRAM_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_METRICS_HISTOGRAM(ctx, req.(*CMDB_PROJECT_METRICS_HISTOGRAM_Request))
	}
	var _CoreServices_CMDB_PROJECT_METRICS_HISTOGRAM_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_PROJECT_METRICS_HISTOGRAM_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_PROJECT_METRICS_HISTOGRAM", srv)
		_CoreServices_CMDB_PROJECT_METRICS_HISTOGRAM_Handler = h.Interceptor(_CoreServices_CMDB_PROJECT_METRICS_HISTOGRAM_Handler)
	}

	_CoreServices_CMDB_PROJECT_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_UPDATE(ctx, req.(*ProjectUpdateRequest))
	}
	var _CoreServices_CMDB_PROJECT_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_PROJECT_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_PROJECT_UPDATE", srv)
		_CoreServices_CMDB_PROJECT_UPDATE_Handler = h.Interceptor(_CoreServices_CMDB_PROJECT_UPDATE_Handler)
	}

	_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE(ctx, req.(*ProjectWorkSpaceAbility))
	}
	var _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE", srv)
		_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE_Handler = h.Interceptor(_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE_Handler)
	}

	_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE(ctx, req.(*CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request))
	}
	var _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE", srv)
		_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Handler = h.Interceptor(_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Handler)
	}

	_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_WORKSPACE_ABILITIES_GET(ctx, req.(*CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request))
	}
	var _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_GET_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_PROJECT_WORKSPACE_ABILITIES_GET", srv)
		_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Handler = h.Interceptor(_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Handler)
	}

	_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE(ctx, req.(*ProjectWorkSpaceAbility))
	}
	var _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE", srv)
		_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE_Handler = h.Interceptor(_CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE_Handler)
	}

	_CoreServices_CMDB_ROLES_LIST_BY_USER_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CMDB_ROLES_LIST_BY_USER(ctx, req.(*ListMemberRolesByUserRequest))
	}
	var _CoreServices_CMDB_ROLES_LIST_BY_USER_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_CMDB_ROLES_LIST_BY_USER_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "CMDB_ROLES_LIST_BY_USER", srv)
		_CoreServices_CMDB_ROLES_LIST_BY_USER_Handler = h.Interceptor(_CoreServices_CMDB_ROLES_LIST_BY_USER_Handler)
	}

	_CoreServices_EVENTBOX_WEBSOCKET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.EVENTBOX_WEBSOCKET(ctx, req.(*EVENTBOX_WEBSOCKET_Request))
	}
	var _CoreServices_EVENTBOX_WEBSOCKET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_EVENTBOX_WEBSOCKET_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "EVENTBOX_WEBSOCKET", srv)
		_CoreServices_EVENTBOX_WEBSOCKET_Handler = h.Interceptor(_CoreServices_EVENTBOX_WEBSOCKET_Handler)
	}

	_CoreServices_EVENTBOX_WEBSOCKET_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.EVENTBOX_WEBSOCKET_INFO(ctx, req.(*EVENTBOX_WEBSOCKET_INFO_Request))
	}
	var _CoreServices_EVENTBOX_WEBSOCKET_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_EVENTBOX_WEBSOCKET_INFO_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "EVENTBOX_WEBSOCKET_INFO", srv)
		_CoreServices_EVENTBOX_WEBSOCKET_INFO_Handler = h.Interceptor(_CoreServices_EVENTBOX_WEBSOCKET_INFO_Handler)
	}

	_CoreServices_QUOTA_GET_PROJECT_NAMESPACES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QUOTA_GET_PROJECT_NAMESPACES(ctx, req.(*QUOTA_GET_PROJECT_NAMESPACES_Request))
	}
	var _CoreServices_QUOTA_GET_PROJECT_NAMESPACES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_QUOTA_GET_PROJECT_NAMESPACES_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "QUOTA_GET_PROJECT_NAMESPACES", srv)
		_CoreServices_QUOTA_GET_PROJECT_NAMESPACES_Handler = h.Interceptor(_CoreServices_QUOTA_GET_PROJECT_NAMESPACES_Handler)
	}

	_CoreServices_QUOTA_GET_PROJECT_QUOTA_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QUOTA_GET_PROJECT_QUOTA(ctx, req.(*QUOTA_GET_PROJECT_QUOTA_Request))
	}
	var _CoreServices_QUOTA_GET_PROJECT_QUOTA_info transport.ServiceInfo
	if h.Interceptor != nil {
		_CoreServices_QUOTA_GET_PROJECT_QUOTA_info = transport.NewServiceInfo("erda.openapiv1.core.core_services", "QUOTA_GET_PROJECT_QUOTA", srv)
		_CoreServices_QUOTA_GET_PROJECT_QUOTA_Handler = h.Interceptor(_CoreServices_QUOTA_GET_PROJECT_QUOTA_Handler)
	}

	var serviceDesc = _CoreServices_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CMDB_APPLICATIONS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ApplicationListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_APPLICATIONS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_APPLICATIONS_LIST_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_APPLICATIONS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_APPLICATIONS_LIST",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_APPLICATIONS_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_APPLICATION_FETCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ApplicationFetchRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_APPLICATION_FETCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_APPLICATION_FETCH_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_APPLICATION_FETCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_APPLICATION_FETCH",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_APPLICATION_FETCH_Handler)
			},
		},
		{
			MethodName: "CMDB_APPLICATION_PIN",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_APPLICATION_PIN_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_APPLICATION_PIN(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_APPLICATION_PIN_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_APPLICATION_PIN_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_APPLICATION_PIN",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_APPLICATION_PIN_Handler)
			},
		},
		{
			MethodName: "CMDB_APPLICATION_UNPIN",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_APPLICATION_UNPIN_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_APPLICATION_UNPIN(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_APPLICATION_UNPIN_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_APPLICATION_UNPIN_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_APPLICATION_UNPIN",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_APPLICATION_UNPIN_Handler)
			},
		},
		{
			MethodName: "CMDB_APPROVE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ApproveCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_APPROVE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_APPROVE_CREATE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_APPROVE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_APPROVE_CREATE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_APPROVE_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_APP_LIST_TEMPLATES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_APP_LIST_TEMPLATES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_APP_LIST_TEMPLATES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_APP_LIST_TEMPLATES_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_APP_LIST_TEMPLATES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_APP_LIST_TEMPLATES",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_APP_LIST_TEMPLATES_Handler)
			},
		},
		{
			MethodName: "CMDB_AUDITS_LIST_SET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AuditListCleanCronRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_AUDITS_LIST_SET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_AUDITS_LIST_SET_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_AUDITS_LIST_SET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_AUDITS_LIST_SET",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_AUDITS_LIST_SET_Handler)
			},
		},
		{
			MethodName: "CMDB_AUDITS_SET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AuditSetCleanCronRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_AUDITS_SET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_AUDITS_SET_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_AUDITS_SET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_AUDITS_SET",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_AUDITS_SET_Handler)
			},
		},
		{
			MethodName: "CMDB_CLUSTER_DEREFERENCE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DereferenceClusterRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_CLUSTER_DEREFERENCE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_CLUSTER_DEREFERENCE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_CLUSTER_DEREFERENCE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_CLUSTER_DEREFERENCE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_CLUSTER_DEREFERENCE_Handler)
			},
		},
		{
			MethodName: "CMDB_ERRORLOG_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ErrorLogCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_ERRORLOG_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_ERRORLOG_CREATE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_ERRORLOG_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_ERRORLOG_CREATE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_ERRORLOG_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_IMAGE_FETCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_IMAGE_FETCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_IMAGE_FETCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_IMAGE_FETCH_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_IMAGE_FETCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_IMAGE_FETCH",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_IMAGE_FETCH_Handler)
			},
		},
		{
			MethodName: "CMDB_IMAGE_UPLOAD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_IMAGE_UPLOAD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_IMAGE_UPLOAD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_IMAGE_UPLOAD_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_IMAGE_UPLOAD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_IMAGE_UPLOAD",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_IMAGE_UPLOAD_Handler)
			},
		},
		{
			MethodName: "CMDB_LABEL_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProjectLabelCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_LABEL_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_LABEL_CREATE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_LABEL_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_LABEL_CREATE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_LABEL_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_LABEL_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_LABEL_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_LABEL_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_LABEL_DELETE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_LABEL_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_LABEL_DELETE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_LABEL_DELETE_Handler)
			},
		},
		{
			MethodName: "CMDB_LABEL_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProjectLabelListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_LABEL_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_LABEL_LIST_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_LABEL_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_LABEL_LIST",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_LABEL_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_LABEL_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProjectLabelUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_LABEL_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_LABEL_UPDATE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_LABEL_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_LABEL_UPDATE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_LABEL_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMDB_LICENSE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_LICENSE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_LICENSE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_LICENSE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_LICENSE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_LICENSE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_LICENSE_Handler)
			},
		},
		{
			MethodName: "CMDB_MANUAL_REVIEW_ADD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_MANUAL_REVIEW_ADD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MANUAL_REVIEW_ADD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MANUAL_REVIEW_ADD_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MANUAL_REVIEW_ADD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_ADD",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MANUAL_REVIEW_ADD_Handler)
			},
		},
		{
			MethodName: "CMDB_MANUAL_REVIEW_ADDUSER",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateReviewUser)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MANUAL_REVIEW_ADDUSER(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MANUAL_REVIEW_ADDUSER_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MANUAL_REVIEW_ADDUSER_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_ADDUSER",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MANUAL_REVIEW_ADDUSER_Handler)
			},
		},
		{
			MethodName: "CMDB_MANUAL_REVIEW_AUTHORITY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAuthorityByUserIdRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MANUAL_REVIEW_AUTHORITY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MANUAL_REVIEW_AUTHORITY_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MANUAL_REVIEW_AUTHORITY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_AUTHORITY",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MANUAL_REVIEW_AUTHORITY_Handler)
			},
		},
		{
			MethodName: "CMDB_MANUAL_REVIEW_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetReviewByTaskIdIdRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MANUAL_REVIEW_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MANUAL_REVIEW_GET_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MANUAL_REVIEW_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_GET",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MANUAL_REVIEW_GET_Handler)
			},
		},
		{
			MethodName: "CMDB_MANUAL_REVIEW_LISTBYSPONSORID",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetReviewsBySponsorIdRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MANUAL_REVIEW_LISTBYSPONSORID(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MANUAL_REVIEW_LISTBYSPONSORID_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MANUAL_REVIEW_LISTBYSPONSORID_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_LISTBYSPONSORID",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MANUAL_REVIEW_LISTBYSPONSORID_Handler)
			},
		},
		{
			MethodName: "CMDB_MANUAL_REVIEW_LISTBYUserID",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetReviewsByUserIdRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MANUAL_REVIEW_LISTBYUserID(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MANUAL_REVIEW_LISTBYUserID_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MANUAL_REVIEW_LISTBYUserID_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_LISTBYUserID",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MANUAL_REVIEW_LISTBYUserID_Handler)
			},
		},
		{
			MethodName: "CMDB_MANUAL_REVIEW_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateApproval)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MANUAL_REVIEW_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MANUAL_REVIEW_UPDATE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MANUAL_REVIEW_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MANUAL_REVIEW_UPDATE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MANUAL_REVIEW_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMDB_MBOX_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_MBOX_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MBOX_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MBOX_GET_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MBOX_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MBOX_GET",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MBOX_GET_Handler)
			},
		},
		{
			MethodName: "CMDB_MBOX_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryMBoxRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MBOX_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MBOX_LIST_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MBOX_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MBOX_LIST",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MBOX_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_MBOX_READ_ALL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_MBOX_READ_ALL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MBOX_READ_ALL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MBOX_READ_ALL_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MBOX_READ_ALL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MBOX_READ_ALL",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MBOX_READ_ALL_Handler)
			},
		},
		{
			MethodName: "CMDB_MBOX_STATS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_MBOX_STATS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MBOX_STATS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MBOX_STATS_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MBOX_STATS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MBOX_STATS",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MBOX_STATS_Handler)
			},
		},
		{
			MethodName: "CMDB_MEMBER_ADD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MemberAddRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MEMBER_ADD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MEMBER_ADD_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MEMBER_ADD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MEMBER_ADD",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MEMBER_ADD_Handler)
			},
		},
		{
			MethodName: "CMDB_MEMBER_ADD_BY_INVITECODE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MemberAddByInviteCodeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MEMBER_ADD_BY_INVITECODE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MEMBER_ADD_BY_INVITECODE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MEMBER_ADD_BY_INVITECODE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MEMBER_ADD_BY_INVITECODE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MEMBER_ADD_BY_INVITECODE_Handler)
			},
		},
		{
			MethodName: "CMDB_MEMBER_LABEL_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_MEMBER_LABEL_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MEMBER_LABEL_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MEMBER_LABEL_LIST_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MEMBER_LABEL_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MEMBER_LABEL_LIST",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MEMBER_LABEL_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_MEMBER_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MemberListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MEMBER_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MEMBER_LIST_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MEMBER_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MEMBER_LIST",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MEMBER_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_MEMBER_REMOVE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MemberRemoveRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MEMBER_REMOVE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MEMBER_REMOVE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MEMBER_REMOVE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MEMBER_REMOVE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MEMBER_REMOVE_Handler)
			},
		},
		{
			MethodName: "CMDB_MY_APPLICATIONS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ApplicationListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MY_APPLICATIONS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MY_APPLICATIONS_LIST_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MY_APPLICATIONS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MY_APPLICATIONS_LIST",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MY_APPLICATIONS_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_MY_PROJECTS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProjectListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_MY_PROJECTS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_MY_PROJECTS_LIST_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_MY_PROJECTS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_MY_PROJECTS_LIST",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_MY_PROJECTS_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_NOTIFYITEM_QUERY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryNotifyItemRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_NOTIFYITEM_QUERY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_NOTIFYITEM_QUERY_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_NOTIFYITEM_QUERY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_NOTIFYITEM_QUERY",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_NOTIFYITEM_QUERY_Handler)
			},
		},
		{
			MethodName: "CMDB_NOTIFYITEM_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateNotifyItemRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_NOTIFYITEM_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_NOTIFYITEM_UPDATE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_NOTIFYITEM_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_NOTIFYITEM_UPDATE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_NOTIFYITEM_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMDB_NOTIFY_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateNotifyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_NOTIFY_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_NOTIFY_CREATE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_NOTIFY_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_NOTIFY_CREATE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_NOTIFY_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_NOTIFY_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_NOTIFY_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_NOTIFY_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_NOTIFY_DELETE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_NOTIFY_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_NOTIFY_DELETE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_NOTIFY_DELETE_Handler)
			},
		},
		{
			MethodName: "CMDB_NOTIFY_DISABLE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_NOTIFY_DISABLE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_NOTIFY_DISABLE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_NOTIFY_DISABLE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_NOTIFY_DISABLE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_NOTIFY_DISABLE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_NOTIFY_DISABLE_Handler)
			},
		},
		{
			MethodName: "CMDB_NOTIFY_ENABLE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_NOTIFY_ENABLE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_NOTIFY_ENABLE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_NOTIFY_ENABLE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_NOTIFY_ENABLE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_NOTIFY_ENABLE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_NOTIFY_ENABLE_Handler)
			},
		},
		{
			MethodName: "CMDB_NOTIFY_FUZZY_QUERY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_NOTIFY_FUZZY_QUERY_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_NOTIFY_FUZZY_QUERY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_NOTIFY_FUZZY_QUERY_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_NOTIFY_FUZZY_QUERY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_NOTIFY_FUZZY_QUERY",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_NOTIFY_FUZZY_QUERY_Handler)
			},
		},
		{
			MethodName: "CMDB_NOTIFY_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_NOTIFY_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_NOTIFY_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_NOTIFY_GET_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_NOTIFY_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_NOTIFY_GET",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_NOTIFY_GET_Handler)
			},
		},
		{
			MethodName: "CMDB_NOTIFY_HISTORIES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryNotifyHistoryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_NOTIFY_HISTORIES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_NOTIFY_HISTORIES_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_NOTIFY_HISTORIES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_NOTIFY_HISTORIES",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_NOTIFY_HISTORIES_Handler)
			},
		},
		{
			MethodName: "CMDB_NOTIFY_QUERY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryNotifyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_NOTIFY_QUERY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_NOTIFY_QUERY_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_NOTIFY_QUERY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_NOTIFY_QUERY",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_NOTIFY_QUERY_Handler)
			},
		},
		{
			MethodName: "CMDB_NOTIFY_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateNotifyRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_NOTIFY_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_NOTIFY_UPDATE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_NOTIFY_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_NOTIFY_UPDATE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_NOTIFY_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMDB_PERMISSION_ACCESS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ScopeRoleAccessRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_PERMISSION_ACCESS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_PERMISSION_ACCESS_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_PERMISSION_ACCESS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_PERMISSION_ACCESS",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_PERMISSION_ACCESS_Handler)
			},
		},
		{
			MethodName: "CMDB_PERMISSION_CHECK",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PermissionCheckRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_PERMISSION_CHECK(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_PERMISSION_CHECK_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_PERMISSION_CHECK_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_PERMISSION_CHECK",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_PERMISSION_CHECK_Handler)
			},
		},
		{
			MethodName: "CMDB_PERMISSION_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PERMISSION_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_PERMISSION_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_PERMISSION_LIST_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_PERMISSION_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_PERMISSION_LIST",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_PERMISSION_LIST_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_FUNCTIONS_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PROJECT_FUNCTIONS_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_PROJECT_FUNCTIONS_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_PROJECT_FUNCTIONS_GET_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_PROJECT_FUNCTIONS_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_PROJECT_FUNCTIONS_GET",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_PROJECT_FUNCTIONS_GET_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_FUNCTIONS_SET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProjectFunctionSetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_PROJECT_FUNCTIONS_SET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_PROJECT_FUNCTIONS_SET_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_PROJECT_FUNCTIONS_SET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_PROJECT_FUNCTIONS_SET",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_PROJECT_FUNCTIONS_SET_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_GET_NSINFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PROJECT_GET_NSINFO_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_PROJECT_GET_NSINFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_PROJECT_GET_NSINFO_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_PROJECT_GET_NSINFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_PROJECT_GET_NSINFO",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_PROJECT_GET_NSINFO_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_METRICS_HISTOGRAM",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PROJECT_METRICS_HISTOGRAM_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_PROJECT_METRICS_HISTOGRAM(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_PROJECT_METRICS_HISTOGRAM_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_PROJECT_METRICS_HISTOGRAM_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_PROJECT_METRICS_HISTOGRAM",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_PROJECT_METRICS_HISTOGRAM_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProjectUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_PROJECT_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_PROJECT_UPDATE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_PROJECT_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_PROJECT_UPDATE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_PROJECT_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProjectWorkSpaceAbility)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_CREATE_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_DELETE_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_WORKSPACE_ABILITIES_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_PROJECT_WORKSPACE_ABILITIES_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_GET_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_PROJECT_WORKSPACE_ABILITIES_GET",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_GET_Handler)
			},
		},
		{
			MethodName: "CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ProjectWorkSpaceAbility)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_PROJECT_WORKSPACE_ABILITIES_UPDATE_Handler)
			},
		},
		{
			MethodName: "CMDB_ROLES_LIST_BY_USER",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListMemberRolesByUserRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).CMDB_ROLES_LIST_BY_USER(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_CMDB_ROLES_LIST_BY_USER_info)
				}
				if interceptor == nil {
					return _CoreServices_CMDB_ROLES_LIST_BY_USER_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/CMDB_ROLES_LIST_BY_USER",
				}
				return interceptor(ctx, in, info, _CoreServices_CMDB_ROLES_LIST_BY_USER_Handler)
			},
		},
		{
			MethodName: "EVENTBOX_WEBSOCKET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(EVENTBOX_WEBSOCKET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).EVENTBOX_WEBSOCKET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_EVENTBOX_WEBSOCKET_info)
				}
				if interceptor == nil {
					return _CoreServices_EVENTBOX_WEBSOCKET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/EVENTBOX_WEBSOCKET",
				}
				return interceptor(ctx, in, info, _CoreServices_EVENTBOX_WEBSOCKET_Handler)
			},
		},
		{
			MethodName: "EVENTBOX_WEBSOCKET_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(EVENTBOX_WEBSOCKET_INFO_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).EVENTBOX_WEBSOCKET_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_EVENTBOX_WEBSOCKET_INFO_info)
				}
				if interceptor == nil {
					return _CoreServices_EVENTBOX_WEBSOCKET_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/EVENTBOX_WEBSOCKET_INFO",
				}
				return interceptor(ctx, in, info, _CoreServices_EVENTBOX_WEBSOCKET_INFO_Handler)
			},
		},
		{
			MethodName: "QUOTA_GET_PROJECT_NAMESPACES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QUOTA_GET_PROJECT_NAMESPACES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).QUOTA_GET_PROJECT_NAMESPACES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_QUOTA_GET_PROJECT_NAMESPACES_info)
				}
				if interceptor == nil {
					return _CoreServices_QUOTA_GET_PROJECT_NAMESPACES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/QUOTA_GET_PROJECT_NAMESPACES",
				}
				return interceptor(ctx, in, info, _CoreServices_QUOTA_GET_PROJECT_NAMESPACES_Handler)
			},
		},
		{
			MethodName: "QUOTA_GET_PROJECT_QUOTA",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QUOTA_GET_PROJECT_QUOTA_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(CoreServicesServer).QUOTA_GET_PROJECT_QUOTA(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _CoreServices_QUOTA_GET_PROJECT_QUOTA_info)
				}
				if interceptor == nil {
					return _CoreServices_QUOTA_GET_PROJECT_QUOTA_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.core.core_services/QUOTA_GET_PROJECT_QUOTA",
				}
				return interceptor(ctx, in, info, _CoreServices_QUOTA_GET_PROJECT_QUOTA_Handler)
			},
		},
	}
	return &serviceDesc
}
