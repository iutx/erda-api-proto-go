// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: hepa.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// HepaClient is the client API for Hepa service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HepaClient interface {
	HEPA_DOMAINS_GET(ctx context.Context, in *HEPA_DOMAINS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HEPA_RUNTIME_DOMAIN_GET(ctx context.Context, in *DomainListRequest, opts ...grpc.CallOption) (*DomainListResponse, error)
	HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE(ctx context.Context, in *HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hepaClient struct {
	cc grpc1.ClientConnInterface
}

func NewHepaClient(cc grpc1.ClientConnInterface) HepaClient {
	return &hepaClient{cc}
}

func (c *hepaClient) HEPA_DOMAINS_GET(ctx context.Context, in *HEPA_DOMAINS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.hepa.hepa/HEPA_DOMAINS_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hepaClient) HEPA_RUNTIME_DOMAIN_GET(ctx context.Context, in *DomainListRequest, opts ...grpc.CallOption) (*DomainListResponse, error) {
	out := new(DomainListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.hepa.hepa/HEPA_RUNTIME_DOMAIN_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hepaClient) HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE(ctx context.Context, in *HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.hepa.hepa/HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HepaServer is the server API for Hepa service.
// All implementations should embed UnimplementedHepaServer
// for forward compatibility
type HepaServer interface {
	HEPA_DOMAINS_GET(context.Context, *HEPA_DOMAINS_GET_Request) (*emptypb.Empty, error)
	HEPA_RUNTIME_DOMAIN_GET(context.Context, *DomainListRequest) (*DomainListResponse, error)
	HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE(context.Context, *HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_Request) (*emptypb.Empty, error)
}

// UnimplementedHepaServer should be embedded to have forward compatible implementations.
type UnimplementedHepaServer struct {
}

func (*UnimplementedHepaServer) HEPA_DOMAINS_GET(context.Context, *HEPA_DOMAINS_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HEPA_DOMAINS_GET not implemented")
}
func (*UnimplementedHepaServer) HEPA_RUNTIME_DOMAIN_GET(context.Context, *DomainListRequest) (*DomainListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HEPA_RUNTIME_DOMAIN_GET not implemented")
}
func (*UnimplementedHepaServer) HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE(context.Context, *HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE not implemented")
}

func RegisterHepaServer(s grpc1.ServiceRegistrar, srv HepaServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Hepa_serviceDesc(srv, opts...), srv)
}

var _Hepa_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.hepa.hepa",
	HandlerType: (*HepaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "hepa.proto",
}

func _get_Hepa_serviceDesc(srv HepaServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Hepa_HEPA_DOMAINS_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.HEPA_DOMAINS_GET(ctx, req.(*HEPA_DOMAINS_GET_Request))
	}
	var _Hepa_HEPA_DOMAINS_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Hepa_HEPA_DOMAINS_GET_info = transport.NewServiceInfo("erda.openapiv1.hepa.hepa", "HEPA_DOMAINS_GET", srv)
		_Hepa_HEPA_DOMAINS_GET_Handler = h.Interceptor(_Hepa_HEPA_DOMAINS_GET_Handler)
	}

	_Hepa_HEPA_RUNTIME_DOMAIN_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.HEPA_RUNTIME_DOMAIN_GET(ctx, req.(*DomainListRequest))
	}
	var _Hepa_HEPA_RUNTIME_DOMAIN_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Hepa_HEPA_RUNTIME_DOMAIN_GET_info = transport.NewServiceInfo("erda.openapiv1.hepa.hepa", "HEPA_RUNTIME_DOMAIN_GET", srv)
		_Hepa_HEPA_RUNTIME_DOMAIN_GET_Handler = h.Interceptor(_Hepa_HEPA_RUNTIME_DOMAIN_GET_Handler)
	}

	_Hepa_HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE(ctx, req.(*HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_Request))
	}
	var _Hepa_HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Hepa_HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.hepa.hepa", "HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE", srv)
		_Hepa_HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_Handler = h.Interceptor(_Hepa_HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_Handler)
	}

	var serviceDesc = _Hepa_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "HEPA_DOMAINS_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(HEPA_DOMAINS_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(HepaServer).HEPA_DOMAINS_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Hepa_HEPA_DOMAINS_GET_info)
				}
				if interceptor == nil {
					return _Hepa_HEPA_DOMAINS_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.hepa.hepa/HEPA_DOMAINS_GET",
				}
				return interceptor(ctx, in, info, _Hepa_HEPA_DOMAINS_GET_Handler)
			},
		},
		{
			MethodName: "HEPA_RUNTIME_DOMAIN_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DomainListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(HepaServer).HEPA_RUNTIME_DOMAIN_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Hepa_HEPA_RUNTIME_DOMAIN_GET_info)
				}
				if interceptor == nil {
					return _Hepa_HEPA_RUNTIME_DOMAIN_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.hepa.hepa/HEPA_RUNTIME_DOMAIN_GET",
				}
				return interceptor(ctx, in, info, _Hepa_HEPA_RUNTIME_DOMAIN_GET_Handler)
			},
		},
		{
			MethodName: "HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(HepaServer).HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Hepa_HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_info)
				}
				if interceptor == nil {
					return _Hepa_HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.hepa.hepa/HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE",
				}
				return interceptor(ctx, in, info, _Hepa_HEPA_RUNTIME_SERVICE_DOMAIN_UPDATE_Handler)
			},
		},
	}
	return &serviceDesc
}
