// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: dicehub.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// DicehubClient is the client API for Dicehub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DicehubClient interface {
	DICEHUB_RELEASES_DOWNLOAD(ctx context.Context, in *DICEHUB_RELEASES_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DICEHUB_RELEASES_YAML_GET(ctx context.Context, in *ReleaseGetDiceYmlRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	IMAGEHUB_IMAGE_LIST(ctx context.Context, in *ReleaseListRequest, opts ...grpc.CallOption) (*ReleaseListResponse, error)
	RELEASE_RULE_CREATE(ctx context.Context, in *CreateUpdateDeleteReleaseRuleRequest, opts ...grpc.CallOption) (*CreateBranchRuleResponse, error)
	RELEASE_RULE_LIST(ctx context.Context, in *RELEASE_RULE_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RELEASE_RULE_UPDATE(ctx context.Context, in *RELEASE_RULE_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RELEASE_RULEDelete(ctx context.Context, in *RELEASE_RULEDelete_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dicehubClient struct {
	cc grpc1.ClientConnInterface
}

func NewDicehubClient(cc grpc1.ClientConnInterface) DicehubClient {
	return &dicehubClient{cc}
}

func (c *dicehubClient) DICEHUB_RELEASES_DOWNLOAD(ctx context.Context, in *DICEHUB_RELEASES_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dicehub.dicehub/DICEHUB_RELEASES_DOWNLOAD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dicehubClient) DICEHUB_RELEASES_YAML_GET(ctx context.Context, in *ReleaseGetDiceYmlRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dicehub.dicehub/DICEHUB_RELEASES_YAML_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dicehubClient) IMAGEHUB_IMAGE_LIST(ctx context.Context, in *ReleaseListRequest, opts ...grpc.CallOption) (*ReleaseListResponse, error) {
	out := new(ReleaseListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dicehub.dicehub/IMAGEHUB_IMAGE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dicehubClient) RELEASE_RULE_CREATE(ctx context.Context, in *CreateUpdateDeleteReleaseRuleRequest, opts ...grpc.CallOption) (*CreateBranchRuleResponse, error) {
	out := new(CreateBranchRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dicehub.dicehub/RELEASE_RULE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dicehubClient) RELEASE_RULE_LIST(ctx context.Context, in *RELEASE_RULE_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dicehub.dicehub/RELEASE_RULE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dicehubClient) RELEASE_RULE_UPDATE(ctx context.Context, in *RELEASE_RULE_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dicehub.dicehub/RELEASE_RULE_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dicehubClient) RELEASE_RULEDelete(ctx context.Context, in *RELEASE_RULEDelete_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.dicehub.dicehub/RELEASE_RULE_delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DicehubServer is the server API for Dicehub service.
// All implementations should embed UnimplementedDicehubServer
// for forward compatibility
type DicehubServer interface {
	DICEHUB_RELEASES_DOWNLOAD(context.Context, *DICEHUB_RELEASES_DOWNLOAD_Request) (*emptypb.Empty, error)
	DICEHUB_RELEASES_YAML_GET(context.Context, *ReleaseGetDiceYmlRequest) (*emptypb.Empty, error)
	IMAGEHUB_IMAGE_LIST(context.Context, *ReleaseListRequest) (*ReleaseListResponse, error)
	RELEASE_RULE_CREATE(context.Context, *CreateUpdateDeleteReleaseRuleRequest) (*CreateBranchRuleResponse, error)
	RELEASE_RULE_LIST(context.Context, *RELEASE_RULE_LIST_Request) (*emptypb.Empty, error)
	RELEASE_RULE_UPDATE(context.Context, *RELEASE_RULE_UPDATE_Request) (*emptypb.Empty, error)
	RELEASE_RULEDelete(context.Context, *RELEASE_RULEDelete_Request) (*emptypb.Empty, error)
}

// UnimplementedDicehubServer should be embedded to have forward compatible implementations.
type UnimplementedDicehubServer struct {
}

func (*UnimplementedDicehubServer) DICEHUB_RELEASES_DOWNLOAD(context.Context, *DICEHUB_RELEASES_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DICEHUB_RELEASES_DOWNLOAD not implemented")
}
func (*UnimplementedDicehubServer) DICEHUB_RELEASES_YAML_GET(context.Context, *ReleaseGetDiceYmlRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DICEHUB_RELEASES_YAML_GET not implemented")
}
func (*UnimplementedDicehubServer) IMAGEHUB_IMAGE_LIST(context.Context, *ReleaseListRequest) (*ReleaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IMAGEHUB_IMAGE_LIST not implemented")
}
func (*UnimplementedDicehubServer) RELEASE_RULE_CREATE(context.Context, *CreateUpdateDeleteReleaseRuleRequest) (*CreateBranchRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RELEASE_RULE_CREATE not implemented")
}
func (*UnimplementedDicehubServer) RELEASE_RULE_LIST(context.Context, *RELEASE_RULE_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RELEASE_RULE_LIST not implemented")
}
func (*UnimplementedDicehubServer) RELEASE_RULE_UPDATE(context.Context, *RELEASE_RULE_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RELEASE_RULE_UPDATE not implemented")
}
func (*UnimplementedDicehubServer) RELEASE_RULEDelete(context.Context, *RELEASE_RULEDelete_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RELEASE_RULEDelete not implemented")
}

func RegisterDicehubServer(s grpc1.ServiceRegistrar, srv DicehubServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Dicehub_serviceDesc(srv, opts...), srv)
}

var _Dicehub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.dicehub.dicehub",
	HandlerType: (*DicehubServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "dicehub.proto",
}

func _get_Dicehub_serviceDesc(srv DicehubServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Dicehub_DICEHUB_RELEASES_DOWNLOAD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DICEHUB_RELEASES_DOWNLOAD(ctx, req.(*DICEHUB_RELEASES_DOWNLOAD_Request))
	}
	var _Dicehub_DICEHUB_RELEASES_DOWNLOAD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dicehub_DICEHUB_RELEASES_DOWNLOAD_info = transport.NewServiceInfo("erda.openapiv1.dicehub.dicehub", "DICEHUB_RELEASES_DOWNLOAD", srv)
		_Dicehub_DICEHUB_RELEASES_DOWNLOAD_Handler = h.Interceptor(_Dicehub_DICEHUB_RELEASES_DOWNLOAD_Handler)
	}

	_Dicehub_DICEHUB_RELEASES_YAML_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DICEHUB_RELEASES_YAML_GET(ctx, req.(*ReleaseGetDiceYmlRequest))
	}
	var _Dicehub_DICEHUB_RELEASES_YAML_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dicehub_DICEHUB_RELEASES_YAML_GET_info = transport.NewServiceInfo("erda.openapiv1.dicehub.dicehub", "DICEHUB_RELEASES_YAML_GET", srv)
		_Dicehub_DICEHUB_RELEASES_YAML_GET_Handler = h.Interceptor(_Dicehub_DICEHUB_RELEASES_YAML_GET_Handler)
	}

	_Dicehub_IMAGEHUB_IMAGE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.IMAGEHUB_IMAGE_LIST(ctx, req.(*ReleaseListRequest))
	}
	var _Dicehub_IMAGEHUB_IMAGE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dicehub_IMAGEHUB_IMAGE_LIST_info = transport.NewServiceInfo("erda.openapiv1.dicehub.dicehub", "IMAGEHUB_IMAGE_LIST", srv)
		_Dicehub_IMAGEHUB_IMAGE_LIST_Handler = h.Interceptor(_Dicehub_IMAGEHUB_IMAGE_LIST_Handler)
	}

	_Dicehub_RELEASE_RULE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.RELEASE_RULE_CREATE(ctx, req.(*CreateUpdateDeleteReleaseRuleRequest))
	}
	var _Dicehub_RELEASE_RULE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dicehub_RELEASE_RULE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.dicehub.dicehub", "RELEASE_RULE_CREATE", srv)
		_Dicehub_RELEASE_RULE_CREATE_Handler = h.Interceptor(_Dicehub_RELEASE_RULE_CREATE_Handler)
	}

	_Dicehub_RELEASE_RULE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.RELEASE_RULE_LIST(ctx, req.(*RELEASE_RULE_LIST_Request))
	}
	var _Dicehub_RELEASE_RULE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dicehub_RELEASE_RULE_LIST_info = transport.NewServiceInfo("erda.openapiv1.dicehub.dicehub", "RELEASE_RULE_LIST", srv)
		_Dicehub_RELEASE_RULE_LIST_Handler = h.Interceptor(_Dicehub_RELEASE_RULE_LIST_Handler)
	}

	_Dicehub_RELEASE_RULE_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.RELEASE_RULE_UPDATE(ctx, req.(*RELEASE_RULE_UPDATE_Request))
	}
	var _Dicehub_RELEASE_RULE_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dicehub_RELEASE_RULE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.dicehub.dicehub", "RELEASE_RULE_UPDATE", srv)
		_Dicehub_RELEASE_RULE_UPDATE_Handler = h.Interceptor(_Dicehub_RELEASE_RULE_UPDATE_Handler)
	}

	_Dicehub_RELEASE_RULEDelete_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.RELEASE_RULEDelete(ctx, req.(*RELEASE_RULEDelete_Request))
	}
	var _Dicehub_RELEASE_RULEDelete_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Dicehub_RELEASE_RULEDelete_info = transport.NewServiceInfo("erda.openapiv1.dicehub.dicehub", "RELEASE_RULEDelete", srv)
		_Dicehub_RELEASE_RULEDelete_Handler = h.Interceptor(_Dicehub_RELEASE_RULEDelete_Handler)
	}

	var serviceDesc = _Dicehub_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "DICEHUB_RELEASES_DOWNLOAD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DICEHUB_RELEASES_DOWNLOAD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DicehubServer).DICEHUB_RELEASES_DOWNLOAD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dicehub_DICEHUB_RELEASES_DOWNLOAD_info)
				}
				if interceptor == nil {
					return _Dicehub_DICEHUB_RELEASES_DOWNLOAD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dicehub.dicehub/DICEHUB_RELEASES_DOWNLOAD",
				}
				return interceptor(ctx, in, info, _Dicehub_DICEHUB_RELEASES_DOWNLOAD_Handler)
			},
		},
		{
			MethodName: "DICEHUB_RELEASES_YAML_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ReleaseGetDiceYmlRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DicehubServer).DICEHUB_RELEASES_YAML_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dicehub_DICEHUB_RELEASES_YAML_GET_info)
				}
				if interceptor == nil {
					return _Dicehub_DICEHUB_RELEASES_YAML_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dicehub.dicehub/DICEHUB_RELEASES_YAML_GET",
				}
				return interceptor(ctx, in, info, _Dicehub_DICEHUB_RELEASES_YAML_GET_Handler)
			},
		},
		{
			MethodName: "IMAGEHUB_IMAGE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ReleaseListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DicehubServer).IMAGEHUB_IMAGE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dicehub_IMAGEHUB_IMAGE_LIST_info)
				}
				if interceptor == nil {
					return _Dicehub_IMAGEHUB_IMAGE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dicehub.dicehub/IMAGEHUB_IMAGE_LIST",
				}
				return interceptor(ctx, in, info, _Dicehub_IMAGEHUB_IMAGE_LIST_Handler)
			},
		},
		{
			MethodName: "RELEASE_RULE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateUpdateDeleteReleaseRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DicehubServer).RELEASE_RULE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dicehub_RELEASE_RULE_CREATE_info)
				}
				if interceptor == nil {
					return _Dicehub_RELEASE_RULE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dicehub.dicehub/RELEASE_RULE_CREATE",
				}
				return interceptor(ctx, in, info, _Dicehub_RELEASE_RULE_CREATE_Handler)
			},
		},
		{
			MethodName: "RELEASE_RULE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RELEASE_RULE_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DicehubServer).RELEASE_RULE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dicehub_RELEASE_RULE_LIST_info)
				}
				if interceptor == nil {
					return _Dicehub_RELEASE_RULE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dicehub.dicehub/RELEASE_RULE_LIST",
				}
				return interceptor(ctx, in, info, _Dicehub_RELEASE_RULE_LIST_Handler)
			},
		},
		{
			MethodName: "RELEASE_RULE_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RELEASE_RULE_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DicehubServer).RELEASE_RULE_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dicehub_RELEASE_RULE_UPDATE_info)
				}
				if interceptor == nil {
					return _Dicehub_RELEASE_RULE_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dicehub.dicehub/RELEASE_RULE_UPDATE",
				}
				return interceptor(ctx, in, info, _Dicehub_RELEASE_RULE_UPDATE_Handler)
			},
		},
		{
			MethodName: "RELEASE_RULE_delete",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RELEASE_RULEDelete_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DicehubServer).RELEASE_RULEDelete(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Dicehub_RELEASE_RULEDelete_info)
				}
				if interceptor == nil {
					return _Dicehub_RELEASE_RULEDelete_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.dicehub.dicehub/RELEASE_RULEDelete",
				}
				return interceptor(ctx, in, info, _Dicehub_RELEASE_RULEDelete_Handler)
			},
		},
	}
	return &serviceDesc
}
