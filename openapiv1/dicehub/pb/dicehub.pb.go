// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: dicehub.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateBranchRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *CreateBranchRuleResponse) Reset() {
	*x = CreateBranchRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBranchRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchRuleResponse) ProtoMessage() {}

func (x *CreateBranchRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchRuleResponse.ProtoReflect.Descriptor instead.
func (*CreateBranchRuleResponse) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{0}
}

func (x *CreateBranchRuleResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateUpdateDeleteReleaseRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgID     uint64          `protobuf:"varint,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	ProjectID uint64          `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	UserID    uint64          `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	RuleID    string          `protobuf:"bytes,4,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
	Body      *structpb.Value `protobuf:"bytes,5,opt,name=body,proto3,oneof" json:"body,omitempty"`
}

func (x *CreateUpdateDeleteReleaseRuleRequest) Reset() {
	*x = CreateUpdateDeleteReleaseRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUpdateDeleteReleaseRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUpdateDeleteReleaseRuleRequest) ProtoMessage() {}

func (x *CreateUpdateDeleteReleaseRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUpdateDeleteReleaseRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateUpdateDeleteReleaseRuleRequest) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUpdateDeleteReleaseRuleRequest) GetOrgID() uint64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *CreateUpdateDeleteReleaseRuleRequest) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *CreateUpdateDeleteReleaseRuleRequest) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CreateUpdateDeleteReleaseRuleRequest) GetRuleID() string {
	if x != nil {
		return x.RuleID
	}
	return ""
}

func (x *CreateUpdateDeleteReleaseRuleRequest) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

type DICEHUB_RELEASES_DOWNLOAD_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId string `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"` // generated from path variable: releaseId. You should change the proto type if necessary.
}

func (x *DICEHUB_RELEASES_DOWNLOAD_Request) Reset() {
	*x = DICEHUB_RELEASES_DOWNLOAD_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DICEHUB_RELEASES_DOWNLOAD_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DICEHUB_RELEASES_DOWNLOAD_Request) ProtoMessage() {}

func (x *DICEHUB_RELEASES_DOWNLOAD_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DICEHUB_RELEASES_DOWNLOAD_Request.ProtoReflect.Descriptor instead.
func (*DICEHUB_RELEASES_DOWNLOAD_Request) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{2}
}

func (x *DICEHUB_RELEASES_DOWNLOAD_Request) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

type H5VersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionInfo   *structpb.Value            `protobuf:"bytes,1,opt,name=versionInfo,proto3" json:"versionInfo,omitempty"`
	TargetMobiles map[string]*structpb.Value `protobuf:"bytes,2,rep,name=targetMobiles,proto3" json:"targetMobiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *H5VersionInfo) Reset() {
	*x = H5VersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H5VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H5VersionInfo) ProtoMessage() {}

func (x *H5VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H5VersionInfo.ProtoReflect.Descriptor instead.
func (*H5VersionInfo) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{3}
}

func (x *H5VersionInfo) GetVersionInfo() *structpb.Value {
	if x != nil {
		return x.VersionInfo
	}
	return nil
}

func (x *H5VersionInfo) GetTargetMobiles() map[string]*structpb.Value {
	if x != nil {
		return x.TargetMobiles
	}
	return nil
}

type RELEASE_RULE_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RELEASE_RULE_LIST_Request) Reset() {
	*x = RELEASE_RULE_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RELEASE_RULE_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RELEASE_RULE_LIST_Request) ProtoMessage() {}

func (x *RELEASE_RULE_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RELEASE_RULE_LIST_Request.ProtoReflect.Descriptor instead.
func (*RELEASE_RULE_LIST_Request) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{4}
}

type RELEASE_RULE_UPDATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *RELEASE_RULE_UPDATE_Request) Reset() {
	*x = RELEASE_RULE_UPDATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RELEASE_RULE_UPDATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RELEASE_RULE_UPDATE_Request) ProtoMessage() {}

func (x *RELEASE_RULE_UPDATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RELEASE_RULE_UPDATE_Request.ProtoReflect.Descriptor instead.
func (*RELEASE_RULE_UPDATE_Request) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{5}
}

func (x *RELEASE_RULE_UPDATE_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RELEASE_RULEDelete_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // generated from path variable: id. You should change the proto type if necessary.
}

func (x *RELEASE_RULEDelete_Request) Reset() {
	*x = RELEASE_RULEDelete_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RELEASE_RULEDelete_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RELEASE_RULEDelete_Request) ProtoMessage() {}

func (x *RELEASE_RULEDelete_Request) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RELEASE_RULEDelete_Request.ProtoReflect.Descriptor instead.
func (*RELEASE_RULEDelete_Request) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{6}
}

func (x *RELEASE_RULEDelete_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReleaseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseID              string                 `protobuf:"bytes,1,opt,name=releaseID,json=releaseId,proto3" json:"releaseID,omitempty"`
	ReleaseName            string                 `protobuf:"bytes,2,opt,name=releaseName,proto3" json:"releaseName,omitempty"`
	Diceyml                string                 `protobuf:"bytes,3,opt,name=diceyml,proto3" json:"diceyml,omitempty"`
	Desc                   string                 `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Addon                  string                 `protobuf:"bytes,5,opt,name=addon,proto3" json:"addon,omitempty"`
	Changelog              string                 `protobuf:"bytes,6,opt,name=changelog,proto3" json:"changelog,omitempty"`
	IsStable               bool                   `protobuf:"varint,7,opt,name=isStable,proto3" json:"isStable,omitempty"`
	IsFormal               bool                   `protobuf:"varint,8,opt,name=isFormal,proto3" json:"isFormal,omitempty"`
	IsProjectRelease       bool                   `protobuf:"varint,9,opt,name=isProjectRelease,proto3" json:"isProjectRelease,omitempty"`
	ApplicationReleaseList string                 `protobuf:"bytes,10,opt,name=applicationReleaseList,proto3" json:"applicationReleaseList,omitempty"`
	Resources              []*structpb.Value      `protobuf:"bytes,11,rep,name=resources,proto3" json:"resources,omitempty"`
	Images                 []string               `protobuf:"bytes,12,rep,name=images,proto3" json:"images,omitempty"`
	ServiceImages          []*structpb.Value      `protobuf:"bytes,13,rep,name=serviceImages,proto3" json:"serviceImages,omitempty"`
	Labels                 map[string]string      `protobuf:"bytes,14,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tags                   []*structpb.Value      `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	Version                string                 `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`
	CrossCluster           bool                   `protobuf:"varint,17,opt,name=crossCluster,proto3" json:"crossCluster,omitempty"`
	Reference              int64                  `protobuf:"varint,18,opt,name=reference,proto3" json:"reference,omitempty"`
	OrgID                  int64                  `protobuf:"varint,19,opt,name=orgID,json=orgId,proto3" json:"orgID,omitempty"`
	ProjectID              int64                  `protobuf:"varint,20,opt,name=projectID,json=projectId,proto3" json:"projectID,omitempty"`
	ApplicationID          int64                  `protobuf:"varint,21,opt,name=applicationID,json=applicationId,proto3" json:"applicationID,omitempty"`
	ProjectName            string                 `protobuf:"bytes,22,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ApplicationName        string                 `protobuf:"bytes,23,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	UserID                 string                 `protobuf:"bytes,24,opt,name=userID,json=userId,proto3" json:"userID,omitempty"`
	ClusterName            string                 `protobuf:"bytes,25,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt              *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	IsLatest               bool                   `protobuf:"varint,28,opt,name=isLatest,proto3" json:"isLatest,omitempty"`
}

func (x *ReleaseData) Reset() {
	*x = ReleaseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseData) ProtoMessage() {}

func (x *ReleaseData) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseData.ProtoReflect.Descriptor instead.
func (*ReleaseData) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{7}
}

func (x *ReleaseData) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

func (x *ReleaseData) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *ReleaseData) GetDiceyml() string {
	if x != nil {
		return x.Diceyml
	}
	return ""
}

func (x *ReleaseData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ReleaseData) GetAddon() string {
	if x != nil {
		return x.Addon
	}
	return ""
}

func (x *ReleaseData) GetChangelog() string {
	if x != nil {
		return x.Changelog
	}
	return ""
}

func (x *ReleaseData) GetIsStable() bool {
	if x != nil {
		return x.IsStable
	}
	return false
}

func (x *ReleaseData) GetIsFormal() bool {
	if x != nil {
		return x.IsFormal
	}
	return false
}

func (x *ReleaseData) GetIsProjectRelease() bool {
	if x != nil {
		return x.IsProjectRelease
	}
	return false
}

func (x *ReleaseData) GetApplicationReleaseList() string {
	if x != nil {
		return x.ApplicationReleaseList
	}
	return ""
}

func (x *ReleaseData) GetResources() []*structpb.Value {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ReleaseData) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ReleaseData) GetServiceImages() []*structpb.Value {
	if x != nil {
		return x.ServiceImages
	}
	return nil
}

func (x *ReleaseData) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ReleaseData) GetTags() []*structpb.Value {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ReleaseData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReleaseData) GetCrossCluster() bool {
	if x != nil {
		return x.CrossCluster
	}
	return false
}

func (x *ReleaseData) GetReference() int64 {
	if x != nil {
		return x.Reference
	}
	return 0
}

func (x *ReleaseData) GetOrgID() int64 {
	if x != nil {
		return x.OrgID
	}
	return 0
}

func (x *ReleaseData) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ReleaseData) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *ReleaseData) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ReleaseData) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ReleaseData) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ReleaseData) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ReleaseData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ReleaseData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ReleaseData) GetIsLatest() bool {
	if x != nil {
		return x.IsLatest
	}
	return false
}

type ReleaseGetDiceYmlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseID string `protobuf:"bytes,1,opt,name=releaseID,json=-,proto3" json:"releaseID,omitempty"`
}

func (x *ReleaseGetDiceYmlRequest) Reset() {
	*x = ReleaseGetDiceYmlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseGetDiceYmlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseGetDiceYmlRequest) ProtoMessage() {}

func (x *ReleaseGetDiceYmlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseGetDiceYmlRequest.ProtoReflect.Descriptor instead.
func (*ReleaseGetDiceYmlRequest) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{8}
}

func (x *ReleaseGetDiceYmlRequest) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

type ReleaseListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query                        string   `protobuf:"bytes,1,opt,name=query,json=-,proto3" json:"query,omitempty"`
	ReleaseID                    string   `protobuf:"bytes,2,opt,name=releaseID,json=-,proto3" json:"releaseID,omitempty"`
	ReleaseName                  string   `protobuf:"bytes,3,opt,name=releaseName,json=-,proto3" json:"releaseName,omitempty"`
	Cluster                      string   `protobuf:"bytes,4,opt,name=cluster,json=-,proto3" json:"cluster,omitempty"`
	Branch                       string   `protobuf:"bytes,5,opt,name=branch,json=-,proto3" json:"branch,omitempty"`
	Latest                       bool     `protobuf:"varint,6,opt,name=latest,json=-,proto3" json:"latest,omitempty"`
	IsStable                     *bool    `protobuf:"varint,7,opt,name=isStable,json=-,proto3,oneof" json:"isStable,omitempty"`
	IsFormal                     *bool    `protobuf:"varint,8,opt,name=isFormal,json=-,proto3,oneof" json:"isFormal,omitempty"`
	IsProjectRelease             *bool    `protobuf:"varint,9,opt,name=isProjectRelease,json=-,proto3,oneof" json:"isProjectRelease,omitempty"`
	UserID                       []string `protobuf:"bytes,10,rep,name=userID,json=-,proto3" json:"userID,omitempty"`
	Version                      string   `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	CommitID                     string   `protobuf:"bytes,12,opt,name=commitID,json=-,proto3" json:"commitID,omitempty"`
	Tags                         string   `protobuf:"bytes,13,opt,name=tags,json=-,proto3" json:"tags,omitempty"`
	IsVersion                    bool     `protobuf:"varint,14,opt,name=isVersion,json=-,proto3" json:"isVersion,omitempty"`
	CrossCluster                 *bool    `protobuf:"varint,15,opt,name=crossCluster,json=-,proto3,oneof" json:"crossCluster,omitempty"`
	CrossClusterOrSpecifyCluster *string  `protobuf:"bytes,16,opt,name=crossClusterOrSpecifyCluster,json=-,proto3,oneof" json:"crossClusterOrSpecifyCluster,omitempty"`
	ApplicationID                []string `protobuf:"bytes,17,rep,name=applicationID,json=-,proto3" json:"applicationID,omitempty"`
	ProjectID                    int64    `protobuf:"varint,18,opt,name=projectID,json=-,proto3" json:"projectID,omitempty"`
	StartTime                    int64    `protobuf:"varint,19,opt,name=startTime,json=-,proto3" json:"startTime,omitempty"`
	EndTime                      int64    `protobuf:"varint,20,opt,name=endTime,json=-,proto3" json:"endTime,omitempty"`
	PageSize                     int64    `protobuf:"varint,21,opt,name=pageSize,json=-,proto3" json:"pageSize,omitempty"`
	PageNum                      int64    `protobuf:"varint,22,opt,name=pageNum,json=-,proto3" json:"pageNum,omitempty"`
	OrderBy                      string   `protobuf:"bytes,23,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	Order                        string   `protobuf:"bytes,24,opt,name=order,json=descOrder,proto3" json:"order,omitempty"`
}

func (x *ReleaseListRequest) Reset() {
	*x = ReleaseListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseListRequest) ProtoMessage() {}

func (x *ReleaseListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseListRequest.ProtoReflect.Descriptor instead.
func (*ReleaseListRequest) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{9}
}

func (x *ReleaseListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ReleaseListRequest) GetReleaseID() string {
	if x != nil {
		return x.ReleaseID
	}
	return ""
}

func (x *ReleaseListRequest) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *ReleaseListRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ReleaseListRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ReleaseListRequest) GetLatest() bool {
	if x != nil {
		return x.Latest
	}
	return false
}

func (x *ReleaseListRequest) GetIsStable() bool {
	if x != nil && x.IsStable != nil {
		return *x.IsStable
	}
	return false
}

func (x *ReleaseListRequest) GetIsFormal() bool {
	if x != nil && x.IsFormal != nil {
		return *x.IsFormal
	}
	return false
}

func (x *ReleaseListRequest) GetIsProjectRelease() bool {
	if x != nil && x.IsProjectRelease != nil {
		return *x.IsProjectRelease
	}
	return false
}

func (x *ReleaseListRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *ReleaseListRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReleaseListRequest) GetCommitID() string {
	if x != nil {
		return x.CommitID
	}
	return ""
}

func (x *ReleaseListRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *ReleaseListRequest) GetIsVersion() bool {
	if x != nil {
		return x.IsVersion
	}
	return false
}

func (x *ReleaseListRequest) GetCrossCluster() bool {
	if x != nil && x.CrossCluster != nil {
		return *x.CrossCluster
	}
	return false
}

func (x *ReleaseListRequest) GetCrossClusterOrSpecifyCluster() string {
	if x != nil && x.CrossClusterOrSpecifyCluster != nil {
		return *x.CrossClusterOrSpecifyCluster
	}
	return ""
}

func (x *ReleaseListRequest) GetApplicationID() []string {
	if x != nil {
		return x.ApplicationID
	}
	return nil
}

func (x *ReleaseListRequest) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ReleaseListRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ReleaseListRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ReleaseListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ReleaseListRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ReleaseListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ReleaseListRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type ReleaseListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *structpb.Value `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReleaseListResponse) Reset() {
	*x = ReleaseListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseListResponse) ProtoMessage() {}

func (x *ReleaseListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseListResponse.ProtoReflect.Descriptor instead.
func (*ReleaseListResponse) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{10}
}

func (x *ReleaseListResponse) GetData() *structpb.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReleaseListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Releases []*structpb.Value `protobuf:"bytes,2,rep,name=releases,json=list,proto3" json:"releases,omitempty"`
}

func (x *ReleaseListResponseData) Reset() {
	*x = ReleaseListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseListResponseData) ProtoMessage() {}

func (x *ReleaseListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseListResponseData.ProtoReflect.Descriptor instead.
func (*ReleaseListResponseData) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{11}
}

func (x *ReleaseListResponseData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ReleaseListResponseData) GetReleases() []*structpb.Value {
	if x != nil {
		return x.Releases
	}
	return nil
}

type ReleaseResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string                     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	URL  string                     `protobuf:"bytes,3,opt,name=uRL,json=url,proto3" json:"uRL,omitempty"`
	Meta map[string]*structpb.Value `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReleaseResource) Reset() {
	*x = ReleaseResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseResource) ProtoMessage() {}

func (x *ReleaseResource) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseResource.ProtoReflect.Descriptor instead.
func (*ReleaseResource) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{12}
}

func (x *ReleaseResource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReleaseResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReleaseResource) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *ReleaseResource) GetMeta() map[string]*structpb.Value {
	if x != nil {
		return x.Meta
	}
	return nil
}

type ReleaseTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Creator   string                 `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Id        int64                  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Color     string                 `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	Name      string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Type      string                 `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	ProjectID int64                  `protobuf:"varint,8,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *ReleaseTag) Reset() {
	*x = ReleaseTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseTag) ProtoMessage() {}

func (x *ReleaseTag) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseTag.ProtoReflect.Descriptor instead.
func (*ReleaseTag) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{13}
}

func (x *ReleaseTag) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ReleaseTag) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ReleaseTag) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ReleaseTag) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReleaseTag) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *ReleaseTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReleaseTag) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReleaseTag) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

type VersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName string `protobuf:"bytes,1,opt,name=packageName,proto3" json:"packageName,omitempty"`
	Version     string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	BuildID     string `protobuf:"bytes,3,opt,name=buildID,json=buildId,proto3" json:"buildID,omitempty"`
}

func (x *VersionInfo) Reset() {
	*x = VersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dicehub_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInfo) ProtoMessage() {}

func (x *VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dicehub_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInfo.ProtoReflect.Descriptor instead.
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return file_dicehub_proto_rawDescGZIP(), []int{14}
}

func (x *VersionInfo) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *VersionInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionInfo) GetBuildID() string {
	if x != nil {
		return x.BuildID
	}
	return ""
}

var File_dicehub_proto protoreflect.FileDescriptor

var file_dicehub_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc4, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x41,
	0x0a, 0x21, 0x44, 0x49, 0x43, 0x45, 0x48, 0x55, 0x42, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53,
	0x45, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x22, 0x83, 0x02, 0x0a, 0x0d, 0x48, 0x35, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x48, 0x35,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x58, 0x0a,
	0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x45, 0x4c, 0x45, 0x41,
	0x53, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x2d, 0x0a, 0x1b, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xd3, 0x08, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x63, 0x65, 0x79, 0x6d, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x63, 0x65, 0x79, 0x6d, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x6c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x69,
	0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x30, 0x0a, 0x18, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x65, 0x59, 0x6d, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x2d, 0x22, 0xb1, 0x05, 0x0a, 0x12, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x2d, 0x12, 0x14, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x2d, 0x12, 0x16, 0x0a, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x2d, 0x12, 0x12, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x2d, 0x12, 0x11, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x2d, 0x12, 0x11, 0x0a, 0x06, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x2d, 0x12, 0x18, 0x0a, 0x08, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x01, 0x2d, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x01, 0x2d, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x10, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x01, 0x2d, 0x88, 0x01,
	0x01, 0x12, 0x11, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x01, 0x2d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x2d, 0x12, 0x0f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x2d, 0x12, 0x14, 0x0a, 0x09, 0x69, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x2d, 0x12, 0x1c, 0x0a, 0x0c, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x03, 0x52, 0x01, 0x2d, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x1c, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x01, 0x2d, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01, 0x2d,
	0x12, 0x14, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x14, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x12, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d,
	0x12, 0x13, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x12, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x2d, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x73, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x69, 0x73, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69,
	0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x73, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x1f, 0x0a,
	0x1d, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x41,
	0x0a, 0x13, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x5f, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x45, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x4f, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x54, 0x61, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x22, 0x63, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x32, 0xee, 0x0c, 0x0a, 0x07, 0x64, 0x69, 0x63, 0x65, 0x68,
	0x75, 0x62, 0x12, 0xf4, 0x01, 0x0a, 0x19, 0x44, 0x49, 0x43, 0x45, 0x48, 0x55, 0x42, 0x5f, 0x52,
	0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44,
	0x12, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x44, 0x49, 0x43, 0x45, 0x48, 0x55,
	0x42, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x83, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0xfa, 0x81, 0xf9, 0x1b, 0x4c, 0x0a, 0x2a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x18, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x59,
	0x61, 0x6d, 0x6c, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x12, 0x9d, 0x03, 0x0a, 0x19, 0x44, 0x49,
	0x43, 0x45, 0x48, 0x55, 0x42, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x53, 0x5f, 0x59,
	0x41, 0x4d, 0x4c, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x65, 0x59,
	0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0xb5, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65,
	0x74, 0x2d, 0x64, 0x69, 0x63, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0xfd, 0x01, 0x0a, 0x2a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x65, 0x74, 0x2d, 0x64, 0x69, 0x63, 0x65, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0xc8,
	0x01, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x64, 0x69, 0x63, 0x65,
	0x2e, 0x79, 0x6d, 0x6c, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x20, 0x2d, 0x20, 0x69, 0x6e, 0x3a, 0x20, 0x70, 0x61, 0x74,
	0x68, 0x20, 0x20, 0x20, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x73, 0x3a, 0x20,
	0x20, 0x2d, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78,
	0x2d, 0x79, 0x61, 0x6d, 0x6c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x3a, 0x20,
	0x20, 0x27, 0x32, 0x30, 0x30, 0x27, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x44, 0x69, 0x63, 0x65, 0x2e, 0x79, 0x61, 0x6d,
	0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0xb8, 0x01, 0x0a, 0x13, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x48, 0x55, 0x42, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x12, 0x2a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64,
	0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0xfa,
	0x81, 0xf9, 0x1b, 0x30, 0x0a, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe9, 0x95, 0x9c, 0xe5, 0x83, 0x8f, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xd4, 0x01, 0x0a, 0x13, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x3c, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x69,
	0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x63, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2e, 0x0a, 0x12, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5,
	0x88, 0xb6, 0xe5, 0x93, 0x81, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x12, 0xad, 0x01, 0x0a, 0x11,
	0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x12, 0x31, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x52, 0x45, 0x4c, 0x45, 0x41,
	0x53, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x2e, 0x0a, 0x12, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x12, 0xe5, 0x88, 0x97, 0xe4, 0xb8, 0xbe, 0xe5,
	0x88, 0xb6, 0xe5, 0x93, 0x81, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x12, 0xbb, 0x01, 0x0a, 0x13,
	0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x52, 0x45, 0x4c,
	0x45, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x1a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x33, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x12, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe5, 0x88, 0xb6,
	0xe5, 0x93, 0x81, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x12, 0xbb, 0x01, 0x0a, 0x13, 0x52, 0x45,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x52, 0x45, 0x4c, 0x45, 0x41,
	0x53, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x57,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa,
	0x81, 0xf9, 0x1b, 0x33, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x88, 0xb6, 0xe5, 0x93,
	0x81, 0xe8, 0xa7, 0x84, 0xe5, 0x88, 0x99, 0x1a, 0x0e, 0xc2, 0xc4, 0xcb, 0x1c, 0x09, 0x22, 0x07,
	0x64, 0x69, 0x63, 0x65, 0x68, 0x75, 0x62, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x63, 0x65, 0x68,
	0x75, 0x62, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dicehub_proto_rawDescOnce sync.Once
	file_dicehub_proto_rawDescData = file_dicehub_proto_rawDesc
)

func file_dicehub_proto_rawDescGZIP() []byte {
	file_dicehub_proto_rawDescOnce.Do(func() {
		file_dicehub_proto_rawDescData = protoimpl.X.CompressGZIP(file_dicehub_proto_rawDescData)
	})
	return file_dicehub_proto_rawDescData
}

var file_dicehub_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_dicehub_proto_goTypes = []interface{}{
	(*CreateBranchRuleResponse)(nil),             // 0: erda.openapiv1.dicehub.CreateBranchRuleResponse
	(*CreateUpdateDeleteReleaseRuleRequest)(nil), // 1: erda.openapiv1.dicehub.CreateUpdateDeleteReleaseRuleRequest
	(*DICEHUB_RELEASES_DOWNLOAD_Request)(nil),    // 2: erda.openapiv1.dicehub.DICEHUB_RELEASES_DOWNLOAD_Request
	(*H5VersionInfo)(nil),                        // 3: erda.openapiv1.dicehub.H5VersionInfo
	(*RELEASE_RULE_LIST_Request)(nil),            // 4: erda.openapiv1.dicehub.RELEASE_RULE_LIST_Request
	(*RELEASE_RULE_UPDATE_Request)(nil),          // 5: erda.openapiv1.dicehub.RELEASE_RULE_UPDATE_Request
	(*RELEASE_RULEDelete_Request)(nil),           // 6: erda.openapiv1.dicehub.RELEASE_RULE_delete_Request
	(*ReleaseData)(nil),                          // 7: erda.openapiv1.dicehub.ReleaseData
	(*ReleaseGetDiceYmlRequest)(nil),             // 8: erda.openapiv1.dicehub.ReleaseGetDiceYmlRequest
	(*ReleaseListRequest)(nil),                   // 9: erda.openapiv1.dicehub.ReleaseListRequest
	(*ReleaseListResponse)(nil),                  // 10: erda.openapiv1.dicehub.ReleaseListResponse
	(*ReleaseListResponseData)(nil),              // 11: erda.openapiv1.dicehub.ReleaseListResponseData
	(*ReleaseResource)(nil),                      // 12: erda.openapiv1.dicehub.ReleaseResource
	(*ReleaseTag)(nil),                           // 13: erda.openapiv1.dicehub.ReleaseTag
	(*VersionInfo)(nil),                          // 14: erda.openapiv1.dicehub.VersionInfo
	nil,                                          // 15: erda.openapiv1.dicehub.H5VersionInfo.TargetMobilesEntry
	nil,                                          // 16: erda.openapiv1.dicehub.ReleaseData.LabelsEntry
	nil,                                          // 17: erda.openapiv1.dicehub.ReleaseResource.MetaEntry
	(*structpb.Value)(nil),                       // 18: google.protobuf.Value
	(*timestamppb.Timestamp)(nil),                // 19: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                        // 20: google.protobuf.Empty
}
var file_dicehub_proto_depIdxs = []int32{
	18, // 0: erda.openapiv1.dicehub.CreateBranchRuleResponse.data:type_name -> google.protobuf.Value
	18, // 1: erda.openapiv1.dicehub.CreateUpdateDeleteReleaseRuleRequest.body:type_name -> google.protobuf.Value
	18, // 2: erda.openapiv1.dicehub.H5VersionInfo.versionInfo:type_name -> google.protobuf.Value
	15, // 3: erda.openapiv1.dicehub.H5VersionInfo.targetMobiles:type_name -> erda.openapiv1.dicehub.H5VersionInfo.TargetMobilesEntry
	18, // 4: erda.openapiv1.dicehub.ReleaseData.resources:type_name -> google.protobuf.Value
	18, // 5: erda.openapiv1.dicehub.ReleaseData.serviceImages:type_name -> google.protobuf.Value
	16, // 6: erda.openapiv1.dicehub.ReleaseData.labels:type_name -> erda.openapiv1.dicehub.ReleaseData.LabelsEntry
	18, // 7: erda.openapiv1.dicehub.ReleaseData.tags:type_name -> google.protobuf.Value
	19, // 8: erda.openapiv1.dicehub.ReleaseData.createdAt:type_name -> google.protobuf.Timestamp
	19, // 9: erda.openapiv1.dicehub.ReleaseData.updatedAt:type_name -> google.protobuf.Timestamp
	18, // 10: erda.openapiv1.dicehub.ReleaseListResponse.data:type_name -> google.protobuf.Value
	18, // 11: erda.openapiv1.dicehub.ReleaseListResponseData.releases:type_name -> google.protobuf.Value
	17, // 12: erda.openapiv1.dicehub.ReleaseResource.meta:type_name -> erda.openapiv1.dicehub.ReleaseResource.MetaEntry
	19, // 13: erda.openapiv1.dicehub.ReleaseTag.createdAt:type_name -> google.protobuf.Timestamp
	19, // 14: erda.openapiv1.dicehub.ReleaseTag.updatedAt:type_name -> google.protobuf.Timestamp
	18, // 15: erda.openapiv1.dicehub.H5VersionInfo.TargetMobilesEntry.value:type_name -> google.protobuf.Value
	18, // 16: erda.openapiv1.dicehub.ReleaseResource.MetaEntry.value:type_name -> google.protobuf.Value
	2,  // 17: erda.openapiv1.dicehub.dicehub.DICEHUB_RELEASES_DOWNLOAD:input_type -> erda.openapiv1.dicehub.DICEHUB_RELEASES_DOWNLOAD_Request
	8,  // 18: erda.openapiv1.dicehub.dicehub.DICEHUB_RELEASES_YAML_GET:input_type -> erda.openapiv1.dicehub.ReleaseGetDiceYmlRequest
	9,  // 19: erda.openapiv1.dicehub.dicehub.IMAGEHUB_IMAGE_LIST:input_type -> erda.openapiv1.dicehub.ReleaseListRequest
	1,  // 20: erda.openapiv1.dicehub.dicehub.RELEASE_RULE_CREATE:input_type -> erda.openapiv1.dicehub.CreateUpdateDeleteReleaseRuleRequest
	4,  // 21: erda.openapiv1.dicehub.dicehub.RELEASE_RULE_LIST:input_type -> erda.openapiv1.dicehub.RELEASE_RULE_LIST_Request
	5,  // 22: erda.openapiv1.dicehub.dicehub.RELEASE_RULE_UPDATE:input_type -> erda.openapiv1.dicehub.RELEASE_RULE_UPDATE_Request
	6,  // 23: erda.openapiv1.dicehub.dicehub.RELEASE_RULE_delete:input_type -> erda.openapiv1.dicehub.RELEASE_RULE_delete_Request
	20, // 24: erda.openapiv1.dicehub.dicehub.DICEHUB_RELEASES_DOWNLOAD:output_type -> google.protobuf.Empty
	20, // 25: erda.openapiv1.dicehub.dicehub.DICEHUB_RELEASES_YAML_GET:output_type -> google.protobuf.Empty
	10, // 26: erda.openapiv1.dicehub.dicehub.IMAGEHUB_IMAGE_LIST:output_type -> erda.openapiv1.dicehub.ReleaseListResponse
	0,  // 27: erda.openapiv1.dicehub.dicehub.RELEASE_RULE_CREATE:output_type -> erda.openapiv1.dicehub.CreateBranchRuleResponse
	20, // 28: erda.openapiv1.dicehub.dicehub.RELEASE_RULE_LIST:output_type -> google.protobuf.Empty
	20, // 29: erda.openapiv1.dicehub.dicehub.RELEASE_RULE_UPDATE:output_type -> google.protobuf.Empty
	20, // 30: erda.openapiv1.dicehub.dicehub.RELEASE_RULE_delete:output_type -> google.protobuf.Empty
	24, // [24:31] is the sub-list for method output_type
	17, // [17:24] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_dicehub_proto_init() }
func file_dicehub_proto_init() {
	if File_dicehub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dicehub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBranchRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUpdateDeleteReleaseRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DICEHUB_RELEASES_DOWNLOAD_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H5VersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RELEASE_RULE_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RELEASE_RULE_UPDATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RELEASE_RULEDelete_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseGetDiceYmlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dicehub_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dicehub_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dicehub_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_dicehub_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dicehub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dicehub_proto_goTypes,
		DependencyIndexes: file_dicehub_proto_depIdxs,
		MessageInfos:      file_dicehub_proto_msgTypes,
	}.Build()
	File_dicehub_proto = out.File
	file_dicehub_proto_rawDesc = nil
	file_dicehub_proto_goTypes = nil
	file_dicehub_proto_depIdxs = nil
}
