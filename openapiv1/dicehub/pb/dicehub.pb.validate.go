// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dicehub.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateBranchRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBranchRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBranchRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBranchRuleResponseMultiError, or nil if none found.
func (m *CreateBranchRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBranchRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateBranchRuleResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateBranchRuleResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateBranchRuleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateBranchRuleResponseMultiError(errors)
	}

	return nil
}

// CreateBranchRuleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBranchRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBranchRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBranchRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBranchRuleResponseMultiError) AllErrors() []error { return m }

// CreateBranchRuleResponseValidationError is the validation error returned by
// CreateBranchRuleResponse.Validate if the designated constraints aren't met.
type CreateBranchRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBranchRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBranchRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBranchRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBranchRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBranchRuleResponseValidationError) ErrorName() string {
	return "CreateBranchRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBranchRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBranchRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBranchRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBranchRuleResponseValidationError{}

// Validate checks the field values on CreateUpdateDeleteReleaseRuleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateUpdateDeleteReleaseRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUpdateDeleteReleaseRuleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateUpdateDeleteReleaseRuleRequestMultiError, or nil if none found.
func (m *CreateUpdateDeleteReleaseRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUpdateDeleteReleaseRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for UserID

	// no validation rules for RuleID

	if m.Body != nil {

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateUpdateDeleteReleaseRuleRequestValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateUpdateDeleteReleaseRuleRequestValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUpdateDeleteReleaseRuleRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateUpdateDeleteReleaseRuleRequestMultiError(errors)
	}

	return nil
}

// CreateUpdateDeleteReleaseRuleRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateUpdateDeleteReleaseRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUpdateDeleteReleaseRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUpdateDeleteReleaseRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUpdateDeleteReleaseRuleRequestMultiError) AllErrors() []error { return m }

// CreateUpdateDeleteReleaseRuleRequestValidationError is the validation error
// returned by CreateUpdateDeleteReleaseRuleRequest.Validate if the designated
// constraints aren't met.
type CreateUpdateDeleteReleaseRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUpdateDeleteReleaseRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUpdateDeleteReleaseRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUpdateDeleteReleaseRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUpdateDeleteReleaseRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUpdateDeleteReleaseRuleRequestValidationError) ErrorName() string {
	return "CreateUpdateDeleteReleaseRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUpdateDeleteReleaseRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUpdateDeleteReleaseRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUpdateDeleteReleaseRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUpdateDeleteReleaseRuleRequestValidationError{}

// Validate checks the field values on DICEHUB_RELEASES_DOWNLOAD_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DICEHUB_RELEASES_DOWNLOAD_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DICEHUB_RELEASES_DOWNLOAD_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DICEHUB_RELEASES_DOWNLOAD_RequestMultiError, or nil if none found.
func (m *DICEHUB_RELEASES_DOWNLOAD_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DICEHUB_RELEASES_DOWNLOAD_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseId

	if len(errors) > 0 {
		return DICEHUB_RELEASES_DOWNLOAD_RequestMultiError(errors)
	}

	return nil
}

// DICEHUB_RELEASES_DOWNLOAD_RequestMultiError is an error wrapping multiple
// validation errors returned by
// DICEHUB_RELEASES_DOWNLOAD_Request.ValidateAll() if the designated
// constraints aren't met.
type DICEHUB_RELEASES_DOWNLOAD_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DICEHUB_RELEASES_DOWNLOAD_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DICEHUB_RELEASES_DOWNLOAD_RequestMultiError) AllErrors() []error { return m }

// DICEHUB_RELEASES_DOWNLOAD_RequestValidationError is the validation error
// returned by DICEHUB_RELEASES_DOWNLOAD_Request.Validate if the designated
// constraints aren't met.
type DICEHUB_RELEASES_DOWNLOAD_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DICEHUB_RELEASES_DOWNLOAD_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DICEHUB_RELEASES_DOWNLOAD_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DICEHUB_RELEASES_DOWNLOAD_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DICEHUB_RELEASES_DOWNLOAD_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DICEHUB_RELEASES_DOWNLOAD_RequestValidationError) ErrorName() string {
	return "DICEHUB_RELEASES_DOWNLOAD_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DICEHUB_RELEASES_DOWNLOAD_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDICEHUB_RELEASES_DOWNLOAD_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DICEHUB_RELEASES_DOWNLOAD_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DICEHUB_RELEASES_DOWNLOAD_RequestValidationError{}

// Validate checks the field values on H5VersionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *H5VersionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on H5VersionInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in H5VersionInfoMultiError, or
// nil if none found.
func (m *H5VersionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *H5VersionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVersionInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, H5VersionInfoValidationError{
					field:  "VersionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, H5VersionInfoValidationError{
					field:  "VersionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVersionInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return H5VersionInfoValidationError{
				field:  "VersionInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetTargetMobiles()))
		i := 0
		for key := range m.GetTargetMobiles() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTargetMobiles()[key]
			_ = val

			// no validation rules for TargetMobiles[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, H5VersionInfoValidationError{
							field:  fmt.Sprintf("TargetMobiles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, H5VersionInfoValidationError{
							field:  fmt.Sprintf("TargetMobiles[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return H5VersionInfoValidationError{
						field:  fmt.Sprintf("TargetMobiles[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return H5VersionInfoMultiError(errors)
	}

	return nil
}

// H5VersionInfoMultiError is an error wrapping multiple validation errors
// returned by H5VersionInfo.ValidateAll() if the designated constraints
// aren't met.
type H5VersionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m H5VersionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m H5VersionInfoMultiError) AllErrors() []error { return m }

// H5VersionInfoValidationError is the validation error returned by
// H5VersionInfo.Validate if the designated constraints aren't met.
type H5VersionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e H5VersionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e H5VersionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e H5VersionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e H5VersionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e H5VersionInfoValidationError) ErrorName() string { return "H5VersionInfoValidationError" }

// Error satisfies the builtin error interface
func (e H5VersionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sH5VersionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = H5VersionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = H5VersionInfoValidationError{}

// Validate checks the field values on RELEASE_RULE_LIST_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RELEASE_RULE_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RELEASE_RULE_LIST_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RELEASE_RULE_LIST_RequestMultiError, or nil if none found.
func (m *RELEASE_RULE_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *RELEASE_RULE_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RELEASE_RULE_LIST_RequestMultiError(errors)
	}

	return nil
}

// RELEASE_RULE_LIST_RequestMultiError is an error wrapping multiple validation
// errors returned by RELEASE_RULE_LIST_Request.ValidateAll() if the
// designated constraints aren't met.
type RELEASE_RULE_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RELEASE_RULE_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RELEASE_RULE_LIST_RequestMultiError) AllErrors() []error { return m }

// RELEASE_RULE_LIST_RequestValidationError is the validation error returned by
// RELEASE_RULE_LIST_Request.Validate if the designated constraints aren't met.
type RELEASE_RULE_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RELEASE_RULE_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RELEASE_RULE_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RELEASE_RULE_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RELEASE_RULE_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RELEASE_RULE_LIST_RequestValidationError) ErrorName() string {
	return "RELEASE_RULE_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RELEASE_RULE_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRELEASE_RULE_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RELEASE_RULE_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RELEASE_RULE_LIST_RequestValidationError{}

// Validate checks the field values on RELEASE_RULE_UPDATE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RELEASE_RULE_UPDATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RELEASE_RULE_UPDATE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RELEASE_RULE_UPDATE_RequestMultiError, or nil if none found.
func (m *RELEASE_RULE_UPDATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *RELEASE_RULE_UPDATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RELEASE_RULE_UPDATE_RequestMultiError(errors)
	}

	return nil
}

// RELEASE_RULE_UPDATE_RequestMultiError is an error wrapping multiple
// validation errors returned by RELEASE_RULE_UPDATE_Request.ValidateAll() if
// the designated constraints aren't met.
type RELEASE_RULE_UPDATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RELEASE_RULE_UPDATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RELEASE_RULE_UPDATE_RequestMultiError) AllErrors() []error { return m }

// RELEASE_RULE_UPDATE_RequestValidationError is the validation error returned
// by RELEASE_RULE_UPDATE_Request.Validate if the designated constraints
// aren't met.
type RELEASE_RULE_UPDATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RELEASE_RULE_UPDATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RELEASE_RULE_UPDATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RELEASE_RULE_UPDATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RELEASE_RULE_UPDATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RELEASE_RULE_UPDATE_RequestValidationError) ErrorName() string {
	return "RELEASE_RULE_UPDATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RELEASE_RULE_UPDATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRELEASE_RULE_UPDATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RELEASE_RULE_UPDATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RELEASE_RULE_UPDATE_RequestValidationError{}

// Validate checks the field values on RELEASE_RULEDelete_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RELEASE_RULEDelete_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RELEASE_RULEDelete_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RELEASE_RULEDelete_RequestMultiError, or nil if none found.
func (m *RELEASE_RULEDelete_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *RELEASE_RULEDelete_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RELEASE_RULEDelete_RequestMultiError(errors)
	}

	return nil
}

// RELEASE_RULEDelete_RequestMultiError is an error wrapping multiple
// validation errors returned by RELEASE_RULEDelete_Request.ValidateAll() if
// the designated constraints aren't met.
type RELEASE_RULEDelete_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RELEASE_RULEDelete_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RELEASE_RULEDelete_RequestMultiError) AllErrors() []error { return m }

// RELEASE_RULEDelete_RequestValidationError is the validation error returned
// by RELEASE_RULEDelete_Request.Validate if the designated constraints aren't met.
type RELEASE_RULEDelete_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RELEASE_RULEDelete_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RELEASE_RULEDelete_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RELEASE_RULEDelete_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RELEASE_RULEDelete_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RELEASE_RULEDelete_RequestValidationError) ErrorName() string {
	return "RELEASE_RULEDelete_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RELEASE_RULEDelete_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRELEASE_RULEDelete_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RELEASE_RULEDelete_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RELEASE_RULEDelete_RequestValidationError{}

// Validate checks the field values on ReleaseData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReleaseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReleaseDataMultiError, or
// nil if none found.
func (m *ReleaseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	// no validation rules for ReleaseName

	// no validation rules for Diceyml

	// no validation rules for Desc

	// no validation rules for Addon

	// no validation rules for Changelog

	// no validation rules for IsStable

	// no validation rules for IsFormal

	// no validation rules for IsProjectRelease

	// no validation rules for ApplicationReleaseList

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseDataValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseDataValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseDataValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetServiceImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseDataValidationError{
						field:  fmt.Sprintf("ServiceImages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseDataValidationError{
						field:  fmt.Sprintf("ServiceImages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseDataValidationError{
					field:  fmt.Sprintf("ServiceImages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Labels

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseDataValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseDataValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseDataValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Version

	// no validation rules for CrossCluster

	// no validation rules for Reference

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ApplicationID

	// no validation rules for ProjectName

	// no validation rules for ApplicationName

	// no validation rules for UserID

	// no validation rules for ClusterName

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseDataValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseDataValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsLatest

	if len(errors) > 0 {
		return ReleaseDataMultiError(errors)
	}

	return nil
}

// ReleaseDataMultiError is an error wrapping multiple validation errors
// returned by ReleaseData.ValidateAll() if the designated constraints aren't met.
type ReleaseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseDataMultiError) AllErrors() []error { return m }

// ReleaseDataValidationError is the validation error returned by
// ReleaseData.Validate if the designated constraints aren't met.
type ReleaseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseDataValidationError) ErrorName() string { return "ReleaseDataValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseDataValidationError{}

// Validate checks the field values on ReleaseGetDiceYmlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseGetDiceYmlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseGetDiceYmlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseGetDiceYmlRequestMultiError, or nil if none found.
func (m *ReleaseGetDiceYmlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseGetDiceYmlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	if len(errors) > 0 {
		return ReleaseGetDiceYmlRequestMultiError(errors)
	}

	return nil
}

// ReleaseGetDiceYmlRequestMultiError is an error wrapping multiple validation
// errors returned by ReleaseGetDiceYmlRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleaseGetDiceYmlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseGetDiceYmlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseGetDiceYmlRequestMultiError) AllErrors() []error { return m }

// ReleaseGetDiceYmlRequestValidationError is the validation error returned by
// ReleaseGetDiceYmlRequest.Validate if the designated constraints aren't met.
type ReleaseGetDiceYmlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseGetDiceYmlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseGetDiceYmlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseGetDiceYmlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseGetDiceYmlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseGetDiceYmlRequestValidationError) ErrorName() string {
	return "ReleaseGetDiceYmlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseGetDiceYmlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseGetDiceYmlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseGetDiceYmlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseGetDiceYmlRequestValidationError{}

// Validate checks the field values on ReleaseListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseListRequestMultiError, or nil if none found.
func (m *ReleaseListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	// no validation rules for ReleaseID

	// no validation rules for ReleaseName

	// no validation rules for Cluster

	// no validation rules for Branch

	// no validation rules for Latest

	// no validation rules for Version

	// no validation rules for CommitID

	// no validation rules for Tags

	// no validation rules for IsVersion

	// no validation rules for ProjectID

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for PageSize

	// no validation rules for PageNum

	// no validation rules for OrderBy

	// no validation rules for Order

	if m.IsStable != nil {
		// no validation rules for IsStable
	}

	if m.IsFormal != nil {
		// no validation rules for IsFormal
	}

	if m.IsProjectRelease != nil {
		// no validation rules for IsProjectRelease
	}

	if m.CrossCluster != nil {
		// no validation rules for CrossCluster
	}

	if m.CrossClusterOrSpecifyCluster != nil {
		// no validation rules for CrossClusterOrSpecifyCluster
	}

	if len(errors) > 0 {
		return ReleaseListRequestMultiError(errors)
	}

	return nil
}

// ReleaseListRequestMultiError is an error wrapping multiple validation errors
// returned by ReleaseListRequest.ValidateAll() if the designated constraints
// aren't met.
type ReleaseListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseListRequestMultiError) AllErrors() []error { return m }

// ReleaseListRequestValidationError is the validation error returned by
// ReleaseListRequest.Validate if the designated constraints aren't met.
type ReleaseListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseListRequestValidationError) ErrorName() string {
	return "ReleaseListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseListRequestValidationError{}

// Validate checks the field values on ReleaseListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseListResponseMultiError, or nil if none found.
func (m *ReleaseListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReleaseListResponseMultiError(errors)
	}

	return nil
}

// ReleaseListResponseMultiError is an error wrapping multiple validation
// errors returned by ReleaseListResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleaseListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseListResponseMultiError) AllErrors() []error { return m }

// ReleaseListResponseValidationError is the validation error returned by
// ReleaseListResponse.Validate if the designated constraints aren't met.
type ReleaseListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseListResponseValidationError) ErrorName() string {
	return "ReleaseListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseListResponseValidationError{}

// Validate checks the field values on ReleaseListResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseListResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseListResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseListResponseDataMultiError, or nil if none found.
func (m *ReleaseListResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseListResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetReleases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReleaseListResponseDataValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReleaseListResponseDataValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReleaseListResponseDataValidationError{
					field:  fmt.Sprintf("Releases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReleaseListResponseDataMultiError(errors)
	}

	return nil
}

// ReleaseListResponseDataMultiError is an error wrapping multiple validation
// errors returned by ReleaseListResponseData.ValidateAll() if the designated
// constraints aren't met.
type ReleaseListResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseListResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseListResponseDataMultiError) AllErrors() []error { return m }

// ReleaseListResponseDataValidationError is the validation error returned by
// ReleaseListResponseData.Validate if the designated constraints aren't met.
type ReleaseListResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseListResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseListResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseListResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseListResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseListResponseDataValidationError) ErrorName() string {
	return "ReleaseListResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseListResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseListResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseListResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseListResponseDataValidationError{}

// Validate checks the field values on ReleaseResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReleaseResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseResourceMultiError, or nil if none found.
func (m *ReleaseResource) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for URL

	{
		sorted_keys := make([]string, len(m.GetMeta()))
		i := 0
		for key := range m.GetMeta() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMeta()[key]
			_ = val

			// no validation rules for Meta[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ReleaseResourceValidationError{
							field:  fmt.Sprintf("Meta[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ReleaseResourceValidationError{
							field:  fmt.Sprintf("Meta[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ReleaseResourceValidationError{
						field:  fmt.Sprintf("Meta[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ReleaseResourceMultiError(errors)
	}

	return nil
}

// ReleaseResourceMultiError is an error wrapping multiple validation errors
// returned by ReleaseResource.ValidateAll() if the designated constraints
// aren't met.
type ReleaseResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseResourceMultiError) AllErrors() []error { return m }

// ReleaseResourceValidationError is the validation error returned by
// ReleaseResource.Validate if the designated constraints aren't met.
type ReleaseResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseResourceValidationError) ErrorName() string { return "ReleaseResourceValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseResourceValidationError{}

// Validate checks the field values on ReleaseTag with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReleaseTag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseTag with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReleaseTagMultiError, or
// nil if none found.
func (m *ReleaseTag) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseTag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseTagValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseTagValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseTagValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReleaseTagValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReleaseTagValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseTagValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Creator

	// no validation rules for Id

	// no validation rules for Color

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return ReleaseTagMultiError(errors)
	}

	return nil
}

// ReleaseTagMultiError is an error wrapping multiple validation errors
// returned by ReleaseTag.ValidateAll() if the designated constraints aren't met.
type ReleaseTagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseTagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseTagMultiError) AllErrors() []error { return m }

// ReleaseTagValidationError is the validation error returned by
// ReleaseTag.Validate if the designated constraints aren't met.
type ReleaseTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseTagValidationError) ErrorName() string { return "ReleaseTagValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseTagValidationError{}

// Validate checks the field values on VersionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VersionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VersionInfoMultiError, or
// nil if none found.
func (m *VersionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageName

	// no validation rules for Version

	// no validation rules for BuildID

	if len(errors) > 0 {
		return VersionInfoMultiError(errors)
	}

	return nil
}

// VersionInfoMultiError is an error wrapping multiple validation errors
// returned by VersionInfo.ValidateAll() if the designated constraints aren't met.
type VersionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionInfoMultiError) AllErrors() []error { return m }

// VersionInfoValidationError is the validation error returned by
// VersionInfo.Validate if the designated constraints aren't met.
type VersionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionInfoValidationError) ErrorName() string { return "VersionInfoValidationError" }

// Error satisfies the builtin error interface
func (e VersionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionInfoValidationError{}
