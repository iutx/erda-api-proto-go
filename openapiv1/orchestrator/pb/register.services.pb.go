// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: orchestrator.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterOrchestratorImp orchestrator.proto
func RegisterOrchestratorImp(regester transport.Register, srv OrchestratorServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterOrchestratorHandler(regester, OrchestratorHandler(srv), _ops.HTTP...)
	RegisterOrchestratorServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.openapiv1.orchestrator.Orchestrator",
	)
}

var (
	orchestratorClientType  = reflect.TypeOf((*OrchestratorClient)(nil)).Elem()
	orchestratorServerType  = reflect.TypeOf((*OrchestratorServer)(nil)).Elem()
	orchestratorHandlerType = reflect.TypeOf((*OrchestratorHandler)(nil)).Elem()
)

// OrchestratorClientType .
func OrchestratorClientType() reflect.Type { return orchestratorClientType }

// OrchestratorServerType .
func OrchestratorServerType() reflect.Type { return orchestratorServerType }

// OrchestratorHandlerType .
func OrchestratorHandlerType() reflect.Type { return orchestratorHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		orchestratorClientType,
		// server types
		orchestratorServerType,
		// handler types
		orchestratorHandlerType,
	}
}
