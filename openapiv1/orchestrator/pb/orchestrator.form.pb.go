// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: orchestrator.proto

package pb

import (
	json "encoding/json"
	url "net/url"
	strconv "strconv"
	strings "strings"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*ADDON_METRICS_HISTOGRAM_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonAvailableRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonAvailableResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonDirectCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonExtensionResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonFetchResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonFetchResponseData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonListRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonListResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonReferenceInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonReferencesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AddonTenantCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AppWorkspaceReleasesGetRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AppWorkspaceReleasesGetResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Container)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ContainerListRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ContainerListResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CustomAddonCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CustomAddonUpdateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeploymentApproveRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeploymentApproveResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeploymentCancelRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeploymentCancelResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeploymentCreateResponseDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeploymentDetailListResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeploymentListRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeploymentListResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DomainListRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DomainListResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DomainUpdateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DomainUpdateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ErrorResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Extension)(nil)
var _ urlenc.URLValuesUnmarshaler = (*K8SInstanceMetaInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MicroServiceMenuResponseData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MicroServiceProjectResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MicroServiceProjectResponseData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MiddlewareFetchResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MiddlewareFetchResponseData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MiddlewareListItem)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MiddlewareListRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MiddlewareListResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MiddlewareListResponseData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MiddlewareResourceFetchResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MiddlewareResourceFetchResponseData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_ADDONS_SCALE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_ADDON_CUSTOM_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_ADDON_DELETE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_ADDON_EXPORT_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_ADDON_EXTENSION_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_ADDON_FETCH_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_ADDON_IMPORT_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_ADDON_LOGS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_ADDON_MENU_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_ADDON_REFERENCES_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_DEPLOYMENT_ADDONS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_DEPLOYMENT_SERVICES_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_INSTANCES_USAGE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_MICRO_SERVICE_MENUS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_MIDDLEWARE_FETCH_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_MIGRATION_LOG_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_ORG_JOB_LOG_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIME_CREATE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIME_DELETE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIME_REDEPLOY_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIME_ROLLBACK_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_RUNTIME_SEARCH_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ORCHESTRATOR_TERMINAL_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Overview)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PageInfo)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Pod)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PodListRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PodListResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeCreateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeDeleteResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeInspectDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeInspectRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeInspectResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeKillPodRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeReleaseCreatePipelineResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeReleaseCreateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*RuntimeServiceResourceDTO)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ScheduleLabelListData)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ScheduleLabelListRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ScheduleLabelListResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ScheduleLabelSetRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ScheduleLabelSetResponse)(nil)

// ADDON_METRICS_HISTOGRAM_Request implement urlenc.URLValuesUnmarshaler.
func (m *ADDON_METRICS_HISTOGRAM_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				m.Scope = vals[0]
			}
		}
	}
	return nil
}

// AddonAvailableRequest implement urlenc.URLValuesUnmarshaler.
func (m *AddonAvailableRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				m.ProjectID = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			}
		}
	}
	return nil
}

// AddonAvailableResponse implement urlenc.URLValuesUnmarshaler.
func (m *AddonAvailableResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// AddonDirectCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *AddonDirectCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "clusterName":
				m.ClusterName = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "applicationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationID = val
			case "workspace":
				m.Workspace = vals[0]
			case "operator":
				m.Operator = vals[0]
			case "shareScope":
				m.ShareScope = vals[0]
			}
		}
	}
	return nil
}

// AddonExtensionResponse implement urlenc.URLValuesUnmarshaler.
func (m *AddonExtensionResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// AddonFetchResponse implement urlenc.URLValuesUnmarshaler.
func (m *AddonFetchResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// AddonFetchResponseData implement urlenc.URLValuesUnmarshaler.
func (m *AddonFetchResponseData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				m.ID = vals[0]
			case "name":
				m.Name = vals[0]
			case "tag":
				m.Tag = vals[0]
			case "addonName":
				m.AddonName = vals[0]
			case "addonDisplayName":
				m.AddonDisplayName = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "logoURL":
				m.LogoURL = vals[0]
			case "plan":
				m.Plan = vals[0]
			case "version":
				m.Version = vals[0]
			case "category":
				m.Category = vals[0]
			case "shareScope":
				m.ShareScope = vals[0]
			case "cluster":
				m.Cluster = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "projectName":
				m.ProjectName = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			case "status":
				m.Status = vals[0]
			case "realInstanceID":
				m.RealInstanceID = vals[0]
			case "reference":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Reference = val
			case "attachCount":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AttachCount = val
			case "platform":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Platform = val
			case "platformServiceType":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PlatformServiceType = val
			case "canDel":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.CanDel = val
			case "terminusKey":
				m.TerminusKey = vals[0]
			case "consoleUrl":
				m.ConsoleUrl = vals[0]
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "updatedAt":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "updatedAt.seconds":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt.Seconds = val
			case "updatedAt.nanos":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAt.Nanos = int32(val)
			case "recordID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RecordID = val
			case "customAddonType":
				m.CustomAddonType = vals[0]
			case "tenantOwner":
				m.TenantOwner = vals[0]
			case "isInsideAddon":
				m.IsInsideAddon = vals[0]
			}
		}
	}
	return nil
}

// AddonListRequest implement urlenc.URLValuesUnmarshaler.
func (m *AddonListRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "type":
				m.Type = vals[0]
			case "value":
				m.Value = vals[0]
			}
		}
	}
	return nil
}

// AddonListResponse implement urlenc.URLValuesUnmarshaler.
func (m *AddonListResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// AddonReferenceInfo implement urlenc.URLValuesUnmarshaler.
func (m *AddonReferenceInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "projectName":
				m.ProjectName = vals[0]
			case "appID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AppID = val
			case "appName":
				m.AppName = vals[0]
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			case "runtimeName":
				m.RuntimeName = vals[0]
			}
		}
	}
	return nil
}

// AddonReferencesResponse implement urlenc.URLValuesUnmarshaler.
func (m *AddonReferencesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// AddonTenantCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *AddonTenantCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addonInstanceRoutingID":
				m.AddonInstanceRoutingID = vals[0]
			case "name":
				m.Name = vals[0]
			}
		}
	}
	return nil
}

// AppWorkspaceReleasesGetRequest implement urlenc.URLValuesUnmarshaler.
func (m *AppWorkspaceReleasesGetRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "appID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AppID = val
			case "workspace":
				m.Workspace = vals[0]
			}
		}
	}
	return nil
}

// AppWorkspaceReleasesGetResponse implement urlenc.URLValuesUnmarshaler.
func (m *AppWorkspaceReleasesGetResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// Container implement urlenc.URLValuesUnmarshaler.
func (m *Container) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "k8sInstanceMetaInfo":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.K8SInstanceMetaInfo = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.K8SInstanceMetaInfo = val
					} else {
						m.K8SInstanceMetaInfo = structpb.NewStringValue(vals[0])
					}
				}
			case "ID":
				m.ID = vals[0]
			case "containerID":
				m.ContainerID = vals[0]
			case "iPAddress":
				m.IPAddress = vals[0]
			case "host":
				m.Host = vals[0]
			case "image":
				m.Image = vals[0]
			case "cPU":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.CPU = val
			case "memory":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Memory = val
			case "disk":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Disk = val
			case "status":
				m.Status = vals[0]
			case "exitCode":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ExitCode = val
			case "message":
				m.Message = vals[0]
			case "stage":
				m.Stage = vals[0]
			case "startedAt":
				m.StartedAt = vals[0]
			case "updatedAt":
				m.UpdatedAt = vals[0]
			case "service":
				m.Service = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			}
		}
	}
	return nil
}

// ContainerListRequest implement urlenc.URLValuesUnmarshaler.
func (m *ContainerListRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "type":
				m.Type = vals[0]
			case "runtimeID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			case "serviceName":
				m.ServiceName = vals[0]
			case "status":
				m.Status = vals[0]
			}
		}
	}
	return nil
}

// ContainerListResponse implement urlenc.URLValuesUnmarshaler.
func (m *ContainerListResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// CustomAddonCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *CustomAddonCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "addonName":
				m.AddonName = vals[0]
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "workspace":
				m.Workspace = vals[0]
			case "tag":
				m.Tag = vals[0]
			case "operatorID":
				m.OperatorID = vals[0]
			case "customAddonType":
				m.CustomAddonType = vals[0]
			}
		}
	}
	return nil
}

// CustomAddonUpdateRequest implement urlenc.URLValuesUnmarshaler.
func (m *CustomAddonUpdateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addonId":
				m.AddonId = vals[0]
			}
		}
	}
	return nil
}

// DeploymentApproveRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeploymentApproveRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "reject":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Reject = val
			case "reason":
				m.Reason = vals[0]
			}
		}
	}
	return nil
}

// DeploymentApproveResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeploymentApproveResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// DeploymentCancelRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeploymentCancelRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeID":
				m.RuntimeID = vals[0]
			case "operator":
				m.Operator = vals[0]
			case "deploymentId":
				m.DeploymentId = vals[0]
			}
		}
	}
	return nil
}

// DeploymentCancelResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeploymentCancelResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// DeploymentCreateResponseDTO implement urlenc.URLValuesUnmarshaler.
func (m *DeploymentCreateResponseDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "deploymentID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.DeploymentID = val
			case "applicationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationID = val
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			}
		}
	}
	return nil
}

// DeploymentDetailListResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeploymentDetailListResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// DeploymentListRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeploymentListRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageInfo":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.PageInfo = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.PageInfo = val
					} else {
						m.PageInfo = structpb.NewStringValue(vals[0])
					}
				}
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			case "statusIn":
				m.StatusIn = vals[0]
			}
		}
	}
	return nil
}

// DeploymentListResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeploymentListResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// DomainListRequest implement urlenc.URLValuesUnmarshaler.
func (m *DomainListRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			}
		}
	}
	return nil
}

// DomainListResponse implement urlenc.URLValuesUnmarshaler.
func (m *DomainListResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// DomainUpdateRequest implement urlenc.URLValuesUnmarshaler.
func (m *DomainUpdateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			}
		}
	}
	return nil
}

// DomainUpdateResponse implement urlenc.URLValuesUnmarshaler.
func (m *DomainUpdateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ErrorResponse implement urlenc.URLValuesUnmarshaler.
func (m *ErrorResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "code":
				m.Code = vals[0]
			case "msg":
				m.Msg = vals[0]
			case "ctx":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Ctx = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Ctx = val
					} else {
						m.Ctx = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// Extension implement urlenc.URLValuesUnmarshaler.
func (m *Extension) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "type":
				m.Type = vals[0]
			case "name":
				m.Name = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "displayName":
				m.DisplayName = vals[0]
			case "category":
				m.Category = vals[0]
			case "logoUrl":
				m.LogoUrl = vals[0]
			case "public":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Public = val
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "updatedAt":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "updatedAt.seconds":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt.Seconds = val
			case "updatedAt.nanos":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAt.Nanos = int32(val)
			}
		}
	}
	return nil
}

// K8SInstanceMetaInfo implement urlenc.URLValuesUnmarshaler.
func (m *K8SInstanceMetaInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "podUid":
				m.PodUid = vals[0]
			case "podName":
				m.PodName = vals[0]
			case "podNamespace":
				m.PodNamespace = vals[0]
			case "containerName":
				m.ContainerName = vals[0]
			}
		}
	}
	return nil
}

// MicroServiceMenuResponseData implement urlenc.URLValuesUnmarshaler.
func (m *MicroServiceMenuResponseData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addonName":
				m.AddonName = vals[0]
			case "addonDisplayName":
				m.AddonDisplayName = vals[0]
			case "instanceId":
				m.InstanceId = vals[0]
			case "terminusKey":
				m.TerminusKey = vals[0]
			case "consoleUrl":
				m.ConsoleUrl = vals[0]
			case "projectName":
				m.ProjectName = vals[0]
			}
		}
	}
	return nil
}

// MicroServiceProjectResponse implement urlenc.URLValuesUnmarshaler.
func (m *MicroServiceProjectResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// MicroServiceProjectResponseData implement urlenc.URLValuesUnmarshaler.
func (m *MicroServiceProjectResponseData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				m.ProjectID = vals[0]
			case "projectName":
				m.ProjectName = vals[0]
			case "projectDesc":
				m.ProjectDesc = vals[0]
			case "logoURL":
				m.LogoURL = vals[0]
			case "envs":
				m.Envs = vals
			case "tenantGroups":
				m.TenantGroups = vals
			case "createTime":
				if m.CreateTime == nil {
					m.CreateTime = &timestamppb.Timestamp{}
				}
			case "createTime.seconds":
				if m.CreateTime == nil {
					m.CreateTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreateTime.Seconds = val
			case "createTime.nanos":
				if m.CreateTime == nil {
					m.CreateTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreateTime.Nanos = int32(val)
			}
		}
	}
	return nil
}

// MiddlewareFetchResponse implement urlenc.URLValuesUnmarshaler.
func (m *MiddlewareFetchResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// MiddlewareFetchResponseData implement urlenc.URLValuesUnmarshaler.
func (m *MiddlewareFetchResponseData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "isOperator":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsOperator = val
			case "instanceID":
				m.InstanceID = vals[0]
			case "addonName":
				m.AddonName = vals[0]
			case "logoURL":
				m.LogoURL = vals[0]
			case "plan":
				m.Plan = vals[0]
			case "version":
				m.Version = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "projectName":
				m.ProjectName = vals[0]
			case "category":
				m.Category = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			case "status":
				m.Status = vals[0]
			case "attachCount":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AttachCount = val
			case "cluster":
				m.Cluster = vals[0]
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "updatedAt":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "updatedAt.seconds":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt.Seconds = val
			case "updatedAt.nanos":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAt.Nanos = int32(val)
			}
		}
	}
	return nil
}

// MiddlewareListItem implement urlenc.URLValuesUnmarshaler.
func (m *MiddlewareListItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "instanceID":
				m.InstanceID = vals[0]
			case "addonName":
				m.AddonName = vals[0]
			case "projectID":
				m.ProjectID = vals[0]
			case "projectName":
				m.ProjectName = vals[0]
			case "env":
				m.Env = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "name":
				m.Name = vals[0]
			case "cPU":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.CPU = val
			case "mem":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Mem = val
			case "nodes":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Nodes = val
			case "attachCount":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AttachCount = val
			case "isOperator":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.IsOperator = val
			}
		}
	}
	return nil
}

// MiddlewareListRequest implement urlenc.URLValuesUnmarshaler.
func (m *MiddlewareListRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "addonName":
				m.AddonName = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			case "instanceID":
				m.InstanceID = vals[0]
			case "instanceIP":
				m.InstanceIP = vals[0]
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "endTime":
				if m.EndTime == nil {
					m.EndTime = &timestamppb.Timestamp{}
				}
			case "endTime.seconds":
				if m.EndTime == nil {
					m.EndTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.EndTime.Seconds = val
			case "endTime.nanos":
				if m.EndTime == nil {
					m.EndTime = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.EndTime.Nanos = int32(val)
			}
		}
	}
	return nil
}

// MiddlewareListResponse implement urlenc.URLValuesUnmarshaler.
func (m *MiddlewareListResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// MiddlewareListResponseData implement urlenc.URLValuesUnmarshaler.
func (m *MiddlewareListResponseData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			case "overview":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Overview = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Overview = val
					} else {
						m.Overview = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// MiddlewareResourceFetchResponse implement urlenc.URLValuesUnmarshaler.
func (m *MiddlewareResourceFetchResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// MiddlewareResourceFetchResponseData implement urlenc.URLValuesUnmarshaler.
func (m *MiddlewareResourceFetchResponseData) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "instanceID":
				m.InstanceID = vals[0]
			case "containerID":
				m.ContainerID = vals[0]
			case "containerIP":
				m.ContainerIP = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "hostIP":
				m.HostIP = vals[0]
			case "image":
				m.Image = vals[0]
			case "cPURequest":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.CPURequest = val
			case "cPULimit":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.CPULimit = val
			case "memRequest":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MemRequest = val
			case "memLimit":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.MemLimit = val
			case "status":
				m.Status = vals[0]
			case "startedAt":
				if m.StartedAt == nil {
					m.StartedAt = &timestamppb.Timestamp{}
				}
			case "startedAt.seconds":
				if m.StartedAt == nil {
					m.StartedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.StartedAt.Seconds = val
			case "startedAt.nanos":
				if m.StartedAt == nil {
					m.StartedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.StartedAt.Nanos = int32(val)
			}
		}
	}
	return nil
}

// ORCHESTRATOR_ADDONS_SCALE_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_ADDONS_SCALE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_ADDON_CUSTOM_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_ADDON_CUSTOM_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_ADDON_DELETE_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_ADDON_DELETE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addonId":
				m.AddonId = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_ADDON_EXPORT_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_ADDON_EXPORT_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_ADDON_EXTENSION_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_ADDON_EXTENSION_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_ADDON_FETCH_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_ADDON_FETCH_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addonId":
				m.AddonId = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_ADDON_IMPORT_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_ADDON_IMPORT_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_ADDON_LOGS_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_ADDON_LOGS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "instanceId":
				m.InstanceId = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_ADDON_MENU_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_ADDON_MENU_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_ADDON_REFERENCES_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_ADDON_REFERENCES_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addonID":
				m.AddonID = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cluster":
				m.Cluster = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ADDONS_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_DEPLOYMENT_ADDONS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "deploymentID":
				m.DeploymentID = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "deploymentID":
				m.DeploymentID = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "deploymentOrderID":
				m.DeploymentOrderID = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "deploymentOrderID":
				m.DeploymentOrderID = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "deploymentOrderID":
				m.DeploymentOrderID = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "deploymentId":
				m.DeploymentId = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_DEPLOYMENT_SERVICES_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_DEPLOYMENT_SERVICES_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "deploymentID":
				m.DeploymentID = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_INSTANCES_USAGE_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_INSTANCES_USAGE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_MICRO_SERVICE_MENUS_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_MICRO_SERVICE_MENUS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				m.ProjectID = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addonId":
				m.AddonId = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_MIDDLEWARE_FETCH_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_MIDDLEWARE_FETCH_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addonId":
				m.AddonId = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_MIGRATION_LOG_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_MIGRATION_LOG_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "migrationId":
				m.MigrationId = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_ORG_JOB_LOG_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_ORG_JOB_LOG_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_RUNTIME_CREATE_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIME_CREATE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_RUNTIME_DELETE_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIME_DELETE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeId":
				m.RuntimeId = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeId":
				m.RuntimeId = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeId":
				m.RuntimeId = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_RUNTIME_REDEPLOY_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIME_REDEPLOY_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeId":
				m.RuntimeId = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeId":
				m.RuntimeId = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_RUNTIME_ROLLBACK_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIME_ROLLBACK_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeId":
				m.RuntimeId = vals[0]
			}
		}
	}
	return nil
}

// ORCHESTRATOR_RUNTIME_SEARCH_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_RUNTIME_SEARCH_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ORCHESTRATOR_TERMINAL_Request implement urlenc.URLValuesUnmarshaler.
func (m *ORCHESTRATOR_TERMINAL_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// Overview implement urlenc.URLValuesUnmarshaler.
func (m *Overview) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cPU":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.CPU = val
			case "mem":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Mem = val
			case "nodes":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Nodes = val
			}
		}
	}
	return nil
}

// PageInfo implement urlenc.URLValuesUnmarshaler.
func (m *PageInfo) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageNO":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNO = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			}
		}
	}
	return nil
}

// Pod implement urlenc.URLValuesUnmarshaler.
func (m *Pod) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "uid":
				m.Uid = vals[0]
			case "iPAddress":
				m.IPAddress = vals[0]
			case "host":
				m.Host = vals[0]
			case "phase":
				m.Phase = vals[0]
			case "message":
				m.Message = vals[0]
			case "startedAt":
				m.StartedAt = vals[0]
			case "service":
				m.Service = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "podName":
				m.PodName = vals[0]
			case "k8sNamespace":
				m.K8SNamespace = vals[0]
			}
		}
	}
	return nil
}

// PodListRequest implement urlenc.URLValuesUnmarshaler.
func (m *PodListRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			case "serviceName":
				m.ServiceName = vals[0]
			}
		}
	}
	return nil
}

// PodListResponse implement urlenc.URLValuesUnmarshaler.
func (m *PodListResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// RuntimeCreateResponse implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeCreateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// RuntimeDTO implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "name":
				m.Name = vals[0]
			case "gitBranch":
				m.GitBranch = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			case "clusterName":
				m.ClusterName = vals[0]
			case "clusterId":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ClusterId = val
			case "status":
				m.Status = vals[0]
			case "applicationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationID = val
			case "applicationName":
				m.ApplicationName = vals[0]
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "projectName":
				m.ProjectName = vals[0]
			case "orgID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.OrgID = val
			}
		}
	}
	return nil
}

// RuntimeDeleteResponse implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeDeleteResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// RuntimeInspectDTO implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeInspectDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "ID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ID = val
			case "name":
				m.Name = vals[0]
			case "serviceGroupName":
				m.ServiceGroupName = vals[0]
			case "serviceGroupNamespace":
				m.ServiceGroupNamespace = vals[0]
			case "source":
				m.Source = vals[0]
			case "status":
				m.Status = vals[0]
			case "deployStatus":
				m.DeployStatus = vals[0]
			case "deleteStatus":
				m.DeleteStatus = vals[0]
			case "releaseID":
				m.ReleaseID = vals[0]
			case "clusterID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ClusterID = val
			case "clusterName":
				m.ClusterName = vals[0]
			case "clusterType":
				m.ClusterType = vals[0]
			case "resources":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Resources = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Resources = val
					} else {
						m.Resources = structpb.NewStringValue(vals[0])
					}
				}
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "timeCreated":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
			case "timeCreated.seconds":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.TimeCreated.Seconds = val
			case "timeCreated.nanos":
				if m.TimeCreated == nil {
					m.TimeCreated = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.TimeCreated.Nanos = int32(val)
			case "createdAt":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
			case "createdAt.seconds":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreatedAt.Seconds = val
			case "createdAt.nanos":
				if m.CreatedAt == nil {
					m.CreatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.CreatedAt.Nanos = int32(val)
			case "updatedAt":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
			case "updatedAt.seconds":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt.Seconds = val
			case "updatedAt.nanos":
				if m.UpdatedAt == nil {
					m.UpdatedAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.UpdatedAt.Nanos = int32(val)
			case "deployAt":
				if m.DeployAt == nil {
					m.DeployAt = &timestamppb.Timestamp{}
				}
			case "deployAt.seconds":
				if m.DeployAt == nil {
					m.DeployAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.DeployAt.Seconds = val
			case "deployAt.nanos":
				if m.DeployAt == nil {
					m.DeployAt = &timestamppb.Timestamp{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 32)
				if err != nil {
					return err
				}
				m.DeployAt.Nanos = int32(val)
			case "creator":
				m.Creator = vals[0]
			case "applicationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationID = val
			case "applicationName":
				m.ApplicationName = vals[0]
			case "deploymentOrderId":
				m.DeploymentOrderId = vals[0]
			case "deploymentOrderName":
				m.DeploymentOrderName = vals[0]
			case "releaseVersion":
				m.ReleaseVersion = vals[0]
			case "rawStatus":
				m.RawStatus = vals[0]
			case "rawDeploymentStatus":
				m.RawDeploymentStatus = vals[0]
			}
		}
	}
	return nil
}

// RuntimeInspectRequest implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeInspectRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "IDOrName":
				m.IDOrName = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			case "applicationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationID = val
			}
		}
	}
	return nil
}

// RuntimeInspectResponse implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeInspectResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// RuntimeKillPodRequest implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeKillPodRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "runtimeID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.RuntimeID = val
			case "podName":
				m.PodName = vals[0]
			}
		}
	}
	return nil
}

// RuntimeReleaseCreatePipelineResponse implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeReleaseCreatePipelineResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pipelineID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineID = val
			}
		}
	}
	return nil
}

// RuntimeReleaseCreateRequest implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeReleaseCreateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "releaseID":
				m.ReleaseID = vals[0]
			case "workspace":
				m.Workspace = vals[0]
			case "projectID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "applicationID":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationID = val
			}
		}
	}
	return nil
}

// RuntimeServiceResourceDTO implement urlenc.URLValuesUnmarshaler.
func (m *RuntimeServiceResourceDTO) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "cPU":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.CPU = val
			case "mem":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Mem = val
			case "disk":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Disk = val
			}
		}
	}
	return nil
}

// ScheduleLabelListData implement urlenc.URLValuesUnmarshaler.
func (m *ScheduleLabelListData) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ScheduleLabelListRequest implement urlenc.URLValuesUnmarshaler.
func (m *ScheduleLabelListRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ScheduleLabelListResponse implement urlenc.URLValuesUnmarshaler.
func (m *ScheduleLabelListResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if len(vals) > 1 {
					var list []interface{}
					for _, text := range vals {
						var v interface{}
						err := json.NewDecoder(strings.NewReader(text)).Decode(&v)
						if err != nil {
							list = append(list, v)
						} else {
							list = append(list, text)
						}
					}
					val, _ := structpb.NewList(list)
					m.Data = structpb.NewListValue(val)
				} else {
					var v interface{}
					err := json.NewDecoder(strings.NewReader(vals[0])).Decode(&v)
					if err != nil {
						val, _ := structpb.NewValue(v)
						m.Data = val
					} else {
						m.Data = structpb.NewStringValue(vals[0])
					}
				}
			}
		}
	}
	return nil
}

// ScheduleLabelSetRequest implement urlenc.URLValuesUnmarshaler.
func (m *ScheduleLabelSetRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "hosts":
				m.Hosts = vals
			case "clusterName":
				m.ClusterName = vals[0]
			case "clusterType":
				m.ClusterType = vals[0]
			case "soldierURL":
				m.SoldierURL = vals[0]
			}
		}
	}
	return nil
}

// ScheduleLabelSetResponse implement urlenc.URLValuesUnmarshaler.
func (m *ScheduleLabelSetResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
