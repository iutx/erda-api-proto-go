// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: orchestrator.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// OrchestratorClient is the client API for Orchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestratorClient interface {
	ADDON_METRICS_HISTOGRAM(ctx context.Context, in *ADDON_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDONS_SCALE(ctx context.Context, in *ORCHESTRATOR_ADDONS_SCALE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_AVAILABLE(ctx context.Context, in *AddonAvailableRequest, opts ...grpc.CallOption) (*AddonAvailableResponse, error)
	ORCHESTRATOR_ADDON_CREATE(ctx context.Context, in *AddonDirectCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_CREATE_CUSTOM(ctx context.Context, in *CustomAddonCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_CUSTOM(ctx context.Context, in *ORCHESTRATOR_ADDON_CUSTOM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_DELETE(ctx context.Context, in *ORCHESTRATOR_ADDON_DELETE_Request, opts ...grpc.CallOption) (*AddonFetchResponse, error)
	ORCHESTRATOR_ADDON_EXPORT(ctx context.Context, in *ORCHESTRATOR_ADDON_EXPORT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_EXTENSION(ctx context.Context, in *ORCHESTRATOR_ADDON_EXTENSION_Request, opts ...grpc.CallOption) (*AddonExtensionResponse, error)
	ORCHESTRATOR_ADDON_FETCH(ctx context.Context, in *ORCHESTRATOR_ADDON_FETCH_Request, opts ...grpc.CallOption) (*AddonFetchResponse, error)
	ORCHESTRATOR_ADDON_IMPORT(ctx context.Context, in *ORCHESTRATOR_ADDON_IMPORT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_LIST(ctx context.Context, in *AddonListRequest, opts ...grpc.CallOption) (*AddonListResponse, error)
	ORCHESTRATOR_ADDON_LOGS(ctx context.Context, in *ORCHESTRATOR_ADDON_LOGS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_MENU(ctx context.Context, in *ORCHESTRATOR_ADDON_MENU_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_REFERENCES(ctx context.Context, in *ORCHESTRATOR_ADDON_REFERENCES_Request, opts ...grpc.CallOption) (*AddonReferencesResponse, error)
	ORCHESTRATOR_ADDON_TENANT_CREATE(ctx context.Context, in *AddonTenantCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_UPDATE_CUSTOM(ctx context.Context, in *CustomAddonUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_CLUSTER_INSTANCES_USAGE(ctx context.Context, in *ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_ADDONS(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ADDONS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_APPROVE(ctx context.Context, in *DeploymentApproveRequest, opts ...grpc.CallOption) (*DeploymentApproveResponse, error)
	ORCHESTRATOR_DEPLOYMENT_CANCEL(ctx context.Context, in *DeploymentCancelRequest, opts ...grpc.CallOption) (*DeploymentCancelResponse, error)
	ORCHESTRATOR_DEPLOYMENT_DOMAINS(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_LIST(ctx context.Context, in *DeploymentListRequest, opts ...grpc.CallOption) (*DeploymentListResponse, error)
	ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request, opts ...grpc.CallOption) (*DeploymentDetailListResponse, error)
	ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request, opts ...grpc.CallOption) (*DeploymentDetailListResponse, error)
	ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request, opts ...grpc.CallOption) (*DeploymentDetailListResponse, error)
	ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_ORDER_GET(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_ORDER_LIST(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_SERVICES(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_SERVICES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES(ctx context.Context, in *AppWorkspaceReleasesGetRequest, opts ...grpc.CallOption) (*AppWorkspaceReleasesGetResponse, error)
	ORCHESTRATOR_INSTANCES_USAGE(ctx context.Context, in *ORCHESTRATOR_INSTANCES_USAGE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_MICRO_SERVICE_MENUS(ctx context.Context, in *ORCHESTRATOR_MICRO_SERVICE_MENUS_Request, opts ...grpc.CallOption) (*MicroServiceMenuResponseData, error)
	ORCHESTRATOR_MICRO_SERVICE_PROJECTS(ctx context.Context, in *ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request, opts ...grpc.CallOption) (*MicroServiceProjectResponse, error)
	ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION(ctx context.Context, in *MiddlewareListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_MIDDLEWARE_DAILY(ctx context.Context, in *MiddlewareListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_MIDDLEWARE_FETCH(ctx context.Context, in *ORCHESTRATOR_MIDDLEWARE_FETCH_Request, opts ...grpc.CallOption) (*MiddlewareFetchResponse, error)
	ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE(ctx context.Context, in *ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request, opts ...grpc.CallOption) (*MiddlewareResourceFetchResponse, error)
	ORCHESTRATOR_MIDDLEWARE_LIST(ctx context.Context, in *MiddlewareListRequest, opts ...grpc.CallOption) (*MiddlewareListResponse, error)
	ORCHESTRATOR_MIGRATION_LOG(ctx context.Context, in *ORCHESTRATOR_MIGRATION_LOG_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_NODELABEL_LIST(ctx context.Context, in *ScheduleLabelListRequest, opts ...grpc.CallOption) (*ScheduleLabelListResponse, error)
	ORCHESTRATOR_NODELABEL_SET(ctx context.Context, in *ScheduleLabelSetRequest, opts ...grpc.CallOption) (*ScheduleLabelSetResponse, error)
	ORCHESTRATOR_ORG_JOB_LOG(ctx context.Context, in *ORCHESTRATOR_ORG_JOB_LOG_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_PROJECT_RUNTIME_COUNT(ctx context.Context, in *ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIMES_BATCH_SCALE(ctx context.Context, in *ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_BATCH_SERVICES(ctx context.Context, in *ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_BULK_GET_STATUS(ctx context.Context, in *ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_CREATE(ctx context.Context, in *ORCHESTRATOR_RUNTIME_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_DELETE(ctx context.Context, in *ORCHESTRATOR_RUNTIME_DELETE_Request, opts ...grpc.CallOption) (*RuntimeDeleteResponse, error)
	ORCHESTRATOR_RUNTIME_DEPLOY_LOG(ctx context.Context, in *ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_DOMAIN_GET(ctx context.Context, in *DomainListRequest, opts ...grpc.CallOption) (*DomainListResponse, error)
	ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE(ctx context.Context, in *DomainUpdateRequest, opts ...grpc.CallOption) (*DomainUpdateResponse, error)
	ORCHESTRATOR_RUNTIME_GROUP_BY_APPS(ctx context.Context, in *ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_INSPECT(ctx context.Context, in *RuntimeInspectRequest, opts ...grpc.CallOption) (*RuntimeInspectResponse, error)
	ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP(ctx context.Context, in *ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_KILLPOD(ctx context.Context, in *RuntimeKillPodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES(ctx context.Context, in *ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_REDEPLOY(ctx context.Context, in *ORCHESTRATOR_RUNTIME_REDEPLOY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION(ctx context.Context, in *ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_RELEASE_CREATE(ctx context.Context, in *RuntimeReleaseCreateRequest, opts ...grpc.CallOption) (*RuntimeReleaseCreatePipelineResponse, error)
	ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION(ctx context.Context, in *RuntimeReleaseCreateRequest, opts ...grpc.CallOption) (*RuntimeCreateResponse, error)
	ORCHESTRATOR_RUNTIME_ROLLBACK(ctx context.Context, in *ORCHESTRATOR_RUNTIME_ROLLBACK_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION(ctx context.Context, in *ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_SEARCH(ctx context.Context, in *ORCHESTRATOR_RUNTIME_SEARCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ORCHESTRATOR_SERVICE_INSTANCE_LIST(ctx context.Context, in *ContainerListRequest, opts ...grpc.CallOption) (*ContainerListResponse, error)
	ORCHESTRATOR_SERVICE_POD_LIST(ctx context.Context, in *PodListRequest, opts ...grpc.CallOption) (*PodListResponse, error)
	ORCHESTRATOR_TERMINAL(ctx context.Context, in *ORCHESTRATOR_TERMINAL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type orchestratorClient struct {
	cc grpc1.ClientConnInterface
}

func NewOrchestratorClient(cc grpc1.ClientConnInterface) OrchestratorClient {
	return &orchestratorClient{cc}
}

func (c *orchestratorClient) ADDON_METRICS_HISTOGRAM(ctx context.Context, in *ADDON_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ADDON_METRICS_HISTOGRAM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDONS_SCALE(ctx context.Context, in *ORCHESTRATOR_ADDONS_SCALE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDONS_SCALE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_AVAILABLE(ctx context.Context, in *AddonAvailableRequest, opts ...grpc.CallOption) (*AddonAvailableResponse, error) {
	out := new(AddonAvailableResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_AVAILABLE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_CREATE(ctx context.Context, in *AddonDirectCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_CREATE_CUSTOM(ctx context.Context, in *CustomAddonCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_CREATE_CUSTOM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_CUSTOM(ctx context.Context, in *ORCHESTRATOR_ADDON_CUSTOM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_CUSTOM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_DELETE(ctx context.Context, in *ORCHESTRATOR_ADDON_DELETE_Request, opts ...grpc.CallOption) (*AddonFetchResponse, error) {
	out := new(AddonFetchResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_EXPORT(ctx context.Context, in *ORCHESTRATOR_ADDON_EXPORT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_EXPORT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_EXTENSION(ctx context.Context, in *ORCHESTRATOR_ADDON_EXTENSION_Request, opts ...grpc.CallOption) (*AddonExtensionResponse, error) {
	out := new(AddonExtensionResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_EXTENSION", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_FETCH(ctx context.Context, in *ORCHESTRATOR_ADDON_FETCH_Request, opts ...grpc.CallOption) (*AddonFetchResponse, error) {
	out := new(AddonFetchResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_FETCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_IMPORT(ctx context.Context, in *ORCHESTRATOR_ADDON_IMPORT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_IMPORT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_LIST(ctx context.Context, in *AddonListRequest, opts ...grpc.CallOption) (*AddonListResponse, error) {
	out := new(AddonListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_LOGS(ctx context.Context, in *ORCHESTRATOR_ADDON_LOGS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_LOGS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_MENU(ctx context.Context, in *ORCHESTRATOR_ADDON_MENU_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_MENU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_REFERENCES(ctx context.Context, in *ORCHESTRATOR_ADDON_REFERENCES_Request, opts ...grpc.CallOption) (*AddonReferencesResponse, error) {
	out := new(AddonReferencesResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_REFERENCES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_TENANT_CREATE(ctx context.Context, in *AddonTenantCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_TENANT_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ADDON_UPDATE_CUSTOM(ctx context.Context, in *CustomAddonUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_UPDATE_CUSTOM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_CLUSTER_INSTANCES_USAGE(ctx context.Context, in *ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_CLUSTER_INSTANCES_USAGE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_ADDONS(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ADDONS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ADDONS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_APPROVE(ctx context.Context, in *DeploymentApproveRequest, opts ...grpc.CallOption) (*DeploymentApproveResponse, error) {
	out := new(DeploymentApproveResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_APPROVE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_CANCEL(ctx context.Context, in *DeploymentCancelRequest, opts ...grpc.CallOption) (*DeploymentCancelResponse, error) {
	out := new(DeploymentCancelResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_CANCEL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_DOMAINS(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_DOMAINS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_LIST(ctx context.Context, in *DeploymentListRequest, opts ...grpc.CallOption) (*DeploymentListResponse, error) {
	out := new(DeploymentListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request, opts ...grpc.CallOption) (*DeploymentDetailListResponse, error) {
	out := new(DeploymentDetailListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request, opts ...grpc.CallOption) (*DeploymentDetailListResponse, error) {
	out := new(DeploymentDetailListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request, opts ...grpc.CallOption) (*DeploymentDetailListResponse, error) {
	out := new(DeploymentDetailListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_ORDER_GET(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ORDER_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_ORDER_LIST(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ORDER_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_DEPLOYMENT_SERVICES(ctx context.Context, in *ORCHESTRATOR_DEPLOYMENT_SERVICES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_SERVICES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES(ctx context.Context, in *AppWorkspaceReleasesGetRequest, opts ...grpc.CallOption) (*AppWorkspaceReleasesGetResponse, error) {
	out := new(AppWorkspaceReleasesGetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_INSTANCES_USAGE(ctx context.Context, in *ORCHESTRATOR_INSTANCES_USAGE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_INSTANCES_USAGE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_MICRO_SERVICE_MENUS(ctx context.Context, in *ORCHESTRATOR_MICRO_SERVICE_MENUS_Request, opts ...grpc.CallOption) (*MicroServiceMenuResponseData, error) {
	out := new(MicroServiceMenuResponseData)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MICRO_SERVICE_MENUS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_MICRO_SERVICE_PROJECTS(ctx context.Context, in *ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request, opts ...grpc.CallOption) (*MicroServiceProjectResponse, error) {
	out := new(MicroServiceProjectResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MICRO_SERVICE_PROJECTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION(ctx context.Context, in *MiddlewareListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_MIDDLEWARE_DAILY(ctx context.Context, in *MiddlewareListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MIDDLEWARE_DAILY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_MIDDLEWARE_FETCH(ctx context.Context, in *ORCHESTRATOR_MIDDLEWARE_FETCH_Request, opts ...grpc.CallOption) (*MiddlewareFetchResponse, error) {
	out := new(MiddlewareFetchResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MIDDLEWARE_FETCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE(ctx context.Context, in *ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request, opts ...grpc.CallOption) (*MiddlewareResourceFetchResponse, error) {
	out := new(MiddlewareResourceFetchResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_MIDDLEWARE_LIST(ctx context.Context, in *MiddlewareListRequest, opts ...grpc.CallOption) (*MiddlewareListResponse, error) {
	out := new(MiddlewareListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MIDDLEWARE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_MIGRATION_LOG(ctx context.Context, in *ORCHESTRATOR_MIGRATION_LOG_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MIGRATION_LOG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_NODELABEL_LIST(ctx context.Context, in *ScheduleLabelListRequest, opts ...grpc.CallOption) (*ScheduleLabelListResponse, error) {
	out := new(ScheduleLabelListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_NODELABEL_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_NODELABEL_SET(ctx context.Context, in *ScheduleLabelSetRequest, opts ...grpc.CallOption) (*ScheduleLabelSetResponse, error) {
	out := new(ScheduleLabelSetResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_NODELABEL_SET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_ORG_JOB_LOG(ctx context.Context, in *ORCHESTRATOR_ORG_JOB_LOG_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ORG_JOB_LOG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_PROJECT_RUNTIME_COUNT(ctx context.Context, in *ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_PROJECT_RUNTIME_COUNT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIMES_BATCH_SCALE(ctx context.Context, in *ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIMES_BATCH_SCALE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_BATCH_SERVICES(ctx context.Context, in *ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_BATCH_SERVICES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_BULK_GET_STATUS(ctx context.Context, in *ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_BULK_GET_STATUS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_CREATE(ctx context.Context, in *ORCHESTRATOR_RUNTIME_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_DELETE(ctx context.Context, in *ORCHESTRATOR_RUNTIME_DELETE_Request, opts ...grpc.CallOption) (*RuntimeDeleteResponse, error) {
	out := new(RuntimeDeleteResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_DEPLOY_LOG(ctx context.Context, in *ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_DEPLOY_LOG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_DOMAIN_GET(ctx context.Context, in *DomainListRequest, opts ...grpc.CallOption) (*DomainListResponse, error) {
	out := new(DomainListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_DOMAIN_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE(ctx context.Context, in *DomainUpdateRequest, opts ...grpc.CallOption) (*DomainUpdateResponse, error) {
	out := new(DomainUpdateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_GROUP_BY_APPS(ctx context.Context, in *ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_GROUP_BY_APPS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_INSPECT(ctx context.Context, in *RuntimeInspectRequest, opts ...grpc.CallOption) (*RuntimeInspectResponse, error) {
	out := new(RuntimeInspectResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_INSPECT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP(ctx context.Context, in *ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_KILLPOD(ctx context.Context, in *RuntimeKillPodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_KILLPOD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES(ctx context.Context, in *ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_REDEPLOY(ctx context.Context, in *ORCHESTRATOR_RUNTIME_REDEPLOY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_REDEPLOY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION(ctx context.Context, in *ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_RELEASE_CREATE(ctx context.Context, in *RuntimeReleaseCreateRequest, opts ...grpc.CallOption) (*RuntimeReleaseCreatePipelineResponse, error) {
	out := new(RuntimeReleaseCreatePipelineResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_RELEASE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION(ctx context.Context, in *RuntimeReleaseCreateRequest, opts ...grpc.CallOption) (*RuntimeCreateResponse, error) {
	out := new(RuntimeCreateResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_ROLLBACK(ctx context.Context, in *ORCHESTRATOR_RUNTIME_ROLLBACK_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_ROLLBACK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION(ctx context.Context, in *ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_RUNTIME_SEARCH(ctx context.Context, in *ORCHESTRATOR_RUNTIME_SEARCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_SEARCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_SERVICE_INSTANCE_LIST(ctx context.Context, in *ContainerListRequest, opts ...grpc.CallOption) (*ContainerListResponse, error) {
	out := new(ContainerListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_SERVICE_INSTANCE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_SERVICE_POD_LIST(ctx context.Context, in *PodListRequest, opts ...grpc.CallOption) (*PodListResponse, error) {
	out := new(PodListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_SERVICE_POD_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ORCHESTRATOR_TERMINAL(ctx context.Context, in *ORCHESTRATOR_TERMINAL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_TERMINAL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServer is the server API for Orchestrator service.
// All implementations should embed UnimplementedOrchestratorServer
// for forward compatibility
type OrchestratorServer interface {
	ADDON_METRICS_HISTOGRAM(context.Context, *ADDON_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDONS_SCALE(context.Context, *ORCHESTRATOR_ADDONS_SCALE_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_AVAILABLE(context.Context, *AddonAvailableRequest) (*AddonAvailableResponse, error)
	ORCHESTRATOR_ADDON_CREATE(context.Context, *AddonDirectCreateRequest) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_CREATE_CUSTOM(context.Context, *CustomAddonCreateRequest) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_CUSTOM(context.Context, *ORCHESTRATOR_ADDON_CUSTOM_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_DELETE(context.Context, *ORCHESTRATOR_ADDON_DELETE_Request) (*AddonFetchResponse, error)
	ORCHESTRATOR_ADDON_EXPORT(context.Context, *ORCHESTRATOR_ADDON_EXPORT_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_EXTENSION(context.Context, *ORCHESTRATOR_ADDON_EXTENSION_Request) (*AddonExtensionResponse, error)
	ORCHESTRATOR_ADDON_FETCH(context.Context, *ORCHESTRATOR_ADDON_FETCH_Request) (*AddonFetchResponse, error)
	ORCHESTRATOR_ADDON_IMPORT(context.Context, *ORCHESTRATOR_ADDON_IMPORT_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_LIST(context.Context, *AddonListRequest) (*AddonListResponse, error)
	ORCHESTRATOR_ADDON_LOGS(context.Context, *ORCHESTRATOR_ADDON_LOGS_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_MENU(context.Context, *ORCHESTRATOR_ADDON_MENU_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_REFERENCES(context.Context, *ORCHESTRATOR_ADDON_REFERENCES_Request) (*AddonReferencesResponse, error)
	ORCHESTRATOR_ADDON_TENANT_CREATE(context.Context, *AddonTenantCreateRequest) (*emptypb.Empty, error)
	ORCHESTRATOR_ADDON_UPDATE_CUSTOM(context.Context, *CustomAddonUpdateRequest) (*emptypb.Empty, error)
	ORCHESTRATOR_CLUSTER_INSTANCES_USAGE(context.Context, *ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_ADDONS(context.Context, *ORCHESTRATOR_DEPLOYMENT_ADDONS_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_APPROVE(context.Context, *DeploymentApproveRequest) (*DeploymentApproveResponse, error)
	ORCHESTRATOR_DEPLOYMENT_CANCEL(context.Context, *DeploymentCancelRequest) (*DeploymentCancelResponse, error)
	ORCHESTRATOR_DEPLOYMENT_DOMAINS(context.Context, *ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_LIST(context.Context, *DeploymentListRequest) (*DeploymentListResponse, error)
	ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED(context.Context, *ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request) (*DeploymentDetailListResponse, error)
	ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL(context.Context, *ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request) (*DeploymentDetailListResponse, error)
	ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL(context.Context, *ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request) (*DeploymentDetailListResponse, error)
	ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL(context.Context, *ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE(context.Context, *ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY(context.Context, *ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_ORDER_GET(context.Context, *ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_ORDER_LIST(context.Context, *ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL(context.Context, *ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS(context.Context, *ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_DEPLOYMENT_SERVICES(context.Context, *ORCHESTRATOR_DEPLOYMENT_SERVICES_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES(context.Context, *AppWorkspaceReleasesGetRequest) (*AppWorkspaceReleasesGetResponse, error)
	ORCHESTRATOR_INSTANCES_USAGE(context.Context, *ORCHESTRATOR_INSTANCES_USAGE_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_MICRO_SERVICE_MENUS(context.Context, *ORCHESTRATOR_MICRO_SERVICE_MENUS_Request) (*MicroServiceMenuResponseData, error)
	ORCHESTRATOR_MICRO_SERVICE_PROJECTS(context.Context, *ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request) (*MicroServiceProjectResponse, error)
	ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION(context.Context, *MiddlewareListRequest) (*emptypb.Empty, error)
	ORCHESTRATOR_MIDDLEWARE_DAILY(context.Context, *MiddlewareListRequest) (*emptypb.Empty, error)
	ORCHESTRATOR_MIDDLEWARE_FETCH(context.Context, *ORCHESTRATOR_MIDDLEWARE_FETCH_Request) (*MiddlewareFetchResponse, error)
	ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE(context.Context, *ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request) (*MiddlewareResourceFetchResponse, error)
	ORCHESTRATOR_MIDDLEWARE_LIST(context.Context, *MiddlewareListRequest) (*MiddlewareListResponse, error)
	ORCHESTRATOR_MIGRATION_LOG(context.Context, *ORCHESTRATOR_MIGRATION_LOG_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_NODELABEL_LIST(context.Context, *ScheduleLabelListRequest) (*ScheduleLabelListResponse, error)
	ORCHESTRATOR_NODELABEL_SET(context.Context, *ScheduleLabelSetRequest) (*ScheduleLabelSetResponse, error)
	ORCHESTRATOR_ORG_JOB_LOG(context.Context, *ORCHESTRATOR_ORG_JOB_LOG_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_PROJECT_RUNTIME_COUNT(context.Context, *ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIMES_BATCH_SCALE(context.Context, *ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_BATCH_SERVICES(context.Context, *ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_BULK_GET_STATUS(context.Context, *ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_CREATE(context.Context, *ORCHESTRATOR_RUNTIME_CREATE_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_DELETE(context.Context, *ORCHESTRATOR_RUNTIME_DELETE_Request) (*RuntimeDeleteResponse, error)
	ORCHESTRATOR_RUNTIME_DEPLOY_LOG(context.Context, *ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_DOMAIN_GET(context.Context, *DomainListRequest) (*DomainListResponse, error)
	ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE(context.Context, *DomainUpdateRequest) (*DomainUpdateResponse, error)
	ORCHESTRATOR_RUNTIME_GROUP_BY_APPS(context.Context, *ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_INSPECT(context.Context, *RuntimeInspectRequest) (*RuntimeInspectResponse, error)
	ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP(context.Context, *ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_KILLPOD(context.Context, *RuntimeKillPodRequest) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES(context.Context, *ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_REDEPLOY(context.Context, *ORCHESTRATOR_RUNTIME_REDEPLOY_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION(context.Context, *ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_RELEASE_CREATE(context.Context, *RuntimeReleaseCreateRequest) (*RuntimeReleaseCreatePipelineResponse, error)
	ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION(context.Context, *RuntimeReleaseCreateRequest) (*RuntimeCreateResponse, error)
	ORCHESTRATOR_RUNTIME_ROLLBACK(context.Context, *ORCHESTRATOR_RUNTIME_ROLLBACK_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION(context.Context, *ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_RUNTIME_SEARCH(context.Context, *ORCHESTRATOR_RUNTIME_SEARCH_Request) (*emptypb.Empty, error)
	ORCHESTRATOR_SERVICE_INSTANCE_LIST(context.Context, *ContainerListRequest) (*ContainerListResponse, error)
	ORCHESTRATOR_SERVICE_POD_LIST(context.Context, *PodListRequest) (*PodListResponse, error)
	ORCHESTRATOR_TERMINAL(context.Context, *ORCHESTRATOR_TERMINAL_Request) (*emptypb.Empty, error)
}

// UnimplementedOrchestratorServer should be embedded to have forward compatible implementations.
type UnimplementedOrchestratorServer struct {
}

func (*UnimplementedOrchestratorServer) ADDON_METRICS_HISTOGRAM(context.Context, *ADDON_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADDON_METRICS_HISTOGRAM not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDONS_SCALE(context.Context, *ORCHESTRATOR_ADDONS_SCALE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDONS_SCALE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_AVAILABLE(context.Context, *AddonAvailableRequest) (*AddonAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_AVAILABLE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_CREATE(context.Context, *AddonDirectCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_CREATE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_CREATE_CUSTOM(context.Context, *CustomAddonCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_CREATE_CUSTOM not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_CUSTOM(context.Context, *ORCHESTRATOR_ADDON_CUSTOM_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_CUSTOM not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_DELETE(context.Context, *ORCHESTRATOR_ADDON_DELETE_Request) (*AddonFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_DELETE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_EXPORT(context.Context, *ORCHESTRATOR_ADDON_EXPORT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_EXPORT not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_EXTENSION(context.Context, *ORCHESTRATOR_ADDON_EXTENSION_Request) (*AddonExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_EXTENSION not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_FETCH(context.Context, *ORCHESTRATOR_ADDON_FETCH_Request) (*AddonFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_FETCH not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_IMPORT(context.Context, *ORCHESTRATOR_ADDON_IMPORT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_IMPORT not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_LIST(context.Context, *AddonListRequest) (*AddonListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_LIST not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_LOGS(context.Context, *ORCHESTRATOR_ADDON_LOGS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_LOGS not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_MENU(context.Context, *ORCHESTRATOR_ADDON_MENU_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_MENU not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_REFERENCES(context.Context, *ORCHESTRATOR_ADDON_REFERENCES_Request) (*AddonReferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_REFERENCES not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_TENANT_CREATE(context.Context, *AddonTenantCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_TENANT_CREATE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ADDON_UPDATE_CUSTOM(context.Context, *CustomAddonUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ADDON_UPDATE_CUSTOM not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_CLUSTER_INSTANCES_USAGE(context.Context, *ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_CLUSTER_INSTANCES_USAGE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_ADDONS(context.Context, *ORCHESTRATOR_DEPLOYMENT_ADDONS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_ADDONS not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_APPROVE(context.Context, *DeploymentApproveRequest) (*DeploymentApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_APPROVE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_CANCEL(context.Context, *DeploymentCancelRequest) (*DeploymentCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_CANCEL not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_DOMAINS(context.Context, *ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_DOMAINS not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_LIST(context.Context, *DeploymentListRequest) (*DeploymentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_LIST not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED(context.Context, *ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request) (*DeploymentDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL(context.Context, *ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request) (*DeploymentDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL(context.Context, *ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request) (*DeploymentDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL(context.Context, *ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE(context.Context, *ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY(context.Context, *ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_ORDER_GET(context.Context, *ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_ORDER_GET not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_ORDER_LIST(context.Context, *ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_ORDER_LIST not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL(context.Context, *ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS(context.Context, *ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_DEPLOYMENT_SERVICES(context.Context, *ORCHESTRATOR_DEPLOYMENT_SERVICES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_DEPLOYMENT_SERVICES not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES(context.Context, *AppWorkspaceReleasesGetRequest) (*AppWorkspaceReleasesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_INSTANCES_USAGE(context.Context, *ORCHESTRATOR_INSTANCES_USAGE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_INSTANCES_USAGE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_MICRO_SERVICE_MENUS(context.Context, *ORCHESTRATOR_MICRO_SERVICE_MENUS_Request) (*MicroServiceMenuResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_MICRO_SERVICE_MENUS not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_MICRO_SERVICE_PROJECTS(context.Context, *ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request) (*MicroServiceProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_MICRO_SERVICE_PROJECTS not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION(context.Context, *MiddlewareListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_MIDDLEWARE_DAILY(context.Context, *MiddlewareListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_MIDDLEWARE_DAILY not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_MIDDLEWARE_FETCH(context.Context, *ORCHESTRATOR_MIDDLEWARE_FETCH_Request) (*MiddlewareFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_MIDDLEWARE_FETCH not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE(context.Context, *ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request) (*MiddlewareResourceFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_MIDDLEWARE_LIST(context.Context, *MiddlewareListRequest) (*MiddlewareListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_MIDDLEWARE_LIST not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_MIGRATION_LOG(context.Context, *ORCHESTRATOR_MIGRATION_LOG_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_MIGRATION_LOG not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_NODELABEL_LIST(context.Context, *ScheduleLabelListRequest) (*ScheduleLabelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_NODELABEL_LIST not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_NODELABEL_SET(context.Context, *ScheduleLabelSetRequest) (*ScheduleLabelSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_NODELABEL_SET not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_ORG_JOB_LOG(context.Context, *ORCHESTRATOR_ORG_JOB_LOG_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_ORG_JOB_LOG not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_PROJECT_RUNTIME_COUNT(context.Context, *ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_PROJECT_RUNTIME_COUNT not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIMES_BATCH_SCALE(context.Context, *ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIMES_BATCH_SCALE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_BATCH_SERVICES(context.Context, *ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_BATCH_SERVICES not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_BULK_GET_STATUS(context.Context, *ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_BULK_GET_STATUS not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_CREATE(context.Context, *ORCHESTRATOR_RUNTIME_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_CREATE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_DELETE(context.Context, *ORCHESTRATOR_RUNTIME_DELETE_Request) (*RuntimeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_DELETE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_DEPLOY_LOG(context.Context, *ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_DEPLOY_LOG not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_DOMAIN_GET(context.Context, *DomainListRequest) (*DomainListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_DOMAIN_GET not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE(context.Context, *DomainUpdateRequest) (*DomainUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_GROUP_BY_APPS(context.Context, *ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_GROUP_BY_APPS not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_INSPECT(context.Context, *RuntimeInspectRequest) (*RuntimeInspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_INSPECT not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP(context.Context, *ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_KILLPOD(context.Context, *RuntimeKillPodRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_KILLPOD not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES(context.Context, *ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_REDEPLOY(context.Context, *ORCHESTRATOR_RUNTIME_REDEPLOY_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_REDEPLOY not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION(context.Context, *ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_RELEASE_CREATE(context.Context, *RuntimeReleaseCreateRequest) (*RuntimeReleaseCreatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_RELEASE_CREATE not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION(context.Context, *RuntimeReleaseCreateRequest) (*RuntimeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_ROLLBACK(context.Context, *ORCHESTRATOR_RUNTIME_ROLLBACK_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_ROLLBACK not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION(context.Context, *ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_RUNTIME_SEARCH(context.Context, *ORCHESTRATOR_RUNTIME_SEARCH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_RUNTIME_SEARCH not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_SERVICE_INSTANCE_LIST(context.Context, *ContainerListRequest) (*ContainerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_SERVICE_INSTANCE_LIST not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_SERVICE_POD_LIST(context.Context, *PodListRequest) (*PodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_SERVICE_POD_LIST not implemented")
}
func (*UnimplementedOrchestratorServer) ORCHESTRATOR_TERMINAL(context.Context, *ORCHESTRATOR_TERMINAL_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ORCHESTRATOR_TERMINAL not implemented")
}

func RegisterOrchestratorServer(s grpc1.ServiceRegistrar, srv OrchestratorServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Orchestrator_serviceDesc(srv, opts...), srv)
}

var _Orchestrator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.orchestrator.orchestrator",
	HandlerType: (*OrchestratorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "orchestrator.proto",
}

func _get_Orchestrator_serviceDesc(srv OrchestratorServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Orchestrator_ADDON_METRICS_HISTOGRAM_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ADDON_METRICS_HISTOGRAM(ctx, req.(*ADDON_METRICS_HISTOGRAM_Request))
	}
	var _Orchestrator_ADDON_METRICS_HISTOGRAM_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ADDON_METRICS_HISTOGRAM_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ADDON_METRICS_HISTOGRAM", srv)
		_Orchestrator_ADDON_METRICS_HISTOGRAM_Handler = h.Interceptor(_Orchestrator_ADDON_METRICS_HISTOGRAM_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDONS_SCALE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDONS_SCALE(ctx, req.(*ORCHESTRATOR_ADDONS_SCALE_Request))
	}
	var _Orchestrator_ORCHESTRATOR_ADDONS_SCALE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDONS_SCALE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDONS_SCALE", srv)
		_Orchestrator_ORCHESTRATOR_ADDONS_SCALE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDONS_SCALE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_AVAILABLE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_AVAILABLE(ctx, req.(*AddonAvailableRequest))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_AVAILABLE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_AVAILABLE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_AVAILABLE", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_AVAILABLE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_AVAILABLE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_CREATE(ctx, req.(*AddonDirectCreateRequest))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_CREATE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_CREATE", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_CREATE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_CREATE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_CREATE_CUSTOM_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_CREATE_CUSTOM(ctx, req.(*CustomAddonCreateRequest))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_CREATE_CUSTOM_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_CREATE_CUSTOM_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_CREATE_CUSTOM", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_CREATE_CUSTOM_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_CREATE_CUSTOM_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_CUSTOM_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_CUSTOM(ctx, req.(*ORCHESTRATOR_ADDON_CUSTOM_Request))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_CUSTOM_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_CUSTOM_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_CUSTOM", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_CUSTOM_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_CUSTOM_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_DELETE(ctx, req.(*ORCHESTRATOR_ADDON_DELETE_Request))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_DELETE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_DELETE", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_DELETE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_DELETE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_EXPORT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_EXPORT(ctx, req.(*ORCHESTRATOR_ADDON_EXPORT_Request))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_EXPORT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_EXPORT_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_EXPORT", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_EXPORT_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_EXPORT_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_EXTENSION_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_EXTENSION(ctx, req.(*ORCHESTRATOR_ADDON_EXTENSION_Request))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_EXTENSION_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_EXTENSION_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_EXTENSION", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_EXTENSION_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_EXTENSION_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_FETCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_FETCH(ctx, req.(*ORCHESTRATOR_ADDON_FETCH_Request))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_FETCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_FETCH_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_FETCH", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_FETCH_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_FETCH_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_IMPORT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_IMPORT(ctx, req.(*ORCHESTRATOR_ADDON_IMPORT_Request))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_IMPORT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_IMPORT_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_IMPORT", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_IMPORT_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_IMPORT_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_LIST(ctx, req.(*AddonListRequest))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_LIST_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_LIST", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_LIST_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_LIST_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_LOGS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_LOGS(ctx, req.(*ORCHESTRATOR_ADDON_LOGS_Request))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_LOGS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_LOGS_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_LOGS", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_LOGS_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_LOGS_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_MENU_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_MENU(ctx, req.(*ORCHESTRATOR_ADDON_MENU_Request))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_MENU_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_MENU_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_MENU", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_MENU_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_MENU_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_REFERENCES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_REFERENCES(ctx, req.(*ORCHESTRATOR_ADDON_REFERENCES_Request))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_REFERENCES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_REFERENCES_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_REFERENCES", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_REFERENCES_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_REFERENCES_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_TENANT_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_TENANT_CREATE(ctx, req.(*AddonTenantCreateRequest))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_TENANT_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_TENANT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_TENANT_CREATE", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_TENANT_CREATE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_TENANT_CREATE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ADDON_UPDATE_CUSTOM_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ADDON_UPDATE_CUSTOM(ctx, req.(*CustomAddonUpdateRequest))
	}
	var _Orchestrator_ORCHESTRATOR_ADDON_UPDATE_CUSTOM_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ADDON_UPDATE_CUSTOM_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ADDON_UPDATE_CUSTOM", srv)
		_Orchestrator_ORCHESTRATOR_ADDON_UPDATE_CUSTOM_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ADDON_UPDATE_CUSTOM_Handler)
	}

	_Orchestrator_ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_CLUSTER_INSTANCES_USAGE(ctx, req.(*ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request))
	}
	var _Orchestrator_ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_CLUSTER_INSTANCES_USAGE", srv)
		_Orchestrator_ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ADDONS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_ADDONS(ctx, req.(*ORCHESTRATOR_DEPLOYMENT_ADDONS_Request))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ADDONS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ADDONS_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_ADDONS", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ADDONS_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ADDONS_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_APPROVE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_APPROVE(ctx, req.(*DeploymentApproveRequest))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_APPROVE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_APPROVE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_APPROVE", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_APPROVE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_APPROVE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_CANCEL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_CANCEL(ctx, req.(*DeploymentCancelRequest))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_CANCEL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_CANCEL_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_CANCEL", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_CANCEL_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_CANCEL_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_DOMAINS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_DOMAINS(ctx, req.(*ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_DOMAINS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_DOMAINS_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_DOMAINS", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_DOMAINS_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_DOMAINS_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_LIST(ctx, req.(*DeploymentListRequest))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_LIST", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED(ctx, req.(*ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL(ctx, req.(*ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL(ctx, req.(*ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL(ctx, req.(*ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE(ctx, req.(*ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY(ctx, req.(*ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_ORDER_GET(ctx, req.(*ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_GET_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_ORDER_GET", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_ORDER_LIST(ctx, req.(*ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_ORDER_LIST", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL(ctx, req.(*ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS(ctx, req.(*ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Handler)
	}

	_Orchestrator_ORCHESTRATOR_DEPLOYMENT_SERVICES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_DEPLOYMENT_SERVICES(ctx, req.(*ORCHESTRATOR_DEPLOYMENT_SERVICES_Request))
	}
	var _Orchestrator_ORCHESTRATOR_DEPLOYMENT_SERVICES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_SERVICES_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_DEPLOYMENT_SERVICES", srv)
		_Orchestrator_ORCHESTRATOR_DEPLOYMENT_SERVICES_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_DEPLOYMENT_SERVICES_Handler)
	}

	_Orchestrator_ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES(ctx, req.(*AppWorkspaceReleasesGetRequest))
	}
	var _Orchestrator_ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES", srv)
		_Orchestrator_ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES_Handler)
	}

	_Orchestrator_ORCHESTRATOR_INSTANCES_USAGE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_INSTANCES_USAGE(ctx, req.(*ORCHESTRATOR_INSTANCES_USAGE_Request))
	}
	var _Orchestrator_ORCHESTRATOR_INSTANCES_USAGE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_INSTANCES_USAGE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_INSTANCES_USAGE", srv)
		_Orchestrator_ORCHESTRATOR_INSTANCES_USAGE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_INSTANCES_USAGE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_MICRO_SERVICE_MENUS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_MICRO_SERVICE_MENUS(ctx, req.(*ORCHESTRATOR_MICRO_SERVICE_MENUS_Request))
	}
	var _Orchestrator_ORCHESTRATOR_MICRO_SERVICE_MENUS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_MICRO_SERVICE_MENUS_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_MICRO_SERVICE_MENUS", srv)
		_Orchestrator_ORCHESTRATOR_MICRO_SERVICE_MENUS_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_MICRO_SERVICE_MENUS_Handler)
	}

	_Orchestrator_ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_MICRO_SERVICE_PROJECTS(ctx, req.(*ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request))
	}
	var _Orchestrator_ORCHESTRATOR_MICRO_SERVICE_PROJECTS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_MICRO_SERVICE_PROJECTS_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_MICRO_SERVICE_PROJECTS", srv)
		_Orchestrator_ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Handler)
	}

	_Orchestrator_ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION(ctx, req.(*MiddlewareListRequest))
	}
	var _Orchestrator_ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION", srv)
		_Orchestrator_ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION_Handler)
	}

	_Orchestrator_ORCHESTRATOR_MIDDLEWARE_DAILY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_MIDDLEWARE_DAILY(ctx, req.(*MiddlewareListRequest))
	}
	var _Orchestrator_ORCHESTRATOR_MIDDLEWARE_DAILY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_MIDDLEWARE_DAILY_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_MIDDLEWARE_DAILY", srv)
		_Orchestrator_ORCHESTRATOR_MIDDLEWARE_DAILY_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_MIDDLEWARE_DAILY_Handler)
	}

	_Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_MIDDLEWARE_FETCH(ctx, req.(*ORCHESTRATOR_MIDDLEWARE_FETCH_Request))
	}
	var _Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_MIDDLEWARE_FETCH", srv)
		_Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_Handler)
	}

	_Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE(ctx, req.(*ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request))
	}
	var _Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE", srv)
		_Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_MIDDLEWARE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_MIDDLEWARE_LIST(ctx, req.(*MiddlewareListRequest))
	}
	var _Orchestrator_ORCHESTRATOR_MIDDLEWARE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_MIDDLEWARE_LIST_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_MIDDLEWARE_LIST", srv)
		_Orchestrator_ORCHESTRATOR_MIDDLEWARE_LIST_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_MIDDLEWARE_LIST_Handler)
	}

	_Orchestrator_ORCHESTRATOR_MIGRATION_LOG_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_MIGRATION_LOG(ctx, req.(*ORCHESTRATOR_MIGRATION_LOG_Request))
	}
	var _Orchestrator_ORCHESTRATOR_MIGRATION_LOG_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_MIGRATION_LOG_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_MIGRATION_LOG", srv)
		_Orchestrator_ORCHESTRATOR_MIGRATION_LOG_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_MIGRATION_LOG_Handler)
	}

	_Orchestrator_ORCHESTRATOR_NODELABEL_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_NODELABEL_LIST(ctx, req.(*ScheduleLabelListRequest))
	}
	var _Orchestrator_ORCHESTRATOR_NODELABEL_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_NODELABEL_LIST_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_NODELABEL_LIST", srv)
		_Orchestrator_ORCHESTRATOR_NODELABEL_LIST_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_NODELABEL_LIST_Handler)
	}

	_Orchestrator_ORCHESTRATOR_NODELABEL_SET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_NODELABEL_SET(ctx, req.(*ScheduleLabelSetRequest))
	}
	var _Orchestrator_ORCHESTRATOR_NODELABEL_SET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_NODELABEL_SET_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_NODELABEL_SET", srv)
		_Orchestrator_ORCHESTRATOR_NODELABEL_SET_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_NODELABEL_SET_Handler)
	}

	_Orchestrator_ORCHESTRATOR_ORG_JOB_LOG_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_ORG_JOB_LOG(ctx, req.(*ORCHESTRATOR_ORG_JOB_LOG_Request))
	}
	var _Orchestrator_ORCHESTRATOR_ORG_JOB_LOG_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_ORG_JOB_LOG_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_ORG_JOB_LOG", srv)
		_Orchestrator_ORCHESTRATOR_ORG_JOB_LOG_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_ORG_JOB_LOG_Handler)
	}

	_Orchestrator_ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_PROJECT_RUNTIME_COUNT(ctx, req.(*ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request))
	}
	var _Orchestrator_ORCHESTRATOR_PROJECT_RUNTIME_COUNT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_PROJECT_RUNTIME_COUNT_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_PROJECT_RUNTIME_COUNT", srv)
		_Orchestrator_ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIMES_BATCH_SCALE(ctx, req.(*ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIMES_BATCH_SCALE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIMES_BATCH_SCALE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIMES_BATCH_SCALE", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_BATCH_SERVICES(ctx, req.(*ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_BATCH_SERVICES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_BATCH_SERVICES_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_BATCH_SERVICES", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_BULK_GET_STATUS(ctx, req.(*ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_BULK_GET_STATUS", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_CREATE(ctx, req.(*ORCHESTRATOR_RUNTIME_CREATE_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_CREATE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_CREATE", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_CREATE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_CREATE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_DELETE(ctx, req.(*ORCHESTRATOR_RUNTIME_DELETE_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_DELETE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_DELETE", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_DELETE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_DELETE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_DEPLOY_LOG(ctx, req.(*ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_DEPLOY_LOG_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_DEPLOY_LOG_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_DEPLOY_LOG", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_DOMAIN_GET(ctx, req.(*DomainListRequest))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_GET_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_DOMAIN_GET", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_GET_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_GET_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE(ctx, req.(*DomainUpdateRequest))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_GROUP_BY_APPS(ctx, req.(*ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_GROUP_BY_APPS", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_INSPECT(ctx, req.(*RuntimeInspectRequest))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_INSPECT", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP(ctx, req.(*ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_KILLPOD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_KILLPOD(ctx, req.(*RuntimeKillPodRequest))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_KILLPOD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_KILLPOD_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_KILLPOD", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_KILLPOD_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_KILLPOD_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES(ctx, req.(*ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_REDEPLOY(ctx, req.(*ORCHESTRATOR_RUNTIME_REDEPLOY_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_REDEPLOY", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION(ctx, req.(*ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_RELEASE_CREATE(ctx, req.(*RuntimeReleaseCreateRequest))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_RELEASE_CREATE", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION(ctx, req.(*RuntimeReleaseCreateRequest))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_ROLLBACK(ctx, req.(*ORCHESTRATOR_RUNTIME_ROLLBACK_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_ROLLBACK", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION(ctx, req.(*ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Handler)
	}

	_Orchestrator_ORCHESTRATOR_RUNTIME_SEARCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_RUNTIME_SEARCH(ctx, req.(*ORCHESTRATOR_RUNTIME_SEARCH_Request))
	}
	var _Orchestrator_ORCHESTRATOR_RUNTIME_SEARCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_RUNTIME_SEARCH_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_RUNTIME_SEARCH", srv)
		_Orchestrator_ORCHESTRATOR_RUNTIME_SEARCH_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_RUNTIME_SEARCH_Handler)
	}

	_Orchestrator_ORCHESTRATOR_SERVICE_INSTANCE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_SERVICE_INSTANCE_LIST(ctx, req.(*ContainerListRequest))
	}
	var _Orchestrator_ORCHESTRATOR_SERVICE_INSTANCE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_SERVICE_INSTANCE_LIST_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_SERVICE_INSTANCE_LIST", srv)
		_Orchestrator_ORCHESTRATOR_SERVICE_INSTANCE_LIST_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_SERVICE_INSTANCE_LIST_Handler)
	}

	_Orchestrator_ORCHESTRATOR_SERVICE_POD_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_SERVICE_POD_LIST(ctx, req.(*PodListRequest))
	}
	var _Orchestrator_ORCHESTRATOR_SERVICE_POD_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_SERVICE_POD_LIST_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_SERVICE_POD_LIST", srv)
		_Orchestrator_ORCHESTRATOR_SERVICE_POD_LIST_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_SERVICE_POD_LIST_Handler)
	}

	_Orchestrator_ORCHESTRATOR_TERMINAL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ORCHESTRATOR_TERMINAL(ctx, req.(*ORCHESTRATOR_TERMINAL_Request))
	}
	var _Orchestrator_ORCHESTRATOR_TERMINAL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Orchestrator_ORCHESTRATOR_TERMINAL_info = transport.NewServiceInfo("erda.openapiv1.orchestrator.orchestrator", "ORCHESTRATOR_TERMINAL", srv)
		_Orchestrator_ORCHESTRATOR_TERMINAL_Handler = h.Interceptor(_Orchestrator_ORCHESTRATOR_TERMINAL_Handler)
	}

	var serviceDesc = _Orchestrator_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ADDON_METRICS_HISTOGRAM",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ADDON_METRICS_HISTOGRAM_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ADDON_METRICS_HISTOGRAM(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ADDON_METRICS_HISTOGRAM_info)
				}
				if interceptor == nil {
					return _Orchestrator_ADDON_METRICS_HISTOGRAM_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ADDON_METRICS_HISTOGRAM",
				}
				return interceptor(ctx, in, info, _Orchestrator_ADDON_METRICS_HISTOGRAM_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDONS_SCALE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_ADDONS_SCALE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDONS_SCALE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDONS_SCALE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDONS_SCALE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDONS_SCALE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDONS_SCALE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_AVAILABLE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AddonAvailableRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_AVAILABLE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_AVAILABLE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_AVAILABLE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_AVAILABLE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_AVAILABLE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AddonDirectCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_CREATE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_CREATE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_CREATE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_CREATE_CUSTOM",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CustomAddonCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_CREATE_CUSTOM(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_CREATE_CUSTOM_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_CREATE_CUSTOM_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_CREATE_CUSTOM",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_CREATE_CUSTOM_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_CUSTOM",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_ADDON_CUSTOM_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_CUSTOM(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_CUSTOM_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_CUSTOM_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_CUSTOM",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_CUSTOM_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_ADDON_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_DELETE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_DELETE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_DELETE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_EXPORT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_ADDON_EXPORT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_EXPORT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_EXPORT_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_EXPORT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_EXPORT",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_EXPORT_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_EXTENSION",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_ADDON_EXTENSION_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_EXTENSION(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_EXTENSION_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_EXTENSION_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_EXTENSION",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_EXTENSION_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_FETCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_ADDON_FETCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_FETCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_FETCH_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_FETCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_FETCH",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_FETCH_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_IMPORT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_ADDON_IMPORT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_IMPORT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_IMPORT_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_IMPORT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_IMPORT",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_IMPORT_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AddonListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_LIST_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_LIST",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_LIST_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_LOGS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_ADDON_LOGS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_LOGS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_LOGS_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_LOGS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_LOGS",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_LOGS_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_MENU",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_ADDON_MENU_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_MENU(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_MENU_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_MENU_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_MENU",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_MENU_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_REFERENCES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_ADDON_REFERENCES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_REFERENCES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_REFERENCES_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_REFERENCES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_REFERENCES",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_REFERENCES_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_TENANT_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AddonTenantCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_TENANT_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_TENANT_CREATE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_TENANT_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_TENANT_CREATE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_TENANT_CREATE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ADDON_UPDATE_CUSTOM",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CustomAddonUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ADDON_UPDATE_CUSTOM(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ADDON_UPDATE_CUSTOM_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ADDON_UPDATE_CUSTOM_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ADDON_UPDATE_CUSTOM",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ADDON_UPDATE_CUSTOM_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_CLUSTER_INSTANCES_USAGE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_CLUSTER_INSTANCES_USAGE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_CLUSTER_INSTANCES_USAGE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_ADDONS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_DEPLOYMENT_ADDONS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_ADDONS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ADDONS_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ADDONS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ADDONS",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ADDONS_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_APPROVE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeploymentApproveRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_APPROVE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_APPROVE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_APPROVE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_APPROVE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_APPROVE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_CANCEL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeploymentCancelRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_CANCEL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_CANCEL_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_CANCEL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_CANCEL",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_CANCEL_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_DOMAINS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_DOMAINS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_DOMAINS_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_DOMAINS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_DOMAINS",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_DOMAINS_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeploymentListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_LIST",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_ORDER_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_ORDER_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_GET_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ORDER_GET",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_ORDER_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_ORDER_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ORDER_LIST",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_DEPLOYMENT_SERVICES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_DEPLOYMENT_SERVICES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_DEPLOYMENT_SERVICES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_SERVICES_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_DEPLOYMENT_SERVICES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_DEPLOYMENT_SERVICES",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_DEPLOYMENT_SERVICES_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(AppWorkspaceReleasesGetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_INSTANCES_USAGE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_INSTANCES_USAGE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_INSTANCES_USAGE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_INSTANCES_USAGE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_INSTANCES_USAGE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_INSTANCES_USAGE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_INSTANCES_USAGE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_MICRO_SERVICE_MENUS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_MICRO_SERVICE_MENUS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_MICRO_SERVICE_MENUS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_MICRO_SERVICE_MENUS_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_MICRO_SERVICE_MENUS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MICRO_SERVICE_MENUS",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_MICRO_SERVICE_MENUS_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_MICRO_SERVICE_PROJECTS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_MICRO_SERVICE_PROJECTS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_MICRO_SERVICE_PROJECTS_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MICRO_SERVICE_PROJECTS",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MiddlewareListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_MIDDLEWARE_DAILY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MiddlewareListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_MIDDLEWARE_DAILY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_MIDDLEWARE_DAILY_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_MIDDLEWARE_DAILY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MIDDLEWARE_DAILY",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_MIDDLEWARE_DAILY_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_MIDDLEWARE_FETCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_MIDDLEWARE_FETCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_MIDDLEWARE_FETCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MIDDLEWARE_FETCH",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_MIDDLEWARE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MiddlewareListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_MIDDLEWARE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_MIDDLEWARE_LIST_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_MIDDLEWARE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MIDDLEWARE_LIST",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_MIDDLEWARE_LIST_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_MIGRATION_LOG",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_MIGRATION_LOG_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_MIGRATION_LOG(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_MIGRATION_LOG_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_MIGRATION_LOG_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_MIGRATION_LOG",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_MIGRATION_LOG_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_NODELABEL_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ScheduleLabelListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_NODELABEL_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_NODELABEL_LIST_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_NODELABEL_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_NODELABEL_LIST",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_NODELABEL_LIST_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_NODELABEL_SET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ScheduleLabelSetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_NODELABEL_SET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_NODELABEL_SET_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_NODELABEL_SET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_NODELABEL_SET",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_NODELABEL_SET_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_ORG_JOB_LOG",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_ORG_JOB_LOG_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_ORG_JOB_LOG(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_ORG_JOB_LOG_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_ORG_JOB_LOG_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_ORG_JOB_LOG",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_ORG_JOB_LOG_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_PROJECT_RUNTIME_COUNT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_PROJECT_RUNTIME_COUNT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_PROJECT_RUNTIME_COUNT_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_PROJECT_RUNTIME_COUNT",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIMES_BATCH_SCALE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIMES_BATCH_SCALE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIMES_BATCH_SCALE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIMES_BATCH_SCALE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_BATCH_SERVICES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_BATCH_SERVICES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_BATCH_SERVICES_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_BATCH_SERVICES",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_BULK_GET_STATUS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_BULK_GET_STATUS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_BULK_GET_STATUS",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIME_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_CREATE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_CREATE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_CREATE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIME_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_DELETE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_DELETE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_DELETE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_DEPLOY_LOG",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_DEPLOY_LOG(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_DEPLOY_LOG_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_DEPLOY_LOG",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_DOMAIN_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DomainListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_DOMAIN_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_GET_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_DOMAIN_GET",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_GET_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DomainUpdateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_GROUP_BY_APPS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_GROUP_BY_APPS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_GROUP_BY_APPS",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_INSPECT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RuntimeInspectRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_INSPECT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_INSPECT",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_KILLPOD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RuntimeKillPodRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_KILLPOD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_KILLPOD_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_KILLPOD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_KILLPOD",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_KILLPOD_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_REDEPLOY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIME_REDEPLOY_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_REDEPLOY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_REDEPLOY",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_RELEASE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RuntimeReleaseCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_RELEASE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_RELEASE_CREATE",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(RuntimeReleaseCreateRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_ROLLBACK",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIME_ROLLBACK_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_ROLLBACK(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_ROLLBACK",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_RUNTIME_SEARCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_RUNTIME_SEARCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_RUNTIME_SEARCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_RUNTIME_SEARCH_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_RUNTIME_SEARCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_RUNTIME_SEARCH",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_RUNTIME_SEARCH_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_SERVICE_INSTANCE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ContainerListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_SERVICE_INSTANCE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_SERVICE_INSTANCE_LIST_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_SERVICE_INSTANCE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_SERVICE_INSTANCE_LIST",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_SERVICE_INSTANCE_LIST_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_SERVICE_POD_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PodListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_SERVICE_POD_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_SERVICE_POD_LIST_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_SERVICE_POD_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_SERVICE_POD_LIST",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_SERVICE_POD_LIST_Handler)
			},
		},
		{
			MethodName: "ORCHESTRATOR_TERMINAL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ORCHESTRATOR_TERMINAL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(OrchestratorServer).ORCHESTRATOR_TERMINAL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Orchestrator_ORCHESTRATOR_TERMINAL_info)
				}
				if interceptor == nil {
					return _Orchestrator_ORCHESTRATOR_TERMINAL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.orchestrator.orchestrator/ORCHESTRATOR_TERMINAL",
				}
				return interceptor(ctx, in, info, _Orchestrator_ORCHESTRATOR_TERMINAL_Handler)
			},
		},
	}
	return &serviceDesc
}
