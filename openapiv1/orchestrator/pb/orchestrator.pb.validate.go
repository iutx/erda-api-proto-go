// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: orchestrator.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ADDON_METRICS_HISTOGRAM_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ADDON_METRICS_HISTOGRAM_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ADDON_METRICS_HISTOGRAM_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ADDON_METRICS_HISTOGRAM_RequestMultiError, or nil if none found.
func (m *ADDON_METRICS_HISTOGRAM_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ADDON_METRICS_HISTOGRAM_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return ADDON_METRICS_HISTOGRAM_RequestMultiError(errors)
	}

	return nil
}

// ADDON_METRICS_HISTOGRAM_RequestMultiError is an error wrapping multiple
// validation errors returned by ADDON_METRICS_HISTOGRAM_Request.ValidateAll()
// if the designated constraints aren't met.
type ADDON_METRICS_HISTOGRAM_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ADDON_METRICS_HISTOGRAM_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ADDON_METRICS_HISTOGRAM_RequestMultiError) AllErrors() []error { return m }

// ADDON_METRICS_HISTOGRAM_RequestValidationError is the validation error
// returned by ADDON_METRICS_HISTOGRAM_Request.Validate if the designated
// constraints aren't met.
type ADDON_METRICS_HISTOGRAM_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ADDON_METRICS_HISTOGRAM_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ADDON_METRICS_HISTOGRAM_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ADDON_METRICS_HISTOGRAM_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ADDON_METRICS_HISTOGRAM_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ADDON_METRICS_HISTOGRAM_RequestValidationError) ErrorName() string {
	return "ADDON_METRICS_HISTOGRAM_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ADDON_METRICS_HISTOGRAM_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sADDON_METRICS_HISTOGRAM_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ADDON_METRICS_HISTOGRAM_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ADDON_METRICS_HISTOGRAM_RequestValidationError{}

// Validate checks the field values on AddonAvailableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonAvailableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonAvailableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonAvailableRequestMultiError, or nil if none found.
func (m *AddonAvailableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonAvailableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for Workspace

	if len(errors) > 0 {
		return AddonAvailableRequestMultiError(errors)
	}

	return nil
}

// AddonAvailableRequestMultiError is an error wrapping multiple validation
// errors returned by AddonAvailableRequest.ValidateAll() if the designated
// constraints aren't met.
type AddonAvailableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonAvailableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonAvailableRequestMultiError) AllErrors() []error { return m }

// AddonAvailableRequestValidationError is the validation error returned by
// AddonAvailableRequest.Validate if the designated constraints aren't met.
type AddonAvailableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonAvailableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonAvailableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonAvailableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonAvailableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonAvailableRequestValidationError) ErrorName() string {
	return "AddonAvailableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddonAvailableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonAvailableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonAvailableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonAvailableRequestValidationError{}

// Validate checks the field values on AddonAvailableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonAvailableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonAvailableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonAvailableResponseMultiError, or nil if none found.
func (m *AddonAvailableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonAvailableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddonAvailableResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddonAvailableResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddonAvailableResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddonAvailableResponseMultiError(errors)
	}

	return nil
}

// AddonAvailableResponseMultiError is an error wrapping multiple validation
// errors returned by AddonAvailableResponse.ValidateAll() if the designated
// constraints aren't met.
type AddonAvailableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonAvailableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonAvailableResponseMultiError) AllErrors() []error { return m }

// AddonAvailableResponseValidationError is the validation error returned by
// AddonAvailableResponse.Validate if the designated constraints aren't met.
type AddonAvailableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonAvailableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonAvailableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonAvailableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonAvailableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonAvailableResponseValidationError) ErrorName() string {
	return "AddonAvailableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddonAvailableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonAvailableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonAvailableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonAvailableResponseValidationError{}

// Validate checks the field values on AddonDirectCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonDirectCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonDirectCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonDirectCreateRequestMultiError, or nil if none found.
func (m *AddonDirectCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonDirectCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ApplicationID

	// no validation rules for Workspace

	// no validation rules for Operator

	// no validation rules for ShareScope

	{
		sorted_keys := make([]string, len(m.GetAddons()))
		i := 0
		for key := range m.GetAddons() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAddons()[key]
			_ = val

			// no validation rules for Addons[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AddonDirectCreateRequestValidationError{
							field:  fmt.Sprintf("Addons[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AddonDirectCreateRequestValidationError{
							field:  fmt.Sprintf("Addons[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AddonDirectCreateRequestValidationError{
						field:  fmt.Sprintf("Addons[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return AddonDirectCreateRequestMultiError(errors)
	}

	return nil
}

// AddonDirectCreateRequestMultiError is an error wrapping multiple validation
// errors returned by AddonDirectCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type AddonDirectCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonDirectCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonDirectCreateRequestMultiError) AllErrors() []error { return m }

// AddonDirectCreateRequestValidationError is the validation error returned by
// AddonDirectCreateRequest.Validate if the designated constraints aren't met.
type AddonDirectCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonDirectCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonDirectCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonDirectCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonDirectCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonDirectCreateRequestValidationError) ErrorName() string {
	return "AddonDirectCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddonDirectCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonDirectCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonDirectCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonDirectCreateRequestValidationError{}

// Validate checks the field values on AddonExtensionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonExtensionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonExtensionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonExtensionResponseMultiError, or nil if none found.
func (m *AddonExtensionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonExtensionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddonExtensionResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddonExtensionResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddonExtensionResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddonExtensionResponseMultiError(errors)
	}

	return nil
}

// AddonExtensionResponseMultiError is an error wrapping multiple validation
// errors returned by AddonExtensionResponse.ValidateAll() if the designated
// constraints aren't met.
type AddonExtensionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonExtensionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonExtensionResponseMultiError) AllErrors() []error { return m }

// AddonExtensionResponseValidationError is the validation error returned by
// AddonExtensionResponse.Validate if the designated constraints aren't met.
type AddonExtensionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonExtensionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonExtensionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonExtensionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonExtensionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonExtensionResponseValidationError) ErrorName() string {
	return "AddonExtensionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddonExtensionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonExtensionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonExtensionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonExtensionResponseValidationError{}

// Validate checks the field values on AddonFetchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonFetchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonFetchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonFetchResponseMultiError, or nil if none found.
func (m *AddonFetchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonFetchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddonFetchResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddonFetchResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddonFetchResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddonFetchResponseMultiError(errors)
	}

	return nil
}

// AddonFetchResponseMultiError is an error wrapping multiple validation errors
// returned by AddonFetchResponse.ValidateAll() if the designated constraints
// aren't met.
type AddonFetchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonFetchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonFetchResponseMultiError) AllErrors() []error { return m }

// AddonFetchResponseValidationError is the validation error returned by
// AddonFetchResponse.Validate if the designated constraints aren't met.
type AddonFetchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonFetchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonFetchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonFetchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonFetchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonFetchResponseValidationError) ErrorName() string {
	return "AddonFetchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddonFetchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonFetchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonFetchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonFetchResponseValidationError{}

// Validate checks the field values on AddonFetchResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonFetchResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonFetchResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonFetchResponseDataMultiError, or nil if none found.
func (m *AddonFetchResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonFetchResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Tag

	// no validation rules for AddonName

	// no validation rules for AddonDisplayName

	// no validation rules for Desc

	// no validation rules for LogoURL

	// no validation rules for Plan

	// no validation rules for Version

	// no validation rules for Category

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AddonFetchResponseDataValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AddonFetchResponseDataValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AddonFetchResponseDataValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for ShareScope

	// no validation rules for Cluster

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for Workspace

	// no validation rules for Status

	// no validation rules for RealInstanceID

	// no validation rules for Reference

	// no validation rules for AttachCount

	// no validation rules for Platform

	// no validation rules for PlatformServiceType

	// no validation rules for CanDel

	// no validation rules for TerminusKey

	// no validation rules for ConsoleUrl

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddonFetchResponseDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddonFetchResponseDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddonFetchResponseDataValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddonFetchResponseDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddonFetchResponseDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddonFetchResponseDataValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RecordID

	// no validation rules for CustomAddonType

	// no validation rules for TenantOwner

	// no validation rules for IsInsideAddon

	if len(errors) > 0 {
		return AddonFetchResponseDataMultiError(errors)
	}

	return nil
}

// AddonFetchResponseDataMultiError is an error wrapping multiple validation
// errors returned by AddonFetchResponseData.ValidateAll() if the designated
// constraints aren't met.
type AddonFetchResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonFetchResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonFetchResponseDataMultiError) AllErrors() []error { return m }

// AddonFetchResponseDataValidationError is the validation error returned by
// AddonFetchResponseData.Validate if the designated constraints aren't met.
type AddonFetchResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonFetchResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonFetchResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonFetchResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonFetchResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonFetchResponseDataValidationError) ErrorName() string {
	return "AddonFetchResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e AddonFetchResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonFetchResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonFetchResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonFetchResponseDataValidationError{}

// Validate checks the field values on AddonListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddonListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonListRequestMultiError, or nil if none found.
func (m *AddonListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Value

	if len(errors) > 0 {
		return AddonListRequestMultiError(errors)
	}

	return nil
}

// AddonListRequestMultiError is an error wrapping multiple validation errors
// returned by AddonListRequest.ValidateAll() if the designated constraints
// aren't met.
type AddonListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonListRequestMultiError) AllErrors() []error { return m }

// AddonListRequestValidationError is the validation error returned by
// AddonListRequest.Validate if the designated constraints aren't met.
type AddonListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonListRequestValidationError) ErrorName() string { return "AddonListRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddonListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonListRequestValidationError{}

// Validate checks the field values on AddonListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddonListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonListResponseMultiError, or nil if none found.
func (m *AddonListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddonListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddonListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddonListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddonListResponseMultiError(errors)
	}

	return nil
}

// AddonListResponseMultiError is an error wrapping multiple validation errors
// returned by AddonListResponse.ValidateAll() if the designated constraints
// aren't met.
type AddonListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonListResponseMultiError) AllErrors() []error { return m }

// AddonListResponseValidationError is the validation error returned by
// AddonListResponse.Validate if the designated constraints aren't met.
type AddonListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonListResponseValidationError) ErrorName() string {
	return "AddonListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddonListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonListResponseValidationError{}

// Validate checks the field values on AddonReferenceInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonReferenceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonReferenceInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonReferenceInfoMultiError, or nil if none found.
func (m *AddonReferenceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonReferenceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgID

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for AppID

	// no validation rules for AppName

	// no validation rules for RuntimeID

	// no validation rules for RuntimeName

	if len(errors) > 0 {
		return AddonReferenceInfoMultiError(errors)
	}

	return nil
}

// AddonReferenceInfoMultiError is an error wrapping multiple validation errors
// returned by AddonReferenceInfo.ValidateAll() if the designated constraints
// aren't met.
type AddonReferenceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonReferenceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonReferenceInfoMultiError) AllErrors() []error { return m }

// AddonReferenceInfoValidationError is the validation error returned by
// AddonReferenceInfo.Validate if the designated constraints aren't met.
type AddonReferenceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonReferenceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonReferenceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonReferenceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonReferenceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonReferenceInfoValidationError) ErrorName() string {
	return "AddonReferenceInfoValidationError"
}

// Error satisfies the builtin error interface
func (e AddonReferenceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonReferenceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonReferenceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonReferenceInfoValidationError{}

// Validate checks the field values on AddonReferencesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonReferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonReferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonReferencesResponseMultiError, or nil if none found.
func (m *AddonReferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonReferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddonReferencesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddonReferencesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddonReferencesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddonReferencesResponseMultiError(errors)
	}

	return nil
}

// AddonReferencesResponseMultiError is an error wrapping multiple validation
// errors returned by AddonReferencesResponse.ValidateAll() if the designated
// constraints aren't met.
type AddonReferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonReferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonReferencesResponseMultiError) AllErrors() []error { return m }

// AddonReferencesResponseValidationError is the validation error returned by
// AddonReferencesResponse.Validate if the designated constraints aren't met.
type AddonReferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonReferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonReferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonReferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonReferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonReferencesResponseValidationError) ErrorName() string {
	return "AddonReferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddonReferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonReferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonReferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonReferencesResponseValidationError{}

// Validate checks the field values on AddonTenantCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddonTenantCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddonTenantCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddonTenantCreateRequestMultiError, or nil if none found.
func (m *AddonTenantCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddonTenantCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonInstanceRoutingID

	// no validation rules for Name

	// no validation rules for Configs

	if len(errors) > 0 {
		return AddonTenantCreateRequestMultiError(errors)
	}

	return nil
}

// AddonTenantCreateRequestMultiError is an error wrapping multiple validation
// errors returned by AddonTenantCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type AddonTenantCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddonTenantCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddonTenantCreateRequestMultiError) AllErrors() []error { return m }

// AddonTenantCreateRequestValidationError is the validation error returned by
// AddonTenantCreateRequest.Validate if the designated constraints aren't met.
type AddonTenantCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddonTenantCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddonTenantCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddonTenantCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddonTenantCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddonTenantCreateRequestValidationError) ErrorName() string {
	return "AddonTenantCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddonTenantCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddonTenantCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddonTenantCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddonTenantCreateRequestValidationError{}

// Validate checks the field values on AppWorkspaceReleasesGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppWorkspaceReleasesGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppWorkspaceReleasesGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AppWorkspaceReleasesGetRequestMultiError, or nil if none found.
func (m *AppWorkspaceReleasesGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppWorkspaceReleasesGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppID

	// no validation rules for Workspace

	if len(errors) > 0 {
		return AppWorkspaceReleasesGetRequestMultiError(errors)
	}

	return nil
}

// AppWorkspaceReleasesGetRequestMultiError is an error wrapping multiple
// validation errors returned by AppWorkspaceReleasesGetRequest.ValidateAll()
// if the designated constraints aren't met.
type AppWorkspaceReleasesGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppWorkspaceReleasesGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppWorkspaceReleasesGetRequestMultiError) AllErrors() []error { return m }

// AppWorkspaceReleasesGetRequestValidationError is the validation error
// returned by AppWorkspaceReleasesGetRequest.Validate if the designated
// constraints aren't met.
type AppWorkspaceReleasesGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppWorkspaceReleasesGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppWorkspaceReleasesGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppWorkspaceReleasesGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppWorkspaceReleasesGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppWorkspaceReleasesGetRequestValidationError) ErrorName() string {
	return "AppWorkspaceReleasesGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AppWorkspaceReleasesGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppWorkspaceReleasesGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppWorkspaceReleasesGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppWorkspaceReleasesGetRequestValidationError{}

// Validate checks the field values on AppWorkspaceReleasesGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppWorkspaceReleasesGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppWorkspaceReleasesGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AppWorkspaceReleasesGetResponseMultiError, or nil if none found.
func (m *AppWorkspaceReleasesGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AppWorkspaceReleasesGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AppWorkspaceReleasesGetResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AppWorkspaceReleasesGetResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AppWorkspaceReleasesGetResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return AppWorkspaceReleasesGetResponseMultiError(errors)
	}

	return nil
}

// AppWorkspaceReleasesGetResponseMultiError is an error wrapping multiple
// validation errors returned by AppWorkspaceReleasesGetResponse.ValidateAll()
// if the designated constraints aren't met.
type AppWorkspaceReleasesGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppWorkspaceReleasesGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppWorkspaceReleasesGetResponseMultiError) AllErrors() []error { return m }

// AppWorkspaceReleasesGetResponseValidationError is the validation error
// returned by AppWorkspaceReleasesGetResponse.Validate if the designated
// constraints aren't met.
type AppWorkspaceReleasesGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppWorkspaceReleasesGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppWorkspaceReleasesGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppWorkspaceReleasesGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppWorkspaceReleasesGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppWorkspaceReleasesGetResponseValidationError) ErrorName() string {
	return "AppWorkspaceReleasesGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AppWorkspaceReleasesGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppWorkspaceReleasesGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppWorkspaceReleasesGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppWorkspaceReleasesGetResponseValidationError{}

// Validate checks the field values on Container with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Container) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Container with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerMultiError, or nil
// if none found.
func (m *Container) ValidateAll() error {
	return m.validate(true)
}

func (m *Container) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetK8SInstanceMetaInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerValidationError{
					field:  "K8SInstanceMetaInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerValidationError{
					field:  "K8SInstanceMetaInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetK8SInstanceMetaInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerValidationError{
				field:  "K8SInstanceMetaInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ID

	// no validation rules for ContainerID

	// no validation rules for IPAddress

	// no validation rules for Host

	// no validation rules for Image

	// no validation rules for CPU

	// no validation rules for Memory

	// no validation rules for Disk

	// no validation rules for Status

	// no validation rules for ExitCode

	// no validation rules for Message

	// no validation rules for Stage

	// no validation rules for StartedAt

	// no validation rules for UpdatedAt

	// no validation rules for Service

	// no validation rules for ClusterName

	if len(errors) > 0 {
		return ContainerMultiError(errors)
	}

	return nil
}

// ContainerMultiError is an error wrapping multiple validation errors returned
// by Container.ValidateAll() if the designated constraints aren't met.
type ContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerMultiError) AllErrors() []error { return m }

// ContainerValidationError is the validation error returned by
// Container.Validate if the designated constraints aren't met.
type ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerValidationError) ErrorName() string { return "ContainerValidationError" }

// Error satisfies the builtin error interface
func (e ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerValidationError{}

// Validate checks the field values on ContainerListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerListRequestMultiError, or nil if none found.
func (m *ContainerListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for RuntimeID

	// no validation rules for ServiceName

	// no validation rules for Status

	if len(errors) > 0 {
		return ContainerListRequestMultiError(errors)
	}

	return nil
}

// ContainerListRequestMultiError is an error wrapping multiple validation
// errors returned by ContainerListRequest.ValidateAll() if the designated
// constraints aren't met.
type ContainerListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerListRequestMultiError) AllErrors() []error { return m }

// ContainerListRequestValidationError is the validation error returned by
// ContainerListRequest.Validate if the designated constraints aren't met.
type ContainerListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerListRequestValidationError) ErrorName() string {
	return "ContainerListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerListRequestValidationError{}

// Validate checks the field values on ContainerListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerListResponseMultiError, or nil if none found.
func (m *ContainerListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContainerListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContainerListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ContainerListResponseMultiError(errors)
	}

	return nil
}

// ContainerListResponseMultiError is an error wrapping multiple validation
// errors returned by ContainerListResponse.ValidateAll() if the designated
// constraints aren't met.
type ContainerListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerListResponseMultiError) AllErrors() []error { return m }

// ContainerListResponseValidationError is the validation error returned by
// ContainerListResponse.Validate if the designated constraints aren't met.
type ContainerListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerListResponseValidationError) ErrorName() string {
	return "ContainerListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerListResponseValidationError{}

// Validate checks the field values on CustomAddonCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomAddonCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomAddonCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomAddonCreateRequestMultiError, or nil if none found.
func (m *CustomAddonCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomAddonCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for AddonName

	// no validation rules for ProjectID

	// no validation rules for Workspace

	// no validation rules for Tag

	// no validation rules for OperatorID

	// no validation rules for CustomAddonType

	{
		sorted_keys := make([]string, len(m.GetConfigs()))
		i := 0
		for key := range m.GetConfigs() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfigs()[key]
			_ = val

			// no validation rules for Configs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CustomAddonCreateRequestValidationError{
							field:  fmt.Sprintf("Configs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CustomAddonCreateRequestValidationError{
							field:  fmt.Sprintf("Configs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CustomAddonCreateRequestValidationError{
						field:  fmt.Sprintf("Configs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetOptions()))
		i := 0
		for key := range m.GetOptions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetOptions()[key]
			_ = val

			// no validation rules for Options[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CustomAddonCreateRequestValidationError{
							field:  fmt.Sprintf("Options[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CustomAddonCreateRequestValidationError{
							field:  fmt.Sprintf("Options[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CustomAddonCreateRequestValidationError{
						field:  fmt.Sprintf("Options[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CustomAddonCreateRequestMultiError(errors)
	}

	return nil
}

// CustomAddonCreateRequestMultiError is an error wrapping multiple validation
// errors returned by CustomAddonCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type CustomAddonCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomAddonCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomAddonCreateRequestMultiError) AllErrors() []error { return m }

// CustomAddonCreateRequestValidationError is the validation error returned by
// CustomAddonCreateRequest.Validate if the designated constraints aren't met.
type CustomAddonCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomAddonCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomAddonCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomAddonCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomAddonCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomAddonCreateRequestValidationError) ErrorName() string {
	return "CustomAddonCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CustomAddonCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomAddonCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomAddonCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomAddonCreateRequestValidationError{}

// Validate checks the field values on CustomAddonUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomAddonUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomAddonUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomAddonUpdateRequestMultiError, or nil if none found.
func (m *CustomAddonUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomAddonUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetConfigs()))
		i := 0
		for key := range m.GetConfigs() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfigs()[key]
			_ = val

			// no validation rules for Configs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CustomAddonUpdateRequestValidationError{
							field:  fmt.Sprintf("Configs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CustomAddonUpdateRequestValidationError{
							field:  fmt.Sprintf("Configs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CustomAddonUpdateRequestValidationError{
						field:  fmt.Sprintf("Configs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetOptions()))
		i := 0
		for key := range m.GetOptions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetOptions()[key]
			_ = val

			// no validation rules for Options[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CustomAddonUpdateRequestValidationError{
							field:  fmt.Sprintf("Options[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CustomAddonUpdateRequestValidationError{
							field:  fmt.Sprintf("Options[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CustomAddonUpdateRequestValidationError{
						field:  fmt.Sprintf("Options[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for AddonId

	if len(errors) > 0 {
		return CustomAddonUpdateRequestMultiError(errors)
	}

	return nil
}

// CustomAddonUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by CustomAddonUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type CustomAddonUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomAddonUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomAddonUpdateRequestMultiError) AllErrors() []error { return m }

// CustomAddonUpdateRequestValidationError is the validation error returned by
// CustomAddonUpdateRequest.Validate if the designated constraints aren't met.
type CustomAddonUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomAddonUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomAddonUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomAddonUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomAddonUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomAddonUpdateRequestValidationError) ErrorName() string {
	return "CustomAddonUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CustomAddonUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomAddonUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomAddonUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomAddonUpdateRequestValidationError{}

// Validate checks the field values on DeploymentApproveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploymentApproveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentApproveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentApproveRequestMultiError, or nil if none found.
func (m *DeploymentApproveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentApproveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Reject

	// no validation rules for Reason

	if len(errors) > 0 {
		return DeploymentApproveRequestMultiError(errors)
	}

	return nil
}

// DeploymentApproveRequestMultiError is an error wrapping multiple validation
// errors returned by DeploymentApproveRequest.ValidateAll() if the designated
// constraints aren't met.
type DeploymentApproveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentApproveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentApproveRequestMultiError) AllErrors() []error { return m }

// DeploymentApproveRequestValidationError is the validation error returned by
// DeploymentApproveRequest.Validate if the designated constraints aren't met.
type DeploymentApproveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentApproveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentApproveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentApproveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentApproveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentApproveRequestValidationError) ErrorName() string {
	return "DeploymentApproveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeploymentApproveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentApproveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentApproveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentApproveRequestValidationError{}

// Validate checks the field values on DeploymentApproveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploymentApproveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentApproveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentApproveResponseMultiError, or nil if none found.
func (m *DeploymentApproveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentApproveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeploymentApproveResponseMultiError(errors)
	}

	return nil
}

// DeploymentApproveResponseMultiError is an error wrapping multiple validation
// errors returned by DeploymentApproveResponse.ValidateAll() if the
// designated constraints aren't met.
type DeploymentApproveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentApproveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentApproveResponseMultiError) AllErrors() []error { return m }

// DeploymentApproveResponseValidationError is the validation error returned by
// DeploymentApproveResponse.Validate if the designated constraints aren't met.
type DeploymentApproveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentApproveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentApproveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentApproveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentApproveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentApproveResponseValidationError) ErrorName() string {
	return "DeploymentApproveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeploymentApproveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentApproveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentApproveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentApproveResponseValidationError{}

// Validate checks the field values on DeploymentCancelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploymentCancelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentCancelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentCancelRequestMultiError, or nil if none found.
func (m *DeploymentCancelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentCancelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeID

	// no validation rules for Operator

	// no validation rules for DeploymentId

	if len(errors) > 0 {
		return DeploymentCancelRequestMultiError(errors)
	}

	return nil
}

// DeploymentCancelRequestMultiError is an error wrapping multiple validation
// errors returned by DeploymentCancelRequest.ValidateAll() if the designated
// constraints aren't met.
type DeploymentCancelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentCancelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentCancelRequestMultiError) AllErrors() []error { return m }

// DeploymentCancelRequestValidationError is the validation error returned by
// DeploymentCancelRequest.Validate if the designated constraints aren't met.
type DeploymentCancelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentCancelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentCancelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentCancelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentCancelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentCancelRequestValidationError) ErrorName() string {
	return "DeploymentCancelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeploymentCancelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentCancelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentCancelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentCancelRequestValidationError{}

// Validate checks the field values on DeploymentCancelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploymentCancelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentCancelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentCancelResponseMultiError, or nil if none found.
func (m *DeploymentCancelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentCancelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeploymentCancelResponseMultiError(errors)
	}

	return nil
}

// DeploymentCancelResponseMultiError is an error wrapping multiple validation
// errors returned by DeploymentCancelResponse.ValidateAll() if the designated
// constraints aren't met.
type DeploymentCancelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentCancelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentCancelResponseMultiError) AllErrors() []error { return m }

// DeploymentCancelResponseValidationError is the validation error returned by
// DeploymentCancelResponse.Validate if the designated constraints aren't met.
type DeploymentCancelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentCancelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentCancelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentCancelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentCancelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentCancelResponseValidationError) ErrorName() string {
	return "DeploymentCancelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeploymentCancelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentCancelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentCancelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentCancelResponseValidationError{}

// Validate checks the field values on DeploymentCreateResponseDTO with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploymentCreateResponseDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentCreateResponseDTO with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentCreateResponseDTOMultiError, or nil if none found.
func (m *DeploymentCreateResponseDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentCreateResponseDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentID

	// no validation rules for ApplicationID

	// no validation rules for RuntimeID

	if len(errors) > 0 {
		return DeploymentCreateResponseDTOMultiError(errors)
	}

	return nil
}

// DeploymentCreateResponseDTOMultiError is an error wrapping multiple
// validation errors returned by DeploymentCreateResponseDTO.ValidateAll() if
// the designated constraints aren't met.
type DeploymentCreateResponseDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentCreateResponseDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentCreateResponseDTOMultiError) AllErrors() []error { return m }

// DeploymentCreateResponseDTOValidationError is the validation error returned
// by DeploymentCreateResponseDTO.Validate if the designated constraints
// aren't met.
type DeploymentCreateResponseDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentCreateResponseDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentCreateResponseDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentCreateResponseDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentCreateResponseDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentCreateResponseDTOValidationError) ErrorName() string {
	return "DeploymentCreateResponseDTOValidationError"
}

// Error satisfies the builtin error interface
func (e DeploymentCreateResponseDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentCreateResponseDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentCreateResponseDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentCreateResponseDTOValidationError{}

// Validate checks the field values on DeploymentDetailListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploymentDetailListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentDetailListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentDetailListResponseMultiError, or nil if none found.
func (m *DeploymentDetailListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentDetailListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeploymentDetailListResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeploymentDetailListResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeploymentDetailListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeploymentDetailListResponseMultiError(errors)
	}

	return nil
}

// DeploymentDetailListResponseMultiError is an error wrapping multiple
// validation errors returned by DeploymentDetailListResponse.ValidateAll() if
// the designated constraints aren't met.
type DeploymentDetailListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentDetailListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentDetailListResponseMultiError) AllErrors() []error { return m }

// DeploymentDetailListResponseValidationError is the validation error returned
// by DeploymentDetailListResponse.Validate if the designated constraints
// aren't met.
type DeploymentDetailListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentDetailListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentDetailListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentDetailListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentDetailListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentDetailListResponseValidationError) ErrorName() string {
	return "DeploymentDetailListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeploymentDetailListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentDetailListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentDetailListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentDetailListResponseValidationError{}

// Validate checks the field values on DeploymentListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploymentListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentListRequestMultiError, or nil if none found.
func (m *DeploymentListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPageInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeploymentListRequestValidationError{
					field:  "PageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeploymentListRequestValidationError{
					field:  "PageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentListRequestValidationError{
				field:  "PageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RuntimeID

	// no validation rules for OrgID

	// no validation rules for StatusIn

	if len(errors) > 0 {
		return DeploymentListRequestMultiError(errors)
	}

	return nil
}

// DeploymentListRequestMultiError is an error wrapping multiple validation
// errors returned by DeploymentListRequest.ValidateAll() if the designated
// constraints aren't met.
type DeploymentListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentListRequestMultiError) AllErrors() []error { return m }

// DeploymentListRequestValidationError is the validation error returned by
// DeploymentListRequest.Validate if the designated constraints aren't met.
type DeploymentListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentListRequestValidationError) ErrorName() string {
	return "DeploymentListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeploymentListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentListRequestValidationError{}

// Validate checks the field values on DeploymentListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploymentListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentListResponseMultiError, or nil if none found.
func (m *DeploymentListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeploymentListResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeploymentListResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeploymentListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeploymentListResponseMultiError(errors)
	}

	return nil
}

// DeploymentListResponseMultiError is an error wrapping multiple validation
// errors returned by DeploymentListResponse.ValidateAll() if the designated
// constraints aren't met.
type DeploymentListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentListResponseMultiError) AllErrors() []error { return m }

// DeploymentListResponseValidationError is the validation error returned by
// DeploymentListResponse.Validate if the designated constraints aren't met.
type DeploymentListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentListResponseValidationError) ErrorName() string {
	return "DeploymentListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeploymentListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentListResponseValidationError{}

// Validate checks the field values on DomainListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DomainListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DomainListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DomainListRequestMultiError, or nil if none found.
func (m *DomainListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DomainListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeID

	if len(errors) > 0 {
		return DomainListRequestMultiError(errors)
	}

	return nil
}

// DomainListRequestMultiError is an error wrapping multiple validation errors
// returned by DomainListRequest.ValidateAll() if the designated constraints
// aren't met.
type DomainListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DomainListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DomainListRequestMultiError) AllErrors() []error { return m }

// DomainListRequestValidationError is the validation error returned by
// DomainListRequest.Validate if the designated constraints aren't met.
type DomainListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainListRequestValidationError) ErrorName() string {
	return "DomainListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DomainListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomainListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainListRequestValidationError{}

// Validate checks the field values on DomainListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DomainListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DomainListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DomainListResponseMultiError, or nil if none found.
func (m *DomainListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DomainListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DomainListResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DomainListResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DomainListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return DomainListResponseMultiError(errors)
	}

	return nil
}

// DomainListResponseMultiError is an error wrapping multiple validation errors
// returned by DomainListResponse.ValidateAll() if the designated constraints
// aren't met.
type DomainListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DomainListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DomainListResponseMultiError) AllErrors() []error { return m }

// DomainListResponseValidationError is the validation error returned by
// DomainListResponse.Validate if the designated constraints aren't met.
type DomainListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainListResponseValidationError) ErrorName() string {
	return "DomainListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DomainListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomainListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainListResponseValidationError{}

// Validate checks the field values on DomainUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DomainUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DomainUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DomainUpdateRequestMultiError, or nil if none found.
func (m *DomainUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DomainUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeID

	{
		sorted_keys := make([]string, len(m.GetBody()))
		i := 0
		for key := range m.GetBody() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBody()[key]
			_ = val

			// no validation rules for Body[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DomainUpdateRequestValidationError{
							field:  fmt.Sprintf("Body[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DomainUpdateRequestValidationError{
							field:  fmt.Sprintf("Body[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DomainUpdateRequestValidationError{
						field:  fmt.Sprintf("Body[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return DomainUpdateRequestMultiError(errors)
	}

	return nil
}

// DomainUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by DomainUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type DomainUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DomainUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DomainUpdateRequestMultiError) AllErrors() []error { return m }

// DomainUpdateRequestValidationError is the validation error returned by
// DomainUpdateRequest.Validate if the designated constraints aren't met.
type DomainUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainUpdateRequestValidationError) ErrorName() string {
	return "DomainUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DomainUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomainUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainUpdateRequestValidationError{}

// Validate checks the field values on DomainUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DomainUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DomainUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DomainUpdateResponseMultiError, or nil if none found.
func (m *DomainUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DomainUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DomainUpdateResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DomainUpdateResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DomainUpdateResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return DomainUpdateResponseMultiError(errors)
	}

	return nil
}

// DomainUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by DomainUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type DomainUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DomainUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DomainUpdateResponseMultiError) AllErrors() []error { return m }

// DomainUpdateResponseValidationError is the validation error returned by
// DomainUpdateResponse.Validate if the designated constraints aren't met.
type DomainUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainUpdateResponseValidationError) ErrorName() string {
	return "DomainUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DomainUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomainUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainUpdateResponseValidationError{}

// Validate checks the field values on ErrorResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorResponseMultiError, or
// nil if none found.
func (m *ErrorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetCtx()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorResponseValidationError{
					field:  "Ctx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorResponseValidationError{
					field:  "Ctx",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorResponseValidationError{
				field:  "Ctx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ErrorResponseMultiError(errors)
	}

	return nil
}

// ErrorResponseMultiError is an error wrapping multiple validation errors
// returned by ErrorResponse.ValidateAll() if the designated constraints
// aren't met.
type ErrorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorResponseMultiError) AllErrors() []error { return m }

// ErrorResponseValidationError is the validation error returned by
// ErrorResponse.Validate if the designated constraints aren't met.
type ErrorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorResponseValidationError) ErrorName() string { return "ErrorResponseValidationError" }

// Error satisfies the builtin error interface
func (e ErrorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorResponseValidationError{}

// Validate checks the field values on Extension with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Extension) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Extension with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtensionMultiError, or nil
// if none found.
func (m *Extension) ValidateAll() error {
	return m.validate(true)
}

func (m *Extension) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for DisplayName

	// no validation rules for Category

	// no validation rules for LogoUrl

	// no validation rules for Public

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtensionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtensionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtensionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtensionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtensionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtensionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExtensionMultiError(errors)
	}

	return nil
}

// ExtensionMultiError is an error wrapping multiple validation errors returned
// by Extension.ValidateAll() if the designated constraints aren't met.
type ExtensionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionMultiError) AllErrors() []error { return m }

// ExtensionValidationError is the validation error returned by
// Extension.Validate if the designated constraints aren't met.
type ExtensionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionValidationError) ErrorName() string { return "ExtensionValidationError" }

// Error satisfies the builtin error interface
func (e ExtensionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtension.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionValidationError{}

// Validate checks the field values on K8SInstanceMetaInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *K8SInstanceMetaInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on K8SInstanceMetaInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// K8SInstanceMetaInfoMultiError, or nil if none found.
func (m *K8SInstanceMetaInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *K8SInstanceMetaInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PodUid

	// no validation rules for PodName

	// no validation rules for PodNamespace

	// no validation rules for ContainerName

	if len(errors) > 0 {
		return K8SInstanceMetaInfoMultiError(errors)
	}

	return nil
}

// K8SInstanceMetaInfoMultiError is an error wrapping multiple validation
// errors returned by K8SInstanceMetaInfo.ValidateAll() if the designated
// constraints aren't met.
type K8SInstanceMetaInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m K8SInstanceMetaInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m K8SInstanceMetaInfoMultiError) AllErrors() []error { return m }

// K8SInstanceMetaInfoValidationError is the validation error returned by
// K8SInstanceMetaInfo.Validate if the designated constraints aren't met.
type K8SInstanceMetaInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e K8SInstanceMetaInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e K8SInstanceMetaInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e K8SInstanceMetaInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e K8SInstanceMetaInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e K8SInstanceMetaInfoValidationError) ErrorName() string {
	return "K8SInstanceMetaInfoValidationError"
}

// Error satisfies the builtin error interface
func (e K8SInstanceMetaInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sK8SInstanceMetaInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = K8SInstanceMetaInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = K8SInstanceMetaInfoValidationError{}

// Validate checks the field values on MicroServiceMenuResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MicroServiceMenuResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MicroServiceMenuResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MicroServiceMenuResponseDataMultiError, or nil if none found.
func (m *MicroServiceMenuResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *MicroServiceMenuResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonName

	// no validation rules for AddonDisplayName

	// no validation rules for InstanceId

	// no validation rules for TerminusKey

	// no validation rules for ConsoleUrl

	// no validation rules for ProjectName

	if len(errors) > 0 {
		return MicroServiceMenuResponseDataMultiError(errors)
	}

	return nil
}

// MicroServiceMenuResponseDataMultiError is an error wrapping multiple
// validation errors returned by MicroServiceMenuResponseData.ValidateAll() if
// the designated constraints aren't met.
type MicroServiceMenuResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MicroServiceMenuResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MicroServiceMenuResponseDataMultiError) AllErrors() []error { return m }

// MicroServiceMenuResponseDataValidationError is the validation error returned
// by MicroServiceMenuResponseData.Validate if the designated constraints
// aren't met.
type MicroServiceMenuResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MicroServiceMenuResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MicroServiceMenuResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MicroServiceMenuResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MicroServiceMenuResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MicroServiceMenuResponseDataValidationError) ErrorName() string {
	return "MicroServiceMenuResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e MicroServiceMenuResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMicroServiceMenuResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MicroServiceMenuResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MicroServiceMenuResponseDataValidationError{}

// Validate checks the field values on MicroServiceProjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MicroServiceProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MicroServiceProjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MicroServiceProjectResponseMultiError, or nil if none found.
func (m *MicroServiceProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MicroServiceProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MicroServiceProjectResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MicroServiceProjectResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MicroServiceProjectResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MicroServiceProjectResponseMultiError(errors)
	}

	return nil
}

// MicroServiceProjectResponseMultiError is an error wrapping multiple
// validation errors returned by MicroServiceProjectResponse.ValidateAll() if
// the designated constraints aren't met.
type MicroServiceProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MicroServiceProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MicroServiceProjectResponseMultiError) AllErrors() []error { return m }

// MicroServiceProjectResponseValidationError is the validation error returned
// by MicroServiceProjectResponse.Validate if the designated constraints
// aren't met.
type MicroServiceProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MicroServiceProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MicroServiceProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MicroServiceProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MicroServiceProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MicroServiceProjectResponseValidationError) ErrorName() string {
	return "MicroServiceProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MicroServiceProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMicroServiceProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MicroServiceProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MicroServiceProjectResponseValidationError{}

// Validate checks the field values on MicroServiceProjectResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MicroServiceProjectResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MicroServiceProjectResponseData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MicroServiceProjectResponseDataMultiError, or nil if none found.
func (m *MicroServiceProjectResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *MicroServiceProjectResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for ProjectDesc

	// no validation rules for LogoURL

	// no validation rules for Workspaces

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MicroServiceProjectResponseDataValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MicroServiceProjectResponseDataValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MicroServiceProjectResponseDataValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MicroServiceProjectResponseDataMultiError(errors)
	}

	return nil
}

// MicroServiceProjectResponseDataMultiError is an error wrapping multiple
// validation errors returned by MicroServiceProjectResponseData.ValidateAll()
// if the designated constraints aren't met.
type MicroServiceProjectResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MicroServiceProjectResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MicroServiceProjectResponseDataMultiError) AllErrors() []error { return m }

// MicroServiceProjectResponseDataValidationError is the validation error
// returned by MicroServiceProjectResponseData.Validate if the designated
// constraints aren't met.
type MicroServiceProjectResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MicroServiceProjectResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MicroServiceProjectResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MicroServiceProjectResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MicroServiceProjectResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MicroServiceProjectResponseDataValidationError) ErrorName() string {
	return "MicroServiceProjectResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e MicroServiceProjectResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMicroServiceProjectResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MicroServiceProjectResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MicroServiceProjectResponseDataValidationError{}

// Validate checks the field values on MiddlewareFetchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MiddlewareFetchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MiddlewareFetchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MiddlewareFetchResponseMultiError, or nil if none found.
func (m *MiddlewareFetchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MiddlewareFetchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MiddlewareFetchResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MiddlewareFetchResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MiddlewareFetchResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MiddlewareFetchResponseMultiError(errors)
	}

	return nil
}

// MiddlewareFetchResponseMultiError is an error wrapping multiple validation
// errors returned by MiddlewareFetchResponse.ValidateAll() if the designated
// constraints aren't met.
type MiddlewareFetchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiddlewareFetchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiddlewareFetchResponseMultiError) AllErrors() []error { return m }

// MiddlewareFetchResponseValidationError is the validation error returned by
// MiddlewareFetchResponse.Validate if the designated constraints aren't met.
type MiddlewareFetchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiddlewareFetchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiddlewareFetchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiddlewareFetchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiddlewareFetchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiddlewareFetchResponseValidationError) ErrorName() string {
	return "MiddlewareFetchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MiddlewareFetchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddlewareFetchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiddlewareFetchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiddlewareFetchResponseValidationError{}

// Validate checks the field values on MiddlewareFetchResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MiddlewareFetchResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MiddlewareFetchResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MiddlewareFetchResponseDataMultiError, or nil if none found.
func (m *MiddlewareFetchResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *MiddlewareFetchResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for IsOperator

	// no validation rules for InstanceID

	// no validation rules for AddonName

	// no validation rules for LogoURL

	// no validation rules for Plan

	// no validation rules for Version

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for Category

	// no validation rules for Workspace

	// no validation rules for Status

	// no validation rules for AttachCount

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MiddlewareFetchResponseDataValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MiddlewareFetchResponseDataValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MiddlewareFetchResponseDataValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetReferenceInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewareFetchResponseDataValidationError{
						field:  fmt.Sprintf("ReferenceInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewareFetchResponseDataValidationError{
						field:  fmt.Sprintf("ReferenceInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewareFetchResponseDataValidationError{
					field:  fmt.Sprintf("ReferenceInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Cluster

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MiddlewareFetchResponseDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MiddlewareFetchResponseDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MiddlewareFetchResponseDataValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MiddlewareFetchResponseDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MiddlewareFetchResponseDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MiddlewareFetchResponseDataValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MiddlewareFetchResponseDataMultiError(errors)
	}

	return nil
}

// MiddlewareFetchResponseDataMultiError is an error wrapping multiple
// validation errors returned by MiddlewareFetchResponseData.ValidateAll() if
// the designated constraints aren't met.
type MiddlewareFetchResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiddlewareFetchResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiddlewareFetchResponseDataMultiError) AllErrors() []error { return m }

// MiddlewareFetchResponseDataValidationError is the validation error returned
// by MiddlewareFetchResponseData.Validate if the designated constraints
// aren't met.
type MiddlewareFetchResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiddlewareFetchResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiddlewareFetchResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiddlewareFetchResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiddlewareFetchResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiddlewareFetchResponseDataValidationError) ErrorName() string {
	return "MiddlewareFetchResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e MiddlewareFetchResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddlewareFetchResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiddlewareFetchResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiddlewareFetchResponseDataValidationError{}

// Validate checks the field values on MiddlewareListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MiddlewareListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MiddlewareListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MiddlewareListItemMultiError, or nil if none found.
func (m *MiddlewareListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *MiddlewareListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceID

	// no validation rules for AddonName

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for Env

	// no validation rules for ClusterName

	// no validation rules for Name

	// no validation rules for CPU

	// no validation rules for Mem

	// no validation rules for Nodes

	// no validation rules for AttachCount

	// no validation rules for IsOperator

	if len(errors) > 0 {
		return MiddlewareListItemMultiError(errors)
	}

	return nil
}

// MiddlewareListItemMultiError is an error wrapping multiple validation errors
// returned by MiddlewareListItem.ValidateAll() if the designated constraints
// aren't met.
type MiddlewareListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiddlewareListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiddlewareListItemMultiError) AllErrors() []error { return m }

// MiddlewareListItemValidationError is the validation error returned by
// MiddlewareListItem.Validate if the designated constraints aren't met.
type MiddlewareListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiddlewareListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiddlewareListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiddlewareListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiddlewareListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiddlewareListItemValidationError) ErrorName() string {
	return "MiddlewareListItemValidationError"
}

// Error satisfies the builtin error interface
func (e MiddlewareListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddlewareListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiddlewareListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiddlewareListItemValidationError{}

// Validate checks the field values on MiddlewareListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MiddlewareListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MiddlewareListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MiddlewareListRequestMultiError, or nil if none found.
func (m *MiddlewareListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MiddlewareListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	// no validation rules for AddonName

	// no validation rules for Workspace

	// no validation rules for InstanceID

	// no validation rules for InstanceIP

	// no validation rules for PageNo

	// no validation rules for PageSize

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewareListRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewareListRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewareListRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MiddlewareListRequestMultiError(errors)
	}

	return nil
}

// MiddlewareListRequestMultiError is an error wrapping multiple validation
// errors returned by MiddlewareListRequest.ValidateAll() if the designated
// constraints aren't met.
type MiddlewareListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiddlewareListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiddlewareListRequestMultiError) AllErrors() []error { return m }

// MiddlewareListRequestValidationError is the validation error returned by
// MiddlewareListRequest.Validate if the designated constraints aren't met.
type MiddlewareListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiddlewareListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiddlewareListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiddlewareListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiddlewareListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiddlewareListRequestValidationError) ErrorName() string {
	return "MiddlewareListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MiddlewareListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddlewareListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiddlewareListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiddlewareListRequestValidationError{}

// Validate checks the field values on MiddlewareListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MiddlewareListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MiddlewareListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MiddlewareListResponseMultiError, or nil if none found.
func (m *MiddlewareListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MiddlewareListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MiddlewareListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MiddlewareListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MiddlewareListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MiddlewareListResponseMultiError(errors)
	}

	return nil
}

// MiddlewareListResponseMultiError is an error wrapping multiple validation
// errors returned by MiddlewareListResponse.ValidateAll() if the designated
// constraints aren't met.
type MiddlewareListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiddlewareListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiddlewareListResponseMultiError) AllErrors() []error { return m }

// MiddlewareListResponseValidationError is the validation error returned by
// MiddlewareListResponse.Validate if the designated constraints aren't met.
type MiddlewareListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiddlewareListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiddlewareListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiddlewareListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiddlewareListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiddlewareListResponseValidationError) ErrorName() string {
	return "MiddlewareListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MiddlewareListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddlewareListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiddlewareListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiddlewareListResponseValidationError{}

// Validate checks the field values on MiddlewareListResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MiddlewareListResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MiddlewareListResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MiddlewareListResponseDataMultiError, or nil if none found.
func (m *MiddlewareListResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *MiddlewareListResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if all {
		switch v := interface{}(m.GetOverview()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MiddlewareListResponseDataValidationError{
					field:  "Overview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MiddlewareListResponseDataValidationError{
					field:  "Overview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOverview()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MiddlewareListResponseDataValidationError{
				field:  "Overview",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewareListResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewareListResponseDataValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewareListResponseDataValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MiddlewareListResponseDataMultiError(errors)
	}

	return nil
}

// MiddlewareListResponseDataMultiError is an error wrapping multiple
// validation errors returned by MiddlewareListResponseData.ValidateAll() if
// the designated constraints aren't met.
type MiddlewareListResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiddlewareListResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiddlewareListResponseDataMultiError) AllErrors() []error { return m }

// MiddlewareListResponseDataValidationError is the validation error returned
// by MiddlewareListResponseData.Validate if the designated constraints aren't met.
type MiddlewareListResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiddlewareListResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiddlewareListResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiddlewareListResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiddlewareListResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiddlewareListResponseDataValidationError) ErrorName() string {
	return "MiddlewareListResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e MiddlewareListResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddlewareListResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiddlewareListResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiddlewareListResponseDataValidationError{}

// Validate checks the field values on MiddlewareResourceFetchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MiddlewareResourceFetchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MiddlewareResourceFetchResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MiddlewareResourceFetchResponseMultiError, or nil if none found.
func (m *MiddlewareResourceFetchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MiddlewareResourceFetchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MiddlewareResourceFetchResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MiddlewareResourceFetchResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MiddlewareResourceFetchResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MiddlewareResourceFetchResponseMultiError(errors)
	}

	return nil
}

// MiddlewareResourceFetchResponseMultiError is an error wrapping multiple
// validation errors returned by MiddlewareResourceFetchResponse.ValidateAll()
// if the designated constraints aren't met.
type MiddlewareResourceFetchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiddlewareResourceFetchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiddlewareResourceFetchResponseMultiError) AllErrors() []error { return m }

// MiddlewareResourceFetchResponseValidationError is the validation error
// returned by MiddlewareResourceFetchResponse.Validate if the designated
// constraints aren't met.
type MiddlewareResourceFetchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiddlewareResourceFetchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiddlewareResourceFetchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiddlewareResourceFetchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiddlewareResourceFetchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiddlewareResourceFetchResponseValidationError) ErrorName() string {
	return "MiddlewareResourceFetchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MiddlewareResourceFetchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddlewareResourceFetchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiddlewareResourceFetchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiddlewareResourceFetchResponseValidationError{}

// Validate checks the field values on MiddlewareResourceFetchResponseData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MiddlewareResourceFetchResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MiddlewareResourceFetchResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MiddlewareResourceFetchResponseDataMultiError, or nil if none found.
func (m *MiddlewareResourceFetchResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *MiddlewareResourceFetchResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceID

	// no validation rules for ContainerID

	// no validation rules for ContainerIP

	// no validation rules for ClusterName

	// no validation rules for HostIP

	// no validation rules for Image

	// no validation rules for CPURequest

	// no validation rules for CPULimit

	// no validation rules for MemRequest

	// no validation rules for MemLimit

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MiddlewareResourceFetchResponseDataValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MiddlewareResourceFetchResponseDataValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MiddlewareResourceFetchResponseDataValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MiddlewareResourceFetchResponseDataMultiError(errors)
	}

	return nil
}

// MiddlewareResourceFetchResponseDataMultiError is an error wrapping multiple
// validation errors returned by
// MiddlewareResourceFetchResponseData.ValidateAll() if the designated
// constraints aren't met.
type MiddlewareResourceFetchResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MiddlewareResourceFetchResponseDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MiddlewareResourceFetchResponseDataMultiError) AllErrors() []error { return m }

// MiddlewareResourceFetchResponseDataValidationError is the validation error
// returned by MiddlewareResourceFetchResponseData.Validate if the designated
// constraints aren't met.
type MiddlewareResourceFetchResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MiddlewareResourceFetchResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MiddlewareResourceFetchResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MiddlewareResourceFetchResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MiddlewareResourceFetchResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MiddlewareResourceFetchResponseDataValidationError) ErrorName() string {
	return "MiddlewareResourceFetchResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e MiddlewareResourceFetchResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiddlewareResourceFetchResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MiddlewareResourceFetchResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MiddlewareResourceFetchResponseDataValidationError{}

// Validate checks the field values on ORCHESTRATOR_ADDONS_SCALE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ORCHESTRATOR_ADDONS_SCALE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_ADDONS_SCALE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_ADDONS_SCALE_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_ADDONS_SCALE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_ADDONS_SCALE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_ADDONS_SCALE_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_ADDONS_SCALE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ORCHESTRATOR_ADDONS_SCALE_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDONS_SCALE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_ADDONS_SCALE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_ADDONS_SCALE_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_ADDONS_SCALE_RequestValidationError is the validation error
// returned by ORCHESTRATOR_ADDONS_SCALE_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDONS_SCALE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_ADDONS_SCALE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_ADDONS_SCALE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_ADDONS_SCALE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_ADDONS_SCALE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_ADDONS_SCALE_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_ADDONS_SCALE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_ADDONS_SCALE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_ADDONS_SCALE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_ADDONS_SCALE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_ADDONS_SCALE_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_ADDON_CUSTOM_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ORCHESTRATOR_ADDON_CUSTOM_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_ADDON_CUSTOM_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_ADDON_CUSTOM_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_ADDON_CUSTOM_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_ADDON_CUSTOM_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_ADDON_CUSTOM_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_ADDON_CUSTOM_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ORCHESTRATOR_ADDON_CUSTOM_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_CUSTOM_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_ADDON_CUSTOM_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_ADDON_CUSTOM_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_ADDON_CUSTOM_RequestValidationError is the validation error
// returned by ORCHESTRATOR_ADDON_CUSTOM_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_CUSTOM_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_ADDON_CUSTOM_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_ADDON_CUSTOM_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_ADDON_CUSTOM_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_ADDON_CUSTOM_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_ADDON_CUSTOM_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_ADDON_CUSTOM_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_ADDON_CUSTOM_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_ADDON_CUSTOM_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_ADDON_CUSTOM_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_ADDON_CUSTOM_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_ADDON_DELETE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ORCHESTRATOR_ADDON_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_ADDON_DELETE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_ADDON_DELETE_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_ADDON_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_ADDON_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonId

	if len(errors) > 0 {
		return ORCHESTRATOR_ADDON_DELETE_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_ADDON_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ORCHESTRATOR_ADDON_DELETE_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_ADDON_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_ADDON_DELETE_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_ADDON_DELETE_RequestValidationError is the validation error
// returned by ORCHESTRATOR_ADDON_DELETE_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_ADDON_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_ADDON_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_ADDON_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_ADDON_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_ADDON_DELETE_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_ADDON_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_ADDON_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_ADDON_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_ADDON_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_ADDON_DELETE_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_ADDON_EXPORT_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ORCHESTRATOR_ADDON_EXPORT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_ADDON_EXPORT_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_ADDON_EXPORT_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_ADDON_EXPORT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_ADDON_EXPORT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_ADDON_EXPORT_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_ADDON_EXPORT_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ORCHESTRATOR_ADDON_EXPORT_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_EXPORT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_ADDON_EXPORT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_ADDON_EXPORT_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_ADDON_EXPORT_RequestValidationError is the validation error
// returned by ORCHESTRATOR_ADDON_EXPORT_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_EXPORT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_ADDON_EXPORT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_ADDON_EXPORT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_ADDON_EXPORT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_ADDON_EXPORT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_ADDON_EXPORT_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_ADDON_EXPORT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_ADDON_EXPORT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_ADDON_EXPORT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_ADDON_EXPORT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_ADDON_EXPORT_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_ADDON_EXTENSION_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ORCHESTRATOR_ADDON_EXTENSION_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_ADDON_EXTENSION_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_ADDON_EXTENSION_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_ADDON_EXTENSION_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_ADDON_EXTENSION_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_ADDON_EXTENSION_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_ADDON_EXTENSION_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ORCHESTRATOR_ADDON_EXTENSION_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_EXTENSION_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_ADDON_EXTENSION_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_ADDON_EXTENSION_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_ADDON_EXTENSION_RequestValidationError is the validation error
// returned by ORCHESTRATOR_ADDON_EXTENSION_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_EXTENSION_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_ADDON_EXTENSION_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_ADDON_EXTENSION_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_ADDON_EXTENSION_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_ADDON_EXTENSION_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_ADDON_EXTENSION_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_ADDON_EXTENSION_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_ADDON_EXTENSION_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_ADDON_EXTENSION_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_ADDON_EXTENSION_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_ADDON_EXTENSION_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_ADDON_FETCH_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ORCHESTRATOR_ADDON_FETCH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_ADDON_FETCH_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_ADDON_FETCH_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_ADDON_FETCH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_ADDON_FETCH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonId

	if len(errors) > 0 {
		return ORCHESTRATOR_ADDON_FETCH_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_ADDON_FETCH_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ORCHESTRATOR_ADDON_FETCH_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_FETCH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_ADDON_FETCH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_ADDON_FETCH_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_ADDON_FETCH_RequestValidationError is the validation error
// returned by ORCHESTRATOR_ADDON_FETCH_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_FETCH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_ADDON_FETCH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_ADDON_FETCH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_ADDON_FETCH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_ADDON_FETCH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_ADDON_FETCH_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_ADDON_FETCH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_ADDON_FETCH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_ADDON_FETCH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_ADDON_FETCH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_ADDON_FETCH_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_ADDON_IMPORT_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ORCHESTRATOR_ADDON_IMPORT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_ADDON_IMPORT_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_ADDON_IMPORT_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_ADDON_IMPORT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_ADDON_IMPORT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_ADDON_IMPORT_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_ADDON_IMPORT_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ORCHESTRATOR_ADDON_IMPORT_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_IMPORT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_ADDON_IMPORT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_ADDON_IMPORT_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_ADDON_IMPORT_RequestValidationError is the validation error
// returned by ORCHESTRATOR_ADDON_IMPORT_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_IMPORT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_ADDON_IMPORT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_ADDON_IMPORT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_ADDON_IMPORT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_ADDON_IMPORT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_ADDON_IMPORT_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_ADDON_IMPORT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_ADDON_IMPORT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_ADDON_IMPORT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_ADDON_IMPORT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_ADDON_IMPORT_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_ADDON_LOGS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_ADDON_LOGS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_ADDON_LOGS_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_ADDON_LOGS_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_ADDON_LOGS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_ADDON_LOGS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return ORCHESTRATOR_ADDON_LOGS_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_ADDON_LOGS_RequestMultiError is an error wrapping multiple
// validation errors returned by ORCHESTRATOR_ADDON_LOGS_Request.ValidateAll()
// if the designated constraints aren't met.
type ORCHESTRATOR_ADDON_LOGS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_ADDON_LOGS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_ADDON_LOGS_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_ADDON_LOGS_RequestValidationError is the validation error
// returned by ORCHESTRATOR_ADDON_LOGS_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_LOGS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_ADDON_LOGS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_ADDON_LOGS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_ADDON_LOGS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_ADDON_LOGS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_ADDON_LOGS_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_ADDON_LOGS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_ADDON_LOGS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_ADDON_LOGS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_ADDON_LOGS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_ADDON_LOGS_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_ADDON_MENU_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_ADDON_MENU_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_ADDON_MENU_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_ADDON_MENU_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_ADDON_MENU_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_ADDON_MENU_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_ADDON_MENU_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_ADDON_MENU_RequestMultiError is an error wrapping multiple
// validation errors returned by ORCHESTRATOR_ADDON_MENU_Request.ValidateAll()
// if the designated constraints aren't met.
type ORCHESTRATOR_ADDON_MENU_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_ADDON_MENU_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_ADDON_MENU_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_ADDON_MENU_RequestValidationError is the validation error
// returned by ORCHESTRATOR_ADDON_MENU_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_MENU_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_ADDON_MENU_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_ADDON_MENU_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_ADDON_MENU_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_ADDON_MENU_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_ADDON_MENU_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_ADDON_MENU_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_ADDON_MENU_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_ADDON_MENU_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_ADDON_MENU_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_ADDON_MENU_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_ADDON_REFERENCES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ORCHESTRATOR_ADDON_REFERENCES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_ADDON_REFERENCES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_ADDON_REFERENCES_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_ADDON_REFERENCES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_ADDON_REFERENCES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonID

	if len(errors) > 0 {
		return ORCHESTRATOR_ADDON_REFERENCES_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_ADDON_REFERENCES_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_ADDON_REFERENCES_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_ADDON_REFERENCES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_ADDON_REFERENCES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_ADDON_REFERENCES_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_ADDON_REFERENCES_RequestValidationError is the validation error
// returned by ORCHESTRATOR_ADDON_REFERENCES_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_ADDON_REFERENCES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_ADDON_REFERENCES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_ADDON_REFERENCES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_ADDON_REFERENCES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_ADDON_REFERENCES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_ADDON_REFERENCES_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_ADDON_REFERENCES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_ADDON_REFERENCES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_ADDON_REFERENCES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_ADDON_REFERENCES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_ADDON_REFERENCES_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cluster

	if len(errors) > 0 {
		return ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_DEPLOYMENT_ADDONS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ORCHESTRATOR_DEPLOYMENT_ADDONS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_DEPLOYMENT_ADDONS_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_DEPLOYMENT_ADDONS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_DEPLOYMENT_ADDONS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentID

	if len(errors) > 0 {
		return ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_DEPLOYMENT_ADDONS_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestValidationError is the validation
// error returned by ORCHESTRATOR_DEPLOYMENT_ADDONS_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_DEPLOYMENT_ADDONS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_DEPLOYMENT_ADDONS_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentID

	if len(errors) > 0 {
		return ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestValidationError is the validation
// error returned by ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_DEPLOYMENT_DOMAINS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_DEPLOYMENT_DOMAINS_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestMultiError, or nil if
// none found.
func (m *ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestMultiError is an error
// wrapping multiple validation errors returned by
// ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestMultiError) AllErrors() []error {
	return m
}

// ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestMultiError, or nil if
// none found.
func (m *ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestMultiError is an error
// wrapping multiple validation errors returned by
// ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestMultiError) AllErrors() []error {
	return m
}

// ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentOrderID

	if len(errors) > 0 {
		return ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentOrderID

	if len(errors) > 0 {
		return ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentOrderID

	if len(errors) > 0 {
		return ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestValidationError is the validation
// error returned by ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_DEPLOYMENT_ORDER_GET_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestValidationError is the validation
// error returned by ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request.Validate if
// the designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestMultiError, or nil if
// none found.
func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestMultiError is an error
// wrapping multiple validation errors returned by
// ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	if len(errors) > 0 {
		return ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_DEPLOYMENT_SERVICES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ORCHESTRATOR_DEPLOYMENT_SERVICES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_DEPLOYMENT_SERVICES_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_DEPLOYMENT_SERVICES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_DEPLOYMENT_SERVICES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentID

	if len(errors) > 0 {
		return ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_DEPLOYMENT_SERVICES_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestValidationError is the validation
// error returned by ORCHESTRATOR_DEPLOYMENT_SERVICES_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_DEPLOYMENT_SERVICES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_DEPLOYMENT_SERVICES_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_INSTANCES_USAGE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ORCHESTRATOR_INSTANCES_USAGE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_INSTANCES_USAGE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_INSTANCES_USAGE_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_INSTANCES_USAGE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_INSTANCES_USAGE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_INSTANCES_USAGE_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_INSTANCES_USAGE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ORCHESTRATOR_INSTANCES_USAGE_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_INSTANCES_USAGE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_INSTANCES_USAGE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_INSTANCES_USAGE_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_INSTANCES_USAGE_RequestValidationError is the validation error
// returned by ORCHESTRATOR_INSTANCES_USAGE_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_INSTANCES_USAGE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_INSTANCES_USAGE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_INSTANCES_USAGE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_INSTANCES_USAGE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_INSTANCES_USAGE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_INSTANCES_USAGE_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_INSTANCES_USAGE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_INSTANCES_USAGE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_INSTANCES_USAGE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_INSTANCES_USAGE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_INSTANCES_USAGE_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_MICRO_SERVICE_MENUS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ORCHESTRATOR_MICRO_SERVICE_MENUS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_MICRO_SERVICE_MENUS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_MICRO_SERVICE_MENUS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_MICRO_SERVICE_MENUS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectID

	if len(errors) > 0 {
		return ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_MICRO_SERVICE_MENUS_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestValidationError is the validation
// error returned by ORCHESTRATOR_MICRO_SERVICE_MENUS_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_MICRO_SERVICE_MENUS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_MICRO_SERVICE_MENUS_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestValidationError is the validation
// error returned by ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request.Validate if
// the designated constraints aren't met.
type ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_MICRO_SERVICE_PROJECTS_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonId

	if len(errors) > 0 {
		return ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestMultiError is an error
// wrapping multiple validation errors returned by
// ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_MIDDLEWARE_FETCH_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ORCHESTRATOR_MIDDLEWARE_FETCH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_MIDDLEWARE_FETCH_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_MIDDLEWARE_FETCH_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_MIDDLEWARE_FETCH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_MIDDLEWARE_FETCH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddonId

	if len(errors) > 0 {
		return ORCHESTRATOR_MIDDLEWARE_FETCH_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_MIDDLEWARE_FETCH_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_MIDDLEWARE_FETCH_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_MIDDLEWARE_FETCH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_MIDDLEWARE_FETCH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_MIDDLEWARE_FETCH_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_MIDDLEWARE_FETCH_RequestValidationError is the validation error
// returned by ORCHESTRATOR_MIDDLEWARE_FETCH_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_MIDDLEWARE_FETCH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_MIDDLEWARE_FETCH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_MIDDLEWARE_FETCH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_MIDDLEWARE_FETCH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_MIDDLEWARE_FETCH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_MIDDLEWARE_FETCH_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_MIDDLEWARE_FETCH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_MIDDLEWARE_FETCH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_MIDDLEWARE_FETCH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_MIDDLEWARE_FETCH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_MIDDLEWARE_FETCH_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_MIGRATION_LOG_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ORCHESTRATOR_MIGRATION_LOG_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_MIGRATION_LOG_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_MIGRATION_LOG_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_MIGRATION_LOG_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_MIGRATION_LOG_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MigrationId

	if len(errors) > 0 {
		return ORCHESTRATOR_MIGRATION_LOG_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_MIGRATION_LOG_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ORCHESTRATOR_MIGRATION_LOG_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_MIGRATION_LOG_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_MIGRATION_LOG_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_MIGRATION_LOG_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_MIGRATION_LOG_RequestValidationError is the validation error
// returned by ORCHESTRATOR_MIGRATION_LOG_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_MIGRATION_LOG_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_MIGRATION_LOG_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_MIGRATION_LOG_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_MIGRATION_LOG_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_MIGRATION_LOG_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_MIGRATION_LOG_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_MIGRATION_LOG_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_MIGRATION_LOG_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_MIGRATION_LOG_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_MIGRATION_LOG_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_MIGRATION_LOG_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_ORG_JOB_LOG_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ORCHESTRATOR_ORG_JOB_LOG_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_ORG_JOB_LOG_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_ORG_JOB_LOG_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_ORG_JOB_LOG_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_ORG_JOB_LOG_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_ORG_JOB_LOG_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_ORG_JOB_LOG_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ORCHESTRATOR_ORG_JOB_LOG_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_ORG_JOB_LOG_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_ORG_JOB_LOG_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_ORG_JOB_LOG_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_ORG_JOB_LOG_RequestValidationError is the validation error
// returned by ORCHESTRATOR_ORG_JOB_LOG_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_ORG_JOB_LOG_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_ORG_JOB_LOG_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_ORG_JOB_LOG_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_ORG_JOB_LOG_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_ORG_JOB_LOG_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_ORG_JOB_LOG_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_ORG_JOB_LOG_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_ORG_JOB_LOG_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_ORG_JOB_LOG_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_ORG_JOB_LOG_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_ORG_JOB_LOG_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestValidationError is the validation
// error returned by ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request.Validate if
// the designated constraints aren't met.
type ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_PROJECT_RUNTIME_COUNT_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestValidationError is the validation
// error returned by ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIMES_BATCH_SCALE_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestValidationError is the validation
// error returned by ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request.Validate if
// the designated constraints aren't met.
type ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIME_BATCH_SERVICES_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_RUNTIME_CREATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ORCHESTRATOR_RUNTIME_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_RUNTIME_CREATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_RUNTIME_CREATE_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIME_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIME_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIME_CREATE_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIME_CREATE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ORCHESTRATOR_RUNTIME_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIME_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIME_CREATE_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIME_CREATE_RequestValidationError is the validation error
// returned by ORCHESTRATOR_RUNTIME_CREATE_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIME_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIME_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIME_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIME_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIME_CREATE_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIME_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIME_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIME_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIME_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIME_CREATE_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_RUNTIME_DELETE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ORCHESTRATOR_RUNTIME_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_RUNTIME_DELETE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_RUNTIME_DELETE_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIME_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIME_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeId

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIME_DELETE_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIME_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ORCHESTRATOR_RUNTIME_DELETE_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIME_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIME_DELETE_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIME_DELETE_RequestValidationError is the validation error
// returned by ORCHESTRATOR_RUNTIME_DELETE_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIME_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIME_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIME_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIME_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIME_DELETE_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIME_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIME_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIME_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIME_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIME_DELETE_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestValidationError is the validation
// error returned by ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIME_DEPLOY_LOG_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestValidationError is the validation
// error returned by ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request.Validate if
// the designated constraints aren't met.
type ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeId

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestMultiError is an error
// wrapping multiple validation errors returned by
// ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeId

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_RUNTIME_REDEPLOY_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ORCHESTRATOR_RUNTIME_REDEPLOY_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_RUNTIME_REDEPLOY_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_RUNTIME_REDEPLOY_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIME_REDEPLOY_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIME_REDEPLOY_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeId

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIME_REDEPLOY_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIME_REDEPLOY_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_RUNTIME_REDEPLOY_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_REDEPLOY_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIME_REDEPLOY_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIME_REDEPLOY_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIME_REDEPLOY_RequestValidationError is the validation error
// returned by ORCHESTRATOR_RUNTIME_REDEPLOY_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_RUNTIME_REDEPLOY_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIME_REDEPLOY_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIME_REDEPLOY_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIME_REDEPLOY_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIME_REDEPLOY_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIME_REDEPLOY_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIME_REDEPLOY_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIME_REDEPLOY_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIME_REDEPLOY_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIME_REDEPLOY_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIME_REDEPLOY_RequestValidationError{}

// Validate checks the field values on
// ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeId

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request.ValidateAll() if the
// designated constraints aren't met.
type ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestValidationError is the
// validation error returned by
// ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_RUNTIME_ROLLBACK_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ORCHESTRATOR_RUNTIME_ROLLBACK_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_RUNTIME_ROLLBACK_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_RUNTIME_ROLLBACK_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIME_ROLLBACK_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIME_ROLLBACK_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeId

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIME_ROLLBACK_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIME_ROLLBACK_RequestMultiError is an error wrapping
// multiple validation errors returned by
// ORCHESTRATOR_RUNTIME_ROLLBACK_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_ROLLBACK_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIME_ROLLBACK_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIME_ROLLBACK_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIME_ROLLBACK_RequestValidationError is the validation error
// returned by ORCHESTRATOR_RUNTIME_ROLLBACK_Request.Validate if the
// designated constraints aren't met.
type ORCHESTRATOR_RUNTIME_ROLLBACK_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIME_ROLLBACK_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIME_ROLLBACK_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIME_ROLLBACK_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIME_ROLLBACK_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIME_ROLLBACK_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIME_ROLLBACK_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIME_ROLLBACK_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIME_ROLLBACK_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIME_ROLLBACK_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIME_ROLLBACK_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_RUNTIME_SEARCH_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ORCHESTRATOR_RUNTIME_SEARCH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_RUNTIME_SEARCH_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_RUNTIME_SEARCH_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_RUNTIME_SEARCH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_RUNTIME_SEARCH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_RUNTIME_SEARCH_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_RUNTIME_SEARCH_RequestMultiError is an error wrapping multiple
// validation errors returned by
// ORCHESTRATOR_RUNTIME_SEARCH_Request.ValidateAll() if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_SEARCH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_RUNTIME_SEARCH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_RUNTIME_SEARCH_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_RUNTIME_SEARCH_RequestValidationError is the validation error
// returned by ORCHESTRATOR_RUNTIME_SEARCH_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_RUNTIME_SEARCH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_RUNTIME_SEARCH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_RUNTIME_SEARCH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_RUNTIME_SEARCH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_RUNTIME_SEARCH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_RUNTIME_SEARCH_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_RUNTIME_SEARCH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_RUNTIME_SEARCH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_RUNTIME_SEARCH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_RUNTIME_SEARCH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_RUNTIME_SEARCH_RequestValidationError{}

// Validate checks the field values on ORCHESTRATOR_TERMINAL_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ORCHESTRATOR_TERMINAL_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ORCHESTRATOR_TERMINAL_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ORCHESTRATOR_TERMINAL_RequestMultiError, or nil if none found.
func (m *ORCHESTRATOR_TERMINAL_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ORCHESTRATOR_TERMINAL_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ORCHESTRATOR_TERMINAL_RequestMultiError(errors)
	}

	return nil
}

// ORCHESTRATOR_TERMINAL_RequestMultiError is an error wrapping multiple
// validation errors returned by ORCHESTRATOR_TERMINAL_Request.ValidateAll()
// if the designated constraints aren't met.
type ORCHESTRATOR_TERMINAL_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ORCHESTRATOR_TERMINAL_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ORCHESTRATOR_TERMINAL_RequestMultiError) AllErrors() []error { return m }

// ORCHESTRATOR_TERMINAL_RequestValidationError is the validation error
// returned by ORCHESTRATOR_TERMINAL_Request.Validate if the designated
// constraints aren't met.
type ORCHESTRATOR_TERMINAL_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ORCHESTRATOR_TERMINAL_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ORCHESTRATOR_TERMINAL_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ORCHESTRATOR_TERMINAL_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ORCHESTRATOR_TERMINAL_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ORCHESTRATOR_TERMINAL_RequestValidationError) ErrorName() string {
	return "ORCHESTRATOR_TERMINAL_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ORCHESTRATOR_TERMINAL_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sORCHESTRATOR_TERMINAL_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ORCHESTRATOR_TERMINAL_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ORCHESTRATOR_TERMINAL_RequestValidationError{}

// Validate checks the field values on Overview with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Overview) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Overview with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OverviewMultiError, or nil
// if none found.
func (m *Overview) ValidateAll() error {
	return m.validate(true)
}

func (m *Overview) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CPU

	// no validation rules for Mem

	// no validation rules for Nodes

	if len(errors) > 0 {
		return OverviewMultiError(errors)
	}

	return nil
}

// OverviewMultiError is an error wrapping multiple validation errors returned
// by Overview.ValidateAll() if the designated constraints aren't met.
type OverviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OverviewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OverviewMultiError) AllErrors() []error { return m }

// OverviewValidationError is the validation error returned by
// Overview.Validate if the designated constraints aren't met.
type OverviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverviewValidationError) ErrorName() string { return "OverviewValidationError" }

// Error satisfies the builtin error interface
func (e OverviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverviewValidationError{}

// Validate checks the field values on PageInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageInfoMultiError, or nil
// if none found.
func (m *PageInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PageInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNO

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PageInfoMultiError(errors)
	}

	return nil
}

// PageInfoMultiError is an error wrapping multiple validation errors returned
// by PageInfo.ValidateAll() if the designated constraints aren't met.
type PageInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageInfoMultiError) AllErrors() []error { return m }

// PageInfoValidationError is the validation error returned by
// PageInfo.Validate if the designated constraints aren't met.
type PageInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageInfoValidationError) ErrorName() string { return "PageInfoValidationError" }

// Error satisfies the builtin error interface
func (e PageInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageInfoValidationError{}

// Validate checks the field values on Pod with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pod with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PodMultiError, or nil if none found.
func (m *Pod) ValidateAll() error {
	return m.validate(true)
}

func (m *Pod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for IPAddress

	// no validation rules for Host

	// no validation rules for Phase

	// no validation rules for Message

	// no validation rules for StartedAt

	// no validation rules for Service

	// no validation rules for ClusterName

	// no validation rules for PodName

	// no validation rules for K8SNamespace

	if len(errors) > 0 {
		return PodMultiError(errors)
	}

	return nil
}

// PodMultiError is an error wrapping multiple validation errors returned by
// Pod.ValidateAll() if the designated constraints aren't met.
type PodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodMultiError) AllErrors() []error { return m }

// PodValidationError is the validation error returned by Pod.Validate if the
// designated constraints aren't met.
type PodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodValidationError) ErrorName() string { return "PodValidationError" }

// Error satisfies the builtin error interface
func (e PodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodValidationError{}

// Validate checks the field values on PodListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PodListRequestMultiError,
// or nil if none found.
func (m *PodListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PodListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeID

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return PodListRequestMultiError(errors)
	}

	return nil
}

// PodListRequestMultiError is an error wrapping multiple validation errors
// returned by PodListRequest.ValidateAll() if the designated constraints
// aren't met.
type PodListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodListRequestMultiError) AllErrors() []error { return m }

// PodListRequestValidationError is the validation error returned by
// PodListRequest.Validate if the designated constraints aren't met.
type PodListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodListRequestValidationError) ErrorName() string { return "PodListRequestValidationError" }

// Error satisfies the builtin error interface
func (e PodListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodListRequestValidationError{}

// Validate checks the field values on PodListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PodListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodListResponseMultiError, or nil if none found.
func (m *PodListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PodListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PodListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PodListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PodListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PodListResponseMultiError(errors)
	}

	return nil
}

// PodListResponseMultiError is an error wrapping multiple validation errors
// returned by PodListResponse.ValidateAll() if the designated constraints
// aren't met.
type PodListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodListResponseMultiError) AllErrors() []error { return m }

// PodListResponseValidationError is the validation error returned by
// PodListResponse.Validate if the designated constraints aren't met.
type PodListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodListResponseValidationError) ErrorName() string { return "PodListResponseValidationError" }

// Error satisfies the builtin error interface
func (e PodListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodListResponseValidationError{}

// Validate checks the field values on RuntimeCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RuntimeCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuntimeCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RuntimeCreateResponseMultiError, or nil if none found.
func (m *RuntimeCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RuntimeCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeCreateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RuntimeCreateResponseMultiError(errors)
	}

	return nil
}

// RuntimeCreateResponseMultiError is an error wrapping multiple validation
// errors returned by RuntimeCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type RuntimeCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeCreateResponseMultiError) AllErrors() []error { return m }

// RuntimeCreateResponseValidationError is the validation error returned by
// RuntimeCreateResponse.Validate if the designated constraints aren't met.
type RuntimeCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeCreateResponseValidationError) ErrorName() string {
	return "RuntimeCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RuntimeCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeCreateResponseValidationError{}

// Validate checks the field values on RuntimeDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuntimeDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuntimeDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuntimeDTOMultiError, or
// nil if none found.
func (m *RuntimeDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *RuntimeDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for GitBranch

	// no validation rules for Workspace

	// no validation rules for ClusterName

	// no validation rules for ClusterId

	// no validation rules for Status

	// no validation rules for ApplicationID

	// no validation rules for ApplicationName

	// no validation rules for ProjectID

	// no validation rules for ProjectName

	// no validation rules for OrgID

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuntimeDTOValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuntimeDTOValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuntimeDTOValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RuntimeDTOMultiError(errors)
	}

	return nil
}

// RuntimeDTOMultiError is an error wrapping multiple validation errors
// returned by RuntimeDTO.ValidateAll() if the designated constraints aren't met.
type RuntimeDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeDTOMultiError) AllErrors() []error { return m }

// RuntimeDTOValidationError is the validation error returned by
// RuntimeDTO.Validate if the designated constraints aren't met.
type RuntimeDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeDTOValidationError) ErrorName() string { return "RuntimeDTOValidationError" }

// Error satisfies the builtin error interface
func (e RuntimeDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeDTOValidationError{}

// Validate checks the field values on RuntimeDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RuntimeDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuntimeDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RuntimeDeleteResponseMultiError, or nil if none found.
func (m *RuntimeDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RuntimeDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeDeleteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeDeleteResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeDeleteResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RuntimeDeleteResponseMultiError(errors)
	}

	return nil
}

// RuntimeDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by RuntimeDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type RuntimeDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeDeleteResponseMultiError) AllErrors() []error { return m }

// RuntimeDeleteResponseValidationError is the validation error returned by
// RuntimeDeleteResponse.Validate if the designated constraints aren't met.
type RuntimeDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeDeleteResponseValidationError) ErrorName() string {
	return "RuntimeDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RuntimeDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeDeleteResponseValidationError{}

// Validate checks the field values on RuntimeInspectDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RuntimeInspectDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuntimeInspectDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RuntimeInspectDTOMultiError, or nil if none found.
func (m *RuntimeInspectDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *RuntimeInspectDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for ServiceGroupName

	// no validation rules for ServiceGroupNamespace

	// no validation rules for Source

	// no validation rules for Status

	// no validation rules for DeployStatus

	// no validation rules for DeleteStatus

	// no validation rules for ReleaseID

	// no validation rules for ClusterID

	// no validation rules for ClusterName

	// no validation rules for ClusterType

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeInspectDTOValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeInspectDTOValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeInspectDTOValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetExtra()))
		i := 0
		for key := range m.GetExtra() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetExtra()[key]
			_ = val

			// no validation rules for Extra[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RuntimeInspectDTOValidationError{
							field:  fmt.Sprintf("Extra[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RuntimeInspectDTOValidationError{
							field:  fmt.Sprintf("Extra[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RuntimeInspectDTOValidationError{
						field:  fmt.Sprintf("Extra[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for ProjectID

	{
		sorted_keys := make([]string, len(m.GetServices()))
		i := 0
		for key := range m.GetServices() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetServices()[key]
			_ = val

			// no validation rules for Services[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RuntimeInspectDTOValidationError{
							field:  fmt.Sprintf("Services[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RuntimeInspectDTOValidationError{
							field:  fmt.Sprintf("Services[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RuntimeInspectDTOValidationError{
						field:  fmt.Sprintf("Services[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetModuleErrMsg()))
		i := 0
		for key := range m.GetModuleErrMsg() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetModuleErrMsg()[key]
			_ = val

			// no validation rules for ModuleErrMsg[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RuntimeInspectDTOValidationError{
							field:  fmt.Sprintf("ModuleErrMsg[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RuntimeInspectDTOValidationError{
							field:  fmt.Sprintf("ModuleErrMsg[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RuntimeInspectDTOValidationError{
						field:  fmt.Sprintf("ModuleErrMsg[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetTimeCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeInspectDTOValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeInspectDTOValidationError{
					field:  "TimeCreated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeInspectDTOValidationError{
				field:  "TimeCreated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeInspectDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeInspectDTOValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeInspectDTOValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeInspectDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeInspectDTOValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeInspectDTOValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeployAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeInspectDTOValidationError{
					field:  "DeployAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeInspectDTOValidationError{
					field:  "DeployAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeInspectDTOValidationError{
				field:  "DeployAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuntimeInspectDTOValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuntimeInspectDTOValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuntimeInspectDTOValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Creator

	// no validation rules for ApplicationID

	// no validation rules for ApplicationName

	// no validation rules for DeploymentOrderId

	// no validation rules for DeploymentOrderName

	// no validation rules for ReleaseVersion

	// no validation rules for RawStatus

	// no validation rules for RawDeploymentStatus

	if len(errors) > 0 {
		return RuntimeInspectDTOMultiError(errors)
	}

	return nil
}

// RuntimeInspectDTOMultiError is an error wrapping multiple validation errors
// returned by RuntimeInspectDTO.ValidateAll() if the designated constraints
// aren't met.
type RuntimeInspectDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeInspectDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeInspectDTOMultiError) AllErrors() []error { return m }

// RuntimeInspectDTOValidationError is the validation error returned by
// RuntimeInspectDTO.Validate if the designated constraints aren't met.
type RuntimeInspectDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeInspectDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeInspectDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeInspectDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeInspectDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeInspectDTOValidationError) ErrorName() string {
	return "RuntimeInspectDTOValidationError"
}

// Error satisfies the builtin error interface
func (e RuntimeInspectDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeInspectDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeInspectDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeInspectDTOValidationError{}

// Validate checks the field values on RuntimeInspectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RuntimeInspectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuntimeInspectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RuntimeInspectRequestMultiError, or nil if none found.
func (m *RuntimeInspectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RuntimeInspectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IDOrName

	// no validation rules for Workspace

	// no validation rules for ApplicationID

	if len(errors) > 0 {
		return RuntimeInspectRequestMultiError(errors)
	}

	return nil
}

// RuntimeInspectRequestMultiError is an error wrapping multiple validation
// errors returned by RuntimeInspectRequest.ValidateAll() if the designated
// constraints aren't met.
type RuntimeInspectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeInspectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeInspectRequestMultiError) AllErrors() []error { return m }

// RuntimeInspectRequestValidationError is the validation error returned by
// RuntimeInspectRequest.Validate if the designated constraints aren't met.
type RuntimeInspectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeInspectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeInspectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeInspectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeInspectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeInspectRequestValidationError) ErrorName() string {
	return "RuntimeInspectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RuntimeInspectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeInspectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeInspectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeInspectRequestValidationError{}

// Validate checks the field values on RuntimeInspectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RuntimeInspectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuntimeInspectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RuntimeInspectResponseMultiError, or nil if none found.
func (m *RuntimeInspectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RuntimeInspectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeInspectResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeInspectResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeInspectResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RuntimeInspectResponseMultiError(errors)
	}

	return nil
}

// RuntimeInspectResponseMultiError is an error wrapping multiple validation
// errors returned by RuntimeInspectResponse.ValidateAll() if the designated
// constraints aren't met.
type RuntimeInspectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeInspectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeInspectResponseMultiError) AllErrors() []error { return m }

// RuntimeInspectResponseValidationError is the validation error returned by
// RuntimeInspectResponse.Validate if the designated constraints aren't met.
type RuntimeInspectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeInspectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeInspectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeInspectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeInspectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeInspectResponseValidationError) ErrorName() string {
	return "RuntimeInspectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RuntimeInspectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeInspectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeInspectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeInspectResponseValidationError{}

// Validate checks the field values on RuntimeKillPodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RuntimeKillPodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuntimeKillPodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RuntimeKillPodRequestMultiError, or nil if none found.
func (m *RuntimeKillPodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RuntimeKillPodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuntimeID

	// no validation rules for PodName

	if len(errors) > 0 {
		return RuntimeKillPodRequestMultiError(errors)
	}

	return nil
}

// RuntimeKillPodRequestMultiError is an error wrapping multiple validation
// errors returned by RuntimeKillPodRequest.ValidateAll() if the designated
// constraints aren't met.
type RuntimeKillPodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeKillPodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeKillPodRequestMultiError) AllErrors() []error { return m }

// RuntimeKillPodRequestValidationError is the validation error returned by
// RuntimeKillPodRequest.Validate if the designated constraints aren't met.
type RuntimeKillPodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeKillPodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeKillPodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeKillPodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeKillPodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeKillPodRequestValidationError) ErrorName() string {
	return "RuntimeKillPodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RuntimeKillPodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeKillPodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeKillPodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeKillPodRequestValidationError{}

// Validate checks the field values on RuntimeReleaseCreatePipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RuntimeReleaseCreatePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuntimeReleaseCreatePipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RuntimeReleaseCreatePipelineResponseMultiError, or nil if none found.
func (m *RuntimeReleaseCreatePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RuntimeReleaseCreatePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineID

	if len(errors) > 0 {
		return RuntimeReleaseCreatePipelineResponseMultiError(errors)
	}

	return nil
}

// RuntimeReleaseCreatePipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// RuntimeReleaseCreatePipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type RuntimeReleaseCreatePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeReleaseCreatePipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeReleaseCreatePipelineResponseMultiError) AllErrors() []error { return m }

// RuntimeReleaseCreatePipelineResponseValidationError is the validation error
// returned by RuntimeReleaseCreatePipelineResponse.Validate if the designated
// constraints aren't met.
type RuntimeReleaseCreatePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeReleaseCreatePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeReleaseCreatePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeReleaseCreatePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeReleaseCreatePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeReleaseCreatePipelineResponseValidationError) ErrorName() string {
	return "RuntimeReleaseCreatePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RuntimeReleaseCreatePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeReleaseCreatePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeReleaseCreatePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeReleaseCreatePipelineResponseValidationError{}

// Validate checks the field values on RuntimeReleaseCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RuntimeReleaseCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuntimeReleaseCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RuntimeReleaseCreateRequestMultiError, or nil if none found.
func (m *RuntimeReleaseCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RuntimeReleaseCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseID

	// no validation rules for Workspace

	// no validation rules for ProjectID

	// no validation rules for ApplicationID

	if len(errors) > 0 {
		return RuntimeReleaseCreateRequestMultiError(errors)
	}

	return nil
}

// RuntimeReleaseCreateRequestMultiError is an error wrapping multiple
// validation errors returned by RuntimeReleaseCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type RuntimeReleaseCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeReleaseCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeReleaseCreateRequestMultiError) AllErrors() []error { return m }

// RuntimeReleaseCreateRequestValidationError is the validation error returned
// by RuntimeReleaseCreateRequest.Validate if the designated constraints
// aren't met.
type RuntimeReleaseCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeReleaseCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeReleaseCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeReleaseCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeReleaseCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeReleaseCreateRequestValidationError) ErrorName() string {
	return "RuntimeReleaseCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RuntimeReleaseCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeReleaseCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeReleaseCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeReleaseCreateRequestValidationError{}

// Validate checks the field values on RuntimeServiceResourceDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RuntimeServiceResourceDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuntimeServiceResourceDTO with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RuntimeServiceResourceDTOMultiError, or nil if none found.
func (m *RuntimeServiceResourceDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *RuntimeServiceResourceDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CPU

	// no validation rules for Mem

	// no validation rules for Disk

	if len(errors) > 0 {
		return RuntimeServiceResourceDTOMultiError(errors)
	}

	return nil
}

// RuntimeServiceResourceDTOMultiError is an error wrapping multiple validation
// errors returned by RuntimeServiceResourceDTO.ValidateAll() if the
// designated constraints aren't met.
type RuntimeServiceResourceDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeServiceResourceDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeServiceResourceDTOMultiError) AllErrors() []error { return m }

// RuntimeServiceResourceDTOValidationError is the validation error returned by
// RuntimeServiceResourceDTO.Validate if the designated constraints aren't met.
type RuntimeServiceResourceDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeServiceResourceDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeServiceResourceDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeServiceResourceDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeServiceResourceDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeServiceResourceDTOValidationError) ErrorName() string {
	return "RuntimeServiceResourceDTOValidationError"
}

// Error satisfies the builtin error interface
func (e RuntimeServiceResourceDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeServiceResourceDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeServiceResourceDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeServiceResourceDTOValidationError{}

// Validate checks the field values on ScheduleLabelListData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleLabelListData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleLabelListData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleLabelListDataMultiError, or nil if none found.
func (m *ScheduleLabelListData) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleLabelListData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Labels

	if len(errors) > 0 {
		return ScheduleLabelListDataMultiError(errors)
	}

	return nil
}

// ScheduleLabelListDataMultiError is an error wrapping multiple validation
// errors returned by ScheduleLabelListData.ValidateAll() if the designated
// constraints aren't met.
type ScheduleLabelListDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleLabelListDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleLabelListDataMultiError) AllErrors() []error { return m }

// ScheduleLabelListDataValidationError is the validation error returned by
// ScheduleLabelListData.Validate if the designated constraints aren't met.
type ScheduleLabelListDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleLabelListDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleLabelListDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleLabelListDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleLabelListDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleLabelListDataValidationError) ErrorName() string {
	return "ScheduleLabelListDataValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleLabelListDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleLabelListData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleLabelListDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleLabelListDataValidationError{}

// Validate checks the field values on ScheduleLabelListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleLabelListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleLabelListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleLabelListRequestMultiError, or nil if none found.
func (m *ScheduleLabelListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleLabelListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ScheduleLabelListRequestMultiError(errors)
	}

	return nil
}

// ScheduleLabelListRequestMultiError is an error wrapping multiple validation
// errors returned by ScheduleLabelListRequest.ValidateAll() if the designated
// constraints aren't met.
type ScheduleLabelListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleLabelListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleLabelListRequestMultiError) AllErrors() []error { return m }

// ScheduleLabelListRequestValidationError is the validation error returned by
// ScheduleLabelListRequest.Validate if the designated constraints aren't met.
type ScheduleLabelListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleLabelListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleLabelListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleLabelListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleLabelListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleLabelListRequestValidationError) ErrorName() string {
	return "ScheduleLabelListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleLabelListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleLabelListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleLabelListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleLabelListRequestValidationError{}

// Validate checks the field values on ScheduleLabelListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleLabelListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleLabelListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleLabelListResponseMultiError, or nil if none found.
func (m *ScheduleLabelListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleLabelListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleLabelListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleLabelListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleLabelListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScheduleLabelListResponseMultiError(errors)
	}

	return nil
}

// ScheduleLabelListResponseMultiError is an error wrapping multiple validation
// errors returned by ScheduleLabelListResponse.ValidateAll() if the
// designated constraints aren't met.
type ScheduleLabelListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleLabelListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleLabelListResponseMultiError) AllErrors() []error { return m }

// ScheduleLabelListResponseValidationError is the validation error returned by
// ScheduleLabelListResponse.Validate if the designated constraints aren't met.
type ScheduleLabelListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleLabelListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleLabelListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleLabelListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleLabelListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleLabelListResponseValidationError) ErrorName() string {
	return "ScheduleLabelListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleLabelListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleLabelListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleLabelListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleLabelListResponseValidationError{}

// Validate checks the field values on ScheduleLabelSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleLabelSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleLabelSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleLabelSetRequestMultiError, or nil if none found.
func (m *ScheduleLabelSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleLabelSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tags

	// no validation rules for ClusterName

	// no validation rules for ClusterType

	// no validation rules for SoldierURL

	if len(errors) > 0 {
		return ScheduleLabelSetRequestMultiError(errors)
	}

	return nil
}

// ScheduleLabelSetRequestMultiError is an error wrapping multiple validation
// errors returned by ScheduleLabelSetRequest.ValidateAll() if the designated
// constraints aren't met.
type ScheduleLabelSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleLabelSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleLabelSetRequestMultiError) AllErrors() []error { return m }

// ScheduleLabelSetRequestValidationError is the validation error returned by
// ScheduleLabelSetRequest.Validate if the designated constraints aren't met.
type ScheduleLabelSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleLabelSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleLabelSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleLabelSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleLabelSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleLabelSetRequestValidationError) ErrorName() string {
	return "ScheduleLabelSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleLabelSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleLabelSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleLabelSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleLabelSetRequestValidationError{}

// Validate checks the field values on ScheduleLabelSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleLabelSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleLabelSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleLabelSetResponseMultiError, or nil if none found.
func (m *ScheduleLabelSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleLabelSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ScheduleLabelSetResponseMultiError(errors)
	}

	return nil
}

// ScheduleLabelSetResponseMultiError is an error wrapping multiple validation
// errors returned by ScheduleLabelSetResponse.ValidateAll() if the designated
// constraints aren't met.
type ScheduleLabelSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleLabelSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleLabelSetResponseMultiError) AllErrors() []error { return m }

// ScheduleLabelSetResponseValidationError is the validation error returned by
// ScheduleLabelSetResponse.Validate if the designated constraints aren't met.
type ScheduleLabelSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleLabelSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleLabelSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleLabelSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleLabelSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleLabelSetResponseValidationError) ErrorName() string {
	return "ScheduleLabelSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleLabelSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleLabelSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleLabelSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleLabelSetResponseValidationError{}
