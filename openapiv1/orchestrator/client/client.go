// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: orchestrator.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/orchestrator/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// Orchestrator orchestrator.proto
	Orchestrator() pb.OrchestratorClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		orchestrator: pb.NewOrchestratorClient(cc),
	}
}

type serviceClients struct {
	orchestrator pb.OrchestratorClient
}

func (c *serviceClients) Orchestrator() pb.OrchestratorClient {
	return c.orchestrator
}

type orchestratorWrapper struct {
	client pb.OrchestratorClient
	opts   []grpc1.CallOption
}

func (s *orchestratorWrapper) ADDON_METRICS_HISTOGRAM(ctx context.Context, req *pb.ADDON_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error) {
	return s.client.ADDON_METRICS_HISTOGRAM(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDONS_SCALE(ctx context.Context, req *pb.ORCHESTRATOR_ADDONS_SCALE_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_ADDONS_SCALE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_AVAILABLE(ctx context.Context, req *pb.AddonAvailableRequest) (*pb.AddonAvailableResponse, error) {
	return s.client.ORCHESTRATOR_ADDON_AVAILABLE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_CREATE(ctx context.Context, req *pb.AddonDirectCreateRequest) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_ADDON_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_CREATE_CUSTOM(ctx context.Context, req *pb.CustomAddonCreateRequest) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_ADDON_CREATE_CUSTOM(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_CUSTOM(ctx context.Context, req *pb.ORCHESTRATOR_ADDON_CUSTOM_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_ADDON_CUSTOM(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_DELETE(ctx context.Context, req *pb.ORCHESTRATOR_ADDON_DELETE_Request) (*pb.AddonFetchResponse, error) {
	return s.client.ORCHESTRATOR_ADDON_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_EXPORT(ctx context.Context, req *pb.ORCHESTRATOR_ADDON_EXPORT_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_ADDON_EXPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_EXTENSION(ctx context.Context, req *pb.ORCHESTRATOR_ADDON_EXTENSION_Request) (*pb.AddonExtensionResponse, error) {
	return s.client.ORCHESTRATOR_ADDON_EXTENSION(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_FETCH(ctx context.Context, req *pb.ORCHESTRATOR_ADDON_FETCH_Request) (*pb.AddonFetchResponse, error) {
	return s.client.ORCHESTRATOR_ADDON_FETCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_IMPORT(ctx context.Context, req *pb.ORCHESTRATOR_ADDON_IMPORT_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_ADDON_IMPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_LIST(ctx context.Context, req *pb.AddonListRequest) (*pb.AddonListResponse, error) {
	return s.client.ORCHESTRATOR_ADDON_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_LOGS(ctx context.Context, req *pb.ORCHESTRATOR_ADDON_LOGS_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_ADDON_LOGS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_MENU(ctx context.Context, req *pb.ORCHESTRATOR_ADDON_MENU_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_ADDON_MENU(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_REFERENCES(ctx context.Context, req *pb.ORCHESTRATOR_ADDON_REFERENCES_Request) (*pb.AddonReferencesResponse, error) {
	return s.client.ORCHESTRATOR_ADDON_REFERENCES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_TENANT_CREATE(ctx context.Context, req *pb.AddonTenantCreateRequest) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_ADDON_TENANT_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ADDON_UPDATE_CUSTOM(ctx context.Context, req *pb.CustomAddonUpdateRequest) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_ADDON_UPDATE_CUSTOM(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_CLUSTER_INSTANCES_USAGE(ctx context.Context, req *pb.ORCHESTRATOR_CLUSTER_INSTANCES_USAGE_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_CLUSTER_INSTANCES_USAGE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_ADDONS(ctx context.Context, req *pb.ORCHESTRATOR_DEPLOYMENT_ADDONS_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_ADDONS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_APPROVE(ctx context.Context, req *pb.DeploymentApproveRequest) (*pb.DeploymentApproveResponse, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_APPROVE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_CANCEL(ctx context.Context, req *pb.DeploymentCancelRequest) (*pb.DeploymentCancelResponse, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_CANCEL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_DOMAINS(ctx context.Context, req *pb.ORCHESTRATOR_DEPLOYMENT_DOMAINS_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_DOMAINS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_LIST(ctx context.Context, req *pb.DeploymentListRequest) (*pb.DeploymentListResponse, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED(ctx context.Context, req *pb.ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED_Request) (*pb.DeploymentDetailListResponse, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_LIST_APPROVED(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL(ctx context.Context, req *pb.ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL_Request) (*pb.DeploymentDetailListResponse, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_LIST_LAUNCHED_APPROVAL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL(ctx context.Context, req *pb.ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL_Request) (*pb.DeploymentDetailListResponse, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_LIST_PENDING_APPROVAL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL(ctx context.Context, req *pb.ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_ORDER_CANCEL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE(ctx context.Context, req *pb.ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_ORDER_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY(ctx context.Context, req *pb.ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_ORDER_DEPLOY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_ORDER_GET(ctx context.Context, req *pb.ORCHESTRATOR_DEPLOYMENT_ORDER_GET_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_ORDER_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_ORDER_LIST(ctx context.Context, req *pb.ORCHESTRATOR_DEPLOYMENT_ORDER_LIST_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_ORDER_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL(ctx context.Context, req *pb.ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_ORDER_RENDER_DETAIL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS(ctx context.Context, req *pb.ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_QUERY_STATUS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_DEPLOYMENT_SERVICES(ctx context.Context, req *pb.ORCHESTRATOR_DEPLOYMENT_SERVICES_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_DEPLOYMENT_SERVICES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES(ctx context.Context, req *pb.AppWorkspaceReleasesGetRequest) (*pb.AppWorkspaceReleasesGetResponse, error) {
	return s.client.ORCHESTRATOR_GET_APP_WORKSPACE_RELEASES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_INSTANCES_USAGE(ctx context.Context, req *pb.ORCHESTRATOR_INSTANCES_USAGE_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_INSTANCES_USAGE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_MICRO_SERVICE_MENUS(ctx context.Context, req *pb.ORCHESTRATOR_MICRO_SERVICE_MENUS_Request) (*pb.MicroServiceMenuResponseData, error) {
	return s.client.ORCHESTRATOR_MICRO_SERVICE_MENUS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_MICRO_SERVICE_PROJECTS(ctx context.Context, req *pb.ORCHESTRATOR_MICRO_SERVICE_PROJECTS_Request) (*pb.MicroServiceProjectResponse, error) {
	return s.client.ORCHESTRATOR_MICRO_SERVICE_PROJECTS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION(ctx context.Context, req *pb.MiddlewareListRequest) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_MIDDLEWARE_ADDON_CLASSIFICATION(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_MIDDLEWARE_DAILY(ctx context.Context, req *pb.MiddlewareListRequest) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_MIDDLEWARE_DAILY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_MIDDLEWARE_FETCH(ctx context.Context, req *pb.ORCHESTRATOR_MIDDLEWARE_FETCH_Request) (*pb.MiddlewareFetchResponse, error) {
	return s.client.ORCHESTRATOR_MIDDLEWARE_FETCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE(ctx context.Context, req *pb.ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE_Request) (*pb.MiddlewareResourceFetchResponse, error) {
	return s.client.ORCHESTRATOR_MIDDLEWARE_FETCH_RESOURCE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_MIDDLEWARE_LIST(ctx context.Context, req *pb.MiddlewareListRequest) (*pb.MiddlewareListResponse, error) {
	return s.client.ORCHESTRATOR_MIDDLEWARE_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_MIGRATION_LOG(ctx context.Context, req *pb.ORCHESTRATOR_MIGRATION_LOG_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_MIGRATION_LOG(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_NODELABEL_LIST(ctx context.Context, req *pb.ScheduleLabelListRequest) (*pb.ScheduleLabelListResponse, error) {
	return s.client.ORCHESTRATOR_NODELABEL_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_NODELABEL_SET(ctx context.Context, req *pb.ScheduleLabelSetRequest) (*pb.ScheduleLabelSetResponse, error) {
	return s.client.ORCHESTRATOR_NODELABEL_SET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_ORG_JOB_LOG(ctx context.Context, req *pb.ORCHESTRATOR_ORG_JOB_LOG_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_ORG_JOB_LOG(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_PROJECT_RUNTIME_COUNT(ctx context.Context, req *pb.ORCHESTRATOR_PROJECT_RUNTIME_COUNT_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_PROJECT_RUNTIME_COUNT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIMES_BATCH_SCALE(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIMES_BATCH_SCALE_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIMES_BATCH_SCALE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_BATCH_SERVICES(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIME_BATCH_SERVICES_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIME_BATCH_SERVICES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_BULK_GET_STATUS(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIME_BULK_GET_STATUS_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIME_BULK_GET_STATUS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_CREATE(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIME_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIME_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_DELETE(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIME_DELETE_Request) (*pb.RuntimeDeleteResponse, error) {
	return s.client.ORCHESTRATOR_RUNTIME_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_DEPLOY_LOG(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIME_DEPLOY_LOG_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIME_DEPLOY_LOG(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_DOMAIN_GET(ctx context.Context, req *pb.DomainListRequest) (*pb.DomainListResponse, error) {
	return s.client.ORCHESTRATOR_RUNTIME_DOMAIN_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE(ctx context.Context, req *pb.DomainUpdateRequest) (*pb.DomainUpdateResponse, error) {
	return s.client.ORCHESTRATOR_RUNTIME_DOMAIN_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_GROUP_BY_APPS(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIME_GROUP_BY_APPS_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIME_GROUP_BY_APPS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_INSPECT(ctx context.Context, req *pb.RuntimeInspectRequest) (*pb.RuntimeInspectResponse, error) {
	return s.client.ORCHESTRATOR_RUNTIME_INSPECT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIME_INSPECT_SERVICEGROUP(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_KILLPOD(ctx context.Context, req *pb.RuntimeKillPodRequest) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIME_KILLPOD(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIME_LIST_MY_RUNTIMES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_REDEPLOY(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIME_REDEPLOY_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIME_REDEPLOY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIME_REDEPLOY_ACTION(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_RELEASE_CREATE(ctx context.Context, req *pb.RuntimeReleaseCreateRequest) (*pb.RuntimeReleaseCreatePipelineResponse, error) {
	return s.client.ORCHESTRATOR_RUNTIME_RELEASE_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION(ctx context.Context, req *pb.RuntimeReleaseCreateRequest) (*pb.RuntimeCreateResponse, error) {
	return s.client.ORCHESTRATOR_RUNTIME_RELEASE_CREATE_ACTION(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_ROLLBACK(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIME_ROLLBACK_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIME_ROLLBACK(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIME_ROLLBACK_ACTION(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_RUNTIME_SEARCH(ctx context.Context, req *pb.ORCHESTRATOR_RUNTIME_SEARCH_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_RUNTIME_SEARCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_SERVICE_INSTANCE_LIST(ctx context.Context, req *pb.ContainerListRequest) (*pb.ContainerListResponse, error) {
	return s.client.ORCHESTRATOR_SERVICE_INSTANCE_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_SERVICE_POD_LIST(ctx context.Context, req *pb.PodListRequest) (*pb.PodListResponse, error) {
	return s.client.ORCHESTRATOR_SERVICE_POD_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *orchestratorWrapper) ORCHESTRATOR_TERMINAL(ctx context.Context, req *pb.ORCHESTRATOR_TERMINAL_Request) (*emptypb.Empty, error) {
	return s.client.ORCHESTRATOR_TERMINAL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
