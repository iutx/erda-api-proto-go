// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: api_gateway.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type API_GATEWAY_API_CREATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_API_CREATE_Request) Reset() {
	*x = API_GATEWAY_API_CREATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_API_CREATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_API_CREATE_Request) ProtoMessage() {}

func (x *API_GATEWAY_API_CREATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_API_CREATE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_API_CREATE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{0}
}

type API_GATEWAY_API_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId string `protobuf:"bytes,1,opt,name=apiId,proto3" json:"apiId,omitempty"` // generated from path variable: apiId. You should change the proto type if necessary.
}

func (x *API_GATEWAY_API_DELETE_Request) Reset() {
	*x = API_GATEWAY_API_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_API_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_API_DELETE_Request) ProtoMessage() {}

func (x *API_GATEWAY_API_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_API_DELETE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_API_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *API_GATEWAY_API_DELETE_Request) GetApiId() string {
	if x != nil {
		return x.ApiId
	}
	return ""
}

type API_GATEWAY_API_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_API_LIST_Request) Reset() {
	*x = API_GATEWAY_API_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_API_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_API_LIST_Request) ProtoMessage() {}

func (x *API_GATEWAY_API_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_API_LIST_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_API_LIST_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{2}
}

type API_GATEWAY_API_UPDATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiId string `protobuf:"bytes,1,opt,name=apiId,proto3" json:"apiId,omitempty"` // generated from path variable: apiId. You should change the proto type if necessary.
}

func (x *API_GATEWAY_API_UPDATE_Request) Reset() {
	*x = API_GATEWAY_API_UPDATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_API_UPDATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_API_UPDATE_Request) ProtoMessage() {}

func (x *API_GATEWAY_API_UPDATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_API_UPDATE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_API_UPDATE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *API_GATEWAY_API_UPDATE_Request) GetApiId() string {
	if x != nil {
		return x.ApiId
	}
	return ""
}

type API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"` // generated from path variable: category. You should change the proto type if necessary.
}

func (x *API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request) Reset() {
	*x = API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request) ProtoMessage() {}

func (x *API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type API_GATEWAY_CATEGORY_CREATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"` // generated from path variable: category. You should change the proto type if necessary.
}

func (x *API_GATEWAY_CATEGORY_CREATE_Request) Reset() {
	*x = API_GATEWAY_CATEGORY_CREATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CATEGORY_CREATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CATEGORY_CREATE_Request) ProtoMessage() {}

func (x *API_GATEWAY_CATEGORY_CREATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CATEGORY_CREATE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CATEGORY_CREATE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *API_GATEWAY_CATEGORY_CREATE_Request) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type API_GATEWAY_CATEGORY_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"` // generated from path variable: category. You should change the proto type if necessary.
	PolicyId string `protobuf:"bytes,2,opt,name=policyId,proto3" json:"policyId,omitempty"` // generated from path variable: policyId. You should change the proto type if necessary.
}

func (x *API_GATEWAY_CATEGORY_DELETE_Request) Reset() {
	*x = API_GATEWAY_CATEGORY_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CATEGORY_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CATEGORY_DELETE_Request) ProtoMessage() {}

func (x *API_GATEWAY_CATEGORY_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CATEGORY_DELETE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CATEGORY_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *API_GATEWAY_CATEGORY_DELETE_Request) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *API_GATEWAY_CATEGORY_DELETE_Request) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type API_GATEWAY_CATEGORY_INFO_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"` // generated from path variable: category. You should change the proto type if necessary.
}

func (x *API_GATEWAY_CATEGORY_INFO_Request) Reset() {
	*x = API_GATEWAY_CATEGORY_INFO_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CATEGORY_INFO_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CATEGORY_INFO_Request) ProtoMessage() {}

func (x *API_GATEWAY_CATEGORY_INFO_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CATEGORY_INFO_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CATEGORY_INFO_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{7}
}

func (x *API_GATEWAY_CATEGORY_INFO_Request) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type API_GATEWAY_CATEGORY_UPDATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"` // generated from path variable: category. You should change the proto type if necessary.
	PolicyId string `protobuf:"bytes,2,opt,name=policyId,proto3" json:"policyId,omitempty"` // generated from path variable: policyId. You should change the proto type if necessary.
}

func (x *API_GATEWAY_CATEGORY_UPDATE_Request) Reset() {
	*x = API_GATEWAY_CATEGORY_UPDATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CATEGORY_UPDATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CATEGORY_UPDATE_Request) ProtoMessage() {}

func (x *API_GATEWAY_CATEGORY_UPDATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CATEGORY_UPDATE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CATEGORY_UPDATE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{8}
}

func (x *API_GATEWAY_CATEGORY_UPDATE_Request) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *API_GATEWAY_CATEGORY_UPDATE_Request) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type API_GATEWAY_CHECK_COMPAT_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_CHECK_COMPAT_Request) Reset() {
	*x = API_GATEWAY_CHECK_COMPAT_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CHECK_COMPAT_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CHECK_COMPAT_Request) ProtoMessage() {}

func (x *API_GATEWAY_CHECK_COMPAT_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CHECK_COMPAT_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CHECK_COMPAT_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{9}
}

type API_GATEWAY_CONSUMER_API_EDIT_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_CONSUMER_API_EDIT_Request) Reset() {
	*x = API_GATEWAY_CONSUMER_API_EDIT_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CONSUMER_API_EDIT_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CONSUMER_API_EDIT_Request) ProtoMessage() {}

func (x *API_GATEWAY_CONSUMER_API_EDIT_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CONSUMER_API_EDIT_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CONSUMER_API_EDIT_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{10}
}

type API_GATEWAY_CONSUMER_API_INFO_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_CONSUMER_API_INFO_Request) Reset() {
	*x = API_GATEWAY_CONSUMER_API_INFO_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CONSUMER_API_INFO_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CONSUMER_API_INFO_Request) ProtoMessage() {}

func (x *API_GATEWAY_CONSUMER_API_INFO_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CONSUMER_API_INFO_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CONSUMER_API_INFO_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{11}
}

type API_GATEWAY_CONSUMER_CREATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_CONSUMER_CREATE_Request) Reset() {
	*x = API_GATEWAY_CONSUMER_CREATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CONSUMER_CREATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CONSUMER_CREATE_Request) ProtoMessage() {}

func (x *API_GATEWAY_CONSUMER_CREATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CONSUMER_CREATE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CONSUMER_CREATE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{12}
}

type API_GATEWAY_CONSUMER_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerId string `protobuf:"bytes,1,opt,name=consumerId,proto3" json:"consumerId,omitempty"` // generated from path variable: consumerId. You should change the proto type if necessary.
}

func (x *API_GATEWAY_CONSUMER_DELETE_Request) Reset() {
	*x = API_GATEWAY_CONSUMER_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CONSUMER_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CONSUMER_DELETE_Request) ProtoMessage() {}

func (x *API_GATEWAY_CONSUMER_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CONSUMER_DELETE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CONSUMER_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{13}
}

func (x *API_GATEWAY_CONSUMER_DELETE_Request) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

type API_GATEWAY_CONSUMER_EDIT_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_CONSUMER_EDIT_Request) Reset() {
	*x = API_GATEWAY_CONSUMER_EDIT_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CONSUMER_EDIT_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CONSUMER_EDIT_Request) ProtoMessage() {}

func (x *API_GATEWAY_CONSUMER_EDIT_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CONSUMER_EDIT_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CONSUMER_EDIT_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{14}
}

type API_GATEWAY_CONSUMER_INFO_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerId string `protobuf:"bytes,1,opt,name=consumerId,proto3" json:"consumerId,omitempty"` // generated from path variable: consumerId. You should change the proto type if necessary.
}

func (x *API_GATEWAY_CONSUMER_INFO_Request) Reset() {
	*x = API_GATEWAY_CONSUMER_INFO_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CONSUMER_INFO_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CONSUMER_INFO_Request) ProtoMessage() {}

func (x *API_GATEWAY_CONSUMER_INFO_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CONSUMER_INFO_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CONSUMER_INFO_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{15}
}

func (x *API_GATEWAY_CONSUMER_INFO_Request) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

type API_GATEWAY_CONSUMER_INFO_UPDATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerId string `protobuf:"bytes,1,opt,name=consumerId,proto3" json:"consumerId,omitempty"` // generated from path variable: consumerId. You should change the proto type if necessary.
}

func (x *API_GATEWAY_CONSUMER_INFO_UPDATE_Request) Reset() {
	*x = API_GATEWAY_CONSUMER_INFO_UPDATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CONSUMER_INFO_UPDATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CONSUMER_INFO_UPDATE_Request) ProtoMessage() {}

func (x *API_GATEWAY_CONSUMER_INFO_UPDATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CONSUMER_INFO_UPDATE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CONSUMER_INFO_UPDATE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{16}
}

func (x *API_GATEWAY_CONSUMER_INFO_UPDATE_Request) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

type API_GATEWAY_CONSUMER_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_CONSUMER_LIST_Request) Reset() {
	*x = API_GATEWAY_CONSUMER_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_CONSUMER_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_CONSUMER_LIST_Request) ProtoMessage() {}

func (x *API_GATEWAY_CONSUMER_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_CONSUMER_LIST_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_CONSUMER_LIST_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{17}
}

type API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request) Reset() {
	*x = API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request) ProtoMessage() {}

func (x *API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{18}
}

type API_GATEWAY_DOMAIN_INFO_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_DOMAIN_INFO_Request) Reset() {
	*x = API_GATEWAY_DOMAIN_INFO_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_DOMAIN_INFO_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_DOMAIN_INFO_Request) ProtoMessage() {}

func (x *API_GATEWAY_DOMAIN_INFO_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_DOMAIN_INFO_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_DOMAIN_INFO_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{19}
}

type API_GATEWAY_OPENAPI_CREATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_OPENAPI_CREATE_Request) Reset() {
	*x = API_GATEWAY_OPENAPI_CREATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_OPENAPI_CREATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_OPENAPI_CREATE_Request) ProtoMessage() {}

func (x *API_GATEWAY_OPENAPI_CREATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_OPENAPI_CREATE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_OPENAPI_CREATE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{20}
}

type API_GATEWAY_OPENAPI_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_OPENAPI_DELETE_Request) Reset() {
	*x = API_GATEWAY_OPENAPI_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_OPENAPI_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_OPENAPI_DELETE_Request) ProtoMessage() {}

func (x *API_GATEWAY_OPENAPI_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_OPENAPI_DELETE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_OPENAPI_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{21}
}

type API_GATEWAY_OPENAPI_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_OPENAPI_GET_Request) Reset() {
	*x = API_GATEWAY_OPENAPI_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_OPENAPI_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_OPENAPI_GET_Request) ProtoMessage() {}

func (x *API_GATEWAY_OPENAPI_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_OPENAPI_GET_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_OPENAPI_GET_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{22}
}

type API_GATEWAY_OPENAPI_UPDATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_OPENAPI_UPDATE_Request) Reset() {
	*x = API_GATEWAY_OPENAPI_UPDATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_OPENAPI_UPDATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_OPENAPI_UPDATE_Request) ProtoMessage() {}

func (x *API_GATEWAY_OPENAPI_UPDATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_OPENAPI_UPDATE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_OPENAPI_UPDATE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{23}
}

type API_GATEWAY_PUBLISH_AUTHN_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiPublishId string `protobuf:"bytes,1,opt,name=apiPublishId,proto3" json:"apiPublishId,omitempty"` // generated from path variable: apiPublishId. You should change the proto type if necessary.
}

func (x *API_GATEWAY_PUBLISH_AUTHN_GET_Request) Reset() {
	*x = API_GATEWAY_PUBLISH_AUTHN_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_PUBLISH_AUTHN_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_PUBLISH_AUTHN_GET_Request) ProtoMessage() {}

func (x *API_GATEWAY_PUBLISH_AUTHN_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_PUBLISH_AUTHN_GET_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_PUBLISH_AUTHN_GET_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{24}
}

func (x *API_GATEWAY_PUBLISH_AUTHN_GET_Request) GetApiPublishId() string {
	if x != nil {
		return x.ApiPublishId
	}
	return ""
}

type API_GATEWAY_PUBLISH_SUBSCRIBE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiPublishId string `protobuf:"bytes,1,opt,name=apiPublishId,proto3" json:"apiPublishId,omitempty"` // generated from path variable: apiPublishId. You should change the proto type if necessary.
}

func (x *API_GATEWAY_PUBLISH_SUBSCRIBE_Request) Reset() {
	*x = API_GATEWAY_PUBLISH_SUBSCRIBE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_PUBLISH_SUBSCRIBE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_PUBLISH_SUBSCRIBE_Request) ProtoMessage() {}

func (x *API_GATEWAY_PUBLISH_SUBSCRIBE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_PUBLISH_SUBSCRIBE_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_PUBLISH_SUBSCRIBE_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{25}
}

func (x *API_GATEWAY_PUBLISH_SUBSCRIBE_Request) GetApiPublishId() string {
	if x != nil {
		return x.ApiPublishId
	}
	return ""
}

type API_GATEWAY_PUBLISH_SWAGGER_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiPublishId string `protobuf:"bytes,1,opt,name=apiPublishId,proto3" json:"apiPublishId,omitempty"` // generated from path variable: apiPublishId. You should change the proto type if necessary.
}

func (x *API_GATEWAY_PUBLISH_SWAGGER_GET_Request) Reset() {
	*x = API_GATEWAY_PUBLISH_SWAGGER_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_PUBLISH_SWAGGER_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_PUBLISH_SWAGGER_GET_Request) ProtoMessage() {}

func (x *API_GATEWAY_PUBLISH_SWAGGER_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_PUBLISH_SWAGGER_GET_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_PUBLISH_SWAGGER_GET_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{26}
}

func (x *API_GATEWAY_PUBLISH_SWAGGER_GET_Request) GetApiPublishId() string {
	if x != nil {
		return x.ApiPublishId
	}
	return ""
}

type API_GATEWAY_REGISTER_APPS_INFO_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_REGISTER_APPS_INFO_Request) Reset() {
	*x = API_GATEWAY_REGISTER_APPS_INFO_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_REGISTER_APPS_INFO_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_REGISTER_APPS_INFO_Request) ProtoMessage() {}

func (x *API_GATEWAY_REGISTER_APPS_INFO_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_REGISTER_APPS_INFO_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_REGISTER_APPS_INFO_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{27}
}

type API_GATEWAY_REGISTER_PUBLISH_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiRegisterId string `protobuf:"bytes,1,opt,name=apiRegisterId,proto3" json:"apiRegisterId,omitempty"` // generated from path variable: apiRegisterId. You should change the proto type if necessary.
}

func (x *API_GATEWAY_REGISTER_PUBLISH_Request) Reset() {
	*x = API_GATEWAY_REGISTER_PUBLISH_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_REGISTER_PUBLISH_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_REGISTER_PUBLISH_Request) ProtoMessage() {}

func (x *API_GATEWAY_REGISTER_PUBLISH_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_REGISTER_PUBLISH_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_REGISTER_PUBLISH_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{28}
}

func (x *API_GATEWAY_REGISTER_PUBLISH_Request) GetApiRegisterId() string {
	if x != nil {
		return x.ApiRegisterId
	}
	return ""
}

type API_GATEWAY_REGISTER_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_REGISTER_Request) Reset() {
	*x = API_GATEWAY_REGISTER_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_REGISTER_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_REGISTER_Request) ProtoMessage() {}

func (x *API_GATEWAY_REGISTER_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_REGISTER_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_REGISTER_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{29}
}

type API_GATEWAY_REGISTER_STATUS_GET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiRegisterId string `protobuf:"bytes,1,opt,name=apiRegisterId,proto3" json:"apiRegisterId,omitempty"` // generated from path variable: apiRegisterId. You should change the proto type if necessary.
}

func (x *API_GATEWAY_REGISTER_STATUS_GET_Request) Reset() {
	*x = API_GATEWAY_REGISTER_STATUS_GET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_REGISTER_STATUS_GET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_REGISTER_STATUS_GET_Request) ProtoMessage() {}

func (x *API_GATEWAY_REGISTER_STATUS_GET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_REGISTER_STATUS_GET_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_REGISTER_STATUS_GET_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{30}
}

func (x *API_GATEWAY_REGISTER_STATUS_GET_Request) GetApiRegisterId() string {
	if x != nil {
		return x.ApiRegisterId
	}
	return ""
}

type API_GATEWAY_UI_TYPE_INFO_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *API_GATEWAY_UI_TYPE_INFO_Request) Reset() {
	*x = API_GATEWAY_UI_TYPE_INFO_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gateway_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *API_GATEWAY_UI_TYPE_INFO_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*API_GATEWAY_UI_TYPE_INFO_Request) ProtoMessage() {}

func (x *API_GATEWAY_UI_TYPE_INFO_Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_gateway_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use API_GATEWAY_UI_TYPE_INFO_Request.ProtoReflect.Descriptor instead.
func (*API_GATEWAY_UI_TYPE_INFO_Request) Descriptor() ([]byte, []int) {
	return file_api_gateway_proto_rawDescGZIP(), []int{31}
}

var File_api_gateway_proto protoreflect.FileDescriptor

var file_api_gateway_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x20, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x5f, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57,
	0x41, 0x59, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x41,
	0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x1e, 0x41,
	0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x69, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x2d, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57,
	0x41, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x22, 0x41, 0x0a, 0x23, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0x5d, 0x0a, 0x23, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57,
	0x41, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x22, 0x3f, 0x0a, 0x21, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41,
	0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0x5d, 0x0a, 0x23, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57,
	0x41, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41,
	0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x25, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41,
	0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x27, 0x0a, 0x25, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x41, 0x50, 0x49, 0x5f,
	0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x45, 0x0a, 0x23, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41,
	0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x21, 0x41,
	0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55,
	0x4d, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x4a, 0x0a, 0x28, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21,
	0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x55, 0x4d, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x2d, 0x0a, 0x2b, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x21, 0x0a, 0x1f, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f,
	0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57,
	0x41, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x41, 0x50, 0x49,
	0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x21, 0x0a, 0x1f, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41,
	0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x25, 0x41, 0x50, 0x49, 0x5f,
	0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x25, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x57, 0x41, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x70, 0x69, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x64, 0x22, 0x4d, 0x0a, 0x27, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41,
	0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x53, 0x57, 0x41, 0x47, 0x47, 0x45,
	0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x70, 0x69, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x64, 0x22, 0x28, 0x0a, 0x26, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x24, 0x41,
	0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x41, 0x50, 0x49,
	0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x27, 0x41, 0x50, 0x49,
	0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x69,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x41, 0x50,
	0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xd6,
	0x38, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0xad,
	0x01, 0x0a, 0x16, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x10, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0xfa,
	0x81, 0xf9, 0x1b, 0x2a, 0x0a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x12, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x61, 0x70, 0x69, 0x12, 0xbd,
	0x01, 0x0a, 0x16, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x7b, 0x61, 0x70, 0x69, 0x49, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x32, 0x0a, 0x18, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7b,
	0x61, 0x70, 0x69, 0x49, 0x64, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x12, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x61, 0x70, 0x69, 0x12, 0xaf,
	0x01, 0x0a, 0x14, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49,
	0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0xfa, 0x81, 0xf9, 0x1b, 0x30,
	0x0a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61,
	0x70, 0x69, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x61, 0x70, 0x69, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x12, 0xc3, 0x01, 0x0a, 0x16, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x5f, 0x41, 0x50, 0x49, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x32, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x32,
	0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x7b, 0x61, 0x70, 0x69, 0x49, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x38, 0x0a, 0x18,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x7b, 0x61, 0x70, 0x69, 0x49, 0x64, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x18, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0x61, 0x70, 0x69,
	0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x12, 0xe9, 0x01, 0x0a, 0x1b, 0x41, 0x50, 0x49, 0x5f, 0x47,
	0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f,
	0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22,
	0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x4c, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x24, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x99, 0x90,
	0xe5, 0x88, 0xb6, 0x61, 0x70, 0x69, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe7, 0xad, 0x96, 0xe7,
	0x95, 0xa5, 0x12, 0xf7, 0x01, 0x0a, 0x25, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57,
	0x41, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x41, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x1a,
	0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x46, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1e, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x88, 0x96,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x12, 0x80, 0x02, 0x0a,
	0x1b, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x37, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8f, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x7d, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x57, 0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x7d, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x64, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x61, 0x70, 0x69, 0xe8, 0xb0, 0x83,
	0xe7, 0x94, 0xa8, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x12,
	0xeb, 0x01, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x35, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x52, 0x0a, 0x20, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x7d, 0x32, 0x02, 0x10,
	0x01, 0x3a, 0x2a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0x61, 0x70, 0x69, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0x86, 0x02,
	0x0a, 0x1b, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x37, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x95,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x32, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x7d, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x5d, 0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x7d, 0x2f, 0x7b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x2a, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0x61, 0x70, 0x69, 0xe8, 0xb0,
	0x83, 0xe7, 0x94, 0xa8, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5,
	0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xda, 0x01, 0x0a, 0x18, 0x41, 0x50, 0x49, 0x5f, 0x47,
	0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x54, 0x12, 0x34, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0xfa, 0x81, 0xf9, 0x1b, 0x43,
	0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x32, 0x02, 0x20, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe5, 0x88, 0xa4, 0xe6, 0x96, 0xad, 0x41, 0x50, 0x49, 0xe5, 0x85, 0xbc, 0xe5, 0xae, 0xb9,
	0xe6, 0x80, 0xa7, 0x12, 0xeb, 0x01, 0x0a, 0x1d, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45,
	0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x45, 0x44, 0x49, 0x54, 0x12, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47,
	0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x32, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2d, 0x61, 0x70, 0x69, 0xfa, 0x81, 0xf9, 0x1b, 0x51,
	0x0a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x32, 0x02, 0x10, 0x01, 0x3a,
	0x30, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9,
	0xe8, 0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe8, 0x80, 0x85, 0xe5, 0x90, 0x84, 0xe4, 0xb8, 0xaa, 0x61,
	0x70, 0x69, 0xe7, 0x9a, 0x84, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe7, 0xad, 0x96, 0xe7, 0x95,
	0xa5, 0x12, 0xe0, 0x01, 0x0a, 0x1d, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x12, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x41, 0x50,
	0x49, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0xfa, 0x81, 0xf9, 0x1b, 0x4a, 0x0a, 0x15, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe8, 0xb0, 0x83, 0xe7,
	0x94, 0xa8, 0xe8, 0x80, 0x85, 0x41, 0x50, 0x49, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe8, 0xaf,
	0xa6, 0xe6, 0x83, 0x85, 0x12, 0xcd, 0x01, 0x0a, 0x1b, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41,
	0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x15, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0xfa, 0x81, 0xf9, 0x1b, 0x3b, 0x0a, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x32, 0x02, 0x10, 0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe8, 0xb0, 0x83, 0xe7, 0x94,
	0xa8, 0xe8, 0x80, 0x85, 0x12, 0xe7, 0x01, 0x0a, 0x1b, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41,
	0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x48, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x1e,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6,
	0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe8, 0x80, 0x85, 0x12, 0xd8,
	0x01, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x12, 0x35, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x6c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x32, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0xfa, 0x81, 0xf9, 0x1b, 0x4a, 0x0a,
	0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x2d, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe8, 0xb0, 0x83, 0xe7, 0x94,
	0xa8, 0xe8, 0x80, 0x85, 0xe5, 0x8f, 0xaf, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe7, 0x9a, 0x84,
	0x61, 0x70, 0x69, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0x12, 0xe9, 0x01, 0x0a, 0x19, 0x41, 0x50,
	0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49,
	0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x4e, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a,
	0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe8, 0x80, 0x85, 0xe8,
	0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xf7, 0x01, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41,
	0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x3c, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x55, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x32, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b,
	0x4e, 0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x7d, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83,
	0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe8, 0x80, 0x85, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12,
	0xe8, 0x01, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x35, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0xfa, 0x81, 0xf9, 0x1b, 0x55, 0x0a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x33, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xb0, 0x83, 0xe7, 0x94, 0xa8, 0xe8, 0x80, 0x85, 0xe5,
	0xaf, 0xb9, 0x61, 0x70, 0x69, 0xe7, 0x9a, 0x84, 0xe6, 0x8e, 0x88, 0xe6, 0x9d, 0x83, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xdc, 0x01, 0x0a, 0x23, 0x41,
	0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x12, 0x3f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45,
	0x57, 0x41, 0x59, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x1a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0xfa, 0x81, 0xf9, 0x1b, 0x3c, 0x0a, 0x13, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a,
	0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0xbb, 0x91, 0xe5, 0xae, 0x9a, 0xe5, 0x9f, 0x9f,
	0xe5, 0x90, 0x8d, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0xc4, 0x01, 0x0a, 0x17, 0x41, 0x50,
	0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47,
	0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0xfa,
	0x81, 0xf9, 0x1b, 0x3c, 0x0a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x21, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0xbb,
	0x91, 0xe5, 0xae, 0x9a, 0xe5, 0x9f, 0x9f, 0xe5, 0x90, 0x8d, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x12, 0xc7, 0x01, 0x0a, 0x1a, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12,
	0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x2a, 0x2a,
	0xfa, 0x81, 0xf9, 0x1b, 0x35, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x2a, 0x2a, 0x32, 0x02,
	0x10, 0x01, 0x3a, 0x16, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x12, 0xc7, 0x01, 0x0a, 0x1a, 0x41,
	0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41,
	0x50, 0x49, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41,
	0x50, 0x49, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x35, 0x0a,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x16, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x12, 0xc1, 0x01, 0x0a, 0x17, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x57, 0x41, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x45, 0x54,
	0x12, 0x33, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41,
	0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x59, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x2a, 0x2a, 0xfa, 0x81,
	0xf9, 0x1b, 0x35, 0x0a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x16, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x12, 0xc7, 0x01, 0x0a, 0x1a, 0x41, 0x50, 0x49,
	0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49,
	0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x32,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x2a, 0x2a, 0xfa, 0x81, 0xf9, 0x1b, 0x35, 0x0a, 0x17, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2f, 0x2a, 0x2a, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x16, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x12, 0x81, 0x02, 0x0a, 0x1d, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57,
	0x41, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4e,
	0x5f, 0x47, 0x45, 0x54, 0x12, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41,
	0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x69,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6e,
	0xfa, 0x81, 0xf9, 0x1b, 0x51, 0x0a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x61, 0x70, 0x69, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x64, 0x7d, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x6e, 0x32, 0x02, 0x08, 0x01, 0x3a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12, 0x80, 0x02, 0x0a, 0x1d, 0x41, 0x50, 0x49, 0x5f, 0x47,
	0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x12, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50,
	0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8b, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x34, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x61, 0x70, 0x69, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x64, 0x7d, 0x2f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x4c, 0x0a, 0x32, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x69, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x32, 0x02, 0x08, 0x01, 0x3a, 0x12, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20,
	0xe8, 0xae, 0xa2, 0xe9, 0x98, 0x85, 0x41, 0x50, 0x49, 0x12, 0x84, 0x02, 0x0a, 0x1f, 0x41, 0x50,
	0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x5f, 0x53, 0x57, 0x41, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x12, 0x3b, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x53, 0x57, 0x41, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x8b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x69, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0xfa, 0x81, 0xf9,
	0x1b, 0x4e, 0x0a, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61,
	0x70, 0x69, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x32, 0x02, 0x08, 0x01, 0x3a, 0x16, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x12, 0xbd, 0x01, 0x0a, 0x14, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x34, 0x0a, 0x1a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x02, 0x20, 0x01, 0x3a, 0x12, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0x41, 0x50, 0x49,
	0x12, 0xec, 0x01, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x53, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x12, 0x3a, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x57, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x50,
	0x50, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12,
	0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x70, 0x70, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x4f,
	0x0a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x70, 0x70, 0x73, 0x32, 0x02, 0x10, 0x01,
	0x3a, 0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c,
	0x8b, 0xe5, 0xb7, 0xb2, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe7, 0x9a, 0x84, 0xe5, 0xba, 0x94,
	0xe7, 0x94, 0xa8, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x12,
	0xfe, 0x01, 0x0a, 0x1c, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48,
	0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41,
	0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x8b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x32, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x69, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0xfa,
	0x81, 0xf9, 0x1b, 0x4c, 0x0a, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x61, 0x70, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x32, 0x02, 0x20, 0x01, 0x3a, 0x12, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0x41, 0x50, 0x49,
	0x12, 0x8e, 0x02, 0x0a, 0x1f, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x47, 0x45, 0x54, 0x12, 0x3b, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41,
	0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x95, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x61, 0x70, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x57, 0x0a, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x02, 0x20,
	0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x41, 0x50, 0x49, 0xe6,
	0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x12, 0xc7, 0x01, 0x0a, 0x18, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41,
	0x59, 0x5f, 0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x12, 0x34,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f,
	0x55, 0x49, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2f, 0x75, 0x69, 0x2d, 0x74, 0x79, 0x70, 0x65, 0xfa, 0x81, 0xf9, 0x1b, 0x3c, 0x0a,
	0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x75, 0x69,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x32, 0x02, 0x10, 0x01, 0x3a, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d,
	0xe7, 0x9a, 0x84, 0x55, 0x49, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x1a, 0x0a, 0xc2, 0xc4, 0xcb,
	0x1c, 0x05, 0x22, 0x03, 0x61, 0x70, 0x69, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_gateway_proto_rawDescOnce sync.Once
	file_api_gateway_proto_rawDescData = file_api_gateway_proto_rawDesc
)

func file_api_gateway_proto_rawDescGZIP() []byte {
	file_api_gateway_proto_rawDescOnce.Do(func() {
		file_api_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_gateway_proto_rawDescData)
	})
	return file_api_gateway_proto_rawDescData
}

var file_api_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_api_gateway_proto_goTypes = []interface{}{
	(*API_GATEWAY_API_CREATE_Request)(nil),                // 0: erda.openapiv1.api.API_GATEWAY_API_CREATE_Request
	(*API_GATEWAY_API_DELETE_Request)(nil),                // 1: erda.openapiv1.api.API_GATEWAY_API_DELETE_Request
	(*API_GATEWAY_API_LIST_Request)(nil),                  // 2: erda.openapiv1.api.API_GATEWAY_API_LIST_Request
	(*API_GATEWAY_API_UPDATE_Request)(nil),                // 3: erda.openapiv1.api.API_GATEWAY_API_UPDATE_Request
	(*API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request)(nil), // 4: erda.openapiv1.api.API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request
	(*API_GATEWAY_CATEGORY_CREATE_Request)(nil),           // 5: erda.openapiv1.api.API_GATEWAY_CATEGORY_CREATE_Request
	(*API_GATEWAY_CATEGORY_DELETE_Request)(nil),           // 6: erda.openapiv1.api.API_GATEWAY_CATEGORY_DELETE_Request
	(*API_GATEWAY_CATEGORY_INFO_Request)(nil),             // 7: erda.openapiv1.api.API_GATEWAY_CATEGORY_INFO_Request
	(*API_GATEWAY_CATEGORY_UPDATE_Request)(nil),           // 8: erda.openapiv1.api.API_GATEWAY_CATEGORY_UPDATE_Request
	(*API_GATEWAY_CHECK_COMPAT_Request)(nil),              // 9: erda.openapiv1.api.API_GATEWAY_CHECK_COMPAT_Request
	(*API_GATEWAY_CONSUMER_API_EDIT_Request)(nil),         // 10: erda.openapiv1.api.API_GATEWAY_CONSUMER_API_EDIT_Request
	(*API_GATEWAY_CONSUMER_API_INFO_Request)(nil),         // 11: erda.openapiv1.api.API_GATEWAY_CONSUMER_API_INFO_Request
	(*API_GATEWAY_CONSUMER_CREATE_Request)(nil),           // 12: erda.openapiv1.api.API_GATEWAY_CONSUMER_CREATE_Request
	(*API_GATEWAY_CONSUMER_DELETE_Request)(nil),           // 13: erda.openapiv1.api.API_GATEWAY_CONSUMER_DELETE_Request
	(*API_GATEWAY_CONSUMER_EDIT_Request)(nil),             // 14: erda.openapiv1.api.API_GATEWAY_CONSUMER_EDIT_Request
	(*API_GATEWAY_CONSUMER_INFO_Request)(nil),             // 15: erda.openapiv1.api.API_GATEWAY_CONSUMER_INFO_Request
	(*API_GATEWAY_CONSUMER_INFO_UPDATE_Request)(nil),      // 16: erda.openapiv1.api.API_GATEWAY_CONSUMER_INFO_UPDATE_Request
	(*API_GATEWAY_CONSUMER_LIST_Request)(nil),             // 17: erda.openapiv1.api.API_GATEWAY_CONSUMER_LIST_Request
	(*API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request)(nil),   // 18: erda.openapiv1.api.API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request
	(*API_GATEWAY_DOMAIN_INFO_Request)(nil),               // 19: erda.openapiv1.api.API_GATEWAY_DOMAIN_INFO_Request
	(*API_GATEWAY_OPENAPI_CREATE_Request)(nil),            // 20: erda.openapiv1.api.API_GATEWAY_OPENAPI_CREATE_Request
	(*API_GATEWAY_OPENAPI_DELETE_Request)(nil),            // 21: erda.openapiv1.api.API_GATEWAY_OPENAPI_DELETE_Request
	(*API_GATEWAY_OPENAPI_GET_Request)(nil),               // 22: erda.openapiv1.api.API_GATEWAY_OPENAPI_GET_Request
	(*API_GATEWAY_OPENAPI_UPDATE_Request)(nil),            // 23: erda.openapiv1.api.API_GATEWAY_OPENAPI_UPDATE_Request
	(*API_GATEWAY_PUBLISH_AUTHN_GET_Request)(nil),         // 24: erda.openapiv1.api.API_GATEWAY_PUBLISH_AUTHN_GET_Request
	(*API_GATEWAY_PUBLISH_SUBSCRIBE_Request)(nil),         // 25: erda.openapiv1.api.API_GATEWAY_PUBLISH_SUBSCRIBE_Request
	(*API_GATEWAY_PUBLISH_SWAGGER_GET_Request)(nil),       // 26: erda.openapiv1.api.API_GATEWAY_PUBLISH_SWAGGER_GET_Request
	(*API_GATEWAY_REGISTER_APPS_INFO_Request)(nil),        // 27: erda.openapiv1.api.API_GATEWAY_REGISTER_APPS_INFO_Request
	(*API_GATEWAY_REGISTER_PUBLISH_Request)(nil),          // 28: erda.openapiv1.api.API_GATEWAY_REGISTER_PUBLISH_Request
	(*API_GATEWAY_REGISTER_Request)(nil),                  // 29: erda.openapiv1.api.API_GATEWAY_REGISTER_Request
	(*API_GATEWAY_REGISTER_STATUS_GET_Request)(nil),       // 30: erda.openapiv1.api.API_GATEWAY_REGISTER_STATUS_GET_Request
	(*API_GATEWAY_UI_TYPE_INFO_Request)(nil),              // 31: erda.openapiv1.api.API_GATEWAY_UI_TYPE_INFO_Request
	(*emptypb.Empty)(nil),                                 // 32: google.protobuf.Empty
}
var file_api_gateway_proto_depIdxs = []int32{
	0,  // 0: erda.openapiv1.api.api_gateway.API_GATEWAY_API_CREATE:input_type -> erda.openapiv1.api.API_GATEWAY_API_CREATE_Request
	1,  // 1: erda.openapiv1.api.api_gateway.API_GATEWAY_API_DELETE:input_type -> erda.openapiv1.api.API_GATEWAY_API_DELETE_Request
	2,  // 2: erda.openapiv1.api.api_gateway.API_GATEWAY_API_LIST:input_type -> erda.openapiv1.api.API_GATEWAY_API_LIST_Request
	3,  // 3: erda.openapiv1.api.api_gateway.API_GATEWAY_API_UPDATE:input_type -> erda.openapiv1.api.API_GATEWAY_API_UPDATE_Request
	5,  // 4: erda.openapiv1.api.api_gateway.API_GATEWAY_CATEGORY_CREATE:input_type -> erda.openapiv1.api.API_GATEWAY_CATEGORY_CREATE_Request
	4,  // 5: erda.openapiv1.api.api_gateway.API_GATEWAY_CATEGORY_CREATE_OR_UPDATE:input_type -> erda.openapiv1.api.API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request
	6,  // 6: erda.openapiv1.api.api_gateway.API_GATEWAY_CATEGORY_DELETE:input_type -> erda.openapiv1.api.API_GATEWAY_CATEGORY_DELETE_Request
	7,  // 7: erda.openapiv1.api.api_gateway.API_GATEWAY_CATEGORY_INFO:input_type -> erda.openapiv1.api.API_GATEWAY_CATEGORY_INFO_Request
	8,  // 8: erda.openapiv1.api.api_gateway.API_GATEWAY_CATEGORY_UPDATE:input_type -> erda.openapiv1.api.API_GATEWAY_CATEGORY_UPDATE_Request
	9,  // 9: erda.openapiv1.api.api_gateway.API_GATEWAY_CHECK_COMPAT:input_type -> erda.openapiv1.api.API_GATEWAY_CHECK_COMPAT_Request
	10, // 10: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_API_EDIT:input_type -> erda.openapiv1.api.API_GATEWAY_CONSUMER_API_EDIT_Request
	11, // 11: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_API_INFO:input_type -> erda.openapiv1.api.API_GATEWAY_CONSUMER_API_INFO_Request
	12, // 12: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_CREATE:input_type -> erda.openapiv1.api.API_GATEWAY_CONSUMER_CREATE_Request
	13, // 13: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_DELETE:input_type -> erda.openapiv1.api.API_GATEWAY_CONSUMER_DELETE_Request
	14, // 14: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_EDIT:input_type -> erda.openapiv1.api.API_GATEWAY_CONSUMER_EDIT_Request
	15, // 15: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_INFO:input_type -> erda.openapiv1.api.API_GATEWAY_CONSUMER_INFO_Request
	16, // 16: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_INFO_UPDATE:input_type -> erda.openapiv1.api.API_GATEWAY_CONSUMER_INFO_UPDATE_Request
	17, // 17: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_LIST:input_type -> erda.openapiv1.api.API_GATEWAY_CONSUMER_LIST_Request
	18, // 18: erda.openapiv1.api.api_gateway.API_GATEWAY_DOMAIN_CREATE_OR_UPDATE:input_type -> erda.openapiv1.api.API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request
	19, // 19: erda.openapiv1.api.api_gateway.API_GATEWAY_DOMAIN_INFO:input_type -> erda.openapiv1.api.API_GATEWAY_DOMAIN_INFO_Request
	20, // 20: erda.openapiv1.api.api_gateway.API_GATEWAY_OPENAPI_CREATE:input_type -> erda.openapiv1.api.API_GATEWAY_OPENAPI_CREATE_Request
	21, // 21: erda.openapiv1.api.api_gateway.API_GATEWAY_OPENAPI_DELETE:input_type -> erda.openapiv1.api.API_GATEWAY_OPENAPI_DELETE_Request
	22, // 22: erda.openapiv1.api.api_gateway.API_GATEWAY_OPENAPI_GET:input_type -> erda.openapiv1.api.API_GATEWAY_OPENAPI_GET_Request
	23, // 23: erda.openapiv1.api.api_gateway.API_GATEWAY_OPENAPI_UPDATE:input_type -> erda.openapiv1.api.API_GATEWAY_OPENAPI_UPDATE_Request
	24, // 24: erda.openapiv1.api.api_gateway.API_GATEWAY_PUBLISH_AUTHN_GET:input_type -> erda.openapiv1.api.API_GATEWAY_PUBLISH_AUTHN_GET_Request
	25, // 25: erda.openapiv1.api.api_gateway.API_GATEWAY_PUBLISH_SUBSCRIBE:input_type -> erda.openapiv1.api.API_GATEWAY_PUBLISH_SUBSCRIBE_Request
	26, // 26: erda.openapiv1.api.api_gateway.API_GATEWAY_PUBLISH_SWAGGER_GET:input_type -> erda.openapiv1.api.API_GATEWAY_PUBLISH_SWAGGER_GET_Request
	29, // 27: erda.openapiv1.api.api_gateway.API_GATEWAY_REGISTER:input_type -> erda.openapiv1.api.API_GATEWAY_REGISTER_Request
	27, // 28: erda.openapiv1.api.api_gateway.API_GATEWAY_REGISTER_APPS_INFO:input_type -> erda.openapiv1.api.API_GATEWAY_REGISTER_APPS_INFO_Request
	28, // 29: erda.openapiv1.api.api_gateway.API_GATEWAY_REGISTER_PUBLISH:input_type -> erda.openapiv1.api.API_GATEWAY_REGISTER_PUBLISH_Request
	30, // 30: erda.openapiv1.api.api_gateway.API_GATEWAY_REGISTER_STATUS_GET:input_type -> erda.openapiv1.api.API_GATEWAY_REGISTER_STATUS_GET_Request
	31, // 31: erda.openapiv1.api.api_gateway.API_GATEWAY_UI_TYPE_INFO:input_type -> erda.openapiv1.api.API_GATEWAY_UI_TYPE_INFO_Request
	32, // 32: erda.openapiv1.api.api_gateway.API_GATEWAY_API_CREATE:output_type -> google.protobuf.Empty
	32, // 33: erda.openapiv1.api.api_gateway.API_GATEWAY_API_DELETE:output_type -> google.protobuf.Empty
	32, // 34: erda.openapiv1.api.api_gateway.API_GATEWAY_API_LIST:output_type -> google.protobuf.Empty
	32, // 35: erda.openapiv1.api.api_gateway.API_GATEWAY_API_UPDATE:output_type -> google.protobuf.Empty
	32, // 36: erda.openapiv1.api.api_gateway.API_GATEWAY_CATEGORY_CREATE:output_type -> google.protobuf.Empty
	32, // 37: erda.openapiv1.api.api_gateway.API_GATEWAY_CATEGORY_CREATE_OR_UPDATE:output_type -> google.protobuf.Empty
	32, // 38: erda.openapiv1.api.api_gateway.API_GATEWAY_CATEGORY_DELETE:output_type -> google.protobuf.Empty
	32, // 39: erda.openapiv1.api.api_gateway.API_GATEWAY_CATEGORY_INFO:output_type -> google.protobuf.Empty
	32, // 40: erda.openapiv1.api.api_gateway.API_GATEWAY_CATEGORY_UPDATE:output_type -> google.protobuf.Empty
	32, // 41: erda.openapiv1.api.api_gateway.API_GATEWAY_CHECK_COMPAT:output_type -> google.protobuf.Empty
	32, // 42: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_API_EDIT:output_type -> google.protobuf.Empty
	32, // 43: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_API_INFO:output_type -> google.protobuf.Empty
	32, // 44: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_CREATE:output_type -> google.protobuf.Empty
	32, // 45: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_DELETE:output_type -> google.protobuf.Empty
	32, // 46: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_EDIT:output_type -> google.protobuf.Empty
	32, // 47: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_INFO:output_type -> google.protobuf.Empty
	32, // 48: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_INFO_UPDATE:output_type -> google.protobuf.Empty
	32, // 49: erda.openapiv1.api.api_gateway.API_GATEWAY_CONSUMER_LIST:output_type -> google.protobuf.Empty
	32, // 50: erda.openapiv1.api.api_gateway.API_GATEWAY_DOMAIN_CREATE_OR_UPDATE:output_type -> google.protobuf.Empty
	32, // 51: erda.openapiv1.api.api_gateway.API_GATEWAY_DOMAIN_INFO:output_type -> google.protobuf.Empty
	32, // 52: erda.openapiv1.api.api_gateway.API_GATEWAY_OPENAPI_CREATE:output_type -> google.protobuf.Empty
	32, // 53: erda.openapiv1.api.api_gateway.API_GATEWAY_OPENAPI_DELETE:output_type -> google.protobuf.Empty
	32, // 54: erda.openapiv1.api.api_gateway.API_GATEWAY_OPENAPI_GET:output_type -> google.protobuf.Empty
	32, // 55: erda.openapiv1.api.api_gateway.API_GATEWAY_OPENAPI_UPDATE:output_type -> google.protobuf.Empty
	32, // 56: erda.openapiv1.api.api_gateway.API_GATEWAY_PUBLISH_AUTHN_GET:output_type -> google.protobuf.Empty
	32, // 57: erda.openapiv1.api.api_gateway.API_GATEWAY_PUBLISH_SUBSCRIBE:output_type -> google.protobuf.Empty
	32, // 58: erda.openapiv1.api.api_gateway.API_GATEWAY_PUBLISH_SWAGGER_GET:output_type -> google.protobuf.Empty
	32, // 59: erda.openapiv1.api.api_gateway.API_GATEWAY_REGISTER:output_type -> google.protobuf.Empty
	32, // 60: erda.openapiv1.api.api_gateway.API_GATEWAY_REGISTER_APPS_INFO:output_type -> google.protobuf.Empty
	32, // 61: erda.openapiv1.api.api_gateway.API_GATEWAY_REGISTER_PUBLISH:output_type -> google.protobuf.Empty
	32, // 62: erda.openapiv1.api.api_gateway.API_GATEWAY_REGISTER_STATUS_GET:output_type -> google.protobuf.Empty
	32, // 63: erda.openapiv1.api.api_gateway.API_GATEWAY_UI_TYPE_INFO:output_type -> google.protobuf.Empty
	32, // [32:64] is the sub-list for method output_type
	0,  // [0:32] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_api_gateway_proto_init() }
func file_api_gateway_proto_init() {
	if File_api_gateway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_API_CREATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_API_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_API_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_API_UPDATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CATEGORY_CREATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CATEGORY_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CATEGORY_INFO_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CATEGORY_UPDATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CHECK_COMPAT_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CONSUMER_API_EDIT_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CONSUMER_API_INFO_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CONSUMER_CREATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CONSUMER_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CONSUMER_EDIT_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CONSUMER_INFO_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CONSUMER_INFO_UPDATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_CONSUMER_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_DOMAIN_INFO_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_OPENAPI_CREATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_OPENAPI_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_OPENAPI_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_OPENAPI_UPDATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_PUBLISH_AUTHN_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_PUBLISH_SUBSCRIBE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_PUBLISH_SWAGGER_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_REGISTER_APPS_INFO_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_REGISTER_PUBLISH_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_REGISTER_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_REGISTER_STATUS_GET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gateway_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*API_GATEWAY_UI_TYPE_INFO_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_gateway_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_gateway_proto_goTypes,
		DependencyIndexes: file_api_gateway_proto_depIdxs,
		MessageInfos:      file_api_gateway_proto_msgTypes,
	}.Build()
	File_api_gateway_proto = out.File
	file_api_gateway_proto_rawDesc = nil
	file_api_gateway_proto_goTypes = nil
	file_api_gateway_proto_depIdxs = nil
}
