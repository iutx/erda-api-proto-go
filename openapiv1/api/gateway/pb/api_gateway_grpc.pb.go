// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: api_gateway.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// ApiGatewayClient is the client API for ApiGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiGatewayClient interface {
	API_GATEWAY_API_CREATE(ctx context.Context, in *API_GATEWAY_API_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_API_DELETE(ctx context.Context, in *API_GATEWAY_API_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_API_LIST(ctx context.Context, in *API_GATEWAY_API_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_API_UPDATE(ctx context.Context, in *API_GATEWAY_API_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CATEGORY_CREATE(ctx context.Context, in *API_GATEWAY_CATEGORY_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CATEGORY_CREATE_OR_UPDATE(ctx context.Context, in *API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CATEGORY_DELETE(ctx context.Context, in *API_GATEWAY_CATEGORY_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CATEGORY_INFO(ctx context.Context, in *API_GATEWAY_CATEGORY_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CATEGORY_UPDATE(ctx context.Context, in *API_GATEWAY_CATEGORY_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CHECK_COMPAT(ctx context.Context, in *API_GATEWAY_CHECK_COMPAT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_API_EDIT(ctx context.Context, in *API_GATEWAY_CONSUMER_API_EDIT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_API_INFO(ctx context.Context, in *API_GATEWAY_CONSUMER_API_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_CREATE(ctx context.Context, in *API_GATEWAY_CONSUMER_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_DELETE(ctx context.Context, in *API_GATEWAY_CONSUMER_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_EDIT(ctx context.Context, in *API_GATEWAY_CONSUMER_EDIT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_INFO(ctx context.Context, in *API_GATEWAY_CONSUMER_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_INFO_UPDATE(ctx context.Context, in *API_GATEWAY_CONSUMER_INFO_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_LIST(ctx context.Context, in *API_GATEWAY_CONSUMER_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_DOMAIN_CREATE_OR_UPDATE(ctx context.Context, in *API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_DOMAIN_INFO(ctx context.Context, in *API_GATEWAY_DOMAIN_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_OPENAPI_CREATE(ctx context.Context, in *API_GATEWAY_OPENAPI_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_OPENAPI_DELETE(ctx context.Context, in *API_GATEWAY_OPENAPI_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_OPENAPI_GET(ctx context.Context, in *API_GATEWAY_OPENAPI_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_OPENAPI_UPDATE(ctx context.Context, in *API_GATEWAY_OPENAPI_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_PUBLISH_AUTHN_GET(ctx context.Context, in *API_GATEWAY_PUBLISH_AUTHN_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_PUBLISH_SUBSCRIBE(ctx context.Context, in *API_GATEWAY_PUBLISH_SUBSCRIBE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_PUBLISH_SWAGGER_GET(ctx context.Context, in *API_GATEWAY_PUBLISH_SWAGGER_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_REGISTER(ctx context.Context, in *API_GATEWAY_REGISTER_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_REGISTER_APPS_INFO(ctx context.Context, in *API_GATEWAY_REGISTER_APPS_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_REGISTER_PUBLISH(ctx context.Context, in *API_GATEWAY_REGISTER_PUBLISH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_REGISTER_STATUS_GET(ctx context.Context, in *API_GATEWAY_REGISTER_STATUS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	API_GATEWAY_UI_TYPE_INFO(ctx context.Context, in *API_GATEWAY_UI_TYPE_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type apiGatewayClient struct {
	cc grpc1.ClientConnInterface
}

func NewApiGatewayClient(cc grpc1.ClientConnInterface) ApiGatewayClient {
	return &apiGatewayClient{cc}
}

func (c *apiGatewayClient) API_GATEWAY_API_CREATE(ctx context.Context, in *API_GATEWAY_API_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_API_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_API_DELETE(ctx context.Context, in *API_GATEWAY_API_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_API_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_API_LIST(ctx context.Context, in *API_GATEWAY_API_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_API_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_API_UPDATE(ctx context.Context, in *API_GATEWAY_API_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_API_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CATEGORY_CREATE(ctx context.Context, in *API_GATEWAY_CATEGORY_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CATEGORY_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CATEGORY_CREATE_OR_UPDATE(ctx context.Context, in *API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CATEGORY_CREATE_OR_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CATEGORY_DELETE(ctx context.Context, in *API_GATEWAY_CATEGORY_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CATEGORY_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CATEGORY_INFO(ctx context.Context, in *API_GATEWAY_CATEGORY_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CATEGORY_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CATEGORY_UPDATE(ctx context.Context, in *API_GATEWAY_CATEGORY_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CATEGORY_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CHECK_COMPAT(ctx context.Context, in *API_GATEWAY_CHECK_COMPAT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CHECK_COMPAT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CONSUMER_API_EDIT(ctx context.Context, in *API_GATEWAY_CONSUMER_API_EDIT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_API_EDIT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CONSUMER_API_INFO(ctx context.Context, in *API_GATEWAY_CONSUMER_API_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_API_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CONSUMER_CREATE(ctx context.Context, in *API_GATEWAY_CONSUMER_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CONSUMER_DELETE(ctx context.Context, in *API_GATEWAY_CONSUMER_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CONSUMER_EDIT(ctx context.Context, in *API_GATEWAY_CONSUMER_EDIT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_EDIT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CONSUMER_INFO(ctx context.Context, in *API_GATEWAY_CONSUMER_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CONSUMER_INFO_UPDATE(ctx context.Context, in *API_GATEWAY_CONSUMER_INFO_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_INFO_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_CONSUMER_LIST(ctx context.Context, in *API_GATEWAY_CONSUMER_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_DOMAIN_CREATE_OR_UPDATE(ctx context.Context, in *API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_DOMAIN_CREATE_OR_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_DOMAIN_INFO(ctx context.Context, in *API_GATEWAY_DOMAIN_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_DOMAIN_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_OPENAPI_CREATE(ctx context.Context, in *API_GATEWAY_OPENAPI_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_OPENAPI_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_OPENAPI_DELETE(ctx context.Context, in *API_GATEWAY_OPENAPI_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_OPENAPI_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_OPENAPI_GET(ctx context.Context, in *API_GATEWAY_OPENAPI_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_OPENAPI_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_OPENAPI_UPDATE(ctx context.Context, in *API_GATEWAY_OPENAPI_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_OPENAPI_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_PUBLISH_AUTHN_GET(ctx context.Context, in *API_GATEWAY_PUBLISH_AUTHN_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_PUBLISH_AUTHN_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_PUBLISH_SUBSCRIBE(ctx context.Context, in *API_GATEWAY_PUBLISH_SUBSCRIBE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_PUBLISH_SUBSCRIBE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_PUBLISH_SWAGGER_GET(ctx context.Context, in *API_GATEWAY_PUBLISH_SWAGGER_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_PUBLISH_SWAGGER_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_REGISTER(ctx context.Context, in *API_GATEWAY_REGISTER_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_REGISTER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_REGISTER_APPS_INFO(ctx context.Context, in *API_GATEWAY_REGISTER_APPS_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_REGISTER_APPS_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_REGISTER_PUBLISH(ctx context.Context, in *API_GATEWAY_REGISTER_PUBLISH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_REGISTER_PUBLISH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_REGISTER_STATUS_GET(ctx context.Context, in *API_GATEWAY_REGISTER_STATUS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_REGISTER_STATUS_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) API_GATEWAY_UI_TYPE_INFO(ctx context.Context, in *API_GATEWAY_UI_TYPE_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.api.api_gateway/API_GATEWAY_UI_TYPE_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiGatewayServer is the server API for ApiGateway service.
// All implementations should embed UnimplementedApiGatewayServer
// for forward compatibility
type ApiGatewayServer interface {
	API_GATEWAY_API_CREATE(context.Context, *API_GATEWAY_API_CREATE_Request) (*emptypb.Empty, error)
	API_GATEWAY_API_DELETE(context.Context, *API_GATEWAY_API_DELETE_Request) (*emptypb.Empty, error)
	API_GATEWAY_API_LIST(context.Context, *API_GATEWAY_API_LIST_Request) (*emptypb.Empty, error)
	API_GATEWAY_API_UPDATE(context.Context, *API_GATEWAY_API_UPDATE_Request) (*emptypb.Empty, error)
	API_GATEWAY_CATEGORY_CREATE(context.Context, *API_GATEWAY_CATEGORY_CREATE_Request) (*emptypb.Empty, error)
	API_GATEWAY_CATEGORY_CREATE_OR_UPDATE(context.Context, *API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request) (*emptypb.Empty, error)
	API_GATEWAY_CATEGORY_DELETE(context.Context, *API_GATEWAY_CATEGORY_DELETE_Request) (*emptypb.Empty, error)
	API_GATEWAY_CATEGORY_INFO(context.Context, *API_GATEWAY_CATEGORY_INFO_Request) (*emptypb.Empty, error)
	API_GATEWAY_CATEGORY_UPDATE(context.Context, *API_GATEWAY_CATEGORY_UPDATE_Request) (*emptypb.Empty, error)
	API_GATEWAY_CHECK_COMPAT(context.Context, *API_GATEWAY_CHECK_COMPAT_Request) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_API_EDIT(context.Context, *API_GATEWAY_CONSUMER_API_EDIT_Request) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_API_INFO(context.Context, *API_GATEWAY_CONSUMER_API_INFO_Request) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_CREATE(context.Context, *API_GATEWAY_CONSUMER_CREATE_Request) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_DELETE(context.Context, *API_GATEWAY_CONSUMER_DELETE_Request) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_EDIT(context.Context, *API_GATEWAY_CONSUMER_EDIT_Request) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_INFO(context.Context, *API_GATEWAY_CONSUMER_INFO_Request) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_INFO_UPDATE(context.Context, *API_GATEWAY_CONSUMER_INFO_UPDATE_Request) (*emptypb.Empty, error)
	API_GATEWAY_CONSUMER_LIST(context.Context, *API_GATEWAY_CONSUMER_LIST_Request) (*emptypb.Empty, error)
	API_GATEWAY_DOMAIN_CREATE_OR_UPDATE(context.Context, *API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request) (*emptypb.Empty, error)
	API_GATEWAY_DOMAIN_INFO(context.Context, *API_GATEWAY_DOMAIN_INFO_Request) (*emptypb.Empty, error)
	API_GATEWAY_OPENAPI_CREATE(context.Context, *API_GATEWAY_OPENAPI_CREATE_Request) (*emptypb.Empty, error)
	API_GATEWAY_OPENAPI_DELETE(context.Context, *API_GATEWAY_OPENAPI_DELETE_Request) (*emptypb.Empty, error)
	API_GATEWAY_OPENAPI_GET(context.Context, *API_GATEWAY_OPENAPI_GET_Request) (*emptypb.Empty, error)
	API_GATEWAY_OPENAPI_UPDATE(context.Context, *API_GATEWAY_OPENAPI_UPDATE_Request) (*emptypb.Empty, error)
	API_GATEWAY_PUBLISH_AUTHN_GET(context.Context, *API_GATEWAY_PUBLISH_AUTHN_GET_Request) (*emptypb.Empty, error)
	API_GATEWAY_PUBLISH_SUBSCRIBE(context.Context, *API_GATEWAY_PUBLISH_SUBSCRIBE_Request) (*emptypb.Empty, error)
	API_GATEWAY_PUBLISH_SWAGGER_GET(context.Context, *API_GATEWAY_PUBLISH_SWAGGER_GET_Request) (*emptypb.Empty, error)
	API_GATEWAY_REGISTER(context.Context, *API_GATEWAY_REGISTER_Request) (*emptypb.Empty, error)
	API_GATEWAY_REGISTER_APPS_INFO(context.Context, *API_GATEWAY_REGISTER_APPS_INFO_Request) (*emptypb.Empty, error)
	API_GATEWAY_REGISTER_PUBLISH(context.Context, *API_GATEWAY_REGISTER_PUBLISH_Request) (*emptypb.Empty, error)
	API_GATEWAY_REGISTER_STATUS_GET(context.Context, *API_GATEWAY_REGISTER_STATUS_GET_Request) (*emptypb.Empty, error)
	API_GATEWAY_UI_TYPE_INFO(context.Context, *API_GATEWAY_UI_TYPE_INFO_Request) (*emptypb.Empty, error)
}

// UnimplementedApiGatewayServer should be embedded to have forward compatible implementations.
type UnimplementedApiGatewayServer struct {
}

func (*UnimplementedApiGatewayServer) API_GATEWAY_API_CREATE(context.Context, *API_GATEWAY_API_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_API_CREATE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_API_DELETE(context.Context, *API_GATEWAY_API_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_API_DELETE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_API_LIST(context.Context, *API_GATEWAY_API_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_API_LIST not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_API_UPDATE(context.Context, *API_GATEWAY_API_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_API_UPDATE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CATEGORY_CREATE(context.Context, *API_GATEWAY_CATEGORY_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CATEGORY_CREATE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CATEGORY_CREATE_OR_UPDATE(context.Context, *API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CATEGORY_CREATE_OR_UPDATE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CATEGORY_DELETE(context.Context, *API_GATEWAY_CATEGORY_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CATEGORY_DELETE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CATEGORY_INFO(context.Context, *API_GATEWAY_CATEGORY_INFO_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CATEGORY_INFO not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CATEGORY_UPDATE(context.Context, *API_GATEWAY_CATEGORY_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CATEGORY_UPDATE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CHECK_COMPAT(context.Context, *API_GATEWAY_CHECK_COMPAT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CHECK_COMPAT not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CONSUMER_API_EDIT(context.Context, *API_GATEWAY_CONSUMER_API_EDIT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CONSUMER_API_EDIT not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CONSUMER_API_INFO(context.Context, *API_GATEWAY_CONSUMER_API_INFO_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CONSUMER_API_INFO not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CONSUMER_CREATE(context.Context, *API_GATEWAY_CONSUMER_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CONSUMER_CREATE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CONSUMER_DELETE(context.Context, *API_GATEWAY_CONSUMER_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CONSUMER_DELETE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CONSUMER_EDIT(context.Context, *API_GATEWAY_CONSUMER_EDIT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CONSUMER_EDIT not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CONSUMER_INFO(context.Context, *API_GATEWAY_CONSUMER_INFO_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CONSUMER_INFO not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CONSUMER_INFO_UPDATE(context.Context, *API_GATEWAY_CONSUMER_INFO_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CONSUMER_INFO_UPDATE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_CONSUMER_LIST(context.Context, *API_GATEWAY_CONSUMER_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_CONSUMER_LIST not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_DOMAIN_CREATE_OR_UPDATE(context.Context, *API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_DOMAIN_CREATE_OR_UPDATE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_DOMAIN_INFO(context.Context, *API_GATEWAY_DOMAIN_INFO_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_DOMAIN_INFO not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_OPENAPI_CREATE(context.Context, *API_GATEWAY_OPENAPI_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_OPENAPI_CREATE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_OPENAPI_DELETE(context.Context, *API_GATEWAY_OPENAPI_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_OPENAPI_DELETE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_OPENAPI_GET(context.Context, *API_GATEWAY_OPENAPI_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_OPENAPI_GET not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_OPENAPI_UPDATE(context.Context, *API_GATEWAY_OPENAPI_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_OPENAPI_UPDATE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_PUBLISH_AUTHN_GET(context.Context, *API_GATEWAY_PUBLISH_AUTHN_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_PUBLISH_AUTHN_GET not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_PUBLISH_SUBSCRIBE(context.Context, *API_GATEWAY_PUBLISH_SUBSCRIBE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_PUBLISH_SUBSCRIBE not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_PUBLISH_SWAGGER_GET(context.Context, *API_GATEWAY_PUBLISH_SWAGGER_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_PUBLISH_SWAGGER_GET not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_REGISTER(context.Context, *API_GATEWAY_REGISTER_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_REGISTER not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_REGISTER_APPS_INFO(context.Context, *API_GATEWAY_REGISTER_APPS_INFO_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_REGISTER_APPS_INFO not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_REGISTER_PUBLISH(context.Context, *API_GATEWAY_REGISTER_PUBLISH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_REGISTER_PUBLISH not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_REGISTER_STATUS_GET(context.Context, *API_GATEWAY_REGISTER_STATUS_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_REGISTER_STATUS_GET not implemented")
}
func (*UnimplementedApiGatewayServer) API_GATEWAY_UI_TYPE_INFO(context.Context, *API_GATEWAY_UI_TYPE_INFO_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method API_GATEWAY_UI_TYPE_INFO not implemented")
}

func RegisterApiGatewayServer(s grpc1.ServiceRegistrar, srv ApiGatewayServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_ApiGateway_serviceDesc(srv, opts...), srv)
}

var _ApiGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.api.api_gateway",
	HandlerType: (*ApiGatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "api_gateway.proto",
}

func _get_ApiGateway_serviceDesc(srv ApiGatewayServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_ApiGateway_API_GATEWAY_API_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_API_CREATE(ctx, req.(*API_GATEWAY_API_CREATE_Request))
	}
	var _ApiGateway_API_GATEWAY_API_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_API_CREATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_API_CREATE", srv)
		_ApiGateway_API_GATEWAY_API_CREATE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_API_CREATE_Handler)
	}

	_ApiGateway_API_GATEWAY_API_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_API_DELETE(ctx, req.(*API_GATEWAY_API_DELETE_Request))
	}
	var _ApiGateway_API_GATEWAY_API_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_API_DELETE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_API_DELETE", srv)
		_ApiGateway_API_GATEWAY_API_DELETE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_API_DELETE_Handler)
	}

	_ApiGateway_API_GATEWAY_API_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_API_LIST(ctx, req.(*API_GATEWAY_API_LIST_Request))
	}
	var _ApiGateway_API_GATEWAY_API_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_API_LIST_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_API_LIST", srv)
		_ApiGateway_API_GATEWAY_API_LIST_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_API_LIST_Handler)
	}

	_ApiGateway_API_GATEWAY_API_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_API_UPDATE(ctx, req.(*API_GATEWAY_API_UPDATE_Request))
	}
	var _ApiGateway_API_GATEWAY_API_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_API_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_API_UPDATE", srv)
		_ApiGateway_API_GATEWAY_API_UPDATE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_API_UPDATE_Handler)
	}

	_ApiGateway_API_GATEWAY_CATEGORY_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CATEGORY_CREATE(ctx, req.(*API_GATEWAY_CATEGORY_CREATE_Request))
	}
	var _ApiGateway_API_GATEWAY_CATEGORY_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CATEGORY_CREATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CATEGORY_CREATE", srv)
		_ApiGateway_API_GATEWAY_CATEGORY_CREATE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CATEGORY_CREATE_Handler)
	}

	_ApiGateway_API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CATEGORY_CREATE_OR_UPDATE(ctx, req.(*API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request))
	}
	var _ApiGateway_API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CATEGORY_CREATE_OR_UPDATE", srv)
		_ApiGateway_API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Handler)
	}

	_ApiGateway_API_GATEWAY_CATEGORY_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CATEGORY_DELETE(ctx, req.(*API_GATEWAY_CATEGORY_DELETE_Request))
	}
	var _ApiGateway_API_GATEWAY_CATEGORY_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CATEGORY_DELETE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CATEGORY_DELETE", srv)
		_ApiGateway_API_GATEWAY_CATEGORY_DELETE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CATEGORY_DELETE_Handler)
	}

	_ApiGateway_API_GATEWAY_CATEGORY_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CATEGORY_INFO(ctx, req.(*API_GATEWAY_CATEGORY_INFO_Request))
	}
	var _ApiGateway_API_GATEWAY_CATEGORY_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CATEGORY_INFO_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CATEGORY_INFO", srv)
		_ApiGateway_API_GATEWAY_CATEGORY_INFO_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CATEGORY_INFO_Handler)
	}

	_ApiGateway_API_GATEWAY_CATEGORY_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CATEGORY_UPDATE(ctx, req.(*API_GATEWAY_CATEGORY_UPDATE_Request))
	}
	var _ApiGateway_API_GATEWAY_CATEGORY_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CATEGORY_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CATEGORY_UPDATE", srv)
		_ApiGateway_API_GATEWAY_CATEGORY_UPDATE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CATEGORY_UPDATE_Handler)
	}

	_ApiGateway_API_GATEWAY_CHECK_COMPAT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CHECK_COMPAT(ctx, req.(*API_GATEWAY_CHECK_COMPAT_Request))
	}
	var _ApiGateway_API_GATEWAY_CHECK_COMPAT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CHECK_COMPAT_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CHECK_COMPAT", srv)
		_ApiGateway_API_GATEWAY_CHECK_COMPAT_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CHECK_COMPAT_Handler)
	}

	_ApiGateway_API_GATEWAY_CONSUMER_API_EDIT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CONSUMER_API_EDIT(ctx, req.(*API_GATEWAY_CONSUMER_API_EDIT_Request))
	}
	var _ApiGateway_API_GATEWAY_CONSUMER_API_EDIT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CONSUMER_API_EDIT_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_API_EDIT", srv)
		_ApiGateway_API_GATEWAY_CONSUMER_API_EDIT_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CONSUMER_API_EDIT_Handler)
	}

	_ApiGateway_API_GATEWAY_CONSUMER_API_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CONSUMER_API_INFO(ctx, req.(*API_GATEWAY_CONSUMER_API_INFO_Request))
	}
	var _ApiGateway_API_GATEWAY_CONSUMER_API_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CONSUMER_API_INFO_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_API_INFO", srv)
		_ApiGateway_API_GATEWAY_CONSUMER_API_INFO_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CONSUMER_API_INFO_Handler)
	}

	_ApiGateway_API_GATEWAY_CONSUMER_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CONSUMER_CREATE(ctx, req.(*API_GATEWAY_CONSUMER_CREATE_Request))
	}
	var _ApiGateway_API_GATEWAY_CONSUMER_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CONSUMER_CREATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_CREATE", srv)
		_ApiGateway_API_GATEWAY_CONSUMER_CREATE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CONSUMER_CREATE_Handler)
	}

	_ApiGateway_API_GATEWAY_CONSUMER_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CONSUMER_DELETE(ctx, req.(*API_GATEWAY_CONSUMER_DELETE_Request))
	}
	var _ApiGateway_API_GATEWAY_CONSUMER_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CONSUMER_DELETE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_DELETE", srv)
		_ApiGateway_API_GATEWAY_CONSUMER_DELETE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CONSUMER_DELETE_Handler)
	}

	_ApiGateway_API_GATEWAY_CONSUMER_EDIT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CONSUMER_EDIT(ctx, req.(*API_GATEWAY_CONSUMER_EDIT_Request))
	}
	var _ApiGateway_API_GATEWAY_CONSUMER_EDIT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CONSUMER_EDIT_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_EDIT", srv)
		_ApiGateway_API_GATEWAY_CONSUMER_EDIT_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CONSUMER_EDIT_Handler)
	}

	_ApiGateway_API_GATEWAY_CONSUMER_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CONSUMER_INFO(ctx, req.(*API_GATEWAY_CONSUMER_INFO_Request))
	}
	var _ApiGateway_API_GATEWAY_CONSUMER_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CONSUMER_INFO_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_INFO", srv)
		_ApiGateway_API_GATEWAY_CONSUMER_INFO_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CONSUMER_INFO_Handler)
	}

	_ApiGateway_API_GATEWAY_CONSUMER_INFO_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CONSUMER_INFO_UPDATE(ctx, req.(*API_GATEWAY_CONSUMER_INFO_UPDATE_Request))
	}
	var _ApiGateway_API_GATEWAY_CONSUMER_INFO_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CONSUMER_INFO_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_INFO_UPDATE", srv)
		_ApiGateway_API_GATEWAY_CONSUMER_INFO_UPDATE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CONSUMER_INFO_UPDATE_Handler)
	}

	_ApiGateway_API_GATEWAY_CONSUMER_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_CONSUMER_LIST(ctx, req.(*API_GATEWAY_CONSUMER_LIST_Request))
	}
	var _ApiGateway_API_GATEWAY_CONSUMER_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_CONSUMER_LIST_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_LIST", srv)
		_ApiGateway_API_GATEWAY_CONSUMER_LIST_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_CONSUMER_LIST_Handler)
	}

	_ApiGateway_API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_DOMAIN_CREATE_OR_UPDATE(ctx, req.(*API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request))
	}
	var _ApiGateway_API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_DOMAIN_CREATE_OR_UPDATE", srv)
		_ApiGateway_API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Handler)
	}

	_ApiGateway_API_GATEWAY_DOMAIN_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_DOMAIN_INFO(ctx, req.(*API_GATEWAY_DOMAIN_INFO_Request))
	}
	var _ApiGateway_API_GATEWAY_DOMAIN_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_DOMAIN_INFO_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_DOMAIN_INFO", srv)
		_ApiGateway_API_GATEWAY_DOMAIN_INFO_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_DOMAIN_INFO_Handler)
	}

	_ApiGateway_API_GATEWAY_OPENAPI_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_OPENAPI_CREATE(ctx, req.(*API_GATEWAY_OPENAPI_CREATE_Request))
	}
	var _ApiGateway_API_GATEWAY_OPENAPI_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_OPENAPI_CREATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_OPENAPI_CREATE", srv)
		_ApiGateway_API_GATEWAY_OPENAPI_CREATE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_OPENAPI_CREATE_Handler)
	}

	_ApiGateway_API_GATEWAY_OPENAPI_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_OPENAPI_DELETE(ctx, req.(*API_GATEWAY_OPENAPI_DELETE_Request))
	}
	var _ApiGateway_API_GATEWAY_OPENAPI_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_OPENAPI_DELETE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_OPENAPI_DELETE", srv)
		_ApiGateway_API_GATEWAY_OPENAPI_DELETE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_OPENAPI_DELETE_Handler)
	}

	_ApiGateway_API_GATEWAY_OPENAPI_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_OPENAPI_GET(ctx, req.(*API_GATEWAY_OPENAPI_GET_Request))
	}
	var _ApiGateway_API_GATEWAY_OPENAPI_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_OPENAPI_GET_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_OPENAPI_GET", srv)
		_ApiGateway_API_GATEWAY_OPENAPI_GET_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_OPENAPI_GET_Handler)
	}

	_ApiGateway_API_GATEWAY_OPENAPI_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_OPENAPI_UPDATE(ctx, req.(*API_GATEWAY_OPENAPI_UPDATE_Request))
	}
	var _ApiGateway_API_GATEWAY_OPENAPI_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_OPENAPI_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_OPENAPI_UPDATE", srv)
		_ApiGateway_API_GATEWAY_OPENAPI_UPDATE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_OPENAPI_UPDATE_Handler)
	}

	_ApiGateway_API_GATEWAY_PUBLISH_AUTHN_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_PUBLISH_AUTHN_GET(ctx, req.(*API_GATEWAY_PUBLISH_AUTHN_GET_Request))
	}
	var _ApiGateway_API_GATEWAY_PUBLISH_AUTHN_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_PUBLISH_AUTHN_GET_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_PUBLISH_AUTHN_GET", srv)
		_ApiGateway_API_GATEWAY_PUBLISH_AUTHN_GET_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_PUBLISH_AUTHN_GET_Handler)
	}

	_ApiGateway_API_GATEWAY_PUBLISH_SUBSCRIBE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_PUBLISH_SUBSCRIBE(ctx, req.(*API_GATEWAY_PUBLISH_SUBSCRIBE_Request))
	}
	var _ApiGateway_API_GATEWAY_PUBLISH_SUBSCRIBE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_PUBLISH_SUBSCRIBE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_PUBLISH_SUBSCRIBE", srv)
		_ApiGateway_API_GATEWAY_PUBLISH_SUBSCRIBE_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_PUBLISH_SUBSCRIBE_Handler)
	}

	_ApiGateway_API_GATEWAY_PUBLISH_SWAGGER_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_PUBLISH_SWAGGER_GET(ctx, req.(*API_GATEWAY_PUBLISH_SWAGGER_GET_Request))
	}
	var _ApiGateway_API_GATEWAY_PUBLISH_SWAGGER_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_PUBLISH_SWAGGER_GET_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_PUBLISH_SWAGGER_GET", srv)
		_ApiGateway_API_GATEWAY_PUBLISH_SWAGGER_GET_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_PUBLISH_SWAGGER_GET_Handler)
	}

	_ApiGateway_API_GATEWAY_REGISTER_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_REGISTER(ctx, req.(*API_GATEWAY_REGISTER_Request))
	}
	var _ApiGateway_API_GATEWAY_REGISTER_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_REGISTER_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_REGISTER", srv)
		_ApiGateway_API_GATEWAY_REGISTER_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_REGISTER_Handler)
	}

	_ApiGateway_API_GATEWAY_REGISTER_APPS_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_REGISTER_APPS_INFO(ctx, req.(*API_GATEWAY_REGISTER_APPS_INFO_Request))
	}
	var _ApiGateway_API_GATEWAY_REGISTER_APPS_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_REGISTER_APPS_INFO_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_REGISTER_APPS_INFO", srv)
		_ApiGateway_API_GATEWAY_REGISTER_APPS_INFO_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_REGISTER_APPS_INFO_Handler)
	}

	_ApiGateway_API_GATEWAY_REGISTER_PUBLISH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_REGISTER_PUBLISH(ctx, req.(*API_GATEWAY_REGISTER_PUBLISH_Request))
	}
	var _ApiGateway_API_GATEWAY_REGISTER_PUBLISH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_REGISTER_PUBLISH_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_REGISTER_PUBLISH", srv)
		_ApiGateway_API_GATEWAY_REGISTER_PUBLISH_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_REGISTER_PUBLISH_Handler)
	}

	_ApiGateway_API_GATEWAY_REGISTER_STATUS_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_REGISTER_STATUS_GET(ctx, req.(*API_GATEWAY_REGISTER_STATUS_GET_Request))
	}
	var _ApiGateway_API_GATEWAY_REGISTER_STATUS_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_REGISTER_STATUS_GET_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_REGISTER_STATUS_GET", srv)
		_ApiGateway_API_GATEWAY_REGISTER_STATUS_GET_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_REGISTER_STATUS_GET_Handler)
	}

	_ApiGateway_API_GATEWAY_UI_TYPE_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.API_GATEWAY_UI_TYPE_INFO(ctx, req.(*API_GATEWAY_UI_TYPE_INFO_Request))
	}
	var _ApiGateway_API_GATEWAY_UI_TYPE_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_ApiGateway_API_GATEWAY_UI_TYPE_INFO_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_UI_TYPE_INFO", srv)
		_ApiGateway_API_GATEWAY_UI_TYPE_INFO_Handler = h.Interceptor(_ApiGateway_API_GATEWAY_UI_TYPE_INFO_Handler)
	}

	var serviceDesc = _ApiGateway_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "API_GATEWAY_API_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_API_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_API_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_API_CREATE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_API_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_API_CREATE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_API_CREATE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_API_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_API_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_API_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_API_DELETE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_API_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_API_DELETE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_API_DELETE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_API_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_API_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_API_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_API_LIST_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_API_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_API_LIST",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_API_LIST_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_API_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_API_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_API_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_API_UPDATE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_API_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_API_UPDATE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_API_UPDATE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CATEGORY_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CATEGORY_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CATEGORY_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CATEGORY_CREATE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CATEGORY_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CATEGORY_CREATE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CATEGORY_CREATE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CATEGORY_CREATE_OR_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CATEGORY_CREATE_OR_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CATEGORY_CREATE_OR_UPDATE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CATEGORY_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CATEGORY_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CATEGORY_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CATEGORY_DELETE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CATEGORY_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CATEGORY_DELETE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CATEGORY_DELETE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CATEGORY_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CATEGORY_INFO_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CATEGORY_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CATEGORY_INFO_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CATEGORY_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CATEGORY_INFO",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CATEGORY_INFO_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CATEGORY_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CATEGORY_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CATEGORY_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CATEGORY_UPDATE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CATEGORY_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CATEGORY_UPDATE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CATEGORY_UPDATE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CHECK_COMPAT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CHECK_COMPAT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CHECK_COMPAT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CHECK_COMPAT_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CHECK_COMPAT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CHECK_COMPAT",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CHECK_COMPAT_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CONSUMER_API_EDIT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CONSUMER_API_EDIT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CONSUMER_API_EDIT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CONSUMER_API_EDIT_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CONSUMER_API_EDIT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_API_EDIT",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CONSUMER_API_EDIT_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CONSUMER_API_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CONSUMER_API_INFO_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CONSUMER_API_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CONSUMER_API_INFO_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CONSUMER_API_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_API_INFO",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CONSUMER_API_INFO_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CONSUMER_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CONSUMER_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CONSUMER_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CONSUMER_CREATE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CONSUMER_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_CREATE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CONSUMER_CREATE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CONSUMER_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CONSUMER_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CONSUMER_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CONSUMER_DELETE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CONSUMER_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_DELETE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CONSUMER_DELETE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CONSUMER_EDIT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CONSUMER_EDIT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CONSUMER_EDIT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CONSUMER_EDIT_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CONSUMER_EDIT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_EDIT",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CONSUMER_EDIT_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CONSUMER_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CONSUMER_INFO_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CONSUMER_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CONSUMER_INFO_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CONSUMER_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_INFO",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CONSUMER_INFO_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CONSUMER_INFO_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CONSUMER_INFO_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CONSUMER_INFO_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CONSUMER_INFO_UPDATE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CONSUMER_INFO_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_INFO_UPDATE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CONSUMER_INFO_UPDATE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_CONSUMER_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_CONSUMER_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_CONSUMER_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_CONSUMER_LIST_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_CONSUMER_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_CONSUMER_LIST",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_CONSUMER_LIST_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_DOMAIN_CREATE_OR_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_DOMAIN_CREATE_OR_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_DOMAIN_CREATE_OR_UPDATE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_DOMAIN_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_DOMAIN_INFO_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_DOMAIN_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_DOMAIN_INFO_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_DOMAIN_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_DOMAIN_INFO",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_DOMAIN_INFO_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_OPENAPI_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_OPENAPI_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_OPENAPI_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_OPENAPI_CREATE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_OPENAPI_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_OPENAPI_CREATE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_OPENAPI_CREATE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_OPENAPI_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_OPENAPI_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_OPENAPI_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_OPENAPI_DELETE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_OPENAPI_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_OPENAPI_DELETE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_OPENAPI_DELETE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_OPENAPI_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_OPENAPI_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_OPENAPI_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_OPENAPI_GET_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_OPENAPI_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_OPENAPI_GET",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_OPENAPI_GET_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_OPENAPI_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_OPENAPI_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_OPENAPI_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_OPENAPI_UPDATE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_OPENAPI_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_OPENAPI_UPDATE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_OPENAPI_UPDATE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_PUBLISH_AUTHN_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_PUBLISH_AUTHN_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_PUBLISH_AUTHN_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_PUBLISH_AUTHN_GET_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_PUBLISH_AUTHN_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_PUBLISH_AUTHN_GET",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_PUBLISH_AUTHN_GET_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_PUBLISH_SUBSCRIBE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_PUBLISH_SUBSCRIBE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_PUBLISH_SUBSCRIBE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_PUBLISH_SUBSCRIBE_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_PUBLISH_SUBSCRIBE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_PUBLISH_SUBSCRIBE",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_PUBLISH_SUBSCRIBE_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_PUBLISH_SWAGGER_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_PUBLISH_SWAGGER_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_PUBLISH_SWAGGER_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_PUBLISH_SWAGGER_GET_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_PUBLISH_SWAGGER_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_PUBLISH_SWAGGER_GET",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_PUBLISH_SWAGGER_GET_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_REGISTER",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_REGISTER_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_REGISTER(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_REGISTER_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_REGISTER_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_REGISTER",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_REGISTER_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_REGISTER_APPS_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_REGISTER_APPS_INFO_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_REGISTER_APPS_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_REGISTER_APPS_INFO_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_REGISTER_APPS_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_REGISTER_APPS_INFO",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_REGISTER_APPS_INFO_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_REGISTER_PUBLISH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_REGISTER_PUBLISH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_REGISTER_PUBLISH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_REGISTER_PUBLISH_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_REGISTER_PUBLISH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_REGISTER_PUBLISH",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_REGISTER_PUBLISH_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_REGISTER_STATUS_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_REGISTER_STATUS_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_REGISTER_STATUS_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_REGISTER_STATUS_GET_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_REGISTER_STATUS_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_REGISTER_STATUS_GET",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_REGISTER_STATUS_GET_Handler)
			},
		},
		{
			MethodName: "API_GATEWAY_UI_TYPE_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(API_GATEWAY_UI_TYPE_INFO_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(ApiGatewayServer).API_GATEWAY_UI_TYPE_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _ApiGateway_API_GATEWAY_UI_TYPE_INFO_info)
				}
				if interceptor == nil {
					return _ApiGateway_API_GATEWAY_UI_TYPE_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.api.api_gateway/API_GATEWAY_UI_TYPE_INFO",
				}
				return interceptor(ctx, in, info, _ApiGateway_API_GATEWAY_UI_TYPE_INFO_Handler)
			},
		},
	}
	return &serviceDesc
}
