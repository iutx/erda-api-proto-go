// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: api_gateway.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// ApiGatewayHandler is the server API for ApiGateway service.
type ApiGatewayHandler interface {
	// POST /api/gateway/api
	API_GATEWAY_API_CREATE(context.Context, *API_GATEWAY_API_CREATE_Request) (*emptypb.Empty, error)
	// DELETE /api/gateway/api/{apiId}
	API_GATEWAY_API_DELETE(context.Context, *API_GATEWAY_API_DELETE_Request) (*emptypb.Empty, error)
	// GET /api/gateway/api
	API_GATEWAY_API_LIST(context.Context, *API_GATEWAY_API_LIST_Request) (*emptypb.Empty, error)
	// PATCH /api/gateway/api/{apiId}
	API_GATEWAY_API_UPDATE(context.Context, *API_GATEWAY_API_UPDATE_Request) (*emptypb.Empty, error)
	// POST /api/gateway/policies/{category}
	API_GATEWAY_CATEGORY_CREATE(context.Context, *API_GATEWAY_CATEGORY_CREATE_Request) (*emptypb.Empty, error)
	// PUT /api/gateway/policies/{category}
	API_GATEWAY_CATEGORY_CREATE_OR_UPDATE(context.Context, *API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request) (*emptypb.Empty, error)
	// DELETE /api/gateway/policies/{category}/{policyId}
	API_GATEWAY_CATEGORY_DELETE(context.Context, *API_GATEWAY_CATEGORY_DELETE_Request) (*emptypb.Empty, error)
	// GET /api/gateway/policies/{category}
	API_GATEWAY_CATEGORY_INFO(context.Context, *API_GATEWAY_CATEGORY_INFO_Request) (*emptypb.Empty, error)
	// PATCH /api/gateway/policies/{category}/{policyId}
	API_GATEWAY_CATEGORY_UPDATE(context.Context, *API_GATEWAY_CATEGORY_UPDATE_Request) (*emptypb.Empty, error)
	// POST /api/gateway/check-compatibility
	API_GATEWAY_CHECK_COMPAT(context.Context, *API_GATEWAY_CHECK_COMPAT_Request) (*emptypb.Empty, error)
	// PATCH /api/gateway/consumer-api
	API_GATEWAY_CONSUMER_API_EDIT(context.Context, *API_GATEWAY_CONSUMER_API_EDIT_Request) (*emptypb.Empty, error)
	// GET /api/gateway/consumer
	API_GATEWAY_CONSUMER_API_INFO(context.Context, *API_GATEWAY_CONSUMER_API_INFO_Request) (*emptypb.Empty, error)
	// POST /api/gateway/consumer
	API_GATEWAY_CONSUMER_CREATE(context.Context, *API_GATEWAY_CONSUMER_CREATE_Request) (*emptypb.Empty, error)
	// DELETE /api/gateway/consumer/{consumerId}
	API_GATEWAY_CONSUMER_DELETE(context.Context, *API_GATEWAY_CONSUMER_DELETE_Request) (*emptypb.Empty, error)
	// PATCH /api/gateway/consumer
	API_GATEWAY_CONSUMER_EDIT(context.Context, *API_GATEWAY_CONSUMER_EDIT_Request) (*emptypb.Empty, error)
	// GET /api/gateway/consumer/{consumerId}
	API_GATEWAY_CONSUMER_INFO(context.Context, *API_GATEWAY_CONSUMER_INFO_Request) (*emptypb.Empty, error)
	// PATCH /api/gateway/consumer/{consumerId}
	API_GATEWAY_CONSUMER_INFO_UPDATE(context.Context, *API_GATEWAY_CONSUMER_INFO_UPDATE_Request) (*emptypb.Empty, error)
	// GET /api/gateway/consumer-list
	API_GATEWAY_CONSUMER_LIST(context.Context, *API_GATEWAY_CONSUMER_LIST_Request) (*emptypb.Empty, error)
	// PUT /api/gateway/domain
	API_GATEWAY_DOMAIN_CREATE_OR_UPDATE(context.Context, *API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request) (*emptypb.Empty, error)
	// GET /api/gateway/domain
	API_GATEWAY_DOMAIN_INFO(context.Context, *API_GATEWAY_DOMAIN_INFO_Request) (*emptypb.Empty, error)
	// POST /api/gateway/openapi/**
	API_GATEWAY_OPENAPI_CREATE(context.Context, *API_GATEWAY_OPENAPI_CREATE_Request) (*emptypb.Empty, error)
	// DELETE /api/gateway/openapi/**
	API_GATEWAY_OPENAPI_DELETE(context.Context, *API_GATEWAY_OPENAPI_DELETE_Request) (*emptypb.Empty, error)
	// GET /api/gateway/openapi/**
	API_GATEWAY_OPENAPI_GET(context.Context, *API_GATEWAY_OPENAPI_GET_Request) (*emptypb.Empty, error)
	// PATCH /api/gateway/openapi/**
	API_GATEWAY_OPENAPI_UPDATE(context.Context, *API_GATEWAY_OPENAPI_UPDATE_Request) (*emptypb.Empty, error)
	// GET /api/gateway/publications/{apiPublishId}/authn
	API_GATEWAY_PUBLISH_AUTHN_GET(context.Context, *API_GATEWAY_PUBLISH_AUTHN_GET_Request) (*emptypb.Empty, error)
	// POST /api/gateway/publications/{apiPublishId}/subscribe
	API_GATEWAY_PUBLISH_SUBSCRIBE(context.Context, *API_GATEWAY_PUBLISH_SUBSCRIBE_Request) (*emptypb.Empty, error)
	// GET /api/gateway/publications/{apiPublishId}/swagger
	API_GATEWAY_PUBLISH_SWAGGER_GET(context.Context, *API_GATEWAY_PUBLISH_SWAGGER_GET_Request) (*emptypb.Empty, error)
	// POST /api/gateway/registrations
	API_GATEWAY_REGISTER(context.Context, *API_GATEWAY_REGISTER_Request) (*emptypb.Empty, error)
	// GET /api/gateway/register-apps
	API_GATEWAY_REGISTER_APPS_INFO(context.Context, *API_GATEWAY_REGISTER_APPS_INFO_Request) (*emptypb.Empty, error)
	// POST /api/gateway/registrations/{apiRegisterId}/publish
	API_GATEWAY_REGISTER_PUBLISH(context.Context, *API_GATEWAY_REGISTER_PUBLISH_Request) (*emptypb.Empty, error)
	// GET /api/gateway/registrations/{apiRegisterId}/status
	API_GATEWAY_REGISTER_STATUS_GET(context.Context, *API_GATEWAY_REGISTER_STATUS_GET_Request) (*emptypb.Empty, error)
	// GET /api/gateway/ui-type
	API_GATEWAY_UI_TYPE_INFO(context.Context, *API_GATEWAY_UI_TYPE_INFO_Request) (*emptypb.Empty, error)
}

// RegisterApiGatewayHandler register ApiGatewayHandler to http.Router.
func RegisterApiGatewayHandler(r http.Router, srv ApiGatewayHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_API_GATEWAY_API_CREATE := func(method, path string, fn func(context.Context, *API_GATEWAY_API_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_API_CREATE_Request))
		}
		var API_GATEWAY_API_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_API_CREATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_API_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_API_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_API_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_API_DELETE := func(method, path string, fn func(context.Context, *API_GATEWAY_API_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_API_DELETE_Request))
		}
		var API_GATEWAY_API_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_API_DELETE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_API_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_API_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_API_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "apiId":
							in.ApiId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_API_LIST := func(method, path string, fn func(context.Context, *API_GATEWAY_API_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_API_LIST_Request))
		}
		var API_GATEWAY_API_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_API_LIST_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_API_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_API_LIST_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_API_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_API_UPDATE := func(method, path string, fn func(context.Context, *API_GATEWAY_API_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_API_UPDATE_Request))
		}
		var API_GATEWAY_API_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_API_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_API_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_API_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_API_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "apiId":
							in.ApiId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CATEGORY_CREATE := func(method, path string, fn func(context.Context, *API_GATEWAY_CATEGORY_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CATEGORY_CREATE_Request))
		}
		var API_GATEWAY_CATEGORY_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CATEGORY_CREATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CATEGORY_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CATEGORY_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CATEGORY_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "category":
							in.Category = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CATEGORY_CREATE_OR_UPDATE := func(method, path string, fn func(context.Context, *API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request))
		}
		var API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CATEGORY_CREATE_OR_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CATEGORY_CREATE_OR_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "category":
							in.Category = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CATEGORY_DELETE := func(method, path string, fn func(context.Context, *API_GATEWAY_CATEGORY_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CATEGORY_DELETE_Request))
		}
		var API_GATEWAY_CATEGORY_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CATEGORY_DELETE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CATEGORY_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CATEGORY_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CATEGORY_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "category":
							in.Category = val
						case "policyId":
							in.PolicyId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CATEGORY_INFO := func(method, path string, fn func(context.Context, *API_GATEWAY_CATEGORY_INFO_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CATEGORY_INFO_Request))
		}
		var API_GATEWAY_CATEGORY_INFO_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CATEGORY_INFO_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CATEGORY_INFO", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CATEGORY_INFO_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CATEGORY_INFO_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "category":
							in.Category = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CATEGORY_UPDATE := func(method, path string, fn func(context.Context, *API_GATEWAY_CATEGORY_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CATEGORY_UPDATE_Request))
		}
		var API_GATEWAY_CATEGORY_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CATEGORY_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CATEGORY_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CATEGORY_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CATEGORY_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "category":
							in.Category = val
						case "policyId":
							in.PolicyId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CHECK_COMPAT := func(method, path string, fn func(context.Context, *API_GATEWAY_CHECK_COMPAT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CHECK_COMPAT_Request))
		}
		var API_GATEWAY_CHECK_COMPAT_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CHECK_COMPAT_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CHECK_COMPAT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CHECK_COMPAT_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CHECK_COMPAT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CONSUMER_API_EDIT := func(method, path string, fn func(context.Context, *API_GATEWAY_CONSUMER_API_EDIT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CONSUMER_API_EDIT_Request))
		}
		var API_GATEWAY_CONSUMER_API_EDIT_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CONSUMER_API_EDIT_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_API_EDIT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CONSUMER_API_EDIT_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CONSUMER_API_EDIT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CONSUMER_API_INFO := func(method, path string, fn func(context.Context, *API_GATEWAY_CONSUMER_API_INFO_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CONSUMER_API_INFO_Request))
		}
		var API_GATEWAY_CONSUMER_API_INFO_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CONSUMER_API_INFO_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_API_INFO", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CONSUMER_API_INFO_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CONSUMER_API_INFO_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CONSUMER_CREATE := func(method, path string, fn func(context.Context, *API_GATEWAY_CONSUMER_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CONSUMER_CREATE_Request))
		}
		var API_GATEWAY_CONSUMER_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CONSUMER_CREATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CONSUMER_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CONSUMER_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CONSUMER_DELETE := func(method, path string, fn func(context.Context, *API_GATEWAY_CONSUMER_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CONSUMER_DELETE_Request))
		}
		var API_GATEWAY_CONSUMER_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CONSUMER_DELETE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CONSUMER_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CONSUMER_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "consumerId":
							in.ConsumerId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CONSUMER_EDIT := func(method, path string, fn func(context.Context, *API_GATEWAY_CONSUMER_EDIT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CONSUMER_EDIT_Request))
		}
		var API_GATEWAY_CONSUMER_EDIT_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CONSUMER_EDIT_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_EDIT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CONSUMER_EDIT_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CONSUMER_EDIT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CONSUMER_INFO := func(method, path string, fn func(context.Context, *API_GATEWAY_CONSUMER_INFO_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CONSUMER_INFO_Request))
		}
		var API_GATEWAY_CONSUMER_INFO_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CONSUMER_INFO_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_INFO", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CONSUMER_INFO_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CONSUMER_INFO_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "consumerId":
							in.ConsumerId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CONSUMER_INFO_UPDATE := func(method, path string, fn func(context.Context, *API_GATEWAY_CONSUMER_INFO_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CONSUMER_INFO_UPDATE_Request))
		}
		var API_GATEWAY_CONSUMER_INFO_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CONSUMER_INFO_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_INFO_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CONSUMER_INFO_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CONSUMER_INFO_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "consumerId":
							in.ConsumerId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_CONSUMER_LIST := func(method, path string, fn func(context.Context, *API_GATEWAY_CONSUMER_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_CONSUMER_LIST_Request))
		}
		var API_GATEWAY_CONSUMER_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_CONSUMER_LIST_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_CONSUMER_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_CONSUMER_LIST_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_CONSUMER_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_DOMAIN_CREATE_OR_UPDATE := func(method, path string, fn func(context.Context, *API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request))
		}
		var API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_DOMAIN_CREATE_OR_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_DOMAIN_CREATE_OR_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_DOMAIN_INFO := func(method, path string, fn func(context.Context, *API_GATEWAY_DOMAIN_INFO_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_DOMAIN_INFO_Request))
		}
		var API_GATEWAY_DOMAIN_INFO_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_DOMAIN_INFO_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_DOMAIN_INFO", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_DOMAIN_INFO_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_DOMAIN_INFO_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_OPENAPI_CREATE := func(method, path string, fn func(context.Context, *API_GATEWAY_OPENAPI_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_OPENAPI_CREATE_Request))
		}
		var API_GATEWAY_OPENAPI_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_OPENAPI_CREATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_OPENAPI_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_OPENAPI_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_OPENAPI_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_OPENAPI_DELETE := func(method, path string, fn func(context.Context, *API_GATEWAY_OPENAPI_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_OPENAPI_DELETE_Request))
		}
		var API_GATEWAY_OPENAPI_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_OPENAPI_DELETE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_OPENAPI_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_OPENAPI_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_OPENAPI_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_OPENAPI_GET := func(method, path string, fn func(context.Context, *API_GATEWAY_OPENAPI_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_OPENAPI_GET_Request))
		}
		var API_GATEWAY_OPENAPI_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_OPENAPI_GET_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_OPENAPI_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_OPENAPI_GET_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_OPENAPI_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_OPENAPI_UPDATE := func(method, path string, fn func(context.Context, *API_GATEWAY_OPENAPI_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_OPENAPI_UPDATE_Request))
		}
		var API_GATEWAY_OPENAPI_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_OPENAPI_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_OPENAPI_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_OPENAPI_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_OPENAPI_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_PUBLISH_AUTHN_GET := func(method, path string, fn func(context.Context, *API_GATEWAY_PUBLISH_AUTHN_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_PUBLISH_AUTHN_GET_Request))
		}
		var API_GATEWAY_PUBLISH_AUTHN_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_PUBLISH_AUTHN_GET_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_PUBLISH_AUTHN_GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_PUBLISH_AUTHN_GET_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_PUBLISH_AUTHN_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "apiPublishId":
							in.ApiPublishId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_PUBLISH_SUBSCRIBE := func(method, path string, fn func(context.Context, *API_GATEWAY_PUBLISH_SUBSCRIBE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_PUBLISH_SUBSCRIBE_Request))
		}
		var API_GATEWAY_PUBLISH_SUBSCRIBE_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_PUBLISH_SUBSCRIBE_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_PUBLISH_SUBSCRIBE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_PUBLISH_SUBSCRIBE_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_PUBLISH_SUBSCRIBE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "apiPublishId":
							in.ApiPublishId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_PUBLISH_SWAGGER_GET := func(method, path string, fn func(context.Context, *API_GATEWAY_PUBLISH_SWAGGER_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_PUBLISH_SWAGGER_GET_Request))
		}
		var API_GATEWAY_PUBLISH_SWAGGER_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_PUBLISH_SWAGGER_GET_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_PUBLISH_SWAGGER_GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_PUBLISH_SWAGGER_GET_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_PUBLISH_SWAGGER_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "apiPublishId":
							in.ApiPublishId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_REGISTER := func(method, path string, fn func(context.Context, *API_GATEWAY_REGISTER_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_REGISTER_Request))
		}
		var API_GATEWAY_REGISTER_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_REGISTER_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_REGISTER", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_REGISTER_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_REGISTER_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_REGISTER_APPS_INFO := func(method, path string, fn func(context.Context, *API_GATEWAY_REGISTER_APPS_INFO_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_REGISTER_APPS_INFO_Request))
		}
		var API_GATEWAY_REGISTER_APPS_INFO_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_REGISTER_APPS_INFO_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_REGISTER_APPS_INFO", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_REGISTER_APPS_INFO_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_REGISTER_APPS_INFO_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_REGISTER_PUBLISH := func(method, path string, fn func(context.Context, *API_GATEWAY_REGISTER_PUBLISH_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_REGISTER_PUBLISH_Request))
		}
		var API_GATEWAY_REGISTER_PUBLISH_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_REGISTER_PUBLISH_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_REGISTER_PUBLISH", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_REGISTER_PUBLISH_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_REGISTER_PUBLISH_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "apiRegisterId":
							in.ApiRegisterId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_REGISTER_STATUS_GET := func(method, path string, fn func(context.Context, *API_GATEWAY_REGISTER_STATUS_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_REGISTER_STATUS_GET_Request))
		}
		var API_GATEWAY_REGISTER_STATUS_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_REGISTER_STATUS_GET_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_REGISTER_STATUS_GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_REGISTER_STATUS_GET_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_REGISTER_STATUS_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "apiRegisterId":
							in.ApiRegisterId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_UI_TYPE_INFO := func(method, path string, fn func(context.Context, *API_GATEWAY_UI_TYPE_INFO_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*API_GATEWAY_UI_TYPE_INFO_Request))
		}
		var API_GATEWAY_UI_TYPE_INFO_info transport.ServiceInfo
		if h.Interceptor != nil {
			API_GATEWAY_UI_TYPE_INFO_info = transport.NewServiceInfo("erda.openapiv1.api.api_gateway", "API_GATEWAY_UI_TYPE_INFO", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, API_GATEWAY_UI_TYPE_INFO_info)
				}
				r = r.WithContext(ctx)
				var in API_GATEWAY_UI_TYPE_INFO_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_API_GATEWAY_API_CREATE("POST", "/api/gateway/api", srv.API_GATEWAY_API_CREATE)
	add_API_GATEWAY_API_DELETE("DELETE", "/api/gateway/api/{apiId}", srv.API_GATEWAY_API_DELETE)
	add_API_GATEWAY_API_LIST("GET", "/api/gateway/api", srv.API_GATEWAY_API_LIST)
	add_API_GATEWAY_API_UPDATE("PATCH", "/api/gateway/api/{apiId}", srv.API_GATEWAY_API_UPDATE)
	add_API_GATEWAY_CATEGORY_CREATE("POST", "/api/gateway/policies/{category}", srv.API_GATEWAY_CATEGORY_CREATE)
	add_API_GATEWAY_CATEGORY_CREATE_OR_UPDATE("PUT", "/api/gateway/policies/{category}", srv.API_GATEWAY_CATEGORY_CREATE_OR_UPDATE)
	add_API_GATEWAY_CATEGORY_DELETE("DELETE", "/api/gateway/policies/{category}/{policyId}", srv.API_GATEWAY_CATEGORY_DELETE)
	add_API_GATEWAY_CATEGORY_INFO("GET", "/api/gateway/policies/{category}", srv.API_GATEWAY_CATEGORY_INFO)
	add_API_GATEWAY_CATEGORY_UPDATE("PATCH", "/api/gateway/policies/{category}/{policyId}", srv.API_GATEWAY_CATEGORY_UPDATE)
	add_API_GATEWAY_CHECK_COMPAT("POST", "/api/gateway/check-compatibility", srv.API_GATEWAY_CHECK_COMPAT)
	add_API_GATEWAY_CONSUMER_API_EDIT("PATCH", "/api/gateway/consumer-api", srv.API_GATEWAY_CONSUMER_API_EDIT)
	add_API_GATEWAY_CONSUMER_API_INFO("GET", "/api/gateway/consumer", srv.API_GATEWAY_CONSUMER_API_INFO)
	add_API_GATEWAY_CONSUMER_CREATE("POST", "/api/gateway/consumer", srv.API_GATEWAY_CONSUMER_CREATE)
	add_API_GATEWAY_CONSUMER_DELETE("DELETE", "/api/gateway/consumer/{consumerId}", srv.API_GATEWAY_CONSUMER_DELETE)
	add_API_GATEWAY_CONSUMER_EDIT("PATCH", "/api/gateway/consumer", srv.API_GATEWAY_CONSUMER_EDIT)
	add_API_GATEWAY_CONSUMER_INFO("GET", "/api/gateway/consumer/{consumerId}", srv.API_GATEWAY_CONSUMER_INFO)
	add_API_GATEWAY_CONSUMER_INFO_UPDATE("PATCH", "/api/gateway/consumer/{consumerId}", srv.API_GATEWAY_CONSUMER_INFO_UPDATE)
	add_API_GATEWAY_CONSUMER_LIST("GET", "/api/gateway/consumer-list", srv.API_GATEWAY_CONSUMER_LIST)
	add_API_GATEWAY_DOMAIN_CREATE_OR_UPDATE("PUT", "/api/gateway/domain", srv.API_GATEWAY_DOMAIN_CREATE_OR_UPDATE)
	add_API_GATEWAY_DOMAIN_INFO("GET", "/api/gateway/domain", srv.API_GATEWAY_DOMAIN_INFO)
	add_API_GATEWAY_OPENAPI_CREATE("POST", "/api/gateway/openapi/**", srv.API_GATEWAY_OPENAPI_CREATE)
	add_API_GATEWAY_OPENAPI_DELETE("DELETE", "/api/gateway/openapi/**", srv.API_GATEWAY_OPENAPI_DELETE)
	add_API_GATEWAY_OPENAPI_GET("GET", "/api/gateway/openapi/**", srv.API_GATEWAY_OPENAPI_GET)
	add_API_GATEWAY_OPENAPI_UPDATE("PATCH", "/api/gateway/openapi/**", srv.API_GATEWAY_OPENAPI_UPDATE)
	add_API_GATEWAY_PUBLISH_AUTHN_GET("GET", "/api/gateway/publications/{apiPublishId}/authn", srv.API_GATEWAY_PUBLISH_AUTHN_GET)
	add_API_GATEWAY_PUBLISH_SUBSCRIBE("POST", "/api/gateway/publications/{apiPublishId}/subscribe", srv.API_GATEWAY_PUBLISH_SUBSCRIBE)
	add_API_GATEWAY_PUBLISH_SWAGGER_GET("GET", "/api/gateway/publications/{apiPublishId}/swagger", srv.API_GATEWAY_PUBLISH_SWAGGER_GET)
	add_API_GATEWAY_REGISTER("POST", "/api/gateway/registrations", srv.API_GATEWAY_REGISTER)
	add_API_GATEWAY_REGISTER_APPS_INFO("GET", "/api/gateway/register-apps", srv.API_GATEWAY_REGISTER_APPS_INFO)
	add_API_GATEWAY_REGISTER_PUBLISH("POST", "/api/gateway/registrations/{apiRegisterId}/publish", srv.API_GATEWAY_REGISTER_PUBLISH)
	add_API_GATEWAY_REGISTER_STATUS_GET("GET", "/api/gateway/registrations/{apiRegisterId}/status", srv.API_GATEWAY_REGISTER_STATUS_GET)
	add_API_GATEWAY_UI_TYPE_INFO("GET", "/api/gateway/ui-type", srv.API_GATEWAY_UI_TYPE_INFO)
}
