// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: msp_apm_alert.proto

package pb

import (
	url "net/url"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*APM_ALERTS_RULES_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_ALERTS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_ALERT_CREATE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_ALERT_DELETE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_ALERT_RECORDS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_ALERT_RECORD_ATTRS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_ALERT_RECORD_HISTORIES_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_ALERT_RECORD_ISSUE_CREATE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_ALERT_RECORD_ISSUE_UPDATE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_ALERT_RECORD_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_ALERT_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_ALERT_SWITCH_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_ALERT_UPDATE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_CUSTOMIZE_ALERTS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_CUSTOMIZE_ALERT_CREATE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_CUSTOMIZE_ALERT_DELETE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_CUSTOMIZE_ALERT_METRICS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_CUSTOMIZE_ALERT_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_CUSTOMIZE_ALERT_SWITCH_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*APM_CUSTOMIZE_ALERT_UPDATE_Request)(nil)

// APM_ALERTS_RULES_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_ALERTS_RULES_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			}
		}
	}
	return nil
}

// APM_ALERTS_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_ALERTS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			}
		}
	}
	return nil
}

// APM_ALERT_CREATE_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_ALERT_CREATE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			}
		}
	}
	return nil
}

// APM_ALERT_DELETE_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_ALERT_DELETE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// APM_ALERT_RECORDS_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_ALERT_RECORDS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			}
		}
	}
	return nil
}

// APM_ALERT_RECORD_ATTRS_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_ALERT_RECORD_ATTRS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			}
		}
	}
	return nil
}

// APM_ALERT_RECORD_HISTORIES_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_ALERT_RECORD_HISTORIES_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			case "groupId":
				m.GroupId = vals[0]
			}
		}
	}
	return nil
}

// APM_ALERT_RECORD_ISSUE_CREATE_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_ALERT_RECORD_ISSUE_CREATE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			case "groupId":
				m.GroupId = vals[0]
			}
		}
	}
	return nil
}

// APM_ALERT_RECORD_ISSUE_UPDATE_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_ALERT_RECORD_ISSUE_UPDATE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			case "groupId":
				m.GroupId = vals[0]
			case "issueId":
				m.IssueId = vals[0]
			}
		}
	}
	return nil
}

// APM_ALERT_RECORD_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_ALERT_RECORD_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			case "groupId":
				m.GroupId = vals[0]
			}
		}
	}
	return nil
}

// APM_ALERT_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_ALERT_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// APM_ALERT_SWITCH_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_ALERT_SWITCH_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// APM_ALERT_UPDATE_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_ALERT_UPDATE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// APM_CUSTOMIZE_ALERTS_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_CUSTOMIZE_ALERTS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			}
		}
	}
	return nil
}

// APM_CUSTOMIZE_ALERT_CREATE_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_CUSTOMIZE_ALERT_CREATE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			}
		}
	}
	return nil
}

// APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			}
		}
	}
	return nil
}

// APM_CUSTOMIZE_ALERT_DELETE_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_CUSTOMIZE_ALERT_DELETE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// APM_CUSTOMIZE_ALERT_METRICS_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_CUSTOMIZE_ALERT_METRICS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			}
		}
	}
	return nil
}

// APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			}
		}
	}
	return nil
}

// APM_CUSTOMIZE_ALERT_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_CUSTOMIZE_ALERT_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// APM_CUSTOMIZE_ALERT_SWITCH_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_CUSTOMIZE_ALERT_SWITCH_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// APM_CUSTOMIZE_ALERT_UPDATE_Request implement urlenc.URLValuesUnmarshaler.
func (m *APM_CUSTOMIZE_ALERT_UPDATE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "tenantGroup":
				m.TenantGroup = vals[0]
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}
