// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: msp_apm_alert.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on APM_ALERTS_RULES_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APM_ALERTS_RULES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_ALERTS_RULES_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APM_ALERTS_RULES_RequestMultiError, or nil if none found.
func (m *APM_ALERTS_RULES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_ALERTS_RULES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return APM_ALERTS_RULES_RequestMultiError(errors)
	}

	return nil
}

// APM_ALERTS_RULES_RequestMultiError is an error wrapping multiple validation
// errors returned by APM_ALERTS_RULES_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_ALERTS_RULES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_ALERTS_RULES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_ALERTS_RULES_RequestMultiError) AllErrors() []error { return m }

// APM_ALERTS_RULES_RequestValidationError is the validation error returned by
// APM_ALERTS_RULES_Request.Validate if the designated constraints aren't met.
type APM_ALERTS_RULES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_ALERTS_RULES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_ALERTS_RULES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_ALERTS_RULES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_ALERTS_RULES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_ALERTS_RULES_RequestValidationError) ErrorName() string {
	return "APM_ALERTS_RULES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_ALERTS_RULES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_ALERTS_RULES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_ALERTS_RULES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_ALERTS_RULES_RequestValidationError{}

// Validate checks the field values on APM_ALERTS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APM_ALERTS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_ALERTS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APM_ALERTS_RequestMultiError, or nil if none found.
func (m *APM_ALERTS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_ALERTS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return APM_ALERTS_RequestMultiError(errors)
	}

	return nil
}

// APM_ALERTS_RequestMultiError is an error wrapping multiple validation errors
// returned by APM_ALERTS_Request.ValidateAll() if the designated constraints
// aren't met.
type APM_ALERTS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_ALERTS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_ALERTS_RequestMultiError) AllErrors() []error { return m }

// APM_ALERTS_RequestValidationError is the validation error returned by
// APM_ALERTS_Request.Validate if the designated constraints aren't met.
type APM_ALERTS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_ALERTS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_ALERTS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_ALERTS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_ALERTS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_ALERTS_RequestValidationError) ErrorName() string {
	return "APM_ALERTS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_ALERTS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_ALERTS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_ALERTS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_ALERTS_RequestValidationError{}

// Validate checks the field values on APM_ALERT_CREATE_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APM_ALERT_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_ALERT_CREATE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APM_ALERT_CREATE_RequestMultiError, or nil if none found.
func (m *APM_ALERT_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_ALERT_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return APM_ALERT_CREATE_RequestMultiError(errors)
	}

	return nil
}

// APM_ALERT_CREATE_RequestMultiError is an error wrapping multiple validation
// errors returned by APM_ALERT_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_ALERT_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_ALERT_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_ALERT_CREATE_RequestMultiError) AllErrors() []error { return m }

// APM_ALERT_CREATE_RequestValidationError is the validation error returned by
// APM_ALERT_CREATE_Request.Validate if the designated constraints aren't met.
type APM_ALERT_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_ALERT_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_ALERT_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_ALERT_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_ALERT_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_ALERT_CREATE_RequestValidationError) ErrorName() string {
	return "APM_ALERT_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_ALERT_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_ALERT_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_ALERT_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_ALERT_CREATE_RequestValidationError{}

// Validate checks the field values on APM_ALERT_DELETE_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APM_ALERT_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_ALERT_DELETE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APM_ALERT_DELETE_RequestMultiError, or nil if none found.
func (m *APM_ALERT_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_ALERT_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for Id

	if len(errors) > 0 {
		return APM_ALERT_DELETE_RequestMultiError(errors)
	}

	return nil
}

// APM_ALERT_DELETE_RequestMultiError is an error wrapping multiple validation
// errors returned by APM_ALERT_DELETE_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_ALERT_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_ALERT_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_ALERT_DELETE_RequestMultiError) AllErrors() []error { return m }

// APM_ALERT_DELETE_RequestValidationError is the validation error returned by
// APM_ALERT_DELETE_Request.Validate if the designated constraints aren't met.
type APM_ALERT_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_ALERT_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_ALERT_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_ALERT_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_ALERT_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_ALERT_DELETE_RequestValidationError) ErrorName() string {
	return "APM_ALERT_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_ALERT_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_ALERT_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_ALERT_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_ALERT_DELETE_RequestValidationError{}

// Validate checks the field values on APM_ALERT_RECORDS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APM_ALERT_RECORDS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_ALERT_RECORDS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APM_ALERT_RECORDS_RequestMultiError, or nil if none found.
func (m *APM_ALERT_RECORDS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_ALERT_RECORDS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return APM_ALERT_RECORDS_RequestMultiError(errors)
	}

	return nil
}

// APM_ALERT_RECORDS_RequestMultiError is an error wrapping multiple validation
// errors returned by APM_ALERT_RECORDS_Request.ValidateAll() if the
// designated constraints aren't met.
type APM_ALERT_RECORDS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_ALERT_RECORDS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_ALERT_RECORDS_RequestMultiError) AllErrors() []error { return m }

// APM_ALERT_RECORDS_RequestValidationError is the validation error returned by
// APM_ALERT_RECORDS_Request.Validate if the designated constraints aren't met.
type APM_ALERT_RECORDS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_ALERT_RECORDS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_ALERT_RECORDS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_ALERT_RECORDS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_ALERT_RECORDS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_ALERT_RECORDS_RequestValidationError) ErrorName() string {
	return "APM_ALERT_RECORDS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_ALERT_RECORDS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_ALERT_RECORDS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_ALERT_RECORDS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_ALERT_RECORDS_RequestValidationError{}

// Validate checks the field values on APM_ALERT_RECORD_ATTRS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APM_ALERT_RECORD_ATTRS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_ALERT_RECORD_ATTRS_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// APM_ALERT_RECORD_ATTRS_RequestMultiError, or nil if none found.
func (m *APM_ALERT_RECORD_ATTRS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_ALERT_RECORD_ATTRS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return APM_ALERT_RECORD_ATTRS_RequestMultiError(errors)
	}

	return nil
}

// APM_ALERT_RECORD_ATTRS_RequestMultiError is an error wrapping multiple
// validation errors returned by APM_ALERT_RECORD_ATTRS_Request.ValidateAll()
// if the designated constraints aren't met.
type APM_ALERT_RECORD_ATTRS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_ALERT_RECORD_ATTRS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_ALERT_RECORD_ATTRS_RequestMultiError) AllErrors() []error { return m }

// APM_ALERT_RECORD_ATTRS_RequestValidationError is the validation error
// returned by APM_ALERT_RECORD_ATTRS_Request.Validate if the designated
// constraints aren't met.
type APM_ALERT_RECORD_ATTRS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_ALERT_RECORD_ATTRS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_ALERT_RECORD_ATTRS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_ALERT_RECORD_ATTRS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_ALERT_RECORD_ATTRS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_ALERT_RECORD_ATTRS_RequestValidationError) ErrorName() string {
	return "APM_ALERT_RECORD_ATTRS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_ALERT_RECORD_ATTRS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_ALERT_RECORD_ATTRS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_ALERT_RECORD_ATTRS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_ALERT_RECORD_ATTRS_RequestValidationError{}

// Validate checks the field values on APM_ALERT_RECORD_HISTORIES_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *APM_ALERT_RECORD_HISTORIES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_ALERT_RECORD_HISTORIES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// APM_ALERT_RECORD_HISTORIES_RequestMultiError, or nil if none found.
func (m *APM_ALERT_RECORD_HISTORIES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_ALERT_RECORD_HISTORIES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for GroupId

	if len(errors) > 0 {
		return APM_ALERT_RECORD_HISTORIES_RequestMultiError(errors)
	}

	return nil
}

// APM_ALERT_RECORD_HISTORIES_RequestMultiError is an error wrapping multiple
// validation errors returned by
// APM_ALERT_RECORD_HISTORIES_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_ALERT_RECORD_HISTORIES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_ALERT_RECORD_HISTORIES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_ALERT_RECORD_HISTORIES_RequestMultiError) AllErrors() []error { return m }

// APM_ALERT_RECORD_HISTORIES_RequestValidationError is the validation error
// returned by APM_ALERT_RECORD_HISTORIES_Request.Validate if the designated
// constraints aren't met.
type APM_ALERT_RECORD_HISTORIES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_ALERT_RECORD_HISTORIES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_ALERT_RECORD_HISTORIES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_ALERT_RECORD_HISTORIES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_ALERT_RECORD_HISTORIES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_ALERT_RECORD_HISTORIES_RequestValidationError) ErrorName() string {
	return "APM_ALERT_RECORD_HISTORIES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_ALERT_RECORD_HISTORIES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_ALERT_RECORD_HISTORIES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_ALERT_RECORD_HISTORIES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_ALERT_RECORD_HISTORIES_RequestValidationError{}

// Validate checks the field values on APM_ALERT_RECORD_ISSUE_CREATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *APM_ALERT_RECORD_ISSUE_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_ALERT_RECORD_ISSUE_CREATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// APM_ALERT_RECORD_ISSUE_CREATE_RequestMultiError, or nil if none found.
func (m *APM_ALERT_RECORD_ISSUE_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_ALERT_RECORD_ISSUE_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for GroupId

	if len(errors) > 0 {
		return APM_ALERT_RECORD_ISSUE_CREATE_RequestMultiError(errors)
	}

	return nil
}

// APM_ALERT_RECORD_ISSUE_CREATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// APM_ALERT_RECORD_ISSUE_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_ALERT_RECORD_ISSUE_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_ALERT_RECORD_ISSUE_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_ALERT_RECORD_ISSUE_CREATE_RequestMultiError) AllErrors() []error { return m }

// APM_ALERT_RECORD_ISSUE_CREATE_RequestValidationError is the validation error
// returned by APM_ALERT_RECORD_ISSUE_CREATE_Request.Validate if the
// designated constraints aren't met.
type APM_ALERT_RECORD_ISSUE_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_ALERT_RECORD_ISSUE_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_ALERT_RECORD_ISSUE_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_ALERT_RECORD_ISSUE_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_ALERT_RECORD_ISSUE_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_ALERT_RECORD_ISSUE_CREATE_RequestValidationError) ErrorName() string {
	return "APM_ALERT_RECORD_ISSUE_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_ALERT_RECORD_ISSUE_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_ALERT_RECORD_ISSUE_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_ALERT_RECORD_ISSUE_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_ALERT_RECORD_ISSUE_CREATE_RequestValidationError{}

// Validate checks the field values on APM_ALERT_RECORD_ISSUE_UPDATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *APM_ALERT_RECORD_ISSUE_UPDATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_ALERT_RECORD_ISSUE_UPDATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// APM_ALERT_RECORD_ISSUE_UPDATE_RequestMultiError, or nil if none found.
func (m *APM_ALERT_RECORD_ISSUE_UPDATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_ALERT_RECORD_ISSUE_UPDATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for GroupId

	// no validation rules for IssueId

	if len(errors) > 0 {
		return APM_ALERT_RECORD_ISSUE_UPDATE_RequestMultiError(errors)
	}

	return nil
}

// APM_ALERT_RECORD_ISSUE_UPDATE_RequestMultiError is an error wrapping
// multiple validation errors returned by
// APM_ALERT_RECORD_ISSUE_UPDATE_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_ALERT_RECORD_ISSUE_UPDATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_ALERT_RECORD_ISSUE_UPDATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_ALERT_RECORD_ISSUE_UPDATE_RequestMultiError) AllErrors() []error { return m }

// APM_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError is the validation error
// returned by APM_ALERT_RECORD_ISSUE_UPDATE_Request.Validate if the
// designated constraints aren't met.
type APM_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError) ErrorName() string {
	return "APM_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_ALERT_RECORD_ISSUE_UPDATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_ALERT_RECORD_ISSUE_UPDATE_RequestValidationError{}

// Validate checks the field values on APM_ALERT_RECORD_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APM_ALERT_RECORD_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_ALERT_RECORD_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APM_ALERT_RECORD_RequestMultiError, or nil if none found.
func (m *APM_ALERT_RECORD_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_ALERT_RECORD_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for GroupId

	if len(errors) > 0 {
		return APM_ALERT_RECORD_RequestMultiError(errors)
	}

	return nil
}

// APM_ALERT_RECORD_RequestMultiError is an error wrapping multiple validation
// errors returned by APM_ALERT_RECORD_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_ALERT_RECORD_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_ALERT_RECORD_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_ALERT_RECORD_RequestMultiError) AllErrors() []error { return m }

// APM_ALERT_RECORD_RequestValidationError is the validation error returned by
// APM_ALERT_RECORD_Request.Validate if the designated constraints aren't met.
type APM_ALERT_RECORD_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_ALERT_RECORD_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_ALERT_RECORD_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_ALERT_RECORD_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_ALERT_RECORD_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_ALERT_RECORD_RequestValidationError) ErrorName() string {
	return "APM_ALERT_RECORD_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_ALERT_RECORD_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_ALERT_RECORD_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_ALERT_RECORD_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_ALERT_RECORD_RequestValidationError{}

// Validate checks the field values on APM_ALERT_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *APM_ALERT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_ALERT_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APM_ALERT_RequestMultiError, or nil if none found.
func (m *APM_ALERT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_ALERT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for Id

	if len(errors) > 0 {
		return APM_ALERT_RequestMultiError(errors)
	}

	return nil
}

// APM_ALERT_RequestMultiError is an error wrapping multiple validation errors
// returned by APM_ALERT_Request.ValidateAll() if the designated constraints
// aren't met.
type APM_ALERT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_ALERT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_ALERT_RequestMultiError) AllErrors() []error { return m }

// APM_ALERT_RequestValidationError is the validation error returned by
// APM_ALERT_Request.Validate if the designated constraints aren't met.
type APM_ALERT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_ALERT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_ALERT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_ALERT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_ALERT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_ALERT_RequestValidationError) ErrorName() string {
	return "APM_ALERT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_ALERT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_ALERT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_ALERT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_ALERT_RequestValidationError{}

// Validate checks the field values on APM_ALERT_SWITCH_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APM_ALERT_SWITCH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_ALERT_SWITCH_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APM_ALERT_SWITCH_RequestMultiError, or nil if none found.
func (m *APM_ALERT_SWITCH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_ALERT_SWITCH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for Id

	if len(errors) > 0 {
		return APM_ALERT_SWITCH_RequestMultiError(errors)
	}

	return nil
}

// APM_ALERT_SWITCH_RequestMultiError is an error wrapping multiple validation
// errors returned by APM_ALERT_SWITCH_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_ALERT_SWITCH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_ALERT_SWITCH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_ALERT_SWITCH_RequestMultiError) AllErrors() []error { return m }

// APM_ALERT_SWITCH_RequestValidationError is the validation error returned by
// APM_ALERT_SWITCH_Request.Validate if the designated constraints aren't met.
type APM_ALERT_SWITCH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_ALERT_SWITCH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_ALERT_SWITCH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_ALERT_SWITCH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_ALERT_SWITCH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_ALERT_SWITCH_RequestValidationError) ErrorName() string {
	return "APM_ALERT_SWITCH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_ALERT_SWITCH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_ALERT_SWITCH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_ALERT_SWITCH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_ALERT_SWITCH_RequestValidationError{}

// Validate checks the field values on APM_ALERT_UPDATE_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APM_ALERT_UPDATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_ALERT_UPDATE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APM_ALERT_UPDATE_RequestMultiError, or nil if none found.
func (m *APM_ALERT_UPDATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_ALERT_UPDATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for Id

	if len(errors) > 0 {
		return APM_ALERT_UPDATE_RequestMultiError(errors)
	}

	return nil
}

// APM_ALERT_UPDATE_RequestMultiError is an error wrapping multiple validation
// errors returned by APM_ALERT_UPDATE_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_ALERT_UPDATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_ALERT_UPDATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_ALERT_UPDATE_RequestMultiError) AllErrors() []error { return m }

// APM_ALERT_UPDATE_RequestValidationError is the validation error returned by
// APM_ALERT_UPDATE_Request.Validate if the designated constraints aren't met.
type APM_ALERT_UPDATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_ALERT_UPDATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_ALERT_UPDATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_ALERT_UPDATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_ALERT_UPDATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_ALERT_UPDATE_RequestValidationError) ErrorName() string {
	return "APM_ALERT_UPDATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_ALERT_UPDATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_ALERT_UPDATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_ALERT_UPDATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_ALERT_UPDATE_RequestValidationError{}

// Validate checks the field values on APM_CUSTOMIZE_ALERTS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APM_CUSTOMIZE_ALERTS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_CUSTOMIZE_ALERTS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APM_CUSTOMIZE_ALERTS_RequestMultiError, or nil if none found.
func (m *APM_CUSTOMIZE_ALERTS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_CUSTOMIZE_ALERTS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return APM_CUSTOMIZE_ALERTS_RequestMultiError(errors)
	}

	return nil
}

// APM_CUSTOMIZE_ALERTS_RequestMultiError is an error wrapping multiple
// validation errors returned by APM_CUSTOMIZE_ALERTS_Request.ValidateAll() if
// the designated constraints aren't met.
type APM_CUSTOMIZE_ALERTS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_CUSTOMIZE_ALERTS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_CUSTOMIZE_ALERTS_RequestMultiError) AllErrors() []error { return m }

// APM_CUSTOMIZE_ALERTS_RequestValidationError is the validation error returned
// by APM_CUSTOMIZE_ALERTS_Request.Validate if the designated constraints
// aren't met.
type APM_CUSTOMIZE_ALERTS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_CUSTOMIZE_ALERTS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_CUSTOMIZE_ALERTS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_CUSTOMIZE_ALERTS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_CUSTOMIZE_ALERTS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_CUSTOMIZE_ALERTS_RequestValidationError) ErrorName() string {
	return "APM_CUSTOMIZE_ALERTS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_CUSTOMIZE_ALERTS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_CUSTOMIZE_ALERTS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_CUSTOMIZE_ALERTS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_CUSTOMIZE_ALERTS_RequestValidationError{}

// Validate checks the field values on APM_CUSTOMIZE_ALERT_CREATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *APM_CUSTOMIZE_ALERT_CREATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_CUSTOMIZE_ALERT_CREATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// APM_CUSTOMIZE_ALERT_CREATE_RequestMultiError, or nil if none found.
func (m *APM_CUSTOMIZE_ALERT_CREATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_CUSTOMIZE_ALERT_CREATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return APM_CUSTOMIZE_ALERT_CREATE_RequestMultiError(errors)
	}

	return nil
}

// APM_CUSTOMIZE_ALERT_CREATE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// APM_CUSTOMIZE_ALERT_CREATE_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_CUSTOMIZE_ALERT_CREATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_CUSTOMIZE_ALERT_CREATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_CUSTOMIZE_ALERT_CREATE_RequestMultiError) AllErrors() []error { return m }

// APM_CUSTOMIZE_ALERT_CREATE_RequestValidationError is the validation error
// returned by APM_CUSTOMIZE_ALERT_CREATE_Request.Validate if the designated
// constraints aren't met.
type APM_CUSTOMIZE_ALERT_CREATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_CUSTOMIZE_ALERT_CREATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_CUSTOMIZE_ALERT_CREATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_CUSTOMIZE_ALERT_CREATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_CUSTOMIZE_ALERT_CREATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_CUSTOMIZE_ALERT_CREATE_RequestValidationError) ErrorName() string {
	return "APM_CUSTOMIZE_ALERT_CREATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_CUSTOMIZE_ALERT_CREATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_CUSTOMIZE_ALERT_CREATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_CUSTOMIZE_ALERT_CREATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_CUSTOMIZE_ALERT_CREATE_RequestValidationError{}

// Validate checks the field values on APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestMultiError, or nil if none found.
func (m *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestMultiError(errors)
	}

	return nil
}

// APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestMultiError is an error wrapping
// multiple validation errors returned by
// APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestMultiError) AllErrors() []error { return m }

// APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError is the validation
// error returned by APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request.Validate if the
// designated constraints aren't met.
type APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError) ErrorName() string {
	return "APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_CUSTOMIZE_ALERT_DASH_PREVIEW_RequestValidationError{}

// Validate checks the field values on APM_CUSTOMIZE_ALERT_DELETE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *APM_CUSTOMIZE_ALERT_DELETE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_CUSTOMIZE_ALERT_DELETE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// APM_CUSTOMIZE_ALERT_DELETE_RequestMultiError, or nil if none found.
func (m *APM_CUSTOMIZE_ALERT_DELETE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_CUSTOMIZE_ALERT_DELETE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for Id

	if len(errors) > 0 {
		return APM_CUSTOMIZE_ALERT_DELETE_RequestMultiError(errors)
	}

	return nil
}

// APM_CUSTOMIZE_ALERT_DELETE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// APM_CUSTOMIZE_ALERT_DELETE_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_CUSTOMIZE_ALERT_DELETE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_CUSTOMIZE_ALERT_DELETE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_CUSTOMIZE_ALERT_DELETE_RequestMultiError) AllErrors() []error { return m }

// APM_CUSTOMIZE_ALERT_DELETE_RequestValidationError is the validation error
// returned by APM_CUSTOMIZE_ALERT_DELETE_Request.Validate if the designated
// constraints aren't met.
type APM_CUSTOMIZE_ALERT_DELETE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_CUSTOMIZE_ALERT_DELETE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_CUSTOMIZE_ALERT_DELETE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_CUSTOMIZE_ALERT_DELETE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_CUSTOMIZE_ALERT_DELETE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_CUSTOMIZE_ALERT_DELETE_RequestValidationError) ErrorName() string {
	return "APM_CUSTOMIZE_ALERT_DELETE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_CUSTOMIZE_ALERT_DELETE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_CUSTOMIZE_ALERT_DELETE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_CUSTOMIZE_ALERT_DELETE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_CUSTOMIZE_ALERT_DELETE_RequestValidationError{}

// Validate checks the field values on APM_CUSTOMIZE_ALERT_METRICS_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *APM_CUSTOMIZE_ALERT_METRICS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_CUSTOMIZE_ALERT_METRICS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// APM_CUSTOMIZE_ALERT_METRICS_RequestMultiError, or nil if none found.
func (m *APM_CUSTOMIZE_ALERT_METRICS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_CUSTOMIZE_ALERT_METRICS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return APM_CUSTOMIZE_ALERT_METRICS_RequestMultiError(errors)
	}

	return nil
}

// APM_CUSTOMIZE_ALERT_METRICS_RequestMultiError is an error wrapping multiple
// validation errors returned by
// APM_CUSTOMIZE_ALERT_METRICS_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_CUSTOMIZE_ALERT_METRICS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_CUSTOMIZE_ALERT_METRICS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_CUSTOMIZE_ALERT_METRICS_RequestMultiError) AllErrors() []error { return m }

// APM_CUSTOMIZE_ALERT_METRICS_RequestValidationError is the validation error
// returned by APM_CUSTOMIZE_ALERT_METRICS_Request.Validate if the designated
// constraints aren't met.
type APM_CUSTOMIZE_ALERT_METRICS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_CUSTOMIZE_ALERT_METRICS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_CUSTOMIZE_ALERT_METRICS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_CUSTOMIZE_ALERT_METRICS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_CUSTOMIZE_ALERT_METRICS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_CUSTOMIZE_ALERT_METRICS_RequestValidationError) ErrorName() string {
	return "APM_CUSTOMIZE_ALERT_METRICS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_CUSTOMIZE_ALERT_METRICS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_CUSTOMIZE_ALERT_METRICS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_CUSTOMIZE_ALERT_METRICS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_CUSTOMIZE_ALERT_METRICS_RequestValidationError{}

// Validate checks the field values on
// APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestMultiError, or nil if none found.
func (m *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	if len(errors) > 0 {
		return APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestMultiError(errors)
	}

	return nil
}

// APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestMultiError is an error wrapping
// multiple validation errors returned by
// APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestMultiError) AllErrors() []error { return m }

// APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError is the validation
// error returned by APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request.Validate if the
// designated constraints aren't met.
type APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError) ErrorName() string {
	return "APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_RequestValidationError{}

// Validate checks the field values on APM_CUSTOMIZE_ALERT_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APM_CUSTOMIZE_ALERT_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_CUSTOMIZE_ALERT_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APM_CUSTOMIZE_ALERT_RequestMultiError, or nil if none found.
func (m *APM_CUSTOMIZE_ALERT_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_CUSTOMIZE_ALERT_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for Id

	if len(errors) > 0 {
		return APM_CUSTOMIZE_ALERT_RequestMultiError(errors)
	}

	return nil
}

// APM_CUSTOMIZE_ALERT_RequestMultiError is an error wrapping multiple
// validation errors returned by APM_CUSTOMIZE_ALERT_Request.ValidateAll() if
// the designated constraints aren't met.
type APM_CUSTOMIZE_ALERT_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_CUSTOMIZE_ALERT_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_CUSTOMIZE_ALERT_RequestMultiError) AllErrors() []error { return m }

// APM_CUSTOMIZE_ALERT_RequestValidationError is the validation error returned
// by APM_CUSTOMIZE_ALERT_Request.Validate if the designated constraints
// aren't met.
type APM_CUSTOMIZE_ALERT_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_CUSTOMIZE_ALERT_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_CUSTOMIZE_ALERT_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_CUSTOMIZE_ALERT_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_CUSTOMIZE_ALERT_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_CUSTOMIZE_ALERT_RequestValidationError) ErrorName() string {
	return "APM_CUSTOMIZE_ALERT_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_CUSTOMIZE_ALERT_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_CUSTOMIZE_ALERT_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_CUSTOMIZE_ALERT_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_CUSTOMIZE_ALERT_RequestValidationError{}

// Validate checks the field values on APM_CUSTOMIZE_ALERT_SWITCH_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *APM_CUSTOMIZE_ALERT_SWITCH_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_CUSTOMIZE_ALERT_SWITCH_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// APM_CUSTOMIZE_ALERT_SWITCH_RequestMultiError, or nil if none found.
func (m *APM_CUSTOMIZE_ALERT_SWITCH_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_CUSTOMIZE_ALERT_SWITCH_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for Id

	if len(errors) > 0 {
		return APM_CUSTOMIZE_ALERT_SWITCH_RequestMultiError(errors)
	}

	return nil
}

// APM_CUSTOMIZE_ALERT_SWITCH_RequestMultiError is an error wrapping multiple
// validation errors returned by
// APM_CUSTOMIZE_ALERT_SWITCH_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_CUSTOMIZE_ALERT_SWITCH_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_CUSTOMIZE_ALERT_SWITCH_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_CUSTOMIZE_ALERT_SWITCH_RequestMultiError) AllErrors() []error { return m }

// APM_CUSTOMIZE_ALERT_SWITCH_RequestValidationError is the validation error
// returned by APM_CUSTOMIZE_ALERT_SWITCH_Request.Validate if the designated
// constraints aren't met.
type APM_CUSTOMIZE_ALERT_SWITCH_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_CUSTOMIZE_ALERT_SWITCH_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_CUSTOMIZE_ALERT_SWITCH_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_CUSTOMIZE_ALERT_SWITCH_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_CUSTOMIZE_ALERT_SWITCH_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_CUSTOMIZE_ALERT_SWITCH_RequestValidationError) ErrorName() string {
	return "APM_CUSTOMIZE_ALERT_SWITCH_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_CUSTOMIZE_ALERT_SWITCH_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_CUSTOMIZE_ALERT_SWITCH_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_CUSTOMIZE_ALERT_SWITCH_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_CUSTOMIZE_ALERT_SWITCH_RequestValidationError{}

// Validate checks the field values on APM_CUSTOMIZE_ALERT_UPDATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *APM_CUSTOMIZE_ALERT_UPDATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APM_CUSTOMIZE_ALERT_UPDATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// APM_CUSTOMIZE_ALERT_UPDATE_RequestMultiError, or nil if none found.
func (m *APM_CUSTOMIZE_ALERT_UPDATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *APM_CUSTOMIZE_ALERT_UPDATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantGroup

	// no validation rules for Id

	if len(errors) > 0 {
		return APM_CUSTOMIZE_ALERT_UPDATE_RequestMultiError(errors)
	}

	return nil
}

// APM_CUSTOMIZE_ALERT_UPDATE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// APM_CUSTOMIZE_ALERT_UPDATE_Request.ValidateAll() if the designated
// constraints aren't met.
type APM_CUSTOMIZE_ALERT_UPDATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APM_CUSTOMIZE_ALERT_UPDATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APM_CUSTOMIZE_ALERT_UPDATE_RequestMultiError) AllErrors() []error { return m }

// APM_CUSTOMIZE_ALERT_UPDATE_RequestValidationError is the validation error
// returned by APM_CUSTOMIZE_ALERT_UPDATE_Request.Validate if the designated
// constraints aren't met.
type APM_CUSTOMIZE_ALERT_UPDATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APM_CUSTOMIZE_ALERT_UPDATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APM_CUSTOMIZE_ALERT_UPDATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APM_CUSTOMIZE_ALERT_UPDATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APM_CUSTOMIZE_ALERT_UPDATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APM_CUSTOMIZE_ALERT_UPDATE_RequestValidationError) ErrorName() string {
	return "APM_CUSTOMIZE_ALERT_UPDATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e APM_CUSTOMIZE_ALERT_UPDATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPM_CUSTOMIZE_ALERT_UPDATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APM_CUSTOMIZE_ALERT_UPDATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APM_CUSTOMIZE_ALERT_UPDATE_RequestValidationError{}
