// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: msp_apm_alert.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// MspApmAlertHandler is the server API for MspApmAlert service.
type MspApmAlertHandler interface {
	// GET /api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts/{id}
	APM_ALERT(context.Context, *APM_ALERT_Request) (*emptypb.Empty, error)
	// GET /api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts
	APM_ALERTS(context.Context, *APM_ALERTS_Request) (*emptypb.Empty, error)
	// GET /api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts-rules
	APM_ALERTS_RULES(context.Context, *APM_ALERTS_RULES_Request) (*emptypb.Empty, error)
	// POST /api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts
	APM_ALERT_CREATE(context.Context, *APM_ALERT_CREATE_Request) (*emptypb.Empty, error)
	// DELETE /api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts/{id}
	APM_ALERT_DELETE(context.Context, *APM_ALERT_DELETE_Request) (*emptypb.Empty, error)
	// GET /api/tmc/tenantGroup/{tenantGroup}/alert-records/{groupId}
	APM_ALERT_RECORD(context.Context, *APM_ALERT_RECORD_Request) (*emptypb.Empty, error)
	// GET /api/tmc/tenantGroup/{tenantGroup}/alert-records
	APM_ALERT_RECORDS(context.Context, *APM_ALERT_RECORDS_Request) (*emptypb.Empty, error)
	// GET /api/tmc/tenantGroup/{tenantGroup}/alert-record-attrs
	APM_ALERT_RECORD_ATTRS(context.Context, *APM_ALERT_RECORD_ATTRS_Request) (*emptypb.Empty, error)
	// GET /api/tmc/tenantGroup/{tenantGroup}/alert-records/{groupId}/histories
	APM_ALERT_RECORD_HISTORIES(context.Context, *APM_ALERT_RECORD_HISTORIES_Request) (*emptypb.Empty, error)
	// POST /api/tmc/tenantGroup/{tenantGroup}/alert-records/{groupId}/issues
	APM_ALERT_RECORD_ISSUE_CREATE(context.Context, *APM_ALERT_RECORD_ISSUE_CREATE_Request) (*emptypb.Empty, error)
	// PUT /api/tmc/tenantGroup/{tenantGroup}/alert-records/{groupId}/issues/{issueId}
	APM_ALERT_RECORD_ISSUE_UPDATE(context.Context, *APM_ALERT_RECORD_ISSUE_UPDATE_Request) (*emptypb.Empty, error)
	// PUT /api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts/{id}/switch
	APM_ALERT_SWITCH(context.Context, *APM_ALERT_SWITCH_Request) (*emptypb.Empty, error)
	// PUT /api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts/{id}
	APM_ALERT_UPDATE(context.Context, *APM_ALERT_UPDATE_Request) (*emptypb.Empty, error)
	// GET /api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/{id}
	APM_CUSTOMIZE_ALERT(context.Context, *APM_CUSTOMIZE_ALERT_Request) (*emptypb.Empty, error)
	// GET /api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts
	APM_CUSTOMIZE_ALERTS(context.Context, *APM_CUSTOMIZE_ALERTS_Request) (*emptypb.Empty, error)
	// POST /api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts
	APM_CUSTOMIZE_ALERT_CREATE(context.Context, *APM_CUSTOMIZE_ALERT_CREATE_Request) (*emptypb.Empty, error)
	// POST /api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/dash-preview/query
	APM_CUSTOMIZE_ALERT_DASH_PREVIEW(context.Context, *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) (*emptypb.Empty, error)
	// DELETE /api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/{id}
	APM_CUSTOMIZE_ALERT_DELETE(context.Context, *APM_CUSTOMIZE_ALERT_DELETE_Request) (*emptypb.Empty, error)
	// GET /api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/metrics
	APM_CUSTOMIZE_ALERT_METRICS(context.Context, *APM_CUSTOMIZE_ALERT_METRICS_Request) (*emptypb.Empty, error)
	// GET /api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/notifies/targets
	APM_CUSTOMIZE_ALERT_NOTIFY_TARGET(context.Context, *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) (*emptypb.Empty, error)
	// PUT /api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/{id}/switch
	APM_CUSTOMIZE_ALERT_SWITCH(context.Context, *APM_CUSTOMIZE_ALERT_SWITCH_Request) (*emptypb.Empty, error)
	// PUT /api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/{id}
	APM_CUSTOMIZE_ALERT_UPDATE(context.Context, *APM_CUSTOMIZE_ALERT_UPDATE_Request) (*emptypb.Empty, error)
}

// RegisterMspApmAlertHandler register MspApmAlertHandler to http.Router.
func RegisterMspApmAlertHandler(r http.Router, srv MspApmAlertHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_APM_ALERT := func(method, path string, fn func(context.Context, *APM_ALERT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_ALERT_Request))
		}
		var APM_ALERT_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_ALERT_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_ALERT_info)
				}
				r = r.WithContext(ctx)
				var in APM_ALERT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_ALERTS := func(method, path string, fn func(context.Context, *APM_ALERTS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_ALERTS_Request))
		}
		var APM_ALERTS_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_ALERTS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERTS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_ALERTS_info)
				}
				r = r.WithContext(ctx)
				var in APM_ALERTS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_ALERTS_RULES := func(method, path string, fn func(context.Context, *APM_ALERTS_RULES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_ALERTS_RULES_Request))
		}
		var APM_ALERTS_RULES_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_ALERTS_RULES_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERTS_RULES", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_ALERTS_RULES_info)
				}
				r = r.WithContext(ctx)
				var in APM_ALERTS_RULES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_ALERT_CREATE := func(method, path string, fn func(context.Context, *APM_ALERT_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_ALERT_CREATE_Request))
		}
		var APM_ALERT_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_ALERT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_ALERT_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in APM_ALERT_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_ALERT_DELETE := func(method, path string, fn func(context.Context, *APM_ALERT_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_ALERT_DELETE_Request))
		}
		var APM_ALERT_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_ALERT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_ALERT_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in APM_ALERT_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_ALERT_RECORD := func(method, path string, fn func(context.Context, *APM_ALERT_RECORD_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_ALERT_RECORD_Request))
		}
		var APM_ALERT_RECORD_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_ALERT_RECORD_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_RECORD", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_ALERT_RECORD_info)
				}
				r = r.WithContext(ctx)
				var in APM_ALERT_RECORD_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						case "groupId":
							in.GroupId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_ALERT_RECORDS := func(method, path string, fn func(context.Context, *APM_ALERT_RECORDS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_ALERT_RECORDS_Request))
		}
		var APM_ALERT_RECORDS_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_ALERT_RECORDS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_RECORDS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_ALERT_RECORDS_info)
				}
				r = r.WithContext(ctx)
				var in APM_ALERT_RECORDS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_ALERT_RECORD_ATTRS := func(method, path string, fn func(context.Context, *APM_ALERT_RECORD_ATTRS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_ALERT_RECORD_ATTRS_Request))
		}
		var APM_ALERT_RECORD_ATTRS_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_ALERT_RECORD_ATTRS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_RECORD_ATTRS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_ALERT_RECORD_ATTRS_info)
				}
				r = r.WithContext(ctx)
				var in APM_ALERT_RECORD_ATTRS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_ALERT_RECORD_HISTORIES := func(method, path string, fn func(context.Context, *APM_ALERT_RECORD_HISTORIES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_ALERT_RECORD_HISTORIES_Request))
		}
		var APM_ALERT_RECORD_HISTORIES_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_ALERT_RECORD_HISTORIES_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_RECORD_HISTORIES", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_ALERT_RECORD_HISTORIES_info)
				}
				r = r.WithContext(ctx)
				var in APM_ALERT_RECORD_HISTORIES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						case "groupId":
							in.GroupId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_ALERT_RECORD_ISSUE_CREATE := func(method, path string, fn func(context.Context, *APM_ALERT_RECORD_ISSUE_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_ALERT_RECORD_ISSUE_CREATE_Request))
		}
		var APM_ALERT_RECORD_ISSUE_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_ALERT_RECORD_ISSUE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_RECORD_ISSUE_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_ALERT_RECORD_ISSUE_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in APM_ALERT_RECORD_ISSUE_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						case "groupId":
							in.GroupId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_ALERT_RECORD_ISSUE_UPDATE := func(method, path string, fn func(context.Context, *APM_ALERT_RECORD_ISSUE_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_ALERT_RECORD_ISSUE_UPDATE_Request))
		}
		var APM_ALERT_RECORD_ISSUE_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_ALERT_RECORD_ISSUE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_RECORD_ISSUE_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_ALERT_RECORD_ISSUE_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in APM_ALERT_RECORD_ISSUE_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						case "groupId":
							in.GroupId = val
						case "issueId":
							in.IssueId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_ALERT_SWITCH := func(method, path string, fn func(context.Context, *APM_ALERT_SWITCH_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_ALERT_SWITCH_Request))
		}
		var APM_ALERT_SWITCH_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_ALERT_SWITCH_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_SWITCH", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_ALERT_SWITCH_info)
				}
				r = r.WithContext(ctx)
				var in APM_ALERT_SWITCH_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_ALERT_UPDATE := func(method, path string, fn func(context.Context, *APM_ALERT_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_ALERT_UPDATE_Request))
		}
		var APM_ALERT_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_ALERT_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_ALERT_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in APM_ALERT_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_CUSTOMIZE_ALERT := func(method, path string, fn func(context.Context, *APM_CUSTOMIZE_ALERT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_CUSTOMIZE_ALERT_Request))
		}
		var APM_CUSTOMIZE_ALERT_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_CUSTOMIZE_ALERT_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_CUSTOMIZE_ALERT_info)
				}
				r = r.WithContext(ctx)
				var in APM_CUSTOMIZE_ALERT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_CUSTOMIZE_ALERTS := func(method, path string, fn func(context.Context, *APM_CUSTOMIZE_ALERTS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_CUSTOMIZE_ALERTS_Request))
		}
		var APM_CUSTOMIZE_ALERTS_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_CUSTOMIZE_ALERTS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERTS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_CUSTOMIZE_ALERTS_info)
				}
				r = r.WithContext(ctx)
				var in APM_CUSTOMIZE_ALERTS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_CUSTOMIZE_ALERT_CREATE := func(method, path string, fn func(context.Context, *APM_CUSTOMIZE_ALERT_CREATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_CUSTOMIZE_ALERT_CREATE_Request))
		}
		var APM_CUSTOMIZE_ALERT_CREATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_CUSTOMIZE_ALERT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_CREATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_CUSTOMIZE_ALERT_CREATE_info)
				}
				r = r.WithContext(ctx)
				var in APM_CUSTOMIZE_ALERT_CREATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_CUSTOMIZE_ALERT_DASH_PREVIEW := func(method, path string, fn func(context.Context, *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request))
		}
		var APM_CUSTOMIZE_ALERT_DASH_PREVIEW_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_CUSTOMIZE_ALERT_DASH_PREVIEW_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_DASH_PREVIEW", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_CUSTOMIZE_ALERT_DASH_PREVIEW_info)
				}
				r = r.WithContext(ctx)
				var in APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_CUSTOMIZE_ALERT_DELETE := func(method, path string, fn func(context.Context, *APM_CUSTOMIZE_ALERT_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_CUSTOMIZE_ALERT_DELETE_Request))
		}
		var APM_CUSTOMIZE_ALERT_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_CUSTOMIZE_ALERT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_CUSTOMIZE_ALERT_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in APM_CUSTOMIZE_ALERT_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_CUSTOMIZE_ALERT_METRICS := func(method, path string, fn func(context.Context, *APM_CUSTOMIZE_ALERT_METRICS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_CUSTOMIZE_ALERT_METRICS_Request))
		}
		var APM_CUSTOMIZE_ALERT_METRICS_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_CUSTOMIZE_ALERT_METRICS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_METRICS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_CUSTOMIZE_ALERT_METRICS_info)
				}
				r = r.WithContext(ctx)
				var in APM_CUSTOMIZE_ALERT_METRICS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_CUSTOMIZE_ALERT_NOTIFY_TARGET := func(method, path string, fn func(context.Context, *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request))
		}
		var APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_NOTIFY_TARGET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_info)
				}
				r = r.WithContext(ctx)
				var in APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_CUSTOMIZE_ALERT_SWITCH := func(method, path string, fn func(context.Context, *APM_CUSTOMIZE_ALERT_SWITCH_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_CUSTOMIZE_ALERT_SWITCH_Request))
		}
		var APM_CUSTOMIZE_ALERT_SWITCH_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_CUSTOMIZE_ALERT_SWITCH_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_SWITCH", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_CUSTOMIZE_ALERT_SWITCH_info)
				}
				r = r.WithContext(ctx)
				var in APM_CUSTOMIZE_ALERT_SWITCH_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_CUSTOMIZE_ALERT_UPDATE := func(method, path string, fn func(context.Context, *APM_CUSTOMIZE_ALERT_UPDATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*APM_CUSTOMIZE_ALERT_UPDATE_Request))
		}
		var APM_CUSTOMIZE_ALERT_UPDATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			APM_CUSTOMIZE_ALERT_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_UPDATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, APM_CUSTOMIZE_ALERT_UPDATE_info)
				}
				r = r.WithContext(ctx)
				var in APM_CUSTOMIZE_ALERT_UPDATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "tenantGroup":
							in.TenantGroup = val
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_APM_ALERT("GET", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts/{id}", srv.APM_ALERT)
	add_APM_ALERTS("GET", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts", srv.APM_ALERTS)
	add_APM_ALERTS_RULES("GET", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts-rules", srv.APM_ALERTS_RULES)
	add_APM_ALERT_CREATE("POST", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts", srv.APM_ALERT_CREATE)
	add_APM_ALERT_DELETE("DELETE", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts/{id}", srv.APM_ALERT_DELETE)
	add_APM_ALERT_RECORD("GET", "/api/tmc/tenantGroup/{tenantGroup}/alert-records/{groupId}", srv.APM_ALERT_RECORD)
	add_APM_ALERT_RECORDS("GET", "/api/tmc/tenantGroup/{tenantGroup}/alert-records", srv.APM_ALERT_RECORDS)
	add_APM_ALERT_RECORD_ATTRS("GET", "/api/tmc/tenantGroup/{tenantGroup}/alert-record-attrs", srv.APM_ALERT_RECORD_ATTRS)
	add_APM_ALERT_RECORD_HISTORIES("GET", "/api/tmc/tenantGroup/{tenantGroup}/alert-records/{groupId}/histories", srv.APM_ALERT_RECORD_HISTORIES)
	add_APM_ALERT_RECORD_ISSUE_CREATE("POST", "/api/tmc/tenantGroup/{tenantGroup}/alert-records/{groupId}/issues", srv.APM_ALERT_RECORD_ISSUE_CREATE)
	add_APM_ALERT_RECORD_ISSUE_UPDATE("PUT", "/api/tmc/tenantGroup/{tenantGroup}/alert-records/{groupId}/issues/{issueId}", srv.APM_ALERT_RECORD_ISSUE_UPDATE)
	add_APM_ALERT_SWITCH("PUT", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts/{id}/switch", srv.APM_ALERT_SWITCH)
	add_APM_ALERT_UPDATE("PUT", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/alerts/{id}", srv.APM_ALERT_UPDATE)
	add_APM_CUSTOMIZE_ALERT("GET", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/{id}", srv.APM_CUSTOMIZE_ALERT)
	add_APM_CUSTOMIZE_ALERTS("GET", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts", srv.APM_CUSTOMIZE_ALERTS)
	add_APM_CUSTOMIZE_ALERT_CREATE("POST", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts", srv.APM_CUSTOMIZE_ALERT_CREATE)
	add_APM_CUSTOMIZE_ALERT_DASH_PREVIEW("POST", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/dash-preview/query", srv.APM_CUSTOMIZE_ALERT_DASH_PREVIEW)
	add_APM_CUSTOMIZE_ALERT_DELETE("DELETE", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/{id}", srv.APM_CUSTOMIZE_ALERT_DELETE)
	add_APM_CUSTOMIZE_ALERT_METRICS("GET", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/metrics", srv.APM_CUSTOMIZE_ALERT_METRICS)
	add_APM_CUSTOMIZE_ALERT_NOTIFY_TARGET("GET", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/notifies/targets", srv.APM_CUSTOMIZE_ALERT_NOTIFY_TARGET)
	add_APM_CUSTOMIZE_ALERT_SWITCH("PUT", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/{id}/switch", srv.APM_CUSTOMIZE_ALERT_SWITCH)
	add_APM_CUSTOMIZE_ALERT_UPDATE("PUT", "/api/tmc/micro-service/tenantGroup/{tenantGroup}/customize/alerts/{id}", srv.APM_CUSTOMIZE_ALERT_UPDATE)
}
