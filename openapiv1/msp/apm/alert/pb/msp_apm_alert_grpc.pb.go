// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: msp_apm_alert.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// MspApmAlertClient is the client API for MspApmAlert service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MspApmAlertClient interface {
	APM_ALERT(ctx context.Context, in *APM_ALERT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_ALERTS(ctx context.Context, in *APM_ALERTS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_ALERTS_RULES(ctx context.Context, in *APM_ALERTS_RULES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_ALERT_CREATE(ctx context.Context, in *APM_ALERT_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_ALERT_DELETE(ctx context.Context, in *APM_ALERT_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_ALERT_RECORD(ctx context.Context, in *APM_ALERT_RECORD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_ALERT_RECORDS(ctx context.Context, in *APM_ALERT_RECORDS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_ALERT_RECORD_ATTRS(ctx context.Context, in *APM_ALERT_RECORD_ATTRS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_ALERT_RECORD_HISTORIES(ctx context.Context, in *APM_ALERT_RECORD_HISTORIES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_ALERT_RECORD_ISSUE_CREATE(ctx context.Context, in *APM_ALERT_RECORD_ISSUE_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_ALERT_RECORD_ISSUE_UPDATE(ctx context.Context, in *APM_ALERT_RECORD_ISSUE_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_ALERT_SWITCH(ctx context.Context, in *APM_ALERT_SWITCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_ALERT_UPDATE(ctx context.Context, in *APM_ALERT_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT(ctx context.Context, in *APM_CUSTOMIZE_ALERT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERTS(ctx context.Context, in *APM_CUSTOMIZE_ALERTS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_CREATE(ctx context.Context, in *APM_CUSTOMIZE_ALERT_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_DASH_PREVIEW(ctx context.Context, in *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_DELETE(ctx context.Context, in *APM_CUSTOMIZE_ALERT_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_METRICS(ctx context.Context, in *APM_CUSTOMIZE_ALERT_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_NOTIFY_TARGET(ctx context.Context, in *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_SWITCH(ctx context.Context, in *APM_CUSTOMIZE_ALERT_SWITCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_UPDATE(ctx context.Context, in *APM_CUSTOMIZE_ALERT_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mspApmAlertClient struct {
	cc grpc1.ClientConnInterface
}

func NewMspApmAlertClient(cc grpc1.ClientConnInterface) MspApmAlertClient {
	return &mspApmAlertClient{cc}
}

func (c *mspApmAlertClient) APM_ALERT(ctx context.Context, in *APM_ALERT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_ALERTS(ctx context.Context, in *APM_ALERTS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_ALERTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_ALERTS_RULES(ctx context.Context, in *APM_ALERTS_RULES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_ALERTS_RULES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_ALERT_CREATE(ctx context.Context, in *APM_ALERT_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_ALERT_DELETE(ctx context.Context, in *APM_ALERT_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_ALERT_RECORD(ctx context.Context, in *APM_ALERT_RECORD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_RECORD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_ALERT_RECORDS(ctx context.Context, in *APM_ALERT_RECORDS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_RECORDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_ALERT_RECORD_ATTRS(ctx context.Context, in *APM_ALERT_RECORD_ATTRS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_RECORD_ATTRS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_ALERT_RECORD_HISTORIES(ctx context.Context, in *APM_ALERT_RECORD_HISTORIES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_RECORD_HISTORIES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_ALERT_RECORD_ISSUE_CREATE(ctx context.Context, in *APM_ALERT_RECORD_ISSUE_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_RECORD_ISSUE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_ALERT_RECORD_ISSUE_UPDATE(ctx context.Context, in *APM_ALERT_RECORD_ISSUE_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_RECORD_ISSUE_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_ALERT_SWITCH(ctx context.Context, in *APM_ALERT_SWITCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_SWITCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_ALERT_UPDATE(ctx context.Context, in *APM_ALERT_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_CUSTOMIZE_ALERT(ctx context.Context, in *APM_CUSTOMIZE_ALERT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_CUSTOMIZE_ALERTS(ctx context.Context, in *APM_CUSTOMIZE_ALERTS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_CUSTOMIZE_ALERT_CREATE(ctx context.Context, in *APM_CUSTOMIZE_ALERT_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_CUSTOMIZE_ALERT_DASH_PREVIEW(ctx context.Context, in *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_DASH_PREVIEW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_CUSTOMIZE_ALERT_DELETE(ctx context.Context, in *APM_CUSTOMIZE_ALERT_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_CUSTOMIZE_ALERT_METRICS(ctx context.Context, in *APM_CUSTOMIZE_ALERT_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_METRICS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_CUSTOMIZE_ALERT_NOTIFY_TARGET(ctx context.Context, in *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_NOTIFY_TARGET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_CUSTOMIZE_ALERT_SWITCH(ctx context.Context, in *APM_CUSTOMIZE_ALERT_SWITCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_SWITCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmAlertClient) APM_CUSTOMIZE_ALERT_UPDATE(ctx context.Context, in *APM_CUSTOMIZE_ALERT_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MspApmAlertServer is the server API for MspApmAlert service.
// All implementations should embed UnimplementedMspApmAlertServer
// for forward compatibility
type MspApmAlertServer interface {
	APM_ALERT(context.Context, *APM_ALERT_Request) (*emptypb.Empty, error)
	APM_ALERTS(context.Context, *APM_ALERTS_Request) (*emptypb.Empty, error)
	APM_ALERTS_RULES(context.Context, *APM_ALERTS_RULES_Request) (*emptypb.Empty, error)
	APM_ALERT_CREATE(context.Context, *APM_ALERT_CREATE_Request) (*emptypb.Empty, error)
	APM_ALERT_DELETE(context.Context, *APM_ALERT_DELETE_Request) (*emptypb.Empty, error)
	APM_ALERT_RECORD(context.Context, *APM_ALERT_RECORD_Request) (*emptypb.Empty, error)
	APM_ALERT_RECORDS(context.Context, *APM_ALERT_RECORDS_Request) (*emptypb.Empty, error)
	APM_ALERT_RECORD_ATTRS(context.Context, *APM_ALERT_RECORD_ATTRS_Request) (*emptypb.Empty, error)
	APM_ALERT_RECORD_HISTORIES(context.Context, *APM_ALERT_RECORD_HISTORIES_Request) (*emptypb.Empty, error)
	APM_ALERT_RECORD_ISSUE_CREATE(context.Context, *APM_ALERT_RECORD_ISSUE_CREATE_Request) (*emptypb.Empty, error)
	APM_ALERT_RECORD_ISSUE_UPDATE(context.Context, *APM_ALERT_RECORD_ISSUE_UPDATE_Request) (*emptypb.Empty, error)
	APM_ALERT_SWITCH(context.Context, *APM_ALERT_SWITCH_Request) (*emptypb.Empty, error)
	APM_ALERT_UPDATE(context.Context, *APM_ALERT_UPDATE_Request) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT(context.Context, *APM_CUSTOMIZE_ALERT_Request) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERTS(context.Context, *APM_CUSTOMIZE_ALERTS_Request) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_CREATE(context.Context, *APM_CUSTOMIZE_ALERT_CREATE_Request) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_DASH_PREVIEW(context.Context, *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_DELETE(context.Context, *APM_CUSTOMIZE_ALERT_DELETE_Request) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_METRICS(context.Context, *APM_CUSTOMIZE_ALERT_METRICS_Request) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_NOTIFY_TARGET(context.Context, *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_SWITCH(context.Context, *APM_CUSTOMIZE_ALERT_SWITCH_Request) (*emptypb.Empty, error)
	APM_CUSTOMIZE_ALERT_UPDATE(context.Context, *APM_CUSTOMIZE_ALERT_UPDATE_Request) (*emptypb.Empty, error)
}

// UnimplementedMspApmAlertServer should be embedded to have forward compatible implementations.
type UnimplementedMspApmAlertServer struct {
}

func (*UnimplementedMspApmAlertServer) APM_ALERT(context.Context, *APM_ALERT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_ALERT not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_ALERTS(context.Context, *APM_ALERTS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_ALERTS not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_ALERTS_RULES(context.Context, *APM_ALERTS_RULES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_ALERTS_RULES not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_ALERT_CREATE(context.Context, *APM_ALERT_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_ALERT_CREATE not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_ALERT_DELETE(context.Context, *APM_ALERT_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_ALERT_DELETE not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_ALERT_RECORD(context.Context, *APM_ALERT_RECORD_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_ALERT_RECORD not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_ALERT_RECORDS(context.Context, *APM_ALERT_RECORDS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_ALERT_RECORDS not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_ALERT_RECORD_ATTRS(context.Context, *APM_ALERT_RECORD_ATTRS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_ALERT_RECORD_ATTRS not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_ALERT_RECORD_HISTORIES(context.Context, *APM_ALERT_RECORD_HISTORIES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_ALERT_RECORD_HISTORIES not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_ALERT_RECORD_ISSUE_CREATE(context.Context, *APM_ALERT_RECORD_ISSUE_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_ALERT_RECORD_ISSUE_CREATE not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_ALERT_RECORD_ISSUE_UPDATE(context.Context, *APM_ALERT_RECORD_ISSUE_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_ALERT_RECORD_ISSUE_UPDATE not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_ALERT_SWITCH(context.Context, *APM_ALERT_SWITCH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_ALERT_SWITCH not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_ALERT_UPDATE(context.Context, *APM_ALERT_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_ALERT_UPDATE not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_CUSTOMIZE_ALERT(context.Context, *APM_CUSTOMIZE_ALERT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_CUSTOMIZE_ALERT not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_CUSTOMIZE_ALERTS(context.Context, *APM_CUSTOMIZE_ALERTS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_CUSTOMIZE_ALERTS not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_CUSTOMIZE_ALERT_CREATE(context.Context, *APM_CUSTOMIZE_ALERT_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_CUSTOMIZE_ALERT_CREATE not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_CUSTOMIZE_ALERT_DASH_PREVIEW(context.Context, *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_CUSTOMIZE_ALERT_DASH_PREVIEW not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_CUSTOMIZE_ALERT_DELETE(context.Context, *APM_CUSTOMIZE_ALERT_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_CUSTOMIZE_ALERT_DELETE not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_CUSTOMIZE_ALERT_METRICS(context.Context, *APM_CUSTOMIZE_ALERT_METRICS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_CUSTOMIZE_ALERT_METRICS not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_CUSTOMIZE_ALERT_NOTIFY_TARGET(context.Context, *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_CUSTOMIZE_ALERT_NOTIFY_TARGET not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_CUSTOMIZE_ALERT_SWITCH(context.Context, *APM_CUSTOMIZE_ALERT_SWITCH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_CUSTOMIZE_ALERT_SWITCH not implemented")
}
func (*UnimplementedMspApmAlertServer) APM_CUSTOMIZE_ALERT_UPDATE(context.Context, *APM_CUSTOMIZE_ALERT_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APM_CUSTOMIZE_ALERT_UPDATE not implemented")
}

func RegisterMspApmAlertServer(s grpc1.ServiceRegistrar, srv MspApmAlertServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_MspApmAlert_serviceDesc(srv, opts...), srv)
}

var _MspApmAlert_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.msp.msp_apm_alert",
	HandlerType: (*MspApmAlertServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "msp_apm_alert.proto",
}

func _get_MspApmAlert_serviceDesc(srv MspApmAlertServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_MspApmAlert_APM_ALERT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_ALERT(ctx, req.(*APM_ALERT_Request))
	}
	var _MspApmAlert_APM_ALERT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_ALERT_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT", srv)
		_MspApmAlert_APM_ALERT_Handler = h.Interceptor(_MspApmAlert_APM_ALERT_Handler)
	}

	_MspApmAlert_APM_ALERTS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_ALERTS(ctx, req.(*APM_ALERTS_Request))
	}
	var _MspApmAlert_APM_ALERTS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_ALERTS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERTS", srv)
		_MspApmAlert_APM_ALERTS_Handler = h.Interceptor(_MspApmAlert_APM_ALERTS_Handler)
	}

	_MspApmAlert_APM_ALERTS_RULES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_ALERTS_RULES(ctx, req.(*APM_ALERTS_RULES_Request))
	}
	var _MspApmAlert_APM_ALERTS_RULES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_ALERTS_RULES_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERTS_RULES", srv)
		_MspApmAlert_APM_ALERTS_RULES_Handler = h.Interceptor(_MspApmAlert_APM_ALERTS_RULES_Handler)
	}

	_MspApmAlert_APM_ALERT_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_ALERT_CREATE(ctx, req.(*APM_ALERT_CREATE_Request))
	}
	var _MspApmAlert_APM_ALERT_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_ALERT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_CREATE", srv)
		_MspApmAlert_APM_ALERT_CREATE_Handler = h.Interceptor(_MspApmAlert_APM_ALERT_CREATE_Handler)
	}

	_MspApmAlert_APM_ALERT_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_ALERT_DELETE(ctx, req.(*APM_ALERT_DELETE_Request))
	}
	var _MspApmAlert_APM_ALERT_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_ALERT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_DELETE", srv)
		_MspApmAlert_APM_ALERT_DELETE_Handler = h.Interceptor(_MspApmAlert_APM_ALERT_DELETE_Handler)
	}

	_MspApmAlert_APM_ALERT_RECORD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_ALERT_RECORD(ctx, req.(*APM_ALERT_RECORD_Request))
	}
	var _MspApmAlert_APM_ALERT_RECORD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_ALERT_RECORD_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_RECORD", srv)
		_MspApmAlert_APM_ALERT_RECORD_Handler = h.Interceptor(_MspApmAlert_APM_ALERT_RECORD_Handler)
	}

	_MspApmAlert_APM_ALERT_RECORDS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_ALERT_RECORDS(ctx, req.(*APM_ALERT_RECORDS_Request))
	}
	var _MspApmAlert_APM_ALERT_RECORDS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_ALERT_RECORDS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_RECORDS", srv)
		_MspApmAlert_APM_ALERT_RECORDS_Handler = h.Interceptor(_MspApmAlert_APM_ALERT_RECORDS_Handler)
	}

	_MspApmAlert_APM_ALERT_RECORD_ATTRS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_ALERT_RECORD_ATTRS(ctx, req.(*APM_ALERT_RECORD_ATTRS_Request))
	}
	var _MspApmAlert_APM_ALERT_RECORD_ATTRS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_ALERT_RECORD_ATTRS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_RECORD_ATTRS", srv)
		_MspApmAlert_APM_ALERT_RECORD_ATTRS_Handler = h.Interceptor(_MspApmAlert_APM_ALERT_RECORD_ATTRS_Handler)
	}

	_MspApmAlert_APM_ALERT_RECORD_HISTORIES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_ALERT_RECORD_HISTORIES(ctx, req.(*APM_ALERT_RECORD_HISTORIES_Request))
	}
	var _MspApmAlert_APM_ALERT_RECORD_HISTORIES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_ALERT_RECORD_HISTORIES_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_RECORD_HISTORIES", srv)
		_MspApmAlert_APM_ALERT_RECORD_HISTORIES_Handler = h.Interceptor(_MspApmAlert_APM_ALERT_RECORD_HISTORIES_Handler)
	}

	_MspApmAlert_APM_ALERT_RECORD_ISSUE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_ALERT_RECORD_ISSUE_CREATE(ctx, req.(*APM_ALERT_RECORD_ISSUE_CREATE_Request))
	}
	var _MspApmAlert_APM_ALERT_RECORD_ISSUE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_ALERT_RECORD_ISSUE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_RECORD_ISSUE_CREATE", srv)
		_MspApmAlert_APM_ALERT_RECORD_ISSUE_CREATE_Handler = h.Interceptor(_MspApmAlert_APM_ALERT_RECORD_ISSUE_CREATE_Handler)
	}

	_MspApmAlert_APM_ALERT_RECORD_ISSUE_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_ALERT_RECORD_ISSUE_UPDATE(ctx, req.(*APM_ALERT_RECORD_ISSUE_UPDATE_Request))
	}
	var _MspApmAlert_APM_ALERT_RECORD_ISSUE_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_ALERT_RECORD_ISSUE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_RECORD_ISSUE_UPDATE", srv)
		_MspApmAlert_APM_ALERT_RECORD_ISSUE_UPDATE_Handler = h.Interceptor(_MspApmAlert_APM_ALERT_RECORD_ISSUE_UPDATE_Handler)
	}

	_MspApmAlert_APM_ALERT_SWITCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_ALERT_SWITCH(ctx, req.(*APM_ALERT_SWITCH_Request))
	}
	var _MspApmAlert_APM_ALERT_SWITCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_ALERT_SWITCH_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_SWITCH", srv)
		_MspApmAlert_APM_ALERT_SWITCH_Handler = h.Interceptor(_MspApmAlert_APM_ALERT_SWITCH_Handler)
	}

	_MspApmAlert_APM_ALERT_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_ALERT_UPDATE(ctx, req.(*APM_ALERT_UPDATE_Request))
	}
	var _MspApmAlert_APM_ALERT_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_ALERT_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_ALERT_UPDATE", srv)
		_MspApmAlert_APM_ALERT_UPDATE_Handler = h.Interceptor(_MspApmAlert_APM_ALERT_UPDATE_Handler)
	}

	_MspApmAlert_APM_CUSTOMIZE_ALERT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_CUSTOMIZE_ALERT(ctx, req.(*APM_CUSTOMIZE_ALERT_Request))
	}
	var _MspApmAlert_APM_CUSTOMIZE_ALERT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_CUSTOMIZE_ALERT_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT", srv)
		_MspApmAlert_APM_CUSTOMIZE_ALERT_Handler = h.Interceptor(_MspApmAlert_APM_CUSTOMIZE_ALERT_Handler)
	}

	_MspApmAlert_APM_CUSTOMIZE_ALERTS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_CUSTOMIZE_ALERTS(ctx, req.(*APM_CUSTOMIZE_ALERTS_Request))
	}
	var _MspApmAlert_APM_CUSTOMIZE_ALERTS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_CUSTOMIZE_ALERTS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERTS", srv)
		_MspApmAlert_APM_CUSTOMIZE_ALERTS_Handler = h.Interceptor(_MspApmAlert_APM_CUSTOMIZE_ALERTS_Handler)
	}

	_MspApmAlert_APM_CUSTOMIZE_ALERT_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_CUSTOMIZE_ALERT_CREATE(ctx, req.(*APM_CUSTOMIZE_ALERT_CREATE_Request))
	}
	var _MspApmAlert_APM_CUSTOMIZE_ALERT_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_CUSTOMIZE_ALERT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_CREATE", srv)
		_MspApmAlert_APM_CUSTOMIZE_ALERT_CREATE_Handler = h.Interceptor(_MspApmAlert_APM_CUSTOMIZE_ALERT_CREATE_Handler)
	}

	_MspApmAlert_APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_CUSTOMIZE_ALERT_DASH_PREVIEW(ctx, req.(*APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request))
	}
	var _MspApmAlert_APM_CUSTOMIZE_ALERT_DASH_PREVIEW_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_CUSTOMIZE_ALERT_DASH_PREVIEW_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_DASH_PREVIEW", srv)
		_MspApmAlert_APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Handler = h.Interceptor(_MspApmAlert_APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Handler)
	}

	_MspApmAlert_APM_CUSTOMIZE_ALERT_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_CUSTOMIZE_ALERT_DELETE(ctx, req.(*APM_CUSTOMIZE_ALERT_DELETE_Request))
	}
	var _MspApmAlert_APM_CUSTOMIZE_ALERT_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_CUSTOMIZE_ALERT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_DELETE", srv)
		_MspApmAlert_APM_CUSTOMIZE_ALERT_DELETE_Handler = h.Interceptor(_MspApmAlert_APM_CUSTOMIZE_ALERT_DELETE_Handler)
	}

	_MspApmAlert_APM_CUSTOMIZE_ALERT_METRICS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_CUSTOMIZE_ALERT_METRICS(ctx, req.(*APM_CUSTOMIZE_ALERT_METRICS_Request))
	}
	var _MspApmAlert_APM_CUSTOMIZE_ALERT_METRICS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_CUSTOMIZE_ALERT_METRICS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_METRICS", srv)
		_MspApmAlert_APM_CUSTOMIZE_ALERT_METRICS_Handler = h.Interceptor(_MspApmAlert_APM_CUSTOMIZE_ALERT_METRICS_Handler)
	}

	_MspApmAlert_APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_CUSTOMIZE_ALERT_NOTIFY_TARGET(ctx, req.(*APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request))
	}
	var _MspApmAlert_APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_NOTIFY_TARGET", srv)
		_MspApmAlert_APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Handler = h.Interceptor(_MspApmAlert_APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Handler)
	}

	_MspApmAlert_APM_CUSTOMIZE_ALERT_SWITCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_CUSTOMIZE_ALERT_SWITCH(ctx, req.(*APM_CUSTOMIZE_ALERT_SWITCH_Request))
	}
	var _MspApmAlert_APM_CUSTOMIZE_ALERT_SWITCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_CUSTOMIZE_ALERT_SWITCH_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_SWITCH", srv)
		_MspApmAlert_APM_CUSTOMIZE_ALERT_SWITCH_Handler = h.Interceptor(_MspApmAlert_APM_CUSTOMIZE_ALERT_SWITCH_Handler)
	}

	_MspApmAlert_APM_CUSTOMIZE_ALERT_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.APM_CUSTOMIZE_ALERT_UPDATE(ctx, req.(*APM_CUSTOMIZE_ALERT_UPDATE_Request))
	}
	var _MspApmAlert_APM_CUSTOMIZE_ALERT_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmAlert_APM_CUSTOMIZE_ALERT_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_alert", "APM_CUSTOMIZE_ALERT_UPDATE", srv)
		_MspApmAlert_APM_CUSTOMIZE_ALERT_UPDATE_Handler = h.Interceptor(_MspApmAlert_APM_CUSTOMIZE_ALERT_UPDATE_Handler)
	}

	var serviceDesc = _MspApmAlert_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "APM_ALERT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_ALERT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_ALERT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_ALERT_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_ALERT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_ALERT_Handler)
			},
		},
		{
			MethodName: "APM_ALERTS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_ALERTS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_ALERTS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_ALERTS_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_ALERTS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_ALERTS",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_ALERTS_Handler)
			},
		},
		{
			MethodName: "APM_ALERTS_RULES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_ALERTS_RULES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_ALERTS_RULES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_ALERTS_RULES_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_ALERTS_RULES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_ALERTS_RULES",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_ALERTS_RULES_Handler)
			},
		},
		{
			MethodName: "APM_ALERT_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_ALERT_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_ALERT_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_ALERT_CREATE_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_ALERT_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_CREATE",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_ALERT_CREATE_Handler)
			},
		},
		{
			MethodName: "APM_ALERT_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_ALERT_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_ALERT_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_ALERT_DELETE_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_ALERT_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_DELETE",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_ALERT_DELETE_Handler)
			},
		},
		{
			MethodName: "APM_ALERT_RECORD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_ALERT_RECORD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_ALERT_RECORD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_ALERT_RECORD_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_ALERT_RECORD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_RECORD",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_ALERT_RECORD_Handler)
			},
		},
		{
			MethodName: "APM_ALERT_RECORDS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_ALERT_RECORDS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_ALERT_RECORDS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_ALERT_RECORDS_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_ALERT_RECORDS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_RECORDS",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_ALERT_RECORDS_Handler)
			},
		},
		{
			MethodName: "APM_ALERT_RECORD_ATTRS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_ALERT_RECORD_ATTRS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_ALERT_RECORD_ATTRS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_ALERT_RECORD_ATTRS_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_ALERT_RECORD_ATTRS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_RECORD_ATTRS",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_ALERT_RECORD_ATTRS_Handler)
			},
		},
		{
			MethodName: "APM_ALERT_RECORD_HISTORIES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_ALERT_RECORD_HISTORIES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_ALERT_RECORD_HISTORIES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_ALERT_RECORD_HISTORIES_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_ALERT_RECORD_HISTORIES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_RECORD_HISTORIES",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_ALERT_RECORD_HISTORIES_Handler)
			},
		},
		{
			MethodName: "APM_ALERT_RECORD_ISSUE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_ALERT_RECORD_ISSUE_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_ALERT_RECORD_ISSUE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_ALERT_RECORD_ISSUE_CREATE_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_ALERT_RECORD_ISSUE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_RECORD_ISSUE_CREATE",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_ALERT_RECORD_ISSUE_CREATE_Handler)
			},
		},
		{
			MethodName: "APM_ALERT_RECORD_ISSUE_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_ALERT_RECORD_ISSUE_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_ALERT_RECORD_ISSUE_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_ALERT_RECORD_ISSUE_UPDATE_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_ALERT_RECORD_ISSUE_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_RECORD_ISSUE_UPDATE",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_ALERT_RECORD_ISSUE_UPDATE_Handler)
			},
		},
		{
			MethodName: "APM_ALERT_SWITCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_ALERT_SWITCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_ALERT_SWITCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_ALERT_SWITCH_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_ALERT_SWITCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_SWITCH",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_ALERT_SWITCH_Handler)
			},
		},
		{
			MethodName: "APM_ALERT_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_ALERT_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_ALERT_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_ALERT_UPDATE_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_ALERT_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_ALERT_UPDATE",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_ALERT_UPDATE_Handler)
			},
		},
		{
			MethodName: "APM_CUSTOMIZE_ALERT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_CUSTOMIZE_ALERT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_CUSTOMIZE_ALERT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_CUSTOMIZE_ALERT_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_CUSTOMIZE_ALERT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_CUSTOMIZE_ALERT_Handler)
			},
		},
		{
			MethodName: "APM_CUSTOMIZE_ALERTS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_CUSTOMIZE_ALERTS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_CUSTOMIZE_ALERTS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_CUSTOMIZE_ALERTS_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_CUSTOMIZE_ALERTS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERTS",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_CUSTOMIZE_ALERTS_Handler)
			},
		},
		{
			MethodName: "APM_CUSTOMIZE_ALERT_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_CUSTOMIZE_ALERT_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_CUSTOMIZE_ALERT_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_CUSTOMIZE_ALERT_CREATE_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_CUSTOMIZE_ALERT_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_CREATE",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_CUSTOMIZE_ALERT_CREATE_Handler)
			},
		},
		{
			MethodName: "APM_CUSTOMIZE_ALERT_DASH_PREVIEW",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_CUSTOMIZE_ALERT_DASH_PREVIEW(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_CUSTOMIZE_ALERT_DASH_PREVIEW_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_DASH_PREVIEW",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Handler)
			},
		},
		{
			MethodName: "APM_CUSTOMIZE_ALERT_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_CUSTOMIZE_ALERT_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_CUSTOMIZE_ALERT_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_CUSTOMIZE_ALERT_DELETE_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_CUSTOMIZE_ALERT_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_DELETE",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_CUSTOMIZE_ALERT_DELETE_Handler)
			},
		},
		{
			MethodName: "APM_CUSTOMIZE_ALERT_METRICS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_CUSTOMIZE_ALERT_METRICS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_CUSTOMIZE_ALERT_METRICS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_CUSTOMIZE_ALERT_METRICS_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_CUSTOMIZE_ALERT_METRICS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_METRICS",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_CUSTOMIZE_ALERT_METRICS_Handler)
			},
		},
		{
			MethodName: "APM_CUSTOMIZE_ALERT_NOTIFY_TARGET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_CUSTOMIZE_ALERT_NOTIFY_TARGET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_NOTIFY_TARGET",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Handler)
			},
		},
		{
			MethodName: "APM_CUSTOMIZE_ALERT_SWITCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_CUSTOMIZE_ALERT_SWITCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_CUSTOMIZE_ALERT_SWITCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_CUSTOMIZE_ALERT_SWITCH_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_CUSTOMIZE_ALERT_SWITCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_SWITCH",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_CUSTOMIZE_ALERT_SWITCH_Handler)
			},
		},
		{
			MethodName: "APM_CUSTOMIZE_ALERT_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(APM_CUSTOMIZE_ALERT_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmAlertServer).APM_CUSTOMIZE_ALERT_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmAlert_APM_CUSTOMIZE_ALERT_UPDATE_info)
				}
				if interceptor == nil {
					return _MspApmAlert_APM_CUSTOMIZE_ALERT_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_alert/APM_CUSTOMIZE_ALERT_UPDATE",
				}
				return interceptor(ctx, in, info, _MspApmAlert_APM_CUSTOMIZE_ALERT_UPDATE_Handler)
			},
		},
	}
	return &serviceDesc
}
