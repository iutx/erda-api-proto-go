// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: msp_apm_alert.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type APM_ALERTS_RULES_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
}

func (x *APM_ALERTS_RULES_Request) Reset() {
	*x = APM_ALERTS_RULES_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_ALERTS_RULES_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_ALERTS_RULES_Request) ProtoMessage() {}

func (x *APM_ALERTS_RULES_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_ALERTS_RULES_Request.ProtoReflect.Descriptor instead.
func (*APM_ALERTS_RULES_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{0}
}

func (x *APM_ALERTS_RULES_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

type APM_ALERTS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
}

func (x *APM_ALERTS_Request) Reset() {
	*x = APM_ALERTS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_ALERTS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_ALERTS_Request) ProtoMessage() {}

func (x *APM_ALERTS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_ALERTS_Request.ProtoReflect.Descriptor instead.
func (*APM_ALERTS_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{1}
}

func (x *APM_ALERTS_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

type APM_ALERT_CREATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
}

func (x *APM_ALERT_CREATE_Request) Reset() {
	*x = APM_ALERT_CREATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_ALERT_CREATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_ALERT_CREATE_Request) ProtoMessage() {}

func (x *APM_ALERT_CREATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_ALERT_CREATE_Request.ProtoReflect.Descriptor instead.
func (*APM_ALERT_CREATE_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{2}
}

func (x *APM_ALERT_CREATE_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

type APM_ALERT_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                   // generated from path variable: id. You should change the proto type if necessary.
}

func (x *APM_ALERT_DELETE_Request) Reset() {
	*x = APM_ALERT_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_ALERT_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_ALERT_DELETE_Request) ProtoMessage() {}

func (x *APM_ALERT_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_ALERT_DELETE_Request.ProtoReflect.Descriptor instead.
func (*APM_ALERT_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{3}
}

func (x *APM_ALERT_DELETE_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *APM_ALERT_DELETE_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type APM_ALERT_RECORDS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
}

func (x *APM_ALERT_RECORDS_Request) Reset() {
	*x = APM_ALERT_RECORDS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_ALERT_RECORDS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_ALERT_RECORDS_Request) ProtoMessage() {}

func (x *APM_ALERT_RECORDS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_ALERT_RECORDS_Request.ProtoReflect.Descriptor instead.
func (*APM_ALERT_RECORDS_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{4}
}

func (x *APM_ALERT_RECORDS_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

type APM_ALERT_RECORD_ATTRS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
}

func (x *APM_ALERT_RECORD_ATTRS_Request) Reset() {
	*x = APM_ALERT_RECORD_ATTRS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_ALERT_RECORD_ATTRS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_ALERT_RECORD_ATTRS_Request) ProtoMessage() {}

func (x *APM_ALERT_RECORD_ATTRS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_ALERT_RECORD_ATTRS_Request.ProtoReflect.Descriptor instead.
func (*APM_ALERT_RECORD_ATTRS_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{5}
}

func (x *APM_ALERT_RECORD_ATTRS_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

type APM_ALERT_RECORD_HISTORIES_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
	GroupId     string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`         // generated from path variable: groupId. You should change the proto type if necessary.
}

func (x *APM_ALERT_RECORD_HISTORIES_Request) Reset() {
	*x = APM_ALERT_RECORD_HISTORIES_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_ALERT_RECORD_HISTORIES_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_ALERT_RECORD_HISTORIES_Request) ProtoMessage() {}

func (x *APM_ALERT_RECORD_HISTORIES_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_ALERT_RECORD_HISTORIES_Request.ProtoReflect.Descriptor instead.
func (*APM_ALERT_RECORD_HISTORIES_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{6}
}

func (x *APM_ALERT_RECORD_HISTORIES_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *APM_ALERT_RECORD_HISTORIES_Request) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type APM_ALERT_RECORD_ISSUE_CREATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
	GroupId     string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`         // generated from path variable: groupId. You should change the proto type if necessary.
}

func (x *APM_ALERT_RECORD_ISSUE_CREATE_Request) Reset() {
	*x = APM_ALERT_RECORD_ISSUE_CREATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_ALERT_RECORD_ISSUE_CREATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_ALERT_RECORD_ISSUE_CREATE_Request) ProtoMessage() {}

func (x *APM_ALERT_RECORD_ISSUE_CREATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_ALERT_RECORD_ISSUE_CREATE_Request.ProtoReflect.Descriptor instead.
func (*APM_ALERT_RECORD_ISSUE_CREATE_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{7}
}

func (x *APM_ALERT_RECORD_ISSUE_CREATE_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *APM_ALERT_RECORD_ISSUE_CREATE_Request) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type APM_ALERT_RECORD_ISSUE_UPDATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
	GroupId     string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`         // generated from path variable: groupId. You should change the proto type if necessary.
	IssueId     string `protobuf:"bytes,3,opt,name=issueId,proto3" json:"issueId,omitempty"`         // generated from path variable: issueId. You should change the proto type if necessary.
}

func (x *APM_ALERT_RECORD_ISSUE_UPDATE_Request) Reset() {
	*x = APM_ALERT_RECORD_ISSUE_UPDATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_ALERT_RECORD_ISSUE_UPDATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_ALERT_RECORD_ISSUE_UPDATE_Request) ProtoMessage() {}

func (x *APM_ALERT_RECORD_ISSUE_UPDATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_ALERT_RECORD_ISSUE_UPDATE_Request.ProtoReflect.Descriptor instead.
func (*APM_ALERT_RECORD_ISSUE_UPDATE_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{8}
}

func (x *APM_ALERT_RECORD_ISSUE_UPDATE_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *APM_ALERT_RECORD_ISSUE_UPDATE_Request) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *APM_ALERT_RECORD_ISSUE_UPDATE_Request) GetIssueId() string {
	if x != nil {
		return x.IssueId
	}
	return ""
}

type APM_ALERT_RECORD_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
	GroupId     string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`         // generated from path variable: groupId. You should change the proto type if necessary.
}

func (x *APM_ALERT_RECORD_Request) Reset() {
	*x = APM_ALERT_RECORD_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_ALERT_RECORD_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_ALERT_RECORD_Request) ProtoMessage() {}

func (x *APM_ALERT_RECORD_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_ALERT_RECORD_Request.ProtoReflect.Descriptor instead.
func (*APM_ALERT_RECORD_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{9}
}

func (x *APM_ALERT_RECORD_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *APM_ALERT_RECORD_Request) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type APM_ALERT_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                   // generated from path variable: id. You should change the proto type if necessary.
}

func (x *APM_ALERT_Request) Reset() {
	*x = APM_ALERT_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_ALERT_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_ALERT_Request) ProtoMessage() {}

func (x *APM_ALERT_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_ALERT_Request.ProtoReflect.Descriptor instead.
func (*APM_ALERT_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{10}
}

func (x *APM_ALERT_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *APM_ALERT_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type APM_ALERT_SWITCH_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                   // generated from path variable: id. You should change the proto type if necessary.
}

func (x *APM_ALERT_SWITCH_Request) Reset() {
	*x = APM_ALERT_SWITCH_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_ALERT_SWITCH_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_ALERT_SWITCH_Request) ProtoMessage() {}

func (x *APM_ALERT_SWITCH_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_ALERT_SWITCH_Request.ProtoReflect.Descriptor instead.
func (*APM_ALERT_SWITCH_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{11}
}

func (x *APM_ALERT_SWITCH_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *APM_ALERT_SWITCH_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type APM_ALERT_UPDATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                   // generated from path variable: id. You should change the proto type if necessary.
}

func (x *APM_ALERT_UPDATE_Request) Reset() {
	*x = APM_ALERT_UPDATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_ALERT_UPDATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_ALERT_UPDATE_Request) ProtoMessage() {}

func (x *APM_ALERT_UPDATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_ALERT_UPDATE_Request.ProtoReflect.Descriptor instead.
func (*APM_ALERT_UPDATE_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{12}
}

func (x *APM_ALERT_UPDATE_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *APM_ALERT_UPDATE_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type APM_CUSTOMIZE_ALERTS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
}

func (x *APM_CUSTOMIZE_ALERTS_Request) Reset() {
	*x = APM_CUSTOMIZE_ALERTS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_CUSTOMIZE_ALERTS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_CUSTOMIZE_ALERTS_Request) ProtoMessage() {}

func (x *APM_CUSTOMIZE_ALERTS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_CUSTOMIZE_ALERTS_Request.ProtoReflect.Descriptor instead.
func (*APM_CUSTOMIZE_ALERTS_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{13}
}

func (x *APM_CUSTOMIZE_ALERTS_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

type APM_CUSTOMIZE_ALERT_CREATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
}

func (x *APM_CUSTOMIZE_ALERT_CREATE_Request) Reset() {
	*x = APM_CUSTOMIZE_ALERT_CREATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_CUSTOMIZE_ALERT_CREATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_CUSTOMIZE_ALERT_CREATE_Request) ProtoMessage() {}

func (x *APM_CUSTOMIZE_ALERT_CREATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_CUSTOMIZE_ALERT_CREATE_Request.ProtoReflect.Descriptor instead.
func (*APM_CUSTOMIZE_ALERT_CREATE_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{14}
}

func (x *APM_CUSTOMIZE_ALERT_CREATE_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

type APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
}

func (x *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) Reset() {
	*x = APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) ProtoMessage() {}

func (x *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request.ProtoReflect.Descriptor instead.
func (*APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{15}
}

func (x *APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

type APM_CUSTOMIZE_ALERT_DELETE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                   // generated from path variable: id. You should change the proto type if necessary.
}

func (x *APM_CUSTOMIZE_ALERT_DELETE_Request) Reset() {
	*x = APM_CUSTOMIZE_ALERT_DELETE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_CUSTOMIZE_ALERT_DELETE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_CUSTOMIZE_ALERT_DELETE_Request) ProtoMessage() {}

func (x *APM_CUSTOMIZE_ALERT_DELETE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_CUSTOMIZE_ALERT_DELETE_Request.ProtoReflect.Descriptor instead.
func (*APM_CUSTOMIZE_ALERT_DELETE_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{16}
}

func (x *APM_CUSTOMIZE_ALERT_DELETE_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *APM_CUSTOMIZE_ALERT_DELETE_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type APM_CUSTOMIZE_ALERT_METRICS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
}

func (x *APM_CUSTOMIZE_ALERT_METRICS_Request) Reset() {
	*x = APM_CUSTOMIZE_ALERT_METRICS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_CUSTOMIZE_ALERT_METRICS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_CUSTOMIZE_ALERT_METRICS_Request) ProtoMessage() {}

func (x *APM_CUSTOMIZE_ALERT_METRICS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_CUSTOMIZE_ALERT_METRICS_Request.ProtoReflect.Descriptor instead.
func (*APM_CUSTOMIZE_ALERT_METRICS_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{17}
}

func (x *APM_CUSTOMIZE_ALERT_METRICS_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

type APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
}

func (x *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) Reset() {
	*x = APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) ProtoMessage() {}

func (x *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request.ProtoReflect.Descriptor instead.
func (*APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{18}
}

func (x *APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

type APM_CUSTOMIZE_ALERT_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                   // generated from path variable: id. You should change the proto type if necessary.
}

func (x *APM_CUSTOMIZE_ALERT_Request) Reset() {
	*x = APM_CUSTOMIZE_ALERT_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_CUSTOMIZE_ALERT_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_CUSTOMIZE_ALERT_Request) ProtoMessage() {}

func (x *APM_CUSTOMIZE_ALERT_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_CUSTOMIZE_ALERT_Request.ProtoReflect.Descriptor instead.
func (*APM_CUSTOMIZE_ALERT_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{19}
}

func (x *APM_CUSTOMIZE_ALERT_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *APM_CUSTOMIZE_ALERT_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type APM_CUSTOMIZE_ALERT_SWITCH_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                   // generated from path variable: id. You should change the proto type if necessary.
}

func (x *APM_CUSTOMIZE_ALERT_SWITCH_Request) Reset() {
	*x = APM_CUSTOMIZE_ALERT_SWITCH_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_CUSTOMIZE_ALERT_SWITCH_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_CUSTOMIZE_ALERT_SWITCH_Request) ProtoMessage() {}

func (x *APM_CUSTOMIZE_ALERT_SWITCH_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_CUSTOMIZE_ALERT_SWITCH_Request.ProtoReflect.Descriptor instead.
func (*APM_CUSTOMIZE_ALERT_SWITCH_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{20}
}

func (x *APM_CUSTOMIZE_ALERT_SWITCH_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *APM_CUSTOMIZE_ALERT_SWITCH_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type APM_CUSTOMIZE_ALERT_UPDATE_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantGroup string `protobuf:"bytes,1,opt,name=tenantGroup,proto3" json:"tenantGroup,omitempty"` // generated from path variable: tenantGroup. You should change the proto type if necessary.
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                   // generated from path variable: id. You should change the proto type if necessary.
}

func (x *APM_CUSTOMIZE_ALERT_UPDATE_Request) Reset() {
	*x = APM_CUSTOMIZE_ALERT_UPDATE_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_alert_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APM_CUSTOMIZE_ALERT_UPDATE_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APM_CUSTOMIZE_ALERT_UPDATE_Request) ProtoMessage() {}

func (x *APM_CUSTOMIZE_ALERT_UPDATE_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_alert_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APM_CUSTOMIZE_ALERT_UPDATE_Request.ProtoReflect.Descriptor instead.
func (*APM_CUSTOMIZE_ALERT_UPDATE_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_alert_proto_rawDescGZIP(), []int{21}
}

func (x *APM_CUSTOMIZE_ALERT_UPDATE_Request) GetTenantGroup() string {
	if x != nil {
		return x.TenantGroup
	}
	return ""
}

func (x *APM_CUSTOMIZE_ALERT_UPDATE_Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_msp_apm_alert_proto protoreflect.FileDescriptor

var file_msp_apm_alert_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x73, 0x70, 0x5f, 0x61, 0x70, 0x6d, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x18, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x36, 0x0a, 0x12, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x53, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3c, 0x0a, 0x18, 0x41, 0x50, 0x4d,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x4c, 0x0a, 0x18, 0x41, 0x50, 0x4d, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x19, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x42, 0x0a, 0x1e, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x60, 0x0a, 0x22, 0x41, 0x50, 0x4d, 0x5f,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x25, 0x41, 0x50,
	0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x7d, 0x0a, 0x25, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x22, 0x56,
	0x0a, 0x18, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x11, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a,
	0x18, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x18, 0x41,
	0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x1c, 0x41, 0x50, 0x4d,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x46, 0x0a, 0x22, 0x41,
	0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x4c, 0x0a, 0x28, 0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x5f,
	0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x56, 0x0a, 0x22, 0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49,
	0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x23, 0x41, 0x50, 0x4d,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x4d, 0x0a, 0x29, 0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x4f, 0x0a, 0x1b, 0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49,
	0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x56, 0x0a, 0x22, 0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x22, 0x41, 0x50,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x32, 0xcf, 0x33, 0x0a, 0x0d, 0x6d, 0x73, 0x70, 0x5f, 0x61, 0x70, 0x6d, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x80, 0x02, 0x0a, 0x09, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x12, 0x25, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0xb3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x6a, 0x0a, 0x3c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x91, 0x8a, 0xe8, 0xad,
	0xa6, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xf8, 0x01, 0x0a, 0x0a, 0x41, 0x50, 0x4d, 0x5f,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x53, 0x12, 0x26, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d, 0x5f,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12,
	0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x65, 0x0a, 0x37, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xbe, 0xae,
	0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0x12, 0x96, 0x02, 0x0a, 0x10, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xbb, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63,
	0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x71, 0x0a, 0x3d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x2a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe8,
	0xa7, 0x84, 0xe5, 0x88, 0x99, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xfe, 0x01, 0x0a, 0x10,
	0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22,
	0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x5f, 0x0a, 0x37, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1e, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xbe, 0xae,
	0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0x12, 0x88, 0x02, 0x0a,
	0x10, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xad, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e,
	0x2a, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81,
	0xf9, 0x1b, 0x64, 0x0a, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a,
	0xa1, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0x12, 0x8a, 0x02, 0x0a, 0x10, 0x41, 0x50, 0x4d, 0x5f,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x12, 0x2c, 0x2e, 0x65,
	0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0xaf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x68, 0x0a, 0x3a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5,
	0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe8, 0xae,
	0xb0, 0xe5, 0xbd, 0x95, 0x12, 0xfe, 0x01, 0x0a, 0x11, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x53, 0x12, 0x2d, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0xfa, 0x81, 0xf9, 0x1b,
	0x64, 0x0a, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x2a, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x92, 0x02, 0x0a, 0x16, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53,
	0x12, 0x32, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x53, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xab, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x73, 0xfa, 0x81, 0xf9, 0x1b,
	0x69, 0x0a, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x2a,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5,
	0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe8, 0xae,
	0xb0, 0xe5, 0xbd, 0x95, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x12, 0xb8, 0x02, 0x0a, 0x1a, 0x41,
	0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41,
	0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xc9, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x46, 0x12, 0x44, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x78, 0x0a, 0x44, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f,
	0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x2a, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe5,
	0x8e, 0x86, 0xe5, 0x8f, 0xb2, 0x12, 0xb8, 0x02, 0x0a, 0x1d, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x49, 0x53,
	0x53, 0x55, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xc3, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x43, 0x22, 0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x75, 0x0a, 0x41, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x32, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x3a, 0x2a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x91,
	0x8a, 0xe8, 0xad, 0xa6, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe5, 0xb7, 0xa5, 0xe5, 0x8d, 0x95,
	0x12, 0xcc, 0x02, 0x0a, 0x1d, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x12, 0x39, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xd7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x1a, 0x4b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x7f,
	0x0a, 0x4b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x7d, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x2a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe4, 0xbf,
	0xae, 0xe6, 0x94, 0xb9, 0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x91, 0x8a,
	0xe8, 0xad, 0xa6, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe5, 0xb7, 0xa5, 0xe5, 0x8d, 0x95, 0x12,
	0x9c, 0x02, 0x0a, 0x10, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xc1, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x45, 0x1a, 0x43, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0xfa, 0x81, 0xf9, 0x1b, 0x71, 0x0a, 0x43, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x24, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x3a, 0x20, 0xe5, 0x88, 0x87, 0xe6, 0x8d, 0xa2, 0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5,
	0x8a, 0xa1, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x85, 0xb3, 0x12, 0x88,
	0x02, 0x0a, 0x10, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x12, 0x2c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xad, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3e, 0x1a, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0xfa, 0x81, 0xf9, 0x1b, 0x64, 0x0a, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0x12, 0xb1, 0x02, 0x0a, 0x13, 0x41, 0x50,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x12, 0x2f, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xd0, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x48, 0x12, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x7d,
	0x0a, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x2d,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5,
	0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9,
	0x89, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x12, 0xa9, 0x02,
	0x0a, 0x14, 0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x53, 0x12, 0x30, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x53,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0xc6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b,
	0x78, 0x0a, 0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x2d, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xbe, 0xae, 0xe6, 0x9c,
	0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0x91, 0x8a,
	0xe8, 0xad, 0xa6, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xaf, 0x02, 0x0a, 0x1a, 0x41, 0x50,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xc0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x43, 0x22, 0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x72, 0x0a, 0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01,
	0x20, 0x01, 0x3a, 0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x87, 0xaa, 0xe5,
	0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0x12, 0xee, 0x02, 0x0a, 0x20,
	0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x12, 0x3c, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x5f, 0x50,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xf3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x22,
	0x54, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0xfa, 0x81, 0xf9, 0x1b, 0x91, 0x01, 0x0a, 0x54, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x64,
	0x61, 0x73, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x33, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x3a, 0x20, 0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x87, 0xaa, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe9, 0xa2, 0x84, 0xe8, 0xa7, 0x88,
	0xe5, 0xa4, 0xa7, 0xe7, 0x9b, 0x98, 0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0x12, 0xb9, 0x02, 0x0a,
	0x1a, 0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x36, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xca, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x48, 0x2a, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b,
	0x77, 0x0a, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0x12, 0xc4, 0x02, 0x0a, 0x1b, 0x41, 0x50, 0x4d,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x12, 0x37, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xd3, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4b, 0x12, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0xfa, 0x81, 0xf9,
	0x1b, 0x7d, 0x0a, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x32, 0x04, 0x10,
	0x01, 0x20, 0x01, 0x3a, 0x2a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe6, 0x8c, 0x87, 0xe6, 0xa0, 0x87, 0x12,
	0xe9, 0x02, 0x0a, 0x21, 0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a,
	0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x12, 0x3d, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x41, 0x50, 0x4d, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xec, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x54, 0x12, 0x52, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x73, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x8c, 0x01, 0x0a,
	0x52, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x2f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x30, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x3a, 0x20, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a,
	0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe9,
	0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0x12, 0xce, 0x02, 0x0a, 0x1a,
	0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64,
	0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xdf, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4f, 0x1a, 0x4d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0xfa, 0x81, 0xf9, 0x1b, 0x84, 0x01, 0x0a, 0x4d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x2d, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe5, 0x88, 0x87, 0xe6, 0x8d, 0xa2, 0xe5, 0xbe,
	0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89,
	0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe5, 0xbc, 0x80, 0xe5, 0x85, 0xb3, 0x12, 0xb9, 0x02, 0x0a,
	0x1a, 0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x36, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x41, 0x50, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xca, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x48, 0x1a, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b,
	0x77, 0x0a, 0x46, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x7d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a,
	0x27, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x20, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9,
	0xe5, 0xbe, 0xae, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4,
	0xb9, 0x89, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0x1a, 0x0a, 0xc2, 0xc4, 0xcb, 0x1c, 0x05, 0x22,
	0x03, 0x6d, 0x73, 0x70, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msp_apm_alert_proto_rawDescOnce sync.Once
	file_msp_apm_alert_proto_rawDescData = file_msp_apm_alert_proto_rawDesc
)

func file_msp_apm_alert_proto_rawDescGZIP() []byte {
	file_msp_apm_alert_proto_rawDescOnce.Do(func() {
		file_msp_apm_alert_proto_rawDescData = protoimpl.X.CompressGZIP(file_msp_apm_alert_proto_rawDescData)
	})
	return file_msp_apm_alert_proto_rawDescData
}

var file_msp_apm_alert_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_msp_apm_alert_proto_goTypes = []interface{}{
	(*APM_ALERTS_RULES_Request)(nil),                  // 0: erda.openapiv1.msp.APM_ALERTS_RULES_Request
	(*APM_ALERTS_Request)(nil),                        // 1: erda.openapiv1.msp.APM_ALERTS_Request
	(*APM_ALERT_CREATE_Request)(nil),                  // 2: erda.openapiv1.msp.APM_ALERT_CREATE_Request
	(*APM_ALERT_DELETE_Request)(nil),                  // 3: erda.openapiv1.msp.APM_ALERT_DELETE_Request
	(*APM_ALERT_RECORDS_Request)(nil),                 // 4: erda.openapiv1.msp.APM_ALERT_RECORDS_Request
	(*APM_ALERT_RECORD_ATTRS_Request)(nil),            // 5: erda.openapiv1.msp.APM_ALERT_RECORD_ATTRS_Request
	(*APM_ALERT_RECORD_HISTORIES_Request)(nil),        // 6: erda.openapiv1.msp.APM_ALERT_RECORD_HISTORIES_Request
	(*APM_ALERT_RECORD_ISSUE_CREATE_Request)(nil),     // 7: erda.openapiv1.msp.APM_ALERT_RECORD_ISSUE_CREATE_Request
	(*APM_ALERT_RECORD_ISSUE_UPDATE_Request)(nil),     // 8: erda.openapiv1.msp.APM_ALERT_RECORD_ISSUE_UPDATE_Request
	(*APM_ALERT_RECORD_Request)(nil),                  // 9: erda.openapiv1.msp.APM_ALERT_RECORD_Request
	(*APM_ALERT_Request)(nil),                         // 10: erda.openapiv1.msp.APM_ALERT_Request
	(*APM_ALERT_SWITCH_Request)(nil),                  // 11: erda.openapiv1.msp.APM_ALERT_SWITCH_Request
	(*APM_ALERT_UPDATE_Request)(nil),                  // 12: erda.openapiv1.msp.APM_ALERT_UPDATE_Request
	(*APM_CUSTOMIZE_ALERTS_Request)(nil),              // 13: erda.openapiv1.msp.APM_CUSTOMIZE_ALERTS_Request
	(*APM_CUSTOMIZE_ALERT_CREATE_Request)(nil),        // 14: erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_CREATE_Request
	(*APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request)(nil),  // 15: erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request
	(*APM_CUSTOMIZE_ALERT_DELETE_Request)(nil),        // 16: erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_DELETE_Request
	(*APM_CUSTOMIZE_ALERT_METRICS_Request)(nil),       // 17: erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_METRICS_Request
	(*APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request)(nil), // 18: erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request
	(*APM_CUSTOMIZE_ALERT_Request)(nil),               // 19: erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_Request
	(*APM_CUSTOMIZE_ALERT_SWITCH_Request)(nil),        // 20: erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_SWITCH_Request
	(*APM_CUSTOMIZE_ALERT_UPDATE_Request)(nil),        // 21: erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_UPDATE_Request
	(*emptypb.Empty)(nil),                             // 22: google.protobuf.Empty
}
var file_msp_apm_alert_proto_depIdxs = []int32{
	10, // 0: erda.openapiv1.msp.msp_apm_alert.APM_ALERT:input_type -> erda.openapiv1.msp.APM_ALERT_Request
	1,  // 1: erda.openapiv1.msp.msp_apm_alert.APM_ALERTS:input_type -> erda.openapiv1.msp.APM_ALERTS_Request
	0,  // 2: erda.openapiv1.msp.msp_apm_alert.APM_ALERTS_RULES:input_type -> erda.openapiv1.msp.APM_ALERTS_RULES_Request
	2,  // 3: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_CREATE:input_type -> erda.openapiv1.msp.APM_ALERT_CREATE_Request
	3,  // 4: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_DELETE:input_type -> erda.openapiv1.msp.APM_ALERT_DELETE_Request
	9,  // 5: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_RECORD:input_type -> erda.openapiv1.msp.APM_ALERT_RECORD_Request
	4,  // 6: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_RECORDS:input_type -> erda.openapiv1.msp.APM_ALERT_RECORDS_Request
	5,  // 7: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_RECORD_ATTRS:input_type -> erda.openapiv1.msp.APM_ALERT_RECORD_ATTRS_Request
	6,  // 8: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_RECORD_HISTORIES:input_type -> erda.openapiv1.msp.APM_ALERT_RECORD_HISTORIES_Request
	7,  // 9: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_RECORD_ISSUE_CREATE:input_type -> erda.openapiv1.msp.APM_ALERT_RECORD_ISSUE_CREATE_Request
	8,  // 10: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_RECORD_ISSUE_UPDATE:input_type -> erda.openapiv1.msp.APM_ALERT_RECORD_ISSUE_UPDATE_Request
	11, // 11: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_SWITCH:input_type -> erda.openapiv1.msp.APM_ALERT_SWITCH_Request
	12, // 12: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_UPDATE:input_type -> erda.openapiv1.msp.APM_ALERT_UPDATE_Request
	19, // 13: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT:input_type -> erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_Request
	13, // 14: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERTS:input_type -> erda.openapiv1.msp.APM_CUSTOMIZE_ALERTS_Request
	14, // 15: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_CREATE:input_type -> erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_CREATE_Request
	15, // 16: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_DASH_PREVIEW:input_type -> erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request
	16, // 17: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_DELETE:input_type -> erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_DELETE_Request
	17, // 18: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_METRICS:input_type -> erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_METRICS_Request
	18, // 19: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_NOTIFY_TARGET:input_type -> erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request
	20, // 20: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_SWITCH:input_type -> erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_SWITCH_Request
	21, // 21: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_UPDATE:input_type -> erda.openapiv1.msp.APM_CUSTOMIZE_ALERT_UPDATE_Request
	22, // 22: erda.openapiv1.msp.msp_apm_alert.APM_ALERT:output_type -> google.protobuf.Empty
	22, // 23: erda.openapiv1.msp.msp_apm_alert.APM_ALERTS:output_type -> google.protobuf.Empty
	22, // 24: erda.openapiv1.msp.msp_apm_alert.APM_ALERTS_RULES:output_type -> google.protobuf.Empty
	22, // 25: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_CREATE:output_type -> google.protobuf.Empty
	22, // 26: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_DELETE:output_type -> google.protobuf.Empty
	22, // 27: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_RECORD:output_type -> google.protobuf.Empty
	22, // 28: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_RECORDS:output_type -> google.protobuf.Empty
	22, // 29: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_RECORD_ATTRS:output_type -> google.protobuf.Empty
	22, // 30: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_RECORD_HISTORIES:output_type -> google.protobuf.Empty
	22, // 31: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_RECORD_ISSUE_CREATE:output_type -> google.protobuf.Empty
	22, // 32: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_RECORD_ISSUE_UPDATE:output_type -> google.protobuf.Empty
	22, // 33: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_SWITCH:output_type -> google.protobuf.Empty
	22, // 34: erda.openapiv1.msp.msp_apm_alert.APM_ALERT_UPDATE:output_type -> google.protobuf.Empty
	22, // 35: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT:output_type -> google.protobuf.Empty
	22, // 36: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERTS:output_type -> google.protobuf.Empty
	22, // 37: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_CREATE:output_type -> google.protobuf.Empty
	22, // 38: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_DASH_PREVIEW:output_type -> google.protobuf.Empty
	22, // 39: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_DELETE:output_type -> google.protobuf.Empty
	22, // 40: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_METRICS:output_type -> google.protobuf.Empty
	22, // 41: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_NOTIFY_TARGET:output_type -> google.protobuf.Empty
	22, // 42: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_SWITCH:output_type -> google.protobuf.Empty
	22, // 43: erda.openapiv1.msp.msp_apm_alert.APM_CUSTOMIZE_ALERT_UPDATE:output_type -> google.protobuf.Empty
	22, // [22:44] is the sub-list for method output_type
	0,  // [0:22] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_msp_apm_alert_proto_init() }
func file_msp_apm_alert_proto_init() {
	if File_msp_apm_alert_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msp_apm_alert_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_ALERTS_RULES_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_ALERTS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_ALERT_CREATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_ALERT_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_ALERT_RECORDS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_ALERT_RECORD_ATTRS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_ALERT_RECORD_HISTORIES_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_ALERT_RECORD_ISSUE_CREATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_ALERT_RECORD_ISSUE_UPDATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_ALERT_RECORD_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_ALERT_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_ALERT_SWITCH_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_ALERT_UPDATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_CUSTOMIZE_ALERTS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_CUSTOMIZE_ALERT_CREATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_CUSTOMIZE_ALERT_DASH_PREVIEW_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_CUSTOMIZE_ALERT_DELETE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_CUSTOMIZE_ALERT_METRICS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_CUSTOMIZE_ALERT_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_CUSTOMIZE_ALERT_SWITCH_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_alert_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APM_CUSTOMIZE_ALERT_UPDATE_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msp_apm_alert_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_msp_apm_alert_proto_goTypes,
		DependencyIndexes: file_msp_apm_alert_proto_depIdxs,
		MessageInfos:      file_msp_apm_alert_proto_msgTypes,
	}.Build()
	File_msp_apm_alert_proto = out.File
	file_msp_apm_alert_proto_rawDesc = nil
	file_msp_apm_alert_proto_goTypes = nil
	file_msp_apm_alert_proto_depIdxs = nil
}
