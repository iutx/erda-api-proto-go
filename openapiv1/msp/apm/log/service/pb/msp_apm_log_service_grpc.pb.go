// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: msp_apm_log_service.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// MspApmLogServiceClient is the client API for MspApmLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MspApmLogServiceClient interface {
	MSP_ADDON_LOGS_AGGREGATION(ctx context.Context, in *MSP_ADDON_LOGS_AGGREGATION_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_DOWNLOAD(ctx context.Context, in *MSP_ADDON_LOGS_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_FIELDS(ctx context.Context, in *MSP_ADDON_LOGS_FIELDS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_SEARCH_GET(ctx context.Context, in *MSP_ADDON_LOGS_SEARCH_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_SEARCH_SEQUENTIAL(ctx context.Context, in *MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_STATISTIC(ctx context.Context, in *MSP_ADDON_LOGS_STATISTIC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mspApmLogServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewMspApmLogServiceClient(cc grpc1.ClientConnInterface) MspApmLogServiceClient {
	return &mspApmLogServiceClient{cc}
}

func (c *mspApmLogServiceClient) MSP_ADDON_LOGS_AGGREGATION(ctx context.Context, in *MSP_ADDON_LOGS_AGGREGATION_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_log_service/MSP_ADDON_LOGS_AGGREGATION", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmLogServiceClient) MSP_ADDON_LOGS_DOWNLOAD(ctx context.Context, in *MSP_ADDON_LOGS_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_log_service/MSP_ADDON_LOGS_DOWNLOAD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmLogServiceClient) MSP_ADDON_LOGS_FIELDS(ctx context.Context, in *MSP_ADDON_LOGS_FIELDS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_log_service/MSP_ADDON_LOGS_FIELDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmLogServiceClient) MSP_ADDON_LOGS_SEARCH_GET(ctx context.Context, in *MSP_ADDON_LOGS_SEARCH_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_log_service/MSP_ADDON_LOGS_SEARCH_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmLogServiceClient) MSP_ADDON_LOGS_SEARCH_SEQUENTIAL(ctx context.Context, in *MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_log_service/MSP_ADDON_LOGS_SEARCH_SEQUENTIAL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmLogServiceClient) MSP_ADDON_LOGS_STATISTIC(ctx context.Context, in *MSP_ADDON_LOGS_STATISTIC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_log_service/MSP_ADDON_LOGS_STATISTIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MspApmLogServiceServer is the server API for MspApmLogService service.
// All implementations should embed UnimplementedMspApmLogServiceServer
// for forward compatibility
type MspApmLogServiceServer interface {
	MSP_ADDON_LOGS_AGGREGATION(context.Context, *MSP_ADDON_LOGS_AGGREGATION_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_DOWNLOAD(context.Context, *MSP_ADDON_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_FIELDS(context.Context, *MSP_ADDON_LOGS_FIELDS_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_SEARCH_GET(context.Context, *MSP_ADDON_LOGS_SEARCH_GET_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_SEARCH_SEQUENTIAL(context.Context, *MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_STATISTIC(context.Context, *MSP_ADDON_LOGS_STATISTIC_Request) (*emptypb.Empty, error)
}

// UnimplementedMspApmLogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMspApmLogServiceServer struct {
}

func (*UnimplementedMspApmLogServiceServer) MSP_ADDON_LOGS_AGGREGATION(context.Context, *MSP_ADDON_LOGS_AGGREGATION_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_AGGREGATION not implemented")
}
func (*UnimplementedMspApmLogServiceServer) MSP_ADDON_LOGS_DOWNLOAD(context.Context, *MSP_ADDON_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_DOWNLOAD not implemented")
}
func (*UnimplementedMspApmLogServiceServer) MSP_ADDON_LOGS_FIELDS(context.Context, *MSP_ADDON_LOGS_FIELDS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_FIELDS not implemented")
}
func (*UnimplementedMspApmLogServiceServer) MSP_ADDON_LOGS_SEARCH_GET(context.Context, *MSP_ADDON_LOGS_SEARCH_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_SEARCH_GET not implemented")
}
func (*UnimplementedMspApmLogServiceServer) MSP_ADDON_LOGS_SEARCH_SEQUENTIAL(context.Context, *MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_SEARCH_SEQUENTIAL not implemented")
}
func (*UnimplementedMspApmLogServiceServer) MSP_ADDON_LOGS_STATISTIC(context.Context, *MSP_ADDON_LOGS_STATISTIC_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_STATISTIC not implemented")
}

func RegisterMspApmLogServiceServer(s grpc1.ServiceRegistrar, srv MspApmLogServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_MspApmLogService_serviceDesc(srv, opts...), srv)
}

var _MspApmLogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.msp.msp_apm_log_service",
	HandlerType: (*MspApmLogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "msp_apm_log_service.proto",
}

func _get_MspApmLogService_serviceDesc(srv MspApmLogServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_MspApmLogService_MSP_ADDON_LOGS_AGGREGATION_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_AGGREGATION(ctx, req.(*MSP_ADDON_LOGS_AGGREGATION_Request))
	}
	var _MspApmLogService_MSP_ADDON_LOGS_AGGREGATION_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmLogService_MSP_ADDON_LOGS_AGGREGATION_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_log_service", "MSP_ADDON_LOGS_AGGREGATION", srv)
		_MspApmLogService_MSP_ADDON_LOGS_AGGREGATION_Handler = h.Interceptor(_MspApmLogService_MSP_ADDON_LOGS_AGGREGATION_Handler)
	}

	_MspApmLogService_MSP_ADDON_LOGS_DOWNLOAD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_DOWNLOAD(ctx, req.(*MSP_ADDON_LOGS_DOWNLOAD_Request))
	}
	var _MspApmLogService_MSP_ADDON_LOGS_DOWNLOAD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmLogService_MSP_ADDON_LOGS_DOWNLOAD_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_log_service", "MSP_ADDON_LOGS_DOWNLOAD", srv)
		_MspApmLogService_MSP_ADDON_LOGS_DOWNLOAD_Handler = h.Interceptor(_MspApmLogService_MSP_ADDON_LOGS_DOWNLOAD_Handler)
	}

	_MspApmLogService_MSP_ADDON_LOGS_FIELDS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_FIELDS(ctx, req.(*MSP_ADDON_LOGS_FIELDS_Request))
	}
	var _MspApmLogService_MSP_ADDON_LOGS_FIELDS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmLogService_MSP_ADDON_LOGS_FIELDS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_log_service", "MSP_ADDON_LOGS_FIELDS", srv)
		_MspApmLogService_MSP_ADDON_LOGS_FIELDS_Handler = h.Interceptor(_MspApmLogService_MSP_ADDON_LOGS_FIELDS_Handler)
	}

	_MspApmLogService_MSP_ADDON_LOGS_SEARCH_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_SEARCH_GET(ctx, req.(*MSP_ADDON_LOGS_SEARCH_GET_Request))
	}
	var _MspApmLogService_MSP_ADDON_LOGS_SEARCH_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmLogService_MSP_ADDON_LOGS_SEARCH_GET_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_log_service", "MSP_ADDON_LOGS_SEARCH_GET", srv)
		_MspApmLogService_MSP_ADDON_LOGS_SEARCH_GET_Handler = h.Interceptor(_MspApmLogService_MSP_ADDON_LOGS_SEARCH_GET_Handler)
	}

	_MspApmLogService_MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_SEARCH_SEQUENTIAL(ctx, req.(*MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request))
	}
	var _MspApmLogService_MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmLogService_MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_log_service", "MSP_ADDON_LOGS_SEARCH_SEQUENTIAL", srv)
		_MspApmLogService_MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Handler = h.Interceptor(_MspApmLogService_MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Handler)
	}

	_MspApmLogService_MSP_ADDON_LOGS_STATISTIC_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_STATISTIC(ctx, req.(*MSP_ADDON_LOGS_STATISTIC_Request))
	}
	var _MspApmLogService_MSP_ADDON_LOGS_STATISTIC_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmLogService_MSP_ADDON_LOGS_STATISTIC_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_log_service", "MSP_ADDON_LOGS_STATISTIC", srv)
		_MspApmLogService_MSP_ADDON_LOGS_STATISTIC_Handler = h.Interceptor(_MspApmLogService_MSP_ADDON_LOGS_STATISTIC_Handler)
	}

	var serviceDesc = _MspApmLogService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "MSP_ADDON_LOGS_AGGREGATION",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_AGGREGATION_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmLogServiceServer).MSP_ADDON_LOGS_AGGREGATION(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmLogService_MSP_ADDON_LOGS_AGGREGATION_info)
				}
				if interceptor == nil {
					return _MspApmLogService_MSP_ADDON_LOGS_AGGREGATION_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_log_service/MSP_ADDON_LOGS_AGGREGATION",
				}
				return interceptor(ctx, in, info, _MspApmLogService_MSP_ADDON_LOGS_AGGREGATION_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_DOWNLOAD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_DOWNLOAD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmLogServiceServer).MSP_ADDON_LOGS_DOWNLOAD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmLogService_MSP_ADDON_LOGS_DOWNLOAD_info)
				}
				if interceptor == nil {
					return _MspApmLogService_MSP_ADDON_LOGS_DOWNLOAD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_log_service/MSP_ADDON_LOGS_DOWNLOAD",
				}
				return interceptor(ctx, in, info, _MspApmLogService_MSP_ADDON_LOGS_DOWNLOAD_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_FIELDS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_FIELDS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmLogServiceServer).MSP_ADDON_LOGS_FIELDS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmLogService_MSP_ADDON_LOGS_FIELDS_info)
				}
				if interceptor == nil {
					return _MspApmLogService_MSP_ADDON_LOGS_FIELDS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_log_service/MSP_ADDON_LOGS_FIELDS",
				}
				return interceptor(ctx, in, info, _MspApmLogService_MSP_ADDON_LOGS_FIELDS_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_SEARCH_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_SEARCH_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmLogServiceServer).MSP_ADDON_LOGS_SEARCH_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmLogService_MSP_ADDON_LOGS_SEARCH_GET_info)
				}
				if interceptor == nil {
					return _MspApmLogService_MSP_ADDON_LOGS_SEARCH_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_log_service/MSP_ADDON_LOGS_SEARCH_GET",
				}
				return interceptor(ctx, in, info, _MspApmLogService_MSP_ADDON_LOGS_SEARCH_GET_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_SEARCH_SEQUENTIAL",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmLogServiceServer).MSP_ADDON_LOGS_SEARCH_SEQUENTIAL(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmLogService_MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_info)
				}
				if interceptor == nil {
					return _MspApmLogService_MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_log_service/MSP_ADDON_LOGS_SEARCH_SEQUENTIAL",
				}
				return interceptor(ctx, in, info, _MspApmLogService_MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_STATISTIC",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_STATISTIC_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmLogServiceServer).MSP_ADDON_LOGS_STATISTIC(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmLogService_MSP_ADDON_LOGS_STATISTIC_info)
				}
				if interceptor == nil {
					return _MspApmLogService_MSP_ADDON_LOGS_STATISTIC_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_log_service/MSP_ADDON_LOGS_STATISTIC",
				}
				return interceptor(ctx, in, info, _MspApmLogService_MSP_ADDON_LOGS_STATISTIC_Handler)
			},
		},
	}
	return &serviceDesc
}
