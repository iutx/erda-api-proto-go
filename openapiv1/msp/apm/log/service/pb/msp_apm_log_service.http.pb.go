// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: msp_apm_log_service.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// MspApmLogServiceHandler is the server API for MspApmLogService service.
type MspApmLogServiceHandler interface {
	// GET /api/log-analytics/{addon}/aggregation
	MSP_ADDON_LOGS_AGGREGATION(context.Context, *MSP_ADDON_LOGS_AGGREGATION_Request) (*emptypb.Empty, error)
	// GET /api/log-analytics/{addon}/download
	MSP_ADDON_LOGS_DOWNLOAD(context.Context, *MSP_ADDON_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error)
	// GET /api/log-analytics/{addon}/fields
	MSP_ADDON_LOGS_FIELDS(context.Context, *MSP_ADDON_LOGS_FIELDS_Request) (*emptypb.Empty, error)
	// GET /api/log-analytics/{addon}/search
	MSP_ADDON_LOGS_SEARCH_GET(context.Context, *MSP_ADDON_LOGS_SEARCH_GET_Request) (*emptypb.Empty, error)
	// GET /api/log-analytics/{addon}/sequentialSearch
	MSP_ADDON_LOGS_SEARCH_SEQUENTIAL(context.Context, *MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request) (*emptypb.Empty, error)
	// GET /api/log-analytics/{addon}/statistic
	MSP_ADDON_LOGS_STATISTIC(context.Context, *MSP_ADDON_LOGS_STATISTIC_Request) (*emptypb.Empty, error)
}

// RegisterMspApmLogServiceHandler register MspApmLogServiceHandler to http.Router.
func RegisterMspApmLogServiceHandler(r http.Router, srv MspApmLogServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_MSP_ADDON_LOGS_AGGREGATION := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_AGGREGATION_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_AGGREGATION_Request))
		}
		var MSP_ADDON_LOGS_AGGREGATION_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_AGGREGATION_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_log_service", "MSP_ADDON_LOGS_AGGREGATION", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_AGGREGATION_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_AGGREGATION_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addon":
							in.Addon = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_DOWNLOAD := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_DOWNLOAD_Request))
		}
		var MSP_ADDON_LOGS_DOWNLOAD_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_DOWNLOAD_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_log_service", "MSP_ADDON_LOGS_DOWNLOAD", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_DOWNLOAD_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_DOWNLOAD_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addon":
							in.Addon = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_FIELDS := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_FIELDS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_FIELDS_Request))
		}
		var MSP_ADDON_LOGS_FIELDS_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_FIELDS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_log_service", "MSP_ADDON_LOGS_FIELDS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_FIELDS_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_FIELDS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addon":
							in.Addon = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_SEARCH_GET := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_SEARCH_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_SEARCH_GET_Request))
		}
		var MSP_ADDON_LOGS_SEARCH_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_SEARCH_GET_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_log_service", "MSP_ADDON_LOGS_SEARCH_GET", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_SEARCH_GET_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_SEARCH_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addon":
							in.Addon = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_SEARCH_SEQUENTIAL := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request))
		}
		var MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_log_service", "MSP_ADDON_LOGS_SEARCH_SEQUENTIAL", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addon":
							in.Addon = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_STATISTIC := func(method, path string, fn func(context.Context, *MSP_ADDON_LOGS_STATISTIC_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_ADDON_LOGS_STATISTIC_Request))
		}
		var MSP_ADDON_LOGS_STATISTIC_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_ADDON_LOGS_STATISTIC_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_log_service", "MSP_ADDON_LOGS_STATISTIC", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_ADDON_LOGS_STATISTIC_info)
				}
				r = r.WithContext(ctx)
				var in MSP_ADDON_LOGS_STATISTIC_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "addon":
							in.Addon = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_ADDON_LOGS_AGGREGATION("GET", "/api/log-analytics/{addon}/aggregation", srv.MSP_ADDON_LOGS_AGGREGATION)
	add_MSP_ADDON_LOGS_DOWNLOAD("GET", "/api/log-analytics/{addon}/download", srv.MSP_ADDON_LOGS_DOWNLOAD)
	add_MSP_ADDON_LOGS_FIELDS("GET", "/api/log-analytics/{addon}/fields", srv.MSP_ADDON_LOGS_FIELDS)
	add_MSP_ADDON_LOGS_SEARCH_GET("GET", "/api/log-analytics/{addon}/search", srv.MSP_ADDON_LOGS_SEARCH_GET)
	add_MSP_ADDON_LOGS_SEARCH_SEQUENTIAL("GET", "/api/log-analytics/{addon}/sequentialSearch", srv.MSP_ADDON_LOGS_SEARCH_SEQUENTIAL)
	add_MSP_ADDON_LOGS_STATISTIC("GET", "/api/log-analytics/{addon}/statistic", srv.MSP_ADDON_LOGS_STATISTIC)
}
