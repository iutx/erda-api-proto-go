// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: msp_apm_log_service.proto

package pb

import (
	url "net/url"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*MSP_ADDON_LOGS_AGGREGATION_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MSP_ADDON_LOGS_DOWNLOAD_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MSP_ADDON_LOGS_FIELDS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MSP_ADDON_LOGS_SEARCH_GET_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*MSP_ADDON_LOGS_STATISTIC_Request)(nil)

// MSP_ADDON_LOGS_AGGREGATION_Request implement urlenc.URLValuesUnmarshaler.
func (m *MSP_ADDON_LOGS_AGGREGATION_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addon":
				m.Addon = vals[0]
			}
		}
	}
	return nil
}

// MSP_ADDON_LOGS_DOWNLOAD_Request implement urlenc.URLValuesUnmarshaler.
func (m *MSP_ADDON_LOGS_DOWNLOAD_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addon":
				m.Addon = vals[0]
			}
		}
	}
	return nil
}

// MSP_ADDON_LOGS_FIELDS_Request implement urlenc.URLValuesUnmarshaler.
func (m *MSP_ADDON_LOGS_FIELDS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addon":
				m.Addon = vals[0]
			}
		}
	}
	return nil
}

// MSP_ADDON_LOGS_SEARCH_GET_Request implement urlenc.URLValuesUnmarshaler.
func (m *MSP_ADDON_LOGS_SEARCH_GET_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addon":
				m.Addon = vals[0]
			}
		}
	}
	return nil
}

// MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request implement urlenc.URLValuesUnmarshaler.
func (m *MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addon":
				m.Addon = vals[0]
			}
		}
	}
	return nil
}

// MSP_ADDON_LOGS_STATISTIC_Request implement urlenc.URLValuesUnmarshaler.
func (m *MSP_ADDON_LOGS_STATISTIC_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "addon":
				m.Addon = vals[0]
			}
		}
	}
	return nil
}
