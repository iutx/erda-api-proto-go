// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: msp_apm_log_service.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/msp/apm/log/service/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// MspApmLogService msp_apm_log_service.proto
	MspApmLogService() pb.MspApmLogServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		mspApmLogService: pb.NewMspApmLogServiceClient(cc),
	}
}

type serviceClients struct {
	mspApmLogService pb.MspApmLogServiceClient
}

func (c *serviceClients) MspApmLogService() pb.MspApmLogServiceClient {
	return c.mspApmLogService
}

type mspApmLogServiceWrapper struct {
	client pb.MspApmLogServiceClient
	opts   []grpc1.CallOption
}

func (s *mspApmLogServiceWrapper) MSP_ADDON_LOGS_AGGREGATION(ctx context.Context, req *pb.MSP_ADDON_LOGS_AGGREGATION_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_AGGREGATION(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmLogServiceWrapper) MSP_ADDON_LOGS_DOWNLOAD(ctx context.Context, req *pb.MSP_ADDON_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_DOWNLOAD(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmLogServiceWrapper) MSP_ADDON_LOGS_FIELDS(ctx context.Context, req *pb.MSP_ADDON_LOGS_FIELDS_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_FIELDS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmLogServiceWrapper) MSP_ADDON_LOGS_SEARCH_GET(ctx context.Context, req *pb.MSP_ADDON_LOGS_SEARCH_GET_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_SEARCH_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmLogServiceWrapper) MSP_ADDON_LOGS_SEARCH_SEQUENTIAL(ctx context.Context, req *pb.MSP_ADDON_LOGS_SEARCH_SEQUENTIAL_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_SEARCH_SEQUENTIAL(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmLogServiceWrapper) MSP_ADDON_LOGS_STATISTIC(ctx context.Context, req *pb.MSP_ADDON_LOGS_STATISTIC_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_STATISTIC(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
