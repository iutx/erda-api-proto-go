// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: msp_apm_exception.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/msp/apm/exception/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// MspApmException msp_apm_exception.proto
	MspApmException() pb.MspApmExceptionClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		mspApmException: pb.NewMspApmExceptionClient(cc),
	}
}

type serviceClients struct {
	mspApmException pb.MspApmExceptionClient
}

func (c *serviceClients) MspApmException() pb.MspApmExceptionClient {
	return c.mspApmException
}

type mspApmExceptionWrapper struct {
	client pb.MspApmExceptionClient
	opts   []grpc1.CallOption
}

func (s *mspApmExceptionWrapper) EXCEPTION_EVENT(ctx context.Context, req *pb.EXCEPTION_EVENT_Request) (*emptypb.Empty, error) {
	return s.client.EXCEPTION_EVENT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmExceptionWrapper) EXCEPTION_EVENT_ID_LIST(ctx context.Context, req *pb.EXCEPTION_EVENT_ID_LIST_Request) (*emptypb.Empty, error) {
	return s.client.EXCEPTION_EVENT_ID_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmExceptionWrapper) EXCEPTION_LIST(ctx context.Context, req *pb.EXCEPTION_LIST_Request) (*emptypb.Empty, error) {
	return s.client.EXCEPTION_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
