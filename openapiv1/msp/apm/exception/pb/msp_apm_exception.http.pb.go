// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: msp_apm_exception.proto

package pb

import (
	context "context"
	http1 "net/http"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// MspApmExceptionHandler is the server API for MspApmException service.
type MspApmExceptionHandler interface {
	// GET /api/msp/apm/exceptions/events
	EXCEPTION_EVENT(context.Context, *EXCEPTION_EVENT_Request) (*emptypb.Empty, error)
	// GET /api/msp/apm/exceptions/event-ids
	EXCEPTION_EVENT_ID_LIST(context.Context, *EXCEPTION_EVENT_ID_LIST_Request) (*emptypb.Empty, error)
	// GET /api/msp/apm/exceptions
	EXCEPTION_LIST(context.Context, *EXCEPTION_LIST_Request) (*emptypb.Empty, error)
}

// RegisterMspApmExceptionHandler register MspApmExceptionHandler to http.Router.
func RegisterMspApmExceptionHandler(r http.Router, srv MspApmExceptionHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_EXCEPTION_EVENT := func(method, path string, fn func(context.Context, *EXCEPTION_EVENT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*EXCEPTION_EVENT_Request))
		}
		var EXCEPTION_EVENT_info transport.ServiceInfo
		if h.Interceptor != nil {
			EXCEPTION_EVENT_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_exception", "EXCEPTION_EVENT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, EXCEPTION_EVENT_info)
				}
				r = r.WithContext(ctx)
				var in EXCEPTION_EVENT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_EXCEPTION_EVENT_ID_LIST := func(method, path string, fn func(context.Context, *EXCEPTION_EVENT_ID_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*EXCEPTION_EVENT_ID_LIST_Request))
		}
		var EXCEPTION_EVENT_ID_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			EXCEPTION_EVENT_ID_LIST_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_exception", "EXCEPTION_EVENT_ID_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, EXCEPTION_EVENT_ID_LIST_info)
				}
				r = r.WithContext(ctx)
				var in EXCEPTION_EVENT_ID_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_EXCEPTION_LIST := func(method, path string, fn func(context.Context, *EXCEPTION_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*EXCEPTION_LIST_Request))
		}
		var EXCEPTION_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			EXCEPTION_LIST_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_exception", "EXCEPTION_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, EXCEPTION_LIST_info)
				}
				r = r.WithContext(ctx)
				var in EXCEPTION_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_EXCEPTION_EVENT("GET", "/api/msp/apm/exceptions/events", srv.EXCEPTION_EVENT)
	add_EXCEPTION_EVENT_ID_LIST("GET", "/api/msp/apm/exceptions/event-ids", srv.EXCEPTION_EVENT_ID_LIST)
	add_EXCEPTION_LIST("GET", "/api/msp/apm/exceptions", srv.EXCEPTION_LIST)
}
