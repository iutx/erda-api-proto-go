// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: msp_apm_exception.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// MspApmExceptionClient is the client API for MspApmException service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MspApmExceptionClient interface {
	EXCEPTION_EVENT(ctx context.Context, in *EXCEPTION_EVENT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EXCEPTION_EVENT_ID_LIST(ctx context.Context, in *EXCEPTION_EVENT_ID_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EXCEPTION_LIST(ctx context.Context, in *EXCEPTION_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mspApmExceptionClient struct {
	cc grpc1.ClientConnInterface
}

func NewMspApmExceptionClient(cc grpc1.ClientConnInterface) MspApmExceptionClient {
	return &mspApmExceptionClient{cc}
}

func (c *mspApmExceptionClient) EXCEPTION_EVENT(ctx context.Context, in *EXCEPTION_EVENT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_exception/EXCEPTION_EVENT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmExceptionClient) EXCEPTION_EVENT_ID_LIST(ctx context.Context, in *EXCEPTION_EVENT_ID_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_exception/EXCEPTION_EVENT_ID_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmExceptionClient) EXCEPTION_LIST(ctx context.Context, in *EXCEPTION_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_exception/EXCEPTION_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MspApmExceptionServer is the server API for MspApmException service.
// All implementations should embed UnimplementedMspApmExceptionServer
// for forward compatibility
type MspApmExceptionServer interface {
	EXCEPTION_EVENT(context.Context, *EXCEPTION_EVENT_Request) (*emptypb.Empty, error)
	EXCEPTION_EVENT_ID_LIST(context.Context, *EXCEPTION_EVENT_ID_LIST_Request) (*emptypb.Empty, error)
	EXCEPTION_LIST(context.Context, *EXCEPTION_LIST_Request) (*emptypb.Empty, error)
}

// UnimplementedMspApmExceptionServer should be embedded to have forward compatible implementations.
type UnimplementedMspApmExceptionServer struct {
}

func (*UnimplementedMspApmExceptionServer) EXCEPTION_EVENT(context.Context, *EXCEPTION_EVENT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EXCEPTION_EVENT not implemented")
}
func (*UnimplementedMspApmExceptionServer) EXCEPTION_EVENT_ID_LIST(context.Context, *EXCEPTION_EVENT_ID_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EXCEPTION_EVENT_ID_LIST not implemented")
}
func (*UnimplementedMspApmExceptionServer) EXCEPTION_LIST(context.Context, *EXCEPTION_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EXCEPTION_LIST not implemented")
}

func RegisterMspApmExceptionServer(s grpc1.ServiceRegistrar, srv MspApmExceptionServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_MspApmException_serviceDesc(srv, opts...), srv)
}

var _MspApmException_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.msp.msp_apm_exception",
	HandlerType: (*MspApmExceptionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "msp_apm_exception.proto",
}

func _get_MspApmException_serviceDesc(srv MspApmExceptionServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_MspApmException_EXCEPTION_EVENT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.EXCEPTION_EVENT(ctx, req.(*EXCEPTION_EVENT_Request))
	}
	var _MspApmException_EXCEPTION_EVENT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmException_EXCEPTION_EVENT_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_exception", "EXCEPTION_EVENT", srv)
		_MspApmException_EXCEPTION_EVENT_Handler = h.Interceptor(_MspApmException_EXCEPTION_EVENT_Handler)
	}

	_MspApmException_EXCEPTION_EVENT_ID_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.EXCEPTION_EVENT_ID_LIST(ctx, req.(*EXCEPTION_EVENT_ID_LIST_Request))
	}
	var _MspApmException_EXCEPTION_EVENT_ID_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmException_EXCEPTION_EVENT_ID_LIST_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_exception", "EXCEPTION_EVENT_ID_LIST", srv)
		_MspApmException_EXCEPTION_EVENT_ID_LIST_Handler = h.Interceptor(_MspApmException_EXCEPTION_EVENT_ID_LIST_Handler)
	}

	_MspApmException_EXCEPTION_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.EXCEPTION_LIST(ctx, req.(*EXCEPTION_LIST_Request))
	}
	var _MspApmException_EXCEPTION_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmException_EXCEPTION_LIST_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_exception", "EXCEPTION_LIST", srv)
		_MspApmException_EXCEPTION_LIST_Handler = h.Interceptor(_MspApmException_EXCEPTION_LIST_Handler)
	}

	var serviceDesc = _MspApmException_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "EXCEPTION_EVENT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(EXCEPTION_EVENT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmExceptionServer).EXCEPTION_EVENT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmException_EXCEPTION_EVENT_info)
				}
				if interceptor == nil {
					return _MspApmException_EXCEPTION_EVENT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_exception/EXCEPTION_EVENT",
				}
				return interceptor(ctx, in, info, _MspApmException_EXCEPTION_EVENT_Handler)
			},
		},
		{
			MethodName: "EXCEPTION_EVENT_ID_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(EXCEPTION_EVENT_ID_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmExceptionServer).EXCEPTION_EVENT_ID_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmException_EXCEPTION_EVENT_ID_LIST_info)
				}
				if interceptor == nil {
					return _MspApmException_EXCEPTION_EVENT_ID_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_exception/EXCEPTION_EVENT_ID_LIST",
				}
				return interceptor(ctx, in, info, _MspApmException_EXCEPTION_EVENT_ID_LIST_Handler)
			},
		},
		{
			MethodName: "EXCEPTION_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(EXCEPTION_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmExceptionServer).EXCEPTION_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmException_EXCEPTION_LIST_info)
				}
				if interceptor == nil {
					return _MspApmException_EXCEPTION_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_exception/EXCEPTION_LIST",
				}
				return interceptor(ctx, in, info, _MspApmException_EXCEPTION_LIST_Handler)
			},
		},
	}
	return &serviceDesc
}
