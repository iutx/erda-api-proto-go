// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: msp_apm_exception.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterMspApmExceptionImp msp_apm_exception.proto
func RegisterMspApmExceptionImp(regester transport.Register, srv MspApmExceptionServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterMspApmExceptionHandler(regester, MspApmExceptionHandler(srv), _ops.HTTP...)
	RegisterMspApmExceptionServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.openapiv1.msp.MspApmException",
	)
}

var (
	mspApmExceptionClientType  = reflect.TypeOf((*MspApmExceptionClient)(nil)).Elem()
	mspApmExceptionServerType  = reflect.TypeOf((*MspApmExceptionServer)(nil)).Elem()
	mspApmExceptionHandlerType = reflect.TypeOf((*MspApmExceptionHandler)(nil)).Elem()
)

// MspApmExceptionClientType .
func MspApmExceptionClientType() reflect.Type { return mspApmExceptionClientType }

// MspApmExceptionServerType .
func MspApmExceptionServerType() reflect.Type { return mspApmExceptionServerType }

// MspApmExceptionHandlerType .
func MspApmExceptionHandlerType() reflect.Type { return mspApmExceptionHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		mspApmExceptionClientType,
		// server types
		mspApmExceptionServerType,
		// handler types
		mspApmExceptionHandlerType,
	}
}
