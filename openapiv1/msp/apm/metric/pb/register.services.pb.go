// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: msp_apm_metric.proto

package pb

import (
	reflect "reflect"

	transport "github.com/erda-project/erda-infra/pkg/transport"
)

// RegisterMspApmMetricImp msp_apm_metric.proto
func RegisterMspApmMetricImp(regester transport.Register, srv MspApmMetricServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterMspApmMetricHandler(regester, MspApmMetricHandler(srv), _ops.HTTP...)
	RegisterMspApmMetricServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.openapiv1.msp.MspApmMetric",
	)
}

var (
	mspApmMetricClientType  = reflect.TypeOf((*MspApmMetricClient)(nil)).Elem()
	mspApmMetricServerType  = reflect.TypeOf((*MspApmMetricServer)(nil)).Elem()
	mspApmMetricHandlerType = reflect.TypeOf((*MspApmMetricHandler)(nil)).Elem()
)

// MspApmMetricClientType .
func MspApmMetricClientType() reflect.Type { return mspApmMetricClientType }

// MspApmMetricServerType .
func MspApmMetricServerType() reflect.Type { return mspApmMetricServerType }

// MspApmMetricHandlerType .
func MspApmMetricHandlerType() reflect.Type { return mspApmMetricHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		mspApmMetricClientType,
		// server types
		mspApmMetricServerType,
		// handler types
		mspApmMetricHandlerType,
	}
}
