// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: msp_apm_metric.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GET_METRIC_GROUP_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GET_METRIC_GROUP_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GET_METRIC_GROUP_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GET_METRIC_GROUP_RequestMultiError, or nil if none found.
func (m *GET_METRIC_GROUP_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GET_METRIC_GROUP_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GET_METRIC_GROUP_RequestMultiError(errors)
	}

	return nil
}

// GET_METRIC_GROUP_RequestMultiError is an error wrapping multiple validation
// errors returned by GET_METRIC_GROUP_Request.ValidateAll() if the designated
// constraints aren't met.
type GET_METRIC_GROUP_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GET_METRIC_GROUP_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GET_METRIC_GROUP_RequestMultiError) AllErrors() []error { return m }

// GET_METRIC_GROUP_RequestValidationError is the validation error returned by
// GET_METRIC_GROUP_Request.Validate if the designated constraints aren't met.
type GET_METRIC_GROUP_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GET_METRIC_GROUP_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GET_METRIC_GROUP_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GET_METRIC_GROUP_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GET_METRIC_GROUP_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GET_METRIC_GROUP_RequestValidationError) ErrorName() string {
	return "GET_METRIC_GROUP_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GET_METRIC_GROUP_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGET_METRIC_GROUP_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GET_METRIC_GROUP_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GET_METRIC_GROUP_RequestValidationError{}

// Validate checks the field values on LIST_METRIC_GROUPS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LIST_METRIC_GROUPS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LIST_METRIC_GROUPS_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LIST_METRIC_GROUPS_RequestMultiError, or nil if none found.
func (m *LIST_METRIC_GROUPS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *LIST_METRIC_GROUPS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LIST_METRIC_GROUPS_RequestMultiError(errors)
	}

	return nil
}

// LIST_METRIC_GROUPS_RequestMultiError is an error wrapping multiple
// validation errors returned by LIST_METRIC_GROUPS_Request.ValidateAll() if
// the designated constraints aren't met.
type LIST_METRIC_GROUPS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LIST_METRIC_GROUPS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LIST_METRIC_GROUPS_RequestMultiError) AllErrors() []error { return m }

// LIST_METRIC_GROUPS_RequestValidationError is the validation error returned
// by LIST_METRIC_GROUPS_Request.Validate if the designated constraints aren't met.
type LIST_METRIC_GROUPS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LIST_METRIC_GROUPS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LIST_METRIC_GROUPS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LIST_METRIC_GROUPS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LIST_METRIC_GROUPS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LIST_METRIC_GROUPS_RequestValidationError) ErrorName() string {
	return "LIST_METRIC_GROUPS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e LIST_METRIC_GROUPS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLIST_METRIC_GROUPS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LIST_METRIC_GROUPS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LIST_METRIC_GROUPS_RequestValidationError{}

// Validate checks the field values on POST_QUERY_METRIC_AGGREGATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *POST_QUERY_METRIC_AGGREGATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on POST_QUERY_METRIC_AGGREGATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// POST_QUERY_METRIC_AGGREGATE_RequestMultiError, or nil if none found.
func (m *POST_QUERY_METRIC_AGGREGATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *POST_QUERY_METRIC_AGGREGATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for Aggregate

	if len(errors) > 0 {
		return POST_QUERY_METRIC_AGGREGATE_RequestMultiError(errors)
	}

	return nil
}

// POST_QUERY_METRIC_AGGREGATE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// POST_QUERY_METRIC_AGGREGATE_Request.ValidateAll() if the designated
// constraints aren't met.
type POST_QUERY_METRIC_AGGREGATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m POST_QUERY_METRIC_AGGREGATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m POST_QUERY_METRIC_AGGREGATE_RequestMultiError) AllErrors() []error { return m }

// POST_QUERY_METRIC_AGGREGATE_RequestValidationError is the validation error
// returned by POST_QUERY_METRIC_AGGREGATE_Request.Validate if the designated
// constraints aren't met.
type POST_QUERY_METRIC_AGGREGATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e POST_QUERY_METRIC_AGGREGATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e POST_QUERY_METRIC_AGGREGATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e POST_QUERY_METRIC_AGGREGATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e POST_QUERY_METRIC_AGGREGATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e POST_QUERY_METRIC_AGGREGATE_RequestValidationError) ErrorName() string {
	return "POST_QUERY_METRIC_AGGREGATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e POST_QUERY_METRIC_AGGREGATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPOST_QUERY_METRIC_AGGREGATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = POST_QUERY_METRIC_AGGREGATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = POST_QUERY_METRIC_AGGREGATE_RequestValidationError{}

// Validate checks the field values on POST_QUERY_METRIC_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *POST_QUERY_METRIC_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on POST_QUERY_METRIC_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// POST_QUERY_METRIC_RequestMultiError, or nil if none found.
func (m *POST_QUERY_METRIC_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *POST_QUERY_METRIC_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return POST_QUERY_METRIC_RequestMultiError(errors)
	}

	return nil
}

// POST_QUERY_METRIC_RequestMultiError is an error wrapping multiple validation
// errors returned by POST_QUERY_METRIC_Request.ValidateAll() if the
// designated constraints aren't met.
type POST_QUERY_METRIC_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m POST_QUERY_METRIC_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m POST_QUERY_METRIC_RequestMultiError) AllErrors() []error { return m }

// POST_QUERY_METRIC_RequestValidationError is the validation error returned by
// POST_QUERY_METRIC_Request.Validate if the designated constraints aren't met.
type POST_QUERY_METRIC_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e POST_QUERY_METRIC_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e POST_QUERY_METRIC_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e POST_QUERY_METRIC_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e POST_QUERY_METRIC_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e POST_QUERY_METRIC_RequestValidationError) ErrorName() string {
	return "POST_QUERY_METRIC_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e POST_QUERY_METRIC_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPOST_QUERY_METRIC_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = POST_QUERY_METRIC_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = POST_QUERY_METRIC_RequestValidationError{}

// Validate checks the field values on POST_TSQL_QUERY_METRIC_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *POST_TSQL_QUERY_METRIC_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on POST_TSQL_QUERY_METRIC_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// POST_TSQL_QUERY_METRIC_RequestMultiError, or nil if none found.
func (m *POST_TSQL_QUERY_METRIC_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *POST_TSQL_QUERY_METRIC_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return POST_TSQL_QUERY_METRIC_RequestMultiError(errors)
	}

	return nil
}

// POST_TSQL_QUERY_METRIC_RequestMultiError is an error wrapping multiple
// validation errors returned by POST_TSQL_QUERY_METRIC_Request.ValidateAll()
// if the designated constraints aren't met.
type POST_TSQL_QUERY_METRIC_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m POST_TSQL_QUERY_METRIC_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m POST_TSQL_QUERY_METRIC_RequestMultiError) AllErrors() []error { return m }

// POST_TSQL_QUERY_METRIC_RequestValidationError is the validation error
// returned by POST_TSQL_QUERY_METRIC_Request.Validate if the designated
// constraints aren't met.
type POST_TSQL_QUERY_METRIC_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e POST_TSQL_QUERY_METRIC_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e POST_TSQL_QUERY_METRIC_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e POST_TSQL_QUERY_METRIC_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e POST_TSQL_QUERY_METRIC_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e POST_TSQL_QUERY_METRIC_RequestValidationError) ErrorName() string {
	return "POST_TSQL_QUERY_METRIC_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e POST_TSQL_QUERY_METRIC_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPOST_TSQL_QUERY_METRIC_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = POST_TSQL_QUERY_METRIC_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = POST_TSQL_QUERY_METRIC_RequestValidationError{}

// Validate checks the field values on QUERY_METRIC_AGGREGATE_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QUERY_METRIC_AGGREGATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QUERY_METRIC_AGGREGATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QUERY_METRIC_AGGREGATE_RequestMultiError, or nil if none found.
func (m *QUERY_METRIC_AGGREGATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QUERY_METRIC_AGGREGATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for Aggregate

	if len(errors) > 0 {
		return QUERY_METRIC_AGGREGATE_RequestMultiError(errors)
	}

	return nil
}

// QUERY_METRIC_AGGREGATE_RequestMultiError is an error wrapping multiple
// validation errors returned by QUERY_METRIC_AGGREGATE_Request.ValidateAll()
// if the designated constraints aren't met.
type QUERY_METRIC_AGGREGATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QUERY_METRIC_AGGREGATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QUERY_METRIC_AGGREGATE_RequestMultiError) AllErrors() []error { return m }

// QUERY_METRIC_AGGREGATE_RequestValidationError is the validation error
// returned by QUERY_METRIC_AGGREGATE_Request.Validate if the designated
// constraints aren't met.
type QUERY_METRIC_AGGREGATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QUERY_METRIC_AGGREGATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QUERY_METRIC_AGGREGATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QUERY_METRIC_AGGREGATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QUERY_METRIC_AGGREGATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QUERY_METRIC_AGGREGATE_RequestValidationError) ErrorName() string {
	return "QUERY_METRIC_AGGREGATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QUERY_METRIC_AGGREGATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQUERY_METRIC_AGGREGATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QUERY_METRIC_AGGREGATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QUERY_METRIC_AGGREGATE_RequestValidationError{}

// Validate checks the field values on QUERY_METRIC_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QUERY_METRIC_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QUERY_METRIC_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QUERY_METRIC_RequestMultiError, or nil if none found.
func (m *QUERY_METRIC_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *QUERY_METRIC_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	if len(errors) > 0 {
		return QUERY_METRIC_RequestMultiError(errors)
	}

	return nil
}

// QUERY_METRIC_RequestMultiError is an error wrapping multiple validation
// errors returned by QUERY_METRIC_Request.ValidateAll() if the designated
// constraints aren't met.
type QUERY_METRIC_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QUERY_METRIC_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QUERY_METRIC_RequestMultiError) AllErrors() []error { return m }

// QUERY_METRIC_RequestValidationError is the validation error returned by
// QUERY_METRIC_Request.Validate if the designated constraints aren't met.
type QUERY_METRIC_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QUERY_METRIC_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QUERY_METRIC_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QUERY_METRIC_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QUERY_METRIC_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QUERY_METRIC_RequestValidationError) ErrorName() string {
	return "QUERY_METRIC_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e QUERY_METRIC_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQUERY_METRIC_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QUERY_METRIC_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QUERY_METRIC_RequestValidationError{}

// Validate checks the field values on TSQL_QUERY_METRIC_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TSQL_QUERY_METRIC_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TSQL_QUERY_METRIC_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TSQL_QUERY_METRIC_RequestMultiError, or nil if none found.
func (m *TSQL_QUERY_METRIC_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *TSQL_QUERY_METRIC_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TSQL_QUERY_METRIC_RequestMultiError(errors)
	}

	return nil
}

// TSQL_QUERY_METRIC_RequestMultiError is an error wrapping multiple validation
// errors returned by TSQL_QUERY_METRIC_Request.ValidateAll() if the
// designated constraints aren't met.
type TSQL_QUERY_METRIC_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TSQL_QUERY_METRIC_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TSQL_QUERY_METRIC_RequestMultiError) AllErrors() []error { return m }

// TSQL_QUERY_METRIC_RequestValidationError is the validation error returned by
// TSQL_QUERY_METRIC_Request.Validate if the designated constraints aren't met.
type TSQL_QUERY_METRIC_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TSQL_QUERY_METRIC_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TSQL_QUERY_METRIC_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TSQL_QUERY_METRIC_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TSQL_QUERY_METRIC_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TSQL_QUERY_METRIC_RequestValidationError) ErrorName() string {
	return "TSQL_QUERY_METRIC_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e TSQL_QUERY_METRIC_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTSQL_QUERY_METRIC_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TSQL_QUERY_METRIC_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TSQL_QUERY_METRIC_RequestValidationError{}
