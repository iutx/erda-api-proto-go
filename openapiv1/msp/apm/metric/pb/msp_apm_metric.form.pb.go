// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: msp_apm_metric.proto

package pb

import (
	url "net/url"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GET_METRIC_GROUP_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*LIST_METRIC_GROUPS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*POST_QUERY_METRIC_AGGREGATE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*POST_QUERY_METRIC_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*POST_TSQL_QUERY_METRIC_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QUERY_METRIC_AGGREGATE_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*QUERY_METRIC_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*TSQL_QUERY_METRIC_Request)(nil)

// GET_METRIC_GROUP_Request implement urlenc.URLValuesUnmarshaler.
func (m *GET_METRIC_GROUP_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// LIST_METRIC_GROUPS_Request implement urlenc.URLValuesUnmarshaler.
func (m *LIST_METRIC_GROUPS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// POST_QUERY_METRIC_AGGREGATE_Request implement urlenc.URLValuesUnmarshaler.
func (m *POST_QUERY_METRIC_AGGREGATE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				m.Scope = vals[0]
			case "aggregate":
				m.Aggregate = vals[0]
			}
		}
	}
	return nil
}

// POST_QUERY_METRIC_Request implement urlenc.URLValuesUnmarshaler.
func (m *POST_QUERY_METRIC_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				m.Scope = vals[0]
			}
		}
	}
	return nil
}

// POST_TSQL_QUERY_METRIC_Request implement urlenc.URLValuesUnmarshaler.
func (m *POST_TSQL_QUERY_METRIC_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// QUERY_METRIC_AGGREGATE_Request implement urlenc.URLValuesUnmarshaler.
func (m *QUERY_METRIC_AGGREGATE_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				m.Scope = vals[0]
			case "aggregate":
				m.Aggregate = vals[0]
			}
		}
	}
	return nil
}

// QUERY_METRIC_Request implement urlenc.URLValuesUnmarshaler.
func (m *QUERY_METRIC_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				m.Scope = vals[0]
			}
		}
	}
	return nil
}

// TSQL_QUERY_METRIC_Request implement urlenc.URLValuesUnmarshaler.
func (m *TSQL_QUERY_METRIC_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}
