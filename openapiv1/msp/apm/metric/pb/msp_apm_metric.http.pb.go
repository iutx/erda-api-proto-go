// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: msp_apm_metric.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// MspApmMetricHandler is the server API for MspApmMetric service.
type MspApmMetricHandler interface {
	// GET /api/tmc/metric/groups/{id}
	GET_METRIC_GROUP(context.Context, *GET_METRIC_GROUP_Request) (*emptypb.Empty, error)
	// GET /api/tmc/metric/groups
	LIST_METRIC_GROUPS(context.Context, *LIST_METRIC_GROUPS_Request) (*emptypb.Empty, error)
	// POST /api/tmc/metrics/{scope}
	POST_QUERY_METRIC(context.Context, *POST_QUERY_METRIC_Request) (*emptypb.Empty, error)
	// POST /api/tmc/metrics/{scope}/{aggregate}
	POST_QUERY_METRIC_AGGREGATE(context.Context, *POST_QUERY_METRIC_AGGREGATE_Request) (*emptypb.Empty, error)
	// POST /api/tmc/metrics-query
	POST_TSQL_QUERY_METRIC(context.Context, *POST_TSQL_QUERY_METRIC_Request) (*emptypb.Empty, error)
	// GET /api/tmc/metrics/{scope}
	QUERY_METRIC(context.Context, *QUERY_METRIC_Request) (*emptypb.Empty, error)
	// GET /api/tmc/metrics/{scope}/{aggregate}
	QUERY_METRIC_AGGREGATE(context.Context, *QUERY_METRIC_AGGREGATE_Request) (*emptypb.Empty, error)
	// GET /api/tmc/metrics-query
	TSQL_QUERY_METRIC(context.Context, *TSQL_QUERY_METRIC_Request) (*emptypb.Empty, error)
}

// RegisterMspApmMetricHandler register MspApmMetricHandler to http.Router.
func RegisterMspApmMetricHandler(r http.Router, srv MspApmMetricHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_GET_METRIC_GROUP := func(method, path string, fn func(context.Context, *GET_METRIC_GROUP_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GET_METRIC_GROUP_Request))
		}
		var GET_METRIC_GROUP_info transport.ServiceInfo
		if h.Interceptor != nil {
			GET_METRIC_GROUP_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "GET_METRIC_GROUP", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GET_METRIC_GROUP_info)
				}
				r = r.WithContext(ctx)
				var in GET_METRIC_GROUP_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							in.Id = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_LIST_METRIC_GROUPS := func(method, path string, fn func(context.Context, *LIST_METRIC_GROUPS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*LIST_METRIC_GROUPS_Request))
		}
		var LIST_METRIC_GROUPS_info transport.ServiceInfo
		if h.Interceptor != nil {
			LIST_METRIC_GROUPS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "LIST_METRIC_GROUPS", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, LIST_METRIC_GROUPS_info)
				}
				r = r.WithContext(ctx)
				var in LIST_METRIC_GROUPS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_POST_QUERY_METRIC := func(method, path string, fn func(context.Context, *POST_QUERY_METRIC_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*POST_QUERY_METRIC_Request))
		}
		var POST_QUERY_METRIC_info transport.ServiceInfo
		if h.Interceptor != nil {
			POST_QUERY_METRIC_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "POST_QUERY_METRIC", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, POST_QUERY_METRIC_info)
				}
				r = r.WithContext(ctx)
				var in POST_QUERY_METRIC_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "scope":
							in.Scope = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_POST_QUERY_METRIC_AGGREGATE := func(method, path string, fn func(context.Context, *POST_QUERY_METRIC_AGGREGATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*POST_QUERY_METRIC_AGGREGATE_Request))
		}
		var POST_QUERY_METRIC_AGGREGATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			POST_QUERY_METRIC_AGGREGATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "POST_QUERY_METRIC_AGGREGATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, POST_QUERY_METRIC_AGGREGATE_info)
				}
				r = r.WithContext(ctx)
				var in POST_QUERY_METRIC_AGGREGATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "scope":
							in.Scope = val
						case "aggregate":
							in.Aggregate = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_POST_TSQL_QUERY_METRIC := func(method, path string, fn func(context.Context, *POST_TSQL_QUERY_METRIC_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*POST_TSQL_QUERY_METRIC_Request))
		}
		var POST_TSQL_QUERY_METRIC_info transport.ServiceInfo
		if h.Interceptor != nil {
			POST_TSQL_QUERY_METRIC_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "POST_TSQL_QUERY_METRIC", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, POST_TSQL_QUERY_METRIC_info)
				}
				r = r.WithContext(ctx)
				var in POST_TSQL_QUERY_METRIC_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_QUERY_METRIC := func(method, path string, fn func(context.Context, *QUERY_METRIC_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*QUERY_METRIC_Request))
		}
		var QUERY_METRIC_info transport.ServiceInfo
		if h.Interceptor != nil {
			QUERY_METRIC_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "QUERY_METRIC", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, QUERY_METRIC_info)
				}
				r = r.WithContext(ctx)
				var in QUERY_METRIC_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "scope":
							in.Scope = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_QUERY_METRIC_AGGREGATE := func(method, path string, fn func(context.Context, *QUERY_METRIC_AGGREGATE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*QUERY_METRIC_AGGREGATE_Request))
		}
		var QUERY_METRIC_AGGREGATE_info transport.ServiceInfo
		if h.Interceptor != nil {
			QUERY_METRIC_AGGREGATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "QUERY_METRIC_AGGREGATE", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, QUERY_METRIC_AGGREGATE_info)
				}
				r = r.WithContext(ctx)
				var in QUERY_METRIC_AGGREGATE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "scope":
							in.Scope = val
						case "aggregate":
							in.Aggregate = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_TSQL_QUERY_METRIC := func(method, path string, fn func(context.Context, *TSQL_QUERY_METRIC_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*TSQL_QUERY_METRIC_Request))
		}
		var TSQL_QUERY_METRIC_info transport.ServiceInfo
		if h.Interceptor != nil {
			TSQL_QUERY_METRIC_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "TSQL_QUERY_METRIC", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, TSQL_QUERY_METRIC_info)
				}
				r = r.WithContext(ctx)
				var in TSQL_QUERY_METRIC_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GET_METRIC_GROUP("GET", "/api/tmc/metric/groups/{id}", srv.GET_METRIC_GROUP)
	add_LIST_METRIC_GROUPS("GET", "/api/tmc/metric/groups", srv.LIST_METRIC_GROUPS)
	add_POST_QUERY_METRIC("POST", "/api/tmc/metrics/{scope}", srv.POST_QUERY_METRIC)
	add_POST_QUERY_METRIC_AGGREGATE("POST", "/api/tmc/metrics/{scope}/{aggregate}", srv.POST_QUERY_METRIC_AGGREGATE)
	add_POST_TSQL_QUERY_METRIC("POST", "/api/tmc/metrics-query", srv.POST_TSQL_QUERY_METRIC)
	add_QUERY_METRIC("GET", "/api/tmc/metrics/{scope}", srv.QUERY_METRIC)
	add_QUERY_METRIC_AGGREGATE("GET", "/api/tmc/metrics/{scope}/{aggregate}", srv.QUERY_METRIC_AGGREGATE)
	add_TSQL_QUERY_METRIC("GET", "/api/tmc/metrics-query", srv.TSQL_QUERY_METRIC)
}
