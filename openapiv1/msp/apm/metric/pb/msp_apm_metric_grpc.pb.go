// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: msp_apm_metric.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// MspApmMetricClient is the client API for MspApmMetric service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MspApmMetricClient interface {
	GET_METRIC_GROUP(ctx context.Context, in *GET_METRIC_GROUP_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LIST_METRIC_GROUPS(ctx context.Context, in *LIST_METRIC_GROUPS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	POST_QUERY_METRIC(ctx context.Context, in *POST_QUERY_METRIC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	POST_QUERY_METRIC_AGGREGATE(ctx context.Context, in *POST_QUERY_METRIC_AGGREGATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	POST_TSQL_QUERY_METRIC(ctx context.Context, in *POST_TSQL_QUERY_METRIC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QUERY_METRIC(ctx context.Context, in *QUERY_METRIC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QUERY_METRIC_AGGREGATE(ctx context.Context, in *QUERY_METRIC_AGGREGATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TSQL_QUERY_METRIC(ctx context.Context, in *TSQL_QUERY_METRIC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mspApmMetricClient struct {
	cc grpc1.ClientConnInterface
}

func NewMspApmMetricClient(cc grpc1.ClientConnInterface) MspApmMetricClient {
	return &mspApmMetricClient{cc}
}

func (c *mspApmMetricClient) GET_METRIC_GROUP(ctx context.Context, in *GET_METRIC_GROUP_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_metric/GET_METRIC_GROUP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmMetricClient) LIST_METRIC_GROUPS(ctx context.Context, in *LIST_METRIC_GROUPS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_metric/LIST_METRIC_GROUPS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmMetricClient) POST_QUERY_METRIC(ctx context.Context, in *POST_QUERY_METRIC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_metric/POST_QUERY_METRIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmMetricClient) POST_QUERY_METRIC_AGGREGATE(ctx context.Context, in *POST_QUERY_METRIC_AGGREGATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_metric/POST_QUERY_METRIC_AGGREGATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmMetricClient) POST_TSQL_QUERY_METRIC(ctx context.Context, in *POST_TSQL_QUERY_METRIC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_metric/POST_TSQL_QUERY_METRIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmMetricClient) QUERY_METRIC(ctx context.Context, in *QUERY_METRIC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_metric/QUERY_METRIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmMetricClient) QUERY_METRIC_AGGREGATE(ctx context.Context, in *QUERY_METRIC_AGGREGATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_metric/QUERY_METRIC_AGGREGATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmMetricClient) TSQL_QUERY_METRIC(ctx context.Context, in *TSQL_QUERY_METRIC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_metric/TSQL_QUERY_METRIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MspApmMetricServer is the server API for MspApmMetric service.
// All implementations should embed UnimplementedMspApmMetricServer
// for forward compatibility
type MspApmMetricServer interface {
	GET_METRIC_GROUP(context.Context, *GET_METRIC_GROUP_Request) (*emptypb.Empty, error)
	LIST_METRIC_GROUPS(context.Context, *LIST_METRIC_GROUPS_Request) (*emptypb.Empty, error)
	POST_QUERY_METRIC(context.Context, *POST_QUERY_METRIC_Request) (*emptypb.Empty, error)
	POST_QUERY_METRIC_AGGREGATE(context.Context, *POST_QUERY_METRIC_AGGREGATE_Request) (*emptypb.Empty, error)
	POST_TSQL_QUERY_METRIC(context.Context, *POST_TSQL_QUERY_METRIC_Request) (*emptypb.Empty, error)
	QUERY_METRIC(context.Context, *QUERY_METRIC_Request) (*emptypb.Empty, error)
	QUERY_METRIC_AGGREGATE(context.Context, *QUERY_METRIC_AGGREGATE_Request) (*emptypb.Empty, error)
	TSQL_QUERY_METRIC(context.Context, *TSQL_QUERY_METRIC_Request) (*emptypb.Empty, error)
}

// UnimplementedMspApmMetricServer should be embedded to have forward compatible implementations.
type UnimplementedMspApmMetricServer struct {
}

func (*UnimplementedMspApmMetricServer) GET_METRIC_GROUP(context.Context, *GET_METRIC_GROUP_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GET_METRIC_GROUP not implemented")
}
func (*UnimplementedMspApmMetricServer) LIST_METRIC_GROUPS(context.Context, *LIST_METRIC_GROUPS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LIST_METRIC_GROUPS not implemented")
}
func (*UnimplementedMspApmMetricServer) POST_QUERY_METRIC(context.Context, *POST_QUERY_METRIC_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method POST_QUERY_METRIC not implemented")
}
func (*UnimplementedMspApmMetricServer) POST_QUERY_METRIC_AGGREGATE(context.Context, *POST_QUERY_METRIC_AGGREGATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method POST_QUERY_METRIC_AGGREGATE not implemented")
}
func (*UnimplementedMspApmMetricServer) POST_TSQL_QUERY_METRIC(context.Context, *POST_TSQL_QUERY_METRIC_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method POST_TSQL_QUERY_METRIC not implemented")
}
func (*UnimplementedMspApmMetricServer) QUERY_METRIC(context.Context, *QUERY_METRIC_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QUERY_METRIC not implemented")
}
func (*UnimplementedMspApmMetricServer) QUERY_METRIC_AGGREGATE(context.Context, *QUERY_METRIC_AGGREGATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QUERY_METRIC_AGGREGATE not implemented")
}
func (*UnimplementedMspApmMetricServer) TSQL_QUERY_METRIC(context.Context, *TSQL_QUERY_METRIC_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSQL_QUERY_METRIC not implemented")
}

func RegisterMspApmMetricServer(s grpc1.ServiceRegistrar, srv MspApmMetricServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_MspApmMetric_serviceDesc(srv, opts...), srv)
}

var _MspApmMetric_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.msp.msp_apm_metric",
	HandlerType: (*MspApmMetricServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "msp_apm_metric.proto",
}

func _get_MspApmMetric_serviceDesc(srv MspApmMetricServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_MspApmMetric_GET_METRIC_GROUP_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GET_METRIC_GROUP(ctx, req.(*GET_METRIC_GROUP_Request))
	}
	var _MspApmMetric_GET_METRIC_GROUP_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmMetric_GET_METRIC_GROUP_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "GET_METRIC_GROUP", srv)
		_MspApmMetric_GET_METRIC_GROUP_Handler = h.Interceptor(_MspApmMetric_GET_METRIC_GROUP_Handler)
	}

	_MspApmMetric_LIST_METRIC_GROUPS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.LIST_METRIC_GROUPS(ctx, req.(*LIST_METRIC_GROUPS_Request))
	}
	var _MspApmMetric_LIST_METRIC_GROUPS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmMetric_LIST_METRIC_GROUPS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "LIST_METRIC_GROUPS", srv)
		_MspApmMetric_LIST_METRIC_GROUPS_Handler = h.Interceptor(_MspApmMetric_LIST_METRIC_GROUPS_Handler)
	}

	_MspApmMetric_POST_QUERY_METRIC_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.POST_QUERY_METRIC(ctx, req.(*POST_QUERY_METRIC_Request))
	}
	var _MspApmMetric_POST_QUERY_METRIC_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmMetric_POST_QUERY_METRIC_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "POST_QUERY_METRIC", srv)
		_MspApmMetric_POST_QUERY_METRIC_Handler = h.Interceptor(_MspApmMetric_POST_QUERY_METRIC_Handler)
	}

	_MspApmMetric_POST_QUERY_METRIC_AGGREGATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.POST_QUERY_METRIC_AGGREGATE(ctx, req.(*POST_QUERY_METRIC_AGGREGATE_Request))
	}
	var _MspApmMetric_POST_QUERY_METRIC_AGGREGATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmMetric_POST_QUERY_METRIC_AGGREGATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "POST_QUERY_METRIC_AGGREGATE", srv)
		_MspApmMetric_POST_QUERY_METRIC_AGGREGATE_Handler = h.Interceptor(_MspApmMetric_POST_QUERY_METRIC_AGGREGATE_Handler)
	}

	_MspApmMetric_POST_TSQL_QUERY_METRIC_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.POST_TSQL_QUERY_METRIC(ctx, req.(*POST_TSQL_QUERY_METRIC_Request))
	}
	var _MspApmMetric_POST_TSQL_QUERY_METRIC_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmMetric_POST_TSQL_QUERY_METRIC_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "POST_TSQL_QUERY_METRIC", srv)
		_MspApmMetric_POST_TSQL_QUERY_METRIC_Handler = h.Interceptor(_MspApmMetric_POST_TSQL_QUERY_METRIC_Handler)
	}

	_MspApmMetric_QUERY_METRIC_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QUERY_METRIC(ctx, req.(*QUERY_METRIC_Request))
	}
	var _MspApmMetric_QUERY_METRIC_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmMetric_QUERY_METRIC_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "QUERY_METRIC", srv)
		_MspApmMetric_QUERY_METRIC_Handler = h.Interceptor(_MspApmMetric_QUERY_METRIC_Handler)
	}

	_MspApmMetric_QUERY_METRIC_AGGREGATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QUERY_METRIC_AGGREGATE(ctx, req.(*QUERY_METRIC_AGGREGATE_Request))
	}
	var _MspApmMetric_QUERY_METRIC_AGGREGATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmMetric_QUERY_METRIC_AGGREGATE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "QUERY_METRIC_AGGREGATE", srv)
		_MspApmMetric_QUERY_METRIC_AGGREGATE_Handler = h.Interceptor(_MspApmMetric_QUERY_METRIC_AGGREGATE_Handler)
	}

	_MspApmMetric_TSQL_QUERY_METRIC_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.TSQL_QUERY_METRIC(ctx, req.(*TSQL_QUERY_METRIC_Request))
	}
	var _MspApmMetric_TSQL_QUERY_METRIC_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmMetric_TSQL_QUERY_METRIC_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_metric", "TSQL_QUERY_METRIC", srv)
		_MspApmMetric_TSQL_QUERY_METRIC_Handler = h.Interceptor(_MspApmMetric_TSQL_QUERY_METRIC_Handler)
	}

	var serviceDesc = _MspApmMetric_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GET_METRIC_GROUP",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GET_METRIC_GROUP_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmMetricServer).GET_METRIC_GROUP(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmMetric_GET_METRIC_GROUP_info)
				}
				if interceptor == nil {
					return _MspApmMetric_GET_METRIC_GROUP_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_metric/GET_METRIC_GROUP",
				}
				return interceptor(ctx, in, info, _MspApmMetric_GET_METRIC_GROUP_Handler)
			},
		},
		{
			MethodName: "LIST_METRIC_GROUPS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(LIST_METRIC_GROUPS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmMetricServer).LIST_METRIC_GROUPS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmMetric_LIST_METRIC_GROUPS_info)
				}
				if interceptor == nil {
					return _MspApmMetric_LIST_METRIC_GROUPS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_metric/LIST_METRIC_GROUPS",
				}
				return interceptor(ctx, in, info, _MspApmMetric_LIST_METRIC_GROUPS_Handler)
			},
		},
		{
			MethodName: "POST_QUERY_METRIC",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(POST_QUERY_METRIC_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmMetricServer).POST_QUERY_METRIC(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmMetric_POST_QUERY_METRIC_info)
				}
				if interceptor == nil {
					return _MspApmMetric_POST_QUERY_METRIC_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_metric/POST_QUERY_METRIC",
				}
				return interceptor(ctx, in, info, _MspApmMetric_POST_QUERY_METRIC_Handler)
			},
		},
		{
			MethodName: "POST_QUERY_METRIC_AGGREGATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(POST_QUERY_METRIC_AGGREGATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmMetricServer).POST_QUERY_METRIC_AGGREGATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmMetric_POST_QUERY_METRIC_AGGREGATE_info)
				}
				if interceptor == nil {
					return _MspApmMetric_POST_QUERY_METRIC_AGGREGATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_metric/POST_QUERY_METRIC_AGGREGATE",
				}
				return interceptor(ctx, in, info, _MspApmMetric_POST_QUERY_METRIC_AGGREGATE_Handler)
			},
		},
		{
			MethodName: "POST_TSQL_QUERY_METRIC",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(POST_TSQL_QUERY_METRIC_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmMetricServer).POST_TSQL_QUERY_METRIC(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmMetric_POST_TSQL_QUERY_METRIC_info)
				}
				if interceptor == nil {
					return _MspApmMetric_POST_TSQL_QUERY_METRIC_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_metric/POST_TSQL_QUERY_METRIC",
				}
				return interceptor(ctx, in, info, _MspApmMetric_POST_TSQL_QUERY_METRIC_Handler)
			},
		},
		{
			MethodName: "QUERY_METRIC",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QUERY_METRIC_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmMetricServer).QUERY_METRIC(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmMetric_QUERY_METRIC_info)
				}
				if interceptor == nil {
					return _MspApmMetric_QUERY_METRIC_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_metric/QUERY_METRIC",
				}
				return interceptor(ctx, in, info, _MspApmMetric_QUERY_METRIC_Handler)
			},
		},
		{
			MethodName: "QUERY_METRIC_AGGREGATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QUERY_METRIC_AGGREGATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmMetricServer).QUERY_METRIC_AGGREGATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmMetric_QUERY_METRIC_AGGREGATE_info)
				}
				if interceptor == nil {
					return _MspApmMetric_QUERY_METRIC_AGGREGATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_metric/QUERY_METRIC_AGGREGATE",
				}
				return interceptor(ctx, in, info, _MspApmMetric_QUERY_METRIC_AGGREGATE_Handler)
			},
		},
		{
			MethodName: "TSQL_QUERY_METRIC",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(TSQL_QUERY_METRIC_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmMetricServer).TSQL_QUERY_METRIC(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmMetric_TSQL_QUERY_METRIC_info)
				}
				if interceptor == nil {
					return _MspApmMetric_TSQL_QUERY_METRIC_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_metric/TSQL_QUERY_METRIC",
				}
				return interceptor(ctx, in, info, _MspApmMetric_TSQL_QUERY_METRIC_Handler)
			},
		},
	}
	return &serviceDesc
}
