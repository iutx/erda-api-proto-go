// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: msp_apm_metric.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/msp/apm/metric/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// MspApmMetric msp_apm_metric.proto
	MspApmMetric() pb.MspApmMetricClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		mspApmMetric: pb.NewMspApmMetricClient(cc),
	}
}

type serviceClients struct {
	mspApmMetric pb.MspApmMetricClient
}

func (c *serviceClients) MspApmMetric() pb.MspApmMetricClient {
	return c.mspApmMetric
}

type mspApmMetricWrapper struct {
	client pb.MspApmMetricClient
	opts   []grpc1.CallOption
}

func (s *mspApmMetricWrapper) GET_METRIC_GROUP(ctx context.Context, req *pb.GET_METRIC_GROUP_Request) (*emptypb.Empty, error) {
	return s.client.GET_METRIC_GROUP(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmMetricWrapper) LIST_METRIC_GROUPS(ctx context.Context, req *pb.LIST_METRIC_GROUPS_Request) (*emptypb.Empty, error) {
	return s.client.LIST_METRIC_GROUPS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmMetricWrapper) POST_QUERY_METRIC(ctx context.Context, req *pb.POST_QUERY_METRIC_Request) (*emptypb.Empty, error) {
	return s.client.POST_QUERY_METRIC(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmMetricWrapper) POST_QUERY_METRIC_AGGREGATE(ctx context.Context, req *pb.POST_QUERY_METRIC_AGGREGATE_Request) (*emptypb.Empty, error) {
	return s.client.POST_QUERY_METRIC_AGGREGATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmMetricWrapper) POST_TSQL_QUERY_METRIC(ctx context.Context, req *pb.POST_TSQL_QUERY_METRIC_Request) (*emptypb.Empty, error) {
	return s.client.POST_TSQL_QUERY_METRIC(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmMetricWrapper) QUERY_METRIC(ctx context.Context, req *pb.QUERY_METRIC_Request) (*emptypb.Empty, error) {
	return s.client.QUERY_METRIC(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmMetricWrapper) QUERY_METRIC_AGGREGATE(ctx context.Context, req *pb.QUERY_METRIC_AGGREGATE_Request) (*emptypb.Empty, error) {
	return s.client.QUERY_METRIC_AGGREGATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmMetricWrapper) TSQL_QUERY_METRIC(ctx context.Context, req *pb.TSQL_QUERY_METRIC_Request) (*emptypb.Empty, error) {
	return s.client.TSQL_QUERY_METRIC(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
