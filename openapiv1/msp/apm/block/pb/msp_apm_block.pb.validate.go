// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: msp_apm_block.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CREATE_BLOCK_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CREATE_BLOCK_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CREATE_BLOCK_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CREATE_BLOCK_RequestMultiError, or nil if none found.
func (m *CREATE_BLOCK_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CREATE_BLOCK_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CREATE_BLOCK_RequestMultiError(errors)
	}

	return nil
}

// CREATE_BLOCK_RequestMultiError is an error wrapping multiple validation
// errors returned by CREATE_BLOCK_Request.ValidateAll() if the designated
// constraints aren't met.
type CREATE_BLOCK_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CREATE_BLOCK_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CREATE_BLOCK_RequestMultiError) AllErrors() []error { return m }

// CREATE_BLOCK_RequestValidationError is the validation error returned by
// CREATE_BLOCK_Request.Validate if the designated constraints aren't met.
type CREATE_BLOCK_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CREATE_BLOCK_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CREATE_BLOCK_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CREATE_BLOCK_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CREATE_BLOCK_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CREATE_BLOCK_RequestValidationError) ErrorName() string {
	return "CREATE_BLOCK_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CREATE_BLOCK_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCREATE_BLOCK_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CREATE_BLOCK_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CREATE_BLOCK_RequestValidationError{}

// Validate checks the field values on DELETE_BLOCK_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DELETE_BLOCK_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DELETE_BLOCK_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DELETE_BLOCK_RequestMultiError, or nil if none found.
func (m *DELETE_BLOCK_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DELETE_BLOCK_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DELETE_BLOCK_RequestMultiError(errors)
	}

	return nil
}

// DELETE_BLOCK_RequestMultiError is an error wrapping multiple validation
// errors returned by DELETE_BLOCK_Request.ValidateAll() if the designated
// constraints aren't met.
type DELETE_BLOCK_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DELETE_BLOCK_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DELETE_BLOCK_RequestMultiError) AllErrors() []error { return m }

// DELETE_BLOCK_RequestValidationError is the validation error returned by
// DELETE_BLOCK_Request.Validate if the designated constraints aren't met.
type DELETE_BLOCK_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DELETE_BLOCK_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DELETE_BLOCK_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DELETE_BLOCK_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DELETE_BLOCK_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DELETE_BLOCK_RequestValidationError) ErrorName() string {
	return "DELETE_BLOCK_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DELETE_BLOCK_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDELETE_BLOCK_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DELETE_BLOCK_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DELETE_BLOCK_RequestValidationError{}

// Validate checks the field values on GET_BLOCK_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GET_BLOCK_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GET_BLOCK_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GET_BLOCK_RequestMultiError, or nil if none found.
func (m *GET_BLOCK_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GET_BLOCK_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GET_BLOCK_RequestMultiError(errors)
	}

	return nil
}

// GET_BLOCK_RequestMultiError is an error wrapping multiple validation errors
// returned by GET_BLOCK_Request.ValidateAll() if the designated constraints
// aren't met.
type GET_BLOCK_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GET_BLOCK_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GET_BLOCK_RequestMultiError) AllErrors() []error { return m }

// GET_BLOCK_RequestValidationError is the validation error returned by
// GET_BLOCK_Request.Validate if the designated constraints aren't met.
type GET_BLOCK_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GET_BLOCK_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GET_BLOCK_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GET_BLOCK_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GET_BLOCK_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GET_BLOCK_RequestValidationError) ErrorName() string {
	return "GET_BLOCK_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GET_BLOCK_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGET_BLOCK_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GET_BLOCK_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GET_BLOCK_RequestValidationError{}

// Validate checks the field values on LIST_BLOCKS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LIST_BLOCKS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LIST_BLOCKS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LIST_BLOCKS_RequestMultiError, or nil if none found.
func (m *LIST_BLOCKS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *LIST_BLOCKS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LIST_BLOCKS_RequestMultiError(errors)
	}

	return nil
}

// LIST_BLOCKS_RequestMultiError is an error wrapping multiple validation
// errors returned by LIST_BLOCKS_Request.ValidateAll() if the designated
// constraints aren't met.
type LIST_BLOCKS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LIST_BLOCKS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LIST_BLOCKS_RequestMultiError) AllErrors() []error { return m }

// LIST_BLOCKS_RequestValidationError is the validation error returned by
// LIST_BLOCKS_Request.Validate if the designated constraints aren't met.
type LIST_BLOCKS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LIST_BLOCKS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LIST_BLOCKS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LIST_BLOCKS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LIST_BLOCKS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LIST_BLOCKS_RequestValidationError) ErrorName() string {
	return "LIST_BLOCKS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e LIST_BLOCKS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLIST_BLOCKS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LIST_BLOCKS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LIST_BLOCKS_RequestValidationError{}

// Validate checks the field values on TMC_METRIC_DASHBOARD_UPDATE_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TMC_METRIC_DASHBOARD_UPDATE_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TMC_METRIC_DASHBOARD_UPDATE_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TMC_METRIC_DASHBOARD_UPDATE_RequestMultiError, or nil if none found.
func (m *TMC_METRIC_DASHBOARD_UPDATE_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *TMC_METRIC_DASHBOARD_UPDATE_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return TMC_METRIC_DASHBOARD_UPDATE_RequestMultiError(errors)
	}

	return nil
}

// TMC_METRIC_DASHBOARD_UPDATE_RequestMultiError is an error wrapping multiple
// validation errors returned by
// TMC_METRIC_DASHBOARD_UPDATE_Request.ValidateAll() if the designated
// constraints aren't met.
type TMC_METRIC_DASHBOARD_UPDATE_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TMC_METRIC_DASHBOARD_UPDATE_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TMC_METRIC_DASHBOARD_UPDATE_RequestMultiError) AllErrors() []error { return m }

// TMC_METRIC_DASHBOARD_UPDATE_RequestValidationError is the validation error
// returned by TMC_METRIC_DASHBOARD_UPDATE_Request.Validate if the designated
// constraints aren't met.
type TMC_METRIC_DASHBOARD_UPDATE_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TMC_METRIC_DASHBOARD_UPDATE_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TMC_METRIC_DASHBOARD_UPDATE_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TMC_METRIC_DASHBOARD_UPDATE_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TMC_METRIC_DASHBOARD_UPDATE_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TMC_METRIC_DASHBOARD_UPDATE_RequestValidationError) ErrorName() string {
	return "TMC_METRIC_DASHBOARD_UPDATE_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e TMC_METRIC_DASHBOARD_UPDATE_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTMC_METRIC_DASHBOARD_UPDATE_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TMC_METRIC_DASHBOARD_UPDATE_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TMC_METRIC_DASHBOARD_UPDATE_RequestValidationError{}
