// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: msp_apm_trace.proto

package pb

import (
	context "context"
	http1 "net/http"
	strings "strings"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// MspApmTraceHandler is the server API for MspApmTrace service.
type MspApmTraceHandler interface {
	// GET /api/msp/apm/traces/{traceID}/spans
	GET_SPANS(context.Context, *GET_SPANS_Request) (*emptypb.Empty, error)
	// GET /api/msp/apm/trace/conditions
	GET_TRACE_CONDITIONS_LIST(context.Context, *GET_TRACE_CONDITIONS_LIST_Request) (*emptypb.Empty, error)
	// GET /api/trace-requests/{requestId}
	GET_TRACE_DEBUG_HISTORIES(context.Context, *GET_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error)
	// GET /api/trace-requests/{requestId}/status
	GET_TRACE_DEBUG_HISTORY_STATUS(context.Context, *GET_TRACE_DEBUG_HISTORY_STATUS_Request) (*emptypb.Empty, error)
	// GET /api/msp/apm/traces
	GET_TRACE_LIST(context.Context, *GET_TRACE_LIST_Request) (*emptypb.Empty, error)
	// GET /api/trace-requests
	LIST_TRACE_DEBUG_HISTORIES(context.Context, *LIST_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error)
	// POST /api/trace-requests
	POST_TRACE_DEBUG_HISTORIES(context.Context, *POST_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error)
	// PUT /api/trace-requests/{requestId}/actions/cancel
	PUT_TRACE_DEBUG_HISTORY_STOP(context.Context, *PUT_TRACE_DEBUG_HISTORY_STOP_Request) (*emptypb.Empty, error)
}

// RegisterMspApmTraceHandler register MspApmTraceHandler to http.Router.
func RegisterMspApmTraceHandler(r http.Router, srv MspApmTraceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_GET_SPANS := func(method, path string, fn func(context.Context, *GET_SPANS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GET_SPANS_Request))
		}
		var GET_SPANS_info transport.ServiceInfo
		if h.Interceptor != nil {
			GET_SPANS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "GET_SPANS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GET_SPANS_info)
				}
				r = r.WithContext(ctx)
				var in GET_SPANS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "traceID":
							in.TraceID = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GET_TRACE_CONDITIONS_LIST := func(method, path string, fn func(context.Context, *GET_TRACE_CONDITIONS_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GET_TRACE_CONDITIONS_LIST_Request))
		}
		var GET_TRACE_CONDITIONS_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			GET_TRACE_CONDITIONS_LIST_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "GET_TRACE_CONDITIONS_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GET_TRACE_CONDITIONS_LIST_info)
				}
				r = r.WithContext(ctx)
				var in GET_TRACE_CONDITIONS_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GET_TRACE_DEBUG_HISTORIES := func(method, path string, fn func(context.Context, *GET_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GET_TRACE_DEBUG_HISTORIES_Request))
		}
		var GET_TRACE_DEBUG_HISTORIES_info transport.ServiceInfo
		if h.Interceptor != nil {
			GET_TRACE_DEBUG_HISTORIES_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "GET_TRACE_DEBUG_HISTORIES", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GET_TRACE_DEBUG_HISTORIES_info)
				}
				r = r.WithContext(ctx)
				var in GET_TRACE_DEBUG_HISTORIES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "requestId":
							in.RequestId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GET_TRACE_DEBUG_HISTORY_STATUS := func(method, path string, fn func(context.Context, *GET_TRACE_DEBUG_HISTORY_STATUS_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GET_TRACE_DEBUG_HISTORY_STATUS_Request))
		}
		var GET_TRACE_DEBUG_HISTORY_STATUS_info transport.ServiceInfo
		if h.Interceptor != nil {
			GET_TRACE_DEBUG_HISTORY_STATUS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "GET_TRACE_DEBUG_HISTORY_STATUS", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GET_TRACE_DEBUG_HISTORY_STATUS_info)
				}
				r = r.WithContext(ctx)
				var in GET_TRACE_DEBUG_HISTORY_STATUS_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "requestId":
							in.RequestId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GET_TRACE_LIST := func(method, path string, fn func(context.Context, *GET_TRACE_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*GET_TRACE_LIST_Request))
		}
		var GET_TRACE_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			GET_TRACE_LIST_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "GET_TRACE_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GET_TRACE_LIST_info)
				}
				r = r.WithContext(ctx)
				var in GET_TRACE_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_LIST_TRACE_DEBUG_HISTORIES := func(method, path string, fn func(context.Context, *LIST_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*LIST_TRACE_DEBUG_HISTORIES_Request))
		}
		var LIST_TRACE_DEBUG_HISTORIES_info transport.ServiceInfo
		if h.Interceptor != nil {
			LIST_TRACE_DEBUG_HISTORIES_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "LIST_TRACE_DEBUG_HISTORIES", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, LIST_TRACE_DEBUG_HISTORIES_info)
				}
				r = r.WithContext(ctx)
				var in LIST_TRACE_DEBUG_HISTORIES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_POST_TRACE_DEBUG_HISTORIES := func(method, path string, fn func(context.Context, *POST_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*POST_TRACE_DEBUG_HISTORIES_Request))
		}
		var POST_TRACE_DEBUG_HISTORIES_info transport.ServiceInfo
		if h.Interceptor != nil {
			POST_TRACE_DEBUG_HISTORIES_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "POST_TRACE_DEBUG_HISTORIES", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, POST_TRACE_DEBUG_HISTORIES_info)
				}
				r = r.WithContext(ctx)
				var in POST_TRACE_DEBUG_HISTORIES_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_PUT_TRACE_DEBUG_HISTORY_STOP := func(method, path string, fn func(context.Context, *PUT_TRACE_DEBUG_HISTORY_STOP_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*PUT_TRACE_DEBUG_HISTORY_STOP_Request))
		}
		var PUT_TRACE_DEBUG_HISTORY_STOP_info transport.ServiceInfo
		if h.Interceptor != nil {
			PUT_TRACE_DEBUG_HISTORY_STOP_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "PUT_TRACE_DEBUG_HISTORY_STOP", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, PUT_TRACE_DEBUG_HISTORY_STOP_info)
				}
				r = r.WithContext(ctx)
				var in PUT_TRACE_DEBUG_HISTORY_STOP_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "requestId":
							in.RequestId = val
						}
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GET_SPANS("GET", "/api/msp/apm/traces/{traceID}/spans", srv.GET_SPANS)
	add_GET_TRACE_CONDITIONS_LIST("GET", "/api/msp/apm/trace/conditions", srv.GET_TRACE_CONDITIONS_LIST)
	add_GET_TRACE_DEBUG_HISTORIES("GET", "/api/trace-requests/{requestId}", srv.GET_TRACE_DEBUG_HISTORIES)
	add_GET_TRACE_DEBUG_HISTORY_STATUS("GET", "/api/trace-requests/{requestId}/status", srv.GET_TRACE_DEBUG_HISTORY_STATUS)
	add_GET_TRACE_LIST("GET", "/api/msp/apm/traces", srv.GET_TRACE_LIST)
	add_LIST_TRACE_DEBUG_HISTORIES("GET", "/api/trace-requests", srv.LIST_TRACE_DEBUG_HISTORIES)
	add_POST_TRACE_DEBUG_HISTORIES("POST", "/api/trace-requests", srv.POST_TRACE_DEBUG_HISTORIES)
	add_PUT_TRACE_DEBUG_HISTORY_STOP("PUT", "/api/trace-requests/{requestId}/actions/cancel", srv.PUT_TRACE_DEBUG_HISTORY_STOP)
}
