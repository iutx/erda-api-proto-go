// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: msp_apm_trace.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// MspApmTraceClient is the client API for MspApmTrace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MspApmTraceClient interface {
	GET_SPANS(ctx context.Context, in *GET_SPANS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GET_TRACE_CONDITIONS_LIST(ctx context.Context, in *GET_TRACE_CONDITIONS_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GET_TRACE_DEBUG_HISTORIES(ctx context.Context, in *GET_TRACE_DEBUG_HISTORIES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GET_TRACE_DEBUG_HISTORY_STATUS(ctx context.Context, in *GET_TRACE_DEBUG_HISTORY_STATUS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GET_TRACE_LIST(ctx context.Context, in *GET_TRACE_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LIST_TRACE_DEBUG_HISTORIES(ctx context.Context, in *LIST_TRACE_DEBUG_HISTORIES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	POST_TRACE_DEBUG_HISTORIES(ctx context.Context, in *POST_TRACE_DEBUG_HISTORIES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PUT_TRACE_DEBUG_HISTORY_STOP(ctx context.Context, in *PUT_TRACE_DEBUG_HISTORY_STOP_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mspApmTraceClient struct {
	cc grpc1.ClientConnInterface
}

func NewMspApmTraceClient(cc grpc1.ClientConnInterface) MspApmTraceClient {
	return &mspApmTraceClient{cc}
}

func (c *mspApmTraceClient) GET_SPANS(ctx context.Context, in *GET_SPANS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_trace/GET_SPANS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmTraceClient) GET_TRACE_CONDITIONS_LIST(ctx context.Context, in *GET_TRACE_CONDITIONS_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_trace/GET_TRACE_CONDITIONS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmTraceClient) GET_TRACE_DEBUG_HISTORIES(ctx context.Context, in *GET_TRACE_DEBUG_HISTORIES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_trace/GET_TRACE_DEBUG_HISTORIES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmTraceClient) GET_TRACE_DEBUG_HISTORY_STATUS(ctx context.Context, in *GET_TRACE_DEBUG_HISTORY_STATUS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_trace/GET_TRACE_DEBUG_HISTORY_STATUS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmTraceClient) GET_TRACE_LIST(ctx context.Context, in *GET_TRACE_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_trace/GET_TRACE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmTraceClient) LIST_TRACE_DEBUG_HISTORIES(ctx context.Context, in *LIST_TRACE_DEBUG_HISTORIES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_trace/LIST_TRACE_DEBUG_HISTORIES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmTraceClient) POST_TRACE_DEBUG_HISTORIES(ctx context.Context, in *POST_TRACE_DEBUG_HISTORIES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_trace/POST_TRACE_DEBUG_HISTORIES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspApmTraceClient) PUT_TRACE_DEBUG_HISTORY_STOP(ctx context.Context, in *PUT_TRACE_DEBUG_HISTORY_STOP_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_apm_trace/PUT_TRACE_DEBUG_HISTORY_STOP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MspApmTraceServer is the server API for MspApmTrace service.
// All implementations should embed UnimplementedMspApmTraceServer
// for forward compatibility
type MspApmTraceServer interface {
	GET_SPANS(context.Context, *GET_SPANS_Request) (*emptypb.Empty, error)
	GET_TRACE_CONDITIONS_LIST(context.Context, *GET_TRACE_CONDITIONS_LIST_Request) (*emptypb.Empty, error)
	GET_TRACE_DEBUG_HISTORIES(context.Context, *GET_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error)
	GET_TRACE_DEBUG_HISTORY_STATUS(context.Context, *GET_TRACE_DEBUG_HISTORY_STATUS_Request) (*emptypb.Empty, error)
	GET_TRACE_LIST(context.Context, *GET_TRACE_LIST_Request) (*emptypb.Empty, error)
	LIST_TRACE_DEBUG_HISTORIES(context.Context, *LIST_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error)
	POST_TRACE_DEBUG_HISTORIES(context.Context, *POST_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error)
	PUT_TRACE_DEBUG_HISTORY_STOP(context.Context, *PUT_TRACE_DEBUG_HISTORY_STOP_Request) (*emptypb.Empty, error)
}

// UnimplementedMspApmTraceServer should be embedded to have forward compatible implementations.
type UnimplementedMspApmTraceServer struct {
}

func (*UnimplementedMspApmTraceServer) GET_SPANS(context.Context, *GET_SPANS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GET_SPANS not implemented")
}
func (*UnimplementedMspApmTraceServer) GET_TRACE_CONDITIONS_LIST(context.Context, *GET_TRACE_CONDITIONS_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GET_TRACE_CONDITIONS_LIST not implemented")
}
func (*UnimplementedMspApmTraceServer) GET_TRACE_DEBUG_HISTORIES(context.Context, *GET_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GET_TRACE_DEBUG_HISTORIES not implemented")
}
func (*UnimplementedMspApmTraceServer) GET_TRACE_DEBUG_HISTORY_STATUS(context.Context, *GET_TRACE_DEBUG_HISTORY_STATUS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GET_TRACE_DEBUG_HISTORY_STATUS not implemented")
}
func (*UnimplementedMspApmTraceServer) GET_TRACE_LIST(context.Context, *GET_TRACE_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GET_TRACE_LIST not implemented")
}
func (*UnimplementedMspApmTraceServer) LIST_TRACE_DEBUG_HISTORIES(context.Context, *LIST_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LIST_TRACE_DEBUG_HISTORIES not implemented")
}
func (*UnimplementedMspApmTraceServer) POST_TRACE_DEBUG_HISTORIES(context.Context, *POST_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method POST_TRACE_DEBUG_HISTORIES not implemented")
}
func (*UnimplementedMspApmTraceServer) PUT_TRACE_DEBUG_HISTORY_STOP(context.Context, *PUT_TRACE_DEBUG_HISTORY_STOP_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PUT_TRACE_DEBUG_HISTORY_STOP not implemented")
}

func RegisterMspApmTraceServer(s grpc1.ServiceRegistrar, srv MspApmTraceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_MspApmTrace_serviceDesc(srv, opts...), srv)
}

var _MspApmTrace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.msp.msp_apm_trace",
	HandlerType: (*MspApmTraceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "msp_apm_trace.proto",
}

func _get_MspApmTrace_serviceDesc(srv MspApmTraceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_MspApmTrace_GET_SPANS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GET_SPANS(ctx, req.(*GET_SPANS_Request))
	}
	var _MspApmTrace_GET_SPANS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmTrace_GET_SPANS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "GET_SPANS", srv)
		_MspApmTrace_GET_SPANS_Handler = h.Interceptor(_MspApmTrace_GET_SPANS_Handler)
	}

	_MspApmTrace_GET_TRACE_CONDITIONS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GET_TRACE_CONDITIONS_LIST(ctx, req.(*GET_TRACE_CONDITIONS_LIST_Request))
	}
	var _MspApmTrace_GET_TRACE_CONDITIONS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmTrace_GET_TRACE_CONDITIONS_LIST_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "GET_TRACE_CONDITIONS_LIST", srv)
		_MspApmTrace_GET_TRACE_CONDITIONS_LIST_Handler = h.Interceptor(_MspApmTrace_GET_TRACE_CONDITIONS_LIST_Handler)
	}

	_MspApmTrace_GET_TRACE_DEBUG_HISTORIES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GET_TRACE_DEBUG_HISTORIES(ctx, req.(*GET_TRACE_DEBUG_HISTORIES_Request))
	}
	var _MspApmTrace_GET_TRACE_DEBUG_HISTORIES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmTrace_GET_TRACE_DEBUG_HISTORIES_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "GET_TRACE_DEBUG_HISTORIES", srv)
		_MspApmTrace_GET_TRACE_DEBUG_HISTORIES_Handler = h.Interceptor(_MspApmTrace_GET_TRACE_DEBUG_HISTORIES_Handler)
	}

	_MspApmTrace_GET_TRACE_DEBUG_HISTORY_STATUS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GET_TRACE_DEBUG_HISTORY_STATUS(ctx, req.(*GET_TRACE_DEBUG_HISTORY_STATUS_Request))
	}
	var _MspApmTrace_GET_TRACE_DEBUG_HISTORY_STATUS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmTrace_GET_TRACE_DEBUG_HISTORY_STATUS_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "GET_TRACE_DEBUG_HISTORY_STATUS", srv)
		_MspApmTrace_GET_TRACE_DEBUG_HISTORY_STATUS_Handler = h.Interceptor(_MspApmTrace_GET_TRACE_DEBUG_HISTORY_STATUS_Handler)
	}

	_MspApmTrace_GET_TRACE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GET_TRACE_LIST(ctx, req.(*GET_TRACE_LIST_Request))
	}
	var _MspApmTrace_GET_TRACE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmTrace_GET_TRACE_LIST_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "GET_TRACE_LIST", srv)
		_MspApmTrace_GET_TRACE_LIST_Handler = h.Interceptor(_MspApmTrace_GET_TRACE_LIST_Handler)
	}

	_MspApmTrace_LIST_TRACE_DEBUG_HISTORIES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.LIST_TRACE_DEBUG_HISTORIES(ctx, req.(*LIST_TRACE_DEBUG_HISTORIES_Request))
	}
	var _MspApmTrace_LIST_TRACE_DEBUG_HISTORIES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmTrace_LIST_TRACE_DEBUG_HISTORIES_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "LIST_TRACE_DEBUG_HISTORIES", srv)
		_MspApmTrace_LIST_TRACE_DEBUG_HISTORIES_Handler = h.Interceptor(_MspApmTrace_LIST_TRACE_DEBUG_HISTORIES_Handler)
	}

	_MspApmTrace_POST_TRACE_DEBUG_HISTORIES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.POST_TRACE_DEBUG_HISTORIES(ctx, req.(*POST_TRACE_DEBUG_HISTORIES_Request))
	}
	var _MspApmTrace_POST_TRACE_DEBUG_HISTORIES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmTrace_POST_TRACE_DEBUG_HISTORIES_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "POST_TRACE_DEBUG_HISTORIES", srv)
		_MspApmTrace_POST_TRACE_DEBUG_HISTORIES_Handler = h.Interceptor(_MspApmTrace_POST_TRACE_DEBUG_HISTORIES_Handler)
	}

	_MspApmTrace_PUT_TRACE_DEBUG_HISTORY_STOP_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.PUT_TRACE_DEBUG_HISTORY_STOP(ctx, req.(*PUT_TRACE_DEBUG_HISTORY_STOP_Request))
	}
	var _MspApmTrace_PUT_TRACE_DEBUG_HISTORY_STOP_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspApmTrace_PUT_TRACE_DEBUG_HISTORY_STOP_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_apm_trace", "PUT_TRACE_DEBUG_HISTORY_STOP", srv)
		_MspApmTrace_PUT_TRACE_DEBUG_HISTORY_STOP_Handler = h.Interceptor(_MspApmTrace_PUT_TRACE_DEBUG_HISTORY_STOP_Handler)
	}

	var serviceDesc = _MspApmTrace_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "GET_SPANS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GET_SPANS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmTraceServer).GET_SPANS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmTrace_GET_SPANS_info)
				}
				if interceptor == nil {
					return _MspApmTrace_GET_SPANS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_trace/GET_SPANS",
				}
				return interceptor(ctx, in, info, _MspApmTrace_GET_SPANS_Handler)
			},
		},
		{
			MethodName: "GET_TRACE_CONDITIONS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GET_TRACE_CONDITIONS_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmTraceServer).GET_TRACE_CONDITIONS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmTrace_GET_TRACE_CONDITIONS_LIST_info)
				}
				if interceptor == nil {
					return _MspApmTrace_GET_TRACE_CONDITIONS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_trace/GET_TRACE_CONDITIONS_LIST",
				}
				return interceptor(ctx, in, info, _MspApmTrace_GET_TRACE_CONDITIONS_LIST_Handler)
			},
		},
		{
			MethodName: "GET_TRACE_DEBUG_HISTORIES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GET_TRACE_DEBUG_HISTORIES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmTraceServer).GET_TRACE_DEBUG_HISTORIES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmTrace_GET_TRACE_DEBUG_HISTORIES_info)
				}
				if interceptor == nil {
					return _MspApmTrace_GET_TRACE_DEBUG_HISTORIES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_trace/GET_TRACE_DEBUG_HISTORIES",
				}
				return interceptor(ctx, in, info, _MspApmTrace_GET_TRACE_DEBUG_HISTORIES_Handler)
			},
		},
		{
			MethodName: "GET_TRACE_DEBUG_HISTORY_STATUS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GET_TRACE_DEBUG_HISTORY_STATUS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmTraceServer).GET_TRACE_DEBUG_HISTORY_STATUS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmTrace_GET_TRACE_DEBUG_HISTORY_STATUS_info)
				}
				if interceptor == nil {
					return _MspApmTrace_GET_TRACE_DEBUG_HISTORY_STATUS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_trace/GET_TRACE_DEBUG_HISTORY_STATUS",
				}
				return interceptor(ctx, in, info, _MspApmTrace_GET_TRACE_DEBUG_HISTORY_STATUS_Handler)
			},
		},
		{
			MethodName: "GET_TRACE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GET_TRACE_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmTraceServer).GET_TRACE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmTrace_GET_TRACE_LIST_info)
				}
				if interceptor == nil {
					return _MspApmTrace_GET_TRACE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_trace/GET_TRACE_LIST",
				}
				return interceptor(ctx, in, info, _MspApmTrace_GET_TRACE_LIST_Handler)
			},
		},
		{
			MethodName: "LIST_TRACE_DEBUG_HISTORIES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(LIST_TRACE_DEBUG_HISTORIES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmTraceServer).LIST_TRACE_DEBUG_HISTORIES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmTrace_LIST_TRACE_DEBUG_HISTORIES_info)
				}
				if interceptor == nil {
					return _MspApmTrace_LIST_TRACE_DEBUG_HISTORIES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_trace/LIST_TRACE_DEBUG_HISTORIES",
				}
				return interceptor(ctx, in, info, _MspApmTrace_LIST_TRACE_DEBUG_HISTORIES_Handler)
			},
		},
		{
			MethodName: "POST_TRACE_DEBUG_HISTORIES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(POST_TRACE_DEBUG_HISTORIES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmTraceServer).POST_TRACE_DEBUG_HISTORIES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmTrace_POST_TRACE_DEBUG_HISTORIES_info)
				}
				if interceptor == nil {
					return _MspApmTrace_POST_TRACE_DEBUG_HISTORIES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_trace/POST_TRACE_DEBUG_HISTORIES",
				}
				return interceptor(ctx, in, info, _MspApmTrace_POST_TRACE_DEBUG_HISTORIES_Handler)
			},
		},
		{
			MethodName: "PUT_TRACE_DEBUG_HISTORY_STOP",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(PUT_TRACE_DEBUG_HISTORY_STOP_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspApmTraceServer).PUT_TRACE_DEBUG_HISTORY_STOP(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspApmTrace_PUT_TRACE_DEBUG_HISTORY_STOP_info)
				}
				if interceptor == nil {
					return _MspApmTrace_PUT_TRACE_DEBUG_HISTORY_STOP_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_apm_trace/PUT_TRACE_DEBUG_HISTORY_STOP",
				}
				return interceptor(ctx, in, info, _MspApmTrace_PUT_TRACE_DEBUG_HISTORY_STOP_Handler)
			},
		},
	}
	return &serviceDesc
}
