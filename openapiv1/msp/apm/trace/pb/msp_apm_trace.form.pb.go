// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: msp_apm_trace.proto

package pb

import (
	url "net/url"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GET_SPANS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GET_TRACE_CONDITIONS_LIST_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GET_TRACE_DEBUG_HISTORIES_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GET_TRACE_DEBUG_HISTORY_STATUS_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GET_TRACE_LIST_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*LIST_TRACE_DEBUG_HISTORIES_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*POST_TRACE_DEBUG_HISTORIES_Request)(nil)
var _ urlenc.URLValuesUnmarshaler = (*PUT_TRACE_DEBUG_HISTORY_STOP_Request)(nil)

// GET_SPANS_Request implement urlenc.URLValuesUnmarshaler.
func (m *GET_SPANS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "traceID":
				m.TraceID = vals[0]
			}
		}
	}
	return nil
}

// GET_TRACE_CONDITIONS_LIST_Request implement urlenc.URLValuesUnmarshaler.
func (m *GET_TRACE_CONDITIONS_LIST_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GET_TRACE_DEBUG_HISTORIES_Request implement urlenc.URLValuesUnmarshaler.
func (m *GET_TRACE_DEBUG_HISTORIES_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "requestId":
				m.RequestId = vals[0]
			}
		}
	}
	return nil
}

// GET_TRACE_DEBUG_HISTORY_STATUS_Request implement urlenc.URLValuesUnmarshaler.
func (m *GET_TRACE_DEBUG_HISTORY_STATUS_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "requestId":
				m.RequestId = vals[0]
			}
		}
	}
	return nil
}

// GET_TRACE_LIST_Request implement urlenc.URLValuesUnmarshaler.
func (m *GET_TRACE_LIST_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// LIST_TRACE_DEBUG_HISTORIES_Request implement urlenc.URLValuesUnmarshaler.
func (m *LIST_TRACE_DEBUG_HISTORIES_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// POST_TRACE_DEBUG_HISTORIES_Request implement urlenc.URLValuesUnmarshaler.
func (m *POST_TRACE_DEBUG_HISTORIES_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// PUT_TRACE_DEBUG_HISTORY_STOP_Request implement urlenc.URLValuesUnmarshaler.
func (m *PUT_TRACE_DEBUG_HISTORY_STOP_Request) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "requestId":
				m.RequestId = vals[0]
			}
		}
	}
	return nil
}
