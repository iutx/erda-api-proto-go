// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: msp_apm_trace.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GET_SPANS_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GET_SPANS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GET_SPANS_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GET_SPANS_RequestMultiError, or nil if none found.
func (m *GET_SPANS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GET_SPANS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TraceID

	if len(errors) > 0 {
		return GET_SPANS_RequestMultiError(errors)
	}

	return nil
}

// GET_SPANS_RequestMultiError is an error wrapping multiple validation errors
// returned by GET_SPANS_Request.ValidateAll() if the designated constraints
// aren't met.
type GET_SPANS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GET_SPANS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GET_SPANS_RequestMultiError) AllErrors() []error { return m }

// GET_SPANS_RequestValidationError is the validation error returned by
// GET_SPANS_Request.Validate if the designated constraints aren't met.
type GET_SPANS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GET_SPANS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GET_SPANS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GET_SPANS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GET_SPANS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GET_SPANS_RequestValidationError) ErrorName() string {
	return "GET_SPANS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GET_SPANS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGET_SPANS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GET_SPANS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GET_SPANS_RequestValidationError{}

// Validate checks the field values on GET_TRACE_CONDITIONS_LIST_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GET_TRACE_CONDITIONS_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GET_TRACE_CONDITIONS_LIST_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GET_TRACE_CONDITIONS_LIST_RequestMultiError, or nil if none found.
func (m *GET_TRACE_CONDITIONS_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GET_TRACE_CONDITIONS_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GET_TRACE_CONDITIONS_LIST_RequestMultiError(errors)
	}

	return nil
}

// GET_TRACE_CONDITIONS_LIST_RequestMultiError is an error wrapping multiple
// validation errors returned by
// GET_TRACE_CONDITIONS_LIST_Request.ValidateAll() if the designated
// constraints aren't met.
type GET_TRACE_CONDITIONS_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GET_TRACE_CONDITIONS_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GET_TRACE_CONDITIONS_LIST_RequestMultiError) AllErrors() []error { return m }

// GET_TRACE_CONDITIONS_LIST_RequestValidationError is the validation error
// returned by GET_TRACE_CONDITIONS_LIST_Request.Validate if the designated
// constraints aren't met.
type GET_TRACE_CONDITIONS_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GET_TRACE_CONDITIONS_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GET_TRACE_CONDITIONS_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GET_TRACE_CONDITIONS_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GET_TRACE_CONDITIONS_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GET_TRACE_CONDITIONS_LIST_RequestValidationError) ErrorName() string {
	return "GET_TRACE_CONDITIONS_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GET_TRACE_CONDITIONS_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGET_TRACE_CONDITIONS_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GET_TRACE_CONDITIONS_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GET_TRACE_CONDITIONS_LIST_RequestValidationError{}

// Validate checks the field values on GET_TRACE_DEBUG_HISTORIES_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GET_TRACE_DEBUG_HISTORIES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GET_TRACE_DEBUG_HISTORIES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GET_TRACE_DEBUG_HISTORIES_RequestMultiError, or nil if none found.
func (m *GET_TRACE_DEBUG_HISTORIES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GET_TRACE_DEBUG_HISTORIES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GET_TRACE_DEBUG_HISTORIES_RequestMultiError(errors)
	}

	return nil
}

// GET_TRACE_DEBUG_HISTORIES_RequestMultiError is an error wrapping multiple
// validation errors returned by
// GET_TRACE_DEBUG_HISTORIES_Request.ValidateAll() if the designated
// constraints aren't met.
type GET_TRACE_DEBUG_HISTORIES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GET_TRACE_DEBUG_HISTORIES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GET_TRACE_DEBUG_HISTORIES_RequestMultiError) AllErrors() []error { return m }

// GET_TRACE_DEBUG_HISTORIES_RequestValidationError is the validation error
// returned by GET_TRACE_DEBUG_HISTORIES_Request.Validate if the designated
// constraints aren't met.
type GET_TRACE_DEBUG_HISTORIES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GET_TRACE_DEBUG_HISTORIES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GET_TRACE_DEBUG_HISTORIES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GET_TRACE_DEBUG_HISTORIES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GET_TRACE_DEBUG_HISTORIES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GET_TRACE_DEBUG_HISTORIES_RequestValidationError) ErrorName() string {
	return "GET_TRACE_DEBUG_HISTORIES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GET_TRACE_DEBUG_HISTORIES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGET_TRACE_DEBUG_HISTORIES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GET_TRACE_DEBUG_HISTORIES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GET_TRACE_DEBUG_HISTORIES_RequestValidationError{}

// Validate checks the field values on GET_TRACE_DEBUG_HISTORY_STATUS_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GET_TRACE_DEBUG_HISTORY_STATUS_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GET_TRACE_DEBUG_HISTORY_STATUS_Request with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GET_TRACE_DEBUG_HISTORY_STATUS_RequestMultiError, or nil if none found.
func (m *GET_TRACE_DEBUG_HISTORY_STATUS_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GET_TRACE_DEBUG_HISTORY_STATUS_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if len(errors) > 0 {
		return GET_TRACE_DEBUG_HISTORY_STATUS_RequestMultiError(errors)
	}

	return nil
}

// GET_TRACE_DEBUG_HISTORY_STATUS_RequestMultiError is an error wrapping
// multiple validation errors returned by
// GET_TRACE_DEBUG_HISTORY_STATUS_Request.ValidateAll() if the designated
// constraints aren't met.
type GET_TRACE_DEBUG_HISTORY_STATUS_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GET_TRACE_DEBUG_HISTORY_STATUS_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GET_TRACE_DEBUG_HISTORY_STATUS_RequestMultiError) AllErrors() []error { return m }

// GET_TRACE_DEBUG_HISTORY_STATUS_RequestValidationError is the validation
// error returned by GET_TRACE_DEBUG_HISTORY_STATUS_Request.Validate if the
// designated constraints aren't met.
type GET_TRACE_DEBUG_HISTORY_STATUS_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GET_TRACE_DEBUG_HISTORY_STATUS_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GET_TRACE_DEBUG_HISTORY_STATUS_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GET_TRACE_DEBUG_HISTORY_STATUS_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GET_TRACE_DEBUG_HISTORY_STATUS_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GET_TRACE_DEBUG_HISTORY_STATUS_RequestValidationError) ErrorName() string {
	return "GET_TRACE_DEBUG_HISTORY_STATUS_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GET_TRACE_DEBUG_HISTORY_STATUS_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGET_TRACE_DEBUG_HISTORY_STATUS_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GET_TRACE_DEBUG_HISTORY_STATUS_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GET_TRACE_DEBUG_HISTORY_STATUS_RequestValidationError{}

// Validate checks the field values on GET_TRACE_LIST_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GET_TRACE_LIST_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GET_TRACE_LIST_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GET_TRACE_LIST_RequestMultiError, or nil if none found.
func (m *GET_TRACE_LIST_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GET_TRACE_LIST_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GET_TRACE_LIST_RequestMultiError(errors)
	}

	return nil
}

// GET_TRACE_LIST_RequestMultiError is an error wrapping multiple validation
// errors returned by GET_TRACE_LIST_Request.ValidateAll() if the designated
// constraints aren't met.
type GET_TRACE_LIST_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GET_TRACE_LIST_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GET_TRACE_LIST_RequestMultiError) AllErrors() []error { return m }

// GET_TRACE_LIST_RequestValidationError is the validation error returned by
// GET_TRACE_LIST_Request.Validate if the designated constraints aren't met.
type GET_TRACE_LIST_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GET_TRACE_LIST_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GET_TRACE_LIST_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GET_TRACE_LIST_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GET_TRACE_LIST_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GET_TRACE_LIST_RequestValidationError) ErrorName() string {
	return "GET_TRACE_LIST_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GET_TRACE_LIST_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGET_TRACE_LIST_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GET_TRACE_LIST_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GET_TRACE_LIST_RequestValidationError{}

// Validate checks the field values on LIST_TRACE_DEBUG_HISTORIES_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LIST_TRACE_DEBUG_HISTORIES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LIST_TRACE_DEBUG_HISTORIES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LIST_TRACE_DEBUG_HISTORIES_RequestMultiError, or nil if none found.
func (m *LIST_TRACE_DEBUG_HISTORIES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *LIST_TRACE_DEBUG_HISTORIES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LIST_TRACE_DEBUG_HISTORIES_RequestMultiError(errors)
	}

	return nil
}

// LIST_TRACE_DEBUG_HISTORIES_RequestMultiError is an error wrapping multiple
// validation errors returned by
// LIST_TRACE_DEBUG_HISTORIES_Request.ValidateAll() if the designated
// constraints aren't met.
type LIST_TRACE_DEBUG_HISTORIES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LIST_TRACE_DEBUG_HISTORIES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LIST_TRACE_DEBUG_HISTORIES_RequestMultiError) AllErrors() []error { return m }

// LIST_TRACE_DEBUG_HISTORIES_RequestValidationError is the validation error
// returned by LIST_TRACE_DEBUG_HISTORIES_Request.Validate if the designated
// constraints aren't met.
type LIST_TRACE_DEBUG_HISTORIES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LIST_TRACE_DEBUG_HISTORIES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LIST_TRACE_DEBUG_HISTORIES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LIST_TRACE_DEBUG_HISTORIES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LIST_TRACE_DEBUG_HISTORIES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LIST_TRACE_DEBUG_HISTORIES_RequestValidationError) ErrorName() string {
	return "LIST_TRACE_DEBUG_HISTORIES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e LIST_TRACE_DEBUG_HISTORIES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLIST_TRACE_DEBUG_HISTORIES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LIST_TRACE_DEBUG_HISTORIES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LIST_TRACE_DEBUG_HISTORIES_RequestValidationError{}

// Validate checks the field values on POST_TRACE_DEBUG_HISTORIES_Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *POST_TRACE_DEBUG_HISTORIES_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on POST_TRACE_DEBUG_HISTORIES_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// POST_TRACE_DEBUG_HISTORIES_RequestMultiError, or nil if none found.
func (m *POST_TRACE_DEBUG_HISTORIES_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *POST_TRACE_DEBUG_HISTORIES_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return POST_TRACE_DEBUG_HISTORIES_RequestMultiError(errors)
	}

	return nil
}

// POST_TRACE_DEBUG_HISTORIES_RequestMultiError is an error wrapping multiple
// validation errors returned by
// POST_TRACE_DEBUG_HISTORIES_Request.ValidateAll() if the designated
// constraints aren't met.
type POST_TRACE_DEBUG_HISTORIES_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m POST_TRACE_DEBUG_HISTORIES_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m POST_TRACE_DEBUG_HISTORIES_RequestMultiError) AllErrors() []error { return m }

// POST_TRACE_DEBUG_HISTORIES_RequestValidationError is the validation error
// returned by POST_TRACE_DEBUG_HISTORIES_Request.Validate if the designated
// constraints aren't met.
type POST_TRACE_DEBUG_HISTORIES_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e POST_TRACE_DEBUG_HISTORIES_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e POST_TRACE_DEBUG_HISTORIES_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e POST_TRACE_DEBUG_HISTORIES_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e POST_TRACE_DEBUG_HISTORIES_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e POST_TRACE_DEBUG_HISTORIES_RequestValidationError) ErrorName() string {
	return "POST_TRACE_DEBUG_HISTORIES_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e POST_TRACE_DEBUG_HISTORIES_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPOST_TRACE_DEBUG_HISTORIES_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = POST_TRACE_DEBUG_HISTORIES_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = POST_TRACE_DEBUG_HISTORIES_RequestValidationError{}

// Validate checks the field values on PUT_TRACE_DEBUG_HISTORY_STOP_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PUT_TRACE_DEBUG_HISTORY_STOP_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PUT_TRACE_DEBUG_HISTORY_STOP_Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PUT_TRACE_DEBUG_HISTORY_STOP_RequestMultiError, or nil if none found.
func (m *PUT_TRACE_DEBUG_HISTORY_STOP_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *PUT_TRACE_DEBUG_HISTORY_STOP_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if len(errors) > 0 {
		return PUT_TRACE_DEBUG_HISTORY_STOP_RequestMultiError(errors)
	}

	return nil
}

// PUT_TRACE_DEBUG_HISTORY_STOP_RequestMultiError is an error wrapping multiple
// validation errors returned by
// PUT_TRACE_DEBUG_HISTORY_STOP_Request.ValidateAll() if the designated
// constraints aren't met.
type PUT_TRACE_DEBUG_HISTORY_STOP_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PUT_TRACE_DEBUG_HISTORY_STOP_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PUT_TRACE_DEBUG_HISTORY_STOP_RequestMultiError) AllErrors() []error { return m }

// PUT_TRACE_DEBUG_HISTORY_STOP_RequestValidationError is the validation error
// returned by PUT_TRACE_DEBUG_HISTORY_STOP_Request.Validate if the designated
// constraints aren't met.
type PUT_TRACE_DEBUG_HISTORY_STOP_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PUT_TRACE_DEBUG_HISTORY_STOP_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PUT_TRACE_DEBUG_HISTORY_STOP_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PUT_TRACE_DEBUG_HISTORY_STOP_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PUT_TRACE_DEBUG_HISTORY_STOP_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PUT_TRACE_DEBUG_HISTORY_STOP_RequestValidationError) ErrorName() string {
	return "PUT_TRACE_DEBUG_HISTORY_STOP_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e PUT_TRACE_DEBUG_HISTORY_STOP_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPUT_TRACE_DEBUG_HISTORY_STOP_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PUT_TRACE_DEBUG_HISTORY_STOP_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PUT_TRACE_DEBUG_HISTORY_STOP_RequestValidationError{}
