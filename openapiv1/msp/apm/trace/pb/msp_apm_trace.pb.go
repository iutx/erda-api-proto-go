// generated by openapi-gen-protobuf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: msp_apm_trace.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/erda-project/erda-proto-go/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GET_SPANS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceID string `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"` // generated from path variable: traceID. You should change the proto type if necessary.
}

func (x *GET_SPANS_Request) Reset() {
	*x = GET_SPANS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_trace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GET_SPANS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GET_SPANS_Request) ProtoMessage() {}

func (x *GET_SPANS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_trace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GET_SPANS_Request.ProtoReflect.Descriptor instead.
func (*GET_SPANS_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_trace_proto_rawDescGZIP(), []int{0}
}

func (x *GET_SPANS_Request) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type GET_TRACE_CONDITIONS_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GET_TRACE_CONDITIONS_LIST_Request) Reset() {
	*x = GET_TRACE_CONDITIONS_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_trace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GET_TRACE_CONDITIONS_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GET_TRACE_CONDITIONS_LIST_Request) ProtoMessage() {}

func (x *GET_TRACE_CONDITIONS_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_trace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GET_TRACE_CONDITIONS_LIST_Request.ProtoReflect.Descriptor instead.
func (*GET_TRACE_CONDITIONS_LIST_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_trace_proto_rawDescGZIP(), []int{1}
}

type GET_TRACE_DEBUG_HISTORIES_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"` // generated from path variable: requestId. You should change the proto type if necessary.
}

func (x *GET_TRACE_DEBUG_HISTORIES_Request) Reset() {
	*x = GET_TRACE_DEBUG_HISTORIES_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_trace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GET_TRACE_DEBUG_HISTORIES_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GET_TRACE_DEBUG_HISTORIES_Request) ProtoMessage() {}

func (x *GET_TRACE_DEBUG_HISTORIES_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_trace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GET_TRACE_DEBUG_HISTORIES_Request.ProtoReflect.Descriptor instead.
func (*GET_TRACE_DEBUG_HISTORIES_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_trace_proto_rawDescGZIP(), []int{2}
}

func (x *GET_TRACE_DEBUG_HISTORIES_Request) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GET_TRACE_DEBUG_HISTORY_STATUS_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"` // generated from path variable: requestId. You should change the proto type if necessary.
}

func (x *GET_TRACE_DEBUG_HISTORY_STATUS_Request) Reset() {
	*x = GET_TRACE_DEBUG_HISTORY_STATUS_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_trace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GET_TRACE_DEBUG_HISTORY_STATUS_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GET_TRACE_DEBUG_HISTORY_STATUS_Request) ProtoMessage() {}

func (x *GET_TRACE_DEBUG_HISTORY_STATUS_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_trace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GET_TRACE_DEBUG_HISTORY_STATUS_Request.ProtoReflect.Descriptor instead.
func (*GET_TRACE_DEBUG_HISTORY_STATUS_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_trace_proto_rawDescGZIP(), []int{3}
}

func (x *GET_TRACE_DEBUG_HISTORY_STATUS_Request) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GET_TRACE_LIST_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GET_TRACE_LIST_Request) Reset() {
	*x = GET_TRACE_LIST_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_trace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GET_TRACE_LIST_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GET_TRACE_LIST_Request) ProtoMessage() {}

func (x *GET_TRACE_LIST_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_trace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GET_TRACE_LIST_Request.ProtoReflect.Descriptor instead.
func (*GET_TRACE_LIST_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_trace_proto_rawDescGZIP(), []int{4}
}

type LIST_TRACE_DEBUG_HISTORIES_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LIST_TRACE_DEBUG_HISTORIES_Request) Reset() {
	*x = LIST_TRACE_DEBUG_HISTORIES_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_trace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LIST_TRACE_DEBUG_HISTORIES_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LIST_TRACE_DEBUG_HISTORIES_Request) ProtoMessage() {}

func (x *LIST_TRACE_DEBUG_HISTORIES_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_trace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LIST_TRACE_DEBUG_HISTORIES_Request.ProtoReflect.Descriptor instead.
func (*LIST_TRACE_DEBUG_HISTORIES_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_trace_proto_rawDescGZIP(), []int{5}
}

type POST_TRACE_DEBUG_HISTORIES_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *POST_TRACE_DEBUG_HISTORIES_Request) Reset() {
	*x = POST_TRACE_DEBUG_HISTORIES_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_trace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *POST_TRACE_DEBUG_HISTORIES_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*POST_TRACE_DEBUG_HISTORIES_Request) ProtoMessage() {}

func (x *POST_TRACE_DEBUG_HISTORIES_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_trace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use POST_TRACE_DEBUG_HISTORIES_Request.ProtoReflect.Descriptor instead.
func (*POST_TRACE_DEBUG_HISTORIES_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_trace_proto_rawDescGZIP(), []int{6}
}

type PUT_TRACE_DEBUG_HISTORY_STOP_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"` // generated from path variable: requestId. You should change the proto type if necessary.
}

func (x *PUT_TRACE_DEBUG_HISTORY_STOP_Request) Reset() {
	*x = PUT_TRACE_DEBUG_HISTORY_STOP_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_apm_trace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PUT_TRACE_DEBUG_HISTORY_STOP_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PUT_TRACE_DEBUG_HISTORY_STOP_Request) ProtoMessage() {}

func (x *PUT_TRACE_DEBUG_HISTORY_STOP_Request) ProtoReflect() protoreflect.Message {
	mi := &file_msp_apm_trace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PUT_TRACE_DEBUG_HISTORY_STOP_Request.ProtoReflect.Descriptor instead.
func (*PUT_TRACE_DEBUG_HISTORY_STOP_Request) Descriptor() ([]byte, []int) {
	return file_msp_apm_trace_proto_rawDescGZIP(), []int{7}
}

func (x *PUT_TRACE_DEBUG_HISTORY_STOP_Request) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

var File_msp_apm_trace_proto protoreflect.FileDescriptor

var file_msp_apm_trace_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x73, 0x70, 0x5f, 0x61, 0x70, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x11, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x4e, 0x53,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x22, 0x23, 0x0a, 0x21, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x21, 0x47, 0x45, 0x54, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x49, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x26, 0x47, 0x45,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x22,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47,
	0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45,
	0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x24, 0x50, 0x55, 0x54, 0x5f,
	0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x32, 0xcc,
	0x0d, 0x0a, 0x0d, 0x6d, 0x73, 0x70, 0x5f, 0x61, 0x70, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x12, 0xc0, 0x01, 0x0a, 0x09, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x4e, 0x53, 0x12, 0x25,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x4e, 0x53, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x74, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f,
	0x61, 0x70, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x44, 0x0a,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x73,
	0x70, 0x61, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x17, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x20, 0x62, 0x79, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x2e, 0x12, 0xd9, 0x01, 0x0a, 0x19, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x12, 0x35, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x43, 0x0a, 0x1d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x61, 0x70, 0x6d, 0x20, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x20, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x12,
	0xd8, 0x01, 0x0a, 0x19, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x42, 0x55, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x12, 0x35, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x6c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x7d, 0xfa, 0x81, 0xf9, 0x1b, 0x40, 0x0a, 0x1f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x7d, 0x32, 0x04, 0x10, 0x01, 0x20,
	0x01, 0x3a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x20, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x12, 0xfb, 0x01, 0x0a, 0x1e, 0x47,
	0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x3a, 0x2e,
	0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x51, 0x0a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x12, 0xa4, 0x01, 0x0a, 0x0e, 0x47, 0x45, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x2a, 0x2e, 0x65, 0x72,
	0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73,
	0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0xfa, 0x81, 0xf9, 0x1b,
	0x2e, 0x0a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x11, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x20, 0x61, 0x70, 0x6d, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x12,
	0xc7, 0x01, 0x0a, 0x1a, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44,
	0x45, 0x42, 0x55, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x12, 0x36,
	0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44,
	0x45, 0x42, 0x55, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x59,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x39,
	0x0a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x1c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x20, 0x74, 0x72, 0x61, 0x63, 0x65, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67, 0x20, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x12, 0xc3, 0x01, 0x0a, 0x1a, 0x50, 0x4f,
	0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x12, 0x36, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x50, 0x4f,
	0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0xfa, 0x81, 0xf9, 0x1b, 0x35, 0x0a, 0x13, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x32,
	0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0xff, 0x01, 0x0a, 0x1c, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x42, 0x55, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x12, 0x38, 0x2e, 0x65, 0x72, 0x64, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f,
	0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x2e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0xfa, 0x81, 0xf9, 0x1b, 0x51,
	0x0a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x32, 0x04, 0x10, 0x01, 0x20, 0x01, 0x3a, 0x19, 0x73, 0x74, 0x6f, 0x70, 0x20, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x1a, 0x0a, 0xc2, 0xc4, 0xcb, 0x1c, 0x05, 0x22, 0x03, 0x6d, 0x73, 0x70, 0x42, 0x42, 0x5a,
	0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x72, 0x64, 0x61,
	0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x72, 0x64, 0x61, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msp_apm_trace_proto_rawDescOnce sync.Once
	file_msp_apm_trace_proto_rawDescData = file_msp_apm_trace_proto_rawDesc
)

func file_msp_apm_trace_proto_rawDescGZIP() []byte {
	file_msp_apm_trace_proto_rawDescOnce.Do(func() {
		file_msp_apm_trace_proto_rawDescData = protoimpl.X.CompressGZIP(file_msp_apm_trace_proto_rawDescData)
	})
	return file_msp_apm_trace_proto_rawDescData
}

var file_msp_apm_trace_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_msp_apm_trace_proto_goTypes = []interface{}{
	(*GET_SPANS_Request)(nil),                      // 0: erda.openapiv1.msp.GET_SPANS_Request
	(*GET_TRACE_CONDITIONS_LIST_Request)(nil),      // 1: erda.openapiv1.msp.GET_TRACE_CONDITIONS_LIST_Request
	(*GET_TRACE_DEBUG_HISTORIES_Request)(nil),      // 2: erda.openapiv1.msp.GET_TRACE_DEBUG_HISTORIES_Request
	(*GET_TRACE_DEBUG_HISTORY_STATUS_Request)(nil), // 3: erda.openapiv1.msp.GET_TRACE_DEBUG_HISTORY_STATUS_Request
	(*GET_TRACE_LIST_Request)(nil),                 // 4: erda.openapiv1.msp.GET_TRACE_LIST_Request
	(*LIST_TRACE_DEBUG_HISTORIES_Request)(nil),     // 5: erda.openapiv1.msp.LIST_TRACE_DEBUG_HISTORIES_Request
	(*POST_TRACE_DEBUG_HISTORIES_Request)(nil),     // 6: erda.openapiv1.msp.POST_TRACE_DEBUG_HISTORIES_Request
	(*PUT_TRACE_DEBUG_HISTORY_STOP_Request)(nil),   // 7: erda.openapiv1.msp.PUT_TRACE_DEBUG_HISTORY_STOP_Request
	(*emptypb.Empty)(nil),                          // 8: google.protobuf.Empty
}
var file_msp_apm_trace_proto_depIdxs = []int32{
	0, // 0: erda.openapiv1.msp.msp_apm_trace.GET_SPANS:input_type -> erda.openapiv1.msp.GET_SPANS_Request
	1, // 1: erda.openapiv1.msp.msp_apm_trace.GET_TRACE_CONDITIONS_LIST:input_type -> erda.openapiv1.msp.GET_TRACE_CONDITIONS_LIST_Request
	2, // 2: erda.openapiv1.msp.msp_apm_trace.GET_TRACE_DEBUG_HISTORIES:input_type -> erda.openapiv1.msp.GET_TRACE_DEBUG_HISTORIES_Request
	3, // 3: erda.openapiv1.msp.msp_apm_trace.GET_TRACE_DEBUG_HISTORY_STATUS:input_type -> erda.openapiv1.msp.GET_TRACE_DEBUG_HISTORY_STATUS_Request
	4, // 4: erda.openapiv1.msp.msp_apm_trace.GET_TRACE_LIST:input_type -> erda.openapiv1.msp.GET_TRACE_LIST_Request
	5, // 5: erda.openapiv1.msp.msp_apm_trace.LIST_TRACE_DEBUG_HISTORIES:input_type -> erda.openapiv1.msp.LIST_TRACE_DEBUG_HISTORIES_Request
	6, // 6: erda.openapiv1.msp.msp_apm_trace.POST_TRACE_DEBUG_HISTORIES:input_type -> erda.openapiv1.msp.POST_TRACE_DEBUG_HISTORIES_Request
	7, // 7: erda.openapiv1.msp.msp_apm_trace.PUT_TRACE_DEBUG_HISTORY_STOP:input_type -> erda.openapiv1.msp.PUT_TRACE_DEBUG_HISTORY_STOP_Request
	8, // 8: erda.openapiv1.msp.msp_apm_trace.GET_SPANS:output_type -> google.protobuf.Empty
	8, // 9: erda.openapiv1.msp.msp_apm_trace.GET_TRACE_CONDITIONS_LIST:output_type -> google.protobuf.Empty
	8, // 10: erda.openapiv1.msp.msp_apm_trace.GET_TRACE_DEBUG_HISTORIES:output_type -> google.protobuf.Empty
	8, // 11: erda.openapiv1.msp.msp_apm_trace.GET_TRACE_DEBUG_HISTORY_STATUS:output_type -> google.protobuf.Empty
	8, // 12: erda.openapiv1.msp.msp_apm_trace.GET_TRACE_LIST:output_type -> google.protobuf.Empty
	8, // 13: erda.openapiv1.msp.msp_apm_trace.LIST_TRACE_DEBUG_HISTORIES:output_type -> google.protobuf.Empty
	8, // 14: erda.openapiv1.msp.msp_apm_trace.POST_TRACE_DEBUG_HISTORIES:output_type -> google.protobuf.Empty
	8, // 15: erda.openapiv1.msp.msp_apm_trace.PUT_TRACE_DEBUG_HISTORY_STOP:output_type -> google.protobuf.Empty
	8, // [8:16] is the sub-list for method output_type
	0, // [0:8] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_msp_apm_trace_proto_init() }
func file_msp_apm_trace_proto_init() {
	if File_msp_apm_trace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msp_apm_trace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GET_SPANS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_trace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GET_TRACE_CONDITIONS_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_trace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GET_TRACE_DEBUG_HISTORIES_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_trace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GET_TRACE_DEBUG_HISTORY_STATUS_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_trace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GET_TRACE_LIST_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_trace_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LIST_TRACE_DEBUG_HISTORIES_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_trace_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*POST_TRACE_DEBUG_HISTORIES_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_apm_trace_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PUT_TRACE_DEBUG_HISTORY_STOP_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msp_apm_trace_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_msp_apm_trace_proto_goTypes,
		DependencyIndexes: file_msp_apm_trace_proto_depIdxs,
		MessageInfos:      file_msp_apm_trace_proto_msgTypes,
	}.Build()
	File_msp_apm_trace_proto = out.File
	file_msp_apm_trace_proto_rawDesc = nil
	file_msp_apm_trace_proto_goTypes = nil
	file_msp_apm_trace_proto_depIdxs = nil
}
