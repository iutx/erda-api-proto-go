// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: msp_apm_trace.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/msp/apm/trace/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// MspApmTrace msp_apm_trace.proto
	MspApmTrace() pb.MspApmTraceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		mspApmTrace: pb.NewMspApmTraceClient(cc),
	}
}

type serviceClients struct {
	mspApmTrace pb.MspApmTraceClient
}

func (c *serviceClients) MspApmTrace() pb.MspApmTraceClient {
	return c.mspApmTrace
}

type mspApmTraceWrapper struct {
	client pb.MspApmTraceClient
	opts   []grpc1.CallOption
}

func (s *mspApmTraceWrapper) GET_SPANS(ctx context.Context, req *pb.GET_SPANS_Request) (*emptypb.Empty, error) {
	return s.client.GET_SPANS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmTraceWrapper) GET_TRACE_CONDITIONS_LIST(ctx context.Context, req *pb.GET_TRACE_CONDITIONS_LIST_Request) (*emptypb.Empty, error) {
	return s.client.GET_TRACE_CONDITIONS_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmTraceWrapper) GET_TRACE_DEBUG_HISTORIES(ctx context.Context, req *pb.GET_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error) {
	return s.client.GET_TRACE_DEBUG_HISTORIES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmTraceWrapper) GET_TRACE_DEBUG_HISTORY_STATUS(ctx context.Context, req *pb.GET_TRACE_DEBUG_HISTORY_STATUS_Request) (*emptypb.Empty, error) {
	return s.client.GET_TRACE_DEBUG_HISTORY_STATUS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmTraceWrapper) GET_TRACE_LIST(ctx context.Context, req *pb.GET_TRACE_LIST_Request) (*emptypb.Empty, error) {
	return s.client.GET_TRACE_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmTraceWrapper) LIST_TRACE_DEBUG_HISTORIES(ctx context.Context, req *pb.LIST_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error) {
	return s.client.LIST_TRACE_DEBUG_HISTORIES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmTraceWrapper) POST_TRACE_DEBUG_HISTORIES(ctx context.Context, req *pb.POST_TRACE_DEBUG_HISTORIES_Request) (*emptypb.Empty, error) {
	return s.client.POST_TRACE_DEBUG_HISTORIES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspApmTraceWrapper) PUT_TRACE_DEBUG_HISTORY_STOP(ctx context.Context, req *pb.PUT_TRACE_DEBUG_HISTORY_STOP_Request) (*emptypb.Empty, error) {
	return s.client.PUT_TRACE_DEBUG_HISTORY_STOP(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
