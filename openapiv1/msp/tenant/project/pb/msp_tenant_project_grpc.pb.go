// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: msp_tenant_project.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// MspTenantProjectClient is the client API for MspTenantProject service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MspTenantProjectClient interface {
	CREATE_MSP_PROJECT(ctx context.Context, in *CREATE_MSP_PROJECT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_METRIC_PROJECT_OVERVIEW(ctx context.Context, in *MSP_METRIC_PROJECT_OVERVIEW_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_PROJECT_DELETE(ctx context.Context, in *MSP_PROJECT_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_PROJECT_GET(ctx context.Context, in *MSP_PROJECT_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_PROJECT_LIST(ctx context.Context, in *MSP_PROJECT_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_PROJECT_OVERVIEW(ctx context.Context, in *MSP_PROJECT_OVERVIEW_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UPDATE_MSP_PROJECT(ctx context.Context, in *UPDATE_MSP_PROJECT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mspTenantProjectClient struct {
	cc grpc1.ClientConnInterface
}

func NewMspTenantProjectClient(cc grpc1.ClientConnInterface) MspTenantProjectClient {
	return &mspTenantProjectClient{cc}
}

func (c *mspTenantProjectClient) CREATE_MSP_PROJECT(ctx context.Context, in *CREATE_MSP_PROJECT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_tenant_project/CREATE_MSP_PROJECT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspTenantProjectClient) MSP_METRIC_PROJECT_OVERVIEW(ctx context.Context, in *MSP_METRIC_PROJECT_OVERVIEW_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_tenant_project/MSP_METRIC_PROJECT_OVERVIEW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspTenantProjectClient) MSP_PROJECT_DELETE(ctx context.Context, in *MSP_PROJECT_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_tenant_project/MSP_PROJECT_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspTenantProjectClient) MSP_PROJECT_GET(ctx context.Context, in *MSP_PROJECT_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_tenant_project/MSP_PROJECT_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspTenantProjectClient) MSP_PROJECT_LIST(ctx context.Context, in *MSP_PROJECT_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_tenant_project/MSP_PROJECT_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspTenantProjectClient) MSP_PROJECT_OVERVIEW(ctx context.Context, in *MSP_PROJECT_OVERVIEW_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_tenant_project/MSP_PROJECT_OVERVIEW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mspTenantProjectClient) UPDATE_MSP_PROJECT(ctx context.Context, in *UPDATE_MSP_PROJECT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.msp.msp_tenant_project/UPDATE_MSP_PROJECT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MspTenantProjectServer is the server API for MspTenantProject service.
// All implementations should embed UnimplementedMspTenantProjectServer
// for forward compatibility
type MspTenantProjectServer interface {
	CREATE_MSP_PROJECT(context.Context, *CREATE_MSP_PROJECT_Request) (*emptypb.Empty, error)
	MSP_METRIC_PROJECT_OVERVIEW(context.Context, *MSP_METRIC_PROJECT_OVERVIEW_Request) (*emptypb.Empty, error)
	MSP_PROJECT_DELETE(context.Context, *MSP_PROJECT_DELETE_Request) (*emptypb.Empty, error)
	MSP_PROJECT_GET(context.Context, *MSP_PROJECT_GET_Request) (*emptypb.Empty, error)
	MSP_PROJECT_LIST(context.Context, *MSP_PROJECT_LIST_Request) (*emptypb.Empty, error)
	MSP_PROJECT_OVERVIEW(context.Context, *MSP_PROJECT_OVERVIEW_Request) (*emptypb.Empty, error)
	UPDATE_MSP_PROJECT(context.Context, *UPDATE_MSP_PROJECT_Request) (*emptypb.Empty, error)
}

// UnimplementedMspTenantProjectServer should be embedded to have forward compatible implementations.
type UnimplementedMspTenantProjectServer struct {
}

func (*UnimplementedMspTenantProjectServer) CREATE_MSP_PROJECT(context.Context, *CREATE_MSP_PROJECT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CREATE_MSP_PROJECT not implemented")
}
func (*UnimplementedMspTenantProjectServer) MSP_METRIC_PROJECT_OVERVIEW(context.Context, *MSP_METRIC_PROJECT_OVERVIEW_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_METRIC_PROJECT_OVERVIEW not implemented")
}
func (*UnimplementedMspTenantProjectServer) MSP_PROJECT_DELETE(context.Context, *MSP_PROJECT_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_PROJECT_DELETE not implemented")
}
func (*UnimplementedMspTenantProjectServer) MSP_PROJECT_GET(context.Context, *MSP_PROJECT_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_PROJECT_GET not implemented")
}
func (*UnimplementedMspTenantProjectServer) MSP_PROJECT_LIST(context.Context, *MSP_PROJECT_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_PROJECT_LIST not implemented")
}
func (*UnimplementedMspTenantProjectServer) MSP_PROJECT_OVERVIEW(context.Context, *MSP_PROJECT_OVERVIEW_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_PROJECT_OVERVIEW not implemented")
}
func (*UnimplementedMspTenantProjectServer) UPDATE_MSP_PROJECT(context.Context, *UPDATE_MSP_PROJECT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UPDATE_MSP_PROJECT not implemented")
}

func RegisterMspTenantProjectServer(s grpc1.ServiceRegistrar, srv MspTenantProjectServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_MspTenantProject_serviceDesc(srv, opts...), srv)
}

var _MspTenantProject_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.msp.msp_tenant_project",
	HandlerType: (*MspTenantProjectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "msp_tenant_project.proto",
}

func _get_MspTenantProject_serviceDesc(srv MspTenantProjectServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_MspTenantProject_CREATE_MSP_PROJECT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CREATE_MSP_PROJECT(ctx, req.(*CREATE_MSP_PROJECT_Request))
	}
	var _MspTenantProject_CREATE_MSP_PROJECT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspTenantProject_CREATE_MSP_PROJECT_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "CREATE_MSP_PROJECT", srv)
		_MspTenantProject_CREATE_MSP_PROJECT_Handler = h.Interceptor(_MspTenantProject_CREATE_MSP_PROJECT_Handler)
	}

	_MspTenantProject_MSP_METRIC_PROJECT_OVERVIEW_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_METRIC_PROJECT_OVERVIEW(ctx, req.(*MSP_METRIC_PROJECT_OVERVIEW_Request))
	}
	var _MspTenantProject_MSP_METRIC_PROJECT_OVERVIEW_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspTenantProject_MSP_METRIC_PROJECT_OVERVIEW_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "MSP_METRIC_PROJECT_OVERVIEW", srv)
		_MspTenantProject_MSP_METRIC_PROJECT_OVERVIEW_Handler = h.Interceptor(_MspTenantProject_MSP_METRIC_PROJECT_OVERVIEW_Handler)
	}

	_MspTenantProject_MSP_PROJECT_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_PROJECT_DELETE(ctx, req.(*MSP_PROJECT_DELETE_Request))
	}
	var _MspTenantProject_MSP_PROJECT_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspTenantProject_MSP_PROJECT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "MSP_PROJECT_DELETE", srv)
		_MspTenantProject_MSP_PROJECT_DELETE_Handler = h.Interceptor(_MspTenantProject_MSP_PROJECT_DELETE_Handler)
	}

	_MspTenantProject_MSP_PROJECT_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_PROJECT_GET(ctx, req.(*MSP_PROJECT_GET_Request))
	}
	var _MspTenantProject_MSP_PROJECT_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspTenantProject_MSP_PROJECT_GET_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "MSP_PROJECT_GET", srv)
		_MspTenantProject_MSP_PROJECT_GET_Handler = h.Interceptor(_MspTenantProject_MSP_PROJECT_GET_Handler)
	}

	_MspTenantProject_MSP_PROJECT_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_PROJECT_LIST(ctx, req.(*MSP_PROJECT_LIST_Request))
	}
	var _MspTenantProject_MSP_PROJECT_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspTenantProject_MSP_PROJECT_LIST_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "MSP_PROJECT_LIST", srv)
		_MspTenantProject_MSP_PROJECT_LIST_Handler = h.Interceptor(_MspTenantProject_MSP_PROJECT_LIST_Handler)
	}

	_MspTenantProject_MSP_PROJECT_OVERVIEW_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_PROJECT_OVERVIEW(ctx, req.(*MSP_PROJECT_OVERVIEW_Request))
	}
	var _MspTenantProject_MSP_PROJECT_OVERVIEW_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspTenantProject_MSP_PROJECT_OVERVIEW_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "MSP_PROJECT_OVERVIEW", srv)
		_MspTenantProject_MSP_PROJECT_OVERVIEW_Handler = h.Interceptor(_MspTenantProject_MSP_PROJECT_OVERVIEW_Handler)
	}

	_MspTenantProject_UPDATE_MSP_PROJECT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UPDATE_MSP_PROJECT(ctx, req.(*UPDATE_MSP_PROJECT_Request))
	}
	var _MspTenantProject_UPDATE_MSP_PROJECT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MspTenantProject_UPDATE_MSP_PROJECT_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "UPDATE_MSP_PROJECT", srv)
		_MspTenantProject_UPDATE_MSP_PROJECT_Handler = h.Interceptor(_MspTenantProject_UPDATE_MSP_PROJECT_Handler)
	}

	var serviceDesc = _MspTenantProject_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "CREATE_MSP_PROJECT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CREATE_MSP_PROJECT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspTenantProjectServer).CREATE_MSP_PROJECT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspTenantProject_CREATE_MSP_PROJECT_info)
				}
				if interceptor == nil {
					return _MspTenantProject_CREATE_MSP_PROJECT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_tenant_project/CREATE_MSP_PROJECT",
				}
				return interceptor(ctx, in, info, _MspTenantProject_CREATE_MSP_PROJECT_Handler)
			},
		},
		{
			MethodName: "MSP_METRIC_PROJECT_OVERVIEW",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_METRIC_PROJECT_OVERVIEW_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspTenantProjectServer).MSP_METRIC_PROJECT_OVERVIEW(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspTenantProject_MSP_METRIC_PROJECT_OVERVIEW_info)
				}
				if interceptor == nil {
					return _MspTenantProject_MSP_METRIC_PROJECT_OVERVIEW_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_tenant_project/MSP_METRIC_PROJECT_OVERVIEW",
				}
				return interceptor(ctx, in, info, _MspTenantProject_MSP_METRIC_PROJECT_OVERVIEW_Handler)
			},
		},
		{
			MethodName: "MSP_PROJECT_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_PROJECT_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspTenantProjectServer).MSP_PROJECT_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspTenantProject_MSP_PROJECT_DELETE_info)
				}
				if interceptor == nil {
					return _MspTenantProject_MSP_PROJECT_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_tenant_project/MSP_PROJECT_DELETE",
				}
				return interceptor(ctx, in, info, _MspTenantProject_MSP_PROJECT_DELETE_Handler)
			},
		},
		{
			MethodName: "MSP_PROJECT_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_PROJECT_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspTenantProjectServer).MSP_PROJECT_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspTenantProject_MSP_PROJECT_GET_info)
				}
				if interceptor == nil {
					return _MspTenantProject_MSP_PROJECT_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_tenant_project/MSP_PROJECT_GET",
				}
				return interceptor(ctx, in, info, _MspTenantProject_MSP_PROJECT_GET_Handler)
			},
		},
		{
			MethodName: "MSP_PROJECT_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_PROJECT_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspTenantProjectServer).MSP_PROJECT_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspTenantProject_MSP_PROJECT_LIST_info)
				}
				if interceptor == nil {
					return _MspTenantProject_MSP_PROJECT_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_tenant_project/MSP_PROJECT_LIST",
				}
				return interceptor(ctx, in, info, _MspTenantProject_MSP_PROJECT_LIST_Handler)
			},
		},
		{
			MethodName: "MSP_PROJECT_OVERVIEW",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_PROJECT_OVERVIEW_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspTenantProjectServer).MSP_PROJECT_OVERVIEW(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspTenantProject_MSP_PROJECT_OVERVIEW_info)
				}
				if interceptor == nil {
					return _MspTenantProject_MSP_PROJECT_OVERVIEW_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_tenant_project/MSP_PROJECT_OVERVIEW",
				}
				return interceptor(ctx, in, info, _MspTenantProject_MSP_PROJECT_OVERVIEW_Handler)
			},
		},
		{
			MethodName: "UPDATE_MSP_PROJECT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UPDATE_MSP_PROJECT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MspTenantProjectServer).UPDATE_MSP_PROJECT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MspTenantProject_UPDATE_MSP_PROJECT_info)
				}
				if interceptor == nil {
					return _MspTenantProject_UPDATE_MSP_PROJECT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.msp.msp_tenant_project/UPDATE_MSP_PROJECT",
				}
				return interceptor(ctx, in, info, _MspTenantProject_UPDATE_MSP_PROJECT_Handler)
			},
		},
	}
	return &serviceDesc
}
