// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: msp_tenant_project.proto

package pb

import (
	context "context"
	http1 "net/http"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// MspTenantProjectHandler is the server API for MspTenantProject service.
type MspTenantProjectHandler interface {
	// POST /api/msp/tenant/project
	CREATE_MSP_PROJECT(context.Context, *CREATE_MSP_PROJECT_Request) (*emptypb.Empty, error)
	// POST /api/msp/metrics/tenant/project/overview
	MSP_METRIC_PROJECT_OVERVIEW(context.Context, *MSP_METRIC_PROJECT_OVERVIEW_Request) (*emptypb.Empty, error)
	// DELETE /api/msp/tenant/project
	MSP_PROJECT_DELETE(context.Context, *MSP_PROJECT_DELETE_Request) (*emptypb.Empty, error)
	// GET /api/msp/tenant/project
	MSP_PROJECT_GET(context.Context, *MSP_PROJECT_GET_Request) (*emptypb.Empty, error)
	// GET /api/msp/tenant/projects
	MSP_PROJECT_LIST(context.Context, *MSP_PROJECT_LIST_Request) (*emptypb.Empty, error)
	// GET /api/msp/tenant/project/overview
	MSP_PROJECT_OVERVIEW(context.Context, *MSP_PROJECT_OVERVIEW_Request) (*emptypb.Empty, error)
	// PUT /api/msp/tenant/project
	UPDATE_MSP_PROJECT(context.Context, *UPDATE_MSP_PROJECT_Request) (*emptypb.Empty, error)
}

// RegisterMspTenantProjectHandler register MspTenantProjectHandler to http.Router.
func RegisterMspTenantProjectHandler(r http.Router, srv MspTenantProjectHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		handler := func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
		if h.HTTPInterceptor != nil {
			handler = h.HTTPInterceptor(handler)
		}
		return handler
	}

	add_CREATE_MSP_PROJECT := func(method, path string, fn func(context.Context, *CREATE_MSP_PROJECT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CREATE_MSP_PROJECT_Request))
		}
		var CREATE_MSP_PROJECT_info transport.ServiceInfo
		if h.Interceptor != nil {
			CREATE_MSP_PROJECT_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "CREATE_MSP_PROJECT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CREATE_MSP_PROJECT_info)
				}
				r = r.WithContext(ctx)
				var in CREATE_MSP_PROJECT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_METRIC_PROJECT_OVERVIEW := func(method, path string, fn func(context.Context, *MSP_METRIC_PROJECT_OVERVIEW_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_METRIC_PROJECT_OVERVIEW_Request))
		}
		var MSP_METRIC_PROJECT_OVERVIEW_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_METRIC_PROJECT_OVERVIEW_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "MSP_METRIC_PROJECT_OVERVIEW", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_METRIC_PROJECT_OVERVIEW_info)
				}
				r = r.WithContext(ctx)
				var in MSP_METRIC_PROJECT_OVERVIEW_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_PROJECT_DELETE := func(method, path string, fn func(context.Context, *MSP_PROJECT_DELETE_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_PROJECT_DELETE_Request))
		}
		var MSP_PROJECT_DELETE_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_PROJECT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "MSP_PROJECT_DELETE", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_PROJECT_DELETE_info)
				}
				r = r.WithContext(ctx)
				var in MSP_PROJECT_DELETE_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_PROJECT_GET := func(method, path string, fn func(context.Context, *MSP_PROJECT_GET_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_PROJECT_GET_Request))
		}
		var MSP_PROJECT_GET_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_PROJECT_GET_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "MSP_PROJECT_GET", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_PROJECT_GET_info)
				}
				r = r.WithContext(ctx)
				var in MSP_PROJECT_GET_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_PROJECT_LIST := func(method, path string, fn func(context.Context, *MSP_PROJECT_LIST_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_PROJECT_LIST_Request))
		}
		var MSP_PROJECT_LIST_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_PROJECT_LIST_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "MSP_PROJECT_LIST", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_PROJECT_LIST_info)
				}
				r = r.WithContext(ctx)
				var in MSP_PROJECT_LIST_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_MSP_PROJECT_OVERVIEW := func(method, path string, fn func(context.Context, *MSP_PROJECT_OVERVIEW_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*MSP_PROJECT_OVERVIEW_Request))
		}
		var MSP_PROJECT_OVERVIEW_info transport.ServiceInfo
		if h.Interceptor != nil {
			MSP_PROJECT_OVERVIEW_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "MSP_PROJECT_OVERVIEW", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, MSP_PROJECT_OVERVIEW_info)
				}
				r = r.WithContext(ctx)
				var in MSP_PROJECT_OVERVIEW_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UPDATE_MSP_PROJECT := func(method, path string, fn func(context.Context, *UPDATE_MSP_PROJECT_Request) (*emptypb.Empty, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*UPDATE_MSP_PROJECT_Request))
		}
		var UPDATE_MSP_PROJECT_info transport.ServiceInfo
		if h.Interceptor != nil {
			UPDATE_MSP_PROJECT_info = transport.NewServiceInfo("erda.openapiv1.msp.msp_tenant_project", "UPDATE_MSP_PROJECT", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				ctx := http.WithRequest(r.Context(), r)
				ctx = transport.WithHTTPHeaderForServer(ctx, r.Header)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UPDATE_MSP_PROJECT_info)
				}
				r = r.WithContext(ctx)
				var in UPDATE_MSP_PROJECT_Request
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CREATE_MSP_PROJECT("POST", "/api/msp/tenant/project", srv.CREATE_MSP_PROJECT)
	add_MSP_METRIC_PROJECT_OVERVIEW("POST", "/api/msp/metrics/tenant/project/overview", srv.MSP_METRIC_PROJECT_OVERVIEW)
	add_MSP_PROJECT_DELETE("DELETE", "/api/msp/tenant/project", srv.MSP_PROJECT_DELETE)
	add_MSP_PROJECT_GET("GET", "/api/msp/tenant/project", srv.MSP_PROJECT_GET)
	add_MSP_PROJECT_LIST("GET", "/api/msp/tenant/projects", srv.MSP_PROJECT_LIST)
	add_MSP_PROJECT_OVERVIEW("GET", "/api/msp/tenant/project/overview", srv.MSP_PROJECT_OVERVIEW)
	add_UPDATE_MSP_PROJECT("PUT", "/api/msp/tenant/project", srv.UPDATE_MSP_PROJECT)
}
