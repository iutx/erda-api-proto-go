// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: msp_tenant_project.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/msp/tenant/project/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// MspTenantProject msp_tenant_project.proto
	MspTenantProject() pb.MspTenantProjectClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		mspTenantProject: pb.NewMspTenantProjectClient(cc),
	}
}

type serviceClients struct {
	mspTenantProject pb.MspTenantProjectClient
}

func (c *serviceClients) MspTenantProject() pb.MspTenantProjectClient {
	return c.mspTenantProject
}

type mspTenantProjectWrapper struct {
	client pb.MspTenantProjectClient
	opts   []grpc1.CallOption
}

func (s *mspTenantProjectWrapper) CREATE_MSP_PROJECT(ctx context.Context, req *pb.CREATE_MSP_PROJECT_Request) (*emptypb.Empty, error) {
	return s.client.CREATE_MSP_PROJECT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspTenantProjectWrapper) MSP_METRIC_PROJECT_OVERVIEW(ctx context.Context, req *pb.MSP_METRIC_PROJECT_OVERVIEW_Request) (*emptypb.Empty, error) {
	return s.client.MSP_METRIC_PROJECT_OVERVIEW(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspTenantProjectWrapper) MSP_PROJECT_DELETE(ctx context.Context, req *pb.MSP_PROJECT_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.MSP_PROJECT_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspTenantProjectWrapper) MSP_PROJECT_GET(ctx context.Context, req *pb.MSP_PROJECT_GET_Request) (*emptypb.Empty, error) {
	return s.client.MSP_PROJECT_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspTenantProjectWrapper) MSP_PROJECT_LIST(ctx context.Context, req *pb.MSP_PROJECT_LIST_Request) (*emptypb.Empty, error) {
	return s.client.MSP_PROJECT_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspTenantProjectWrapper) MSP_PROJECT_OVERVIEW(ctx context.Context, req *pb.MSP_PROJECT_OVERVIEW_Request) (*emptypb.Empty, error) {
	return s.client.MSP_PROJECT_OVERVIEW(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *mspTenantProjectWrapper) UPDATE_MSP_PROJECT(ctx context.Context, req *pb.UPDATE_MSP_PROJECT_Request) (*emptypb.Empty, error) {
	return s.client.UPDATE_MSP_PROJECT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
