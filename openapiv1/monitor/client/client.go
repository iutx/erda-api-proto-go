// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: monitor.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/openapiv1/monitor/pb"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Client provide all service clients.
type Client interface {
	// Monitor monitor.proto
	Monitor() pb.MonitorClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		monitor: pb.NewMonitorClient(cc),
	}
}

type serviceClients struct {
	monitor pb.MonitorClient
}

func (c *serviceClients) Monitor() pb.MonitorClient {
	return c.monitor
}

type monitorWrapper struct {
	client pb.MonitorClient
	opts   []grpc1.CallOption
}

func (s *monitorWrapper) MONITOR_ADDON_LOGS_SEARCH(ctx context.Context, req *pb.MONITOR_ADDON_LOGS_SEARCH_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ADDON_LOGS_SEARCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ADDON_LOGS_TAGS_TREE(ctx context.Context, req *pb.MONITOR_ADDON_LOGS_TAGS_TREE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ADDON_LOGS_TAGS_TREE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_ALERT_ID_DELETE(ctx context.Context, req *pb.MONITOR_APM_ALERT_ID_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_ALERT_ID_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_ALERT_ID_GET(ctx context.Context, req *pb.MONITOR_APM_ALERT_ID_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_ALERT_ID_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_ALERT_ID_PUT(ctx context.Context, req *pb.MONITOR_APM_ALERT_ID_PUT_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_ALERT_ID_PUT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_ALERT_ID_SWITCH_PUT(ctx context.Context, req *pb.MONITOR_APM_ALERT_ID_SWITCH_PUT_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_ALERT_ID_SWITCH_PUT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_ALERT_LIST(ctx context.Context, req *pb.MONITOR_APM_ALERT_LIST_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_ALERT_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_ALERT_POST(ctx context.Context, req *pb.MONITOR_APM_ALERT_POST_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_ALERT_POST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_ALERT_RULE_LIST(ctx context.Context, req *pb.MONITOR_APM_ALERT_RULE_LIST_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_ALERT_RULE_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE(ctx context.Context, req *pb.MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_CUSTOMIZE_ALERT_ID_GET(ctx context.Context, req *pb.MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_CUSTOMIZE_ALERT_ID_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT(ctx context.Context, req *pb.MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT(ctx context.Context, req *pb.MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_CUSTOMIZE_ALERT_LIST(ctx context.Context, req *pb.MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_CUSTOMIZE_ALERT_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET(ctx context.Context, req *pb.MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET(ctx context.Context, req *pb.MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_CUSTOMIZE_ALERT_POST(ctx context.Context, req *pb.MONITOR_APM_CUSTOMIZE_ALERT_POST_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_CUSTOMIZE_ALERT_POST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_INSTANCE_GET(ctx context.Context, req *pb.MONITOR_APM_INSTANCE_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_INSTANCE_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_RUNTIME_GET(ctx context.Context, req *pb.MONITOR_APM_RUNTIME_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_RUNTIME_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_GET(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_PROCESS_DISKIO(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_PROCESS_DISKIO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_PROCESS_NETIO(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_PROCESS_NETIO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_SERVICES_LIST(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_SERVICES_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_TRANSLATION(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_TRANSLATION_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_TRANSLATION(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_TRANSLATION_DB(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_TRANSLATION_DB(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW(ctx context.Context, req *pb.MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TRACE_ID_GET(ctx context.Context, req *pb.MONITOR_APM_TRACE_ID_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TRACE_ID_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_APM_TRACE_LIST(ctx context.Context, req *pb.MONITOR_APM_TRACE_LIST_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_APM_TRACE_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_CLUSTER_STATUS_GET(ctx context.Context, req *pb.MONITOR_CLUSTER_STATUS_GET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_CLUSTER_STATUS_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_DASHBOARD_EXPORT(ctx context.Context, req *pb.MONITOR_DASHBOARD_EXPORT_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_DASHBOARD_EXPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_DASHBOARD_IMPORT(ctx context.Context, req *pb.MONITOR_DASHBOARD_IMPORT_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_DASHBOARD_IMPORT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_DASHBOARD_PARSE(ctx context.Context, req *pb.MONITOR_DASHBOARD_PARSE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_DASHBOARD_PARSE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_DASHBOARD_TEMPLATE(ctx context.Context, req *pb.MONITOR_DASHBOARD_TEMPLATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_DASHBOARD_TEMPLATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_DASHBOARD_TEMPLATES(ctx context.Context, req *pb.MONITOR_DASHBOARD_TEMPLATES_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_DASHBOARD_TEMPLATES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_DASHBOARD_TEMPLATE_CREATE(ctx context.Context, req *pb.MONITOR_DASHBOARD_TEMPLATE_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_DASHBOARD_TEMPLATE_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_DASHBOARD_TEMPLATE_DELETE(ctx context.Context, req *pb.MONITOR_DASHBOARD_TEMPLATE_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_DASHBOARD_TEMPLATE_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_DASHBOARD_TEMPLATE_UPDATE(ctx context.Context, req *pb.MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_DASHBOARD_TEMPLATE_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_FILEMANAGER_DOWNLOAD(ctx context.Context, req *pb.MONITOR_FILEMANAGER_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_FILEMANAGER_DOWNLOAD(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_FILEMANAGER_UPLOAD(ctx context.Context, req *pb.MONITOR_FILEMANAGER_UPLOAD_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_FILEMANAGER_UPLOAD(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_HOST_STATUS(ctx context.Context, req *pb.HostStatusListRequest) (*pb.HostStatusListResponse, error) {
	return s.client.MONITOR_HOST_STATUS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_NOTIFY_CREATE(ctx context.Context, req *pb.MONITOR_NOTIFY_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_NOTIFY_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_NOTIFY_CUSTOMIZE(ctx context.Context, req *pb.MONITOR_NOTIFY_CUSTOMIZE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_NOTIFY_CUSTOMIZE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_NOTIFY_DELETE(ctx context.Context, req *pb.MONITOR_NOTIFY_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_NOTIFY_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_NOTIFY_ENABLE(ctx context.Context, req *pb.MONITOR_NOTIFY_ENABLE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_NOTIFY_ENABLE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_NOTIFY_LIST(ctx context.Context, req *pb.MONITOR_NOTIFY_LIST_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_NOTIFY_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_NOTIFY_TEMPALTES(ctx context.Context, req *pb.MONITOR_NOTIFY_TEMPALTES_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_NOTIFY_TEMPALTES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_NOTIFY_UPDATE(ctx context.Context, req *pb.MONITOR_NOTIFY_UPDATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_NOTIFY_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_ALERT(ctx context.Context, req *pb.MONITOR_ORGS_ALERT_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_ALERT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_ALERTS(ctx context.Context, req *pb.MONITOR_ORGS_ALERTS_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_ALERTS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_ALERTS_RULES(ctx context.Context, req *pb.MONITOR_ORGS_ALERTS_RULES_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_ALERTS_RULES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_ALERT_CREATE(ctx context.Context, req *pb.MONITOR_ORGS_ALERT_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_ALERT_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_ALERT_DELETE(ctx context.Context, req *pb.MONITOR_ORGS_ALERT_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_ALERT_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_ALERT_SWITCH(ctx context.Context, req *pb.MONITOR_ORGS_ALERT_SWITCH_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_ALERT_SWITCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_ALERT_UPDATE(ctx context.Context, req *pb.MONITOR_ORGS_ALERT_UPDATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_ALERT_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_CUSTOMIZE_ALERT(ctx context.Context, req *pb.MONITOR_ORGS_CUSTOMIZE_ALERT_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_CUSTOMIZE_ALERT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_CUSTOMIZE_ALERTS(ctx context.Context, req *pb.MONITOR_ORGS_CUSTOMIZE_ALERTS_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_CUSTOMIZE_ALERTS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE(ctx context.Context, req *pb.MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW(ctx context.Context, req *pb.MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE(ctx context.Context, req *pb.MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS(ctx context.Context, req *pb.MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET(ctx context.Context, req *pb.MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH(ctx context.Context, req *pb.MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE(ctx context.Context, req *pb.MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_ALERT_RECORD(ctx context.Context, req *pb.MONITOR_ORG_ALERT_RECORD_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_ALERT_RECORD(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_ALERT_RECORDS(ctx context.Context, req *pb.MONITOR_ORG_ALERT_RECORDS_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_ALERT_RECORDS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_ALERT_RECORD_ATTRS(ctx context.Context, req *pb.MONITOR_ORG_ALERT_RECORD_ATTRS_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_ALERT_RECORD_ATTRS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_ALERT_RECORD_HISTORIES(ctx context.Context, req *pb.MONITOR_ORG_ALERT_RECORD_HISTORIES_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_ALERT_RECORD_HISTORIES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE(ctx context.Context, req *pb.MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE(ctx context.Context, req *pb.MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_HOSTS_ALERT_RECORDS(ctx context.Context, req *pb.MONITOR_ORG_HOSTS_ALERT_RECORDS_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_HOSTS_ALERT_RECORDS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_LOGS_RULE(ctx context.Context, req *pb.MONITOR_ORG_LOGS_RULE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_LOGS_RULE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_LOGS_RULES(ctx context.Context, req *pb.MONITOR_ORG_LOGS_RULES_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_LOGS_RULES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_LOGS_RULES_CREATE(ctx context.Context, req *pb.MONITOR_ORG_LOGS_RULES_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_LOGS_RULES_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_LOGS_RULES_DELETE(ctx context.Context, req *pb.MONITOR_ORG_LOGS_RULES_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_LOGS_RULES_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_LOGS_RULES_ENABLE(ctx context.Context, req *pb.MONITOR_ORG_LOGS_RULES_ENABLE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_LOGS_RULES_ENABLE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_LOGS_RULES_TEMPLATE(ctx context.Context, req *pb.MONITOR_ORG_LOGS_RULES_TEMPLATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_LOGS_RULES_TEMPLATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_LOGS_RULES_TEMPLATES(ctx context.Context, req *pb.MONITOR_ORG_LOGS_RULES_TEMPLATES_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_LOGS_RULES_TEMPLATES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_LOGS_RULES_TEST(ctx context.Context, req *pb.MONITOR_ORG_LOGS_RULES_TEST_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_LOGS_RULES_TEST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_LOGS_RULES_UPDATE(ctx context.Context, req *pb.MONITOR_ORG_LOGS_RULES_UPDATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_LOGS_RULES_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_LOGS_SEARCH(ctx context.Context, req *pb.MONITOR_ORG_LOGS_SEARCH_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_LOGS_SEARCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_LOGS_STATISTIC(ctx context.Context, req *pb.MONITOR_ORG_LOGS_STATISTIC_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_LOGS_STATISTIC(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_LOGS_TAGS_TREE(ctx context.Context, req *pb.MONITOR_ORG_LOGS_TAGS_TREE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_LOGS_TAGS_TREE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_REPORT_HISTORY(ctx context.Context, req *pb.MONITOR_ORG_REPORT_HISTORY_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_REPORT_HISTORY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_REPORT_HISTORY_CREATE(ctx context.Context, req *pb.MONITOR_ORG_REPORT_HISTORY_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_REPORT_HISTORY_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_REPORT_TASK(ctx context.Context, req *pb.MONITOR_ORG_REPORT_TASK_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_REPORT_TASK(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MONITOR_ORG_REPORT_TASK_CREATE(ctx context.Context, req *pb.MONITOR_ORG_REPORT_TASK_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.MONITOR_ORG_REPORT_TASK_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MSP_ADDON_LOGS_RULE(ctx context.Context, req *pb.MSP_ADDON_LOGS_RULE_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_RULE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MSP_ADDON_LOGS_RULES(ctx context.Context, req *pb.MSP_ADDON_LOGS_RULES_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_RULES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MSP_ADDON_LOGS_RULES_CREATE(ctx context.Context, req *pb.MSP_ADDON_LOGS_RULES_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_RULES_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MSP_ADDON_LOGS_RULES_DELETE(ctx context.Context, req *pb.MSP_ADDON_LOGS_RULES_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_RULES_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MSP_ADDON_LOGS_RULES_ENABLE(ctx context.Context, req *pb.MSP_ADDON_LOGS_RULES_ENABLE_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_RULES_ENABLE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MSP_ADDON_LOGS_RULES_TEMPLATE(ctx context.Context, req *pb.MSP_ADDON_LOGS_RULES_TEMPLATE_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_RULES_TEMPLATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MSP_ADDON_LOGS_RULES_TEMPLATES(ctx context.Context, req *pb.MSP_ADDON_LOGS_RULES_TEMPLATES_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_RULES_TEMPLATES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MSP_ADDON_LOGS_RULES_TEST(ctx context.Context, req *pb.MSP_ADDON_LOGS_RULES_TEST_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_RULES_TEST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) MSP_ADDON_LOGS_RULES_UPDATE(ctx context.Context, req *pb.MSP_ADDON_LOGS_RULES_UPDATE_Request) (*emptypb.Empty, error) {
	return s.client.MSP_ADDON_LOGS_RULES_UPDATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_ALARM_NOTIFIES(ctx context.Context, req *pb.SPOT_DASHBOARD_ALARM_NOTIFIES_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_ALARM_NOTIFIES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE(ctx context.Context, req *pb.SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE(ctx context.Context, req *pb.SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT(ctx context.Context, req *pb.SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH(ctx context.Context, req *pb.SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_ALARM_TYPES(ctx context.Context, req *pb.SPOT_DASHBOARD_ALARM_TYPES_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_ALARM_TYPES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_ALERT_METRICS(ctx context.Context, req *pb.SPOT_DASHBOARD_ALERT_METRICS_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_ALERT_METRICS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM(ctx context.Context, req *pb.SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_CHART_META(ctx context.Context, req *pb.SPOT_DASHBOARD_CHART_META_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_CHART_META(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_ORG_METRICS(ctx context.Context, req *pb.SPOT_DASHBOARD_ORG_METRICS_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_ORG_METRICS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM(ctx context.Context, req *pb.SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_ORG_METRICS_QUERY(ctx context.Context, req *pb.SPOT_DASHBOARD_ORG_METRICS_QUERY_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_ORG_METRICS_QUERY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_ORG_METRICS_QUERY_POST(ctx context.Context, req *pb.SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_ORG_METRICS_QUERY_POST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_PROJECT_METRICS(ctx context.Context, req *pb.SPOT_DASHBOARD_PROJECT_METRICS_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_PROJECT_METRICS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM(ctx context.Context, req *pb.SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_PROJECT_METRICS_QUERY(ctx context.Context, req *pb.SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_PROJECT_METRICS_QUERY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST(ctx context.Context, req *pb.SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_RESOURCES_CONTAINERS(ctx context.Context, req *pb.SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_RESOURCES_CONTAINERS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION(ctx context.Context, req *pb.SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT(ctx context.Context, req *pb.SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST(ctx context.Context, req *pb.SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_RESOURCES_GROUP(ctx context.Context, req *pb.SPOT_DASHBOARD_RESOURCES_GROUP_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_RESOURCES_GROUP(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_RESOURCES_TYPES(ctx context.Context, req *pb.SPOT_DASHBOARD_RESOURCES_TYPES_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_RESOURCES_TYPES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_RUNTIME_METRICS(ctx context.Context, req *pb.SPOT_DASHBOARD_RUNTIME_METRICS_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_RUNTIME_METRICS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM(ctx context.Context, req *pb.SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_RUNTIME_METRICS_QUERY(ctx context.Context, req *pb.SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_RUNTIME_METRICS_QUERY(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST(ctx context.Context, req *pb.SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM(ctx context.Context, req *pb.SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_DASHBOARD_SYSTEM_POD_METRICS(ctx context.Context, req *pb.SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_DASHBOARD_SYSTEM_POD_METRICS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_FINISH(ctx context.Context, req *pb.SPOT_JVM_PROFILER_FINISH_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_FINISH(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_HEAP_GC(ctx context.Context, req *pb.SPOT_JVM_PROFILER_HEAP_GC_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_HEAP_GC(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_HEAP_GC_STATE(ctx context.Context, req *pb.SPOT_JVM_PROFILER_HEAP_GC_STATE_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_HEAP_GC_STATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST(ctx context.Context, req *pb.SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_HEAP_STAT(ctx context.Context, req *pb.SPOT_JVM_PROFILER_HEAP_STAT_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_HEAP_STAT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_JVM_INFO(ctx context.Context, req *pb.SPOT_JVM_PROFILER_JVM_INFO_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_JVM_INFO(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_LIST(ctx context.Context, req *pb.SPOT_JVM_PROFILER_LIST_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_SERVICES(ctx context.Context, req *pb.SPOT_JVM_PROFILER_SERVICES_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_SERVICES(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_START(ctx context.Context, req *pb.SPOT_JVM_PROFILER_START_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_START(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_STATE(ctx context.Context, req *pb.SPOT_JVM_PROFILER_STATE_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_STATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_THREAD_DUMP(ctx context.Context, req *pb.SPOT_JVM_PROFILER_THREAD_DUMP_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_THREAD_DUMP(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET(ctx context.Context, req *pb.SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST(ctx context.Context, req *pb.SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE(ctx context.Context, req *pb.SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_JVM_PROFILER_THREAD_STAT(ctx context.Context, req *pb.SPOT_JVM_PROFILER_THREAD_STAT_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_JVM_PROFILER_THREAD_STAT(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_ORG_LOGS(ctx context.Context, req *pb.SPOT_ORG_LOGS_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_ORG_LOGS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_ORG_LOGS_DOWNLOAD(ctx context.Context, req *pb.SPOT_ORG_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_ORG_LOGS_DOWNLOAD(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_RUNTIME_LOGS(ctx context.Context, req *pb.SPOT_RUNTIME_LOGS_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_RUNTIME_LOGS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_RUNTIME_LOGS_DOWNLOAD(ctx context.Context, req *pb.SPOT_RUNTIME_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_RUNTIME_LOGS_DOWNLOAD(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}

func (s *monitorWrapper) SPOT_RUNTIME_REALTIME_LOGS(ctx context.Context, req *pb.SPOT_RUNTIME_REALTIME_LOGS_Request) (*emptypb.Empty, error) {
	return s.client.SPOT_RUNTIME_REALTIME_LOGS(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
