// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: monitor.proto

package pb

import (
	context "context"

	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// MonitorClient is the client API for Monitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitorClient interface {
	MONITOR_ADDON_LOGS_SEARCH(ctx context.Context, in *MONITOR_ADDON_LOGS_SEARCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ADDON_LOGS_TAGS_TREE(ctx context.Context, in *MONITOR_ADDON_LOGS_TAGS_TREE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_ID_DELETE(ctx context.Context, in *MONITOR_APM_ALERT_ID_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_ID_GET(ctx context.Context, in *MONITOR_APM_ALERT_ID_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_ID_PUT(ctx context.Context, in *MONITOR_APM_ALERT_ID_PUT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_ID_SWITCH_PUT(ctx context.Context, in *MONITOR_APM_ALERT_ID_SWITCH_PUT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_LIST(ctx context.Context, in *MONITOR_APM_ALERT_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_POST(ctx context.Context, in *MONITOR_APM_ALERT_POST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_RULE_LIST(ctx context.Context, in *MONITOR_APM_ALERT_RULE_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_ID_GET(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_LIST(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_POST(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_POST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_INSTANCE_GET(ctx context.Context, in *MONITOR_APM_INSTANCE_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_RUNTIME_GET(ctx context.Context, in *MONITOR_APM_RUNTIME_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_PROCESS_DISKIO(ctx context.Context, in *MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_PROCESS_NETIO(ctx context.Context, in *MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_SERVICES_LIST(ctx context.Context, in *MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST(ctx context.Context, in *MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_TRANSLATION(ctx context.Context, in *MONITOR_APM_TOPOLOGY_TRANSLATION_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_TRANSLATION_DB(ctx context.Context, in *MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW(ctx context.Context, in *MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TRACE_ID_GET(ctx context.Context, in *MONITOR_APM_TRACE_ID_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_APM_TRACE_LIST(ctx context.Context, in *MONITOR_APM_TRACE_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_CLUSTER_STATUS_GET(ctx context.Context, in *MONITOR_CLUSTER_STATUS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_EXPORT(ctx context.Context, in *MONITOR_DASHBOARD_EXPORT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_IMPORT(ctx context.Context, in *MONITOR_DASHBOARD_IMPORT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_PARSE(ctx context.Context, in *MONITOR_DASHBOARD_PARSE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_TEMPLATE(ctx context.Context, in *MONITOR_DASHBOARD_TEMPLATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_TEMPLATES(ctx context.Context, in *MONITOR_DASHBOARD_TEMPLATES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_TEMPLATE_CREATE(ctx context.Context, in *MONITOR_DASHBOARD_TEMPLATE_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_TEMPLATE_DELETE(ctx context.Context, in *MONITOR_DASHBOARD_TEMPLATE_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_TEMPLATE_UPDATE(ctx context.Context, in *MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_FILEMANAGER_DOWNLOAD(ctx context.Context, in *MONITOR_FILEMANAGER_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_FILEMANAGER_UPLOAD(ctx context.Context, in *MONITOR_FILEMANAGER_UPLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_HOST_STATUS(ctx context.Context, in *HostStatusListRequest, opts ...grpc.CallOption) (*HostStatusListResponse, error)
	MONITOR_NOTIFY_CREATE(ctx context.Context, in *MONITOR_NOTIFY_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_NOTIFY_CUSTOMIZE(ctx context.Context, in *MONITOR_NOTIFY_CUSTOMIZE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_NOTIFY_DELETE(ctx context.Context, in *MONITOR_NOTIFY_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_NOTIFY_ENABLE(ctx context.Context, in *MONITOR_NOTIFY_ENABLE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_NOTIFY_LIST(ctx context.Context, in *MONITOR_NOTIFY_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_NOTIFY_TEMPALTES(ctx context.Context, in *MONITOR_NOTIFY_TEMPALTES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_NOTIFY_UPDATE(ctx context.Context, in *MONITOR_NOTIFY_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERT(ctx context.Context, in *MONITOR_ORGS_ALERT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERTS(ctx context.Context, in *MONITOR_ORGS_ALERTS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERTS_RULES(ctx context.Context, in *MONITOR_ORGS_ALERTS_RULES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERT_CREATE(ctx context.Context, in *MONITOR_ORGS_ALERT_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERT_DELETE(ctx context.Context, in *MONITOR_ORGS_ALERT_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERT_SWITCH(ctx context.Context, in *MONITOR_ORGS_ALERT_SWITCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERT_UPDATE(ctx context.Context, in *MONITOR_ORGS_ALERT_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERTS(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERTS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_ALERT_RECORD(ctx context.Context, in *MONITOR_ORG_ALERT_RECORD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_ALERT_RECORDS(ctx context.Context, in *MONITOR_ORG_ALERT_RECORDS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_ALERT_RECORD_ATTRS(ctx context.Context, in *MONITOR_ORG_ALERT_RECORD_ATTRS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_ALERT_RECORD_HISTORIES(ctx context.Context, in *MONITOR_ORG_ALERT_RECORD_HISTORIES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE(ctx context.Context, in *MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE(ctx context.Context, in *MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_HOSTS_ALERT_RECORDS(ctx context.Context, in *MONITOR_ORG_HOSTS_ALERT_RECORDS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULE(ctx context.Context, in *MONITOR_ORG_LOGS_RULE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_CREATE(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_DELETE(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_ENABLE(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_ENABLE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_TEMPLATE(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_TEMPLATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_TEMPLATES(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_TEMPLATES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_TEST(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_TEST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_UPDATE(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_SEARCH(ctx context.Context, in *MONITOR_ORG_LOGS_SEARCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_STATISTIC(ctx context.Context, in *MONITOR_ORG_LOGS_STATISTIC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_TAGS_TREE(ctx context.Context, in *MONITOR_ORG_LOGS_TAGS_TREE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_REPORT_HISTORY(ctx context.Context, in *MONITOR_ORG_REPORT_HISTORY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_REPORT_HISTORY_CREATE(ctx context.Context, in *MONITOR_ORG_REPORT_HISTORY_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_REPORT_TASK(ctx context.Context, in *MONITOR_ORG_REPORT_TASK_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MONITOR_ORG_REPORT_TASK_CREATE(ctx context.Context, in *MONITOR_ORG_REPORT_TASK_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULE(ctx context.Context, in *MSP_ADDON_LOGS_RULE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES(ctx context.Context, in *MSP_ADDON_LOGS_RULES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_CREATE(ctx context.Context, in *MSP_ADDON_LOGS_RULES_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_DELETE(ctx context.Context, in *MSP_ADDON_LOGS_RULES_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_ENABLE(ctx context.Context, in *MSP_ADDON_LOGS_RULES_ENABLE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_TEMPLATE(ctx context.Context, in *MSP_ADDON_LOGS_RULES_TEMPLATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_TEMPLATES(ctx context.Context, in *MSP_ADDON_LOGS_RULES_TEMPLATES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_TEST(ctx context.Context, in *MSP_ADDON_LOGS_RULES_TEST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_UPDATE(ctx context.Context, in *MSP_ADDON_LOGS_RULES_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALARM_NOTIFIES(ctx context.Context, in *SPOT_DASHBOARD_ALARM_NOTIFIES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE(ctx context.Context, in *SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE(ctx context.Context, in *SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT(ctx context.Context, in *SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH(ctx context.Context, in *SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALARM_TYPES(ctx context.Context, in *SPOT_DASHBOARD_ALARM_TYPES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALERT_METRICS(ctx context.Context, in *SPOT_DASHBOARD_ALERT_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM(ctx context.Context, in *SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_CHART_META(ctx context.Context, in *SPOT_DASHBOARD_CHART_META_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ORG_METRICS(ctx context.Context, in *SPOT_DASHBOARD_ORG_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM(ctx context.Context, in *SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ORG_METRICS_QUERY(ctx context.Context, in *SPOT_DASHBOARD_ORG_METRICS_QUERY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ORG_METRICS_QUERY_POST(ctx context.Context, in *SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_PROJECT_METRICS(ctx context.Context, in *SPOT_DASHBOARD_PROJECT_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM(ctx context.Context, in *SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_PROJECT_METRICS_QUERY(ctx context.Context, in *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST(ctx context.Context, in *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RESOURCES_CONTAINERS(ctx context.Context, in *SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION(ctx context.Context, in *SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT(ctx context.Context, in *SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST(ctx context.Context, in *SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RESOURCES_GROUP(ctx context.Context, in *SPOT_DASHBOARD_RESOURCES_GROUP_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RESOURCES_TYPES(ctx context.Context, in *SPOT_DASHBOARD_RESOURCES_TYPES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RUNTIME_METRICS(ctx context.Context, in *SPOT_DASHBOARD_RUNTIME_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM(ctx context.Context, in *SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RUNTIME_METRICS_QUERY(ctx context.Context, in *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST(ctx context.Context, in *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM(ctx context.Context, in *SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_DASHBOARD_SYSTEM_POD_METRICS(ctx context.Context, in *SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_FINISH(ctx context.Context, in *SPOT_JVM_PROFILER_FINISH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_HEAP_GC(ctx context.Context, in *SPOT_JVM_PROFILER_HEAP_GC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_HEAP_GC_STATE(ctx context.Context, in *SPOT_JVM_PROFILER_HEAP_GC_STATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST(ctx context.Context, in *SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_HEAP_STAT(ctx context.Context, in *SPOT_JVM_PROFILER_HEAP_STAT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_JVM_INFO(ctx context.Context, in *SPOT_JVM_PROFILER_JVM_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_LIST(ctx context.Context, in *SPOT_JVM_PROFILER_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_SERVICES(ctx context.Context, in *SPOT_JVM_PROFILER_SERVICES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_START(ctx context.Context, in *SPOT_JVM_PROFILER_START_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_STATE(ctx context.Context, in *SPOT_JVM_PROFILER_STATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_THREAD_DUMP(ctx context.Context, in *SPOT_JVM_PROFILER_THREAD_DUMP_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET(ctx context.Context, in *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST(ctx context.Context, in *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE(ctx context.Context, in *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_THREAD_STAT(ctx context.Context, in *SPOT_JVM_PROFILER_THREAD_STAT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_ORG_LOGS(ctx context.Context, in *SPOT_ORG_LOGS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_ORG_LOGS_DOWNLOAD(ctx context.Context, in *SPOT_ORG_LOGS_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_RUNTIME_LOGS(ctx context.Context, in *SPOT_RUNTIME_LOGS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_RUNTIME_LOGS_DOWNLOAD(ctx context.Context, in *SPOT_RUNTIME_LOGS_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SPOT_RUNTIME_REALTIME_LOGS(ctx context.Context, in *SPOT_RUNTIME_REALTIME_LOGS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type monitorClient struct {
	cc grpc1.ClientConnInterface
}

func NewMonitorClient(cc grpc1.ClientConnInterface) MonitorClient {
	return &monitorClient{cc}
}

func (c *monitorClient) MONITOR_ADDON_LOGS_SEARCH(ctx context.Context, in *MONITOR_ADDON_LOGS_SEARCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ADDON_LOGS_SEARCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ADDON_LOGS_TAGS_TREE(ctx context.Context, in *MONITOR_ADDON_LOGS_TAGS_TREE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ADDON_LOGS_TAGS_TREE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_ALERT_ID_DELETE(ctx context.Context, in *MONITOR_APM_ALERT_ID_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_ID_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_ALERT_ID_GET(ctx context.Context, in *MONITOR_APM_ALERT_ID_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_ID_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_ALERT_ID_PUT(ctx context.Context, in *MONITOR_APM_ALERT_ID_PUT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_ID_PUT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_ALERT_ID_SWITCH_PUT(ctx context.Context, in *MONITOR_APM_ALERT_ID_SWITCH_PUT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_ID_SWITCH_PUT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_ALERT_LIST(ctx context.Context, in *MONITOR_APM_ALERT_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_ALERT_POST(ctx context.Context, in *MONITOR_APM_ALERT_POST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_POST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_ALERT_RULE_LIST(ctx context.Context, in *MONITOR_APM_ALERT_RULE_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_RULE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_CUSTOMIZE_ALERT_ID_GET(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_ID_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_CUSTOMIZE_ALERT_LIST(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_CUSTOMIZE_ALERT_POST(ctx context.Context, in *MONITOR_APM_CUSTOMIZE_ALERT_POST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_POST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_INSTANCE_GET(ctx context.Context, in *MONITOR_APM_INSTANCE_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_INSTANCE_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_RUNTIME_GET(ctx context.Context, in *MONITOR_APM_RUNTIME_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_RUNTIME_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_PROCESS_DISKIO(ctx context.Context, in *MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_PROCESS_DISKIO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_PROCESS_NETIO(ctx context.Context, in *MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_PROCESS_NETIO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_SERVICES_LIST(ctx context.Context, in *MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_SERVICES_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST(ctx context.Context, in *MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET(ctx context.Context, in *MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_TRANSLATION(ctx context.Context, in *MONITOR_APM_TOPOLOGY_TRANSLATION_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_TRANSLATION", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_TRANSLATION_DB(ctx context.Context, in *MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_TRANSLATION_DB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW(ctx context.Context, in *MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TRACE_ID_GET(ctx context.Context, in *MONITOR_APM_TRACE_ID_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TRACE_ID_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_APM_TRACE_LIST(ctx context.Context, in *MONITOR_APM_TRACE_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_APM_TRACE_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_CLUSTER_STATUS_GET(ctx context.Context, in *MONITOR_CLUSTER_STATUS_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_CLUSTER_STATUS_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_DASHBOARD_EXPORT(ctx context.Context, in *MONITOR_DASHBOARD_EXPORT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_EXPORT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_DASHBOARD_IMPORT(ctx context.Context, in *MONITOR_DASHBOARD_IMPORT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_IMPORT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_DASHBOARD_PARSE(ctx context.Context, in *MONITOR_DASHBOARD_PARSE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_PARSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_DASHBOARD_TEMPLATE(ctx context.Context, in *MONITOR_DASHBOARD_TEMPLATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_TEMPLATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_DASHBOARD_TEMPLATES(ctx context.Context, in *MONITOR_DASHBOARD_TEMPLATES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_TEMPLATES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_DASHBOARD_TEMPLATE_CREATE(ctx context.Context, in *MONITOR_DASHBOARD_TEMPLATE_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_TEMPLATE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_DASHBOARD_TEMPLATE_DELETE(ctx context.Context, in *MONITOR_DASHBOARD_TEMPLATE_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_TEMPLATE_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_DASHBOARD_TEMPLATE_UPDATE(ctx context.Context, in *MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_TEMPLATE_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_FILEMANAGER_DOWNLOAD(ctx context.Context, in *MONITOR_FILEMANAGER_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_FILEMANAGER_DOWNLOAD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_FILEMANAGER_UPLOAD(ctx context.Context, in *MONITOR_FILEMANAGER_UPLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_FILEMANAGER_UPLOAD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_HOST_STATUS(ctx context.Context, in *HostStatusListRequest, opts ...grpc.CallOption) (*HostStatusListResponse, error) {
	out := new(HostStatusListResponse)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_HOST_STATUS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_NOTIFY_CREATE(ctx context.Context, in *MONITOR_NOTIFY_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_NOTIFY_CUSTOMIZE(ctx context.Context, in *MONITOR_NOTIFY_CUSTOMIZE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_CUSTOMIZE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_NOTIFY_DELETE(ctx context.Context, in *MONITOR_NOTIFY_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_NOTIFY_ENABLE(ctx context.Context, in *MONITOR_NOTIFY_ENABLE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_ENABLE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_NOTIFY_LIST(ctx context.Context, in *MONITOR_NOTIFY_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_NOTIFY_TEMPALTES(ctx context.Context, in *MONITOR_NOTIFY_TEMPALTES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_TEMPALTES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_NOTIFY_UPDATE(ctx context.Context, in *MONITOR_NOTIFY_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_ALERT(ctx context.Context, in *MONITOR_ORGS_ALERT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_ALERTS(ctx context.Context, in *MONITOR_ORGS_ALERTS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_ALERTS_RULES(ctx context.Context, in *MONITOR_ORGS_ALERTS_RULES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERTS_RULES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_ALERT_CREATE(ctx context.Context, in *MONITOR_ORGS_ALERT_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERT_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_ALERT_DELETE(ctx context.Context, in *MONITOR_ORGS_ALERT_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERT_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_ALERT_SWITCH(ctx context.Context, in *MONITOR_ORGS_ALERT_SWITCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERT_SWITCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_ALERT_UPDATE(ctx context.Context, in *MONITOR_ORGS_ALERT_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERT_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_CUSTOMIZE_ALERT(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_CUSTOMIZE_ALERTS(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERTS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE(ctx context.Context, in *MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_ALERT_RECORD(ctx context.Context, in *MONITOR_ORG_ALERT_RECORD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_ALERT_RECORD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_ALERT_RECORDS(ctx context.Context, in *MONITOR_ORG_ALERT_RECORDS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_ALERT_RECORDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_ALERT_RECORD_ATTRS(ctx context.Context, in *MONITOR_ORG_ALERT_RECORD_ATTRS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_ALERT_RECORD_ATTRS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_ALERT_RECORD_HISTORIES(ctx context.Context, in *MONITOR_ORG_ALERT_RECORD_HISTORIES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_ALERT_RECORD_HISTORIES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE(ctx context.Context, in *MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE(ctx context.Context, in *MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_HOSTS_ALERT_RECORDS(ctx context.Context, in *MONITOR_ORG_HOSTS_ALERT_RECORDS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_HOSTS_ALERT_RECORDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_LOGS_RULE(ctx context.Context, in *MONITOR_ORG_LOGS_RULE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_LOGS_RULES(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_LOGS_RULES_CREATE(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_LOGS_RULES_DELETE(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_LOGS_RULES_ENABLE(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_ENABLE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_ENABLE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_LOGS_RULES_TEMPLATE(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_TEMPLATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_TEMPLATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_LOGS_RULES_TEMPLATES(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_TEMPLATES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_TEMPLATES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_LOGS_RULES_TEST(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_TEST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_TEST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_LOGS_RULES_UPDATE(ctx context.Context, in *MONITOR_ORG_LOGS_RULES_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_LOGS_SEARCH(ctx context.Context, in *MONITOR_ORG_LOGS_SEARCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_SEARCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_LOGS_STATISTIC(ctx context.Context, in *MONITOR_ORG_LOGS_STATISTIC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_STATISTIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_LOGS_TAGS_TREE(ctx context.Context, in *MONITOR_ORG_LOGS_TAGS_TREE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_TAGS_TREE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_REPORT_HISTORY(ctx context.Context, in *MONITOR_ORG_REPORT_HISTORY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_REPORT_HISTORY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_REPORT_HISTORY_CREATE(ctx context.Context, in *MONITOR_ORG_REPORT_HISTORY_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_REPORT_HISTORY_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_REPORT_TASK(ctx context.Context, in *MONITOR_ORG_REPORT_TASK_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_REPORT_TASK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MONITOR_ORG_REPORT_TASK_CREATE(ctx context.Context, in *MONITOR_ORG_REPORT_TASK_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MONITOR_ORG_REPORT_TASK_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MSP_ADDON_LOGS_RULE(ctx context.Context, in *MSP_ADDON_LOGS_RULE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MSP_ADDON_LOGS_RULES(ctx context.Context, in *MSP_ADDON_LOGS_RULES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MSP_ADDON_LOGS_RULES_CREATE(ctx context.Context, in *MSP_ADDON_LOGS_RULES_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MSP_ADDON_LOGS_RULES_DELETE(ctx context.Context, in *MSP_ADDON_LOGS_RULES_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MSP_ADDON_LOGS_RULES_ENABLE(ctx context.Context, in *MSP_ADDON_LOGS_RULES_ENABLE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_ENABLE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MSP_ADDON_LOGS_RULES_TEMPLATE(ctx context.Context, in *MSP_ADDON_LOGS_RULES_TEMPLATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_TEMPLATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MSP_ADDON_LOGS_RULES_TEMPLATES(ctx context.Context, in *MSP_ADDON_LOGS_RULES_TEMPLATES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_TEMPLATES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MSP_ADDON_LOGS_RULES_TEST(ctx context.Context, in *MSP_ADDON_LOGS_RULES_TEST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_TEST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) MSP_ADDON_LOGS_RULES_UPDATE(ctx context.Context, in *MSP_ADDON_LOGS_RULES_UPDATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_UPDATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_ALARM_NOTIFIES(ctx context.Context, in *SPOT_DASHBOARD_ALARM_NOTIFIES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALARM_NOTIFIES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE(ctx context.Context, in *SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE(ctx context.Context, in *SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT(ctx context.Context, in *SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH(ctx context.Context, in *SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_ALARM_TYPES(ctx context.Context, in *SPOT_DASHBOARD_ALARM_TYPES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALARM_TYPES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_ALERT_METRICS(ctx context.Context, in *SPOT_DASHBOARD_ALERT_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALERT_METRICS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM(ctx context.Context, in *SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_CHART_META(ctx context.Context, in *SPOT_DASHBOARD_CHART_META_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_CHART_META", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_ORG_METRICS(ctx context.Context, in *SPOT_DASHBOARD_ORG_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ORG_METRICS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM(ctx context.Context, in *SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_ORG_METRICS_QUERY(ctx context.Context, in *SPOT_DASHBOARD_ORG_METRICS_QUERY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ORG_METRICS_QUERY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_ORG_METRICS_QUERY_POST(ctx context.Context, in *SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ORG_METRICS_QUERY_POST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_PROJECT_METRICS(ctx context.Context, in *SPOT_DASHBOARD_PROJECT_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_PROJECT_METRICS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM(ctx context.Context, in *SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_PROJECT_METRICS_QUERY(ctx context.Context, in *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_PROJECT_METRICS_QUERY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST(ctx context.Context, in *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_RESOURCES_CONTAINERS(ctx context.Context, in *SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RESOURCES_CONTAINERS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION(ctx context.Context, in *SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT(ctx context.Context, in *SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST(ctx context.Context, in *SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_RESOURCES_GROUP(ctx context.Context, in *SPOT_DASHBOARD_RESOURCES_GROUP_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RESOURCES_GROUP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_RESOURCES_TYPES(ctx context.Context, in *SPOT_DASHBOARD_RESOURCES_TYPES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RESOURCES_TYPES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_RUNTIME_METRICS(ctx context.Context, in *SPOT_DASHBOARD_RUNTIME_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RUNTIME_METRICS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM(ctx context.Context, in *SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_RUNTIME_METRICS_QUERY(ctx context.Context, in *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RUNTIME_METRICS_QUERY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST(ctx context.Context, in *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM(ctx context.Context, in *SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_DASHBOARD_SYSTEM_POD_METRICS(ctx context.Context, in *SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_SYSTEM_POD_METRICS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_FINISH(ctx context.Context, in *SPOT_JVM_PROFILER_FINISH_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_FINISH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_HEAP_GC(ctx context.Context, in *SPOT_JVM_PROFILER_HEAP_GC_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_HEAP_GC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_HEAP_GC_STATE(ctx context.Context, in *SPOT_JVM_PROFILER_HEAP_GC_STATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_HEAP_GC_STATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST(ctx context.Context, in *SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_HEAP_STAT(ctx context.Context, in *SPOT_JVM_PROFILER_HEAP_STAT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_HEAP_STAT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_JVM_INFO(ctx context.Context, in *SPOT_JVM_PROFILER_JVM_INFO_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_JVM_INFO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_LIST(ctx context.Context, in *SPOT_JVM_PROFILER_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_SERVICES(ctx context.Context, in *SPOT_JVM_PROFILER_SERVICES_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_SERVICES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_START(ctx context.Context, in *SPOT_JVM_PROFILER_START_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_START", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_STATE(ctx context.Context, in *SPOT_JVM_PROFILER_STATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_STATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_THREAD_DUMP(ctx context.Context, in *SPOT_JVM_PROFILER_THREAD_DUMP_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_THREAD_DUMP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET(ctx context.Context, in *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST(ctx context.Context, in *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE(ctx context.Context, in *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_JVM_PROFILER_THREAD_STAT(ctx context.Context, in *SPOT_JVM_PROFILER_THREAD_STAT_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_THREAD_STAT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_ORG_LOGS(ctx context.Context, in *SPOT_ORG_LOGS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_ORG_LOGS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_ORG_LOGS_DOWNLOAD(ctx context.Context, in *SPOT_ORG_LOGS_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_ORG_LOGS_DOWNLOAD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_RUNTIME_LOGS(ctx context.Context, in *SPOT_RUNTIME_LOGS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_RUNTIME_LOGS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_RUNTIME_LOGS_DOWNLOAD(ctx context.Context, in *SPOT_RUNTIME_LOGS_DOWNLOAD_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_RUNTIME_LOGS_DOWNLOAD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) SPOT_RUNTIME_REALTIME_LOGS(ctx context.Context, in *SPOT_RUNTIME_REALTIME_LOGS_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/erda.openapiv1.monitor.monitor/SPOT_RUNTIME_REALTIME_LOGS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorServer is the server API for Monitor service.
// All implementations should embed UnimplementedMonitorServer
// for forward compatibility
type MonitorServer interface {
	MONITOR_ADDON_LOGS_SEARCH(context.Context, *MONITOR_ADDON_LOGS_SEARCH_Request) (*emptypb.Empty, error)
	MONITOR_ADDON_LOGS_TAGS_TREE(context.Context, *MONITOR_ADDON_LOGS_TAGS_TREE_Request) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_ID_DELETE(context.Context, *MONITOR_APM_ALERT_ID_DELETE_Request) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_ID_GET(context.Context, *MONITOR_APM_ALERT_ID_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_ID_PUT(context.Context, *MONITOR_APM_ALERT_ID_PUT_Request) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_ID_SWITCH_PUT(context.Context, *MONITOR_APM_ALERT_ID_SWITCH_PUT_Request) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_LIST(context.Context, *MONITOR_APM_ALERT_LIST_Request) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_POST(context.Context, *MONITOR_APM_ALERT_POST_Request) (*emptypb.Empty, error)
	MONITOR_APM_ALERT_RULE_LIST(context.Context, *MONITOR_APM_ALERT_RULE_LIST_Request) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_ID_GET(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_LIST(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_CUSTOMIZE_ALERT_POST(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_POST_Request) (*emptypb.Empty, error)
	MONITOR_APM_INSTANCE_GET(context.Context, *MONITOR_APM_INSTANCE_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_RUNTIME_GET(context.Context, *MONITOR_APM_RUNTIME_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET(context.Context, *MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET(context.Context, *MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_GET(context.Context, *MONITOR_APM_TOPOLOGY_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET(context.Context, *MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_PROCESS_DISKIO(context.Context, *MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET(context.Context, *MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_PROCESS_NETIO(context.Context, *MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET(context.Context, *MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET(context.Context, *MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_SERVICES_LIST(context.Context, *MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST(context.Context, *MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET(context.Context, *MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET(context.Context, *MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_TRANSLATION(context.Context, *MONITOR_APM_TOPOLOGY_TRANSLATION_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_TRANSLATION_DB(context.Context, *MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request) (*emptypb.Empty, error)
	MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW(context.Context, *MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request) (*emptypb.Empty, error)
	MONITOR_APM_TRACE_ID_GET(context.Context, *MONITOR_APM_TRACE_ID_GET_Request) (*emptypb.Empty, error)
	MONITOR_APM_TRACE_LIST(context.Context, *MONITOR_APM_TRACE_LIST_Request) (*emptypb.Empty, error)
	MONITOR_CLUSTER_STATUS_GET(context.Context, *MONITOR_CLUSTER_STATUS_GET_Request) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_EXPORT(context.Context, *MONITOR_DASHBOARD_EXPORT_Request) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_IMPORT(context.Context, *MONITOR_DASHBOARD_IMPORT_Request) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_PARSE(context.Context, *MONITOR_DASHBOARD_PARSE_Request) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_TEMPLATE(context.Context, *MONITOR_DASHBOARD_TEMPLATE_Request) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_TEMPLATES(context.Context, *MONITOR_DASHBOARD_TEMPLATES_Request) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_TEMPLATE_CREATE(context.Context, *MONITOR_DASHBOARD_TEMPLATE_CREATE_Request) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_TEMPLATE_DELETE(context.Context, *MONITOR_DASHBOARD_TEMPLATE_DELETE_Request) (*emptypb.Empty, error)
	MONITOR_DASHBOARD_TEMPLATE_UPDATE(context.Context, *MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request) (*emptypb.Empty, error)
	MONITOR_FILEMANAGER_DOWNLOAD(context.Context, *MONITOR_FILEMANAGER_DOWNLOAD_Request) (*emptypb.Empty, error)
	MONITOR_FILEMANAGER_UPLOAD(context.Context, *MONITOR_FILEMANAGER_UPLOAD_Request) (*emptypb.Empty, error)
	MONITOR_HOST_STATUS(context.Context, *HostStatusListRequest) (*HostStatusListResponse, error)
	MONITOR_NOTIFY_CREATE(context.Context, *MONITOR_NOTIFY_CREATE_Request) (*emptypb.Empty, error)
	MONITOR_NOTIFY_CUSTOMIZE(context.Context, *MONITOR_NOTIFY_CUSTOMIZE_Request) (*emptypb.Empty, error)
	MONITOR_NOTIFY_DELETE(context.Context, *MONITOR_NOTIFY_DELETE_Request) (*emptypb.Empty, error)
	MONITOR_NOTIFY_ENABLE(context.Context, *MONITOR_NOTIFY_ENABLE_Request) (*emptypb.Empty, error)
	MONITOR_NOTIFY_LIST(context.Context, *MONITOR_NOTIFY_LIST_Request) (*emptypb.Empty, error)
	MONITOR_NOTIFY_TEMPALTES(context.Context, *MONITOR_NOTIFY_TEMPALTES_Request) (*emptypb.Empty, error)
	MONITOR_NOTIFY_UPDATE(context.Context, *MONITOR_NOTIFY_UPDATE_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERT(context.Context, *MONITOR_ORGS_ALERT_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERTS(context.Context, *MONITOR_ORGS_ALERTS_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERTS_RULES(context.Context, *MONITOR_ORGS_ALERTS_RULES_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERT_CREATE(context.Context, *MONITOR_ORGS_ALERT_CREATE_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERT_DELETE(context.Context, *MONITOR_ORGS_ALERT_DELETE_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERT_SWITCH(context.Context, *MONITOR_ORGS_ALERT_SWITCH_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_ALERT_UPDATE(context.Context, *MONITOR_ORGS_ALERT_UPDATE_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERTS(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERTS_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request) (*emptypb.Empty, error)
	MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request) (*emptypb.Empty, error)
	MONITOR_ORG_ALERT_RECORD(context.Context, *MONITOR_ORG_ALERT_RECORD_Request) (*emptypb.Empty, error)
	MONITOR_ORG_ALERT_RECORDS(context.Context, *MONITOR_ORG_ALERT_RECORDS_Request) (*emptypb.Empty, error)
	MONITOR_ORG_ALERT_RECORD_ATTRS(context.Context, *MONITOR_ORG_ALERT_RECORD_ATTRS_Request) (*emptypb.Empty, error)
	MONITOR_ORG_ALERT_RECORD_HISTORIES(context.Context, *MONITOR_ORG_ALERT_RECORD_HISTORIES_Request) (*emptypb.Empty, error)
	MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE(context.Context, *MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request) (*emptypb.Empty, error)
	MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE(context.Context, *MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request) (*emptypb.Empty, error)
	MONITOR_ORG_HOSTS_ALERT_RECORDS(context.Context, *MONITOR_ORG_HOSTS_ALERT_RECORDS_Request) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULE(context.Context, *MONITOR_ORG_LOGS_RULE_Request) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES(context.Context, *MONITOR_ORG_LOGS_RULES_Request) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_CREATE(context.Context, *MONITOR_ORG_LOGS_RULES_CREATE_Request) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_DELETE(context.Context, *MONITOR_ORG_LOGS_RULES_DELETE_Request) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_ENABLE(context.Context, *MONITOR_ORG_LOGS_RULES_ENABLE_Request) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_TEMPLATE(context.Context, *MONITOR_ORG_LOGS_RULES_TEMPLATE_Request) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_TEMPLATES(context.Context, *MONITOR_ORG_LOGS_RULES_TEMPLATES_Request) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_TEST(context.Context, *MONITOR_ORG_LOGS_RULES_TEST_Request) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_RULES_UPDATE(context.Context, *MONITOR_ORG_LOGS_RULES_UPDATE_Request) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_SEARCH(context.Context, *MONITOR_ORG_LOGS_SEARCH_Request) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_STATISTIC(context.Context, *MONITOR_ORG_LOGS_STATISTIC_Request) (*emptypb.Empty, error)
	MONITOR_ORG_LOGS_TAGS_TREE(context.Context, *MONITOR_ORG_LOGS_TAGS_TREE_Request) (*emptypb.Empty, error)
	MONITOR_ORG_REPORT_HISTORY(context.Context, *MONITOR_ORG_REPORT_HISTORY_Request) (*emptypb.Empty, error)
	MONITOR_ORG_REPORT_HISTORY_CREATE(context.Context, *MONITOR_ORG_REPORT_HISTORY_CREATE_Request) (*emptypb.Empty, error)
	MONITOR_ORG_REPORT_TASK(context.Context, *MONITOR_ORG_REPORT_TASK_Request) (*emptypb.Empty, error)
	MONITOR_ORG_REPORT_TASK_CREATE(context.Context, *MONITOR_ORG_REPORT_TASK_CREATE_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULE(context.Context, *MSP_ADDON_LOGS_RULE_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES(context.Context, *MSP_ADDON_LOGS_RULES_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_CREATE(context.Context, *MSP_ADDON_LOGS_RULES_CREATE_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_DELETE(context.Context, *MSP_ADDON_LOGS_RULES_DELETE_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_ENABLE(context.Context, *MSP_ADDON_LOGS_RULES_ENABLE_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_TEMPLATE(context.Context, *MSP_ADDON_LOGS_RULES_TEMPLATE_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_TEMPLATES(context.Context, *MSP_ADDON_LOGS_RULES_TEMPLATES_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_TEST(context.Context, *MSP_ADDON_LOGS_RULES_TEST_Request) (*emptypb.Empty, error)
	MSP_ADDON_LOGS_RULES_UPDATE(context.Context, *MSP_ADDON_LOGS_RULES_UPDATE_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALARM_NOTIFIES(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALARM_TYPES(context.Context, *SPOT_DASHBOARD_ALARM_TYPES_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALERT_METRICS(context.Context, *SPOT_DASHBOARD_ALERT_METRICS_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_CHART_META(context.Context, *SPOT_DASHBOARD_CHART_META_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ORG_METRICS(context.Context, *SPOT_DASHBOARD_ORG_METRICS_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ORG_METRICS_QUERY(context.Context, *SPOT_DASHBOARD_ORG_METRICS_QUERY_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_ORG_METRICS_QUERY_POST(context.Context, *SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_PROJECT_METRICS(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_PROJECT_METRICS_QUERY(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RESOURCES_CONTAINERS(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RESOURCES_GROUP(context.Context, *SPOT_DASHBOARD_RESOURCES_GROUP_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RESOURCES_TYPES(context.Context, *SPOT_DASHBOARD_RESOURCES_TYPES_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RUNTIME_METRICS(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RUNTIME_METRICS_QUERY(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error)
	SPOT_DASHBOARD_SYSTEM_POD_METRICS(context.Context, *SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_FINISH(context.Context, *SPOT_JVM_PROFILER_FINISH_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_HEAP_GC(context.Context, *SPOT_JVM_PROFILER_HEAP_GC_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_HEAP_GC_STATE(context.Context, *SPOT_JVM_PROFILER_HEAP_GC_STATE_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST(context.Context, *SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_HEAP_STAT(context.Context, *SPOT_JVM_PROFILER_HEAP_STAT_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_JVM_INFO(context.Context, *SPOT_JVM_PROFILER_JVM_INFO_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_LIST(context.Context, *SPOT_JVM_PROFILER_LIST_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_SERVICES(context.Context, *SPOT_JVM_PROFILER_SERVICES_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_START(context.Context, *SPOT_JVM_PROFILER_START_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_STATE(context.Context, *SPOT_JVM_PROFILER_STATE_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_THREAD_DUMP(context.Context, *SPOT_JVM_PROFILER_THREAD_DUMP_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET(context.Context, *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST(context.Context, *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE(context.Context, *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request) (*emptypb.Empty, error)
	SPOT_JVM_PROFILER_THREAD_STAT(context.Context, *SPOT_JVM_PROFILER_THREAD_STAT_Request) (*emptypb.Empty, error)
	SPOT_ORG_LOGS(context.Context, *SPOT_ORG_LOGS_Request) (*emptypb.Empty, error)
	SPOT_ORG_LOGS_DOWNLOAD(context.Context, *SPOT_ORG_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error)
	SPOT_RUNTIME_LOGS(context.Context, *SPOT_RUNTIME_LOGS_Request) (*emptypb.Empty, error)
	SPOT_RUNTIME_LOGS_DOWNLOAD(context.Context, *SPOT_RUNTIME_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error)
	SPOT_RUNTIME_REALTIME_LOGS(context.Context, *SPOT_RUNTIME_REALTIME_LOGS_Request) (*emptypb.Empty, error)
}

// UnimplementedMonitorServer should be embedded to have forward compatible implementations.
type UnimplementedMonitorServer struct {
}

func (*UnimplementedMonitorServer) MONITOR_ADDON_LOGS_SEARCH(context.Context, *MONITOR_ADDON_LOGS_SEARCH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ADDON_LOGS_SEARCH not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ADDON_LOGS_TAGS_TREE(context.Context, *MONITOR_ADDON_LOGS_TAGS_TREE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ADDON_LOGS_TAGS_TREE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_ALERT_ID_DELETE(context.Context, *MONITOR_APM_ALERT_ID_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_ALERT_ID_DELETE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_ALERT_ID_GET(context.Context, *MONITOR_APM_ALERT_ID_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_ALERT_ID_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_ALERT_ID_PUT(context.Context, *MONITOR_APM_ALERT_ID_PUT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_ALERT_ID_PUT not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_ALERT_ID_SWITCH_PUT(context.Context, *MONITOR_APM_ALERT_ID_SWITCH_PUT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_ALERT_ID_SWITCH_PUT not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_ALERT_LIST(context.Context, *MONITOR_APM_ALERT_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_ALERT_LIST not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_ALERT_POST(context.Context, *MONITOR_APM_ALERT_POST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_ALERT_POST not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_ALERT_RULE_LIST(context.Context, *MONITOR_APM_ALERT_RULE_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_ALERT_RULE_LIST not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_CUSTOMIZE_ALERT_ID_GET(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_CUSTOMIZE_ALERT_ID_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_CUSTOMIZE_ALERT_LIST(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_CUSTOMIZE_ALERT_LIST not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_CUSTOMIZE_ALERT_POST(context.Context, *MONITOR_APM_CUSTOMIZE_ALERT_POST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_CUSTOMIZE_ALERT_POST not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_INSTANCE_GET(context.Context, *MONITOR_APM_INSTANCE_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_INSTANCE_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_RUNTIME_GET(context.Context, *MONITOR_APM_RUNTIME_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_RUNTIME_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET(context.Context, *MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET(context.Context, *MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_GET(context.Context, *MONITOR_APM_TOPOLOGY_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET(context.Context, *MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_PROCESS_DISKIO(context.Context, *MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_PROCESS_DISKIO not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET(context.Context, *MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_PROCESS_NETIO(context.Context, *MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_PROCESS_NETIO not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET(context.Context, *MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET(context.Context, *MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_SERVICES_LIST(context.Context, *MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_SERVICES_LIST not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST(context.Context, *MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET(context.Context, *MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET(context.Context, *MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_TRANSLATION(context.Context, *MONITOR_APM_TOPOLOGY_TRANSLATION_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_TRANSLATION not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_TRANSLATION_DB(context.Context, *MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_TRANSLATION_DB not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW(context.Context, *MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TRACE_ID_GET(context.Context, *MONITOR_APM_TRACE_ID_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TRACE_ID_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_APM_TRACE_LIST(context.Context, *MONITOR_APM_TRACE_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_APM_TRACE_LIST not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_CLUSTER_STATUS_GET(context.Context, *MONITOR_CLUSTER_STATUS_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_CLUSTER_STATUS_GET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_DASHBOARD_EXPORT(context.Context, *MONITOR_DASHBOARD_EXPORT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_DASHBOARD_EXPORT not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_DASHBOARD_IMPORT(context.Context, *MONITOR_DASHBOARD_IMPORT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_DASHBOARD_IMPORT not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_DASHBOARD_PARSE(context.Context, *MONITOR_DASHBOARD_PARSE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_DASHBOARD_PARSE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_DASHBOARD_TEMPLATE(context.Context, *MONITOR_DASHBOARD_TEMPLATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_DASHBOARD_TEMPLATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_DASHBOARD_TEMPLATES(context.Context, *MONITOR_DASHBOARD_TEMPLATES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_DASHBOARD_TEMPLATES not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_DASHBOARD_TEMPLATE_CREATE(context.Context, *MONITOR_DASHBOARD_TEMPLATE_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_DASHBOARD_TEMPLATE_CREATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_DASHBOARD_TEMPLATE_DELETE(context.Context, *MONITOR_DASHBOARD_TEMPLATE_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_DASHBOARD_TEMPLATE_DELETE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_DASHBOARD_TEMPLATE_UPDATE(context.Context, *MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_DASHBOARD_TEMPLATE_UPDATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_FILEMANAGER_DOWNLOAD(context.Context, *MONITOR_FILEMANAGER_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_FILEMANAGER_DOWNLOAD not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_FILEMANAGER_UPLOAD(context.Context, *MONITOR_FILEMANAGER_UPLOAD_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_FILEMANAGER_UPLOAD not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_HOST_STATUS(context.Context, *HostStatusListRequest) (*HostStatusListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_HOST_STATUS not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_NOTIFY_CREATE(context.Context, *MONITOR_NOTIFY_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_NOTIFY_CREATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_NOTIFY_CUSTOMIZE(context.Context, *MONITOR_NOTIFY_CUSTOMIZE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_NOTIFY_CUSTOMIZE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_NOTIFY_DELETE(context.Context, *MONITOR_NOTIFY_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_NOTIFY_DELETE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_NOTIFY_ENABLE(context.Context, *MONITOR_NOTIFY_ENABLE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_NOTIFY_ENABLE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_NOTIFY_LIST(context.Context, *MONITOR_NOTIFY_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_NOTIFY_LIST not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_NOTIFY_TEMPALTES(context.Context, *MONITOR_NOTIFY_TEMPALTES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_NOTIFY_TEMPALTES not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_NOTIFY_UPDATE(context.Context, *MONITOR_NOTIFY_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_NOTIFY_UPDATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_ALERT(context.Context, *MONITOR_ORGS_ALERT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_ALERT not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_ALERTS(context.Context, *MONITOR_ORGS_ALERTS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_ALERTS not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_ALERTS_RULES(context.Context, *MONITOR_ORGS_ALERTS_RULES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_ALERTS_RULES not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_ALERT_CREATE(context.Context, *MONITOR_ORGS_ALERT_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_ALERT_CREATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_ALERT_DELETE(context.Context, *MONITOR_ORGS_ALERT_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_ALERT_DELETE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_ALERT_SWITCH(context.Context, *MONITOR_ORGS_ALERT_SWITCH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_ALERT_SWITCH not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_ALERT_UPDATE(context.Context, *MONITOR_ORGS_ALERT_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_ALERT_UPDATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_CUSTOMIZE_ALERT(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_CUSTOMIZE_ALERT not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_CUSTOMIZE_ALERTS(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERTS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_CUSTOMIZE_ALERTS not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE(context.Context, *MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_ALERT_RECORD(context.Context, *MONITOR_ORG_ALERT_RECORD_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_ALERT_RECORD not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_ALERT_RECORDS(context.Context, *MONITOR_ORG_ALERT_RECORDS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_ALERT_RECORDS not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_ALERT_RECORD_ATTRS(context.Context, *MONITOR_ORG_ALERT_RECORD_ATTRS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_ALERT_RECORD_ATTRS not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_ALERT_RECORD_HISTORIES(context.Context, *MONITOR_ORG_ALERT_RECORD_HISTORIES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_ALERT_RECORD_HISTORIES not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE(context.Context, *MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE(context.Context, *MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_HOSTS_ALERT_RECORDS(context.Context, *MONITOR_ORG_HOSTS_ALERT_RECORDS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_HOSTS_ALERT_RECORDS not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_LOGS_RULE(context.Context, *MONITOR_ORG_LOGS_RULE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_LOGS_RULE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_LOGS_RULES(context.Context, *MONITOR_ORG_LOGS_RULES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_LOGS_RULES not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_LOGS_RULES_CREATE(context.Context, *MONITOR_ORG_LOGS_RULES_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_LOGS_RULES_CREATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_LOGS_RULES_DELETE(context.Context, *MONITOR_ORG_LOGS_RULES_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_LOGS_RULES_DELETE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_LOGS_RULES_ENABLE(context.Context, *MONITOR_ORG_LOGS_RULES_ENABLE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_LOGS_RULES_ENABLE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_LOGS_RULES_TEMPLATE(context.Context, *MONITOR_ORG_LOGS_RULES_TEMPLATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_LOGS_RULES_TEMPLATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_LOGS_RULES_TEMPLATES(context.Context, *MONITOR_ORG_LOGS_RULES_TEMPLATES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_LOGS_RULES_TEMPLATES not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_LOGS_RULES_TEST(context.Context, *MONITOR_ORG_LOGS_RULES_TEST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_LOGS_RULES_TEST not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_LOGS_RULES_UPDATE(context.Context, *MONITOR_ORG_LOGS_RULES_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_LOGS_RULES_UPDATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_LOGS_SEARCH(context.Context, *MONITOR_ORG_LOGS_SEARCH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_LOGS_SEARCH not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_LOGS_STATISTIC(context.Context, *MONITOR_ORG_LOGS_STATISTIC_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_LOGS_STATISTIC not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_LOGS_TAGS_TREE(context.Context, *MONITOR_ORG_LOGS_TAGS_TREE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_LOGS_TAGS_TREE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_REPORT_HISTORY(context.Context, *MONITOR_ORG_REPORT_HISTORY_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_REPORT_HISTORY not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_REPORT_HISTORY_CREATE(context.Context, *MONITOR_ORG_REPORT_HISTORY_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_REPORT_HISTORY_CREATE not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_REPORT_TASK(context.Context, *MONITOR_ORG_REPORT_TASK_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_REPORT_TASK not implemented")
}
func (*UnimplementedMonitorServer) MONITOR_ORG_REPORT_TASK_CREATE(context.Context, *MONITOR_ORG_REPORT_TASK_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MONITOR_ORG_REPORT_TASK_CREATE not implemented")
}
func (*UnimplementedMonitorServer) MSP_ADDON_LOGS_RULE(context.Context, *MSP_ADDON_LOGS_RULE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_RULE not implemented")
}
func (*UnimplementedMonitorServer) MSP_ADDON_LOGS_RULES(context.Context, *MSP_ADDON_LOGS_RULES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_RULES not implemented")
}
func (*UnimplementedMonitorServer) MSP_ADDON_LOGS_RULES_CREATE(context.Context, *MSP_ADDON_LOGS_RULES_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_RULES_CREATE not implemented")
}
func (*UnimplementedMonitorServer) MSP_ADDON_LOGS_RULES_DELETE(context.Context, *MSP_ADDON_LOGS_RULES_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_RULES_DELETE not implemented")
}
func (*UnimplementedMonitorServer) MSP_ADDON_LOGS_RULES_ENABLE(context.Context, *MSP_ADDON_LOGS_RULES_ENABLE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_RULES_ENABLE not implemented")
}
func (*UnimplementedMonitorServer) MSP_ADDON_LOGS_RULES_TEMPLATE(context.Context, *MSP_ADDON_LOGS_RULES_TEMPLATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_RULES_TEMPLATE not implemented")
}
func (*UnimplementedMonitorServer) MSP_ADDON_LOGS_RULES_TEMPLATES(context.Context, *MSP_ADDON_LOGS_RULES_TEMPLATES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_RULES_TEMPLATES not implemented")
}
func (*UnimplementedMonitorServer) MSP_ADDON_LOGS_RULES_TEST(context.Context, *MSP_ADDON_LOGS_RULES_TEST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_RULES_TEST not implemented")
}
func (*UnimplementedMonitorServer) MSP_ADDON_LOGS_RULES_UPDATE(context.Context, *MSP_ADDON_LOGS_RULES_UPDATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSP_ADDON_LOGS_RULES_UPDATE not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_ALARM_NOTIFIES(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_ALARM_NOTIFIES not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH(context.Context, *SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_ALARM_TYPES(context.Context, *SPOT_DASHBOARD_ALARM_TYPES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_ALARM_TYPES not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_ALERT_METRICS(context.Context, *SPOT_DASHBOARD_ALERT_METRICS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_ALERT_METRICS not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_CHART_META(context.Context, *SPOT_DASHBOARD_CHART_META_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_CHART_META not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_ORG_METRICS(context.Context, *SPOT_DASHBOARD_ORG_METRICS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_ORG_METRICS not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_ORG_METRICS_QUERY(context.Context, *SPOT_DASHBOARD_ORG_METRICS_QUERY_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_ORG_METRICS_QUERY not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_ORG_METRICS_QUERY_POST(context.Context, *SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_ORG_METRICS_QUERY_POST not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_PROJECT_METRICS(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_PROJECT_METRICS not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_PROJECT_METRICS_QUERY(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_PROJECT_METRICS_QUERY not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST(context.Context, *SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_RESOURCES_CONTAINERS(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_RESOURCES_CONTAINERS not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST(context.Context, *SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_RESOURCES_GROUP(context.Context, *SPOT_DASHBOARD_RESOURCES_GROUP_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_RESOURCES_GROUP not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_RESOURCES_TYPES(context.Context, *SPOT_DASHBOARD_RESOURCES_TYPES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_RESOURCES_TYPES not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_RUNTIME_METRICS(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_RUNTIME_METRICS not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_RUNTIME_METRICS_QUERY(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_RUNTIME_METRICS_QUERY not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST(context.Context, *SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM(context.Context, *SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM not implemented")
}
func (*UnimplementedMonitorServer) SPOT_DASHBOARD_SYSTEM_POD_METRICS(context.Context, *SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_DASHBOARD_SYSTEM_POD_METRICS not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_FINISH(context.Context, *SPOT_JVM_PROFILER_FINISH_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_FINISH not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_HEAP_GC(context.Context, *SPOT_JVM_PROFILER_HEAP_GC_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_HEAP_GC not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_HEAP_GC_STATE(context.Context, *SPOT_JVM_PROFILER_HEAP_GC_STATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_HEAP_GC_STATE not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST(context.Context, *SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_HEAP_STAT(context.Context, *SPOT_JVM_PROFILER_HEAP_STAT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_HEAP_STAT not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_JVM_INFO(context.Context, *SPOT_JVM_PROFILER_JVM_INFO_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_JVM_INFO not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_LIST(context.Context, *SPOT_JVM_PROFILER_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_LIST not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_SERVICES(context.Context, *SPOT_JVM_PROFILER_SERVICES_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_SERVICES not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_START(context.Context, *SPOT_JVM_PROFILER_START_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_START not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_STATE(context.Context, *SPOT_JVM_PROFILER_STATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_STATE not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_THREAD_DUMP(context.Context, *SPOT_JVM_PROFILER_THREAD_DUMP_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_THREAD_DUMP not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET(context.Context, *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST(context.Context, *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE(context.Context, *SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE not implemented")
}
func (*UnimplementedMonitorServer) SPOT_JVM_PROFILER_THREAD_STAT(context.Context, *SPOT_JVM_PROFILER_THREAD_STAT_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_JVM_PROFILER_THREAD_STAT not implemented")
}
func (*UnimplementedMonitorServer) SPOT_ORG_LOGS(context.Context, *SPOT_ORG_LOGS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_ORG_LOGS not implemented")
}
func (*UnimplementedMonitorServer) SPOT_ORG_LOGS_DOWNLOAD(context.Context, *SPOT_ORG_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_ORG_LOGS_DOWNLOAD not implemented")
}
func (*UnimplementedMonitorServer) SPOT_RUNTIME_LOGS(context.Context, *SPOT_RUNTIME_LOGS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_RUNTIME_LOGS not implemented")
}
func (*UnimplementedMonitorServer) SPOT_RUNTIME_LOGS_DOWNLOAD(context.Context, *SPOT_RUNTIME_LOGS_DOWNLOAD_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_RUNTIME_LOGS_DOWNLOAD not implemented")
}
func (*UnimplementedMonitorServer) SPOT_RUNTIME_REALTIME_LOGS(context.Context, *SPOT_RUNTIME_REALTIME_LOGS_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPOT_RUNTIME_REALTIME_LOGS not implemented")
}

func RegisterMonitorServer(s grpc1.ServiceRegistrar, srv MonitorServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_Monitor_serviceDesc(srv, opts...), srv)
}

var _Monitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.openapiv1.monitor.monitor",
	HandlerType: (*MonitorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "monitor.proto",
}

func _get_Monitor_serviceDesc(srv MonitorServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_Monitor_MONITOR_ADDON_LOGS_SEARCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ADDON_LOGS_SEARCH(ctx, req.(*MONITOR_ADDON_LOGS_SEARCH_Request))
	}
	var _Monitor_MONITOR_ADDON_LOGS_SEARCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ADDON_LOGS_SEARCH_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ADDON_LOGS_SEARCH", srv)
		_Monitor_MONITOR_ADDON_LOGS_SEARCH_Handler = h.Interceptor(_Monitor_MONITOR_ADDON_LOGS_SEARCH_Handler)
	}

	_Monitor_MONITOR_ADDON_LOGS_TAGS_TREE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ADDON_LOGS_TAGS_TREE(ctx, req.(*MONITOR_ADDON_LOGS_TAGS_TREE_Request))
	}
	var _Monitor_MONITOR_ADDON_LOGS_TAGS_TREE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ADDON_LOGS_TAGS_TREE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ADDON_LOGS_TAGS_TREE", srv)
		_Monitor_MONITOR_ADDON_LOGS_TAGS_TREE_Handler = h.Interceptor(_Monitor_MONITOR_ADDON_LOGS_TAGS_TREE_Handler)
	}

	_Monitor_MONITOR_APM_ALERT_ID_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_ALERT_ID_DELETE(ctx, req.(*MONITOR_APM_ALERT_ID_DELETE_Request))
	}
	var _Monitor_MONITOR_APM_ALERT_ID_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_ALERT_ID_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_ID_DELETE", srv)
		_Monitor_MONITOR_APM_ALERT_ID_DELETE_Handler = h.Interceptor(_Monitor_MONITOR_APM_ALERT_ID_DELETE_Handler)
	}

	_Monitor_MONITOR_APM_ALERT_ID_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_ALERT_ID_GET(ctx, req.(*MONITOR_APM_ALERT_ID_GET_Request))
	}
	var _Monitor_MONITOR_APM_ALERT_ID_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_ALERT_ID_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_ID_GET", srv)
		_Monitor_MONITOR_APM_ALERT_ID_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_ALERT_ID_GET_Handler)
	}

	_Monitor_MONITOR_APM_ALERT_ID_PUT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_ALERT_ID_PUT(ctx, req.(*MONITOR_APM_ALERT_ID_PUT_Request))
	}
	var _Monitor_MONITOR_APM_ALERT_ID_PUT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_ALERT_ID_PUT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_ID_PUT", srv)
		_Monitor_MONITOR_APM_ALERT_ID_PUT_Handler = h.Interceptor(_Monitor_MONITOR_APM_ALERT_ID_PUT_Handler)
	}

	_Monitor_MONITOR_APM_ALERT_ID_SWITCH_PUT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_ALERT_ID_SWITCH_PUT(ctx, req.(*MONITOR_APM_ALERT_ID_SWITCH_PUT_Request))
	}
	var _Monitor_MONITOR_APM_ALERT_ID_SWITCH_PUT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_ALERT_ID_SWITCH_PUT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_ID_SWITCH_PUT", srv)
		_Monitor_MONITOR_APM_ALERT_ID_SWITCH_PUT_Handler = h.Interceptor(_Monitor_MONITOR_APM_ALERT_ID_SWITCH_PUT_Handler)
	}

	_Monitor_MONITOR_APM_ALERT_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_ALERT_LIST(ctx, req.(*MONITOR_APM_ALERT_LIST_Request))
	}
	var _Monitor_MONITOR_APM_ALERT_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_ALERT_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_LIST", srv)
		_Monitor_MONITOR_APM_ALERT_LIST_Handler = h.Interceptor(_Monitor_MONITOR_APM_ALERT_LIST_Handler)
	}

	_Monitor_MONITOR_APM_ALERT_POST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_ALERT_POST(ctx, req.(*MONITOR_APM_ALERT_POST_Request))
	}
	var _Monitor_MONITOR_APM_ALERT_POST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_ALERT_POST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_POST", srv)
		_Monitor_MONITOR_APM_ALERT_POST_Handler = h.Interceptor(_Monitor_MONITOR_APM_ALERT_POST_Handler)
	}

	_Monitor_MONITOR_APM_ALERT_RULE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_ALERT_RULE_LIST(ctx, req.(*MONITOR_APM_ALERT_RULE_LIST_Request))
	}
	var _Monitor_MONITOR_APM_ALERT_RULE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_ALERT_RULE_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_ALERT_RULE_LIST", srv)
		_Monitor_MONITOR_APM_ALERT_RULE_LIST_Handler = h.Interceptor(_Monitor_MONITOR_APM_ALERT_RULE_LIST_Handler)
	}

	_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request))
	}
	var _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE", srv)
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Handler = h.Interceptor(_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Handler)
	}

	_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_CUSTOMIZE_ALERT_ID_GET(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request))
	}
	var _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_ID_GET", srv)
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Handler)
	}

	_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request))
	}
	var _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT", srv)
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Handler = h.Interceptor(_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Handler)
	}

	_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request))
	}
	var _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT", srv)
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Handler = h.Interceptor(_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Handler)
	}

	_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_CUSTOMIZE_ALERT_LIST(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request))
	}
	var _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_LIST", srv)
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_LIST_Handler = h.Interceptor(_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_LIST_Handler)
	}

	_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request))
	}
	var _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET", srv)
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Handler)
	}

	_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request))
	}
	var _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET", srv)
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Handler)
	}

	_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_POST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_CUSTOMIZE_ALERT_POST(ctx, req.(*MONITOR_APM_CUSTOMIZE_ALERT_POST_Request))
	}
	var _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_POST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_POST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_CUSTOMIZE_ALERT_POST", srv)
		_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_POST_Handler = h.Interceptor(_Monitor_MONITOR_APM_CUSTOMIZE_ALERT_POST_Handler)
	}

	_Monitor_MONITOR_APM_INSTANCE_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_INSTANCE_GET(ctx, req.(*MONITOR_APM_INSTANCE_GET_Request))
	}
	var _Monitor_MONITOR_APM_INSTANCE_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_INSTANCE_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_INSTANCE_GET", srv)
		_Monitor_MONITOR_APM_INSTANCE_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_INSTANCE_GET_Handler)
	}

	_Monitor_MONITOR_APM_RUNTIME_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_RUNTIME_GET(ctx, req.(*MONITOR_APM_RUNTIME_GET_Request))
	}
	var _Monitor_MONITOR_APM_RUNTIME_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_RUNTIME_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_RUNTIME_GET", srv)
		_Monitor_MONITOR_APM_RUNTIME_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_RUNTIME_GET_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET(ctx, req.(*MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET(ctx, req.(*MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_GET(ctx, req.(*MONITOR_APM_TOPOLOGY_GET_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_GET", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_GET_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET(ctx, req.(*MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_PROCESS_DISKIO(ctx, req.(*MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_PROCESS_DISKIO", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET(ctx, req.(*MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_PROCESS_NETIO(ctx, req.(*MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_PROCESS_NETIO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_PROCESS_NETIO_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_PROCESS_NETIO", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET(ctx, req.(*MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET(ctx, req.(*MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_SERVICES_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_SERVICES_LIST(ctx, req.(*MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_SERVICES_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_SERVICES_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_SERVICES_LIST", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_SERVICES_LIST_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_SERVICES_LIST_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST(ctx, req.(*MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET(ctx, req.(*MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET(ctx, req.(*MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_TRANSLATION(ctx, req.(*MONITOR_APM_TOPOLOGY_TRANSLATION_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_TRANSLATION", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_TRANSLATION_DB(ctx, req.(*MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_DB_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_DB_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_TRANSLATION_DB", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Handler)
	}

	_Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW(ctx, req.(*MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request))
	}
	var _Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW", srv)
		_Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Handler = h.Interceptor(_Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Handler)
	}

	_Monitor_MONITOR_APM_TRACE_ID_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TRACE_ID_GET(ctx, req.(*MONITOR_APM_TRACE_ID_GET_Request))
	}
	var _Monitor_MONITOR_APM_TRACE_ID_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TRACE_ID_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TRACE_ID_GET", srv)
		_Monitor_MONITOR_APM_TRACE_ID_GET_Handler = h.Interceptor(_Monitor_MONITOR_APM_TRACE_ID_GET_Handler)
	}

	_Monitor_MONITOR_APM_TRACE_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_APM_TRACE_LIST(ctx, req.(*MONITOR_APM_TRACE_LIST_Request))
	}
	var _Monitor_MONITOR_APM_TRACE_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_APM_TRACE_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_APM_TRACE_LIST", srv)
		_Monitor_MONITOR_APM_TRACE_LIST_Handler = h.Interceptor(_Monitor_MONITOR_APM_TRACE_LIST_Handler)
	}

	_Monitor_MONITOR_CLUSTER_STATUS_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_CLUSTER_STATUS_GET(ctx, req.(*MONITOR_CLUSTER_STATUS_GET_Request))
	}
	var _Monitor_MONITOR_CLUSTER_STATUS_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_CLUSTER_STATUS_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_CLUSTER_STATUS_GET", srv)
		_Monitor_MONITOR_CLUSTER_STATUS_GET_Handler = h.Interceptor(_Monitor_MONITOR_CLUSTER_STATUS_GET_Handler)
	}

	_Monitor_MONITOR_DASHBOARD_EXPORT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_DASHBOARD_EXPORT(ctx, req.(*MONITOR_DASHBOARD_EXPORT_Request))
	}
	var _Monitor_MONITOR_DASHBOARD_EXPORT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_DASHBOARD_EXPORT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_EXPORT", srv)
		_Monitor_MONITOR_DASHBOARD_EXPORT_Handler = h.Interceptor(_Monitor_MONITOR_DASHBOARD_EXPORT_Handler)
	}

	_Monitor_MONITOR_DASHBOARD_IMPORT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_DASHBOARD_IMPORT(ctx, req.(*MONITOR_DASHBOARD_IMPORT_Request))
	}
	var _Monitor_MONITOR_DASHBOARD_IMPORT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_DASHBOARD_IMPORT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_IMPORT", srv)
		_Monitor_MONITOR_DASHBOARD_IMPORT_Handler = h.Interceptor(_Monitor_MONITOR_DASHBOARD_IMPORT_Handler)
	}

	_Monitor_MONITOR_DASHBOARD_PARSE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_DASHBOARD_PARSE(ctx, req.(*MONITOR_DASHBOARD_PARSE_Request))
	}
	var _Monitor_MONITOR_DASHBOARD_PARSE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_DASHBOARD_PARSE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_PARSE", srv)
		_Monitor_MONITOR_DASHBOARD_PARSE_Handler = h.Interceptor(_Monitor_MONITOR_DASHBOARD_PARSE_Handler)
	}

	_Monitor_MONITOR_DASHBOARD_TEMPLATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_DASHBOARD_TEMPLATE(ctx, req.(*MONITOR_DASHBOARD_TEMPLATE_Request))
	}
	var _Monitor_MONITOR_DASHBOARD_TEMPLATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_DASHBOARD_TEMPLATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_TEMPLATE", srv)
		_Monitor_MONITOR_DASHBOARD_TEMPLATE_Handler = h.Interceptor(_Monitor_MONITOR_DASHBOARD_TEMPLATE_Handler)
	}

	_Monitor_MONITOR_DASHBOARD_TEMPLATES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_DASHBOARD_TEMPLATES(ctx, req.(*MONITOR_DASHBOARD_TEMPLATES_Request))
	}
	var _Monitor_MONITOR_DASHBOARD_TEMPLATES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_DASHBOARD_TEMPLATES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_TEMPLATES", srv)
		_Monitor_MONITOR_DASHBOARD_TEMPLATES_Handler = h.Interceptor(_Monitor_MONITOR_DASHBOARD_TEMPLATES_Handler)
	}

	_Monitor_MONITOR_DASHBOARD_TEMPLATE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_DASHBOARD_TEMPLATE_CREATE(ctx, req.(*MONITOR_DASHBOARD_TEMPLATE_CREATE_Request))
	}
	var _Monitor_MONITOR_DASHBOARD_TEMPLATE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_DASHBOARD_TEMPLATE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_TEMPLATE_CREATE", srv)
		_Monitor_MONITOR_DASHBOARD_TEMPLATE_CREATE_Handler = h.Interceptor(_Monitor_MONITOR_DASHBOARD_TEMPLATE_CREATE_Handler)
	}

	_Monitor_MONITOR_DASHBOARD_TEMPLATE_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_DASHBOARD_TEMPLATE_DELETE(ctx, req.(*MONITOR_DASHBOARD_TEMPLATE_DELETE_Request))
	}
	var _Monitor_MONITOR_DASHBOARD_TEMPLATE_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_DASHBOARD_TEMPLATE_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_TEMPLATE_DELETE", srv)
		_Monitor_MONITOR_DASHBOARD_TEMPLATE_DELETE_Handler = h.Interceptor(_Monitor_MONITOR_DASHBOARD_TEMPLATE_DELETE_Handler)
	}

	_Monitor_MONITOR_DASHBOARD_TEMPLATE_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_DASHBOARD_TEMPLATE_UPDATE(ctx, req.(*MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request))
	}
	var _Monitor_MONITOR_DASHBOARD_TEMPLATE_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_DASHBOARD_TEMPLATE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_DASHBOARD_TEMPLATE_UPDATE", srv)
		_Monitor_MONITOR_DASHBOARD_TEMPLATE_UPDATE_Handler = h.Interceptor(_Monitor_MONITOR_DASHBOARD_TEMPLATE_UPDATE_Handler)
	}

	_Monitor_MONITOR_FILEMANAGER_DOWNLOAD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_FILEMANAGER_DOWNLOAD(ctx, req.(*MONITOR_FILEMANAGER_DOWNLOAD_Request))
	}
	var _Monitor_MONITOR_FILEMANAGER_DOWNLOAD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_FILEMANAGER_DOWNLOAD_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_FILEMANAGER_DOWNLOAD", srv)
		_Monitor_MONITOR_FILEMANAGER_DOWNLOAD_Handler = h.Interceptor(_Monitor_MONITOR_FILEMANAGER_DOWNLOAD_Handler)
	}

	_Monitor_MONITOR_FILEMANAGER_UPLOAD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_FILEMANAGER_UPLOAD(ctx, req.(*MONITOR_FILEMANAGER_UPLOAD_Request))
	}
	var _Monitor_MONITOR_FILEMANAGER_UPLOAD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_FILEMANAGER_UPLOAD_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_FILEMANAGER_UPLOAD", srv)
		_Monitor_MONITOR_FILEMANAGER_UPLOAD_Handler = h.Interceptor(_Monitor_MONITOR_FILEMANAGER_UPLOAD_Handler)
	}

	_Monitor_MONITOR_HOST_STATUS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_HOST_STATUS(ctx, req.(*HostStatusListRequest))
	}
	var _Monitor_MONITOR_HOST_STATUS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_HOST_STATUS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_HOST_STATUS", srv)
		_Monitor_MONITOR_HOST_STATUS_Handler = h.Interceptor(_Monitor_MONITOR_HOST_STATUS_Handler)
	}

	_Monitor_MONITOR_NOTIFY_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_NOTIFY_CREATE(ctx, req.(*MONITOR_NOTIFY_CREATE_Request))
	}
	var _Monitor_MONITOR_NOTIFY_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_NOTIFY_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_CREATE", srv)
		_Monitor_MONITOR_NOTIFY_CREATE_Handler = h.Interceptor(_Monitor_MONITOR_NOTIFY_CREATE_Handler)
	}

	_Monitor_MONITOR_NOTIFY_CUSTOMIZE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_NOTIFY_CUSTOMIZE(ctx, req.(*MONITOR_NOTIFY_CUSTOMIZE_Request))
	}
	var _Monitor_MONITOR_NOTIFY_CUSTOMIZE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_NOTIFY_CUSTOMIZE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_CUSTOMIZE", srv)
		_Monitor_MONITOR_NOTIFY_CUSTOMIZE_Handler = h.Interceptor(_Monitor_MONITOR_NOTIFY_CUSTOMIZE_Handler)
	}

	_Monitor_MONITOR_NOTIFY_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_NOTIFY_DELETE(ctx, req.(*MONITOR_NOTIFY_DELETE_Request))
	}
	var _Monitor_MONITOR_NOTIFY_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_NOTIFY_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_DELETE", srv)
		_Monitor_MONITOR_NOTIFY_DELETE_Handler = h.Interceptor(_Monitor_MONITOR_NOTIFY_DELETE_Handler)
	}

	_Monitor_MONITOR_NOTIFY_ENABLE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_NOTIFY_ENABLE(ctx, req.(*MONITOR_NOTIFY_ENABLE_Request))
	}
	var _Monitor_MONITOR_NOTIFY_ENABLE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_NOTIFY_ENABLE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_ENABLE", srv)
		_Monitor_MONITOR_NOTIFY_ENABLE_Handler = h.Interceptor(_Monitor_MONITOR_NOTIFY_ENABLE_Handler)
	}

	_Monitor_MONITOR_NOTIFY_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_NOTIFY_LIST(ctx, req.(*MONITOR_NOTIFY_LIST_Request))
	}
	var _Monitor_MONITOR_NOTIFY_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_NOTIFY_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_LIST", srv)
		_Monitor_MONITOR_NOTIFY_LIST_Handler = h.Interceptor(_Monitor_MONITOR_NOTIFY_LIST_Handler)
	}

	_Monitor_MONITOR_NOTIFY_TEMPALTES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_NOTIFY_TEMPALTES(ctx, req.(*MONITOR_NOTIFY_TEMPALTES_Request))
	}
	var _Monitor_MONITOR_NOTIFY_TEMPALTES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_NOTIFY_TEMPALTES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_TEMPALTES", srv)
		_Monitor_MONITOR_NOTIFY_TEMPALTES_Handler = h.Interceptor(_Monitor_MONITOR_NOTIFY_TEMPALTES_Handler)
	}

	_Monitor_MONITOR_NOTIFY_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_NOTIFY_UPDATE(ctx, req.(*MONITOR_NOTIFY_UPDATE_Request))
	}
	var _Monitor_MONITOR_NOTIFY_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_NOTIFY_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_NOTIFY_UPDATE", srv)
		_Monitor_MONITOR_NOTIFY_UPDATE_Handler = h.Interceptor(_Monitor_MONITOR_NOTIFY_UPDATE_Handler)
	}

	_Monitor_MONITOR_ORGS_ALERT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_ALERT(ctx, req.(*MONITOR_ORGS_ALERT_Request))
	}
	var _Monitor_MONITOR_ORGS_ALERT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_ALERT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERT", srv)
		_Monitor_MONITOR_ORGS_ALERT_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_ALERT_Handler)
	}

	_Monitor_MONITOR_ORGS_ALERTS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_ALERTS(ctx, req.(*MONITOR_ORGS_ALERTS_Request))
	}
	var _Monitor_MONITOR_ORGS_ALERTS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_ALERTS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERTS", srv)
		_Monitor_MONITOR_ORGS_ALERTS_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_ALERTS_Handler)
	}

	_Monitor_MONITOR_ORGS_ALERTS_RULES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_ALERTS_RULES(ctx, req.(*MONITOR_ORGS_ALERTS_RULES_Request))
	}
	var _Monitor_MONITOR_ORGS_ALERTS_RULES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_ALERTS_RULES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERTS_RULES", srv)
		_Monitor_MONITOR_ORGS_ALERTS_RULES_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_ALERTS_RULES_Handler)
	}

	_Monitor_MONITOR_ORGS_ALERT_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_ALERT_CREATE(ctx, req.(*MONITOR_ORGS_ALERT_CREATE_Request))
	}
	var _Monitor_MONITOR_ORGS_ALERT_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_ALERT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERT_CREATE", srv)
		_Monitor_MONITOR_ORGS_ALERT_CREATE_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_ALERT_CREATE_Handler)
	}

	_Monitor_MONITOR_ORGS_ALERT_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_ALERT_DELETE(ctx, req.(*MONITOR_ORGS_ALERT_DELETE_Request))
	}
	var _Monitor_MONITOR_ORGS_ALERT_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_ALERT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERT_DELETE", srv)
		_Monitor_MONITOR_ORGS_ALERT_DELETE_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_ALERT_DELETE_Handler)
	}

	_Monitor_MONITOR_ORGS_ALERT_SWITCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_ALERT_SWITCH(ctx, req.(*MONITOR_ORGS_ALERT_SWITCH_Request))
	}
	var _Monitor_MONITOR_ORGS_ALERT_SWITCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_ALERT_SWITCH_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERT_SWITCH", srv)
		_Monitor_MONITOR_ORGS_ALERT_SWITCH_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_ALERT_SWITCH_Handler)
	}

	_Monitor_MONITOR_ORGS_ALERT_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_ALERT_UPDATE(ctx, req.(*MONITOR_ORGS_ALERT_UPDATE_Request))
	}
	var _Monitor_MONITOR_ORGS_ALERT_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_ALERT_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_ALERT_UPDATE", srv)
		_Monitor_MONITOR_ORGS_ALERT_UPDATE_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_ALERT_UPDATE_Handler)
	}

	_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_CUSTOMIZE_ALERT(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_Request))
	}
	var _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT", srv)
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_Handler)
	}

	_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERTS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_CUSTOMIZE_ALERTS(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERTS_Request))
	}
	var _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERTS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERTS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERTS", srv)
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERTS_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERTS_Handler)
	}

	_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request))
	}
	var _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE", srv)
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Handler)
	}

	_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request))
	}
	var _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW", srv)
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Handler)
	}

	_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request))
	}
	var _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE", srv)
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Handler)
	}

	_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request))
	}
	var _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS", srv)
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Handler)
	}

	_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request))
	}
	var _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET", srv)
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Handler)
	}

	_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request))
	}
	var _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH", srv)
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Handler)
	}

	_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE(ctx, req.(*MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request))
	}
	var _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE", srv)
		_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Handler = h.Interceptor(_Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Handler)
	}

	_Monitor_MONITOR_ORG_ALERT_RECORD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_ALERT_RECORD(ctx, req.(*MONITOR_ORG_ALERT_RECORD_Request))
	}
	var _Monitor_MONITOR_ORG_ALERT_RECORD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_ALERT_RECORD_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_ALERT_RECORD", srv)
		_Monitor_MONITOR_ORG_ALERT_RECORD_Handler = h.Interceptor(_Monitor_MONITOR_ORG_ALERT_RECORD_Handler)
	}

	_Monitor_MONITOR_ORG_ALERT_RECORDS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_ALERT_RECORDS(ctx, req.(*MONITOR_ORG_ALERT_RECORDS_Request))
	}
	var _Monitor_MONITOR_ORG_ALERT_RECORDS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_ALERT_RECORDS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_ALERT_RECORDS", srv)
		_Monitor_MONITOR_ORG_ALERT_RECORDS_Handler = h.Interceptor(_Monitor_MONITOR_ORG_ALERT_RECORDS_Handler)
	}

	_Monitor_MONITOR_ORG_ALERT_RECORD_ATTRS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_ALERT_RECORD_ATTRS(ctx, req.(*MONITOR_ORG_ALERT_RECORD_ATTRS_Request))
	}
	var _Monitor_MONITOR_ORG_ALERT_RECORD_ATTRS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_ALERT_RECORD_ATTRS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_ALERT_RECORD_ATTRS", srv)
		_Monitor_MONITOR_ORG_ALERT_RECORD_ATTRS_Handler = h.Interceptor(_Monitor_MONITOR_ORG_ALERT_RECORD_ATTRS_Handler)
	}

	_Monitor_MONITOR_ORG_ALERT_RECORD_HISTORIES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_ALERT_RECORD_HISTORIES(ctx, req.(*MONITOR_ORG_ALERT_RECORD_HISTORIES_Request))
	}
	var _Monitor_MONITOR_ORG_ALERT_RECORD_HISTORIES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_ALERT_RECORD_HISTORIES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_ALERT_RECORD_HISTORIES", srv)
		_Monitor_MONITOR_ORG_ALERT_RECORD_HISTORIES_Handler = h.Interceptor(_Monitor_MONITOR_ORG_ALERT_RECORD_HISTORIES_Handler)
	}

	_Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE(ctx, req.(*MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request))
	}
	var _Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE", srv)
		_Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Handler = h.Interceptor(_Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Handler)
	}

	_Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE(ctx, req.(*MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request))
	}
	var _Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE", srv)
		_Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Handler = h.Interceptor(_Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Handler)
	}

	_Monitor_MONITOR_ORG_HOSTS_ALERT_RECORDS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_HOSTS_ALERT_RECORDS(ctx, req.(*MONITOR_ORG_HOSTS_ALERT_RECORDS_Request))
	}
	var _Monitor_MONITOR_ORG_HOSTS_ALERT_RECORDS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_HOSTS_ALERT_RECORDS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_HOSTS_ALERT_RECORDS", srv)
		_Monitor_MONITOR_ORG_HOSTS_ALERT_RECORDS_Handler = h.Interceptor(_Monitor_MONITOR_ORG_HOSTS_ALERT_RECORDS_Handler)
	}

	_Monitor_MONITOR_ORG_LOGS_RULE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_LOGS_RULE(ctx, req.(*MONITOR_ORG_LOGS_RULE_Request))
	}
	var _Monitor_MONITOR_ORG_LOGS_RULE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_LOGS_RULE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULE", srv)
		_Monitor_MONITOR_ORG_LOGS_RULE_Handler = h.Interceptor(_Monitor_MONITOR_ORG_LOGS_RULE_Handler)
	}

	_Monitor_MONITOR_ORG_LOGS_RULES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_LOGS_RULES(ctx, req.(*MONITOR_ORG_LOGS_RULES_Request))
	}
	var _Monitor_MONITOR_ORG_LOGS_RULES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_LOGS_RULES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES", srv)
		_Monitor_MONITOR_ORG_LOGS_RULES_Handler = h.Interceptor(_Monitor_MONITOR_ORG_LOGS_RULES_Handler)
	}

	_Monitor_MONITOR_ORG_LOGS_RULES_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_LOGS_RULES_CREATE(ctx, req.(*MONITOR_ORG_LOGS_RULES_CREATE_Request))
	}
	var _Monitor_MONITOR_ORG_LOGS_RULES_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_LOGS_RULES_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_CREATE", srv)
		_Monitor_MONITOR_ORG_LOGS_RULES_CREATE_Handler = h.Interceptor(_Monitor_MONITOR_ORG_LOGS_RULES_CREATE_Handler)
	}

	_Monitor_MONITOR_ORG_LOGS_RULES_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_LOGS_RULES_DELETE(ctx, req.(*MONITOR_ORG_LOGS_RULES_DELETE_Request))
	}
	var _Monitor_MONITOR_ORG_LOGS_RULES_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_LOGS_RULES_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_DELETE", srv)
		_Monitor_MONITOR_ORG_LOGS_RULES_DELETE_Handler = h.Interceptor(_Monitor_MONITOR_ORG_LOGS_RULES_DELETE_Handler)
	}

	_Monitor_MONITOR_ORG_LOGS_RULES_ENABLE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_LOGS_RULES_ENABLE(ctx, req.(*MONITOR_ORG_LOGS_RULES_ENABLE_Request))
	}
	var _Monitor_MONITOR_ORG_LOGS_RULES_ENABLE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_LOGS_RULES_ENABLE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_ENABLE", srv)
		_Monitor_MONITOR_ORG_LOGS_RULES_ENABLE_Handler = h.Interceptor(_Monitor_MONITOR_ORG_LOGS_RULES_ENABLE_Handler)
	}

	_Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_LOGS_RULES_TEMPLATE(ctx, req.(*MONITOR_ORG_LOGS_RULES_TEMPLATE_Request))
	}
	var _Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_TEMPLATE", srv)
		_Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATE_Handler = h.Interceptor(_Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATE_Handler)
	}

	_Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_LOGS_RULES_TEMPLATES(ctx, req.(*MONITOR_ORG_LOGS_RULES_TEMPLATES_Request))
	}
	var _Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_TEMPLATES", srv)
		_Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATES_Handler = h.Interceptor(_Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATES_Handler)
	}

	_Monitor_MONITOR_ORG_LOGS_RULES_TEST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_LOGS_RULES_TEST(ctx, req.(*MONITOR_ORG_LOGS_RULES_TEST_Request))
	}
	var _Monitor_MONITOR_ORG_LOGS_RULES_TEST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_LOGS_RULES_TEST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_TEST", srv)
		_Monitor_MONITOR_ORG_LOGS_RULES_TEST_Handler = h.Interceptor(_Monitor_MONITOR_ORG_LOGS_RULES_TEST_Handler)
	}

	_Monitor_MONITOR_ORG_LOGS_RULES_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_LOGS_RULES_UPDATE(ctx, req.(*MONITOR_ORG_LOGS_RULES_UPDATE_Request))
	}
	var _Monitor_MONITOR_ORG_LOGS_RULES_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_LOGS_RULES_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_RULES_UPDATE", srv)
		_Monitor_MONITOR_ORG_LOGS_RULES_UPDATE_Handler = h.Interceptor(_Monitor_MONITOR_ORG_LOGS_RULES_UPDATE_Handler)
	}

	_Monitor_MONITOR_ORG_LOGS_SEARCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_LOGS_SEARCH(ctx, req.(*MONITOR_ORG_LOGS_SEARCH_Request))
	}
	var _Monitor_MONITOR_ORG_LOGS_SEARCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_LOGS_SEARCH_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_SEARCH", srv)
		_Monitor_MONITOR_ORG_LOGS_SEARCH_Handler = h.Interceptor(_Monitor_MONITOR_ORG_LOGS_SEARCH_Handler)
	}

	_Monitor_MONITOR_ORG_LOGS_STATISTIC_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_LOGS_STATISTIC(ctx, req.(*MONITOR_ORG_LOGS_STATISTIC_Request))
	}
	var _Monitor_MONITOR_ORG_LOGS_STATISTIC_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_LOGS_STATISTIC_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_STATISTIC", srv)
		_Monitor_MONITOR_ORG_LOGS_STATISTIC_Handler = h.Interceptor(_Monitor_MONITOR_ORG_LOGS_STATISTIC_Handler)
	}

	_Monitor_MONITOR_ORG_LOGS_TAGS_TREE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_LOGS_TAGS_TREE(ctx, req.(*MONITOR_ORG_LOGS_TAGS_TREE_Request))
	}
	var _Monitor_MONITOR_ORG_LOGS_TAGS_TREE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_LOGS_TAGS_TREE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_LOGS_TAGS_TREE", srv)
		_Monitor_MONITOR_ORG_LOGS_TAGS_TREE_Handler = h.Interceptor(_Monitor_MONITOR_ORG_LOGS_TAGS_TREE_Handler)
	}

	_Monitor_MONITOR_ORG_REPORT_HISTORY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_REPORT_HISTORY(ctx, req.(*MONITOR_ORG_REPORT_HISTORY_Request))
	}
	var _Monitor_MONITOR_ORG_REPORT_HISTORY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_REPORT_HISTORY_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_REPORT_HISTORY", srv)
		_Monitor_MONITOR_ORG_REPORT_HISTORY_Handler = h.Interceptor(_Monitor_MONITOR_ORG_REPORT_HISTORY_Handler)
	}

	_Monitor_MONITOR_ORG_REPORT_HISTORY_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_REPORT_HISTORY_CREATE(ctx, req.(*MONITOR_ORG_REPORT_HISTORY_CREATE_Request))
	}
	var _Monitor_MONITOR_ORG_REPORT_HISTORY_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_REPORT_HISTORY_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_REPORT_HISTORY_CREATE", srv)
		_Monitor_MONITOR_ORG_REPORT_HISTORY_CREATE_Handler = h.Interceptor(_Monitor_MONITOR_ORG_REPORT_HISTORY_CREATE_Handler)
	}

	_Monitor_MONITOR_ORG_REPORT_TASK_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_REPORT_TASK(ctx, req.(*MONITOR_ORG_REPORT_TASK_Request))
	}
	var _Monitor_MONITOR_ORG_REPORT_TASK_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_REPORT_TASK_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_REPORT_TASK", srv)
		_Monitor_MONITOR_ORG_REPORT_TASK_Handler = h.Interceptor(_Monitor_MONITOR_ORG_REPORT_TASK_Handler)
	}

	_Monitor_MONITOR_ORG_REPORT_TASK_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MONITOR_ORG_REPORT_TASK_CREATE(ctx, req.(*MONITOR_ORG_REPORT_TASK_CREATE_Request))
	}
	var _Monitor_MONITOR_ORG_REPORT_TASK_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MONITOR_ORG_REPORT_TASK_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MONITOR_ORG_REPORT_TASK_CREATE", srv)
		_Monitor_MONITOR_ORG_REPORT_TASK_CREATE_Handler = h.Interceptor(_Monitor_MONITOR_ORG_REPORT_TASK_CREATE_Handler)
	}

	_Monitor_MSP_ADDON_LOGS_RULE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_RULE(ctx, req.(*MSP_ADDON_LOGS_RULE_Request))
	}
	var _Monitor_MSP_ADDON_LOGS_RULE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MSP_ADDON_LOGS_RULE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULE", srv)
		_Monitor_MSP_ADDON_LOGS_RULE_Handler = h.Interceptor(_Monitor_MSP_ADDON_LOGS_RULE_Handler)
	}

	_Monitor_MSP_ADDON_LOGS_RULES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_RULES(ctx, req.(*MSP_ADDON_LOGS_RULES_Request))
	}
	var _Monitor_MSP_ADDON_LOGS_RULES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MSP_ADDON_LOGS_RULES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES", srv)
		_Monitor_MSP_ADDON_LOGS_RULES_Handler = h.Interceptor(_Monitor_MSP_ADDON_LOGS_RULES_Handler)
	}

	_Monitor_MSP_ADDON_LOGS_RULES_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_RULES_CREATE(ctx, req.(*MSP_ADDON_LOGS_RULES_CREATE_Request))
	}
	var _Monitor_MSP_ADDON_LOGS_RULES_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MSP_ADDON_LOGS_RULES_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_CREATE", srv)
		_Monitor_MSP_ADDON_LOGS_RULES_CREATE_Handler = h.Interceptor(_Monitor_MSP_ADDON_LOGS_RULES_CREATE_Handler)
	}

	_Monitor_MSP_ADDON_LOGS_RULES_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_RULES_DELETE(ctx, req.(*MSP_ADDON_LOGS_RULES_DELETE_Request))
	}
	var _Monitor_MSP_ADDON_LOGS_RULES_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MSP_ADDON_LOGS_RULES_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_DELETE", srv)
		_Monitor_MSP_ADDON_LOGS_RULES_DELETE_Handler = h.Interceptor(_Monitor_MSP_ADDON_LOGS_RULES_DELETE_Handler)
	}

	_Monitor_MSP_ADDON_LOGS_RULES_ENABLE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_RULES_ENABLE(ctx, req.(*MSP_ADDON_LOGS_RULES_ENABLE_Request))
	}
	var _Monitor_MSP_ADDON_LOGS_RULES_ENABLE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MSP_ADDON_LOGS_RULES_ENABLE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_ENABLE", srv)
		_Monitor_MSP_ADDON_LOGS_RULES_ENABLE_Handler = h.Interceptor(_Monitor_MSP_ADDON_LOGS_RULES_ENABLE_Handler)
	}

	_Monitor_MSP_ADDON_LOGS_RULES_TEMPLATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_RULES_TEMPLATE(ctx, req.(*MSP_ADDON_LOGS_RULES_TEMPLATE_Request))
	}
	var _Monitor_MSP_ADDON_LOGS_RULES_TEMPLATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MSP_ADDON_LOGS_RULES_TEMPLATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_TEMPLATE", srv)
		_Monitor_MSP_ADDON_LOGS_RULES_TEMPLATE_Handler = h.Interceptor(_Monitor_MSP_ADDON_LOGS_RULES_TEMPLATE_Handler)
	}

	_Monitor_MSP_ADDON_LOGS_RULES_TEMPLATES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_RULES_TEMPLATES(ctx, req.(*MSP_ADDON_LOGS_RULES_TEMPLATES_Request))
	}
	var _Monitor_MSP_ADDON_LOGS_RULES_TEMPLATES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MSP_ADDON_LOGS_RULES_TEMPLATES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_TEMPLATES", srv)
		_Monitor_MSP_ADDON_LOGS_RULES_TEMPLATES_Handler = h.Interceptor(_Monitor_MSP_ADDON_LOGS_RULES_TEMPLATES_Handler)
	}

	_Monitor_MSP_ADDON_LOGS_RULES_TEST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_RULES_TEST(ctx, req.(*MSP_ADDON_LOGS_RULES_TEST_Request))
	}
	var _Monitor_MSP_ADDON_LOGS_RULES_TEST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MSP_ADDON_LOGS_RULES_TEST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_TEST", srv)
		_Monitor_MSP_ADDON_LOGS_RULES_TEST_Handler = h.Interceptor(_Monitor_MSP_ADDON_LOGS_RULES_TEST_Handler)
	}

	_Monitor_MSP_ADDON_LOGS_RULES_UPDATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.MSP_ADDON_LOGS_RULES_UPDATE(ctx, req.(*MSP_ADDON_LOGS_RULES_UPDATE_Request))
	}
	var _Monitor_MSP_ADDON_LOGS_RULES_UPDATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_MSP_ADDON_LOGS_RULES_UPDATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "MSP_ADDON_LOGS_RULES_UPDATE", srv)
		_Monitor_MSP_ADDON_LOGS_RULES_UPDATE_Handler = h.Interceptor(_Monitor_MSP_ADDON_LOGS_RULES_UPDATE_Handler)
	}

	_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_ALARM_NOTIFIES(ctx, req.(*SPOT_DASHBOARD_ALARM_NOTIFIES_Request))
	}
	var _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALARM_NOTIFIES", srv)
		_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_Handler)
	}

	_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE(ctx, req.(*SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request))
	}
	var _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE", srv)
		_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Handler)
	}

	_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE(ctx, req.(*SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request))
	}
	var _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE", srv)
		_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Handler)
	}

	_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT(ctx, req.(*SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request))
	}
	var _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT", srv)
		_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Handler)
	}

	_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH(ctx, req.(*SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request))
	}
	var _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH", srv)
		_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Handler)
	}

	_Monitor_SPOT_DASHBOARD_ALARM_TYPES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_ALARM_TYPES(ctx, req.(*SPOT_DASHBOARD_ALARM_TYPES_Request))
	}
	var _Monitor_SPOT_DASHBOARD_ALARM_TYPES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_ALARM_TYPES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALARM_TYPES", srv)
		_Monitor_SPOT_DASHBOARD_ALARM_TYPES_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_ALARM_TYPES_Handler)
	}

	_Monitor_SPOT_DASHBOARD_ALERT_METRICS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_ALERT_METRICS(ctx, req.(*SPOT_DASHBOARD_ALERT_METRICS_Request))
	}
	var _Monitor_SPOT_DASHBOARD_ALERT_METRICS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_ALERT_METRICS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALERT_METRICS", srv)
		_Monitor_SPOT_DASHBOARD_ALERT_METRICS_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_ALERT_METRICS_Handler)
	}

	_Monitor_SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM(ctx, req.(*SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request))
	}
	var _Monitor_SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM", srv)
		_Monitor_SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Handler)
	}

	_Monitor_SPOT_DASHBOARD_CHART_META_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_CHART_META(ctx, req.(*SPOT_DASHBOARD_CHART_META_Request))
	}
	var _Monitor_SPOT_DASHBOARD_CHART_META_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_CHART_META_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_CHART_META", srv)
		_Monitor_SPOT_DASHBOARD_CHART_META_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_CHART_META_Handler)
	}

	_Monitor_SPOT_DASHBOARD_ORG_METRICS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_ORG_METRICS(ctx, req.(*SPOT_DASHBOARD_ORG_METRICS_Request))
	}
	var _Monitor_SPOT_DASHBOARD_ORG_METRICS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_ORG_METRICS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ORG_METRICS", srv)
		_Monitor_SPOT_DASHBOARD_ORG_METRICS_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_ORG_METRICS_Handler)
	}

	_Monitor_SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM(ctx, req.(*SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request))
	}
	var _Monitor_SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM", srv)
		_Monitor_SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Handler)
	}

	_Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_ORG_METRICS_QUERY(ctx, req.(*SPOT_DASHBOARD_ORG_METRICS_QUERY_Request))
	}
	var _Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ORG_METRICS_QUERY", srv)
		_Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_Handler)
	}

	_Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_ORG_METRICS_QUERY_POST(ctx, req.(*SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request))
	}
	var _Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_ORG_METRICS_QUERY_POST", srv)
		_Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Handler)
	}

	_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_PROJECT_METRICS(ctx, req.(*SPOT_DASHBOARD_PROJECT_METRICS_Request))
	}
	var _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_PROJECT_METRICS", srv)
		_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_Handler)
	}

	_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM(ctx, req.(*SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request))
	}
	var _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM", srv)
		_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Handler)
	}

	_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_PROJECT_METRICS_QUERY(ctx, req.(*SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request))
	}
	var _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_PROJECT_METRICS_QUERY", srv)
		_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Handler)
	}

	_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST(ctx, req.(*SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request))
	}
	var _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST", srv)
		_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Handler)
	}

	_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_RESOURCES_CONTAINERS(ctx, req.(*SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request))
	}
	var _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RESOURCES_CONTAINERS", srv)
		_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_Handler)
	}

	_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION(ctx, req.(*SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request))
	}
	var _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION", srv)
		_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Handler)
	}

	_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT(ctx, req.(*SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request))
	}
	var _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT", srv)
		_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Handler)
	}

	_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST(ctx, req.(*SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request))
	}
	var _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST", srv)
		_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Handler)
	}

	_Monitor_SPOT_DASHBOARD_RESOURCES_GROUP_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_RESOURCES_GROUP(ctx, req.(*SPOT_DASHBOARD_RESOURCES_GROUP_Request))
	}
	var _Monitor_SPOT_DASHBOARD_RESOURCES_GROUP_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_RESOURCES_GROUP_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RESOURCES_GROUP", srv)
		_Monitor_SPOT_DASHBOARD_RESOURCES_GROUP_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_RESOURCES_GROUP_Handler)
	}

	_Monitor_SPOT_DASHBOARD_RESOURCES_TYPES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_RESOURCES_TYPES(ctx, req.(*SPOT_DASHBOARD_RESOURCES_TYPES_Request))
	}
	var _Monitor_SPOT_DASHBOARD_RESOURCES_TYPES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_RESOURCES_TYPES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RESOURCES_TYPES", srv)
		_Monitor_SPOT_DASHBOARD_RESOURCES_TYPES_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_RESOURCES_TYPES_Handler)
	}

	_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_RUNTIME_METRICS(ctx, req.(*SPOT_DASHBOARD_RUNTIME_METRICS_Request))
	}
	var _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RUNTIME_METRICS", srv)
		_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_Handler)
	}

	_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM(ctx, req.(*SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request))
	}
	var _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM", srv)
		_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Handler)
	}

	_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_RUNTIME_METRICS_QUERY(ctx, req.(*SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request))
	}
	var _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RUNTIME_METRICS_QUERY", srv)
		_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Handler)
	}

	_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST(ctx, req.(*SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request))
	}
	var _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST", srv)
		_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Handler)
	}

	_Monitor_SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM(ctx, req.(*SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request))
	}
	var _Monitor_SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM", srv)
		_Monitor_SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Handler)
	}

	_Monitor_SPOT_DASHBOARD_SYSTEM_POD_METRICS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_DASHBOARD_SYSTEM_POD_METRICS(ctx, req.(*SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request))
	}
	var _Monitor_SPOT_DASHBOARD_SYSTEM_POD_METRICS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_DASHBOARD_SYSTEM_POD_METRICS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_DASHBOARD_SYSTEM_POD_METRICS", srv)
		_Monitor_SPOT_DASHBOARD_SYSTEM_POD_METRICS_Handler = h.Interceptor(_Monitor_SPOT_DASHBOARD_SYSTEM_POD_METRICS_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_FINISH_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_FINISH(ctx, req.(*SPOT_JVM_PROFILER_FINISH_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_FINISH_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_FINISH_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_FINISH", srv)
		_Monitor_SPOT_JVM_PROFILER_FINISH_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_FINISH_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_HEAP_GC_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_HEAP_GC(ctx, req.(*SPOT_JVM_PROFILER_HEAP_GC_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_HEAP_GC_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_HEAP_GC_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_HEAP_GC", srv)
		_Monitor_SPOT_JVM_PROFILER_HEAP_GC_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_HEAP_GC_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_HEAP_GC_STATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_HEAP_GC_STATE(ctx, req.(*SPOT_JVM_PROFILER_HEAP_GC_STATE_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_HEAP_GC_STATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_HEAP_GC_STATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_HEAP_GC_STATE", srv)
		_Monitor_SPOT_JVM_PROFILER_HEAP_GC_STATE_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_HEAP_GC_STATE_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST(ctx, req.(*SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST", srv)
		_Monitor_SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_HEAP_STAT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_HEAP_STAT(ctx, req.(*SPOT_JVM_PROFILER_HEAP_STAT_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_HEAP_STAT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_HEAP_STAT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_HEAP_STAT", srv)
		_Monitor_SPOT_JVM_PROFILER_HEAP_STAT_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_HEAP_STAT_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_JVM_INFO_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_JVM_INFO(ctx, req.(*SPOT_JVM_PROFILER_JVM_INFO_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_JVM_INFO_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_JVM_INFO_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_JVM_INFO", srv)
		_Monitor_SPOT_JVM_PROFILER_JVM_INFO_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_JVM_INFO_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_LIST(ctx, req.(*SPOT_JVM_PROFILER_LIST_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_LIST", srv)
		_Monitor_SPOT_JVM_PROFILER_LIST_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_LIST_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_SERVICES_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_SERVICES(ctx, req.(*SPOT_JVM_PROFILER_SERVICES_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_SERVICES_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_SERVICES_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_SERVICES", srv)
		_Monitor_SPOT_JVM_PROFILER_SERVICES_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_SERVICES_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_START_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_START(ctx, req.(*SPOT_JVM_PROFILER_START_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_START_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_START_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_START", srv)
		_Monitor_SPOT_JVM_PROFILER_START_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_START_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_STATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_STATE(ctx, req.(*SPOT_JVM_PROFILER_STATE_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_STATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_STATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_STATE", srv)
		_Monitor_SPOT_JVM_PROFILER_STATE_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_STATE_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_THREAD_DUMP_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_THREAD_DUMP(ctx, req.(*SPOT_JVM_PROFILER_THREAD_DUMP_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_THREAD_DUMP_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_THREAD_DUMP_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_THREAD_DUMP", srv)
		_Monitor_SPOT_JVM_PROFILER_THREAD_DUMP_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_THREAD_DUMP_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET(ctx, req.(*SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET", srv)
		_Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST(ctx, req.(*SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST", srv)
		_Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE(ctx, req.(*SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE", srv)
		_Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Handler)
	}

	_Monitor_SPOT_JVM_PROFILER_THREAD_STAT_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_JVM_PROFILER_THREAD_STAT(ctx, req.(*SPOT_JVM_PROFILER_THREAD_STAT_Request))
	}
	var _Monitor_SPOT_JVM_PROFILER_THREAD_STAT_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_JVM_PROFILER_THREAD_STAT_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_JVM_PROFILER_THREAD_STAT", srv)
		_Monitor_SPOT_JVM_PROFILER_THREAD_STAT_Handler = h.Interceptor(_Monitor_SPOT_JVM_PROFILER_THREAD_STAT_Handler)
	}

	_Monitor_SPOT_ORG_LOGS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_ORG_LOGS(ctx, req.(*SPOT_ORG_LOGS_Request))
	}
	var _Monitor_SPOT_ORG_LOGS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_ORG_LOGS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_ORG_LOGS", srv)
		_Monitor_SPOT_ORG_LOGS_Handler = h.Interceptor(_Monitor_SPOT_ORG_LOGS_Handler)
	}

	_Monitor_SPOT_ORG_LOGS_DOWNLOAD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_ORG_LOGS_DOWNLOAD(ctx, req.(*SPOT_ORG_LOGS_DOWNLOAD_Request))
	}
	var _Monitor_SPOT_ORG_LOGS_DOWNLOAD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_ORG_LOGS_DOWNLOAD_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_ORG_LOGS_DOWNLOAD", srv)
		_Monitor_SPOT_ORG_LOGS_DOWNLOAD_Handler = h.Interceptor(_Monitor_SPOT_ORG_LOGS_DOWNLOAD_Handler)
	}

	_Monitor_SPOT_RUNTIME_LOGS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_RUNTIME_LOGS(ctx, req.(*SPOT_RUNTIME_LOGS_Request))
	}
	var _Monitor_SPOT_RUNTIME_LOGS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_RUNTIME_LOGS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_RUNTIME_LOGS", srv)
		_Monitor_SPOT_RUNTIME_LOGS_Handler = h.Interceptor(_Monitor_SPOT_RUNTIME_LOGS_Handler)
	}

	_Monitor_SPOT_RUNTIME_LOGS_DOWNLOAD_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_RUNTIME_LOGS_DOWNLOAD(ctx, req.(*SPOT_RUNTIME_LOGS_DOWNLOAD_Request))
	}
	var _Monitor_SPOT_RUNTIME_LOGS_DOWNLOAD_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_RUNTIME_LOGS_DOWNLOAD_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_RUNTIME_LOGS_DOWNLOAD", srv)
		_Monitor_SPOT_RUNTIME_LOGS_DOWNLOAD_Handler = h.Interceptor(_Monitor_SPOT_RUNTIME_LOGS_DOWNLOAD_Handler)
	}

	_Monitor_SPOT_RUNTIME_REALTIME_LOGS_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SPOT_RUNTIME_REALTIME_LOGS(ctx, req.(*SPOT_RUNTIME_REALTIME_LOGS_Request))
	}
	var _Monitor_SPOT_RUNTIME_REALTIME_LOGS_info transport.ServiceInfo
	if h.Interceptor != nil {
		_Monitor_SPOT_RUNTIME_REALTIME_LOGS_info = transport.NewServiceInfo("erda.openapiv1.monitor.monitor", "SPOT_RUNTIME_REALTIME_LOGS", srv)
		_Monitor_SPOT_RUNTIME_REALTIME_LOGS_Handler = h.Interceptor(_Monitor_SPOT_RUNTIME_REALTIME_LOGS_Handler)
	}

	var serviceDesc = _Monitor_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "MONITOR_ADDON_LOGS_SEARCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ADDON_LOGS_SEARCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ADDON_LOGS_SEARCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ADDON_LOGS_SEARCH_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ADDON_LOGS_SEARCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ADDON_LOGS_SEARCH",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ADDON_LOGS_SEARCH_Handler)
			},
		},
		{
			MethodName: "MONITOR_ADDON_LOGS_TAGS_TREE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ADDON_LOGS_TAGS_TREE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ADDON_LOGS_TAGS_TREE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ADDON_LOGS_TAGS_TREE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ADDON_LOGS_TAGS_TREE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ADDON_LOGS_TAGS_TREE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ADDON_LOGS_TAGS_TREE_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_ALERT_ID_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_ALERT_ID_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_ALERT_ID_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_ALERT_ID_DELETE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_ALERT_ID_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_ID_DELETE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_ALERT_ID_DELETE_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_ALERT_ID_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_ALERT_ID_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_ALERT_ID_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_ALERT_ID_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_ALERT_ID_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_ID_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_ALERT_ID_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_ALERT_ID_PUT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_ALERT_ID_PUT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_ALERT_ID_PUT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_ALERT_ID_PUT_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_ALERT_ID_PUT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_ID_PUT",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_ALERT_ID_PUT_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_ALERT_ID_SWITCH_PUT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_ALERT_ID_SWITCH_PUT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_ALERT_ID_SWITCH_PUT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_ALERT_ID_SWITCH_PUT_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_ALERT_ID_SWITCH_PUT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_ID_SWITCH_PUT",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_ALERT_ID_SWITCH_PUT_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_ALERT_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_ALERT_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_ALERT_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_ALERT_LIST_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_ALERT_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_LIST",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_ALERT_LIST_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_ALERT_POST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_ALERT_POST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_ALERT_POST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_ALERT_POST_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_ALERT_POST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_POST",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_ALERT_POST_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_ALERT_RULE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_ALERT_RULE_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_ALERT_RULE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_ALERT_RULE_LIST_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_ALERT_RULE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_ALERT_RULE_LIST",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_ALERT_RULE_LIST_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_DELETE_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_CUSTOMIZE_ALERT_ID_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_CUSTOMIZE_ALERT_ID_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_ID_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_PUT_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_ID_SWITCH_PUT_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_CUSTOMIZE_ALERT_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_CUSTOMIZE_ALERT_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_CUSTOMIZE_ALERT_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_LIST_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_LIST",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_LIST_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_METRICS_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_NOTIFIES_TARGETS_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_CUSTOMIZE_ALERT_POST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_CUSTOMIZE_ALERT_POST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_CUSTOMIZE_ALERT_POST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_POST_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_POST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_CUSTOMIZE_ALERT_POST",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_CUSTOMIZE_ALERT_POST_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_INSTANCE_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_INSTANCE_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_INSTANCE_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_INSTANCE_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_INSTANCE_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_INSTANCE_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_INSTANCE_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_RUNTIME_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_RUNTIME_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_RUNTIME_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_RUNTIME_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_RUNTIME_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_RUNTIME_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_RUNTIME_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_MESSAGE_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_EXCEPTION_TYPES_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_GLOBAL_OVERVIEW_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_PROCESS_DISKIO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_PROCESS_DISKIO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_PROCESS_DISKIO",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_PROCESS_DISKIO_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_PROCESS_INSTANCE_IDS_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_PROCESS_NETIO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_PROCESS_NETIO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_PROCESS_NETIO_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_PROCESS_NETIO",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_PROCESS_NETIO_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGS_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_SEARCH_TAGV_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_SERVICES_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_SERVICES_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_SERVICES_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_SERVICES_LIST_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_SERVICES_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_SERVICES_LIST",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_SERVICES_LIST_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_SERVICE_INSTANCES_LIST_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_SERVICE_OVERVIEW_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_SERVICE_REQUESTS_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_TRANSLATION",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_TRANSLATION_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_TRANSLATION(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_TRANSLATION",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_TRANSLATION_DB",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_TRANSLATION_DB(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_DB_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_TRANSLATION_DB",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_DB_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TOPOLOGY_TRANSLATION_SLOW_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TRACE_ID_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TRACE_ID_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TRACE_ID_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TRACE_ID_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TRACE_ID_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TRACE_ID_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TRACE_ID_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_APM_TRACE_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_APM_TRACE_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_APM_TRACE_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_APM_TRACE_LIST_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_APM_TRACE_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_APM_TRACE_LIST",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_APM_TRACE_LIST_Handler)
			},
		},
		{
			MethodName: "MONITOR_CLUSTER_STATUS_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_CLUSTER_STATUS_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_CLUSTER_STATUS_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_CLUSTER_STATUS_GET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_CLUSTER_STATUS_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_CLUSTER_STATUS_GET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_CLUSTER_STATUS_GET_Handler)
			},
		},
		{
			MethodName: "MONITOR_DASHBOARD_EXPORT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_DASHBOARD_EXPORT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_DASHBOARD_EXPORT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_DASHBOARD_EXPORT_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_DASHBOARD_EXPORT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_EXPORT",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_DASHBOARD_EXPORT_Handler)
			},
		},
		{
			MethodName: "MONITOR_DASHBOARD_IMPORT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_DASHBOARD_IMPORT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_DASHBOARD_IMPORT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_DASHBOARD_IMPORT_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_DASHBOARD_IMPORT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_IMPORT",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_DASHBOARD_IMPORT_Handler)
			},
		},
		{
			MethodName: "MONITOR_DASHBOARD_PARSE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_DASHBOARD_PARSE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_DASHBOARD_PARSE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_DASHBOARD_PARSE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_DASHBOARD_PARSE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_PARSE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_DASHBOARD_PARSE_Handler)
			},
		},
		{
			MethodName: "MONITOR_DASHBOARD_TEMPLATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_DASHBOARD_TEMPLATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_DASHBOARD_TEMPLATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_DASHBOARD_TEMPLATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_DASHBOARD_TEMPLATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_TEMPLATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_DASHBOARD_TEMPLATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_DASHBOARD_TEMPLATES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_DASHBOARD_TEMPLATES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_DASHBOARD_TEMPLATES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_DASHBOARD_TEMPLATES_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_DASHBOARD_TEMPLATES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_TEMPLATES",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_DASHBOARD_TEMPLATES_Handler)
			},
		},
		{
			MethodName: "MONITOR_DASHBOARD_TEMPLATE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_DASHBOARD_TEMPLATE_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_DASHBOARD_TEMPLATE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_DASHBOARD_TEMPLATE_CREATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_DASHBOARD_TEMPLATE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_TEMPLATE_CREATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_DASHBOARD_TEMPLATE_CREATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_DASHBOARD_TEMPLATE_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_DASHBOARD_TEMPLATE_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_DASHBOARD_TEMPLATE_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_DASHBOARD_TEMPLATE_DELETE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_DASHBOARD_TEMPLATE_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_TEMPLATE_DELETE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_DASHBOARD_TEMPLATE_DELETE_Handler)
			},
		},
		{
			MethodName: "MONITOR_DASHBOARD_TEMPLATE_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_DASHBOARD_TEMPLATE_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_DASHBOARD_TEMPLATE_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_DASHBOARD_TEMPLATE_UPDATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_DASHBOARD_TEMPLATE_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_DASHBOARD_TEMPLATE_UPDATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_DASHBOARD_TEMPLATE_UPDATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_FILEMANAGER_DOWNLOAD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_FILEMANAGER_DOWNLOAD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_FILEMANAGER_DOWNLOAD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_FILEMANAGER_DOWNLOAD_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_FILEMANAGER_DOWNLOAD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_FILEMANAGER_DOWNLOAD",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_FILEMANAGER_DOWNLOAD_Handler)
			},
		},
		{
			MethodName: "MONITOR_FILEMANAGER_UPLOAD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_FILEMANAGER_UPLOAD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_FILEMANAGER_UPLOAD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_FILEMANAGER_UPLOAD_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_FILEMANAGER_UPLOAD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_FILEMANAGER_UPLOAD",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_FILEMANAGER_UPLOAD_Handler)
			},
		},
		{
			MethodName: "MONITOR_HOST_STATUS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(HostStatusListRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_HOST_STATUS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_HOST_STATUS_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_HOST_STATUS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_HOST_STATUS",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_HOST_STATUS_Handler)
			},
		},
		{
			MethodName: "MONITOR_NOTIFY_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_NOTIFY_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_NOTIFY_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_NOTIFY_CREATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_NOTIFY_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_CREATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_NOTIFY_CREATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_NOTIFY_CUSTOMIZE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_NOTIFY_CUSTOMIZE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_NOTIFY_CUSTOMIZE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_NOTIFY_CUSTOMIZE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_NOTIFY_CUSTOMIZE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_CUSTOMIZE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_NOTIFY_CUSTOMIZE_Handler)
			},
		},
		{
			MethodName: "MONITOR_NOTIFY_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_NOTIFY_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_NOTIFY_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_NOTIFY_DELETE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_NOTIFY_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_DELETE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_NOTIFY_DELETE_Handler)
			},
		},
		{
			MethodName: "MONITOR_NOTIFY_ENABLE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_NOTIFY_ENABLE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_NOTIFY_ENABLE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_NOTIFY_ENABLE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_NOTIFY_ENABLE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_ENABLE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_NOTIFY_ENABLE_Handler)
			},
		},
		{
			MethodName: "MONITOR_NOTIFY_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_NOTIFY_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_NOTIFY_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_NOTIFY_LIST_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_NOTIFY_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_LIST",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_NOTIFY_LIST_Handler)
			},
		},
		{
			MethodName: "MONITOR_NOTIFY_TEMPALTES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_NOTIFY_TEMPALTES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_NOTIFY_TEMPALTES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_NOTIFY_TEMPALTES_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_NOTIFY_TEMPALTES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_TEMPALTES",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_NOTIFY_TEMPALTES_Handler)
			},
		},
		{
			MethodName: "MONITOR_NOTIFY_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_NOTIFY_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_NOTIFY_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_NOTIFY_UPDATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_NOTIFY_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_NOTIFY_UPDATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_NOTIFY_UPDATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_ALERT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_ALERT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_ALERT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_ALERT_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_ALERT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERT",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_ALERT_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_ALERTS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_ALERTS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_ALERTS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_ALERTS_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_ALERTS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERTS",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_ALERTS_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_ALERTS_RULES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_ALERTS_RULES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_ALERTS_RULES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_ALERTS_RULES_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_ALERTS_RULES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERTS_RULES",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_ALERTS_RULES_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_ALERT_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_ALERT_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_ALERT_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_ALERT_CREATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_ALERT_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERT_CREATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_ALERT_CREATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_ALERT_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_ALERT_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_ALERT_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_ALERT_DELETE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_ALERT_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERT_DELETE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_ALERT_DELETE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_ALERT_SWITCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_ALERT_SWITCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_ALERT_SWITCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_ALERT_SWITCH_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_ALERT_SWITCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERT_SWITCH",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_ALERT_SWITCH_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_ALERT_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_ALERT_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_ALERT_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_ALERT_UPDATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_ALERT_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_ALERT_UPDATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_ALERT_UPDATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_CUSTOMIZE_ALERT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_CUSTOMIZE_ALERT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_CUSTOMIZE_ALERT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_CUSTOMIZE_ALERTS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_CUSTOMIZE_ALERTS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_CUSTOMIZE_ALERTS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERTS_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERTS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERTS",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERTS_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_CREATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DASH_PREVIEW_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_DELETE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_METRICS_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_NOTIFY_TARGET_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_SWITCH_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORGS_CUSTOMIZE_ALERT_UPDATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_ALERT_RECORD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_ALERT_RECORD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_ALERT_RECORD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_ALERT_RECORD_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_ALERT_RECORD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_ALERT_RECORD",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_ALERT_RECORD_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_ALERT_RECORDS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_ALERT_RECORDS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_ALERT_RECORDS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_ALERT_RECORDS_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_ALERT_RECORDS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_ALERT_RECORDS",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_ALERT_RECORDS_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_ALERT_RECORD_ATTRS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_ALERT_RECORD_ATTRS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_ALERT_RECORD_ATTRS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_ALERT_RECORD_ATTRS_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_ALERT_RECORD_ATTRS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_ALERT_RECORD_ATTRS",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_ALERT_RECORD_ATTRS_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_ALERT_RECORD_HISTORIES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_ALERT_RECORD_HISTORIES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_ALERT_RECORD_HISTORIES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_ALERT_RECORD_HISTORIES_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_ALERT_RECORD_HISTORIES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_ALERT_RECORD_HISTORIES",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_ALERT_RECORD_HISTORIES_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_CREATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_ALERT_RECORD_ISSUE_UPDATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_HOSTS_ALERT_RECORDS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_HOSTS_ALERT_RECORDS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_HOSTS_ALERT_RECORDS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_HOSTS_ALERT_RECORDS_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_HOSTS_ALERT_RECORDS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_HOSTS_ALERT_RECORDS",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_HOSTS_ALERT_RECORDS_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_LOGS_RULE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_LOGS_RULE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_LOGS_RULE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_LOGS_RULE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_LOGS_RULE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_LOGS_RULE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_LOGS_RULES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_LOGS_RULES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_LOGS_RULES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_LOGS_RULES_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_LOGS_RULES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_LOGS_RULES_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_LOGS_RULES_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_LOGS_RULES_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_LOGS_RULES_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_LOGS_RULES_CREATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_LOGS_RULES_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_CREATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_LOGS_RULES_CREATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_LOGS_RULES_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_LOGS_RULES_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_LOGS_RULES_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_LOGS_RULES_DELETE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_LOGS_RULES_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_DELETE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_LOGS_RULES_DELETE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_LOGS_RULES_ENABLE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_LOGS_RULES_ENABLE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_LOGS_RULES_ENABLE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_LOGS_RULES_ENABLE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_LOGS_RULES_ENABLE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_ENABLE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_LOGS_RULES_ENABLE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_LOGS_RULES_TEMPLATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_LOGS_RULES_TEMPLATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_LOGS_RULES_TEMPLATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_TEMPLATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_LOGS_RULES_TEMPLATES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_LOGS_RULES_TEMPLATES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_LOGS_RULES_TEMPLATES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATES_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_TEMPLATES",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_LOGS_RULES_TEMPLATES_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_LOGS_RULES_TEST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_LOGS_RULES_TEST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_LOGS_RULES_TEST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_LOGS_RULES_TEST_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_LOGS_RULES_TEST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_TEST",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_LOGS_RULES_TEST_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_LOGS_RULES_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_LOGS_RULES_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_LOGS_RULES_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_LOGS_RULES_UPDATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_LOGS_RULES_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_RULES_UPDATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_LOGS_RULES_UPDATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_LOGS_SEARCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_LOGS_SEARCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_LOGS_SEARCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_LOGS_SEARCH_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_LOGS_SEARCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_SEARCH",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_LOGS_SEARCH_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_LOGS_STATISTIC",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_LOGS_STATISTIC_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_LOGS_STATISTIC(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_LOGS_STATISTIC_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_LOGS_STATISTIC_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_STATISTIC",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_LOGS_STATISTIC_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_LOGS_TAGS_TREE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_LOGS_TAGS_TREE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_LOGS_TAGS_TREE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_LOGS_TAGS_TREE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_LOGS_TAGS_TREE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_LOGS_TAGS_TREE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_LOGS_TAGS_TREE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_REPORT_HISTORY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_REPORT_HISTORY_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_REPORT_HISTORY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_REPORT_HISTORY_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_REPORT_HISTORY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_REPORT_HISTORY",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_REPORT_HISTORY_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_REPORT_HISTORY_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_REPORT_HISTORY_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_REPORT_HISTORY_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_REPORT_HISTORY_CREATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_REPORT_HISTORY_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_REPORT_HISTORY_CREATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_REPORT_HISTORY_CREATE_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_REPORT_TASK",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_REPORT_TASK_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_REPORT_TASK(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_REPORT_TASK_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_REPORT_TASK_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_REPORT_TASK",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_REPORT_TASK_Handler)
			},
		},
		{
			MethodName: "MONITOR_ORG_REPORT_TASK_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MONITOR_ORG_REPORT_TASK_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MONITOR_ORG_REPORT_TASK_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MONITOR_ORG_REPORT_TASK_CREATE_info)
				}
				if interceptor == nil {
					return _Monitor_MONITOR_ORG_REPORT_TASK_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MONITOR_ORG_REPORT_TASK_CREATE",
				}
				return interceptor(ctx, in, info, _Monitor_MONITOR_ORG_REPORT_TASK_CREATE_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_RULE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_RULE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MSP_ADDON_LOGS_RULE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MSP_ADDON_LOGS_RULE_info)
				}
				if interceptor == nil {
					return _Monitor_MSP_ADDON_LOGS_RULE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULE",
				}
				return interceptor(ctx, in, info, _Monitor_MSP_ADDON_LOGS_RULE_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_RULES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_RULES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MSP_ADDON_LOGS_RULES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MSP_ADDON_LOGS_RULES_info)
				}
				if interceptor == nil {
					return _Monitor_MSP_ADDON_LOGS_RULES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES",
				}
				return interceptor(ctx, in, info, _Monitor_MSP_ADDON_LOGS_RULES_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_RULES_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_RULES_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MSP_ADDON_LOGS_RULES_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MSP_ADDON_LOGS_RULES_CREATE_info)
				}
				if interceptor == nil {
					return _Monitor_MSP_ADDON_LOGS_RULES_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_CREATE",
				}
				return interceptor(ctx, in, info, _Monitor_MSP_ADDON_LOGS_RULES_CREATE_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_RULES_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_RULES_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MSP_ADDON_LOGS_RULES_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MSP_ADDON_LOGS_RULES_DELETE_info)
				}
				if interceptor == nil {
					return _Monitor_MSP_ADDON_LOGS_RULES_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_DELETE",
				}
				return interceptor(ctx, in, info, _Monitor_MSP_ADDON_LOGS_RULES_DELETE_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_RULES_ENABLE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_RULES_ENABLE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MSP_ADDON_LOGS_RULES_ENABLE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MSP_ADDON_LOGS_RULES_ENABLE_info)
				}
				if interceptor == nil {
					return _Monitor_MSP_ADDON_LOGS_RULES_ENABLE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_ENABLE",
				}
				return interceptor(ctx, in, info, _Monitor_MSP_ADDON_LOGS_RULES_ENABLE_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_RULES_TEMPLATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_RULES_TEMPLATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MSP_ADDON_LOGS_RULES_TEMPLATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MSP_ADDON_LOGS_RULES_TEMPLATE_info)
				}
				if interceptor == nil {
					return _Monitor_MSP_ADDON_LOGS_RULES_TEMPLATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_TEMPLATE",
				}
				return interceptor(ctx, in, info, _Monitor_MSP_ADDON_LOGS_RULES_TEMPLATE_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_RULES_TEMPLATES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_RULES_TEMPLATES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MSP_ADDON_LOGS_RULES_TEMPLATES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MSP_ADDON_LOGS_RULES_TEMPLATES_info)
				}
				if interceptor == nil {
					return _Monitor_MSP_ADDON_LOGS_RULES_TEMPLATES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_TEMPLATES",
				}
				return interceptor(ctx, in, info, _Monitor_MSP_ADDON_LOGS_RULES_TEMPLATES_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_RULES_TEST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_RULES_TEST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MSP_ADDON_LOGS_RULES_TEST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MSP_ADDON_LOGS_RULES_TEST_info)
				}
				if interceptor == nil {
					return _Monitor_MSP_ADDON_LOGS_RULES_TEST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_TEST",
				}
				return interceptor(ctx, in, info, _Monitor_MSP_ADDON_LOGS_RULES_TEST_Handler)
			},
		},
		{
			MethodName: "MSP_ADDON_LOGS_RULES_UPDATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(MSP_ADDON_LOGS_RULES_UPDATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).MSP_ADDON_LOGS_RULES_UPDATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_MSP_ADDON_LOGS_RULES_UPDATE_info)
				}
				if interceptor == nil {
					return _Monitor_MSP_ADDON_LOGS_RULES_UPDATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/MSP_ADDON_LOGS_RULES_UPDATE",
				}
				return interceptor(ctx, in, info, _Monitor_MSP_ADDON_LOGS_RULES_UPDATE_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_ALARM_NOTIFIES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_ALARM_NOTIFIES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_ALARM_NOTIFIES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALARM_NOTIFIES",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_CREATE_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_DELETE_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_EDIT_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_ALARM_NOTIFIES_SWITCH_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_ALARM_TYPES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_ALARM_TYPES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_ALARM_TYPES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_ALARM_TYPES_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_ALARM_TYPES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALARM_TYPES",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_ALARM_TYPES_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_ALERT_METRICS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_ALERT_METRICS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_ALERT_METRICS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_ALERT_METRICS_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_ALERT_METRICS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALERT_METRICS",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_ALERT_METRICS_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_ALERT_METRICS_HISTOGRAM_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_CHART_META",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_CHART_META_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_CHART_META(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_CHART_META_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_CHART_META_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_CHART_META",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_CHART_META_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_ORG_METRICS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_ORG_METRICS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_ORG_METRICS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_ORG_METRICS_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_ORG_METRICS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ORG_METRICS",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_ORG_METRICS_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_ORG_METRICS_HISTOGRAM_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_ORG_METRICS_QUERY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_ORG_METRICS_QUERY_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_ORG_METRICS_QUERY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ORG_METRICS_QUERY",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_ORG_METRICS_QUERY_POST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_ORG_METRICS_QUERY_POST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_ORG_METRICS_QUERY_POST",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_ORG_METRICS_QUERY_POST_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_PROJECT_METRICS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_PROJECT_METRICS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_PROJECT_METRICS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_PROJECT_METRICS",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_HISTOGRAM_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_PROJECT_METRICS_QUERY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_PROJECT_METRICS_QUERY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_PROJECT_METRICS_QUERY",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_PROJECT_METRICS_QUERY_POST_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_RESOURCES_CONTAINERS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_RESOURCES_CONTAINERS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_RESOURCES_CONTAINERS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RESOURCES_CONTAINERS",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_ALLOCATION_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_COUNT_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_RESOURCES_CONTAINERS_LIST_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_RESOURCES_GROUP",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_RESOURCES_GROUP_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_RESOURCES_GROUP(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_RESOURCES_GROUP_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_RESOURCES_GROUP_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RESOURCES_GROUP",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_RESOURCES_GROUP_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_RESOURCES_TYPES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_RESOURCES_TYPES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_RESOURCES_TYPES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_RESOURCES_TYPES_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_RESOURCES_TYPES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RESOURCES_TYPES",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_RESOURCES_TYPES_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_RUNTIME_METRICS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_RUNTIME_METRICS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_RUNTIME_METRICS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RUNTIME_METRICS",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_HISTOGRAM_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_RUNTIME_METRICS_QUERY",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_RUNTIME_METRICS_QUERY(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RUNTIME_METRICS_QUERY",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_RUNTIME_METRICS_QUERY_POST_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_SYSTEM_METRICS_HISTOGRAM_Handler)
			},
		},
		{
			MethodName: "SPOT_DASHBOARD_SYSTEM_POD_METRICS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_DASHBOARD_SYSTEM_POD_METRICS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_DASHBOARD_SYSTEM_POD_METRICS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_DASHBOARD_SYSTEM_POD_METRICS_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_DASHBOARD_SYSTEM_POD_METRICS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_DASHBOARD_SYSTEM_POD_METRICS",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_DASHBOARD_SYSTEM_POD_METRICS_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_FINISH",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_FINISH_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_FINISH(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_FINISH_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_FINISH_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_FINISH",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_FINISH_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_HEAP_GC",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_HEAP_GC_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_HEAP_GC(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_HEAP_GC_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_HEAP_GC_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_HEAP_GC",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_HEAP_GC_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_HEAP_GC_STATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_HEAP_GC_STATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_HEAP_GC_STATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_HEAP_GC_STATE_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_HEAP_GC_STATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_HEAP_GC_STATE",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_HEAP_GC_STATE_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_HEAP_SNAPSHOT_LIST_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_HEAP_STAT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_HEAP_STAT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_HEAP_STAT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_HEAP_STAT_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_HEAP_STAT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_HEAP_STAT",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_HEAP_STAT_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_JVM_INFO",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_JVM_INFO_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_JVM_INFO(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_JVM_INFO_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_JVM_INFO_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_JVM_INFO",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_JVM_INFO_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_LIST_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_LIST",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_LIST_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_SERVICES",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_SERVICES_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_SERVICES(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_SERVICES_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_SERVICES_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_SERVICES",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_SERVICES_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_START",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_START_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_START(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_START_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_START_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_START",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_START_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_STATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_STATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_STATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_STATE_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_STATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_STATE",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_STATE_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_THREAD_DUMP",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_THREAD_DUMP_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_THREAD_DUMP(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_THREAD_DUMP_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_THREAD_DUMP_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_THREAD_DUMP",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_THREAD_DUMP_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_GET_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_LIST_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_THREAD_SNAPSHOT_STATE_Handler)
			},
		},
		{
			MethodName: "SPOT_JVM_PROFILER_THREAD_STAT",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_JVM_PROFILER_THREAD_STAT_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_JVM_PROFILER_THREAD_STAT(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_JVM_PROFILER_THREAD_STAT_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_JVM_PROFILER_THREAD_STAT_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_JVM_PROFILER_THREAD_STAT",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_JVM_PROFILER_THREAD_STAT_Handler)
			},
		},
		{
			MethodName: "SPOT_ORG_LOGS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_ORG_LOGS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_ORG_LOGS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_ORG_LOGS_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_ORG_LOGS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_ORG_LOGS",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_ORG_LOGS_Handler)
			},
		},
		{
			MethodName: "SPOT_ORG_LOGS_DOWNLOAD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_ORG_LOGS_DOWNLOAD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_ORG_LOGS_DOWNLOAD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_ORG_LOGS_DOWNLOAD_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_ORG_LOGS_DOWNLOAD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_ORG_LOGS_DOWNLOAD",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_ORG_LOGS_DOWNLOAD_Handler)
			},
		},
		{
			MethodName: "SPOT_RUNTIME_LOGS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_RUNTIME_LOGS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_RUNTIME_LOGS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_RUNTIME_LOGS_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_RUNTIME_LOGS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_RUNTIME_LOGS",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_RUNTIME_LOGS_Handler)
			},
		},
		{
			MethodName: "SPOT_RUNTIME_LOGS_DOWNLOAD",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_RUNTIME_LOGS_DOWNLOAD_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_RUNTIME_LOGS_DOWNLOAD(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_RUNTIME_LOGS_DOWNLOAD_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_RUNTIME_LOGS_DOWNLOAD_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_RUNTIME_LOGS_DOWNLOAD",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_RUNTIME_LOGS_DOWNLOAD_Handler)
			},
		},
		{
			MethodName: "SPOT_RUNTIME_REALTIME_LOGS",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SPOT_RUNTIME_REALTIME_LOGS_Request)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServer).SPOT_RUNTIME_REALTIME_LOGS(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _Monitor_SPOT_RUNTIME_REALTIME_LOGS_info)
				}
				if interceptor == nil {
					return _Monitor_SPOT_RUNTIME_REALTIME_LOGS_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.openapiv1.monitor.monitor/SPOT_RUNTIME_REALTIME_LOGS",
				}
				return interceptor(ctx, in, info, _Monitor_SPOT_RUNTIME_REALTIME_LOGS_Handler)
			},
		},
	}
	return &serviceDesc
}
